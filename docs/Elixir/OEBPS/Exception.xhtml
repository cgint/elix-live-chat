<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"
      xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>Exception - Elixir v1.18.4</title>
    <meta name="generator" content="ExDoc v0.38.2" />
    <link type="text/css" rel="stylesheet" href="dist/epub-elixir-FNUUKFP7.css" />
    <script src="dist/epub-4WIP524F.js"></script>

  </head>
  <body class="content-inner">

    <h1 id="content">
Exception <small>behaviour</small>
    </h1>


      <section id="moduledoc" class="docstring">
<p>Functions for dealing with throw/catch/exit and exceptions.</p><p>This module also defines the behaviour required by custom
exceptions. To define your own, see <a href="Kernel.xhtml#defexception/1"><code class="inline">defexception/1</code></a>.</p><h2 id="module-formatting-functions">Formatting functions</h2><p>Several functions in this module help format exceptions.
Some of these functions expect the stacktrace as argument.
The stacktrace is typically available inside catch and
rescue by using the <a href="Kernel.SpecialForms.xhtml#__STACKTRACE__/0"><code class="inline">__STACKTRACE__/0</code></a> variable.</p><p>Do not rely on the particular format returned by the
functions in this module. They may be changed in future releases
in order to better suit Elixir's tool chain. In other words,
by using the functions in this module it is guaranteed you will
format exceptions as in the current Elixir version being used.</p>
      </section>


      <section id="summary" class="details-list">
        <h1 class="section-heading">Summary</h1>
<div class="summary-types summary">
  <h2>
    <a href="#types">Types</a>
  </h2>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#t:arity_or_args/0" data-no-tooltip="" translate="no">arity_or_args()</a>

      </div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#t:kind/0" data-no-tooltip="" translate="no">kind()</a>

      </div>

        <div class="summary-synopsis"><p>The kind handled by formatting functions</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#t:location/0" data-no-tooltip="" translate="no">location()</a>

      </div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#t:non_error_kind/0" data-no-tooltip="" translate="no">non_error_kind()</a>

      </div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#t:stacktrace/0" data-no-tooltip="" translate="no">stacktrace()</a>

      </div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#t:stacktrace_entry/0" data-no-tooltip="" translate="no">stacktrace_entry()</a>

      </div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#t:t/0" data-no-tooltip="" translate="no">t()</a>

      </div>

        <div class="summary-synopsis"><p>The exception type</p></div>

    </div>

</div>
<div class="summary-callbacks summary">
  <h2>
    <a href="#callbacks">Callbacks</a>
  </h2>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#c:blame/2" data-no-tooltip="" translate="no">blame(t, stacktrace)</a>

      </div>

        <div class="summary-synopsis"><p>Called from <a><code class="inline">Exception.blame/3</code></a> to augment the exception struct.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#c:exception/1" data-no-tooltip="" translate="no">exception(term)</a>

      </div>

        <div class="summary-synopsis"><p>Receives the arguments given to <a><code class="inline">raise/2</code></a> and returns the exception struct.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#c:message/1" data-no-tooltip="" translate="no">message(t)</a>

      </div>

        <div class="summary-synopsis"><p>Receives the exception struct and must return its message.</p></div>

    </div>

</div>
<div class="summary-functions summary">
  <h2>
    <a href="#functions">Functions</a>
  </h2>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#blame/3" data-no-tooltip="" translate="no">blame(kind, error, stacktrace)</a>

      </div>

        <div class="summary-synopsis"><p>Attaches information to exceptions for extra debugging.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#blame_mfa/3" data-no-tooltip="" translate="no">blame_mfa(module, function, args)</a>

      </div>

        <div class="summary-synopsis"><p>Blames the invocation of the given module, function and arguments.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#format/3" data-no-tooltip="" translate="no">format(kind, payload, stacktrace \\ [])</a>

      </div>

        <div class="summary-synopsis"><p>Normalizes and formats throw/errors/exits and stacktraces.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#format_banner/3" data-no-tooltip="" translate="no">format_banner(kind, exception, stacktrace \\ [])</a>

      </div>

        <div class="summary-synopsis"><p>Normalizes and formats any throw/error/exit.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#format_exit/1" data-no-tooltip="" translate="no">format_exit(reason)</a>

      </div>

        <div class="summary-synopsis"><p>Formats an exit. It returns a string.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#format_fa/2" data-no-tooltip="" translate="no">format_fa(fun, arity)</a>

      </div>

        <div class="summary-synopsis"><p>Receives an anonymous function and arity and formats it as
shown in stacktraces. The arity may also be a list of arguments.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#format_file_line/3" data-no-tooltip="" translate="no">format_file_line(file, line, suffix \\ &quot;&quot;)</a>

      </div>

        <div class="summary-synopsis"><p>Formats the given <code class="inline">file</code> and <code class="inline">line</code> as shown in stacktraces.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#format_file_line_column/4" data-no-tooltip="" translate="no">format_file_line_column(file, line, column, suffix \\ &quot;&quot;)</a>

      </div>

        <div class="summary-synopsis"><p>Formats the given <code class="inline">file</code>, <code class="inline">line</code>, and <code class="inline">column</code> as shown in stacktraces.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#format_mfa/3" data-no-tooltip="" translate="no">format_mfa(module, fun, arity)</a>

      </div>

        <div class="summary-synopsis"><p>Receives a module, fun and arity and formats it
as shown in stacktraces. The arity may also be a list
of arguments.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#format_stacktrace/1" data-no-tooltip="" translate="no">format_stacktrace(trace \\ nil)</a>

      </div>

        <div class="summary-synopsis"><p>Formats the stacktrace.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#format_stacktrace_entry/1" data-no-tooltip="" translate="no">format_stacktrace_entry(entry)</a>

      </div>

        <div class="summary-synopsis"><p>Receives a stacktrace entry and formats it into a string.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#message/1" data-no-tooltip="" translate="no">message(exception)</a>

      </div>

        <div class="summary-synopsis"><p>Gets the message for an <code class="inline">exception</code>.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#normalize/3" data-no-tooltip="" translate="no">normalize(kind, payload, stacktrace \\ [])</a>

      </div>

        <div class="summary-synopsis"><p>Normalizes an exception, converting Erlang exceptions
to Elixir exceptions.</p></div>

    </div>

</div>

      </section>


      <section id="types" class="details-list">
        <h1 class="section-heading">Types</h1>

        <div class="types-list">
<section class="detail" id="t:arity_or_args/0">

  <div class="detail-header">
    <a href="#t:arity_or_args/0" class="detail-link" data-no-tooltip="" aria-label="Link to this type">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">arity_or_args()</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/exception.ex#L38" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@type</span> arity_or_args() :: <a href="typespecs.xhtml#basic-types">non_neg_integer</a>() | <a href="typespecs.xhtml#built-in-types">list</a>()</pre>

      </div>


  </section>
</section>
<section class="detail" id="t:kind/0">

  <div class="detail-header">
    <a href="#t:kind/0" class="detail-link" data-no-tooltip="" aria-label="Link to this type">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">kind()</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/exception.ex#L30" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@type</span> kind() :: :error | <a href="#t:non_error_kind/0">non_error_kind</a>()</pre>

      </div>

<p>The kind handled by formatting functions</p>
  </section>
</section>
<section class="detail" id="t:location/0">

  <div class="detail-header">
    <a href="#t:location/0" class="detail-link" data-no-tooltip="" aria-label="Link to this type">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">location()</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/exception.ex#L39" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@type</span> location() :: <a href="typespecs.xhtml#built-in-types">keyword</a>()</pre>

      </div>


  </section>
</section>
<section class="detail" id="t:non_error_kind/0">

  <div class="detail-header">
    <a href="#t:non_error_kind/0" class="detail-link" data-no-tooltip="" aria-label="Link to this type">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">non_error_kind()</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/exception.ex#L31" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@type</span> non_error_kind() :: :exit | :throw | {:EXIT, <a href="typespecs.xhtml#basic-types">pid</a>()}</pre>

      </div>


  </section>
</section>
<section class="detail" id="t:stacktrace/0">

  <div class="detail-header">
    <a href="#t:stacktrace/0" class="detail-link" data-no-tooltip="" aria-label="Link to this type">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">stacktrace()</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/exception.ex#L33" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@type</span> stacktrace() :: [<a href="#t:stacktrace_entry/0">stacktrace_entry</a>()]</pre>

      </div>


  </section>
</section>
<section class="detail" id="t:stacktrace_entry/0">

  <div class="detail-header">
    <a href="#t:stacktrace_entry/0" class="detail-link" data-no-tooltip="" aria-label="Link to this type">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">stacktrace_entry()</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/exception.ex#L34" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@type</span> stacktrace_entry() ::
  {<a href="typespecs.xhtml#built-in-types">module</a>(), <a href="typespecs.xhtml#basic-types">atom</a>(), <a href="#t:arity_or_args/0">arity_or_args</a>(), <a href="#t:location/0">location</a>()}
  | {(... -&gt; <a href="typespecs.xhtml#basic-types">any</a>()), <a href="#t:arity_or_args/0">arity_or_args</a>(), <a href="#t:location/0">location</a>()}</pre>

      </div>


  </section>
</section>
<section class="detail" id="t:t/0">

  <div class="detail-header">
    <a href="#t:t/0" class="detail-link" data-no-tooltip="" aria-label="Link to this type">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">t()</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/exception.ex#L23" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@type</span> t() :: %{
  :__struct__ =&gt; <a href="typespecs.xhtml#built-in-types">module</a>(),
  :__exception__ =&gt; true,
  optional(<a href="typespecs.xhtml#basic-types">atom</a>()) =&gt; <a href="typespecs.xhtml#basic-types">any</a>()
}</pre>

      </div>

<p>The exception type</p>
  </section>
</section>

        </div>
      </section>

      <section id="callbacks" class="details-list">
        <h1 class="section-heading">Callbacks</h1>

        <div class="callbacks-list">
<section class="detail" id="c:blame/2">

  <div class="detail-header">
    <a href="#c:blame/2" class="detail-link" data-no-tooltip="" aria-label="Link to this callback">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">blame(t, stacktrace)</h1>

        <span class="note">(optional)</span>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/exception.ex#L64" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@callback</span> blame(<a href="#t:t/0">t</a>(), <a href="#t:stacktrace/0">stacktrace</a>()) :: {<a href="#t:t/0">t</a>(), <a href="#t:stacktrace/0">stacktrace</a>()}</pre>

      </div>

<p>Called from <a href="#blame/3"><code class="inline">Exception.blame/3</code></a> to augment the exception struct.</p><p>Can be used to collect additional information about the exception
or do some additional expensive computation.</p>
  </section>
</section>
<section class="detail" id="c:exception/1">

  <div class="detail-header">
    <a href="#c:exception/1" class="detail-link" data-no-tooltip="" aria-label="Link to this callback">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">exception(term)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/exception.ex#L47" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@callback</span> exception(<a href="typespecs.xhtml#built-in-types">term</a>()) :: <a href="#t:t/0">t</a>()</pre>

      </div>

<p>Receives the arguments given to <a href="Kernel.xhtml#raise/2"><code class="inline">raise/2</code></a> and returns the exception struct.</p><p>The default implementation accepts either a set of keyword arguments
that is merged into the struct or a string to be used as the exception's message.</p>
  </section>
</section>
<section class="detail" id="c:message/1">

  <div class="detail-header">
    <a href="#c:message/1" class="detail-link" data-no-tooltip="" aria-label="Link to this callback">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">message(t)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/exception.ex#L56" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@callback</span> message(<a href="#t:t/0">t</a>()) :: <a href="String.xhtml#t:t/0">String.t</a>()</pre>

      </div>

<p>Receives the exception struct and must return its message.</p><p>Many exceptions have a message field which by default is accessed
by this function. However, if an exception does not have a message field,
this function must be explicitly implemented.</p>
  </section>
</section>

        </div>
      </section>

      <section id="functions" class="details-list">
        <h1 class="section-heading">Functions</h1>

        <div class="functions-list">
<section class="detail" id="blame/3">

  <div class="detail-header">
    <a href="#blame/3" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">blame(kind, error, stacktrace)</h1>

        <span class="note">(since 1.5.0)</span>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/exception.ex#L189" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> blame(:error, <a href="typespecs.xhtml#basic-types">any</a>(), <a href="#t:stacktrace/0">stacktrace</a>()) :: {<a href="#t:t/0">t</a>(), <a href="#t:stacktrace/0">stacktrace</a>()}</pre>

          <pre translate="no"><span class="attribute">@spec</span> blame(<a href="#t:non_error_kind/0">non_error_kind</a>(), payload, <a href="#t:stacktrace/0">stacktrace</a>()) :: {payload, <a href="#t:stacktrace/0">stacktrace</a>()}
when payload: var</pre>

      </div>

<p>Attaches information to exceptions for extra debugging.</p><p>This operation is potentially expensive, as it reads data
from the file system, parses beam files, evaluates code and
so on.</p><p>If the exception module implements the optional <a href="#c:blame/2"><code class="inline">blame/2</code></a>
callback, it will be invoked to perform the computation.</p>
  </section>
</section>
<section class="detail" id="blame_mfa/3">

  <div class="detail-header">
    <a href="#blame_mfa/3" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">blame_mfa(module, function, args)</h1>

        <span class="note">(since 1.5.0)</span>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/exception.ex#L221" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> blame_mfa(<a href="typespecs.xhtml#built-in-types">module</a>(), function :: <a href="typespecs.xhtml#basic-types">atom</a>(), args :: [<a href="typespecs.xhtml#built-in-types">term</a>()]) ::
  {:ok, :def | :defp | :defmacro | :defmacrop,
   [{args :: [<a href="typespecs.xhtml#built-in-types">term</a>()], guards :: [<a href="typespecs.xhtml#built-in-types">term</a>()]}]}
  | :error</pre>

      </div>

<p>Blames the invocation of the given module, function and arguments.</p><p>This function will retrieve the available clauses from bytecode
and evaluate them against the given arguments. The clauses are
returned as a list of <code class="inline">{args, guards}</code> pairs where each argument
and each top-level condition in a guard separated by <code class="inline">and</code>/<code class="inline">or</code>
is wrapped in a tuple with blame metadata.</p><p>This function returns either <code class="inline">{:ok, definition, clauses}</code> or <code class="inline">:error</code>.
Where <code class="inline">definition</code> is <code class="inline">:def</code>, <code class="inline">:defp</code>, <code class="inline">:defmacro</code> or <code class="inline">:defmacrop</code>.</p>
  </section>
</section>
<section class="detail" id="format/3">

    <span id="format/2"></span>

  <div class="detail-header">
    <a href="#format/3" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">format(kind, payload, stacktrace \\ [])</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/exception.ex#L161" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> format(<a href="#t:kind/0">kind</a>(), <a href="typespecs.xhtml#basic-types">any</a>(), <a href="#t:stacktrace/0">stacktrace</a>()) :: <a href="String.xhtml#t:t/0">String.t</a>()</pre>

      </div>

<p>Normalizes and formats throw/errors/exits and stacktraces.</p><p>It relies on <a href="#format_banner/3"><code class="inline">format_banner/3</code></a> and <a href="#format_stacktrace/1"><code class="inline">format_stacktrace/1</code></a>
to generate the final format.</p><p>If <code class="inline">kind</code> is <code class="inline">{:EXIT, pid}</code>, it does not generate a stacktrace,
as such exits are retrieved as messages without stacktraces.</p>
  </section>
</section>
<section class="detail" id="format_banner/3">

    <span id="format_banner/2"></span>

  <div class="detail-header">
    <a href="#format_banner/3" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">format_banner(kind, exception, stacktrace \\ [])</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/exception.ex#L132" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> format_banner(<a href="#t:kind/0">kind</a>(), <a href="typespecs.xhtml#basic-types">any</a>(), <a href="#t:stacktrace/0">stacktrace</a>()) :: <a href="String.xhtml#t:t/0">String.t</a>()</pre>

      </div>

<p>Normalizes and formats any throw/error/exit.</p><p>The message is formatted and displayed in the same
format as used by Elixir's CLI.</p><p>The third argument is the stacktrace which is used to enrich
a normalized error with more information. It is only used when
the kind is an error.</p>
  </section>
</section>
<section class="detail" id="format_exit/1">

  <div class="detail-header">
    <a href="#format_exit/1" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">format_exit(reason)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/exception.ex#L426" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> format_exit(<a href="typespecs.xhtml#basic-types">any</a>()) :: <a href="String.xhtml#t:t/0">String.t</a>()</pre>

      </div>

<p>Formats an exit. It returns a string.</p><p>Often there are errors/exceptions inside exits. Exits are often
wrapped by the caller and provide stacktraces too. This function
formats exits in a way to nicely show the exit reason, caller
and stacktrace.</p>
  </section>
</section>
<section class="detail" id="format_fa/2">

  <div class="detail-header">
    <a href="#format_fa/2" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">format_fa(fun, arity)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/exception.ex#L700" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> format_fa(<a href="typespecs.xhtml#built-in-types">fun</a>(), <a href="typespecs.xhtml#built-in-types">arity</a>()) :: <a href="String.xhtml#t:t/0">String.t</a>()</pre>

      </div>

<p>Receives an anonymous function and arity and formats it as
shown in stacktraces. The arity may also be a list of arguments.</p><h2 id="format_fa/2-examples" class="section-heading"><a href="#format_fa/2-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="nc">Exception</samp><samp class="o">.</samp><samp class="n">format_fa</samp><samp class="p" data-group-id="4266379804-1">(</samp><samp class="k" data-group-id="4266379804-2">fn</samp><samp class="w"> </samp><samp class="o">-&gt;</samp><samp class="w"> </samp><samp class="no">nil</samp><samp class="w"> </samp><samp class="k" data-group-id="4266379804-2">end</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">1</samp><samp class="p" data-group-id="4266379804-1">)</samp><samp class="w">
</samp><samp class="c1">#=&gt; &quot;#Function&lt;...&gt;/1&quot;</samp></code></pre>
  </section>
</section>
<section class="detail" id="format_file_line/3">

    <span id="format_file_line/2"></span>

  <div class="detail-header">
    <a href="#format_file_line/3" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">format_file_line(file, line, suffix \\ &quot;&quot;)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/exception.ex#L765" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> format_file_line(<a href="String.xhtml#t:t/0">String.t</a>() | nil, <a href="typespecs.xhtml#basic-types">non_neg_integer</a>() | nil, <a href="String.xhtml#t:t/0">String.t</a>()) ::
  <a href="String.xhtml#t:t/0">String.t</a>()</pre>

      </div>

<p>Formats the given <code class="inline">file</code> and <code class="inline">line</code> as shown in stacktraces.</p><p>If any of the values are <code class="inline">nil</code>, they are omitted.</p><h2 id="format_file_line/3-examples" class="section-heading"><a href="#format_file_line/3-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Exception</samp><samp class="o">.</samp><samp class="n">format_file_line</samp><samp class="p" data-group-id="1441485946-1">(</samp><samp class="s">&quot;foo&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">1</samp><samp class="p" data-group-id="1441485946-1">)</samp><samp class="w">
</samp><samp class="s">&quot;foo:1:&quot;</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Exception</samp><samp class="o">.</samp><samp class="n">format_file_line</samp><samp class="p" data-group-id="1441485946-2">(</samp><samp class="s">&quot;foo&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="no">nil</samp><samp class="p" data-group-id="1441485946-2">)</samp><samp class="w">
</samp><samp class="s">&quot;foo:&quot;</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Exception</samp><samp class="o">.</samp><samp class="n">format_file_line</samp><samp class="p" data-group-id="1441485946-3">(</samp><samp class="no">nil</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="no">nil</samp><samp class="p" data-group-id="1441485946-3">)</samp><samp class="w">
</samp><samp class="s">&quot;&quot;</samp></code></pre>
  </section>
</section>
<section class="detail" id="format_file_line_column/4">

    <span id="format_file_line_column/3"></span>

  <div class="detail-header">
    <a href="#format_file_line_column/4" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">format_file_line_column(file, line, column, suffix \\ &quot;&quot;)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/exception.ex#L802" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> format_file_line_column(
  <a href="String.xhtml#t:t/0">String.t</a>() | nil,
  <a href="typespecs.xhtml#basic-types">non_neg_integer</a>() | nil,
  <a href="typespecs.xhtml#basic-types">non_neg_integer</a>() | nil,
  <a href="String.xhtml#t:t/0">String.t</a>()
) :: <a href="String.xhtml#t:t/0">String.t</a>()</pre>

      </div>

<p>Formats the given <code class="inline">file</code>, <code class="inline">line</code>, and <code class="inline">column</code> as shown in stacktraces.</p><p>If any of the values are <code class="inline">nil</code>, they are omitted.</p><h2 id="format_file_line_column/4-examples" class="section-heading"><a href="#format_file_line_column/4-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Exception</samp><samp class="o">.</samp><samp class="n">format_file_line_column</samp><samp class="p" data-group-id="5437845221-1">(</samp><samp class="s">&quot;foo&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">1</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">2</samp><samp class="p" data-group-id="5437845221-1">)</samp><samp class="w">
</samp><samp class="s">&quot;foo:1:2:&quot;</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Exception</samp><samp class="o">.</samp><samp class="n">format_file_line_column</samp><samp class="p" data-group-id="5437845221-2">(</samp><samp class="s">&quot;foo&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">1</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="no">nil</samp><samp class="p" data-group-id="5437845221-2">)</samp><samp class="w">
</samp><samp class="s">&quot;foo:1:&quot;</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Exception</samp><samp class="o">.</samp><samp class="n">format_file_line_column</samp><samp class="p" data-group-id="5437845221-3">(</samp><samp class="s">&quot;foo&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="no">nil</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="no">nil</samp><samp class="p" data-group-id="5437845221-3">)</samp><samp class="w">
</samp><samp class="s">&quot;foo:&quot;</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Exception</samp><samp class="o">.</samp><samp class="n">format_file_line_column</samp><samp class="p" data-group-id="5437845221-4">(</samp><samp class="s">&quot;foo&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="no">nil</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">2</samp><samp class="p" data-group-id="5437845221-4">)</samp><samp class="w">
</samp><samp class="s">&quot;foo:&quot;</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Exception</samp><samp class="o">.</samp><samp class="n">format_file_line_column</samp><samp class="p" data-group-id="5437845221-5">(</samp><samp class="no">nil</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="no">nil</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="no">nil</samp><samp class="p" data-group-id="5437845221-5">)</samp><samp class="w">
</samp><samp class="s">&quot;&quot;</samp></code></pre>
  </section>
</section>
<section class="detail" id="format_mfa/3">

  <div class="detail-header">
    <a href="#format_mfa/3" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">format_mfa(module, fun, arity)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/exception.ex#L725" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> format_mfa(<a href="typespecs.xhtml#built-in-types">module</a>(), <a href="typespecs.xhtml#basic-types">atom</a>(), <a href="#t:arity_or_args/0">arity_or_args</a>()) :: <a href="String.xhtml#t:t/0">String.t</a>()</pre>

      </div>

<p>Receives a module, fun and arity and formats it
as shown in stacktraces. The arity may also be a list
of arguments.</p><h2 id="format_mfa/3-examples" class="section-heading"><a href="#format_mfa/3-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Exception</samp><samp class="o">.</samp><samp class="n">format_mfa</samp><samp class="p" data-group-id="0749574013-1">(</samp><samp class="nc">Foo</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:bar</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">1</samp><samp class="p" data-group-id="0749574013-1">)</samp><samp class="w">
</samp><samp class="s">&quot;Foo.bar/1&quot;</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Exception</samp><samp class="o">.</samp><samp class="n">format_mfa</samp><samp class="p" data-group-id="0749574013-2">(</samp><samp class="nc">Foo</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:bar</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="0749574013-3">[</samp><samp class="p" data-group-id="0749574013-3">]</samp><samp class="p" data-group-id="0749574013-2">)</samp><samp class="w">
</samp><samp class="s">&quot;Foo.bar()&quot;</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Exception</samp><samp class="o">.</samp><samp class="n">format_mfa</samp><samp class="p" data-group-id="0749574013-4">(</samp><samp class="no">nil</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:bar</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="0749574013-5">[</samp><samp class="p" data-group-id="0749574013-5">]</samp><samp class="p" data-group-id="0749574013-4">)</samp><samp class="w">
</samp><samp class="s">&quot;nil.bar()&quot;</samp></code></pre><p>Anonymous functions are reported as -func/arity-anonfn-count-,
where func is the name of the enclosing function. Convert to
&quot;anonymous fn in func/arity&quot;</p>
  </section>
</section>
<section class="detail" id="format_stacktrace/1">

    <span id="format_stacktrace/0"></span>

  <div class="detail-header">
    <a href="#format_stacktrace/1" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">format_stacktrace(trace \\ nil)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/exception.ex#L673" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> format_stacktrace(<a href="#t:stacktrace/0">stacktrace</a>() | nil) :: <a href="String.xhtml#t:t/0">String.t</a>()</pre>

      </div>

<p>Formats the stacktrace.</p><p>A stacktrace must be given as an argument. If not, the stacktrace
is retrieved from <a href="Process.xhtml#info/2"><code class="inline">Process.info/2</code></a>.</p>
  </section>
</section>
<section class="detail" id="format_stacktrace_entry/1">

  <div class="detail-header">
    <a href="#format_stacktrace_entry/1" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">format_stacktrace_entry(entry)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/exception.ex#L624" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> format_stacktrace_entry(<a href="#t:stacktrace_entry/0">stacktrace_entry</a>()) :: <a href="String.xhtml#t:t/0">String.t</a>()</pre>

      </div>

<p>Receives a stacktrace entry and formats it into a string.</p>
  </section>
</section>
<section class="detail" id="message/1">

  <div class="detail-header">
    <a href="#message/1" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">message(exception)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/exception.ex#L83" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> message(<a href="#t:t/0">t</a>()) :: <a href="String.xhtml#t:t/0">String.t</a>()</pre>

      </div>

<p>Gets the message for an <code class="inline">exception</code>.</p>
  </section>
</section>
<section class="detail" id="normalize/3">

    <span id="normalize/2"></span>

  <div class="detail-header">
    <a href="#normalize/3" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">normalize(kind, payload, stacktrace \\ [])</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/exception.ex#L116" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> normalize(:error, <a href="typespecs.xhtml#basic-types">any</a>(), <a href="#t:stacktrace/0">stacktrace</a>()) :: <a href="#t:t/0">t</a>()</pre>

          <pre translate="no"><span class="attribute">@spec</span> normalize(<a href="#t:non_error_kind/0">non_error_kind</a>(), payload, <a href="#t:stacktrace/0">stacktrace</a>()) :: payload when payload: var</pre>

      </div>

<p>Normalizes an exception, converting Erlang exceptions
to Elixir exceptions.</p><p>It takes the <code class="inline">kind</code> spilled by <code class="inline">catch</code> as an argument and
normalizes only <code class="inline">:error</code>, returning the untouched payload
for others.</p><p>The third argument is the stacktrace which is used to enrich
a normalized error with more information. It is only used when
the kind is an error.</p>
  </section>
</section>

        </div>
      </section>


  </body>
</html>
