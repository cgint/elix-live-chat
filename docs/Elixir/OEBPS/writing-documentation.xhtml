<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"
      xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>Writing documentation - Elixir v1.18.4</title>
    <meta name="generator" content="ExDoc v0.38.2" />
    <link type="text/css" rel="stylesheet" href="dist/epub-elixir-FNUUKFP7.css" />
    <script src="dist/epub-4WIP524F.js"></script>

  </head>
  <body class="content-inner">

    <h1 id="content">Writing documentation</h1>
<p>Elixir treats documentation as a first-class citizen. Documentation must be easy to write and easy to read. In this guide you will learn how to write documentation in Elixir, covering constructs like module attributes, style practices, and doctests.</p><h2 id="markdown">Markdown</h2><p>Elixir documentation is written using Markdown. There are plenty of guides on Markdown online, we recommend the one from GitHub as a getting started point:</p><ul><li><a href="https://help.github.com/articles/basic-writing-and-formatting-syntax/">Basic writing and formatting syntax</a></li></ul><h2 id="module-attributes">Module Attributes</h2><p>Documentation in Elixir is usually attached to module attributes. Let's see an example:</p><pre><code class="makeup elixir" translate="no"><span class="kd">defmodule</span><span class="w"> </span><span class="nc">MyApp.Hello</span><span class="w"> </span><span class="k" data-group-id="9004198045-1">do</span><span class="w">
  </span><span class="na">@moduledoc</span><span class="w"> </span><span class="s">&quot;&quot;&quot;
  This is the Hello module.
  &quot;&quot;&quot;</span><span class="w">
  </span><span class="na">@moduledoc</span><span class="w"> </span><span class="ss">since</span><span class="p">:</span><span class="w"> </span><span class="s">&quot;1.0.0&quot;</span><span class="w">

  </span><span class="na">@doc</span><span class="w"> </span><span class="s">&quot;&quot;&quot;
  Says hello to the given `name`.

  Returns `:ok`.

  ## Examples

      iex&gt; MyApp.Hello.world(:john)
      :ok

  &quot;&quot;&quot;</span><span class="w">
  </span><span class="na">@doc</span><span class="w"> </span><span class="ss">since</span><span class="p">:</span><span class="w"> </span><span class="s">&quot;1.3.0&quot;</span><span class="w">
  </span><span class="kd">def</span><span class="w"> </span><span class="nf">world</span><span class="p" data-group-id="9004198045-2">(</span><span class="n">name</span><span class="p" data-group-id="9004198045-2">)</span><span class="w"> </span><span class="k" data-group-id="9004198045-3">do</span><span class="w">
    </span><span class="nc">IO</span><span class="o">.</span><span class="n">puts</span><span class="p" data-group-id="9004198045-4">(</span><span class="s">&quot;hello </span><span class="si" data-group-id="9004198045-5">#{</span><span class="n">name</span><span class="si" data-group-id="9004198045-5">}</span><span class="s">&quot;</span><span class="p" data-group-id="9004198045-4">)</span><span class="w">
  </span><span class="k" data-group-id="9004198045-3">end</span><span class="w">
</span><span class="k" data-group-id="9004198045-1">end</span></code></pre><p>The <code class="inline">@moduledoc</code> attribute is used to add documentation to the module. <code class="inline">@doc</code> is used before a function to provide documentation for it. Besides the attributes above, <code class="inline">@typedoc</code> can also be used to attach documentation to types defined as part of typespecs.</p><h2 id="function-arguments">Function arguments</h2><p>When documenting a function, argument names are inferred by the compiler. For example:</p><pre><code class="makeup elixir" translate="no"><span class="kd">def</span><span class="w"> </span><span class="nf">size</span><span class="p" data-group-id="2979477006-1">(</span><span class="p" data-group-id="2979477006-2">%{</span><span class="ss">size</span><span class="p">:</span><span class="w"> </span><span class="n">size</span><span class="p" data-group-id="2979477006-2">}</span><span class="p" data-group-id="2979477006-1">)</span><span class="w"> </span><span class="k" data-group-id="2979477006-3">do</span><span class="w">
  </span><span class="n">size</span><span class="w">
</span><span class="k" data-group-id="2979477006-3">end</span></code></pre><p>The compiler will infer this argument as <code class="inline">map</code>. Sometimes the inference will be suboptimal, especially if the function contains multiple clauses with the argument matching on different values each time. You can specify the proper names for documentation by declaring only the function head at any moment before the implementation:</p><pre><code class="makeup elixir" translate="no"><span class="kd">def</span><span class="w"> </span><span class="nf">size</span><span class="p" data-group-id="9985926606-1">(</span><span class="n">map_with_size</span><span class="p" data-group-id="9985926606-1">)</span><span class="w">

</span><span class="kd">def</span><span class="w"> </span><span class="nf">size</span><span class="p" data-group-id="9985926606-2">(</span><span class="p" data-group-id="9985926606-3">%{</span><span class="ss">size</span><span class="p">:</span><span class="w"> </span><span class="n">size</span><span class="p" data-group-id="9985926606-3">}</span><span class="p" data-group-id="9985926606-2">)</span><span class="w"> </span><span class="k" data-group-id="9985926606-4">do</span><span class="w">
  </span><span class="n">size</span><span class="w">
</span><span class="k" data-group-id="9985926606-4">end</span></code></pre><h2 id="documentation-metadata">Documentation metadata</h2><p>Elixir allows developers to attach arbitrary metadata to the documentation. This is done by passing a keyword list to the relevant attribute (such as <code class="inline">@moduledoc</code>, <code class="inline">@typedoc</code>, and <code class="inline">@doc</code>). A commonly used metadata is <code class="inline">:since</code>, which annotates in which version that particular module, function, type, or callback was added, as shown in the example above.</p><p>Another common metadata is <code class="inline">:deprecated</code>, which emits a warning in the documentation, explaining that its usage is discouraged:</p><pre><code class="makeup elixir" translate="no"><span class="na">@doc</span><span class="w"> </span><span class="ss">deprecated</span><span class="p">:</span><span class="w"> </span><span class="s">&quot;Use Foo.bar/2 instead&quot;</span></code></pre><p>Note that the <code class="inline">:deprecated</code> key does not warn when a developer invokes the functions. If you want the code to also emit a warning, you can use the <code class="inline">@deprecated</code> attribute:</p><pre><code class="makeup elixir" translate="no"><span class="na">@deprecated</span><span class="w"> </span><span class="s">&quot;Use Foo.bar/2 instead&quot;</span></code></pre><p>Metadata can have any key. Documentation tools often use metadata to provide more data to readers and to enrich the user experience.</p><h2 id="recommendations">Recommendations</h2><p>When writing documentation:</p><ul><li><p>Keep the first paragraph of the documentation concise and simple, typically one-line. Tools like <a href="https://github.com/elixir-lang/ex_doc/">ExDoc</a> use the first line to generate a summary.</p></li><li><p>Reference modules by their full name. Markdown uses backticks (<code class="inline">`</code>) to quote code. Elixir builds on top of that to automatically generate links when module or function names are referenced. For this reason, always use full module names. If you have a module called <code class="inline">MyApp.Hello</code>, always reference it as <code class="inline">`MyApp.Hello`</code> and never as <code class="inline">`Hello`</code>.</p></li><li><p>Reference functions by name and arity if they are local, as in <code class="inline">`world/1`</code>, or by module, name and arity if pointing to an external module: <code class="inline">`MyApp.Hello.world/1`</code>.</p></li><li><p>Reference a <code class="inline">@callback</code> by prepending <code class="inline">c:</code>, as in <code class="inline">`c:world/1`</code>.</p></li><li><p>Reference a <code class="inline">@type</code> by prepending <code class="inline">t:</code>, as in <code class="inline">`t:values/0`</code>.</p></li><li><p>Start new sections with second level Markdown headers <code class="inline">##</code>. First level headers are reserved for module and function names.</p></li><li><p>Place documentation before the first clause of multi-clause functions. Documentation is always per function and arity and not per clause.</p></li><li><p>Use the <code class="inline">:since</code> key in the documentation metadata to annotate whenever new functions or modules are added to your API.</p></li></ul><h2 id="doctests">Doctests</h2><p>We advise developers to include examples in their documentation, often under their own <code class="inline">## Examples</code> heading. To ensure examples do not get out of date, Elixir's test framework (ExUnit) provides a feature called doctests that allows developers to test the examples in their documentation. Doctests work by parsing out code samples starting with <code class="inline">iex&gt;</code> from the documentation. You can read more about them at <a href="https://hexdocs.pm/ex_unit/ExUnit.DocTest.html"><code class="inline">ExUnit.DocTest</code></a>.</p><h2 id="documentation-code-comments">Documentation != Code comments</h2><p>Elixir treats documentation and code comments as different concepts. Documentation is an explicit contract between you and users of your Application Programming Interface (API), be they third-party developers, co-workers, or your future self. Modules and functions must always be documented if they are part of your API.</p><p>Code comments are aimed at developers reading the code. They are useful for marking improvements, leaving notes (for example, why you had to resort to a workaround due to a bug in a library), and so forth. They are tied to the source code: you can completely rewrite a function and remove all existing code comments, and it will continue to behave the same, with no change to either its behavior or its documentation.</p><p>Because private functions cannot be accessed externally, Elixir will warn if a private function has a <code class="inline">@doc</code> attribute and will discard its content. However, you can add code comments to private functions, as with any other piece of code, and we recommend developers to do so whenever they believe it will add relevant information to the readers and maintainers of such code.</p><p>In summary, documentation is a contract with users of your API, who may not necessarily have access to the source code, whereas code comments are for those who interact directly with the source. You can learn and express different guarantees about your software by separating those two concepts.</p><h2 id="hiding-internal-modules-and-functions">Hiding internal modules and functions</h2><p>Besides the modules and functions libraries provide as part of their public interface, libraries may also implement important functionality that is not part of their API. While these modules and functions can be accessed, they are meant to be internal to the library and thus should not have documentation for end users.</p><p>Conveniently, Elixir allows developers to hide modules and functions from the documentation, by setting <code class="inline">@doc false</code> to hide a particular function, or <code class="inline">@moduledoc false</code> to hide the whole module. If a module is hidden, you may even document the functions in the module, but the module itself won't be listed in the documentation:</p><pre><code class="makeup elixir" translate="no"><span class="kd">defmodule</span><span class="w"> </span><span class="nc">MyApp.Hidden</span><span class="w"> </span><span class="k" data-group-id="8906008553-1">do</span><span class="w">
  </span><span class="na">@moduledoc</span><span class="w"> </span><span class="no">false</span><span class="w">

  </span><span class="na">@doc</span><span class="w"> </span><span class="s">&quot;&quot;&quot;
  This function won&#39;t be listed in docs.
  &quot;&quot;&quot;</span><span class="w">
  </span><span class="kd">def</span><span class="w"> </span><span class="nf">function_that_wont_be_listed_in_docs</span><span class="w"> </span><span class="k" data-group-id="8906008553-2">do</span><span class="w">
    </span><span class="c1"># ...</span><span class="w">
  </span><span class="k" data-group-id="8906008553-2">end</span><span class="w">
</span><span class="k" data-group-id="8906008553-1">end</span></code></pre><p>In case you don't want to hide a whole module, you can hide functions individually:</p><pre><code class="makeup elixir" translate="no"><span class="kd">defmodule</span><span class="w"> </span><span class="nc">MyApp.Sample</span><span class="w"> </span><span class="k" data-group-id="0085936339-1">do</span><span class="w">
  </span><span class="na">@doc</span><span class="w"> </span><span class="no">false</span><span class="w">
  </span><span class="kd">def</span><span class="w"> </span><span class="nf">add</span><span class="p" data-group-id="0085936339-2">(</span><span class="n">a</span><span class="p">,</span><span class="w"> </span><span class="n">b</span><span class="p" data-group-id="0085936339-2">)</span><span class="p">,</span><span class="w"> </span><span class="ss">do</span><span class="p">:</span><span class="w"> </span><span class="n">a</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">b</span><span class="w">
</span><span class="k" data-group-id="0085936339-1">end</span></code></pre><p>However, keep in mind <code class="inline">@moduledoc false</code> or <code class="inline">@doc false</code> do not make a function private. The function above can still be invoked as <code class="inline">MyApp.Sample.add(1, 2)</code>. Not only that, if <code class="inline">MyApp.Sample</code> is imported, the <code class="inline">add/2</code> function will also be imported into the caller. For those reasons, be cautious when adding <code class="inline">@doc false</code> to functions, instead use one of these two options:</p><ul><li><p>Move the undocumented function to a module with <code class="inline">@moduledoc false</code>, like <code class="inline">MyApp.Hidden</code>, ensuring the function won't be accidentally exposed or imported. Remember that you can use <code class="inline">@moduledoc false</code> to hide a whole module and still document each function with <code class="inline">@doc</code>. Tools will still ignore the module.</p></li><li><p>Start the function name with one or two underscores, for example, <code class="inline">__add__/2</code>. Functions starting with underscore are automatically treated as hidden, although you can also be explicit and add <code class="inline">@doc false</code>. The compiler does not import functions with leading underscores and they hint to anyone reading the code of their intended private usage.</p></li></ul><h2 id="code-fetch_docs-1"><a href="Code.xhtml#fetch_docs/1"><code class="inline">Code.fetch_docs/1</code></a></h2><p>Elixir stores documentation inside pre-defined chunks in the bytecode. Documentation is not loaded into memory when modules are loaded, instead, it can be read from the bytecode in disk using the <a href="Code.xhtml#fetch_docs/1"><code class="inline">Code.fetch_docs/1</code></a> function. The downside is that modules defined in-memory, like the ones defined in IEx, cannot have their documentation accessed as they do not write their bytecode to disk.</p>

  </body>
</html>
