<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"
      xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>Node - Elixir v1.18.4</title>
    <meta name="generator" content="ExDoc v0.38.2" />
    <link type="text/css" rel="stylesheet" href="dist/epub-elixir-FNUUKFP7.css" />
    <script src="dist/epub-4WIP524F.js"></script>

  </head>
  <body class="content-inner">

    <h1 id="content">
Node 
    </h1>


      <section id="moduledoc" class="docstring">
<p>Functions related to VM nodes.</p><p>Some of the functions in this module are inlined by the compiler,
similar to functions in the <a href="Kernel.xhtml"><code class="inline">Kernel</code></a> module and they are explicitly
marked in their docs as &quot;inlined by the compiler&quot;. For more information
about inlined functions, check out the <a href="Kernel.xhtml"><code class="inline">Kernel</code></a> module.</p>
      </section>


      <section id="summary" class="details-list">
        <h1 class="section-heading">Summary</h1>
<div class="summary-types summary">
  <h2>
    <a href="#types">Types</a>
  </h2>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#t:state/0" data-no-tooltip="" translate="no">state()</a>

      </div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#t:t/0" data-no-tooltip="" translate="no">t()</a>

      </div>

    </div>

</div>
<div class="summary-functions summary">
  <h2>
    <a href="#functions">Functions</a>
  </h2>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#alive?/0" data-no-tooltip="" translate="no">alive?()</a>

      </div>

        <div class="summary-synopsis"><p>Returns <code class="inline">true</code> if the local node is alive.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#connect/1" data-no-tooltip="" translate="no">connect(node)</a>

      </div>

        <div class="summary-synopsis"><p>Establishes a connection to <code class="inline">node</code>.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#disconnect/1" data-no-tooltip="" translate="no">disconnect(node)</a>

      </div>

        <div class="summary-synopsis"><p>Forces the disconnection of a node.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#get_cookie/0" data-no-tooltip="" translate="no">get_cookie()</a>

      </div>

        <div class="summary-synopsis"><p>Returns the magic cookie of the local node.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#list/0" data-no-tooltip="" translate="no">list()</a>

      </div>

        <div class="summary-synopsis"><p>Returns a list of all visible nodes in the system, excluding
the local node.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#list/1" data-no-tooltip="" translate="no">list(args)</a>

      </div>

        <div class="summary-synopsis"><p>Returns a list of nodes according to argument given.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#monitor/2" data-no-tooltip="" translate="no">monitor(node, flag)</a>

      </div>

        <div class="summary-synopsis"><p>Monitors the status of the node.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#monitor/3" data-no-tooltip="" translate="no">monitor(node, flag, options)</a>

      </div>

        <div class="summary-synopsis"><p>Behaves as <a><code class="inline">monitor/2</code></a> except that it allows an extra
option to be given, namely <code class="inline">:allow_passive_connect</code>.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#ping/1" data-no-tooltip="" translate="no">ping(node)</a>

      </div>

        <div class="summary-synopsis"><p>Tries to set up a connection to node.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#self/0" data-no-tooltip="" translate="no">self()</a>

      </div>

        <div class="summary-synopsis"><p>Returns the current node.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#set_cookie/2" data-no-tooltip="" translate="no">set_cookie(node \\ Node.self(), cookie)</a>

      </div>

        <div class="summary-synopsis"><p>Sets the magic cookie of <code class="inline">node</code> to the atom <code class="inline">cookie</code>.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#spawn/2" data-no-tooltip="" translate="no">spawn(node, fun)</a>

      </div>

        <div class="summary-synopsis"><p>Returns the PID of a new process started by the application of <code class="inline">fun</code>
on <code class="inline">node</code>. If <code class="inline">node</code> does not exist, a useless PID is returned.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#spawn/3" data-no-tooltip="" translate="no">spawn(node, fun, opts)</a>

      </div>

        <div class="summary-synopsis"><p>Returns the PID of a new process started by the application of <code class="inline">fun</code>
on <code class="inline">node</code>.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#spawn/4" data-no-tooltip="" translate="no">spawn(node, module, fun, args)</a>

      </div>

        <div class="summary-synopsis"><p>Returns the PID of a new process started by the application of
<code class="inline">module.function(args)</code> on <code class="inline">node</code>.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#spawn/5" data-no-tooltip="" translate="no">spawn(node, module, fun, args, opts)</a>

      </div>

        <div class="summary-synopsis"><p>Returns the PID of a new process started by the application of
<code class="inline">module.function(args)</code> on <code class="inline">node</code>.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#spawn_link/2" data-no-tooltip="" translate="no">spawn_link(node, fun)</a>

      </div>

        <div class="summary-synopsis"><p>Returns the PID of a new linked process started by the application of <code class="inline">fun</code> on <code class="inline">node</code>.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#spawn_link/4" data-no-tooltip="" translate="no">spawn_link(node, module, fun, args)</a>

      </div>

        <div class="summary-synopsis"><p>Returns the PID of a new linked process started by the application of
<code class="inline">module.function(args)</code> on <code class="inline">node</code>.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#spawn_monitor/2" data-no-tooltip="" translate="no">spawn_monitor(node, fun)</a>

      </div>

        <div class="summary-synopsis"><p>Spawns the given function on a node, monitors it and returns its PID
and monitoring reference.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#spawn_monitor/4" data-no-tooltip="" translate="no">spawn_monitor(node, module, fun, args)</a>

      </div>

        <div class="summary-synopsis"><p>Spawns the given module and function passing the given args on a node,
monitors it and returns its PID and monitoring reference.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#start/3" data-no-tooltip="" translate="no">start(name, type \\ :longnames, tick_time \\ 15000)</a>

      </div>

        <div class="summary-synopsis"><p>Turns a non-distributed node into a distributed node.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#stop/0" data-no-tooltip="" translate="no">stop()</a>

      </div>

        <div class="summary-synopsis"><p>Turns a distributed node into a non-distributed node.</p></div>

    </div>

</div>

      </section>


      <section id="types" class="details-list">
        <h1 class="section-heading">Types</h1>

        <div class="types-list">
<section class="detail" id="t:state/0">

  <div class="detail-header">
    <a href="#t:state/0" class="detail-link" data-no-tooltip="" aria-label="Link to this type">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">state()</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/node.ex#L95" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@type</span> state() :: :visible | :hidden | :connected | :this | :known</pre>

      </div>


  </section>
</section>
<section class="detail" id="t:t/0">

  <div class="detail-header">
    <a href="#t:t/0" class="detail-link" data-no-tooltip="" aria-label="Link to this type">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">t()</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/node.ex#L11" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@type</span> t() :: <a href="typespecs.xhtml#built-in-types">node</a>()</pre>

      </div>


  </section>
</section>

        </div>
      </section>

      <section id="functions" class="details-list">
        <h1 class="section-heading">Functions</h1>

        <div class="functions-list">
<section class="detail" id="alive?/0">

  <div class="detail-header">
    <a href="#alive?/0" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">alive?()</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/node.ex#L68" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> alive?() :: <a href="typespecs.xhtml#built-in-types">boolean</a>()</pre>

      </div>

<p>Returns <code class="inline">true</code> if the local node is alive.</p><p>That is, if the node can be part of a distributed system.</p>
  </section>
</section>
<section class="detail" id="connect/1">

  <div class="detail-header">
    <a href="#connect/1" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">connect(node)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/node.ex#L169" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> connect(<a href="#t:t/0">t</a>()) :: <a href="typespecs.xhtml#built-in-types">boolean</a>() | :ignored</pre>

      </div>

<p>Establishes a connection to <code class="inline">node</code>.</p><p>Returns <code class="inline">true</code> if successful, <code class="inline">false</code> if not, and the atom
<code class="inline">:ignored</code> if the local node is not alive.</p><p>For more information, see <a href="https://www.erlang.org/doc/apps/kernel/net_kernel.html#connect_node/1"><code class="inline">:net_kernel.connect_node/1</code></a>.</p>
  </section>
</section>
<section class="detail" id="disconnect/1">

  <div class="detail-header">
    <a href="#disconnect/1" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">disconnect(node)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/node.ex#L156" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> disconnect(<a href="#t:t/0">t</a>()) :: <a href="typespecs.xhtml#built-in-types">boolean</a>() | :ignored</pre>

      </div>

<p>Forces the disconnection of a node.</p><p>This will appear to the <code class="inline">node</code> as if the local node has crashed.
This function is mainly used in the Erlang network authentication
protocols. Returns <code class="inline">true</code> if disconnection succeeds, otherwise <code class="inline">false</code>.
If the local node is not alive, the function returns <code class="inline">:ignored</code>.</p><p>For more information, see <a href="https://www.erlang.org/doc/apps/erts/erlang.html#disconnect_node/1"><code class="inline">:erlang.disconnect_node/1</code></a>.</p>
  </section>
</section>
<section class="detail" id="get_cookie/0">

  <div class="detail-header">
    <a href="#get_cookie/0" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">get_cookie()</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/node.ex#L303" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> get_cookie() :: <a href="typespecs.xhtml#basic-types">atom</a>()</pre>

      </div>

<p>Returns the magic cookie of the local node.</p><p>Returns the cookie if the node is alive, otherwise <code class="inline">:nocookie</code>.</p>
  </section>
</section>
<section class="detail" id="list/0">

  <div class="detail-header">
    <a href="#list/0" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">list()</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/node.ex#L81" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> list() :: [<a href="#t:t/0">t</a>()]</pre>

      </div>

<p>Returns a list of all visible nodes in the system, excluding
the local node.</p><p>Same as <code class="inline">list(:visible)</code>.</p><p>Inlined by the compiler.</p>
  </section>
</section>
<section class="detail" id="list/1">

  <div class="detail-header">
    <a href="#list/1" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">list(args)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/node.ex#L97" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> list(<a href="#t:state/0">state</a>() | [<a href="#t:state/0">state</a>()]) :: [<a href="#t:t/0">t</a>()]</pre>

      </div>

<p>Returns a list of nodes according to argument given.</p><p>The result returned when the argument is a list, is the list of nodes
satisfying the disjunction(s) of the list elements.</p><p>For more information, see <a href="https://www.erlang.org/doc/apps/erts/erlang.html#nodes/1"><code class="inline">:erlang.nodes/1</code></a>.</p><p>Inlined by the compiler.</p>
  </section>
</section>
<section class="detail" id="monitor/2">

  <div class="detail-header">
    <a href="#monitor/2" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">monitor(node, flag)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/node.ex#L112" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> monitor(<a href="#t:t/0">t</a>(), <a href="typespecs.xhtml#built-in-types">boolean</a>()) :: true</pre>

      </div>

<p>Monitors the status of the node.</p><p>If <code class="inline">flag</code> is <code class="inline">true</code>, monitoring is turned on.
If <code class="inline">flag</code> is <code class="inline">false</code>, monitoring is turned off.</p><p>For more information, see <a href="https://www.erlang.org/doc/apps/erts/erlang.html#monitor_node/2"><code class="inline">:erlang.monitor_node/2</code></a>.</p><p>For monitoring status changes of all nodes, see <a href="https://www.erlang.org/doc/apps/kernel/net_kernel.html#monitor_nodes/2"><code class="inline">:net_kernel.monitor_nodes/2</code></a>.</p>
  </section>
</section>
<section class="detail" id="monitor/3">

  <div class="detail-header">
    <a href="#monitor/3" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">monitor(node, flag, options)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/node.ex#L125" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> monitor(<a href="#t:t/0">t</a>(), <a href="typespecs.xhtml#built-in-types">boolean</a>(), [:allow_passive_connect]) :: true</pre>

      </div>

<p>Behaves as <a href="#monitor/2"><code class="inline">monitor/2</code></a> except that it allows an extra
option to be given, namely <code class="inline">:allow_passive_connect</code>.</p><p>For more information, see <a href="https://www.erlang.org/doc/apps/erts/erlang.html#monitor_node/3"><code class="inline">:erlang.monitor_node/3</code></a>.</p><p>For monitoring status changes of all nodes, see <a href="https://www.erlang.org/doc/apps/kernel/net_kernel.html#monitor_nodes/2"><code class="inline">:net_kernel.monitor_nodes/2</code></a>.</p>
  </section>
</section>
<section class="detail" id="ping/1">

  <div class="detail-header">
    <a href="#ping/1" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">ping(node)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/node.ex#L141" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> ping(<a href="#t:t/0">t</a>()) :: :pong | :pang</pre>

      </div>

<p>Tries to set up a connection to node.</p><p>Returns <code class="inline">:pang</code> if it fails, or <code class="inline">:pong</code> if it is successful.</p><h2 id="ping/1-examples" class="section-heading"><a href="#ping/1-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Node</samp><samp class="o">.</samp><samp class="n">ping</samp><samp class="p" data-group-id="4689028870-1">(</samp><samp class="ss">:unknown_node</samp><samp class="p" data-group-id="4689028870-1">)</samp><samp class="w">
</samp><samp class="ss">:pang</samp></code></pre>
  </section>
</section>
<section class="detail" id="self/0">

  <div class="detail-header">
    <a href="#self/0" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">self()</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/node.ex#L58" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> self() :: <a href="#t:t/0">t</a>()</pre>

      </div>

<p>Returns the current node.</p><p>It returns the same as the built-in <code class="inline">node()</code>.</p>
  </section>
</section>
<section class="detail" id="set_cookie/2">

    <span id="set_cookie/1"></span>

  <div class="detail-header">
    <a href="#set_cookie/2" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">set_cookie(node \\ Node.self(), cookie)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/node.ex#L293" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> set_cookie(<a href="#t:t/0">t</a>(), <a href="typespecs.xhtml#basic-types">atom</a>()) :: true</pre>

      </div>

<p>Sets the magic cookie of <code class="inline">node</code> to the atom <code class="inline">cookie</code>.</p><p>The default node is <a href="#self/0"><code class="inline">Node.self/0</code></a>, the local node. If <code class="inline">node</code> is the local node,
the function also sets the cookie of all other unknown nodes to <code class="inline">cookie</code>.</p><p>This function will raise <a href="FunctionClauseError.xhtml"><code class="inline">FunctionClauseError</code></a> if the given <code class="inline">node</code> is not alive.</p>
  </section>
</section>
<section class="detail" id="spawn/2">

  <div class="detail-header">
    <a href="#spawn/2" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">spawn(node, fun)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/node.ex#L182" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> spawn(<a href="#t:t/0">t</a>(), (-&gt; <a href="typespecs.xhtml#basic-types">any</a>())) :: <a href="typespecs.xhtml#basic-types">pid</a>()</pre>

      </div>

<p>Returns the PID of a new process started by the application of <code class="inline">fun</code>
on <code class="inline">node</code>. If <code class="inline">node</code> does not exist, a useless PID is returned.</p><p>For the list of available options, see <a href="https://www.erlang.org/doc/apps/erts/erlang.html#spawn/2"><code class="inline">:erlang.spawn/2</code></a>.</p><p>Inlined by the compiler.</p>
  </section>
</section>
<section class="detail" id="spawn/3">

  <div class="detail-header">
    <a href="#spawn/3" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">spawn(node, fun, opts)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/node.ex#L197" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> spawn(<a href="#t:t/0">t</a>(), (-&gt; <a href="typespecs.xhtml#basic-types">any</a>()), <a href="Process.xhtml#t:spawn_opts/0">Process.spawn_opts</a>()) :: <a href="typespecs.xhtml#basic-types">pid</a>() | {<a href="typespecs.xhtml#basic-types">pid</a>(), <a href="typespecs.xhtml#basic-types">reference</a>()}</pre>

      </div>

<p>Returns the PID of a new process started by the application of <code class="inline">fun</code>
on <code class="inline">node</code>.</p><p>If <code class="inline">node</code> does not exist, a useless PID is returned.</p><p>For the list of available options, see <a href="https://www.erlang.org/doc/apps/erts/erlang.html#spawn_opt/3"><code class="inline">:erlang.spawn_opt/3</code></a>.</p><p>Inlined by the compiler.</p>
  </section>
</section>
<section class="detail" id="spawn/4">

  <div class="detail-header">
    <a href="#spawn/4" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">spawn(node, module, fun, args)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/node.ex#L212" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> spawn(<a href="#t:t/0">t</a>(), <a href="typespecs.xhtml#built-in-types">module</a>(), <a href="typespecs.xhtml#basic-types">atom</a>(), [<a href="typespecs.xhtml#basic-types">any</a>()]) :: <a href="typespecs.xhtml#basic-types">pid</a>()</pre>

      </div>

<p>Returns the PID of a new process started by the application of
<code class="inline">module.function(args)</code> on <code class="inline">node</code>.</p><p>If <code class="inline">node</code> does not exist, a useless PID is returned.</p><p>For the list of available options, see <a href="https://www.erlang.org/doc/apps/erts/erlang.html#spawn/4"><code class="inline">:erlang.spawn/4</code></a>.</p><p>Inlined by the compiler.</p>
  </section>
</section>
<section class="detail" id="spawn/5">

  <div class="detail-header">
    <a href="#spawn/5" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">spawn(node, module, fun, args, opts)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/node.ex#L227" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> spawn(<a href="#t:t/0">t</a>(), <a href="typespecs.xhtml#built-in-types">module</a>(), <a href="typespecs.xhtml#basic-types">atom</a>(), [<a href="typespecs.xhtml#basic-types">any</a>()], <a href="Process.xhtml#t:spawn_opts/0">Process.spawn_opts</a>()) ::
  <a href="typespecs.xhtml#basic-types">pid</a>() | {<a href="typespecs.xhtml#basic-types">pid</a>(), <a href="typespecs.xhtml#basic-types">reference</a>()}</pre>

      </div>

<p>Returns the PID of a new process started by the application of
<code class="inline">module.function(args)</code> on <code class="inline">node</code>.</p><p>If <code class="inline">node</code> does not exist, a useless PID is returned.</p><p>For the list of available options, see <a href="https://www.erlang.org/doc/apps/erts/erlang.html#spawn_opt/5"><code class="inline">:erlang.spawn_opt/5</code></a>.</p><p>Inlined by the compiler.</p>
  </section>
</section>
<section class="detail" id="spawn_link/2">

  <div class="detail-header">
    <a href="#spawn_link/2" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">spawn_link(node, fun)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/node.ex#L241" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> spawn_link(<a href="#t:t/0">t</a>(), (-&gt; <a href="typespecs.xhtml#basic-types">any</a>())) :: <a href="typespecs.xhtml#basic-types">pid</a>()</pre>

      </div>

<p>Returns the PID of a new linked process started by the application of <code class="inline">fun</code> on <code class="inline">node</code>.</p><p>A link is created between the calling process and the new process, atomically.
If <code class="inline">node</code> does not exist, a useless PID is returned (and due to the link, an exit
signal with exit reason <code class="inline">:noconnection</code> will be received).</p><p>Inlined by the compiler.</p>
  </section>
</section>
<section class="detail" id="spawn_link/4">

  <div class="detail-header">
    <a href="#spawn_link/4" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">spawn_link(node, module, fun, args)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/node.ex#L256" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> spawn_link(<a href="#t:t/0">t</a>(), <a href="typespecs.xhtml#built-in-types">module</a>(), <a href="typespecs.xhtml#basic-types">atom</a>(), [<a href="typespecs.xhtml#basic-types">any</a>()]) :: <a href="typespecs.xhtml#basic-types">pid</a>()</pre>

      </div>

<p>Returns the PID of a new linked process started by the application of
<code class="inline">module.function(args)</code> on <code class="inline">node</code>.</p><p>A link is created between the calling process and the new process, atomically.
If <code class="inline">node</code> does not exist, a useless PID is returned (and due to the link, an exit
signal with exit reason <code class="inline">:noconnection</code> will be received).</p><p>Inlined by the compiler.</p>
  </section>
</section>
<section class="detail" id="spawn_monitor/2">

  <div class="detail-header">
    <a href="#spawn_monitor/2" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">spawn_monitor(node, fun)</h1>

        <span class="note">(since 1.14.0)</span>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/node.ex#L268" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> spawn_monitor(<a href="#t:t/0">t</a>(), (-&gt; <a href="typespecs.xhtml#basic-types">any</a>())) :: {<a href="typespecs.xhtml#basic-types">pid</a>(), <a href="typespecs.xhtml#basic-types">reference</a>()}</pre>

      </div>

<p>Spawns the given function on a node, monitors it and returns its PID
and monitoring reference.</p><p>Inlined by the compiler.</p>
  </section>
</section>
<section class="detail" id="spawn_monitor/4">

  <div class="detail-header">
    <a href="#spawn_monitor/4" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">spawn_monitor(node, module, fun, args)</h1>

        <span class="note">(since 1.14.0)</span>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/node.ex#L280" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> spawn_monitor(<a href="#t:t/0">t</a>(), <a href="typespecs.xhtml#built-in-types">module</a>(), <a href="typespecs.xhtml#basic-types">atom</a>(), [<a href="typespecs.xhtml#basic-types">any</a>()]) :: {<a href="typespecs.xhtml#basic-types">pid</a>(), <a href="typespecs.xhtml#basic-types">reference</a>()}</pre>

      </div>

<p>Spawns the given module and function passing the given args on a node,
monitors it and returns its PID and monitoring reference.</p><p>Inlined by the compiler.</p>
  </section>
</section>
<section class="detail" id="start/3">

    <span id="start/1"></span>

    <span id="start/2"></span>

  <div class="detail-header">
    <a href="#start/3" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">start(name, type \\ :longnames, tick_time \\ 15000)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/node.ex#L35" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> start(<a href="typespecs.xhtml#built-in-types">node</a>(), :longnames | :shortnames, <a href="typespecs.xhtml#basic-types">non_neg_integer</a>()) ::
  {:ok, <a href="typespecs.xhtml#basic-types">pid</a>()} | {:error, <a href="typespecs.xhtml#built-in-types">term</a>()}</pre>

      </div>

<p>Turns a non-distributed node into a distributed node.</p><p>This functionality starts the <code class="inline">:net_kernel</code> and other related
processes.</p><p>This function is rarely invoked in practice. Instead, nodes are
named and started via the command line by using the <code class="inline">--sname</code> and
<code class="inline">--name</code> flags. If you need to use this function to dynamically
name a node, please make sure the <code class="inline">epmd</code> operating system process
is running by calling <code class="inline">epmd -daemon</code>.</p><p>Invoking this function when the distribution has already been started,
either via the command line interface or dynamically, will return an
error.</p><h2 id="start/3-examples" class="section-heading"><a href="#start/3-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="p" data-group-id="6440284809-1">{</samp><samp class="ss">:ok</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">pid</samp><samp class="p" data-group-id="6440284809-1">}</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="nc">Node</samp><samp class="o">.</samp><samp class="n">start</samp><samp class="p" data-group-id="6440284809-2">(</samp><samp class="ss">:example</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:shortnames</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">15000</samp><samp class="p" data-group-id="6440284809-2">)</samp></code></pre>
  </section>
</section>
<section class="detail" id="stop/0">

  <div class="detail-header">
    <a href="#stop/0" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">stop()</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/node.ex#L48" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> stop() :: :ok | {:error, :not_allowed | :not_found}</pre>

      </div>

<p>Turns a distributed node into a non-distributed node.</p><p>For other nodes in the network, this is the same as the node going down.
Only possible when the node was started with <a href="#start/3"><code class="inline">Node.start/3</code></a>, otherwise
returns <code class="inline">{:error, :not_allowed}</code>. Returns <code class="inline">{:error, :not_found}</code> if the
local node is not alive.</p>
  </section>
</section>

        </div>
      </section>


  </body>
</html>
