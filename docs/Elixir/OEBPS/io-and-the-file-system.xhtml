<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"
      xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>IO and the file system - Elixir v1.18.4</title>
    <meta name="generator" content="ExDoc v0.38.2" />
    <link type="text/css" rel="stylesheet" href="dist/epub-elixir-FNUUKFP7.css" />
    <script src="dist/epub-4WIP524F.js"></script>

  </head>
  <body class="content-inner">

    <h1 id="content">IO and the file system</h1>
<p>This chapter introduces the input/output mechanisms, file-system-related tasks, and related modules such as <a href="IO.xhtml"><code class="inline">IO</code></a>, <a href="File.xhtml"><code class="inline">File</code></a>, and <a href="Path.xhtml"><code class="inline">Path</code></a>. The IO system provides a great opportunity to shed some light on some philosophies and curiosities of Elixir and the Erlang VM.</p><h2 id="the-io-module">The <a href="IO.xhtml"><code class="inline">IO</code></a> module</h2><p>The <a href="IO.xhtml"><code class="inline">IO</code></a> module is the main mechanism in Elixir for reading and writing to standard input/output (<code class="inline">:stdio</code>), standard error (<code class="inline">:stderr</code>), files, and other IO devices. Usage of the module is pretty straightforward:</p><pre><code class="makeup elixir" translate="no"><span class="gp unselectable">iex&gt; </span><span class="nc">IO</span><span class="o">.</span><span class="n">puts</span><span class="p" data-group-id="9894623917-1">(</span><span class="s">&quot;hello world&quot;</span><span class="p" data-group-id="9894623917-1">)</span><span class="w">
</span><span class="n">hello</span><span class="w"> </span><span class="n">world</span><span class="w">
</span><span class="ss">:ok</span><span class="w">
</span><span class="gp unselectable">iex&gt; </span><span class="nc">IO</span><span class="o">.</span><span class="n">gets</span><span class="p" data-group-id="9894623917-2">(</span><span class="s">&quot;yes or no? &quot;</span><span class="p" data-group-id="9894623917-2">)</span><span class="w">
</span><span class="n">yes</span><span class="w"> </span><span class="ow">or</span><span class="w"> </span><span class="n">no?</span><span class="w"> </span><span class="n">yes</span><span class="w">
</span><span class="s">&quot;yes</span><span class="se">\n</span><span class="s">&quot;</span></code></pre><p>By default, functions in the <a href="IO.xhtml"><code class="inline">IO</code></a> module read from the standard input and write to the standard output. We can change that by passing, for example, <code class="inline">:stderr</code> as an argument (in order to write to the standard error device):</p><pre><code class="makeup elixir" translate="no"><span class="gp unselectable">iex&gt; </span><span class="nc">IO</span><span class="o">.</span><span class="n">puts</span><span class="p" data-group-id="4778932441-1">(</span><span class="ss">:stderr</span><span class="p">,</span><span class="w"> </span><span class="s">&quot;hello world&quot;</span><span class="p" data-group-id="4778932441-1">)</span><span class="w">
</span><span class="n">hello</span><span class="w"> </span><span class="n">world</span><span class="w">
</span><span class="ss">:ok</span></code></pre><h2 id="the-file-module">The <a href="File.xhtml"><code class="inline">File</code></a> module</h2><p>The <a href="File.xhtml"><code class="inline">File</code></a> module contains functions that allow us to open files as IO devices. By default, files are opened in binary mode, which requires developers to use the specific <a href="IO.xhtml#binread/2"><code class="inline">IO.binread/2</code></a> and <a href="IO.xhtml#binwrite/2"><code class="inline">IO.binwrite/2</code></a> functions from the <a href="IO.xhtml"><code class="inline">IO</code></a> module:</p><section role="note" class="admonition warning"><h4 class="admonition-title warning">Potential data loss warning</h4><p>The following code opens a file for writing. If an existing file is available at the given path, its contents will be deleted.</p></section><pre><code class="makeup elixir" translate="no"><span class="gp unselectable">iex&gt; </span><span class="p" data-group-id="3695486313-1">{</span><span class="ss">:ok</span><span class="p">,</span><span class="w"> </span><span class="n">file</span><span class="p" data-group-id="3695486313-1">}</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nc">File</span><span class="o">.</span><span class="n">open</span><span class="p" data-group-id="3695486313-2">(</span><span class="s">&quot;path/to/file/hello&quot;</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="3695486313-3">[</span><span class="ss">:write</span><span class="p" data-group-id="3695486313-3">]</span><span class="p" data-group-id="3695486313-2">)</span><span class="w">
</span><span class="p" data-group-id="3695486313-4">{</span><span class="ss">:ok</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="3695486313-5">#</span><span class="nc" data-group-id="3695486313-5">PID</span><span class="p" data-group-id="3695486313-5">&lt;</span><span class="mi">0</span><span class="o">.</span><span class="mi">47</span><span class="o">.</span><span class="mi">0</span><span class="p" data-group-id="3695486313-5">&gt;</span><span class="p" data-group-id="3695486313-4">}</span><span class="w">
</span><span class="gp unselectable">iex&gt; </span><span class="nc">IO</span><span class="o">.</span><span class="n">binwrite</span><span class="p" data-group-id="3695486313-6">(</span><span class="n">file</span><span class="p">,</span><span class="w"> </span><span class="s">&quot;world&quot;</span><span class="p" data-group-id="3695486313-6">)</span><span class="w">
</span><span class="ss">:ok</span><span class="w">
</span><span class="gp unselectable">iex&gt; </span><span class="nc">File</span><span class="o">.</span><span class="n">close</span><span class="p" data-group-id="3695486313-7">(</span><span class="n">file</span><span class="p" data-group-id="3695486313-7">)</span><span class="w">
</span><span class="ss">:ok</span><span class="w">
</span><span class="gp unselectable">iex&gt; </span><span class="nc">File</span><span class="o">.</span><span class="n">read</span><span class="p" data-group-id="3695486313-8">(</span><span class="s">&quot;path/to/file/hello&quot;</span><span class="p" data-group-id="3695486313-8">)</span><span class="w">
</span><span class="p" data-group-id="3695486313-9">{</span><span class="ss">:ok</span><span class="p">,</span><span class="w"> </span><span class="s">&quot;world&quot;</span><span class="p" data-group-id="3695486313-9">}</span></code></pre><p>The file could be opened with the <code class="inline">:append</code> option, instead of <code class="inline">:write</code>, to preserve its contents. You may also pass the <code class="inline">:utf8</code> option, which tells the <a href="File.xhtml"><code class="inline">File</code></a> module to interpret the bytes read from the file as UTF-8-encoded bytes.</p><p>Besides functions for opening, reading and writing files, the <a href="File.xhtml"><code class="inline">File</code></a> module has many functions to work with the file system. Those functions are named after their UNIX equivalents. For example, <a href="File.xhtml#rm/1"><code class="inline">File.rm/1</code></a> can be used to remove files, <a href="File.xhtml#mkdir/1"><code class="inline">File.mkdir/1</code></a> to create directories, <a href="File.xhtml#mkdir_p/1"><code class="inline">File.mkdir_p/1</code></a> to create directories and all their parent chain. There are even <a href="File.xhtml#cp_r/2"><code class="inline">File.cp_r/2</code></a> and <a href="File.xhtml#rm_rf/1"><code class="inline">File.rm_rf/1</code></a> to respectively copy and remove files and directories recursively (i.e., copying and removing the contents of the directories too).</p><p>You will also notice that functions in the <a href="File.xhtml"><code class="inline">File</code></a> module have two variants: one &quot;regular&quot; variant and another variant with a trailing bang (<code class="inline">!</code>). For example, when we read the <code class="inline">&quot;hello&quot;</code> file in the example above, we use <a href="File.xhtml#read/1"><code class="inline">File.read/1</code></a>. Alternatively, we can use <a href="File.xhtml#read!/1"><code class="inline">File.read!/1</code></a>:</p><pre><code class="makeup elixir" translate="no"><span class="gp unselectable">iex&gt; </span><span class="nc">File</span><span class="o">.</span><span class="n">read</span><span class="p" data-group-id="2257356031-1">(</span><span class="s">&quot;path/to/file/hello&quot;</span><span class="p" data-group-id="2257356031-1">)</span><span class="w">
</span><span class="p" data-group-id="2257356031-2">{</span><span class="ss">:ok</span><span class="p">,</span><span class="w"> </span><span class="s">&quot;world&quot;</span><span class="p" data-group-id="2257356031-2">}</span><span class="w">
</span><span class="gp unselectable">iex&gt; </span><span class="nc">File</span><span class="o">.</span><span class="n">read!</span><span class="p" data-group-id="2257356031-3">(</span><span class="s">&quot;path/to/file/hello&quot;</span><span class="p" data-group-id="2257356031-3">)</span><span class="w">
</span><span class="s">&quot;world&quot;</span><span class="w">
</span><span class="gp unselectable">iex&gt; </span><span class="nc">File</span><span class="o">.</span><span class="n">read</span><span class="p" data-group-id="2257356031-4">(</span><span class="s">&quot;path/to/file/unknown&quot;</span><span class="p" data-group-id="2257356031-4">)</span><span class="w">
</span><span class="p" data-group-id="2257356031-5">{</span><span class="ss">:error</span><span class="p">,</span><span class="w"> </span><span class="ss">:enoent</span><span class="p" data-group-id="2257356031-5">}</span><span class="w">
</span><span class="gp unselectable">iex&gt; </span><span class="nc">File</span><span class="o">.</span><span class="n">read!</span><span class="p" data-group-id="2257356031-6">(</span><span class="s">&quot;path/to/file/unknown&quot;</span><span class="p" data-group-id="2257356031-6">)</span><span class="w">
</span><span class="gt">** (File.Error) could not read file &quot;path/to/file/unknown&quot;: no such file or directory</span></code></pre><p>Notice that the version with <code class="inline">!</code> returns the contents of the file instead of a tuple, and if anything goes wrong the function raises an error.</p><p>The version without <code class="inline">!</code> is preferred when you want to handle different outcomes using pattern matching:</p><pre><code class="makeup elixir" translate="no"><span class="k">case</span><span class="w"> </span><span class="nc">File</span><span class="o">.</span><span class="n">read</span><span class="p" data-group-id="8654058220-1">(</span><span class="s">&quot;path/to/file/hello&quot;</span><span class="p" data-group-id="8654058220-1">)</span><span class="w"> </span><span class="k" data-group-id="8654058220-2">do</span><span class="w">
  </span><span class="p" data-group-id="8654058220-3">{</span><span class="ss">:ok</span><span class="p">,</span><span class="w"> </span><span class="n">body</span><span class="p" data-group-id="8654058220-3">}</span><span class="w"> </span><span class="o">-&gt;</span><span class="w"> </span><span class="c1"># do something with the `body`</span><span class="w">
  </span><span class="p" data-group-id="8654058220-4">{</span><span class="ss">:error</span><span class="p">,</span><span class="w"> </span><span class="n">reason</span><span class="p" data-group-id="8654058220-4">}</span><span class="w"> </span><span class="o">-&gt;</span><span class="w"> </span><span class="c1"># handle the error caused by `reason`</span><span class="w">
</span><span class="k" data-group-id="8654058220-2">end</span></code></pre><p>However, if you expect the file to be there, the bang variation is more useful as it raises a meaningful error message. Avoid writing:</p><pre><code class="makeup elixir" translate="no"><span class="p" data-group-id="4008052758-1">{</span><span class="ss">:ok</span><span class="p">,</span><span class="w"> </span><span class="n">body</span><span class="p" data-group-id="4008052758-1">}</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nc">File</span><span class="o">.</span><span class="n">read</span><span class="p" data-group-id="4008052758-2">(</span><span class="s">&quot;path/to/file/unknown&quot;</span><span class="p" data-group-id="4008052758-2">)</span></code></pre><p>as, in case of an error, <a href="File.xhtml#read/1"><code class="inline">File.read/1</code></a> will return <code class="inline">{:error, reason}</code> and the pattern matching will fail. You will still get the desired result (a raised error), but the message will be about the pattern which doesn't match (thus being cryptic in respect to what the error actually is about).</p><p>Therefore, if you don't want to handle the error outcomes, prefer to use the functions ending with an exclamation mark, such as <a href="File.xhtml#read!/1"><code class="inline">File.read!/1</code></a>.</p><h2 id="the-path-module">The <a href="Path.xhtml"><code class="inline">Path</code></a> module</h2><p>The majority of the functions in the <a href="File.xhtml"><code class="inline">File</code></a> module expect paths as arguments. Most commonly, those paths will be regular binaries. The <a href="Path.xhtml"><code class="inline">Path</code></a> module provides facilities for working with such paths:</p><pre><code class="makeup elixir" translate="no"><span class="gp unselectable">iex&gt; </span><span class="nc">Path</span><span class="o">.</span><span class="n">join</span><span class="p" data-group-id="8592729649-1">(</span><span class="s">&quot;foo&quot;</span><span class="p">,</span><span class="w"> </span><span class="s">&quot;bar&quot;</span><span class="p" data-group-id="8592729649-1">)</span><span class="w">
</span><span class="s">&quot;foo/bar&quot;</span><span class="w">
</span><span class="gp unselectable">iex&gt; </span><span class="nc">Path</span><span class="o">.</span><span class="n">expand</span><span class="p" data-group-id="8592729649-2">(</span><span class="s">&quot;~/hello&quot;</span><span class="p" data-group-id="8592729649-2">)</span><span class="w">
</span><span class="s">&quot;/Users/jose/hello&quot;</span></code></pre><p>Using functions from the <a href="Path.xhtml"><code class="inline">Path</code></a> module as opposed to directly manipulating strings is preferred since the <a href="Path.xhtml"><code class="inline">Path</code></a> module takes care of different operating systems transparently. Finally, keep in mind that Elixir will automatically convert slashes (<code class="inline">/</code>) into backslashes (<code class="inline">\</code>) on Windows when performing file operations.</p><p>With this, we have covered the main modules that Elixir provides for dealing with IO and interacting with the file system. In the next section, we will peek a bit under the covers and learn how the IO system is implemented in the VM.</p><h2 id="processes">Processes</h2><p>You may have noticed that <a href="File.xhtml#open/2"><code class="inline">File.open/2</code></a> returns a tuple like <code class="inline">{:ok, pid}</code>:</p><pre><code class="makeup elixir" translate="no"><span class="gp unselectable">iex&gt; </span><span class="p" data-group-id="1150461002-1">{</span><span class="ss">:ok</span><span class="p">,</span><span class="w"> </span><span class="n">file</span><span class="p" data-group-id="1150461002-1">}</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nc">File</span><span class="o">.</span><span class="n">open</span><span class="p" data-group-id="1150461002-2">(</span><span class="s">&quot;hello&quot;</span><span class="p" data-group-id="1150461002-2">)</span><span class="w">
</span><span class="p" data-group-id="1150461002-3">{</span><span class="ss">:ok</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="1150461002-4">#</span><span class="nc" data-group-id="1150461002-4">PID</span><span class="p" data-group-id="1150461002-4">&lt;</span><span class="mi">0</span><span class="o">.</span><span class="mi">47</span><span class="o">.</span><span class="mi">0</span><span class="p" data-group-id="1150461002-4">&gt;</span><span class="p" data-group-id="1150461002-3">}</span></code></pre><p>This happens because the <a href="IO.xhtml"><code class="inline">IO</code></a> module actually works with processes (see <a href="processes.xhtml">the previous chapter</a>). Given a file is a process, when you write to a file that has been closed, you are actually sending a message to a process which has been terminated:</p><pre><code class="makeup elixir" translate="no"><span class="gp unselectable">iex&gt; </span><span class="nc">File</span><span class="o">.</span><span class="n">close</span><span class="p" data-group-id="8140948743-1">(</span><span class="n">file</span><span class="p" data-group-id="8140948743-1">)</span><span class="w">
</span><span class="ss">:ok</span><span class="w">
</span><span class="gp unselectable">iex&gt; </span><span class="nc">IO</span><span class="o">.</span><span class="n">write</span><span class="p" data-group-id="8140948743-2">(</span><span class="n">file</span><span class="p">,</span><span class="w"> </span><span class="s">&quot;is anybody out there&quot;</span><span class="p" data-group-id="8140948743-2">)</span><span class="w">
</span><span class="gt">** (ErlangError) Erlang error: :terminated:</span><span class="w">

  </span><span class="o">*</span><span class="w"> </span><span class="mi">1</span><span class="n">st</span><span class="w"> </span><span class="ss">argument</span><span class="p">:</span><span class="w"> </span><span class="n">the</span><span class="w"> </span><span class="n">device</span><span class="w"> </span><span class="n">has</span><span class="w"> </span><span class="n">terminated</span><span class="w">

    </span><span class="p" data-group-id="8140948743-3">(</span><span class="n">stdlib</span><span class="w"> </span><span class="mf">5.0</span><span class="p" data-group-id="8140948743-3">)</span><span class="w"> </span><span class="n">io</span><span class="o">.</span><span class="n">erl</span><span class="p">:</span><span class="mi">94</span><span class="p">:</span><span class="w"> </span><span class="nc">:io</span><span class="o">.</span><span class="n">put_chars</span><span class="p" data-group-id="8140948743-4">(</span><span class="p" data-group-id="8140948743-5">#</span><span class="nc" data-group-id="8140948743-5">PID</span><span class="p" data-group-id="8140948743-5">&lt;</span><span class="mi">0</span><span class="o">.</span><span class="mi">114</span><span class="o">.</span><span class="mi">0</span><span class="p" data-group-id="8140948743-5">&gt;</span><span class="p">,</span><span class="w"> </span><span class="s">&quot;is anybody out there&quot;</span><span class="p" data-group-id="8140948743-4">)</span><span class="w">
    </span><span class="n">iex</span><span class="p">:</span><span class="mi">4</span><span class="p">:</span><span class="w"> </span><span class="p" data-group-id="8140948743-6">(</span><span class="n">file</span><span class="p" data-group-id="8140948743-6">)</span></code></pre><p>Let's see in more detail what happens when you request <code class="inline">IO.write(pid, binary)</code>. The <a href="IO.xhtml"><code class="inline">IO</code></a> module sends a message to the process identified by <code class="inline">pid</code> with the desired operation. A small ad-hoc process can help us see it:</p><pre><code class="makeup elixir" translate="no"><span class="gp unselectable">iex&gt; </span><span class="n">pid</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">spawn</span><span class="p" data-group-id="8510397944-1">(</span><span class="k" data-group-id="8510397944-2">fn</span><span class="w"> </span><span class="o">-&gt;</span><span class="w">
</span><span class="gp unselectable">...&gt; </span><span class="w">  </span><span class="k">receive</span><span class="w"> </span><span class="k" data-group-id="8510397944-3">do</span><span class="w">
</span><span class="gp unselectable">...&gt; </span><span class="w">    </span><span class="n">msg</span><span class="w"> </span><span class="o">-&gt;</span><span class="w"> </span><span class="nc">IO</span><span class="o">.</span><span class="n">inspect</span><span class="p" data-group-id="8510397944-4">(</span><span class="n">msg</span><span class="p" data-group-id="8510397944-4">)</span><span class="w">
</span><span class="gp unselectable">...&gt; </span><span class="w">  </span><span class="k" data-group-id="8510397944-3">end</span><span class="w">
</span><span class="gp unselectable">...&gt; </span><span class="k" data-group-id="8510397944-2">end</span><span class="p" data-group-id="8510397944-1">)</span><span class="w">
</span><span class="p" data-group-id="8510397944-5">#</span><span class="nc" data-group-id="8510397944-5">PID</span><span class="p" data-group-id="8510397944-5">&lt;</span><span class="mi">0</span><span class="o">.</span><span class="mi">57</span><span class="o">.</span><span class="mi">0</span><span class="p" data-group-id="8510397944-5">&gt;</span><span class="w">
</span><span class="gp unselectable">iex&gt; </span><span class="nc">IO</span><span class="o">.</span><span class="n">write</span><span class="p" data-group-id="8510397944-6">(</span><span class="n">pid</span><span class="p">,</span><span class="w"> </span><span class="s">&quot;hello&quot;</span><span class="p" data-group-id="8510397944-6">)</span><span class="w">
</span><span class="p" data-group-id="8510397944-7">{</span><span class="ss">:io_request</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="8510397944-8">#</span><span class="nc" data-group-id="8510397944-8">PID</span><span class="p" data-group-id="8510397944-8">&lt;</span><span class="mi">0</span><span class="o">.</span><span class="mi">41</span><span class="o">.</span><span class="mi">0</span><span class="p" data-group-id="8510397944-8">&gt;</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="8510397944-9">#</span><span class="nc" data-group-id="8510397944-9">Reference</span><span class="p" data-group-id="8510397944-9">&lt;</span><span class="mf">0.0</span><span class="o">.</span><span class="mf">8.91</span><span class="p" data-group-id="8510397944-9">&gt;</span><span class="p">,</span><span class="w">
 </span><span class="p" data-group-id="8510397944-10">{</span><span class="ss">:put_chars</span><span class="p">,</span><span class="w"> </span><span class="ss">:unicode</span><span class="p">,</span><span class="w"> </span><span class="s">&quot;hello&quot;</span><span class="p" data-group-id="8510397944-10">}</span><span class="p" data-group-id="8510397944-7">}</span><span class="w">
</span><span class="gt">** (ErlangError) erlang error: :terminated</span></code></pre><p>After <a href="IO.xhtml#write/2"><code class="inline">IO.write/2</code></a>, we can see the request sent by the <a href="IO.xhtml"><code class="inline">IO</code></a> module printed out (a four-elements tuple). Soon after that, we see that it fails since the <a href="IO.xhtml"><code class="inline">IO</code></a> module expected some kind of result, which we did not supply.</p><p>By modeling IO devices with processes, the Erlang VM allows us to even read and write to files across nodes. Neat!</p><h2 id="iodata-and-chardata"><code class="inline">iodata</code> and <code class="inline">chardata</code></h2><p>In all of the examples above, we used binaries when writing to files. However, most of the IO functions in Elixir also accept either &quot;iodata&quot; or &quot;chardata&quot;.</p><p>One of the main reasons for using &quot;iodata&quot; and &quot;chardata&quot; is for performance. For example,
imagine you need to greet someone in your application:</p><pre><code class="makeup elixir" translate="no"><span class="n">name</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s">&quot;Mary&quot;</span><span class="w">
</span><span class="nc">IO</span><span class="o">.</span><span class="n">puts</span><span class="p" data-group-id="0583775740-1">(</span><span class="s">&quot;Hello &quot;</span><span class="w"> </span><span class="o">&lt;&gt;</span><span class="w"> </span><span class="n">name</span><span class="w"> </span><span class="o">&lt;&gt;</span><span class="w"> </span><span class="s">&quot;!&quot;</span><span class="p" data-group-id="0583775740-1">)</span></code></pre><p>Given strings in Elixir are immutable, as most data structures, the example above will copy the string &quot;Mary&quot; into the new &quot;Hello Mary!&quot; string. While this is unlikely to matter for the short string as above, copying can be quite expensive for large strings! For this reason, the IO functions in Elixir allow you to pass instead a list of strings:</p><pre><code class="makeup elixir" translate="no"><span class="n">name</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s">&quot;Mary&quot;</span><span class="w">
</span><span class="nc">IO</span><span class="o">.</span><span class="n">puts</span><span class="p" data-group-id="8717014355-1">(</span><span class="p" data-group-id="8717014355-2">[</span><span class="s">&quot;Hello &quot;</span><span class="p">,</span><span class="w"> </span><span class="n">name</span><span class="p">,</span><span class="w"> </span><span class="s">&quot;!&quot;</span><span class="p" data-group-id="8717014355-2">]</span><span class="p" data-group-id="8717014355-1">)</span></code></pre><p>In the example above, there is no copying. Instead we create a list that contains the original name. We call such lists either &quot;iodata&quot; or &quot;chardata&quot; and we will learn the precise difference between them soon.</p><p>Those lists are very useful because it can actually simplify the processing strings in several scenarios. For example, imagine you have a list of values, such as <code class="inline">[&quot;apple&quot;, &quot;banana&quot;, &quot;lemon&quot;]</code> that you want to write to disk separated by commas. How can you achieve this?</p><p>One option is to use <a href="Enum.xhtml#join/2"><code class="inline">Enum.join/2</code></a> and convert the values to a string:</p><pre><code class="makeup elixir" translate="no"><span class="gp unselectable">iex&gt; </span><span class="nc">Enum</span><span class="o">.</span><span class="n">join</span><span class="p" data-group-id="4371910232-1">(</span><span class="p" data-group-id="4371910232-2">[</span><span class="s">&quot;apple&quot;</span><span class="p">,</span><span class="w"> </span><span class="s">&quot;banana&quot;</span><span class="p">,</span><span class="w"> </span><span class="s">&quot;lemon&quot;</span><span class="p" data-group-id="4371910232-2">]</span><span class="p">,</span><span class="w"> </span><span class="s">&quot;,&quot;</span><span class="p" data-group-id="4371910232-1">)</span><span class="w">
</span><span class="s">&quot;apple,banana,lemon&quot;</span></code></pre><p>The above returns a new string by copying each value into the new string. However, with the knowledge in this section, we know that we can pass a list of strings to the IO/File functions. So instead we can do:</p><pre><code class="makeup elixir" translate="no"><span class="gp unselectable">iex&gt; </span><span class="nc">Enum</span><span class="o">.</span><span class="n">intersperse</span><span class="p" data-group-id="2245056003-1">(</span><span class="p" data-group-id="2245056003-2">[</span><span class="s">&quot;apple&quot;</span><span class="p">,</span><span class="w"> </span><span class="s">&quot;banana&quot;</span><span class="p">,</span><span class="w"> </span><span class="s">&quot;lemon&quot;</span><span class="p" data-group-id="2245056003-2">]</span><span class="p">,</span><span class="w"> </span><span class="s">&quot;,&quot;</span><span class="p" data-group-id="2245056003-1">)</span><span class="w">
</span><span class="p" data-group-id="2245056003-3">[</span><span class="s">&quot;apple&quot;</span><span class="p">,</span><span class="w"> </span><span class="s">&quot;,&quot;</span><span class="p">,</span><span class="w"> </span><span class="s">&quot;banana&quot;</span><span class="p">,</span><span class="w"> </span><span class="s">&quot;,&quot;</span><span class="p">,</span><span class="w"> </span><span class="s">&quot;lemon&quot;</span><span class="p" data-group-id="2245056003-3">]</span></code></pre><p>&quot;iodata&quot; and &quot;chardata&quot; do not only contain strings, but they may contain arbitrary nested lists of strings too:</p><pre><code class="makeup elixir" translate="no"><span class="gp unselectable">iex&gt; </span><span class="nc">IO</span><span class="o">.</span><span class="n">puts</span><span class="p" data-group-id="0562868372-1">(</span><span class="p" data-group-id="0562868372-2">[</span><span class="s">&quot;apple&quot;</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="0562868372-3">[</span><span class="s">&quot;,&quot;</span><span class="p">,</span><span class="w"> </span><span class="s">&quot;banana&quot;</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="0562868372-4">[</span><span class="s">&quot;,&quot;</span><span class="p">,</span><span class="w"> </span><span class="s">&quot;lemon&quot;</span><span class="p" data-group-id="0562868372-4">]</span><span class="p" data-group-id="0562868372-3">]</span><span class="p" data-group-id="0562868372-2">]</span><span class="p" data-group-id="0562868372-1">)</span></code></pre><p>&quot;iodata&quot; and &quot;chardata&quot; may also contain integers. For example, we could print our comma separated list of values by using <code class="inline">?,</code> as separator, which is the integer representing a comma (<code class="inline">44</code>):</p><pre><code class="makeup elixir" translate="no"><span class="gp unselectable">iex&gt; </span><span class="nc">IO</span><span class="o">.</span><span class="n">puts</span><span class="p" data-group-id="3304714737-1">(</span><span class="p" data-group-id="3304714737-2">[</span><span class="s">&quot;apple&quot;</span><span class="p">,</span><span class="w"> </span><span class="sc">?,</span><span class="p">,</span><span class="w"> </span><span class="s">&quot;banana&quot;</span><span class="p">,</span><span class="w"> </span><span class="sc">?,</span><span class="p">,</span><span class="w"> </span><span class="s">&quot;lemon&quot;</span><span class="p" data-group-id="3304714737-2">]</span><span class="p" data-group-id="3304714737-1">)</span></code></pre><p>The difference between &quot;iodata&quot; and &quot;chardata&quot; is precisely what said integer represents. For iodata, the integers represent bytes. For chardata, the integers represent Unicode codepoints. For ASCII characters, the byte representation is the same as the codepoint representation, so it fits both classifications. However, the default IO device works with chardata, which means we can do:</p><pre><code class="makeup elixir" translate="no"><span class="gp unselectable">iex&gt; </span><span class="nc">IO</span><span class="o">.</span><span class="n">puts</span><span class="p" data-group-id="4773923305-1">(</span><span class="p" data-group-id="4773923305-2">[</span><span class="sc">?O</span><span class="p">,</span><span class="w"> </span><span class="sc">?l</span><span class="p">,</span><span class="w"> </span><span class="sc">?á</span><span class="p">,</span><span class="w"> </span><span class="sc">?\s</span><span class="p">,</span><span class="w"> </span><span class="s">&quot;Mary&quot;</span><span class="p">,</span><span class="w"> </span><span class="sc">?!</span><span class="p" data-group-id="4773923305-2">]</span><span class="p" data-group-id="4773923305-1">)</span></code></pre><p>Charlists, such as <code class="inline">~c&quot;hello world&quot;</code>, are lists of integers, and therefore are chardata.</p><p>We packed a lot into this small section, so let's break it down:</p><ul><li><p>iodata and chardata are lists of binaries and integers. Those binaries and integers can be arbitrarily nested inside lists. Their goal is to give flexibility and performance when working with IO devices and files;</p></li><li><p>the choice between iodata and chardata depends on the encoding of the IO device. If the file is opened without encoding, the file expects iodata, and the functions in the <a href="IO.xhtml"><code class="inline">IO</code></a> module starting with <code class="inline">bin*</code> must be used. The default IO device (<code class="inline">:stdio</code>) and files opened with <code class="inline">:utf8</code> encoding expect chardata and work with the remaining functions in the <a href="IO.xhtml"><code class="inline">IO</code></a> module;</p></li></ul><p>This finishes our tour of IO devices and IO related functionality. We have learned about three Elixir modules - <a href="IO.xhtml"><code class="inline">IO</code></a>, <a href="File.xhtml"><code class="inline">File</code></a>, and <a href="Path.xhtml"><code class="inline">Path</code></a> - as well as how the VM uses processes for the underlying IO mechanisms and how to use <code class="inline">chardata</code> and <code class="inline">iodata</code> for IO operations.</p>

  </body>
</html>
