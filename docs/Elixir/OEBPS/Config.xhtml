<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"
      xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>Config - Elixir v1.18.4</title>
    <meta name="generator" content="ExDoc v0.38.2" />
    <link type="text/css" rel="stylesheet" href="dist/epub-elixir-FNUUKFP7.css" />
    <script src="dist/epub-4WIP524F.js"></script>

  </head>
  <body class="content-inner">

    <h1 id="content">
Config 
    </h1>


      <section id="moduledoc" class="docstring">
<p>A simple keyword-based configuration API.</p><h2 id="module-example">Example</h2><p>This module is most commonly used to define application configuration,
typically in <code class="inline">config/config.exs</code>:</p><pre><code class="makeup elixir" translate="no"><samp class="kn">import</samp><samp class="w"> </samp><samp class="nc">Config</samp><samp class="w">

</samp><samp class="n">config</samp><samp class="w"> </samp><samp class="ss">:some_app</samp><samp class="p">,</samp><samp class="w">
  </samp><samp class="ss">key1</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;value1&quot;</samp><samp class="p">,</samp><samp class="w">
  </samp><samp class="ss">key2</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;value2&quot;</samp><samp class="w">

</samp><samp class="n">import_config</samp><samp class="w"> </samp><samp class="s">&quot;</samp><samp class="si" data-group-id="4674921515-1">#{</samp><samp class="n">config_env</samp><samp class="p" data-group-id="4674921515-2">(</samp><samp class="p" data-group-id="4674921515-2">)</samp><samp class="si" data-group-id="4674921515-1">}</samp><samp class="s">.exs&quot;</samp></code></pre><p><code class="inline">import Config</code> will import the functions <a href="#config/2"><code class="inline">config/2</code></a>, <a href="#config/3"><code class="inline">config/3</code></a>
<a href="#config_env/0"><code class="inline">config_env/0</code></a>, <a href="#config_target/0"><code class="inline">config_target/0</code></a>, and <a href="#import_config/1"><code class="inline">import_config/1</code></a>
to help you manage your configuration.</p><p><a href="#config/2"><code class="inline">config/2</code></a> and <a href="#config/3"><code class="inline">config/3</code></a> are used to define key-value configuration
for a given application. Once Mix starts, it will automatically
evaluate the configuration file and persist the configuration above
into <code class="inline">:some_app</code>'s application environment, which can be accessed in
as follows:</p><pre><code class="makeup elixir" translate="no"><samp class="s">&quot;value1&quot;</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="nc">Application</samp><samp class="o">.</samp><samp class="n">fetch_env!</samp><samp class="p" data-group-id="4855281243-1">(</samp><samp class="ss">:some_app</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:key1</samp><samp class="p" data-group-id="4855281243-1">)</samp></code></pre><p>Finally, the line <code class="inline">import_config &quot;#{config_env()}.exs&quot;</code> will import
other config files based on the current configuration environment,
such as <code class="inline">config/dev.exs</code> and <code class="inline">config/test.exs</code>.</p><p><a href="Config.xhtml"><code class="inline">Config</code></a> also provides a low-level API for evaluating and reading
configuration, under the <a href="Config.Reader.xhtml"><code class="inline">Config.Reader</code></a> module.</p><section role="note" class="admonition info"><h4 class="admonition-title info">Avoid application environment in libraries</h4><p>If you are writing a library to be used by other developers,
it is generally recommended to avoid the application environment, as the
application environment is effectively a global storage. Also note that
the <code class="inline">config/config.exs</code> of a library is not evaluated when the library is
used as a dependency, as configuration is always meant to configure the
current project. For more information, see <a href="design-anti-patterns.xhtml#using-application-configuration-for-libraries">&quot;Using application configuration for
libraries&quot;</a>.</p></section><h2 id="module-migrating-from-use-mix-config">Migrating from <code class="inline">use Mix.Config</code></h2><p>The <a href="Config.xhtml"><code class="inline">Config</code></a> module in Elixir was introduced in v1.9 as a replacement to
<code class="inline">use Mix.Config</code>, which was specific to Mix and has been deprecated.</p><p>You can leverage <a href="Config.xhtml"><code class="inline">Config</code></a> instead of <code class="inline">use Mix.Config</code> in three steps. The first
step is to replace <code class="inline">use Mix.Config</code> at the top of your config files by
<code class="inline">import Config</code>.</p><p>The second is to make sure your <a href="#import_config/1"><code class="inline">import_config/1</code></a> calls do not have a
wildcard character. If so, you need to perform the wildcard lookup
manually. For example, if you did:</p><pre><code class="makeup elixir" translate="no"><samp class="n">import_config</samp><samp class="w"> </samp><samp class="s">&quot;../apps/*/config/config.exs&quot;</samp></code></pre><p>It has to be replaced by:</p><pre><code class="makeup elixir" translate="no"><samp class="k">for</samp><samp class="w"> </samp><samp class="n">config</samp><samp class="w"> </samp><samp class="o">&lt;-</samp><samp class="w"> </samp><samp class="s">&quot;../apps/*/config/config.exs&quot;</samp><samp class="w"> </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Path</samp><samp class="o">.</samp><samp class="n">expand</samp><samp class="p" data-group-id="3335044534-1">(</samp><samp class="bp">__DIR__</samp><samp class="p" data-group-id="3335044534-1">)</samp><samp class="w"> </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Path</samp><samp class="o">.</samp><samp class="n">wildcard</samp><samp class="p" data-group-id="3335044534-2">(</samp><samp class="p" data-group-id="3335044534-2">)</samp><samp class="w"> </samp><samp class="k" data-group-id="3335044534-3">do</samp><samp class="w">
  </samp><samp class="n">import_config</samp><samp class="w"> </samp><samp class="n">config</samp><samp class="w">
</samp><samp class="k" data-group-id="3335044534-3">end</samp></code></pre><p>The last step is to replace all <code class="inline">Mix.env()</code> calls in the config files with <code class="inline">config_env()</code>.</p><p>Keep in mind you must also avoid using <code class="inline">Mix.env()</code> inside your project files.
To check the environment at <em>runtime</em>, you may add a configuration key:</p><pre><code class="makeup elixir" translate="no"><samp class="c1"># config.exs</samp><samp class="w">
</samp><samp class="n">...</samp><samp class="w">
</samp><samp class="n">config</samp><samp class="w"> </samp><samp class="ss">:my_app</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">env</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="n">config_env</samp><samp class="p" data-group-id="9748182859-1">(</samp><samp class="p" data-group-id="9748182859-1">)</samp></code></pre><p>Then, in other scripts and modules, you may get the environment with
<a href="Application.xhtml#fetch_env!/2"><code class="inline">Application.fetch_env!/2</code></a>:</p><pre><code class="makeup elixir" translate="no"><samp class="c1"># router.exs</samp><samp class="w">
</samp><samp class="n">...</samp><samp class="w">
</samp><samp class="k">if</samp><samp class="w"> </samp><samp class="nc">Application</samp><samp class="o">.</samp><samp class="n">fetch_env!</samp><samp class="p" data-group-id="1474981886-1">(</samp><samp class="ss">:my_app</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:env</samp><samp class="p" data-group-id="1474981886-1">)</samp><samp class="w"> </samp><samp class="o">==</samp><samp class="w"> </samp><samp class="ss">:prod</samp><samp class="w"> </samp><samp class="k" data-group-id="1474981886-2">do</samp><samp class="w">
  </samp><samp class="n">...</samp><samp class="w">
</samp><samp class="k" data-group-id="1474981886-2">end</samp></code></pre><p>The only places where you may access functions from the <a href="https://hexdocs.pm/mix/Mix.html"><code class="inline">Mix</code></a> module are
the <code class="inline">mix.exs</code> file and inside custom Mix tasks, which are always within
the <code class="inline">Mix.Tasks</code> namespace.</p><h2 id="module-config-runtime-exs"><code class="inline">config/runtime.exs</code></h2><p>For runtime configuration, you can use the <code class="inline">config/runtime.exs</code> file.
It is executed right before applications start in both Mix and releases
(assembled with <a href="https://hexdocs.pm/mix/Mix.Tasks.Release.html"><code class="inline">mix release</code></a>).</p>
      </section>


      <section id="summary" class="details-list">
        <h1 class="section-heading">Summary</h1>
<div class="summary-functions summary">
  <h2>
    <a href="#functions">Functions</a>
  </h2>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#config/2" data-no-tooltip="" translate="no">config(root_key, opts)</a>

      </div>

        <div class="summary-synopsis"><p>Configures the given <code class="inline">root_key</code>.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#config/3" data-no-tooltip="" translate="no">config(root_key, key, opts)</a>

      </div>

        <div class="summary-synopsis"><p>Configures the given <code class="inline">key</code> for the given <code class="inline">root_key</code>.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#config_env/0" data-no-tooltip="" translate="no">config_env()</a>

      </div>

        <div class="summary-synopsis"><p>Returns the environment this configuration file is executed on.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#config_target/0" data-no-tooltip="" translate="no">config_target()</a>

      </div>

        <div class="summary-synopsis"><p>Returns the target this configuration file is executed on.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#import_config/1" data-no-tooltip="" translate="no">import_config(file)</a>

      </div>

        <div class="summary-synopsis"><p>Imports configuration from the given file.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#read_config/1" data-no-tooltip="" translate="no">read_config(root_key)</a>

      </div>

        <div class="summary-synopsis"><p>Reads the configuration for the given root key.</p></div>

    </div>

</div>

      </section>


      <section id="functions" class="details-list">
        <h1 class="section-heading">Functions</h1>

        <div class="functions-list">
<section class="detail" id="config/2">

  <div class="detail-header">
    <a href="#config/2" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">config(root_key, opts)</h1>

        <span class="note">(since 1.9.0)</span>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/config.ex#L146" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

<p>Configures the given <code class="inline">root_key</code>.</p><p>Keyword lists are always deep-merged.</p><h2 id="config/2-examples" class="section-heading"><a href="#config/2-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><p>The given <code class="inline">opts</code> are merged into the existing configuration
for the given <code class="inline">root_key</code>. Conflicting keys are overridden by the
ones specified in <code class="inline">opts</code>, unless they are keywords, which are
deep merged recursively. For example, the application configuration
below</p><pre><code class="makeup elixir" translate="no"><samp class="n">config</samp><samp class="w"> </samp><samp class="ss">:logger</samp><samp class="p">,</samp><samp class="w">
  </samp><samp class="ss">level</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="ss">:warn</samp><samp class="p">,</samp><samp class="w">
  </samp><samp class="ss">backends</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="9526898986-1">[</samp><samp class="ss">:console</samp><samp class="p" data-group-id="9526898986-1">]</samp><samp class="w">

</samp><samp class="n">config</samp><samp class="w"> </samp><samp class="ss">:logger</samp><samp class="p">,</samp><samp class="w">
  </samp><samp class="ss">level</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="ss">:info</samp><samp class="p">,</samp><samp class="w">
  </samp><samp class="ss">truncate</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">1024</samp></code></pre><p>will have a final configuration for <code class="inline">:logger</code> of:</p><pre><code class="makeup elixir" translate="no"><samp class="p" data-group-id="7905148969-1">[</samp><samp class="ss">level</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="ss">:info</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">backends</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="7905148969-2">[</samp><samp class="ss">:console</samp><samp class="p" data-group-id="7905148969-2">]</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">truncate</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">1024</samp><samp class="p" data-group-id="7905148969-1">]</samp></code></pre>
  </section>
</section>
<section class="detail" id="config/3">

  <div class="detail-header">
    <a href="#config/3" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">config(root_key, key, opts)</h1>

        <span class="note">(since 1.9.0)</span>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/config.ex#L192" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

<p>Configures the given <code class="inline">key</code> for the given <code class="inline">root_key</code>.</p><p>Keyword lists are always deep merged.</p><h2 id="config/3-examples" class="section-heading"><a href="#config/3-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><p>The given <code class="inline">opts</code> are merged into the existing values for <code class="inline">key</code>
in the given <code class="inline">root_key</code>. Conflicting keys are overridden by the
ones specified in <code class="inline">opts</code>, unless they are keywords, which are
deep merged recursively. For example, the application configuration
below</p><pre><code class="makeup elixir" translate="no"><samp class="n">config</samp><samp class="w"> </samp><samp class="ss">:ecto</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="nc">Repo</samp><samp class="p">,</samp><samp class="w">
  </samp><samp class="ss">log_level</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="ss">:warn</samp><samp class="p">,</samp><samp class="w">
  </samp><samp class="ss">adapter</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="nc">Ecto.Adapters.Postgres</samp><samp class="p">,</samp><samp class="w">
  </samp><samp class="ss">metadata</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="0474324991-1">[</samp><samp class="ss">read_only</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">true</samp><samp class="p" data-group-id="0474324991-1">]</samp><samp class="w">

</samp><samp class="n">config</samp><samp class="w"> </samp><samp class="ss">:ecto</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="nc">Repo</samp><samp class="p">,</samp><samp class="w">
  </samp><samp class="ss">log_level</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="ss">:info</samp><samp class="p">,</samp><samp class="w">
  </samp><samp class="ss">pool_size</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">10</samp><samp class="p">,</samp><samp class="w">
  </samp><samp class="ss">metadata</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="0474324991-2">[</samp><samp class="ss">replica</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">true</samp><samp class="p" data-group-id="0474324991-2">]</samp></code></pre><p>will have a final value of the configuration for the <code class="inline">Repo</code>
key in the <code class="inline">:ecto</code> application of:</p><pre><code class="makeup elixir" translate="no"><samp class="nc">Application</samp><samp class="o">.</samp><samp class="n">get_env</samp><samp class="p" data-group-id="2584878670-1">(</samp><samp class="ss">:ecto</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="nc">Repo</samp><samp class="p" data-group-id="2584878670-1">)</samp><samp class="w">
</samp><samp class="c1">#=&gt; [</samp><samp class="w">
</samp><samp class="c1">#=&gt;   log_level: :info,</samp><samp class="w">
</samp><samp class="c1">#=&gt;   pool_size: 10,</samp><samp class="w">
</samp><samp class="c1">#=&gt;   adapter: Ecto.Adapters.Postgres,</samp><samp class="w">
</samp><samp class="c1">#=&gt;   metadata: [read_only: true, replica: true]</samp><samp class="w">
</samp><samp class="c1">#=&gt; ]</samp></code></pre>
  </section>
</section>
<section class="detail" id="config_env/0">

  <div class="detail-header">
    <a href="#config_env/0" class="detail-link" data-no-tooltip="" aria-label="Link to this macro">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">config_env()</h1>

        <span class="note">(since 1.11.0)</span>

        <span class="note">(macro)</span>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/config.ex#L237" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

<p>Returns the environment this configuration file is executed on.</p><p>In Mix projects this function returns the environment this configuration
file is executed on. In releases, the environment when <a href="https://hexdocs.pm/mix/Mix.Tasks.Release.html"><code class="inline">mix release</code></a> ran.</p><p>This is most often used to execute conditional code:</p><pre><code class="makeup elixir" translate="no"><samp class="k">if</samp><samp class="w"> </samp><samp class="n">config_env</samp><samp class="p" data-group-id="2345314974-1">(</samp><samp class="p" data-group-id="2345314974-1">)</samp><samp class="w"> </samp><samp class="o">==</samp><samp class="w"> </samp><samp class="ss">:prod</samp><samp class="w"> </samp><samp class="k" data-group-id="2345314974-2">do</samp><samp class="w">
  </samp><samp class="n">config</samp><samp class="w"> </samp><samp class="ss">:my_app</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:debug</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="no">false</samp><samp class="w">
</samp><samp class="k" data-group-id="2345314974-2">end</samp></code></pre>
  </section>
</section>
<section class="detail" id="config_target/0">

  <div class="detail-header">
    <a href="#config_target/0" class="detail-link" data-no-tooltip="" aria-label="Link to this macro">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">config_target()</h1>

        <span class="note">(since 1.11.0)</span>

        <span class="note">(macro)</span>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/config.ex#L260" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

<p>Returns the target this configuration file is executed on.</p><p>This is most often used to execute conditional code:</p><pre><code class="makeup elixir" translate="no"><samp class="k">if</samp><samp class="w"> </samp><samp class="n">config_target</samp><samp class="p" data-group-id="3715957087-1">(</samp><samp class="p" data-group-id="3715957087-1">)</samp><samp class="w"> </samp><samp class="o">==</samp><samp class="w"> </samp><samp class="ss">:host</samp><samp class="w"> </samp><samp class="k" data-group-id="3715957087-2">do</samp><samp class="w">
  </samp><samp class="n">config</samp><samp class="w"> </samp><samp class="ss">:my_app</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:debug</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="no">false</samp><samp class="w">
</samp><samp class="k" data-group-id="3715957087-2">end</samp></code></pre>
  </section>
</section>
<section class="detail" id="import_config/1">

  <div class="detail-header">
    <a href="#import_config/1" class="detail-link" data-no-tooltip="" aria-label="Link to this macro">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">import_config(file)</h1>

        <span class="note">(since 1.9.0)</span>

        <span class="note">(macro)</span>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/config.ex#L291" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

<p>Imports configuration from the given file.</p><p>In case the file doesn't exist, an error is raised.</p><p>If file is a relative, it will be expanded relatively to the
directory the current configuration file is in.</p><h2 id="import_config/1-examples" class="section-heading"><a href="#import_config/1-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><p>This is often used to emulate configuration across environments:</p><pre><code class="makeup elixir" translate="no"><samp class="n">import_config</samp><samp class="w"> </samp><samp class="s">&quot;</samp><samp class="si" data-group-id="3520963861-1">#{</samp><samp class="n">config_env</samp><samp class="p" data-group-id="3520963861-2">(</samp><samp class="p" data-group-id="3520963861-2">)</samp><samp class="si" data-group-id="3520963861-1">}</samp><samp class="s">.exs&quot;</samp></code></pre><p>Note, however, some configuration files, such as <code class="inline">config/runtime.exs</code>
does not support imports, as they are meant to be copied across
systems.</p>
  </section>
</section>
<section class="detail" id="read_config/1">

  <div class="detail-header">
    <a href="#read_config/1" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">read_config(root_key)</h1>

        <span class="note">(since 1.18.0)</span>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/config.ex#L219" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

<p>Reads the configuration for the given root key.</p><p>This function only reads the configuration from a previous
<a href="#config/2"><code class="inline">config/2</code></a> or <a href="#config/3"><code class="inline">config/3</code></a> call. If <code class="inline">root_key</code> points to an
application, it does not read its actual application environment.
Its main use case is to make it easier to access and share
configuration values across files.</p><p>If the <code class="inline">root_key</code> was not configured, it returns <code class="inline">nil</code>.</p><h2 id="read_config/1-examples" class="section-heading"><a href="#read_config/1-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="c1"># In config/config.exs</samp><samp class="w">
</samp><samp class="n">config</samp><samp class="w"> </samp><samp class="ss">:my_app</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">foo</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="ss">:bar</samp><samp class="w">

</samp><samp class="c1"># In config/dev.exs</samp><samp class="w">
</samp><samp class="n">config</samp><samp class="w"> </samp><samp class="ss">:another_app</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">foo</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="n">read_config</samp><samp class="p" data-group-id="4360843839-1">(</samp><samp class="ss">:my_app</samp><samp class="p" data-group-id="4360843839-1">)</samp><samp class="p" data-group-id="4360843839-2">[</samp><samp class="ss">:foo</samp><samp class="p" data-group-id="4360843839-2">]</samp><samp class="w"> </samp><samp class="o">||</samp><samp class="w"> </samp><samp class="k">raise</samp><samp class="w"> </samp><samp class="s">&quot;missing parent configuration&quot;</samp></code></pre>
  </section>
</section>

        </div>
      </section>


  </body>
</html>
