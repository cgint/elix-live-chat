<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"
      xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>Application - Elixir v1.18.4</title>
    <meta name="generator" content="ExDoc v0.38.2" />
    <link type="text/css" rel="stylesheet" href="dist/epub-elixir-FNUUKFP7.css" />
    <script src="dist/epub-4WIP524F.js"></script>

  </head>
  <body class="content-inner">

    <h1 id="content">
Application <small>behaviour</small>
    </h1>


      <section id="moduledoc" class="docstring">
<p>A module for working with applications and defining application callbacks.</p><p>Applications are the idiomatic way to package software in Erlang/OTP. To get
the idea, they are similar to the &quot;library&quot; concept common in other
programming languages, but with some additional characteristics.</p><p>An application is a component implementing some specific functionality, with a
standardized directory structure, configuration, and life cycle. Applications
are <em>loaded</em>, <em>started</em>, and <em>stopped</em>. Each application also has its own
environment, which provides a unified API for configuring each application.</p><p>Developers typically interact with the application environment and its
callback module. Therefore those will be the topics we will cover first
before jumping into details about the application resource file and life cycle.</p><h2 id="module-the-application-environment">The application environment</h2><p>Each application has its own environment. The environment is a keyword list
that maps atoms to terms. Note that this environment is unrelated to the
operating system environment.</p><p>By default, the environment of an application is an empty list. In a Mix
project's <code class="inline">mix.exs</code> file, you can set the <code class="inline">:env</code> key in <code class="inline">application/0</code>:</p><pre><code class="makeup elixir" translate="no"><samp class="kd">def</samp><samp class="w"> </samp><samp class="nf">application</samp><samp class="w"> </samp><samp class="k" data-group-id="0469413104-1">do</samp><samp class="w">
  </samp><samp class="p" data-group-id="0469413104-2">[</samp><samp class="ss">env</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="0469413104-3">[</samp><samp class="ss">db_host</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;localhost&quot;</samp><samp class="p" data-group-id="0469413104-3">]</samp><samp class="p" data-group-id="0469413104-2">]</samp><samp class="w">
</samp><samp class="k" data-group-id="0469413104-1">end</samp></code></pre><p>Now, in your application, you can read this environment by using functions
such as <a href="#fetch_env!/2"><code class="inline">fetch_env!/2</code></a> and friends:</p><pre><code class="makeup elixir" translate="no"><samp class="kd">defmodule</samp><samp class="w"> </samp><samp class="nc">MyApp.DBClient</samp><samp class="w"> </samp><samp class="k" data-group-id="3236672187-1">do</samp><samp class="w">
  </samp><samp class="kd">def</samp><samp class="w"> </samp><samp class="nf">start_link</samp><samp class="p" data-group-id="3236672187-2">(</samp><samp class="p" data-group-id="3236672187-2">)</samp><samp class="w"> </samp><samp class="k" data-group-id="3236672187-3">do</samp><samp class="w">
    </samp><samp class="nc">SomeLib.DBClient</samp><samp class="o">.</samp><samp class="n">start_link</samp><samp class="p" data-group-id="3236672187-4">(</samp><samp class="ss">host</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="n">db_host</samp><samp class="p" data-group-id="3236672187-5">(</samp><samp class="p" data-group-id="3236672187-5">)</samp><samp class="p" data-group-id="3236672187-4">)</samp><samp class="w">
  </samp><samp class="k" data-group-id="3236672187-3">end</samp><samp class="w">

  </samp><samp class="kd">defp</samp><samp class="w"> </samp><samp class="nf">db_host</samp><samp class="w"> </samp><samp class="k" data-group-id="3236672187-6">do</samp><samp class="w">
    </samp><samp class="nc">Application</samp><samp class="o">.</samp><samp class="n">fetch_env!</samp><samp class="p" data-group-id="3236672187-7">(</samp><samp class="ss">:my_app</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:db_host</samp><samp class="p" data-group-id="3236672187-7">)</samp><samp class="w">
  </samp><samp class="k" data-group-id="3236672187-6">end</samp><samp class="w">
</samp><samp class="k" data-group-id="3236672187-1">end</samp></code></pre><p>In Mix projects, the environment of the application and its dependencies can
be overridden via the <code class="inline">config/config.exs</code> and <code class="inline">config/runtime.exs</code> files. The
former is loaded at build-time, before your code compiles, and the latter at
runtime, just before your app starts. For example, someone using your application
can override its <code class="inline">:db_host</code> environment variable as follows:</p><pre><code class="makeup elixir" translate="no"><samp class="kn">import</samp><samp class="w"> </samp><samp class="nc">Config</samp><samp class="w">
</samp><samp class="n">config</samp><samp class="w"> </samp><samp class="ss">:my_app</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:db_host</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;db.local&quot;</samp></code></pre><p>See the &quot;Configuration&quot; section in the <a href="https://hexdocs.pm/mix/Mix.html"><code class="inline">Mix</code></a> module for more information.
You can also change the application environment dynamically by using functions
such as <a href="#put_env/3"><code class="inline">put_env/3</code></a> and <a href="#delete_env/2"><code class="inline">delete_env/2</code></a>.</p><section role="note" class="admonition info"><h4 class="admonition-title info">Application environment in libraries</h4><p>If you are writing a library to be used by other developers,
it is generally recommended to avoid the application environment, as the
application environment is effectively a global storage. For more information,
read about this <a href="design-anti-patterns.xhtml#using-application-configuration-for-libraries">anti-pattern</a>.</p></section><section role="note" class="admonition warning"><h4 class="admonition-title warning">Reading the environment of other applications</h4><p>Each application is responsible for its own environment. Do not
use the functions in this module for directly accessing or modifying
the environment of other applications. Whenever you change the application
environment, Elixir's build tool will only recompile the files that
belong to that application. So if you read the application environment
of another application, there is a chance you will be depending on
outdated configuration, as your file won't be recompiled as it changes.</p></section><h2 id="module-compile-time-environment">Compile-time environment</h2><p>In the previous example, we read the application environment at runtime:</p><pre><code class="makeup elixir" translate="no"><samp class="kd">defmodule</samp><samp class="w"> </samp><samp class="nc">MyApp.DBClient</samp><samp class="w"> </samp><samp class="k" data-group-id="3905489644-1">do</samp><samp class="w">
  </samp><samp class="kd">def</samp><samp class="w"> </samp><samp class="nf">start_link</samp><samp class="p" data-group-id="3905489644-2">(</samp><samp class="p" data-group-id="3905489644-2">)</samp><samp class="w"> </samp><samp class="k" data-group-id="3905489644-3">do</samp><samp class="w">
    </samp><samp class="nc">SomeLib.DBClient</samp><samp class="o">.</samp><samp class="n">start_link</samp><samp class="p" data-group-id="3905489644-4">(</samp><samp class="ss">host</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="n">db_host</samp><samp class="p" data-group-id="3905489644-5">(</samp><samp class="p" data-group-id="3905489644-5">)</samp><samp class="p" data-group-id="3905489644-4">)</samp><samp class="w">
  </samp><samp class="k" data-group-id="3905489644-3">end</samp><samp class="w">

  </samp><samp class="kd">defp</samp><samp class="w"> </samp><samp class="nf">db_host</samp><samp class="w"> </samp><samp class="k" data-group-id="3905489644-6">do</samp><samp class="w">
    </samp><samp class="nc">Application</samp><samp class="o">.</samp><samp class="n">fetch_env!</samp><samp class="p" data-group-id="3905489644-7">(</samp><samp class="ss">:my_app</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:db_host</samp><samp class="p" data-group-id="3905489644-7">)</samp><samp class="w">
  </samp><samp class="k" data-group-id="3905489644-6">end</samp><samp class="w">
</samp><samp class="k" data-group-id="3905489644-1">end</samp></code></pre><p>In other words, the environment key <code class="inline">:db_host</code> for application <code class="inline">:my_app</code>
will only be read when <code class="inline">MyApp.DBClient</code> effectively starts. While reading
the application environment at runtime is the preferred approach, in some
rare occasions you may want to use the application environment to configure
the compilation of a certain project. However, if you try to access
<a href="#fetch_env!/2"><code class="inline">Application.fetch_env!/2</code></a> outside of a function:</p><pre><code class="makeup elixir" translate="no"><samp class="kd">defmodule</samp><samp class="w"> </samp><samp class="nc">MyApp.DBClient</samp><samp class="w"> </samp><samp class="k" data-group-id="6180196400-1">do</samp><samp class="w">
  </samp><samp class="na">@db_host</samp><samp class="w"> </samp><samp class="nc">Application</samp><samp class="o">.</samp><samp class="n">fetch_env!</samp><samp class="p" data-group-id="6180196400-2">(</samp><samp class="ss">:my_app</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:db_host</samp><samp class="p" data-group-id="6180196400-2">)</samp><samp class="w">

  </samp><samp class="kd">def</samp><samp class="w"> </samp><samp class="nf">start_link</samp><samp class="p" data-group-id="6180196400-3">(</samp><samp class="p" data-group-id="6180196400-3">)</samp><samp class="w"> </samp><samp class="k" data-group-id="6180196400-4">do</samp><samp class="w">
    </samp><samp class="nc">SomeLib.DBClient</samp><samp class="o">.</samp><samp class="n">start_link</samp><samp class="p" data-group-id="6180196400-5">(</samp><samp class="ss">host</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="na">@db_host</samp><samp class="p" data-group-id="6180196400-5">)</samp><samp class="w">
  </samp><samp class="k" data-group-id="6180196400-4">end</samp><samp class="w">
</samp><samp class="k" data-group-id="6180196400-1">end</samp></code></pre><p>You might see warnings and errors:</p><pre><code class="makeup elixir" translate="no"><samp class="ss">warning</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="nc">Application</samp><samp class="o">.</samp><samp class="n">fetch_env!</samp><samp class="o">/</samp><samp class="mi">2</samp><samp class="w"> </samp><samp class="n">is</samp><samp class="w"> </samp><samp class="n">discouraged</samp><samp class="w"> </samp><samp class="ow">in</samp><samp class="w"> </samp><samp class="n">the</samp><samp class="w"> </samp><samp class="n">module</samp><samp class="w"> </samp><samp class="n">body</samp><samp class="p">,</samp><samp class="w">
</samp><samp class="kn">use</samp><samp class="w"> </samp><samp class="nc">Application</samp><samp class="o">.</samp><samp class="n">compile_env</samp><samp class="o">/</samp><samp class="mi">3</samp><samp class="w"> </samp><samp class="n">instead</samp><samp class="w">
  </samp><samp class="n">iex</samp><samp class="p">:</samp><samp class="mi">3</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="nc">MyApp.DBClient</samp><samp class="w">

</samp><samp class="gt">** (ArgumentError) could not fetch application environment :db_host</samp><samp class="w">
</samp><samp class="k">for</samp><samp class="w"> </samp><samp class="n">application</samp><samp class="w"> </samp><samp class="ss">:my_app</samp><samp class="w"> </samp><samp class="n">because</samp><samp class="w"> </samp><samp class="n">the</samp><samp class="w"> </samp><samp class="n">application</samp><samp class="w"> </samp><samp class="n">was</samp><samp class="w"> </samp><samp class="ow">not</samp><samp class="w"> </samp><samp class="n">loaded</samp><samp class="w"> </samp><samp class="n">nor</samp><samp class="w">
</samp><samp class="n">configured</samp></code></pre><p>This happens because, when defining modules, the application environment
is not yet available. Luckily, the warning tells us how to solve this
issue, by using <a href="#compile_env/3"><code class="inline">Application.compile_env/3</code></a> instead:</p><pre><code class="makeup elixir" translate="no"><samp class="kd">defmodule</samp><samp class="w"> </samp><samp class="nc">MyApp.DBClient</samp><samp class="w"> </samp><samp class="k" data-group-id="2092650243-1">do</samp><samp class="w">
  </samp><samp class="na">@db_host</samp><samp class="w"> </samp><samp class="nc">Application</samp><samp class="o">.</samp><samp class="n">compile_env</samp><samp class="p" data-group-id="2092650243-2">(</samp><samp class="ss">:my_app</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:db_host</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;db.local&quot;</samp><samp class="p" data-group-id="2092650243-2">)</samp><samp class="w">

  </samp><samp class="kd">def</samp><samp class="w"> </samp><samp class="nf">start_link</samp><samp class="p" data-group-id="2092650243-3">(</samp><samp class="p" data-group-id="2092650243-3">)</samp><samp class="w"> </samp><samp class="k" data-group-id="2092650243-4">do</samp><samp class="w">
    </samp><samp class="nc">SomeLib.DBClient</samp><samp class="o">.</samp><samp class="n">start_link</samp><samp class="p" data-group-id="2092650243-5">(</samp><samp class="ss">host</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="na">@db_host</samp><samp class="p" data-group-id="2092650243-5">)</samp><samp class="w">
  </samp><samp class="k" data-group-id="2092650243-4">end</samp><samp class="w">
</samp><samp class="k" data-group-id="2092650243-1">end</samp></code></pre><p>The difference here is that <code class="inline">compile_env</code> expects the default value to be
given as an argument, instead of using the <code class="inline">def application</code> function of
your <code class="inline">mix.exs</code>. Furthermore, by using <a href="#compile_env/3"><code class="inline">compile_env/3</code></a>, tools like Mix will
store the values used during compilation and compare the compilation values
with the runtime values whenever your system starts, raising an error in
case they differ.</p><p>In any case, compile-time environments should be avoided. Whenever possible,
reading the application environment at runtime should be the first choice.</p><h2 id="module-the-application-callback-module">The application callback module</h2><p>Applications can be loaded, started, and stopped. Generally, build tools
like Mix take care of starting an application and all of its dependencies
for you, but you can also do it manually by calling:</p><pre><code class="makeup elixir" translate="no"><samp class="p" data-group-id="5373046823-1">{</samp><samp class="ss">:ok</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="bp">_</samp><samp class="p" data-group-id="5373046823-1">}</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="nc">Application</samp><samp class="o">.</samp><samp class="n">ensure_all_started</samp><samp class="p" data-group-id="5373046823-2">(</samp><samp class="ss">:some_app</samp><samp class="p" data-group-id="5373046823-2">)</samp></code></pre><p>When an application starts, developers may configure a callback module
that executes custom code. Developers use this callback to start the
application supervision tree.</p><p>The first step to do so is to add a <code class="inline">:mod</code> key to the <code class="inline">application/0</code>
definition in your <code class="inline">mix.exs</code> file. It expects a tuple, with the application
callback module and start argument (commonly an empty list):</p><pre><code class="makeup elixir" translate="no"><samp class="kd">def</samp><samp class="w"> </samp><samp class="nf">application</samp><samp class="w"> </samp><samp class="k" data-group-id="8588165197-1">do</samp><samp class="w">
  </samp><samp class="p" data-group-id="8588165197-2">[</samp><samp class="ss">mod</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="8588165197-3">{</samp><samp class="nc">MyApp</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="8588165197-4">[</samp><samp class="p" data-group-id="8588165197-4">]</samp><samp class="p" data-group-id="8588165197-3">}</samp><samp class="p" data-group-id="8588165197-2">]</samp><samp class="w">
</samp><samp class="k" data-group-id="8588165197-1">end</samp></code></pre><p>The <code class="inline">MyApp</code> module given to <code class="inline">:mod</code> needs to implement the <a href="Application.xhtml"><code class="inline">Application</code></a> behaviour.
This can be done by putting <code class="inline">use Application</code> in that module and implementing the
<a href="#c:start/2"><code class="inline">start/2</code></a> callback, for example:</p><pre><code class="makeup elixir" translate="no"><samp class="kd">defmodule</samp><samp class="w"> </samp><samp class="nc">MyApp</samp><samp class="w"> </samp><samp class="k" data-group-id="9856221419-1">do</samp><samp class="w">
  </samp><samp class="kn">use</samp><samp class="w"> </samp><samp class="nc">Application</samp><samp class="w">

  </samp><samp class="kd">def</samp><samp class="w"> </samp><samp class="nf">start</samp><samp class="p" data-group-id="9856221419-2">(</samp><samp class="c">_type</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="c">_args</samp><samp class="p" data-group-id="9856221419-2">)</samp><samp class="w"> </samp><samp class="k" data-group-id="9856221419-3">do</samp><samp class="w">
    </samp><samp class="n">children</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="p" data-group-id="9856221419-4">[</samp><samp class="p" data-group-id="9856221419-4">]</samp><samp class="w">
    </samp><samp class="nc">Supervisor</samp><samp class="o">.</samp><samp class="n">start_link</samp><samp class="p" data-group-id="9856221419-5">(</samp><samp class="n">children</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">strategy</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="ss">:one_for_one</samp><samp class="p" data-group-id="9856221419-5">)</samp><samp class="w">
  </samp><samp class="k" data-group-id="9856221419-3">end</samp><samp class="w">
</samp><samp class="k" data-group-id="9856221419-1">end</samp></code></pre><section role="note" class="admonition info"><h4 class="admonition-title info"><code class="inline">use Application</code></h4><p>When you <code class="inline">use Application</code>, the <a href="Application.xhtml"><code class="inline">Application</code></a> module will
set <code class="inline">@behaviour Application</code> and define an overridable
definition for the <a href="#c:stop/1"><code class="inline">stop/1</code></a> function, which is required
by Erlang/OTP.</p></section><p>The <a href="#c:start/2"><code class="inline">start/2</code></a> callback has to spawn and link a supervisor and return <code class="inline">{:ok, pid}</code> or <code class="inline">{:ok, pid, state}</code>, where <code class="inline">pid</code> is the PID of the supervisor, and
<code class="inline">state</code> is an optional application state. <code class="inline">args</code> is the second element of the
tuple given to the <code class="inline">:mod</code> option.</p><p>The <code class="inline">type</code> argument passed to <a href="#c:start/2"><code class="inline">start/2</code></a> is usually <code class="inline">:normal</code> unless in a
distributed setup where application takeovers and failovers are configured.
Distributed applications are beyond the scope of this documentation.</p><p>When an application is shutting down, its <a href="#c:stop/1"><code class="inline">stop/1</code></a> callback is called after
the supervision tree has been stopped by the runtime. This callback allows the
application to do any final cleanup. The argument is the state returned by
<a href="#c:start/2"><code class="inline">start/2</code></a>, if it did, or <code class="inline">[]</code> otherwise. The return value of <a href="#c:stop/1"><code class="inline">stop/1</code></a> is
ignored.</p><p>By using <a href="Application.xhtml"><code class="inline">Application</code></a>, modules get a default implementation of <a href="#c:stop/1"><code class="inline">stop/1</code></a>
that ignores its argument and returns <code class="inline">:ok</code>, but it can be overridden.</p><p>Application callback modules may also implement the optional callback
<a href="#c:prep_stop/1"><code class="inline">prep_stop/1</code></a>. If present, <a href="#c:prep_stop/1"><code class="inline">prep_stop/1</code></a> is invoked before the supervision
tree is terminated. Its argument is the state returned by <a href="#c:start/2"><code class="inline">start/2</code></a>, if it did,
or <code class="inline">[]</code> otherwise, and its return value is passed to <a href="#c:stop/1"><code class="inline">stop/1</code></a>.</p><h2 id="module-the-application-resource-file">The application resource file</h2><p>In the sections above, we have configured an application in the
<code class="inline">application/0</code> section of the <code class="inline">mix.exs</code> file. Ultimately, Mix will use
this configuration to create an <a href="https://www.erlang.org/doc/man/app"><em>application resource
file</em></a>, which is a file called
<code class="inline">APP_NAME.app</code>. For example, the application resource file of the OTP
application <code class="inline">ex_unit</code> is called <code class="inline">ex_unit.app</code>.</p><p>You can learn more about the generation of application resource files in
the documentation of <a href="https://hexdocs.pm/mix/Mix.Tasks.Compile.App.html"><code class="inline">Mix.Tasks.Compile.App</code></a>, available as well by running
<a href="https://hexdocs.pm/mix/Mix.Tasks.Compile.App.html"><code class="inline">mix help compile.app</code></a>.</p><h2 id="module-the-application-life-cycle">The application life cycle</h2><h3 id="module-loading-applications">Loading applications</h3><p>Applications are <em>loaded</em>, which means that the runtime finds and processes
their resource files:</p><pre><code class="makeup elixir" translate="no"><samp class="nc">Application</samp><samp class="o">.</samp><samp class="n">load</samp><samp class="p" data-group-id="7135812193-1">(</samp><samp class="ss">:ex_unit</samp><samp class="p" data-group-id="7135812193-1">)</samp><samp class="w">
</samp><samp class="c1">#=&gt; :ok</samp></code></pre><p>When an application is loaded, the environment specified in its resource file
is merged with any overrides from config files.</p><p>Loading an application <em>does not</em> load its modules.</p><p>In practice, you rarely load applications by hand because that is part of the
start process, explained next.</p><h3 id="module-starting-applications">Starting applications</h3><p>Applications are also <em>started</em>:</p><pre><code class="makeup elixir" translate="no"><samp class="nc">Application</samp><samp class="o">.</samp><samp class="n">start</samp><samp class="p" data-group-id="2393849722-1">(</samp><samp class="ss">:ex_unit</samp><samp class="p" data-group-id="2393849722-1">)</samp><samp class="w">
</samp><samp class="c1">#=&gt; :ok</samp></code></pre><p>Once your application is compiled, running your system is a matter of starting
your current application and its dependencies. Differently from other languages,
Elixir does not have a <code class="inline">main</code> procedure that is responsible for starting your
system. Instead, you start one or more applications, each with their own
initialization and termination logic.</p><p>When an application is started, the <a href="#load/1"><code class="inline">Application.load/1</code></a> is automatically
invoked if it hasn't been done yet. Then, it checks if the dependencies listed
in the <code class="inline">applications</code> key of the resource file are already started. Having at
least one dependency not started is an error condition. Functions like
<a href="#ensure_all_started/1"><code class="inline">ensure_all_started/1</code></a> takes care of starting an application and all of its
dependencies for you.</p><p>If the application does not have a callback module configured, starting is
done at this point. Otherwise, its <a href="#c:start/2"><code class="inline">start/2</code></a> callback is invoked. The PID of
the top-level supervisor returned by this function is stored by the runtime
for later use, and the returned application state is saved too, if any.</p><h3 id="module-stopping-applications">Stopping applications</h3><p>Started applications are, finally, <em>stopped</em>:</p><pre><code class="makeup elixir" translate="no"><samp class="nc">Application</samp><samp class="o">.</samp><samp class="n">stop</samp><samp class="p" data-group-id="7286982056-1">(</samp><samp class="ss">:ex_unit</samp><samp class="p" data-group-id="7286982056-1">)</samp><samp class="w">
</samp><samp class="c1">#=&gt; :ok</samp></code></pre><p>Stopping an application without a callback module defined, is in practice a
no-op, except for some system tracing.</p><p>Stopping an application with a callback module has three steps:</p><ol><li>If present, invoke the optional callback <a href="#c:prep_stop/1"><code class="inline">prep_stop/1</code></a>.</li><li>Terminate the top-level supervisor.</li><li>Invoke the required callback <a href="#c:stop/1"><code class="inline">stop/1</code></a>.</li></ol><p>The arguments passed to the callbacks are related to the state optionally
returned by <a href="#c:start/2"><code class="inline">start/2</code></a>, and are documented in the section about the callback
module above.</p><p>It is important to highlight that step 2 is a blocking one. Termination of a
supervisor triggers a recursive chain of children terminations, therefore
orderly shutting down all descendant processes. The <a href="#c:stop/1"><code class="inline">stop/1</code></a> callback is
invoked only after termination of the whole supervision tree.</p><p>Shutting down a live system cleanly can be done by calling <a href="System.xhtml#stop/1"><code class="inline">System.stop/1</code></a>. It
will shut down every application in the reverse order they were started.</p><p>By default, a SIGTERM from the operating system will automatically translate to
<a href="System.xhtml#stop/0"><code class="inline">System.stop/0</code></a>. You can also have more explicit control over operating system
signals via the <a href="https://www.erlang.org/doc/apps/kernel/os.html#set_signal/2"><code class="inline">:os.set_signal/2</code></a> function.</p><h2 id="module-tooling">Tooling</h2><p>The Mix build tool automates most of the application management tasks. For example,
<a href="https://hexdocs.pm/mix/Mix.Tasks.Test.html"><code class="inline">mix test</code></a> automatically starts your application dependencies and your application
itself before your test runs. <code class="inline">mix run --no-halt</code> boots your current project and
can be used to start a long running system. See <a href="https://hexdocs.pm/mix/Mix.Tasks.Run.html"><code class="inline">mix help run</code></a>.</p><p>Developers can also use <a href="https://hexdocs.pm/mix/Mix.Tasks.Release.html"><code class="inline">mix release</code></a> to build <strong>releases</strong>. Releases are able to
package all of your source code as well as the Erlang VM into a single directory.
Releases also give you explicit control over how each application is started and in
which order. They also provide a more streamlined mechanism for starting and
stopping systems, debugging, logging, as well as system monitoring.</p><p>Finally, Elixir provides tools such as escripts and archives, which are
different mechanisms for packaging your application. Those are typically used
when tools must be shared between developers and not as deployment options.
See <a href="https://hexdocs.pm/mix/Mix.Tasks.Archive.Build.html"><code class="inline">mix help archive.build</code></a> and <a href="https://hexdocs.pm/mix/Mix.Tasks.Escript.Build.html"><code class="inline">mix help escript.build</code></a> for more detail.</p><h2 id="module-further-information">Further information</h2><p>For further details on applications please check the documentation of the
<a href="https://www.erlang.org/doc/apps/kernel/application.html"><code class="inline">:application</code> Erlang module</a>, and the
<a href="https://www.erlang.org/doc/design_principles/applications.html">Applications</a>
section of the <a href="https://www.erlang.org/doc/design_principles/users_guide.html">OTP Design Principles User's
Guide</a>.</p>
      </section>


      <section id="summary" class="details-list">
        <h1 class="section-heading">Summary</h1>
<div class="summary-types summary">
  <h2>
    <a href="#types">Types</a>
  </h2>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#t:app/0" data-no-tooltip="" translate="no">app()</a>

      </div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#t:application_key/0" data-no-tooltip="" translate="no">application_key()</a>

      </div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#t:key/0" data-no-tooltip="" translate="no">key()</a>

      </div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#t:restart_type/0" data-no-tooltip="" translate="no">restart_type()</a>

      </div>

        <div class="summary-synopsis"><p>Specifies the type of the application</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#t:start_type/0" data-no-tooltip="" translate="no">start_type()</a>

      </div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#t:state/0" data-no-tooltip="" translate="no">state()</a>

      </div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#t:value/0" data-no-tooltip="" translate="no">value()</a>

      </div>

    </div>

</div>
<div class="summary-callbacks summary">
  <h2>
    <a href="#callbacks">Callbacks</a>
  </h2>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#c:config_change/3" data-no-tooltip="" translate="no">config_change(changed, new, removed)</a>

      </div>

        <div class="summary-synopsis"><p>Callback invoked after code upgrade, if the application environment
has changed.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#c:prep_stop/1" data-no-tooltip="" translate="no">prep_stop(state)</a>

      </div>

        <div class="summary-synopsis"><p>Called before stopping the application.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#c:start/2" data-no-tooltip="" translate="no">start(start_type, start_args)</a>

      </div>

        <div class="summary-synopsis"><p>Called when an application is started.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#c:start_phase/3" data-no-tooltip="" translate="no">start_phase(phase, start_type, phase_args)</a>

      </div>

        <div class="summary-synopsis"><p>Starts an application in synchronous phases.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#c:stop/1" data-no-tooltip="" translate="no">stop(state)</a>

      </div>

        <div class="summary-synopsis"><p>Called after an application has been stopped.</p></div>

    </div>

</div>
<div class="summary-functions summary">
  <h2>
    <a href="#functions">Functions</a>
  </h2>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#app_dir/1" data-no-tooltip="" translate="no">app_dir(app)</a>

      </div>

        <div class="summary-synopsis"><p>Gets the directory for app.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#app_dir/2" data-no-tooltip="" translate="no">app_dir(app, path)</a>

      </div>

        <div class="summary-synopsis"><p>Returns the given path inside <a><code class="inline">app_dir/1</code></a>.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#compile_env/3" data-no-tooltip="" translate="no">compile_env(app, key_or_path, default \\ nil)</a>

      </div>

        <div class="summary-synopsis"><p>Reads the application environment at compilation time.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#compile_env/4" data-no-tooltip="" translate="no">compile_env(env, app, key_or_path, default)</a>

      </div>

        <div class="summary-synopsis"><p>Reads the application environment at compilation time from a macro.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#compile_env!/2" data-no-tooltip="" translate="no">compile_env!(app, key_or_path)</a>

      </div>

        <div class="summary-synopsis"><p>Reads the application environment at compilation time or raises.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#compile_env!/3" data-no-tooltip="" translate="no">compile_env!(env, app, key_or_path)</a>

      </div>

        <div class="summary-synopsis"><p>Reads the application environment at compilation time from a macro
or raises.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#delete_env/3" data-no-tooltip="" translate="no">delete_env(app, key, opts \\ [])</a>

      </div>

        <div class="summary-synopsis"><p>Deletes the <code class="inline">key</code> from the given <code class="inline">app</code> environment.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#ensure_all_started/2" data-no-tooltip="" translate="no">ensure_all_started(app_or_apps, type_or_opts \\ [])</a>

      </div>

        <div class="summary-synopsis"><p>Ensures the given <code class="inline">app</code> or <code class="inline">apps</code> and their child applications are started.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#ensure_loaded/1" data-no-tooltip="" translate="no">ensure_loaded(app)</a>

      </div>

        <div class="summary-synopsis"><p>Ensures the given <code class="inline">app</code> is loaded.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#ensure_started/2" data-no-tooltip="" translate="no">ensure_started(app, type \\ :temporary)</a>

      </div>

        <div class="summary-synopsis"><p>Ensures the given <code class="inline">app</code> is started with <a><code class="inline">restart_type/0</code></a>.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#fetch_env/2" data-no-tooltip="" translate="no">fetch_env(app, key)</a>

      </div>

        <div class="summary-synopsis"><p>Returns the value for <code class="inline">key</code> in <code class="inline">app</code>'s environment in a tuple.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#fetch_env!/2" data-no-tooltip="" translate="no">fetch_env!(app, key)</a>

      </div>

        <div class="summary-synopsis"><p>Returns the value for <code class="inline">key</code> in <code class="inline">app</code>'s environment.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#format_error/1" data-no-tooltip="" translate="no">format_error(reason)</a>

      </div>

        <div class="summary-synopsis"><p>Formats the error reason returned by <a><code class="inline">start/2</code></a>,
<a><code class="inline">ensure_started/2</code></a>, <a><code class="inline">stop/1</code></a>, <a><code class="inline">load/1</code></a> and <a><code class="inline">unload/1</code></a>,
returns a string.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#get_all_env/1" data-no-tooltip="" translate="no">get_all_env(app)</a>

      </div>

        <div class="summary-synopsis"><p>Returns all key-value pairs for <code class="inline">app</code>.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#get_application/1" data-no-tooltip="" translate="no">get_application(module)</a>

      </div>

        <div class="summary-synopsis"><p>Gets the application for the given module.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#get_env/3" data-no-tooltip="" translate="no">get_env(app, key, default \\ nil)</a>

      </div>

        <div class="summary-synopsis"><p>Returns the value for <code class="inline">key</code> in <code class="inline">app</code>'s environment.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#load/1" data-no-tooltip="" translate="no">load(app)</a>

      </div>

        <div class="summary-synopsis"><p>Loads the given <code class="inline">app</code>.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#loaded_applications/0" data-no-tooltip="" translate="no">loaded_applications()</a>

      </div>

        <div class="summary-synopsis"><p>Returns a list with information about the applications which have been loaded.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#put_all_env/2" data-no-tooltip="" translate="no">put_all_env(config, opts \\ [])</a>

      </div>

        <div class="summary-synopsis"><p>Puts the environment for multiple applications at the same time.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#put_env/4" data-no-tooltip="" translate="no">put_env(app, key, value, opts \\ [])</a>

      </div>

        <div class="summary-synopsis"><p>Puts the <code class="inline">value</code> in <code class="inline">key</code> for the given <code class="inline">app</code>.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#spec/1" data-no-tooltip="" translate="no">spec(app)</a>

      </div>

        <div class="summary-synopsis"><p>Returns the spec for <code class="inline">app</code>.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#spec/2" data-no-tooltip="" translate="no">spec(app, key)</a>

      </div>

        <div class="summary-synopsis"><p>Returns the value for <code class="inline">key</code> in <code class="inline">app</code>'s specification.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#start/2" data-no-tooltip="" translate="no">start(app, type \\ :temporary)</a>

      </div>

        <div class="summary-synopsis"><p>Starts the given <code class="inline">app</code> with <a><code class="inline">restart_type/0</code></a>.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#started_applications/1" data-no-tooltip="" translate="no">started_applications(timeout \\ 5000)</a>

      </div>

        <div class="summary-synopsis"><p>Returns a list with information about the applications which are currently running.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#stop/1" data-no-tooltip="" translate="no">stop(app)</a>

      </div>

        <div class="summary-synopsis"><p>Stops the given <code class="inline">app</code>.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#unload/1" data-no-tooltip="" translate="no">unload(app)</a>

      </div>

        <div class="summary-synopsis"><p>Unloads the given <code class="inline">app</code>.</p></div>

    </div>

</div>

      </section>


      <section id="types" class="details-list">
        <h1 class="section-heading">Types</h1>

        <div class="types-list">
<section class="detail" id="t:app/0">

  <div class="detail-header">
    <a href="#t:app/0" class="detail-link" data-no-tooltip="" aria-label="Link to this type">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">app()</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/application.ex#L433" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@type</span> app() :: <a href="typespecs.xhtml#basic-types">atom</a>()</pre>

      </div>


  </section>
</section>
<section class="detail" id="t:application_key/0">

  <div class="detail-header">
    <a href="#t:application_key/0" class="detail-link" data-no-tooltip="" aria-label="Link to this type">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">application_key()</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/application.ex#L435" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@type</span> application_key() ::
  :start_phases
  | :mod
  | :applications
  | :optional_applications
  | :included_applications
  | :registered
  | :maxT
  | :maxP
  | :modules
  | :vsn
  | :id
  | :description</pre>

      </div>


  </section>
</section>
<section class="detail" id="t:key/0">

  <div class="detail-header">
    <a href="#t:key/0" class="detail-link" data-no-tooltip="" aria-label="Link to this type">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">key()</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/application.ex#L434" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@type</span> key() :: <a href="typespecs.xhtml#basic-types">atom</a>()</pre>

      </div>


  </section>
</section>
<section class="detail" id="t:restart_type/0">

  <div class="detail-header">
    <a href="#t:restart_type/0" class="detail-link" data-no-tooltip="" aria-label="Link to this type">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">restart_type()</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/application.ex#L461" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@type</span> restart_type() :: :permanent | :transient | :temporary</pre>

      </div>

<p>Specifies the type of the application:</p><ul><li><p><code class="inline">:permanent</code> - if <code class="inline">app</code> terminates, all other applications and the entire
node are also terminated.</p></li><li><p><code class="inline">:transient</code> - if <code class="inline">app</code> terminates with <code class="inline">:normal</code> reason, it is reported
but no other applications are terminated. If a transient application
terminates abnormally, all other applications and the entire node are
also terminated.</p></li><li><p><code class="inline">:temporary</code> - if <code class="inline">app</code> terminates, it is reported but no other
applications are terminated (the default).</p></li></ul><p>Note that it is always possible to stop an application explicitly by calling
<a href="#stop/1"><code class="inline">stop/1</code></a>. Regardless of the type of the application, no other applications will
be affected.</p><p>Note also that the <code class="inline">:transient</code> type is of little practical use, since when a
supervision tree terminates, the reason is set to <code class="inline">:shutdown</code>, not <code class="inline">:normal</code>.</p>
  </section>
</section>
<section class="detail" id="t:start_type/0">

  <div class="detail-header">
    <a href="#t:start_type/0" class="detail-link" data-no-tooltip="" aria-label="Link to this type">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">start_type()</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/application.ex#L438" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@type</span> start_type() :: :normal | {:takeover, <a href="typespecs.xhtml#built-in-types">node</a>()} | {:failover, <a href="typespecs.xhtml#built-in-types">node</a>()}</pre>

      </div>


  </section>
</section>
<section class="detail" id="t:state/0">

  <div class="detail-header">
    <a href="#t:state/0" class="detail-link" data-no-tooltip="" aria-label="Link to this type">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">state()</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/application.ex#L437" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@type</span> state() :: <a href="typespecs.xhtml#built-in-types">term</a>()</pre>

      </div>


  </section>
</section>
<section class="detail" id="t:value/0">

  <div class="detail-header">
    <a href="#t:value/0" class="detail-link" data-no-tooltip="" aria-label="Link to this type">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">value()</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/application.ex#L436" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@type</span> value() :: <a href="typespecs.xhtml#built-in-types">term</a>()</pre>

      </div>


  </section>
</section>

        </div>
      </section>

      <section id="callbacks" class="details-list">
        <h1 class="section-heading">Callbacks</h1>

        <div class="callbacks-list">
<section class="detail" id="c:config_change/3">

  <div class="detail-header">
    <a href="#c:config_change/3" class="detail-link" data-no-tooltip="" aria-label="Link to this callback">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">config_change(changed, new, removed)</h1>

        <span class="note">(optional)</span>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/application.ex#L397" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@callback</span> config_change(changed, new, removed) :: :ok
when changed: <a href="typespecs.xhtml#built-in-types">keyword</a>(), new: <a href="typespecs.xhtml#built-in-types">keyword</a>(), removed: [<a href="typespecs.xhtml#basic-types">atom</a>()]</pre>

      </div>

<p>Callback invoked after code upgrade, if the application environment
has changed.</p><p><code class="inline">changed</code> is a keyword list of keys and their changed values in the
application environment. <code class="inline">new</code> is a keyword list with all new keys
and their values. <code class="inline">removed</code> is a list with all removed keys.</p>
  </section>
</section>
<section class="detail" id="c:prep_stop/1">

  <div class="detail-header">
    <a href="#c:prep_stop/1" class="detail-link" data-no-tooltip="" aria-label="Link to this callback">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">prep_stop(state)</h1>

        <span class="note">(optional)</span>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/application.ex#L359" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@callback</span> prep_stop(<a href="#t:state/0">state</a>()) :: <a href="#t:state/0">state</a>()</pre>

      </div>

<p>Called before stopping the application.</p><p>This function is called before the top-level supervisor is terminated. It
receives the state returned by <a href="#c:start/2"><code class="inline">start/2</code></a>, if it did, or <code class="inline">[]</code> otherwise.
The return value is later passed to <a href="#c:stop/1"><code class="inline">stop/1</code></a>.</p>
  </section>
</section>
<section class="detail" id="c:start/2">

  <div class="detail-header">
    <a href="#c:start/2" class="detail-link" data-no-tooltip="" aria-label="Link to this callback">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">start(start_type, start_args)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/application.ex#L347" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@callback</span> start(<a href="#t:start_type/0">start_type</a>(), start_args :: <a href="typespecs.xhtml#built-in-types">term</a>()) ::
  {:ok, <a href="typespecs.xhtml#basic-types">pid</a>()} | {:ok, <a href="typespecs.xhtml#basic-types">pid</a>(), <a href="#t:state/0">state</a>()} | {:error, reason :: <a href="typespecs.xhtml#built-in-types">term</a>()}</pre>

      </div>

<p>Called when an application is started.</p><p>This function is called when an application is started using
<a href="#start/2"><code class="inline">Application.start/2</code></a> (and functions on top of that, such as
<a href="#ensure_started/2"><code class="inline">Application.ensure_started/2</code></a>). This function should start the top-level
process of the application (which should be the top supervisor of the
application's supervision tree if the application follows the OTP design
principles around supervision).</p><p><code class="inline">start_type</code> defines how the application is started:</p><ul><li><code class="inline">:normal</code> - used if the startup is a normal startup or if the application
is distributed and is started on the current node because of a failover
from another node and the application specification key <code class="inline">:start_phases</code>
is <code class="inline">:undefined</code>.</li><li><code class="inline">{:takeover, node}</code> - used if the application is distributed and is
started on the current node because of a failover on the node <code class="inline">node</code>.</li><li><code class="inline">{:failover, node}</code> - used if the application is distributed and is
started on the current node because of a failover on node <code class="inline">node</code>, and the
application specification key <code class="inline">:start_phases</code> is not <code class="inline">:undefined</code>.</li></ul><p><code class="inline">start_args</code> are the arguments passed to the application in the <code class="inline">:mod</code>
specification key (for example, <code class="inline">mod: {MyApp, [:my_args]}</code>).</p><p>This function should either return <code class="inline">{:ok, pid}</code> or <code class="inline">{:ok, pid, state}</code> if
startup is successful. <code class="inline">pid</code> should be the PID of the top supervisor. <code class="inline">state</code>
can be an arbitrary term, and if omitted will default to <code class="inline">[]</code>; if the
application is later stopped, <code class="inline">state</code> is passed to the <a href="#stop/1"><code class="inline">stop/1</code></a> callback (see
the documentation for the <a href="#c:stop/1"><code class="inline">stop/1</code></a> callback for more information).</p><p><code class="inline">use Application</code> provides no default implementation for the <a href="#start/2"><code class="inline">start/2</code></a>
callback.</p>
  </section>
</section>
<section class="detail" id="c:start_phase/3">

  <div class="detail-header">
    <a href="#c:start_phase/3" class="detail-link" data-no-tooltip="" aria-label="Link to this callback">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">start_phase(phase, start_type, phase_args)</h1>

        <span class="note">(optional)</span>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/application.ex#L386" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@callback</span> start_phase(phase :: <a href="typespecs.xhtml#built-in-types">term</a>(), <a href="#t:start_type/0">start_type</a>(), phase_args :: <a href="typespecs.xhtml#built-in-types">term</a>()) ::
  :ok | {:error, reason :: <a href="typespecs.xhtml#built-in-types">term</a>()}</pre>

      </div>

<p>Starts an application in synchronous phases.</p><p>This function is called after <a href="#start/2"><code class="inline">start/2</code></a> finishes but before
<a href="#start/2"><code class="inline">Application.start/2</code></a> returns. It will be called once for every start phase
defined in the application's (and any included applications') specification,
in the order they are listed in.</p>
  </section>
</section>
<section class="detail" id="c:stop/1">

  <div class="detail-header">
    <a href="#c:stop/1" class="detail-link" data-no-tooltip="" aria-label="Link to this callback">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">stop(state)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/application.ex#L376" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@callback</span> stop(<a href="#t:state/0">state</a>()) :: <a href="typespecs.xhtml#built-in-types">term</a>()</pre>

      </div>

<p>Called after an application has been stopped.</p><p>This function is called after an application has been stopped, i.e., after its
supervision tree has been stopped. It should do the opposite of what the
<a href="#c:start/2"><code class="inline">start/2</code></a> callback did, and should perform any necessary cleanup. The return
value of this callback is ignored.</p><p><code class="inline">state</code> is the state returned by <a href="#c:start/2"><code class="inline">start/2</code></a>, if it did, or <code class="inline">[]</code> otherwise.
If the optional callback <a href="#c:prep_stop/1"><code class="inline">prep_stop/1</code></a> is present, <code class="inline">state</code> is its return
value instead.</p><p><code class="inline">use Application</code> defines a default implementation of this function which does
nothing and just returns <code class="inline">:ok</code>.</p>
  </section>
</section>

        </div>
      </section>

      <section id="functions" class="details-list">
        <h1 class="section-heading">Functions</h1>

        <div class="functions-list">
<section class="detail" id="app_dir/1">

  <div class="detail-header">
    <a href="#app_dir/1" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">app_dir(app)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/application.ex#L1026" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> app_dir(<a href="#t:app/0">app</a>()) :: <a href="String.xhtml#t:t/0">String.t</a>()</pre>

      </div>

<p>Gets the directory for app.</p><p>This information is returned based on the code path. Here is an
example:</p><pre><code class="makeup elixir" translate="no"><samp class="nc">File</samp><samp class="o">.</samp><samp class="n">mkdir_p!</samp><samp class="p" data-group-id="8077687730-1">(</samp><samp class="s">&quot;foo/ebin&quot;</samp><samp class="p" data-group-id="8077687730-1">)</samp><samp class="w">
</samp><samp class="nc">Code</samp><samp class="o">.</samp><samp class="n">prepend_path</samp><samp class="p" data-group-id="8077687730-2">(</samp><samp class="s">&quot;foo/ebin&quot;</samp><samp class="p" data-group-id="8077687730-2">)</samp><samp class="w">
</samp><samp class="nc">Application</samp><samp class="o">.</samp><samp class="n">app_dir</samp><samp class="p" data-group-id="8077687730-3">(</samp><samp class="ss">:foo</samp><samp class="p" data-group-id="8077687730-3">)</samp><samp class="w">
</samp><samp class="c1">#=&gt; &quot;foo&quot;</samp></code></pre><p>Even though the directory is empty and there is no <code class="inline">.app</code> file
it is considered the application directory based on the name
&quot;foo/ebin&quot;. The name may contain a dash <code class="inline">-</code> which is considered
to be the app version and it is removed for the lookup purposes:</p><pre><code class="makeup elixir" translate="no"><samp class="nc">File</samp><samp class="o">.</samp><samp class="n">mkdir_p!</samp><samp class="p" data-group-id="6959897272-1">(</samp><samp class="s">&quot;bar-123/ebin&quot;</samp><samp class="p" data-group-id="6959897272-1">)</samp><samp class="w">
</samp><samp class="nc">Code</samp><samp class="o">.</samp><samp class="n">prepend_path</samp><samp class="p" data-group-id="6959897272-2">(</samp><samp class="s">&quot;bar-123/ebin&quot;</samp><samp class="p" data-group-id="6959897272-2">)</samp><samp class="w">
</samp><samp class="nc">Application</samp><samp class="o">.</samp><samp class="n">app_dir</samp><samp class="p" data-group-id="6959897272-3">(</samp><samp class="ss">:bar</samp><samp class="p" data-group-id="6959897272-3">)</samp><samp class="w">
</samp><samp class="c1">#=&gt; &quot;bar-123&quot;</samp></code></pre><p>For more information on code paths, check the <a href="Code.xhtml"><code class="inline">Code</code></a> module in
Elixir and also Erlang's <a href="https://www.erlang.org/doc/apps/kernel/code.html"><code class="inline">:code</code> module</a>.</p>
  </section>
</section>
<section class="detail" id="app_dir/2">

  <div class="detail-header">
    <a href="#app_dir/2" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">app_dir(app, path)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/application.ex#L1053" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> app_dir(<a href="#t:app/0">app</a>(), <a href="String.xhtml#t:t/0">String.t</a>() | [<a href="String.xhtml#t:t/0">String.t</a>()]) :: <a href="String.xhtml#t:t/0">String.t</a>()</pre>

      </div>

<p>Returns the given path inside <a href="#app_dir/1"><code class="inline">app_dir/1</code></a>.</p><p>If <code class="inline">path</code> is a string, then it will be used as the path inside <a href="#app_dir/1"><code class="inline">app_dir/1</code></a>. If
<code class="inline">path</code> is a list of strings, it will be joined (see <a href="Path.xhtml#join/1"><code class="inline">Path.join/1</code></a>) and the result
will be used as the path inside <a href="#app_dir/1"><code class="inline">app_dir/1</code></a>.</p><h2 id="app_dir/2-examples" class="section-heading"><a href="#app_dir/2-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="nc">File</samp><samp class="o">.</samp><samp class="n">mkdir_p!</samp><samp class="p" data-group-id="8250602110-1">(</samp><samp class="s">&quot;foo/ebin&quot;</samp><samp class="p" data-group-id="8250602110-1">)</samp><samp class="w">
</samp><samp class="nc">Code</samp><samp class="o">.</samp><samp class="n">prepend_path</samp><samp class="p" data-group-id="8250602110-2">(</samp><samp class="s">&quot;foo/ebin&quot;</samp><samp class="p" data-group-id="8250602110-2">)</samp><samp class="w">

</samp><samp class="nc">Application</samp><samp class="o">.</samp><samp class="n">app_dir</samp><samp class="p" data-group-id="8250602110-3">(</samp><samp class="ss">:foo</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;my_path&quot;</samp><samp class="p" data-group-id="8250602110-3">)</samp><samp class="w">
</samp><samp class="c1">#=&gt; &quot;foo/my_path&quot;</samp><samp class="w">

</samp><samp class="nc">Application</samp><samp class="o">.</samp><samp class="n">app_dir</samp><samp class="p" data-group-id="8250602110-4">(</samp><samp class="ss">:foo</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="8250602110-5">[</samp><samp class="s">&quot;my&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;nested&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;path&quot;</samp><samp class="p" data-group-id="8250602110-5">]</samp><samp class="p" data-group-id="8250602110-4">)</samp><samp class="w">
</samp><samp class="c1">#=&gt; &quot;foo/my/nested/path&quot;</samp></code></pre>
  </section>
</section>
<section class="detail" id="compile_env/3">

    <span id="compile_env/2"></span>

  <div class="detail-header">
    <a href="#compile_env/3" class="detail-link" data-no-tooltip="" aria-label="Link to this macro">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">compile_env(app, key_or_path, default \\ nil)</h1>

        <span class="note">(since 1.10.0)</span>

        <span class="note">(macro)</span>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/application.ex#L566" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> compile_env(<a href="#t:app/0">app</a>(), <a href="#t:key/0">key</a>() | <a href="typespecs.xhtml#built-in-types">list</a>(), <a href="#t:value/0">value</a>()) :: <a href="#t:value/0">value</a>()</pre>

      </div>

<p>Reads the application environment at compilation time.</p><p>Similar to <a href="#get_env/3"><code class="inline">get_env/3</code></a>, except it must be used to read values
at compile time. This allows Elixir to track when configuration
values change between compile time and runtime.</p><p>The first argument is the application name. The second argument
<code class="inline">key_or_path</code> is either an atom key or a path to traverse in
search of the configuration, starting with an atom key.</p><p>For example, imagine the following configuration:</p><pre><code class="makeup elixir" translate="no"><samp class="n">config</samp><samp class="w"> </samp><samp class="ss">:my_app</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:key</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="2403327246-1">[</samp><samp class="ss">foo</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="2403327246-2">[</samp><samp class="ss">bar</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="ss">:baz</samp><samp class="p" data-group-id="2403327246-2">]</samp><samp class="p" data-group-id="2403327246-1">]</samp></code></pre><p>We can access it during compile time as:</p><pre><code class="makeup elixir" translate="no"><samp class="nc">Application</samp><samp class="o">.</samp><samp class="n">compile_env</samp><samp class="p" data-group-id="4806902445-1">(</samp><samp class="ss">:my_app</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:key</samp><samp class="p" data-group-id="4806902445-1">)</samp><samp class="w">
</samp><samp class="c1">#=&gt; [foo: [bar: :baz]]</samp><samp class="w">

</samp><samp class="nc">Application</samp><samp class="o">.</samp><samp class="n">compile_env</samp><samp class="p" data-group-id="4806902445-2">(</samp><samp class="ss">:my_app</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="4806902445-3">[</samp><samp class="ss">:key</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:foo</samp><samp class="p" data-group-id="4806902445-3">]</samp><samp class="p" data-group-id="4806902445-2">)</samp><samp class="w">
</samp><samp class="c1">#=&gt; [bar: :baz]</samp><samp class="w">

</samp><samp class="nc">Application</samp><samp class="o">.</samp><samp class="n">compile_env</samp><samp class="p" data-group-id="4806902445-4">(</samp><samp class="ss">:my_app</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="4806902445-5">[</samp><samp class="ss">:key</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:foo</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:bar</samp><samp class="p" data-group-id="4806902445-5">]</samp><samp class="p" data-group-id="4806902445-4">)</samp><samp class="w">
</samp><samp class="c1">#=&gt; :baz</samp></code></pre><p>A default value can also be given as third argument. If
any of the keys in the path along the way is missing, the
default value is used:</p><pre><code class="makeup elixir" translate="no"><samp class="nc">Application</samp><samp class="o">.</samp><samp class="n">compile_env</samp><samp class="p" data-group-id="4964849701-1">(</samp><samp class="ss">:my_app</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="4964849701-2">[</samp><samp class="ss">:unknown</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:foo</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:bar</samp><samp class="p" data-group-id="4964849701-2">]</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:default</samp><samp class="p" data-group-id="4964849701-1">)</samp><samp class="w">
</samp><samp class="c1">#=&gt; :default</samp><samp class="w">

</samp><samp class="nc">Application</samp><samp class="o">.</samp><samp class="n">compile_env</samp><samp class="p" data-group-id="4964849701-3">(</samp><samp class="ss">:my_app</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="4964849701-4">[</samp><samp class="ss">:key</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:unknown</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:bar</samp><samp class="p" data-group-id="4964849701-4">]</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:default</samp><samp class="p" data-group-id="4964849701-3">)</samp><samp class="w">
</samp><samp class="c1">#=&gt; :default</samp><samp class="w">

</samp><samp class="nc">Application</samp><samp class="o">.</samp><samp class="n">compile_env</samp><samp class="p" data-group-id="4964849701-5">(</samp><samp class="ss">:my_app</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="4964849701-6">[</samp><samp class="ss">:key</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:foo</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:unknown</samp><samp class="p" data-group-id="4964849701-6">]</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:default</samp><samp class="p" data-group-id="4964849701-5">)</samp><samp class="w">
</samp><samp class="c1">#=&gt; :default</samp></code></pre><p>Giving a path is useful to let Elixir know that only certain paths
in a large configuration are compile time dependent.</p>
  </section>
</section>
<section class="detail" id="compile_env/4">

  <div class="detail-header">
    <a href="#compile_env/4" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">compile_env(env, app, key_or_path, default)</h1>

        <span class="note">(since 1.14.0)</span>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/application.ex#L591" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> compile_env(<a href="Macro.Env.xhtml#t:t/0">Macro.Env.t</a>(), <a href="#t:app/0">app</a>(), <a href="#t:key/0">key</a>() | <a href="typespecs.xhtml#built-in-types">list</a>(), <a href="#t:value/0">value</a>()) :: <a href="#t:value/0">value</a>()</pre>

      </div>

<p>Reads the application environment at compilation time from a macro.</p><p>Typically, developers will use <a href="#compile_env/3"><code class="inline">compile_env/3</code></a>. This function must
only be invoked from macros which aim to read the compilation environment
dynamically.</p><p>It expects a <a href="Macro.Env.xhtml"><code class="inline">Macro.Env</code></a> as first argument, where the <a href="Macro.Env.xhtml"><code class="inline">Macro.Env</code></a> is
typically the <code class="inline">__CALLER__</code> in a macro. It raises if <a href="Macro.Env.xhtml"><code class="inline">Macro.Env</code></a> comes
from a function.</p>
  </section>
</section>
<section class="detail" id="compile_env!/2">

  <div class="detail-header">
    <a href="#compile_env!/2" class="detail-link" data-no-tooltip="" aria-label="Link to this macro">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">compile_env!(app, key_or_path)</h1>

        <span class="note">(since 1.10.0)</span>

        <span class="note">(macro)</span>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/application.ex#L606" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> compile_env!(<a href="#t:app/0">app</a>(), <a href="#t:key/0">key</a>() | <a href="typespecs.xhtml#built-in-types">list</a>()) :: <a href="#t:value/0">value</a>()</pre>

      </div>

<p>Reads the application environment at compilation time or raises.</p><p>This is the same as <a href="#compile_env/3"><code class="inline">compile_env/3</code></a> but it raises an
<a href="ArgumentError.xhtml"><code class="inline">ArgumentError</code></a> if the configuration is not available.</p>
  </section>
</section>
<section class="detail" id="compile_env!/3">

  <div class="detail-header">
    <a href="#compile_env!/3" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">compile_env!(env, app, key_or_path)</h1>

        <span class="note">(since 1.14.0)</span>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/application.ex#L632" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> compile_env!(<a href="Macro.Env.xhtml#t:t/0">Macro.Env.t</a>(), <a href="#t:app/0">app</a>(), <a href="#t:key/0">key</a>() | <a href="typespecs.xhtml#built-in-types">list</a>()) :: <a href="#t:value/0">value</a>()</pre>

      </div>

<p>Reads the application environment at compilation time from a macro
or raises.</p><p>Typically, developers will use <a href="#compile_env!/2"><code class="inline">compile_env!/2</code></a>. This function must
only be invoked from macros which aim to read the compilation environment
dynamically.</p><p>It expects a <a href="Macro.Env.xhtml"><code class="inline">Macro.Env</code></a> as first argument, where the <a href="Macro.Env.xhtml"><code class="inline">Macro.Env</code></a> is
typically the <code class="inline">__CALLER__</code> in a macro. It raises if <a href="Macro.Env.xhtml"><code class="inline">Macro.Env</code></a> comes
from a function.</p>
  </section>
</section>
<section class="detail" id="delete_env/3">

    <span id="delete_env/2"></span>

  <div class="detail-header">
    <a href="#delete_env/3" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">delete_env(app, key, opts \\ [])</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/application.ex#L855" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> delete_env(<a href="#t:app/0">app</a>(), <a href="#t:key/0">key</a>(), timeout: <a href="typespecs.xhtml#built-in-types">timeout</a>(), persistent: <a href="typespecs.xhtml#built-in-types">boolean</a>()) :: :ok</pre>

      </div>

<p>Deletes the <code class="inline">key</code> from the given <code class="inline">app</code> environment.</p><p>It receives the same options as <a href="#put_env/4"><code class="inline">put_env/4</code></a>. Returns <code class="inline">:ok</code>.</p>
  </section>
</section>
<section class="detail" id="ensure_all_started/2">

    <span id="ensure_all_started/1"></span>

  <div class="detail-header">
    <a href="#ensure_all_started/2" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">ensure_all_started(app_or_apps, type_or_opts \\ [])</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/application.ex#L919" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> ensure_all_started(<a href="#t:app/0">app</a>() | [<a href="#t:app/0">app</a>()],
  type: <a href="#t:restart_type/0">restart_type</a>(),
  mode: :serial | :concurrent
) ::
  {:ok, [<a href="#t:app/0">app</a>()]} | {:error, <a href="typespecs.xhtml#built-in-types">term</a>()}</pre>

          <pre translate="no"><span class="attribute">@spec</span> ensure_all_started(<a href="#t:app/0">app</a>() | [<a href="#t:app/0">app</a>()], <a href="#t:restart_type/0">restart_type</a>()) ::
  {:ok, [<a href="#t:app/0">app</a>()]} | {:error, <a href="typespecs.xhtml#built-in-types">term</a>()}</pre>

      </div>

<p>Ensures the given <code class="inline">app</code> or <code class="inline">apps</code> and their child applications are started.</p><p>The second argument is either the <code class="inline">t:restart_type/1</code> (for consistency with
<a href="#start/2"><code class="inline">start/2</code></a>) or a keyword list.</p><h2 id="ensure_all_started/2-options" class="section-heading"><a href="#ensure_all_started/2-options" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Options</span></h2><ul><li><p><code class="inline">:type</code> - if the application should be started <code class="inline">:temporary</code> (default),
<code class="inline">:permanent</code>, or <code class="inline">:transient</code>. See <code class="inline">t:restart_type/1</code> for more information.</p></li><li><p><code class="inline">:mode</code> - (since v1.15.0) if the applications should be started serially
(<code class="inline">:serial</code>, default) or concurrently (<code class="inline">:concurrent</code>). This option requires
Erlang/OTP 26+.</p></li></ul>
  </section>
</section>
<section class="detail" id="ensure_loaded/1">

  <div class="detail-header">
    <a href="#ensure_loaded/1" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">ensure_loaded(app)</h1>

        <span class="note">(since 1.10.0)</span>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/application.ex#L891" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> ensure_loaded(<a href="#t:app/0">app</a>()) :: :ok | {:error, <a href="typespecs.xhtml#built-in-types">term</a>()}</pre>

      </div>

<p>Ensures the given <code class="inline">app</code> is loaded.</p><p>Same as <a href="#load/1"><code class="inline">load/1</code></a> but returns <code class="inline">:ok</code> if the application was already
loaded.</p>
  </section>
</section>
<section class="detail" id="ensure_started/2">

    <span id="ensure_started/1"></span>

  <div class="detail-header">
    <a href="#ensure_started/2" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">ensure_started(app, type \\ :temporary)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/application.ex#L879" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> ensure_started(<a href="#t:app/0">app</a>(), <a href="#t:restart_type/0">restart_type</a>()) :: :ok | {:error, <a href="typespecs.xhtml#built-in-types">term</a>()}</pre>

      </div>

<p>Ensures the given <code class="inline">app</code> is started with <a href="#t:restart_type/0"><code class="inline">restart_type/0</code></a>.</p><p>Same as <a href="#start/2"><code class="inline">start/2</code></a> but returns <code class="inline">:ok</code> if the application was already
started.</p>
  </section>
</section>
<section class="detail" id="fetch_env/2">

  <div class="detail-header">
    <a href="#fetch_env/2" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">fetch_env(app, key)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/application.ex#L738" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> fetch_env(<a href="#t:app/0">app</a>(), <a href="#t:key/0">key</a>()) :: {:ok, <a href="#t:value/0">value</a>()} | :error</pre>

      </div>

<p>Returns the value for <code class="inline">key</code> in <code class="inline">app</code>'s environment in a tuple.</p><p>If the configuration parameter does not exist, the function returns <code class="inline">:error</code>.</p><section role="note" class="admonition warning"><h4 class="admonition-title warning">Warning</h4><p>You must use this function to read only your own application
environment. Do not read the environment of other applications.</p></section><blockquote><h4>Application environment in info</h4><p>If you are writing a library to be used by other developers,
it is generally recommended to avoid the application environment, as the
application environment is effectively a global storage. For more information,
read our <a href="library-guidelines.xhtml">library guidelines</a>.</p></blockquote>
  </section>
</section>
<section class="detail" id="fetch_env!/2">

  <div class="detail-header">
    <a href="#fetch_env!/2" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">fetch_env!(app, key)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/application.ex#L765" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> fetch_env!(<a href="#t:app/0">app</a>(), <a href="#t:key/0">key</a>()) :: <a href="#t:value/0">value</a>()</pre>

      </div>

<p>Returns the value for <code class="inline">key</code> in <code class="inline">app</code>'s environment.</p><p>If the configuration parameter does not exist, raises <a href="ArgumentError.xhtml"><code class="inline">ArgumentError</code></a>.</p><section role="note" class="admonition warning"><h4 class="admonition-title warning">Warning</h4><p>You must use this function to read only your own application
environment. Do not read the environment of other applications.</p></section><blockquote><h4>Application environment in info</h4><p>If you are writing a library to be used by other developers,
it is generally recommended to avoid the application environment, as the
application environment is effectively a global storage. For more information,
read our <a href="library-guidelines.xhtml">library guidelines</a>.</p></blockquote>
  </section>
</section>
<section class="detail" id="format_error/1">

  <div class="detail-header">
    <a href="#format_error/1" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">format_error(reason)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/application.ex#L1085" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> format_error(<a href="typespecs.xhtml#basic-types">any</a>()) :: <a href="String.xhtml#t:t/0">String.t</a>()</pre>

      </div>

<p>Formats the error reason returned by <a href="#start/2"><code class="inline">start/2</code></a>,
<a href="#ensure_started/2"><code class="inline">ensure_started/2</code></a>, <a href="#stop/1"><code class="inline">stop/1</code></a>, <a href="#load/1"><code class="inline">load/1</code></a> and <a href="#unload/1"><code class="inline">unload/1</code></a>,
returns a string.</p>
  </section>
</section>
<section class="detail" id="get_all_env/1">

  <div class="detail-header">
    <a href="#get_all_env/1" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">get_all_env(app)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/application.ex#L518" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> get_all_env(<a href="#t:app/0">app</a>()) :: [{<a href="#t:key/0">key</a>(), <a href="#t:value/0">value</a>()}]</pre>

      </div>

<p>Returns all key-value pairs for <code class="inline">app</code>.</p>
  </section>
</section>
<section class="detail" id="get_application/1">

  <div class="detail-header">
    <a href="#get_application/1" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">get_application(module)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/application.ex#L507" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> get_application(<a href="typespecs.xhtml#basic-types">atom</a>()) :: <a href="typespecs.xhtml#basic-types">atom</a>() | nil</pre>

      </div>

<p>Gets the application for the given module.</p><p>The application is located by analyzing the spec
of all loaded applications. Returns <code class="inline">nil</code> if
the module is not listed in any application spec.</p>
  </section>
</section>
<section class="detail" id="get_env/3">

    <span id="get_env/2"></span>

  <div class="detail-header">
    <a href="#get_env/3" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">get_env(app, key, default \\ nil)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/application.ex#L715" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> get_env(<a href="#t:app/0">app</a>(), <a href="#t:key/0">key</a>(), <a href="#t:value/0">value</a>()) :: <a href="#t:value/0">value</a>()</pre>

      </div>

<p>Returns the value for <code class="inline">key</code> in <code class="inline">app</code>'s environment.</p><p>If the configuration parameter does not exist, the function returns the
<code class="inline">default</code> value.</p><section role="note" class="admonition warning"><h4 class="admonition-title warning">Warning</h4><p>You must use this function to read only your own application
environment. Do not read the environment of other applications.</p></section><h2 id="get_env/3-examples" class="section-heading"><a href="#get_env/3-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><p><a href="#get_env/3"><code class="inline">get_env/3</code></a> is commonly used to read the configuration of your OTP applications.
Since Mix configurations are commonly used to configure applications, we will use
this as a point of illustration.</p><p>Consider a new application <code class="inline">:my_app</code>. <code class="inline">:my_app</code> contains a database engine which
supports a pool of databases. The database engine needs to know the configuration for
each of those databases, and that configuration is supplied by key-value pairs in
environment of <code class="inline">:my_app</code>.</p><pre><code class="makeup elixir" translate="no"><samp class="n">config</samp><samp class="w"> </samp><samp class="ss">:my_app</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="nc">Databases.RepoOne</samp><samp class="p">,</samp><samp class="w">
  </samp><samp class="c1"># A database configuration</samp><samp class="w">
  </samp><samp class="ss">ip</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;localhost&quot;</samp><samp class="p">,</samp><samp class="w">
  </samp><samp class="ss">port</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">5433</samp><samp class="w">

</samp><samp class="n">config</samp><samp class="w"> </samp><samp class="ss">:my_app</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="nc">Databases.RepoTwo</samp><samp class="p">,</samp><samp class="w">
  </samp><samp class="c1"># Another database configuration (for the same OTP app)</samp><samp class="w">
  </samp><samp class="ss">ip</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;localhost&quot;</samp><samp class="p">,</samp><samp class="w">
  </samp><samp class="ss">port</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">20717</samp><samp class="w">

</samp><samp class="n">config</samp><samp class="w"> </samp><samp class="ss">:my_app</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">my_app_databases</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="7657452187-1">[</samp><samp class="nc">Databases.RepoOne</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="nc">Databases.RepoTwo</samp><samp class="p" data-group-id="7657452187-1">]</samp></code></pre><p>Our database engine used by <code class="inline">:my_app</code> needs to know what databases exist, and
what the database configurations are. The database engine can make a call to
<code class="inline">Application.get_env(:my_app, :my_app_databases, [])</code> to retrieve the list of
databases (specified by module names).</p><p>The engine can then traverse each repository in the list and call
<code class="inline">Application.get_env(:my_app, Databases.RepoOne)</code> and so forth to retrieve the
configuration of each one. In this case, each configuration will be a keyword
list, so you can use the functions in the <a href="Keyword.xhtml"><code class="inline">Keyword</code></a> module or even the <a href="Access.xhtml"><code class="inline">Access</code></a>
module to traverse it, for example:</p><pre><code class="makeup elixir" translate="no"><samp class="n">config</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="nc">Application</samp><samp class="o">.</samp><samp class="n">get_env</samp><samp class="p" data-group-id="6563880172-1">(</samp><samp class="ss">:my_app</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="nc">Databases.RepoOne</samp><samp class="p" data-group-id="6563880172-1">)</samp><samp class="w">
</samp><samp class="n">config</samp><samp class="p" data-group-id="6563880172-2">[</samp><samp class="ss">:ip</samp><samp class="p" data-group-id="6563880172-2">]</samp></code></pre>
  </section>
</section>
<section class="detail" id="load/1">

  <div class="detail-header">
    <a href="#load/1" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">load(app)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/application.ex#L986" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> load(<a href="#t:app/0">app</a>()) :: :ok | {:error, <a href="typespecs.xhtml#built-in-types">term</a>()}</pre>

      </div>

<p>Loads the given <code class="inline">app</code>.</p><p>In order to be loaded, an <code class="inline">.app</code> file must be in the load paths.
All <code class="inline">:included_applications</code> will also be loaded.</p><p>Loading the application does not start it nor load its modules, but
it does load its environment.</p>
  </section>
</section>
<section class="detail" id="loaded_applications/0">

  <div class="detail-header">
    <a href="#loaded_applications/0" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">loaded_applications()</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/application.ex#L1075" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> loaded_applications() :: [{<a href="#t:app/0">app</a>(), description :: <a href="typespecs.xhtml#built-in-types">charlist</a>(), vsn :: <a href="typespecs.xhtml#built-in-types">charlist</a>()}]</pre>

      </div>

<p>Returns a list with information about the applications which have been loaded.</p>
  </section>
</section>
<section class="detail" id="put_all_env/2">

    <span id="put_all_env/1"></span>

  <div class="detail-header">
    <a href="#put_all_env/2" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">put_all_env(config, opts \\ [])</h1>

        <span class="note">(since 1.9.0)</span>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/application.ex#L845" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> put_all_env([{<a href="#t:app/0">app</a>(), [{<a href="#t:key/0">key</a>(), <a href="#t:value/0">value</a>()}]}],
  timeout: <a href="typespecs.xhtml#built-in-types">timeout</a>(),
  persistent: <a href="typespecs.xhtml#built-in-types">boolean</a>()
) :: :ok</pre>

      </div>

<p>Puts the environment for multiple applications at the same time.</p><p>The given config should not:</p><ul><li>have the same application listed more than once</li><li>have the same key inside the same application listed more than once</li></ul><p>If those conditions are not met, this function will raise.</p><p>This function receives the same options as <a href="#put_env/4"><code class="inline">put_env/4</code></a>. Returns <code class="inline">:ok</code>.</p><h2 id="put_all_env/2-examples" class="section-heading"><a href="#put_all_env/2-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="nc">Application</samp><samp class="o">.</samp><samp class="n">put_all_env</samp><samp class="p" data-group-id="8791112292-1">(</samp><samp class="w">
  </samp><samp class="ss">my_app</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="8791112292-2">[</samp><samp class="w">
    </samp><samp class="ss">key</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="ss">:value</samp><samp class="p">,</samp><samp class="w">
    </samp><samp class="ss">another_key</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="ss">:another_value</samp><samp class="w">
  </samp><samp class="p" data-group-id="8791112292-2">]</samp><samp class="p">,</samp><samp class="w">
  </samp><samp class="ss">another_app</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="8791112292-3">[</samp><samp class="w">
    </samp><samp class="ss">key</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="ss">:value</samp><samp class="w">
  </samp><samp class="p" data-group-id="8791112292-3">]</samp><samp class="w">
</samp><samp class="p" data-group-id="8791112292-1">)</samp></code></pre>
  </section>
</section>
<section class="detail" id="put_env/4">

    <span id="put_env/3"></span>

  <div class="detail-header">
    <a href="#put_env/4" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">put_env(app, key, value, opts \\ [])</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/application.ex#L813" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> put_env(<a href="#t:app/0">app</a>(), <a href="#t:key/0">key</a>(), <a href="#t:value/0">value</a>(), timeout: <a href="typespecs.xhtml#built-in-types">timeout</a>(), persistent: <a href="typespecs.xhtml#built-in-types">boolean</a>()) :: :ok</pre>

      </div>

<p>Puts the <code class="inline">value</code> in <code class="inline">key</code> for the given <code class="inline">app</code>.</p><section role="note" class="admonition warning"><h4 class="admonition-title warning">Compile environment</h4><p>Do not use this function to change environment variables read
via <a href="#compile_env/2"><code class="inline">Application.compile_env/2</code></a>. The compile environment must
be exclusively set before compilation, in your config files.</p></section><h2 id="put_env/4-options" class="section-heading"><a href="#put_env/4-options" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Options</span></h2><ul><li><code class="inline">:timeout</code> - the timeout for the change (defaults to <code class="inline">5_000</code> milliseconds)</li><li><code class="inline">:persistent</code> - persists the given value on application load and reloads</li></ul><p>If <a href="#put_env/4"><code class="inline">put_env/4</code></a> is called before the application is loaded, the application
environment values specified in the <code class="inline">.app</code> file will override the ones
previously set.</p><p>The <code class="inline">:persistent</code> option can be set to <code class="inline">true</code> when there is a need to guarantee
parameters set with this function will not be overridden by the ones defined
in the application resource file on load. This means persistent values will
stick after the application is loaded and also on application reload.</p>
  </section>
</section>
<section class="detail" id="spec/1">

  <div class="detail-header">
    <a href="#spec/1" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">spec(app)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/application.ex#L477" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> spec(<a href="#t:app/0">app</a>()) :: [{<a href="#t:application_key/0">application_key</a>(), <a href="#t:value/0">value</a>()}] | nil</pre>

      </div>

<p>Returns the spec for <code class="inline">app</code>.</p><p>The following keys are returned:</p><ul><li><code class="inline">:description</code></li><li><code class="inline">:id</code></li><li><code class="inline">:vsn</code></li><li><code class="inline">:modules</code></li><li><code class="inline">:maxP</code></li><li><code class="inline">:maxT</code></li><li><code class="inline">:registered</code></li><li><code class="inline">:included_applications</code></li><li><code class="inline">:optional_applications</code></li><li><code class="inline">:applications</code></li><li><code class="inline">:mod</code></li><li><code class="inline">:start_phases</code></li></ul><p>For a description of all fields, see <a href="https://www.erlang.org/doc/man/app">Erlang's application
specification</a>.</p><p>Note the environment is not returned as it can be accessed via
<a href="#fetch_env/2"><code class="inline">fetch_env/2</code></a>. Returns <code class="inline">nil</code> if the application is not loaded.</p>
  </section>
</section>
<section class="detail" id="spec/2">

  <div class="detail-header">
    <a href="#spec/2" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">spec(app, key)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/application.ex#L492" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> spec(<a href="#t:app/0">app</a>(), <a href="#t:application_key/0">application_key</a>()) :: <a href="#t:value/0">value</a>() | nil</pre>

      </div>

<p>Returns the value for <code class="inline">key</code> in <code class="inline">app</code>'s specification.</p><p>See <a href="#spec/1"><code class="inline">spec/1</code></a> for the supported keys. If the given
specification parameter does not exist, this function
will raise. Returns <code class="inline">nil</code> if the application is not loaded.</p>
  </section>
</section>
<section class="detail" id="start/2">

    <span id="start/1"></span>

  <div class="detail-header">
    <a href="#start/2" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">start(app, type \\ :temporary)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/application.ex#L962" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> start(<a href="#t:app/0">app</a>(), <a href="#t:restart_type/0">restart_type</a>()) :: :ok | {:error, <a href="typespecs.xhtml#built-in-types">term</a>()}</pre>

      </div>

<p>Starts the given <code class="inline">app</code> with <a href="#t:restart_type/0"><code class="inline">restart_type/0</code></a>.</p><p>If the <code class="inline">app</code> is not loaded, the application will first be loaded using <a href="#load/1"><code class="inline">load/1</code></a>.
Any included application, defined in the <code class="inline">:included_applications</code> key of the
<code class="inline">.app</code> file will also be loaded, but they won't be started.</p><p>Furthermore, all applications listed in the <code class="inline">:applications</code> key must be explicitly
started before this application is. If not, <code class="inline">{:error, {:not_started, app}}</code> is
returned, where <code class="inline">app</code> is the name of the missing application.</p><p>In case you want to automatically load <strong>and start</strong> all of <code class="inline">app</code>'s dependencies,
see <a href="#ensure_all_started/2"><code class="inline">ensure_all_started/2</code></a>.</p>
  </section>
</section>
<section class="detail" id="started_applications/1">

    <span id="started_applications/0"></span>

  <div class="detail-header">
    <a href="#started_applications/1" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">started_applications(timeout \\ 5000)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/application.ex#L1067" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> started_applications(<a href="typespecs.xhtml#built-in-types">timeout</a>()) :: [
  {<a href="#t:app/0">app</a>(), description :: <a href="typespecs.xhtml#built-in-types">charlist</a>(), vsn :: <a href="typespecs.xhtml#built-in-types">charlist</a>()}
]</pre>

      </div>

<p>Returns a list with information about the applications which are currently running.</p>
  </section>
</section>
<section class="detail" id="stop/1">

  <div class="detail-header">
    <a href="#stop/1" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">stop(app)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/application.ex#L972" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> stop(<a href="#t:app/0">app</a>()) :: :ok | {:error, <a href="typespecs.xhtml#built-in-types">term</a>()}</pre>

      </div>

<p>Stops the given <code class="inline">app</code>.</p><p>When stopped, the application is still loaded.</p>
  </section>
</section>
<section class="detail" id="unload/1">

  <div class="detail-header">
    <a href="#unload/1" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">unload(app)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/application.ex#L997" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> unload(<a href="#t:app/0">app</a>()) :: :ok | {:error, <a href="typespecs.xhtml#built-in-types">term</a>()}</pre>

      </div>

<p>Unloads the given <code class="inline">app</code>.</p><p>It will also unload all <code class="inline">:included_applications</code>.
Note that the function does not purge the application modules.</p>
  </section>
</section>

        </div>
      </section>


  </body>
</html>
