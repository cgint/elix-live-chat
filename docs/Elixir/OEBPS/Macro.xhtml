<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"
      xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>Macro - Elixir v1.18.4</title>
    <meta name="generator" content="ExDoc v0.38.2" />
    <link type="text/css" rel="stylesheet" href="dist/epub-elixir-FNUUKFP7.css" />
    <script src="dist/epub-4WIP524F.js"></script>

  </head>
  <body class="content-inner">

    <h1 id="content">
Macro 
    </h1>


      <section id="moduledoc" class="docstring">
<p>Functions for manipulating AST and implementing macros.</p><p>Macros are compile-time constructs that receive Elixir's AST as input
and return Elixir's AST as output.</p><p>Many of the functions in this module exist precisely to work with Elixir
AST, to traverse, query, and transform it.</p><p>Let's see a simple example that shows the difference between functions
and macros:</p><pre><code class="makeup elixir" translate="no"><samp class="kd">defmodule</samp><samp class="w"> </samp><samp class="nc">Example</samp><samp class="w"> </samp><samp class="k" data-group-id="0149972390-1">do</samp><samp class="w">
  </samp><samp class="kd">defmacro</samp><samp class="w"> </samp><samp class="nf">macro_inspect</samp><samp class="p" data-group-id="0149972390-2">(</samp><samp class="n">value</samp><samp class="p" data-group-id="0149972390-2">)</samp><samp class="w"> </samp><samp class="k" data-group-id="0149972390-3">do</samp><samp class="w">
    </samp><samp class="nc">IO</samp><samp class="o">.</samp><samp class="n">inspect</samp><samp class="p" data-group-id="0149972390-4">(</samp><samp class="n">value</samp><samp class="p" data-group-id="0149972390-4">)</samp><samp class="w">
    </samp><samp class="n">value</samp><samp class="w">
  </samp><samp class="k" data-group-id="0149972390-3">end</samp><samp class="w">

  </samp><samp class="kd">def</samp><samp class="w"> </samp><samp class="nf">fun_inspect</samp><samp class="p" data-group-id="0149972390-5">(</samp><samp class="n">value</samp><samp class="p" data-group-id="0149972390-5">)</samp><samp class="w"> </samp><samp class="k" data-group-id="0149972390-6">do</samp><samp class="w">
    </samp><samp class="nc">IO</samp><samp class="o">.</samp><samp class="n">inspect</samp><samp class="p" data-group-id="0149972390-7">(</samp><samp class="n">value</samp><samp class="p" data-group-id="0149972390-7">)</samp><samp class="w">
    </samp><samp class="n">value</samp><samp class="w">
  </samp><samp class="k" data-group-id="0149972390-6">end</samp><samp class="w">
</samp><samp class="k" data-group-id="0149972390-1">end</samp></code></pre><p>Now let's give it a try:</p><pre><code class="makeup elixir" translate="no"><samp class="kn">import</samp><samp class="w"> </samp><samp class="nc">Example</samp><samp class="w">

</samp><samp class="n">macro_inspect</samp><samp class="p" data-group-id="5600072185-1">(</samp><samp class="mi">1</samp><samp class="p" data-group-id="5600072185-1">)</samp><samp class="w">
</samp><samp class="c1">#=&gt; 1</samp><samp class="w">
</samp><samp class="c1">#=&gt; 1</samp><samp class="w">

</samp><samp class="n">fun_inspect</samp><samp class="p" data-group-id="5600072185-2">(</samp><samp class="mi">1</samp><samp class="p" data-group-id="5600072185-2">)</samp><samp class="w">
</samp><samp class="c1">#=&gt; 1</samp><samp class="w">
</samp><samp class="c1">#=&gt; 1</samp></code></pre><p>So far they behave the same, as we are passing an integer as argument.
But let's see what happens when we pass an expression:</p><pre><code class="makeup elixir" translate="no"><samp class="n">macro_inspect</samp><samp class="p" data-group-id="3716469995-1">(</samp><samp class="mi">1</samp><samp class="w"> </samp><samp class="o">+</samp><samp class="w"> </samp><samp class="mi">2</samp><samp class="p" data-group-id="3716469995-1">)</samp><samp class="w">
</samp><samp class="c1">#=&gt; {:+, [line: 3], [1, 2]}</samp><samp class="w">
</samp><samp class="c1">#=&gt; 3</samp><samp class="w">

</samp><samp class="n">fun_inspect</samp><samp class="p" data-group-id="3716469995-2">(</samp><samp class="mi">1</samp><samp class="w"> </samp><samp class="o">+</samp><samp class="w"> </samp><samp class="mi">2</samp><samp class="p" data-group-id="3716469995-2">)</samp><samp class="w">
</samp><samp class="c1">#=&gt; 3</samp><samp class="w">
</samp><samp class="c1">#=&gt; 3</samp></code></pre><p>The macro receives the representation of the code given as argument,
while a function receives the result of the code given as argument.
A macro must return a superset of the code representation. See
<a href="#t:input/0"><code class="inline">input/0</code></a> and <a href="#t:output/0"><code class="inline">output/0</code></a> for more information.</p><p>To learn more about Elixir's AST and how to build them programmatically,
see <a href="Kernel.SpecialForms.xhtml#quote/2"><code class="inline">quote/2</code></a>.</p><section role="note" class="admonition tip"><h4 class="admonition-title tip">Evaluating code</h4><p>The functions in this module do not evaluate code. In fact,
evaluating code from macros is often an anti-pattern. For code
evaluation, see the <a href="Code.xhtml"><code class="inline">Code</code></a> module.</p></section>
      </section>


      <section id="summary" class="details-list">
        <h1 class="section-heading">Summary</h1>
<div class="summary-types summary">
  <h2>
    <a href="#types">Types</a>
  </h2>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#t:captured_remote_function/0" data-no-tooltip="" translate="no">captured_remote_function()</a>

      </div>

        <div class="summary-synopsis"><p>A captured remote function in the format of &amp;Mod.fun/arity</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#t:input/0" data-no-tooltip="" translate="no">input()</a>

      </div>

        <div class="summary-synopsis"><p>The inputs of a macro</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#t:metadata/0" data-no-tooltip="" translate="no">metadata()</a>

      </div>

        <div class="summary-synopsis"><p>A keyword list of AST metadata.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#t:output/0" data-no-tooltip="" translate="no">output()</a>

      </div>

        <div class="summary-synopsis"><p>The output of a macro</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#t:t/0" data-no-tooltip="" translate="no">t()</a>

      </div>

        <div class="summary-synopsis"><p>Abstract Syntax Tree (AST)</p></div>

    </div>

</div>
<div class="summary-functions summary">
  <h2>
    <a href="#functions">Functions</a>
  </h2>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#camelize/1" data-no-tooltip="" translate="no">camelize(string)</a>

      </div>

        <div class="summary-synopsis"><p>Converts the given string to CamelCase format.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#classify_atom/1" data-no-tooltip="" translate="no">classify_atom(atom)</a>

      </div>

        <div class="summary-synopsis"><p>Classifies an <code class="inline">atom</code> based on its possible AST placement.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#compile_apply/4" data-no-tooltip="" translate="no">compile_apply(mod, fun, args, caller)</a>

      </div>

        <div class="summary-synopsis"><p>Applies a <code class="inline">mod</code>, <code class="inline">function</code>, and <code class="inline">args</code> at compile-time in <code class="inline">caller</code>.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#dbg/3" data-no-tooltip="" translate="no">dbg(code, options, env)</a>

      </div>

        <div class="summary-synopsis"><p>Default backend for <a><code class="inline">Kernel.dbg/2</code></a>.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#decompose_call/1" data-no-tooltip="" translate="no">decompose_call(ast)</a>

      </div>

        <div class="summary-synopsis"><p>Decomposes a local or remote call into its remote part (when provided),
function name and argument list.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#escape/2" data-no-tooltip="" translate="no">escape(expr, opts \\ [])</a>

      </div>

        <div class="summary-synopsis"><p>Recursively escapes a value so it can be inserted into a syntax tree.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#expand/2" data-no-tooltip="" translate="no">expand(ast, env)</a>

      </div>

        <div class="summary-synopsis"><p>Receives an AST node and expands it until it can no longer
be expanded.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#expand_literals/2" data-no-tooltip="" translate="no">expand_literals(ast, env)</a>

      </div>

        <div class="summary-synopsis"><p>Expands all literals in <code class="inline">ast</code> with the given <code class="inline">env</code>.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#expand_literals/3" data-no-tooltip="" translate="no">expand_literals(ast, acc, fun)</a>

      </div>

        <div class="summary-synopsis"><p>Expands all literals in <code class="inline">ast</code> with the given <code class="inline">acc</code> and <code class="inline">fun</code>.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#expand_once/2" data-no-tooltip="" translate="no">expand_once(ast, env)</a>

      </div>

        <div class="summary-synopsis"><p>Receives an AST node and expands it once.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#generate_arguments/2" data-no-tooltip="" translate="no">generate_arguments(amount, context)</a>

      </div>

        <div class="summary-synopsis"><p>Generates AST nodes for a given number of required argument
variables using <a><code class="inline">Macro.var/2</code></a>.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#generate_unique_arguments/2" data-no-tooltip="" translate="no">generate_unique_arguments(amount, context)</a>

      </div>

        <div class="summary-synopsis"><p>Generates AST nodes for a given number of required argument
variables using <a><code class="inline">Macro.unique_var/2</code></a>.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#inspect_atom/3" data-no-tooltip="" translate="no">inspect_atom(source_format, atom, opts \\ [])</a>

      </div>

        <div class="summary-synopsis"><p>Inspects <code class="inline">atom</code> according to different source formats.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#operator?/2" data-no-tooltip="" translate="no">operator?(name, arity)</a>

      </div>

        <div class="summary-synopsis"><p>Returns <code class="inline">true</code> if the given name and arity is an operator.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#path/2" data-no-tooltip="" translate="no">path(ast, fun)</a>

      </div>

        <div class="summary-synopsis"><p>Returns the path to the node in <code class="inline">ast</code> for which <code class="inline">fun</code> returns a truthy value.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#pipe/3" data-no-tooltip="" translate="no">pipe(expr, call_args, position)</a>

      </div>

        <div class="summary-synopsis"><p>Pipes <code class="inline">expr</code> into the <code class="inline">call_args</code> at the given <code class="inline">position</code>.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#postwalk/2" data-no-tooltip="" translate="no">postwalk(ast, fun)</a>

      </div>

        <div class="summary-synopsis"><p>This function behaves like <a><code class="inline">prewalk/2</code></a>, but performs a depth-first,
post-order traversal of quoted expressions.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#postwalk/3" data-no-tooltip="" translate="no">postwalk(ast, acc, fun)</a>

      </div>

        <div class="summary-synopsis"><p>This functions behaves like <a><code class="inline">prewalk/3</code></a>, but performs a depth-first,
post-order traversal of quoted expressions using an accumulator.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#postwalker/1" data-no-tooltip="" translate="no">postwalker(ast)</a>

      </div>

        <div class="summary-synopsis"><p>Returns an enumerable that traverses the  <code class="inline">ast</code> in depth-first,
post-order traversal.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#prewalk/2" data-no-tooltip="" translate="no">prewalk(ast, fun)</a>

      </div>

        <div class="summary-synopsis"><p>Performs a depth-first, pre-order traversal of quoted expressions.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#prewalk/3" data-no-tooltip="" translate="no">prewalk(ast, acc, fun)</a>

      </div>

        <div class="summary-synopsis"><p>Performs a depth-first, pre-order traversal of quoted expressions
using an accumulator.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#prewalker/1" data-no-tooltip="" translate="no">prewalker(ast)</a>

      </div>

        <div class="summary-synopsis"><p>Returns an enumerable that traverses the  <code class="inline">ast</code> in depth-first,
pre-order traversal.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#quoted_literal?/1" data-no-tooltip="" translate="no">quoted_literal?(term)</a>

      </div>

        <div class="summary-synopsis"><p>Returns <code class="inline">true</code> if the given quoted expression represents a quoted literal.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#special_form?/2" data-no-tooltip="" translate="no">special_form?(name, arity)</a>

      </div>

        <div class="summary-synopsis"><p>Returns <code class="inline">true</code> if the given name and arity is a special form.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#struct!/2" data-no-tooltip="" translate="no">struct!(module, env)</a>

          <span class="deprecated" title="Use Macro.struct_info!/2 instead">deprecated</span>

      </div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#struct_info!/2" data-no-tooltip="" translate="no">struct_info!(module, env)</a>

      </div>

        <div class="summary-synopsis"><p>Extracts the struct information (equivalent to calling
<code class="inline">module.__info__(:struct)</code>).</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#to_string/1" data-no-tooltip="" translate="no">to_string(tree)</a>

      </div>

        <div class="summary-synopsis"><p>Converts the given expression AST to a string.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#to_string/2" data-no-tooltip="" translate="no">to_string(tree, fun)</a>

          <span class="deprecated" title="Use Macro.to_string/1 instead">deprecated</span>

      </div>

        <div class="summary-synopsis"><p>Converts the given expression AST to a string.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#traverse/4" data-no-tooltip="" translate="no">traverse(ast, acc, pre, post)</a>

      </div>

        <div class="summary-synopsis"><p>Performs a depth-first traversal of quoted expressions
using an accumulator.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#underscore/1" data-no-tooltip="" translate="no">underscore(atom_or_string)</a>

      </div>

        <div class="summary-synopsis"><p>Converts the given argument to a string with the underscore-slash format.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#unescape_string/1" data-no-tooltip="" translate="no">unescape_string(string)</a>

      </div>

        <div class="summary-synopsis"><p>Unescapes characters in a string.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#unescape_string/2" data-no-tooltip="" translate="no">unescape_string(string, map)</a>

      </div>

        <div class="summary-synopsis"><p>Unescapes characters in a string according to the given mapping.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#unique_var/2" data-no-tooltip="" translate="no">unique_var(var, context)</a>

      </div>

        <div class="summary-synopsis"><p>Generates an AST node representing a unique variable
given by the atoms <code class="inline">var</code> and <code class="inline">context</code>.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#unpipe/1" data-no-tooltip="" translate="no">unpipe(expr)</a>

      </div>

        <div class="summary-synopsis"><p>Breaks a pipeline expression into a list.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#update_meta/2" data-no-tooltip="" translate="no">update_meta(quoted, fun)</a>

      </div>

        <div class="summary-synopsis"><p>Applies the given function to the node metadata if it contains one.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#validate/1" data-no-tooltip="" translate="no">validate(expr)</a>

      </div>

        <div class="summary-synopsis"><p>Validates the given expressions are valid quoted expressions.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#var/2" data-no-tooltip="" translate="no">var(var, context)</a>

      </div>

        <div class="summary-synopsis"><p>Generates an AST node representing the variable given
by the atoms <code class="inline">var</code> and <code class="inline">context</code>.</p></div>

    </div>

</div>

      </section>


      <section id="types" class="details-list">
        <h1 class="section-heading">Types</h1>

        <div class="types-list">
<section class="detail" id="t:captured_remote_function/0">

  <div class="detail-header">
    <a href="#t:captured_remote_function/0" class="detail-link" data-no-tooltip="" aria-label="Link to this type">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">captured_remote_function()</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/macro.ex#L190" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@type</span> captured_remote_function() :: <a href="typespecs.xhtml#built-in-types">fun</a>()</pre>

      </div>

<p>A captured remote function in the format of &amp;Mod.fun/arity</p>
  </section>
</section>
<section class="detail" id="t:input/0">

  <div class="detail-header">
    <a href="#t:input/0" class="detail-link" data-no-tooltip="" aria-label="Link to this type">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">input()</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/macro.ex#L72" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@type</span> input() ::
  input_expr() | {<a href="#t:input/0">input</a>(), <a href="#t:input/0">input</a>()} | [<a href="#t:input/0">input</a>()] | <a href="typespecs.xhtml#basic-types">atom</a>() | <a href="typespecs.xhtml#built-in-types">number</a>() | <a href="typespecs.xhtml#built-in-types">binary</a>()</pre>

      </div>

<p>The inputs of a macro</p>
  </section>
</section>
<section class="detail" id="t:metadata/0">

  <div class="detail-header">
    <a href="#t:metadata/0" class="detail-link" data-no-tooltip="" aria-label="Link to this type">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">metadata()</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/macro.ex#L187" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@type</span> metadata() :: <a href="typespecs.xhtml#built-in-types">keyword</a>()</pre>

      </div>

<p>A keyword list of AST metadata.</p><p>The metadata in Elixir AST is a keyword list of values. Any key can be used
and different parts of the compiler may use different keys. For example,
the AST received by a macro will always include the <code class="inline">:line</code> annotation,
while the AST emitted by <a href="Kernel.SpecialForms.xhtml#quote/2"><code class="inline">quote/2</code></a> will only have the <code class="inline">:line</code> annotation if
the <code class="inline">:line</code> option is provided.</p><p>The following metadata keys are public:</p><ul><li><p><code class="inline">:context</code> - Defines the context in which the AST was generated.
For example, <a href="Kernel.SpecialForms.xhtml#quote/2"><code class="inline">quote/2</code></a> will include the module calling <a href="Kernel.SpecialForms.xhtml#quote/2"><code class="inline">quote/2</code></a>
as the context. This is often used to distinguish regular code from code
generated by a macro or by <a href="Kernel.SpecialForms.xhtml#quote/2"><code class="inline">quote/2</code></a>.</p></li><li><p><code class="inline">:counter</code> - The variable counter used for variable hygiene. In terms of
the compiler, each variable is identified by the combination of either
<code class="inline">name</code> and <code class="inline">metadata[:counter]</code>, or <code class="inline">name</code> and <code class="inline">context</code>.</p></li><li><p><code class="inline">:from_brackets</code> - Used to determine whether a call to <a href="Access.xhtml#get/3"><code class="inline">Access.get/3</code></a> is from
bracket syntax.</p></li><li><p><code class="inline">:from_interpolation</code> - Used to determine whether a call to <a href="Kernel.xhtml#to_string/1"><code class="inline">Kernel.to_string/1</code></a> is
from interpolation.</p></li><li><p><code class="inline">:generated</code> - Whether the code should be considered as generated by
the compiler or not. This means the compiler and tools like Dialyzer may not
emit certain warnings.</p></li><li><p><code class="inline">:if_undefined</code> - How to expand a variable that is undefined. Set it to
<code class="inline">:apply</code> if you want a variable to become a nullary call without warning
or <code class="inline">:raise</code></p></li><li><p><code class="inline">:keep</code> - Used by <a href="Kernel.SpecialForms.xhtml#quote/2"><code class="inline">quote/2</code></a> with the option <code class="inline">location: :keep</code> to annotate
the file and the line number of the quoted source.</p></li><li><p><code class="inline">:line</code> - The line number of the AST node. Note line information is discarded
from quoted code but can be enabled back via the <code class="inline">:line</code> option.</p></li></ul><p>The following metadata keys are enabled by <a href="Code.xhtml#string_to_quoted/2"><code class="inline">Code.string_to_quoted/2</code></a>:</p><ul><li><p><code class="inline">:closing</code> - contains metadata about the closing pair, such as a <code class="inline">}</code>
in a tuple or in a map, or such as the closing <code class="inline">)</code> in a function call
with parens (when <code class="inline">:token_metadata</code> is true). If the function call
has a do-end block attached to it, its metadata is found under the
<code class="inline">:do</code> and <code class="inline">:end</code> metadata</p></li><li><p><code class="inline">:column</code> - the column number of the AST node (when <code class="inline">:columns</code> is true).
Note column information is always discarded from quoted code.</p></li><li><p><code class="inline">:delimiter</code> - contains the opening delimiter for sigils, strings,
and charlists as a string (such as <code class="inline">&quot;{&quot;</code>, <code class="inline">&quot;/&quot;</code>, <code class="inline">&quot;'&quot;</code>, and the like)</p></li><li><p><code class="inline">:do</code> - contains metadata about the <code class="inline">do</code> location in a function call with
<code class="inline">do</code>-<code class="inline">end</code> blocks (when <code class="inline">:token_metadata</code> is true)</p></li><li><p><code class="inline">:end</code> - contains metadata about the <code class="inline">end</code> location in a function call with
<code class="inline">do</code>-<code class="inline">end</code> blocks (when <code class="inline">:token_metadata</code> is true)</p></li><li><p><code class="inline">:end_of_expression</code> - denotes when the end of expression effectively
happens (when <code class="inline">:token_metadata</code> is true). This is only available for
expressions inside &quot;blocks of code&quot;, which are either direct children
of a <code class="inline">__block__</code> or the right side of <code class="inline">-&gt;</code>. The last expression of the
block does not have metadata if it is not followed by an end of line
character (either a newline or <code class="inline">;</code>). This entry may appear multiple times
in the same metadata if the expression is surround by parens</p></li><li><p><code class="inline">:format</code> - set to <code class="inline">:keyword</code> when an atom is defined as a keyword.
It may also be set to <code class="inline">:atom</code> to distinguish <code class="inline">nil</code>, <code class="inline">false</code>, and <code class="inline">true</code></p></li><li><p><code class="inline">:indentation</code> - indentation of a sigil heredoc</p></li><li><p><code class="inline">:parens</code> - denotes a node was surrounded by parens for grouping.
This entry may appear multiple times in the same metadata if
multiple pairs are used for grouping</p></li></ul><p>The following metadata keys are private:</p><ul><li><code class="inline">:alias</code> - Used for alias hygiene.</li><li><code class="inline">:ambiguous_op</code> - Used for improved error messages in the compiler.</li><li><code class="inline">:imports</code> - Used for import hygiene.</li><li><code class="inline">:var</code> - Used for improved error messages on undefined variables.</li></ul><p>Do not rely on them as they may change or be fully removed in future versions
of the language. They are often used by <a href="Kernel.SpecialForms.xhtml#quote/2"><code class="inline">quote/2</code></a> and the compiler to provide
features like hygiene, better error messages, and so forth.</p><p>If you introduce custom keys into the AST metadata, please make sure to prefix
them with the name of your library or application, so that they will not conflict
with keys that could potentially be introduced by the compiler in the future.</p>
  </section>
</section>
<section class="detail" id="t:output/0">

  <div class="detail-header">
    <a href="#t:output/0" class="detail-link" data-no-tooltip="" aria-label="Link to this type">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">output()</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/macro.ex#L83" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@type</span> output() ::
  output_expr()
  | {<a href="#t:output/0">output</a>(), <a href="#t:output/0">output</a>()}
  | [<a href="#t:output/0">output</a>()]
  | <a href="typespecs.xhtml#basic-types">atom</a>()
  | <a href="typespecs.xhtml#built-in-types">number</a>()
  | <a href="typespecs.xhtml#built-in-types">binary</a>()
  | <a href="#t:captured_remote_function/0">captured_remote_function</a>()
  | <a href="typespecs.xhtml#basic-types">pid</a>()</pre>

      </div>

<p>The output of a macro</p>
  </section>
</section>
<section class="detail" id="t:t/0">

  <div class="detail-header">
    <a href="#t:t/0" class="detail-link" data-no-tooltip="" aria-label="Link to this type">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">t()</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/macro.ex#L69" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@type</span> t() :: <a href="#t:input/0">input</a>()</pre>

      </div>

<p>Abstract Syntax Tree (AST)</p>
  </section>
</section>

        </div>
      </section>

      <section id="functions" class="details-list">
        <h1 class="section-heading">Functions</h1>

        <div class="functions-list">
<section class="detail" id="camelize/1">

  <div class="detail-header">
    <a href="#camelize/1" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">camelize(string)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/macro.ex#L2258" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> camelize(<a href="String.xhtml#t:t/0">String.t</a>()) :: <a href="String.xhtml#t:t/0">String.t</a>()</pre>

      </div>

<p>Converts the given string to CamelCase format.</p><p>This function was designed to camelize language identifiers/tokens,
that's why it belongs to the <a href="Macro.xhtml"><code class="inline">Macro</code></a> module. Do not use it as a general
mechanism for camelizing strings as it does not support Unicode or
characters that are not valid in Elixir identifiers.</p><h2 id="camelize/1-examples" class="section-heading"><a href="#camelize/1-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Macro</samp><samp class="o">.</samp><samp class="n">camelize</samp><samp class="p" data-group-id="0220163922-1">(</samp><samp class="s">&quot;foo_bar&quot;</samp><samp class="p" data-group-id="0220163922-1">)</samp><samp class="w">
</samp><samp class="s">&quot;FooBar&quot;</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Macro</samp><samp class="o">.</samp><samp class="n">camelize</samp><samp class="p" data-group-id="0220163922-2">(</samp><samp class="s">&quot;foo/bar&quot;</samp><samp class="p" data-group-id="0220163922-2">)</samp><samp class="w">
</samp><samp class="s">&quot;Foo.Bar&quot;</samp></code></pre><p>If uppercase characters are present, they are not modified in any way
as a mechanism to preserve acronyms:</p><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Macro</samp><samp class="o">.</samp><samp class="n">camelize</samp><samp class="p" data-group-id="7610242491-1">(</samp><samp class="s">&quot;API.V1&quot;</samp><samp class="p" data-group-id="7610242491-1">)</samp><samp class="w">
</samp><samp class="s">&quot;API.V1&quot;</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Macro</samp><samp class="o">.</samp><samp class="n">camelize</samp><samp class="p" data-group-id="7610242491-2">(</samp><samp class="s">&quot;API_SPEC&quot;</samp><samp class="p" data-group-id="7610242491-2">)</samp><samp class="w">
</samp><samp class="s">&quot;API_SPEC&quot;</samp></code></pre>
  </section>
</section>
<section class="detail" id="classify_atom/1">

  <div class="detail-header">
    <a href="#classify_atom/1" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">classify_atom(atom)</h1>

        <span class="note">(since 1.14.0)</span>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/macro.ex#L2320" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> classify_atom(<a href="typespecs.xhtml#basic-types">atom</a>()) :: :alias | :identifier | :quoted | :unquoted</pre>

      </div>

<p>Classifies an <code class="inline">atom</code> based on its possible AST placement.</p><p>It returns one of the following atoms:</p><ul><li><p><code class="inline">:alias</code> - the atom represents an alias</p></li><li><p><code class="inline">:identifier</code> - the atom can be used as a variable or local function
call (as well as be an unquoted atom)</p></li><li><p><code class="inline">:unquoted</code> - the atom can be used in its unquoted form,
includes operators and atoms with <code class="inline">@</code> in them</p></li><li><p><code class="inline">:quoted</code> - all other atoms which can only be used in their quoted form</p></li></ul><p>Most operators are going to be <code class="inline">:unquoted</code>, such as <code class="inline">:+</code>, with
some exceptions returning <code class="inline">:quoted</code> due to ambiguity, such as
<code class="inline">:&quot;::&quot;</code>. Use <a href="#operator?/2"><code class="inline">operator?/2</code></a> to check if a given atom is an operator.</p><h2 id="classify_atom/1-examples" class="section-heading"><a href="#classify_atom/1-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Macro</samp><samp class="o">.</samp><samp class="n">classify_atom</samp><samp class="p" data-group-id="2650351147-1">(</samp><samp class="ss">:foo</samp><samp class="p" data-group-id="2650351147-1">)</samp><samp class="w">
</samp><samp class="ss">:identifier</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Macro</samp><samp class="o">.</samp><samp class="n">classify_atom</samp><samp class="p" data-group-id="2650351147-2">(</samp><samp class="nc">Foo</samp><samp class="p" data-group-id="2650351147-2">)</samp><samp class="w">
</samp><samp class="ss">:alias</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Macro</samp><samp class="o">.</samp><samp class="n">classify_atom</samp><samp class="p" data-group-id="2650351147-3">(</samp><samp class="ss">:foo@bar</samp><samp class="p" data-group-id="2650351147-3">)</samp><samp class="w">
</samp><samp class="ss">:unquoted</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Macro</samp><samp class="o">.</samp><samp class="n">classify_atom</samp><samp class="p" data-group-id="2650351147-4">(</samp><samp class="ss">:+</samp><samp class="p" data-group-id="2650351147-4">)</samp><samp class="w">
</samp><samp class="ss">:unquoted</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Macro</samp><samp class="o">.</samp><samp class="n">classify_atom</samp><samp class="p" data-group-id="2650351147-5">(</samp><samp class="ss">:Foo</samp><samp class="p" data-group-id="2650351147-5">)</samp><samp class="w">
</samp><samp class="ss">:unquoted</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Macro</samp><samp class="o">.</samp><samp class="n">classify_atom</samp><samp class="p" data-group-id="2650351147-6">(</samp><samp class="ss">:&quot;with spaces&quot;</samp><samp class="p" data-group-id="2650351147-6">)</samp><samp class="w">
</samp><samp class="ss">:quoted</samp></code></pre>
  </section>
</section>
<section class="detail" id="compile_apply/4">

  <div class="detail-header">
    <a href="#compile_apply/4" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">compile_apply(mod, fun, args, caller)</h1>

        <span class="note">(since 1.16.0)</span>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/macro.ex#L1737" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

<p>Applies a <code class="inline">mod</code>, <code class="inline">function</code>, and <code class="inline">args</code> at compile-time in <code class="inline">caller</code>.</p><p>This is used when you want to programmatically invoke a macro at
compile-time.</p>
  </section>
</section>
<section class="detail" id="dbg/3">

  <div class="detail-header">
    <a href="#dbg/3" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">dbg(code, options, env)</h1>

        <span class="note">(since 1.14.0)</span>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/macro.ex#L2570" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> dbg(<a href="#t:t/0">t</a>(), <a href="#t:t/0">t</a>(), <a href="Macro.Env.xhtml#t:t/0">Macro.Env.t</a>()) :: <a href="#t:t/0">t</a>()</pre>

      </div>

<p>Default backend for <a href="Kernel.xhtml#dbg/2"><code class="inline">Kernel.dbg/2</code></a>.</p><p>This function provides a default backend for <a href="Kernel.xhtml#dbg/2"><code class="inline">Kernel.dbg/2</code></a>. See the
<a href="Kernel.xhtml#dbg/2"><code class="inline">Kernel.dbg/2</code></a> documentation for more information.</p><p>This function:</p><ul><li>prints information about the given <code class="inline">env</code></li><li>prints information about <code class="inline">code</code> and its returned value (using <code class="inline">opts</code> to inspect terms)</li><li>returns the value returned by evaluating <code class="inline">code</code></li></ul><p>You can call this function directly to build <a href="Kernel.xhtml#dbg/2"><code class="inline">Kernel.dbg/2</code></a> backends that fall back
to this function.</p><p>This function raises if the context of the given <code class="inline">env</code> is <code class="inline">:match</code> or <code class="inline">:guard</code>.</p>
  </section>
</section>
<section class="detail" id="decompose_call/1">

  <div class="detail-header">
    <a href="#decompose_call/1" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">decompose_call(ast)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/macro.ex#L755" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> decompose_call(<a href="#t:t/0">t</a>()) :: {<a href="typespecs.xhtml#basic-types">atom</a>(), [<a href="#t:t/0">t</a>()]} | {<a href="#t:t/0">t</a>(), <a href="typespecs.xhtml#basic-types">atom</a>(), [<a href="#t:t/0">t</a>()]} | :error</pre>

      </div>

<p>Decomposes a local or remote call into its remote part (when provided),
function name and argument list.</p><p>Returns <code class="inline">:error</code> when an invalid call syntax is provided.</p><h2 id="decompose_call/1-examples" class="section-heading"><a href="#decompose_call/1-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Macro</samp><samp class="o">.</samp><samp class="n">decompose_call</samp><samp class="p" data-group-id="6526441678-1">(</samp><samp class="k">quote</samp><samp class="p" data-group-id="6526441678-2">(</samp><samp class="ss">do</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="n">foo</samp><samp class="p" data-group-id="6526441678-2">)</samp><samp class="p" data-group-id="6526441678-1">)</samp><samp class="w">
</samp><samp class="p" data-group-id="6526441678-3">{</samp><samp class="ss">:foo</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="6526441678-4">[</samp><samp class="p" data-group-id="6526441678-4">]</samp><samp class="p" data-group-id="6526441678-3">}</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Macro</samp><samp class="o">.</samp><samp class="n">decompose_call</samp><samp class="p" data-group-id="6526441678-5">(</samp><samp class="k">quote</samp><samp class="p" data-group-id="6526441678-6">(</samp><samp class="ss">do</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="n">foo</samp><samp class="p" data-group-id="6526441678-7">(</samp><samp class="p" data-group-id="6526441678-7">)</samp><samp class="p" data-group-id="6526441678-6">)</samp><samp class="p" data-group-id="6526441678-5">)</samp><samp class="w">
</samp><samp class="p" data-group-id="6526441678-8">{</samp><samp class="ss">:foo</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="6526441678-9">[</samp><samp class="p" data-group-id="6526441678-9">]</samp><samp class="p" data-group-id="6526441678-8">}</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Macro</samp><samp class="o">.</samp><samp class="n">decompose_call</samp><samp class="p" data-group-id="6526441678-10">(</samp><samp class="k">quote</samp><samp class="p" data-group-id="6526441678-11">(</samp><samp class="ss">do</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="n">foo</samp><samp class="p" data-group-id="6526441678-12">(</samp><samp class="mi">1</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">2</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">3</samp><samp class="p" data-group-id="6526441678-12">)</samp><samp class="p" data-group-id="6526441678-11">)</samp><samp class="p" data-group-id="6526441678-10">)</samp><samp class="w">
</samp><samp class="p" data-group-id="6526441678-13">{</samp><samp class="ss">:foo</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="6526441678-14">[</samp><samp class="mi">1</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">2</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">3</samp><samp class="p" data-group-id="6526441678-14">]</samp><samp class="p" data-group-id="6526441678-13">}</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Macro</samp><samp class="o">.</samp><samp class="n">decompose_call</samp><samp class="p" data-group-id="6526441678-15">(</samp><samp class="k">quote</samp><samp class="p" data-group-id="6526441678-16">(</samp><samp class="ss">do</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="nc">Elixir.M</samp><samp class="o">.</samp><samp class="n">foo</samp><samp class="p" data-group-id="6526441678-17">(</samp><samp class="mi">1</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">2</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">3</samp><samp class="p" data-group-id="6526441678-17">)</samp><samp class="p" data-group-id="6526441678-16">)</samp><samp class="p" data-group-id="6526441678-15">)</samp><samp class="w">
</samp><samp class="p" data-group-id="6526441678-18">{</samp><samp class="p" data-group-id="6526441678-19">{</samp><samp class="ss">:__aliases__</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="6526441678-20">[</samp><samp class="p" data-group-id="6526441678-20">]</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="6526441678-21">[</samp><samp class="ss">:Elixir</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:M</samp><samp class="p" data-group-id="6526441678-21">]</samp><samp class="p" data-group-id="6526441678-19">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:foo</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="6526441678-22">[</samp><samp class="mi">1</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">2</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">3</samp><samp class="p" data-group-id="6526441678-22">]</samp><samp class="p" data-group-id="6526441678-18">}</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Macro</samp><samp class="o">.</samp><samp class="n">decompose_call</samp><samp class="p" data-group-id="6526441678-23">(</samp><samp class="k">quote</samp><samp class="p" data-group-id="6526441678-24">(</samp><samp class="ss">do</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">42</samp><samp class="p" data-group-id="6526441678-24">)</samp><samp class="p" data-group-id="6526441678-23">)</samp><samp class="w">
</samp><samp class="ss">:error</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Macro</samp><samp class="o">.</samp><samp class="n">decompose_call</samp><samp class="p" data-group-id="6526441678-25">(</samp><samp class="k">quote</samp><samp class="p" data-group-id="6526441678-26">(</samp><samp class="ss">do</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="6526441678-27">{</samp><samp class="ss">:foo</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="6526441678-28">[</samp><samp class="p" data-group-id="6526441678-28">]</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="6526441678-29">[</samp><samp class="p" data-group-id="6526441678-29">]</samp><samp class="p" data-group-id="6526441678-27">}</samp><samp class="p" data-group-id="6526441678-26">)</samp><samp class="p" data-group-id="6526441678-25">)</samp><samp class="w">
</samp><samp class="ss">:error</samp></code></pre>
  </section>
</section>
<section class="detail" id="escape/2">

    <span id="escape/1"></span>

  <div class="detail-header">
    <a href="#escape/2" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">escape(expr, opts \\ [])</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/macro.ex#L831" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> escape(
  <a href="typespecs.xhtml#built-in-types">term</a>(),
  <a href="typespecs.xhtml#built-in-types">keyword</a>()
) :: <a href="#t:t/0">t</a>()</pre>

      </div>

<p>Recursively escapes a value so it can be inserted into a syntax tree.</p><h2 id="escape/2-examples" class="section-heading"><a href="#escape/2-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Macro</samp><samp class="o">.</samp><samp class="n">escape</samp><samp class="p" data-group-id="2832537784-1">(</samp><samp class="ss">:foo</samp><samp class="p" data-group-id="2832537784-1">)</samp><samp class="w">
</samp><samp class="ss">:foo</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Macro</samp><samp class="o">.</samp><samp class="n">escape</samp><samp class="p" data-group-id="2832537784-2">(</samp><samp class="p" data-group-id="2832537784-3">{</samp><samp class="ss">:a</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:b</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:c</samp><samp class="p" data-group-id="2832537784-3">}</samp><samp class="p" data-group-id="2832537784-2">)</samp><samp class="w">
</samp><samp class="p" data-group-id="2832537784-4">{</samp><samp class="ss">:{}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="2832537784-5">[</samp><samp class="p" data-group-id="2832537784-5">]</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="2832537784-6">[</samp><samp class="ss">:a</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:b</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:c</samp><samp class="p" data-group-id="2832537784-6">]</samp><samp class="p" data-group-id="2832537784-4">}</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Macro</samp><samp class="o">.</samp><samp class="n">escape</samp><samp class="p" data-group-id="2832537784-7">(</samp><samp class="p" data-group-id="2832537784-8">{</samp><samp class="ss">:unquote</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="2832537784-9">[</samp><samp class="p" data-group-id="2832537784-9">]</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="2832537784-10">[</samp><samp class="mi">1</samp><samp class="p" data-group-id="2832537784-10">]</samp><samp class="p" data-group-id="2832537784-8">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">unquote</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">true</samp><samp class="p" data-group-id="2832537784-7">)</samp><samp class="w">
</samp><samp class="mi">1</samp></code></pre><h2 id="escape/2-options" class="section-heading"><a href="#escape/2-options" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Options</span></h2><ul><li><p><code class="inline">:unquote</code> - when <code class="inline">true</code>, this function leaves <a href="Kernel.SpecialForms.xhtml#unquote/1"><code class="inline">unquote/1</code></a> and
<a href="Kernel.SpecialForms.xhtml#unquote_splicing/1"><code class="inline">unquote_splicing/1</code></a> expressions unescaped, effectively unquoting
the contents on escape. This option is useful only when escaping
ASTs which may have quoted fragments in them. Defaults to <code class="inline">false</code>.</p></li><li><p><code class="inline">:prune_metadata</code> - when <code class="inline">true</code>, removes most metadata from escaped AST
nodes. Note this option changes the semantics of escaped code and
it should only be used when escaping ASTs. Defaults to <code class="inline">false</code>.</p><p>As an example for <code class="inline">:prune_metadata</code>, <a href="https://hexdocs.pm/ex_unit/ExUnit.html"><code class="inline">ExUnit</code></a> stores the AST of every
assertion, so when an assertion fails we can show code snippets to users.
Without this option, each time the test module is compiled, we would get a
different MD5 of the module bytecode, because the AST contains metadata,
such as counters, specific to the compilation environment. By pruning
the metadata, we ensure that the module is deterministic and reduce
the amount of data <a href="https://hexdocs.pm/ex_unit/ExUnit.html"><code class="inline">ExUnit</code></a> needs to keep around. Only the minimal
amount of metadata is kept, such as <code class="inline">:line</code>, <code class="inline">:no_parens</code> and <code class="inline">:delimiter</code>.</p></li></ul><h2 id="escape/2-comparison-to-quote-2" class="section-heading"><a href="#escape/2-comparison-to-quote-2" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Comparison to <a href="Kernel.SpecialForms.xhtml#quote/2"><code class="inline">quote/2</code></a></span></h2><p>The <a href="#escape/2"><code class="inline">escape/2</code></a> function is sometimes confused with <a href="Kernel.SpecialForms.xhtml#quote/2"><code class="inline">quote/2</code></a>,
because the above examples behave the same with both. The key difference is
best illustrated when the value to escape is stored in a variable.</p><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Macro</samp><samp class="o">.</samp><samp class="n">escape</samp><samp class="p" data-group-id="8737608092-1">(</samp><samp class="p" data-group-id="8737608092-2">{</samp><samp class="ss">:a</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:b</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:c</samp><samp class="p" data-group-id="8737608092-2">}</samp><samp class="p" data-group-id="8737608092-1">)</samp><samp class="w">
</samp><samp class="p" data-group-id="8737608092-3">{</samp><samp class="ss">:{}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="8737608092-4">[</samp><samp class="p" data-group-id="8737608092-4">]</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="8737608092-5">[</samp><samp class="ss">:a</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:b</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:c</samp><samp class="p" data-group-id="8737608092-5">]</samp><samp class="p" data-group-id="8737608092-3">}</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="k">quote</samp><samp class="w"> </samp><samp class="ss">do</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="8737608092-6">{</samp><samp class="ss">:a</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:b</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:c</samp><samp class="p" data-group-id="8737608092-6">}</samp><samp class="w">
</samp><samp class="p" data-group-id="8737608092-7">{</samp><samp class="ss">:{}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="8737608092-8">[</samp><samp class="p" data-group-id="8737608092-8">]</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="8737608092-9">[</samp><samp class="ss">:a</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:b</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:c</samp><samp class="p" data-group-id="8737608092-9">]</samp><samp class="p" data-group-id="8737608092-7">}</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="n">value</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="p" data-group-id="8737608092-10">{</samp><samp class="ss">:a</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:b</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:c</samp><samp class="p" data-group-id="8737608092-10">}</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Macro</samp><samp class="o">.</samp><samp class="n">escape</samp><samp class="p" data-group-id="8737608092-11">(</samp><samp class="n">value</samp><samp class="p" data-group-id="8737608092-11">)</samp><samp class="w">
</samp><samp class="p" data-group-id="8737608092-12">{</samp><samp class="ss">:{}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="8737608092-13">[</samp><samp class="p" data-group-id="8737608092-13">]</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="8737608092-14">[</samp><samp class="ss">:a</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:b</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:c</samp><samp class="p" data-group-id="8737608092-14">]</samp><samp class="p" data-group-id="8737608092-12">}</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="k">quote</samp><samp class="w"> </samp><samp class="ss">do</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="n">value</samp><samp class="w">
</samp><samp class="p" data-group-id="8737608092-15">{</samp><samp class="ss">:value</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="8737608092-16">[</samp><samp class="p" data-group-id="8737608092-16">]</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="bp">__MODULE__</samp><samp class="p" data-group-id="8737608092-15">}</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="n">value</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="p" data-group-id="8737608092-17">{</samp><samp class="ss">:a</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:b</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:c</samp><samp class="p" data-group-id="8737608092-17">}</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="k">quote</samp><samp class="w"> </samp><samp class="ss">do</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="k">unquote</samp><samp class="p" data-group-id="8737608092-18">(</samp><samp class="n">value</samp><samp class="p" data-group-id="8737608092-18">)</samp><samp class="w">
</samp><samp class="gt">** (ArgumentError) tried to unquote invalid AST: {:a, :b, :c}</samp><samp class="w">
</samp><samp class="nc">Did</samp><samp class="w"> </samp><samp class="n">you</samp><samp class="w"> </samp><samp class="n">forget</samp><samp class="w"> </samp><samp class="n">to</samp><samp class="w"> </samp><samp class="n">escape</samp><samp class="w"> </samp><samp class="n">term</samp><samp class="w"> </samp><samp class="n">using</samp><samp class="w"> </samp><samp class="nc">Macro</samp><samp class="o">.</samp><samp class="n">escape</samp><samp class="o">/</samp><samp class="mi">1</samp><samp class="err">?</samp></code></pre><p><a href="#escape/2"><code class="inline">escape/2</code></a> is used to escape <em>values</em> (either directly passed or variable
bound), while <a href="Kernel.SpecialForms.xhtml#quote/2"><code class="inline">quote/2</code></a> produces syntax trees for
expressions.</p>
  </section>
</section>
<section class="detail" id="expand/2">

  <div class="detail-header">
    <a href="#expand/2" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">expand(ast, env)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/macro.ex#L2143" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> expand(<a href="#t:input/0">input</a>(), <a href="Macro.Env.xhtml#t:t/0">Macro.Env.t</a>()) :: <a href="#t:output/0">output</a>()</pre>

      </div>

<p>Receives an AST node and expands it until it can no longer
be expanded.</p><p>Note this function does not traverse the AST, only the root
node is expanded.</p><p>This function uses <a href="#expand_once/2"><code class="inline">expand_once/2</code></a> under the hood. Check
it out for more information and examples.</p>
  </section>
</section>
<section class="detail" id="expand_literals/2">

  <div class="detail-header">
    <a href="#expand_literals/2" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">expand_literals(ast, env)</h1>

        <span class="note">(since 1.14.1)</span>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/macro.ex#L2063" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> expand_literals(<a href="#t:input/0">input</a>(), <a href="Macro.Env.xhtml#t:t/0">Macro.Env.t</a>()) :: <a href="#t:output/0">output</a>()</pre>

      </div>

<p>Expands all literals in <code class="inline">ast</code> with the given <code class="inline">env</code>.</p><p>This function is mostly used to remove compile-time dependencies
from AST nodes. In such cases, the given environment is usually
manipulated to represent a function:</p><pre><code class="makeup elixir" translate="no"><samp class="nc">Macro</samp><samp class="o">.</samp><samp class="n">expand_literals</samp><samp class="p" data-group-id="6845246948-1">(</samp><samp class="n">ast</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="6845246948-2">%{</samp><samp class="n">env</samp><samp class="w"> </samp><samp class="o">|</samp><samp class="w"> </samp><samp class="ss">function</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="6845246948-3">{</samp><samp class="ss">:my_code</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">1</samp><samp class="p" data-group-id="6845246948-3">}</samp><samp class="p" data-group-id="6845246948-2">}</samp><samp class="p" data-group-id="6845246948-1">)</samp></code></pre><p>At the moment, the only expandable literal nodes in an AST are
aliases, so this function only expands aliases (and it does so
anywhere in a literal).</p><p>However, be careful when removing compile-time dependencies between
modules. If you remove them but you still invoke the module at
compile-time, Elixir will be unable to properly recompile modules
when they change.</p>
  </section>
</section>
<section class="detail" id="expand_literals/3">

  <div class="detail-header">
    <a href="#expand_literals/3" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">expand_literals(ast, acc, fun)</h1>

        <span class="note">(since 1.14.1)</span>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/macro.ex#L2078" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> expand_literals(<a href="#t:t/0">t</a>(), acc, (<a href="#t:t/0">t</a>(), acc -&gt; {<a href="#t:t/0">t</a>(), acc})) :: <a href="#t:t/0">t</a>() when acc: <a href="typespecs.xhtml#built-in-types">term</a>()</pre>

      </div>

<p>Expands all literals in <code class="inline">ast</code> with the given <code class="inline">acc</code> and <code class="inline">fun</code>.</p><p><code class="inline">fun</code> will be invoked with an expandable AST node and <code class="inline">acc</code> and
must return a new node with <code class="inline">acc</code>. This is a general version of
<a href="#expand_literals/2"><code class="inline">expand_literals/2</code></a> which supports a custom expansion function.
Please check <a href="#expand_literals/2"><code class="inline">expand_literals/2</code></a> for use cases and pitfalls.</p>
  </section>
</section>
<section class="detail" id="expand_once/2">

  <div class="detail-header">
    <a href="#expand_once/2" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">expand_once(ast, env)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/macro.ex#L1823" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> expand_once(<a href="#t:input/0">input</a>(), <a href="Macro.Env.xhtml#t:t/0">Macro.Env.t</a>()) :: <a href="#t:output/0">output</a>()</pre>

      </div>

<p>Receives an AST node and expands it once.</p><p>The following contents are expanded:</p><ul><li>Macros (local or remote)</li><li>Aliases are expanded (if possible) and return atoms</li><li>Compilation environment macros (<a href="Kernel.SpecialForms.xhtml#__CALLER__/0"><code class="inline">__CALLER__/0</code></a>, <a href="Kernel.SpecialForms.xhtml#__DIR__/0"><code class="inline">__DIR__/0</code></a>, <a href="Kernel.SpecialForms.xhtml#__ENV__/0"><code class="inline">__ENV__/0</code></a> and <a href="Kernel.SpecialForms.xhtml#__MODULE__/0"><code class="inline">__MODULE__/0</code></a>)</li><li>Module attributes reader (<code class="inline">@foo</code>)</li></ul><p>If the expression cannot be expanded, it returns the expression
itself. This function does not traverse the AST, only the root
node is expanded. The expansion happens as if it was expanded by
the Elixir compiler and therefore compilation tracers will be invoked
and deprecation warnings will be emitted during the expansion.</p><p><a href="#expand_once/2"><code class="inline">expand_once/2</code></a> performs the expansion just once. Check <a href="#expand/2"><code class="inline">expand/2</code></a>
to perform expansion until the node can no longer be expanded.</p><h2 id="expand_once/2-examples" class="section-heading"><a href="#expand_once/2-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><p>In the example below, we have a macro that generates a module
with a function named <code class="inline">name_length</code> that returns the length
of the module name. The value of this function will be calculated
at compilation time and not at runtime.</p><p>Consider the implementation below:</p><pre><code class="makeup elixir" translate="no"><samp class="kd">defmacro</samp><samp class="w"> </samp><samp class="nf">defmodule_with_length</samp><samp class="p" data-group-id="1578181164-1">(</samp><samp class="n">name</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">do</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="n">block</samp><samp class="p" data-group-id="1578181164-1">)</samp><samp class="w"> </samp><samp class="k" data-group-id="1578181164-2">do</samp><samp class="w">
  </samp><samp class="n">length</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="n">length</samp><samp class="p" data-group-id="1578181164-3">(</samp><samp class="nc">Atom</samp><samp class="o">.</samp><samp class="n">to_charlist</samp><samp class="p" data-group-id="1578181164-4">(</samp><samp class="n">name</samp><samp class="p" data-group-id="1578181164-4">)</samp><samp class="p" data-group-id="1578181164-3">)</samp><samp class="w">

  </samp><samp class="k">quote</samp><samp class="w"> </samp><samp class="k" data-group-id="1578181164-5">do</samp><samp class="w">
    </samp><samp class="kd">defmodule</samp><samp class="w"> </samp><samp class="k">unquote</samp><samp class="p" data-group-id="1578181164-6">(</samp><samp class="n">name</samp><samp class="p" data-group-id="1578181164-6">)</samp><samp class="w"> </samp><samp class="k" data-group-id="1578181164-7">do</samp><samp class="w">
      </samp><samp class="kd">def</samp><samp class="w"> </samp><samp class="nf">name_length</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">do</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="k">unquote</samp><samp class="p" data-group-id="1578181164-8">(</samp><samp class="n">length</samp><samp class="p" data-group-id="1578181164-8">)</samp><samp class="w">
      </samp><samp class="k">unquote</samp><samp class="p" data-group-id="1578181164-9">(</samp><samp class="n">block</samp><samp class="p" data-group-id="1578181164-9">)</samp><samp class="w">
    </samp><samp class="k" data-group-id="1578181164-7">end</samp><samp class="w">
  </samp><samp class="k" data-group-id="1578181164-5">end</samp><samp class="w">
</samp><samp class="k" data-group-id="1578181164-2">end</samp></code></pre><p>When invoked like this:</p><pre><code class="makeup elixir" translate="no"><samp class="n">defmodule_with_length</samp><samp class="w"> </samp><samp class="nc">My.Module</samp><samp class="w"> </samp><samp class="k" data-group-id="2793114094-1">do</samp><samp class="w">
  </samp><samp class="kd">def</samp><samp class="w"> </samp><samp class="nf">other_function</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">do</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="n">...</samp><samp class="w">
</samp><samp class="k" data-group-id="2793114094-1">end</samp></code></pre><p>The compilation will fail because <code class="inline">My.Module</code> when quoted
is not an atom, but a syntax tree as follows:</p><pre><code class="makeup elixir" translate="no"><samp class="p" data-group-id="0563620494-1">{</samp><samp class="ss">:__aliases__</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="0563620494-2">[</samp><samp class="p" data-group-id="0563620494-2">]</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="0563620494-3">[</samp><samp class="ss">:My</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:Module</samp><samp class="p" data-group-id="0563620494-3">]</samp><samp class="p" data-group-id="0563620494-1">}</samp></code></pre><p>That said, we need to expand the aliases node above to an
atom, so we can retrieve its length. Expanding the node is
not straightforward because we also need to expand the
caller aliases. For example:</p><pre><code class="makeup elixir" translate="no"><samp class="kn">alias</samp><samp class="w"> </samp><samp class="nc">MyHelpers</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">as</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="nc">My</samp><samp class="w">

</samp><samp class="n">defmodule_with_length</samp><samp class="w"> </samp><samp class="nc">My.Module</samp><samp class="w"> </samp><samp class="k" data-group-id="1275757517-1">do</samp><samp class="w">
  </samp><samp class="kd">def</samp><samp class="w"> </samp><samp class="nf">other_function</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">do</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="n">...</samp><samp class="w">
</samp><samp class="k" data-group-id="1275757517-1">end</samp></code></pre><p>The final module name will be <code class="inline">MyHelpers.Module</code> and not
<code class="inline">My.Module</code>. With <a href="#expand/2"><code class="inline">Macro.expand/2</code></a>, such aliases are taken
into consideration. Local and remote macros are also
expanded. We could rewrite our macro above to use this
function as:</p><pre><code class="makeup elixir" translate="no"><samp class="kd">defmacro</samp><samp class="w"> </samp><samp class="nf">defmodule_with_length</samp><samp class="p" data-group-id="0515348615-1">(</samp><samp class="n">name</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">do</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="n">block</samp><samp class="p" data-group-id="0515348615-1">)</samp><samp class="w"> </samp><samp class="k" data-group-id="0515348615-2">do</samp><samp class="w">
  </samp><samp class="n">expanded</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="nc">Macro</samp><samp class="o">.</samp><samp class="n">expand</samp><samp class="p" data-group-id="0515348615-3">(</samp><samp class="n">name</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="bp">__CALLER__</samp><samp class="p" data-group-id="0515348615-3">)</samp><samp class="w">
  </samp><samp class="n">length</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="n">length</samp><samp class="p" data-group-id="0515348615-4">(</samp><samp class="nc">Atom</samp><samp class="o">.</samp><samp class="n">to_charlist</samp><samp class="p" data-group-id="0515348615-5">(</samp><samp class="n">expanded</samp><samp class="p" data-group-id="0515348615-5">)</samp><samp class="p" data-group-id="0515348615-4">)</samp><samp class="w">

  </samp><samp class="k">quote</samp><samp class="w"> </samp><samp class="k" data-group-id="0515348615-6">do</samp><samp class="w">
    </samp><samp class="kd">defmodule</samp><samp class="w"> </samp><samp class="k">unquote</samp><samp class="p" data-group-id="0515348615-7">(</samp><samp class="n">name</samp><samp class="p" data-group-id="0515348615-7">)</samp><samp class="w"> </samp><samp class="k" data-group-id="0515348615-8">do</samp><samp class="w">
      </samp><samp class="kd">def</samp><samp class="w"> </samp><samp class="nf">name_length</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">do</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="k">unquote</samp><samp class="p" data-group-id="0515348615-9">(</samp><samp class="n">length</samp><samp class="p" data-group-id="0515348615-9">)</samp><samp class="w">
      </samp><samp class="k">unquote</samp><samp class="p" data-group-id="0515348615-10">(</samp><samp class="n">block</samp><samp class="p" data-group-id="0515348615-10">)</samp><samp class="w">
    </samp><samp class="k" data-group-id="0515348615-8">end</samp><samp class="w">
  </samp><samp class="k" data-group-id="0515348615-6">end</samp><samp class="w">
</samp><samp class="k" data-group-id="0515348615-2">end</samp></code></pre>
  </section>
</section>
<section class="detail" id="generate_arguments/2">

  <div class="detail-header">
    <a href="#generate_arguments/2" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">generate_arguments(amount, context)</h1>

        <span class="note">(since 1.5.0)</span>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/macro.ex#L391" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> generate_arguments(0, context :: <a href="typespecs.xhtml#basic-types">atom</a>()) :: []</pre>

          <pre translate="no"><span class="attribute">@spec</span> generate_arguments(<a href="typespecs.xhtml#basic-types">pos_integer</a>(), context) :: [{<a href="typespecs.xhtml#basic-types">atom</a>(), [], context}, ...]
when context: <a href="typespecs.xhtml#basic-types">atom</a>()</pre>

      </div>

<p>Generates AST nodes for a given number of required argument
variables using <a href="#var/2"><code class="inline">Macro.var/2</code></a>.</p><p>Note the arguments are not unique. If you later on want
to access the same variables, you can invoke this function
with the same inputs. Use <a href="#generate_unique_arguments/2"><code class="inline">generate_unique_arguments/2</code></a> to
generate unique arguments that can't be overridden.</p><h2 id="generate_arguments/2-examples" class="section-heading"><a href="#generate_arguments/2-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Macro</samp><samp class="o">.</samp><samp class="n">generate_arguments</samp><samp class="p" data-group-id="9608005863-1">(</samp><samp class="mi">2</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="bp">__MODULE__</samp><samp class="p" data-group-id="9608005863-1">)</samp><samp class="w">
</samp><samp class="p" data-group-id="9608005863-2">[</samp><samp class="p" data-group-id="9608005863-3">{</samp><samp class="ss">:arg1</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="9608005863-4">[</samp><samp class="p" data-group-id="9608005863-4">]</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="bp">__MODULE__</samp><samp class="p" data-group-id="9608005863-3">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="9608005863-5">{</samp><samp class="ss">:arg2</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="9608005863-6">[</samp><samp class="p" data-group-id="9608005863-6">]</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="bp">__MODULE__</samp><samp class="p" data-group-id="9608005863-5">}</samp><samp class="p" data-group-id="9608005863-2">]</samp></code></pre>
  </section>
</section>
<section class="detail" id="generate_unique_arguments/2">

  <div class="detail-header">
    <a href="#generate_unique_arguments/2" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">generate_unique_arguments(amount, context)</h1>

        <span class="note">(since 1.11.3)</span>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/macro.ex#L507" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> generate_unique_arguments(0, context :: <a href="typespecs.xhtml#basic-types">atom</a>()) :: []</pre>

          <pre translate="no"><span class="attribute">@spec</span> generate_unique_arguments(<a href="typespecs.xhtml#basic-types">pos_integer</a>(), context) :: [
  {<a href="typespecs.xhtml#basic-types">atom</a>(), [{:counter, <a href="typespecs.xhtml#basic-types">integer</a>()}], context},
  ...
]
when context: <a href="typespecs.xhtml#basic-types">atom</a>()</pre>

      </div>

<p>Generates AST nodes for a given number of required argument
variables using <a href="#unique_var/2"><code class="inline">Macro.unique_var/2</code></a>.</p><h2 id="generate_unique_arguments/2-examples" class="section-heading"><a href="#generate_unique_arguments/2-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="p" data-group-id="8274362133-1">[</samp><samp class="n">var1</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">var2</samp><samp class="p" data-group-id="8274362133-1">]</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="nc">Macro</samp><samp class="o">.</samp><samp class="n">generate_unique_arguments</samp><samp class="p" data-group-id="8274362133-2">(</samp><samp class="mi">2</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="bp">__MODULE__</samp><samp class="p" data-group-id="8274362133-2">)</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="p" data-group-id="8274362133-3">{</samp><samp class="ss">:arg1</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="8274362133-4">[</samp><samp class="ss">counter</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="n">c1</samp><samp class="p" data-group-id="8274362133-4">]</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="bp">__MODULE__</samp><samp class="p" data-group-id="8274362133-3">}</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="n">var1</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="p" data-group-id="8274362133-5">{</samp><samp class="ss">:arg2</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="8274362133-6">[</samp><samp class="ss">counter</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="n">c2</samp><samp class="p" data-group-id="8274362133-6">]</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="bp">__MODULE__</samp><samp class="p" data-group-id="8274362133-5">}</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="n">var2</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="n">is_integer</samp><samp class="p" data-group-id="8274362133-7">(</samp><samp class="n">c1</samp><samp class="p" data-group-id="8274362133-7">)</samp><samp class="w"> </samp><samp class="ow">and</samp><samp class="w"> </samp><samp class="n">is_integer</samp><samp class="p" data-group-id="8274362133-8">(</samp><samp class="n">c2</samp><samp class="p" data-group-id="8274362133-8">)</samp><samp class="w">
</samp><samp class="no">true</samp></code></pre>
  </section>
</section>
<section class="detail" id="inspect_atom/3">

    <span id="inspect_atom/2"></span>

  <div class="detail-header">
    <a href="#inspect_atom/3" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">inspect_atom(source_format, atom, opts \\ [])</h1>

        <span class="note">(since 1.14.0)</span>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/macro.ex#L2395" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> inspect_atom(:literal | :key | :remote_call, <a href="typespecs.xhtml#basic-types">atom</a>(), <a href="typespecs.xhtml#built-in-types">keyword</a>()) :: <a href="typespecs.xhtml#built-in-types">binary</a>()</pre>

      </div>

<p>Inspects <code class="inline">atom</code> according to different source formats.</p><p>The atom can be inspected according to the three different
formats it appears in the AST: as a literal (<code class="inline">:literal</code>),
as a key (<code class="inline">:key</code>), or as the function name of a remote call
(<code class="inline">:remote_call</code>).</p><h2 id="inspect_atom/3-options" class="section-heading"><a href="#inspect_atom/3-options" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Options</span></h2><ul><li><code class="inline">:escape</code> - a two-arity function used to escape a quoted
atom content, if necessary. The function receives the atom
content as string and a quote delimiter character, which
should always be escaped. By default the content is escaped
such that the inspected sequence would be parsed as the
given atom.</li></ul><h2 id="inspect_atom/3-examples" class="section-heading"><a href="#inspect_atom/3-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><h3 id="inspect_atom/3-as-a-literal" class="section-heading"><a href="#inspect_atom/3-as-a-literal" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">As a literal</span></h3><p>Literals include regular atoms, quoted atoms, operators,
aliases, and the special <code class="inline">nil</code>, <code class="inline">true</code>, and <code class="inline">false</code> atoms.</p><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Macro</samp><samp class="o">.</samp><samp class="n">inspect_atom</samp><samp class="p" data-group-id="8706956428-1">(</samp><samp class="ss">:literal</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="no">nil</samp><samp class="p" data-group-id="8706956428-1">)</samp><samp class="w">
</samp><samp class="s">&quot;nil&quot;</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Macro</samp><samp class="o">.</samp><samp class="n">inspect_atom</samp><samp class="p" data-group-id="8706956428-2">(</samp><samp class="ss">:literal</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:foo</samp><samp class="p" data-group-id="8706956428-2">)</samp><samp class="w">
</samp><samp class="s">&quot;:foo&quot;</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Macro</samp><samp class="o">.</samp><samp class="n">inspect_atom</samp><samp class="p" data-group-id="8706956428-3">(</samp><samp class="ss">:literal</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:&lt;&gt;</samp><samp class="p" data-group-id="8706956428-3">)</samp><samp class="w">
</samp><samp class="s">&quot;:&lt;&gt;&quot;</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Macro</samp><samp class="o">.</samp><samp class="n">inspect_atom</samp><samp class="p" data-group-id="8706956428-4">(</samp><samp class="ss">:literal</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:Foo</samp><samp class="p" data-group-id="8706956428-4">)</samp><samp class="w">
</samp><samp class="s">&quot;:Foo&quot;</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Macro</samp><samp class="o">.</samp><samp class="n">inspect_atom</samp><samp class="p" data-group-id="8706956428-5">(</samp><samp class="ss">:literal</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="nc">Foo.Bar</samp><samp class="p" data-group-id="8706956428-5">)</samp><samp class="w">
</samp><samp class="s">&quot;Foo.Bar&quot;</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Macro</samp><samp class="o">.</samp><samp class="n">inspect_atom</samp><samp class="p" data-group-id="8706956428-6">(</samp><samp class="ss">:literal</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:&quot;with spaces&quot;</samp><samp class="p" data-group-id="8706956428-6">)</samp><samp class="w">
</samp><samp class="s">&quot;:</samp><samp class="se">\&quot;</samp><samp class="s">with spaces</samp><samp class="se">\&quot;</samp><samp class="s">&quot;</samp></code></pre><h3 id="inspect_atom/3-as-a-key" class="section-heading"><a href="#inspect_atom/3-as-a-key" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">As a key</span></h3><p>Inspect an atom as a key of a keyword list or a map.</p><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Macro</samp><samp class="o">.</samp><samp class="n">inspect_atom</samp><samp class="p" data-group-id="8376194096-1">(</samp><samp class="ss">:key</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:foo</samp><samp class="p" data-group-id="8376194096-1">)</samp><samp class="w">
</samp><samp class="s">&quot;foo:&quot;</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Macro</samp><samp class="o">.</samp><samp class="n">inspect_atom</samp><samp class="p" data-group-id="8376194096-2">(</samp><samp class="ss">:key</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:&lt;&gt;</samp><samp class="p" data-group-id="8376194096-2">)</samp><samp class="w">
</samp><samp class="s">&quot;&lt;&gt;:&quot;</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Macro</samp><samp class="o">.</samp><samp class="n">inspect_atom</samp><samp class="p" data-group-id="8376194096-3">(</samp><samp class="ss">:key</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:Foo</samp><samp class="p" data-group-id="8376194096-3">)</samp><samp class="w">
</samp><samp class="s">&quot;Foo:&quot;</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Macro</samp><samp class="o">.</samp><samp class="n">inspect_atom</samp><samp class="p" data-group-id="8376194096-4">(</samp><samp class="ss">:key</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:&quot;with spaces&quot;</samp><samp class="p" data-group-id="8376194096-4">)</samp><samp class="w">
</samp><samp class="s">&quot;</samp><samp class="se">\&quot;</samp><samp class="s">with spaces</samp><samp class="se">\&quot;</samp><samp class="s">:&quot;</samp></code></pre><h3 id="inspect_atom/3-as-a-remote-call" class="section-heading"><a href="#inspect_atom/3-as-a-remote-call" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">As a remote call</span></h3><p>Inspect an atom the function name of a remote call.</p><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Macro</samp><samp class="o">.</samp><samp class="n">inspect_atom</samp><samp class="p" data-group-id="2310130563-1">(</samp><samp class="ss">:remote_call</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:foo</samp><samp class="p" data-group-id="2310130563-1">)</samp><samp class="w">
</samp><samp class="s">&quot;foo&quot;</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Macro</samp><samp class="o">.</samp><samp class="n">inspect_atom</samp><samp class="p" data-group-id="2310130563-2">(</samp><samp class="ss">:remote_call</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:&lt;&gt;</samp><samp class="p" data-group-id="2310130563-2">)</samp><samp class="w">
</samp><samp class="s">&quot;&lt;&gt;&quot;</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Macro</samp><samp class="o">.</samp><samp class="n">inspect_atom</samp><samp class="p" data-group-id="2310130563-3">(</samp><samp class="ss">:remote_call</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:Foo</samp><samp class="p" data-group-id="2310130563-3">)</samp><samp class="w">
</samp><samp class="s">&quot;</samp><samp class="se">\&quot;</samp><samp class="s">Foo</samp><samp class="se">\&quot;</samp><samp class="s">&quot;</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Macro</samp><samp class="o">.</samp><samp class="n">inspect_atom</samp><samp class="p" data-group-id="2310130563-4">(</samp><samp class="ss">:remote_call</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:&quot;with spaces&quot;</samp><samp class="p" data-group-id="2310130563-4">)</samp><samp class="w">
</samp><samp class="s">&quot;</samp><samp class="se">\&quot;</samp><samp class="s">with spaces</samp><samp class="se">\&quot;</samp><samp class="s">&quot;</samp></code></pre>
  </section>
</section>
<section class="detail" id="operator?/2">

  <div class="detail-header">
    <a href="#operator?/2" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">operator?(name, arity)</h1>

        <span class="note">(since 1.7.0)</span>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/macro.ex#L1953" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> operator?(name :: <a href="typespecs.xhtml#basic-types">atom</a>(), <a href="typespecs.xhtml#built-in-types">arity</a>()) :: <a href="typespecs.xhtml#built-in-types">boolean</a>()</pre>

      </div>

<p>Returns <code class="inline">true</code> if the given name and arity is an operator.</p><h2 id="operator?/2-examples" class="section-heading"><a href="#operator?/2-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Macro</samp><samp class="o">.</samp><samp class="n">operator?</samp><samp class="p" data-group-id="8332745765-1">(</samp><samp class="ss">:not_an_operator</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">3</samp><samp class="p" data-group-id="8332745765-1">)</samp><samp class="w">
</samp><samp class="no">false</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Macro</samp><samp class="o">.</samp><samp class="n">operator?</samp><samp class="p" data-group-id="8332745765-2">(</samp><samp class="ss">:..</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">0</samp><samp class="p" data-group-id="8332745765-2">)</samp><samp class="w">
</samp><samp class="no">true</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Macro</samp><samp class="o">.</samp><samp class="n">operator?</samp><samp class="p" data-group-id="8332745765-3">(</samp><samp class="ss">:+</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">1</samp><samp class="p" data-group-id="8332745765-3">)</samp><samp class="w">
</samp><samp class="no">true</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Macro</samp><samp class="o">.</samp><samp class="n">operator?</samp><samp class="p" data-group-id="8332745765-4">(</samp><samp class="ss">:++</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">2</samp><samp class="p" data-group-id="8332745765-4">)</samp><samp class="w">
</samp><samp class="no">true</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Macro</samp><samp class="o">.</samp><samp class="n">operator?</samp><samp class="p" data-group-id="8332745765-5">(</samp><samp class="ss">:..//</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">3</samp><samp class="p" data-group-id="8332745765-5">)</samp><samp class="w">
</samp><samp class="no">true</samp></code></pre>
  </section>
</section>
<section class="detail" id="path/2">

  <div class="detail-header">
    <a href="#path/2" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">path(ast, fun)</h1>

        <span class="note">(since 1.14.0)</span>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/macro.ex#L428" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> path(<a href="#t:t/0">t</a>(), (<a href="#t:t/0">t</a>() -&gt; <a href="typespecs.xhtml#built-in-types">as_boolean</a>(<a href="typespecs.xhtml#built-in-types">term</a>()))) :: [<a href="#t:t/0">t</a>()] | nil</pre>

      </div>

<p>Returns the path to the node in <code class="inline">ast</code> for which <code class="inline">fun</code> returns a truthy value.</p><p>The path is a list, starting with the node in which <code class="inline">fun</code> returns
a truthy value, followed by all of its parents.</p><p>Returns <code class="inline">nil</code> if <code class="inline">fun</code> returns only falsy values.</p><p>Computing the path can be an efficient operation when you want
to find a particular node in the AST within its context and then
assert something about it.</p><h2 id="path/2-examples" class="section-heading"><a href="#path/2-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Macro</samp><samp class="o">.</samp><samp class="n">path</samp><samp class="p" data-group-id="2316297628-1">(</samp><samp class="k">quote</samp><samp class="p" data-group-id="2316297628-2">(</samp><samp class="ss">do</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="2316297628-3">[</samp><samp class="mi">1</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">2</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">3</samp><samp class="p" data-group-id="2316297628-3">]</samp><samp class="p" data-group-id="2316297628-2">)</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="o">&amp;</samp><samp class="w"> </samp><samp class="ni">&amp;1</samp><samp class="w"> </samp><samp class="o">==</samp><samp class="w"> </samp><samp class="mi">3</samp><samp class="p" data-group-id="2316297628-1">)</samp><samp class="w">
</samp><samp class="p" data-group-id="2316297628-4">[</samp><samp class="mi">3</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="2316297628-5">[</samp><samp class="mi">1</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">2</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">3</samp><samp class="p" data-group-id="2316297628-5">]</samp><samp class="p" data-group-id="2316297628-4">]</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Macro</samp><samp class="o">.</samp><samp class="n">path</samp><samp class="p" data-group-id="2316297628-6">(</samp><samp class="k">quote</samp><samp class="p" data-group-id="2316297628-7">(</samp><samp class="ss">do</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="2316297628-8">[</samp><samp class="mi">1</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">2</samp><samp class="p" data-group-id="2316297628-8">]</samp><samp class="p" data-group-id="2316297628-7">)</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="o">&amp;</samp><samp class="w"> </samp><samp class="ni">&amp;1</samp><samp class="w"> </samp><samp class="o">==</samp><samp class="w"> </samp><samp class="mi">5</samp><samp class="p" data-group-id="2316297628-6">)</samp><samp class="w">
</samp><samp class="no">nil</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Macro</samp><samp class="o">.</samp><samp class="n">path</samp><samp class="p" data-group-id="2316297628-9">(</samp><samp class="k">quote</samp><samp class="p" data-group-id="2316297628-10">(</samp><samp class="ss">do</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="nc">Foo</samp><samp class="o">.</samp><samp class="n">bar</samp><samp class="p" data-group-id="2316297628-11">(</samp><samp class="mi">3</samp><samp class="p" data-group-id="2316297628-11">)</samp><samp class="p" data-group-id="2316297628-10">)</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="o">&amp;</samp><samp class="w"> </samp><samp class="ni">&amp;1</samp><samp class="w"> </samp><samp class="o">==</samp><samp class="w"> </samp><samp class="mi">3</samp><samp class="p" data-group-id="2316297628-9">)</samp><samp class="w">
</samp><samp class="p" data-group-id="2316297628-12">[</samp><samp class="mi">3</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="k">quote</samp><samp class="p" data-group-id="2316297628-13">(</samp><samp class="ss">do</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="nc">Foo</samp><samp class="o">.</samp><samp class="n">bar</samp><samp class="p" data-group-id="2316297628-14">(</samp><samp class="mi">3</samp><samp class="p" data-group-id="2316297628-14">)</samp><samp class="p" data-group-id="2316297628-13">)</samp><samp class="p" data-group-id="2316297628-12">]</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Macro</samp><samp class="o">.</samp><samp class="n">path</samp><samp class="p" data-group-id="2316297628-15">(</samp><samp class="k">quote</samp><samp class="p" data-group-id="2316297628-16">(</samp><samp class="ss">do</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="2316297628-17">%{</samp><samp class="ss">foo</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="2316297628-18">[</samp><samp class="ss">bar</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="ss">:baz</samp><samp class="p" data-group-id="2316297628-18">]</samp><samp class="p" data-group-id="2316297628-17">}</samp><samp class="p" data-group-id="2316297628-16">)</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="o">&amp;</samp><samp class="w"> </samp><samp class="ni">&amp;1</samp><samp class="w"> </samp><samp class="o">==</samp><samp class="w"> </samp><samp class="ss">:baz</samp><samp class="p" data-group-id="2316297628-15">)</samp><samp class="w">
</samp><samp class="p" data-group-id="2316297628-19">[</samp><samp class="w">
  </samp><samp class="ss">:baz</samp><samp class="p">,</samp><samp class="w">
  </samp><samp class="p" data-group-id="2316297628-20">{</samp><samp class="ss">:bar</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:baz</samp><samp class="p" data-group-id="2316297628-20">}</samp><samp class="p">,</samp><samp class="w">
  </samp><samp class="p" data-group-id="2316297628-21">[</samp><samp class="ss">bar</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="ss">:baz</samp><samp class="p" data-group-id="2316297628-21">]</samp><samp class="p">,</samp><samp class="w">
  </samp><samp class="p" data-group-id="2316297628-22">{</samp><samp class="ss">:foo</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="2316297628-23">[</samp><samp class="ss">bar</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="ss">:baz</samp><samp class="p" data-group-id="2316297628-23">]</samp><samp class="p" data-group-id="2316297628-22">}</samp><samp class="p">,</samp><samp class="w">
  </samp><samp class="p" data-group-id="2316297628-24">{</samp><samp class="ss">:%{}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="2316297628-25">[</samp><samp class="p" data-group-id="2316297628-25">]</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="2316297628-26">[</samp><samp class="ss">foo</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="2316297628-27">[</samp><samp class="ss">bar</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="ss">:baz</samp><samp class="p" data-group-id="2316297628-27">]</samp><samp class="p" data-group-id="2316297628-26">]</samp><samp class="p" data-group-id="2316297628-24">}</samp><samp class="w">
</samp><samp class="p" data-group-id="2316297628-19">]</samp></code></pre>
  </section>
</section>
<section class="detail" id="pipe/3">

  <div class="detail-header">
    <a href="#pipe/3" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">pipe(expr, call_args, position)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/macro.ex#L253" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> pipe(<a href="#t:t/0">t</a>(), <a href="#t:t/0">t</a>(), <a href="typespecs.xhtml#basic-types">integer</a>()) :: <a href="#t:t/0">t</a>()</pre>

      </div>

<p>Pipes <code class="inline">expr</code> into the <code class="inline">call_args</code> at the given <code class="inline">position</code>.</p><p>This function can be used to implement <code class="inline">|&gt;</code> like functionality. For example,
<code class="inline">|&gt;</code> itself is implemented as:</p><pre><code class="makeup elixir" translate="no"><samp class="kd">defmacro</samp><samp class="w"> </samp><samp class="n">left</samp><samp class="w"> </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="n">right</samp><samp class="w"> </samp><samp class="k" data-group-id="7996950373-1">do</samp><samp class="w">
  </samp><samp class="nc">Macro</samp><samp class="o">.</samp><samp class="n">pipe</samp><samp class="p" data-group-id="7996950373-2">(</samp><samp class="n">left</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">right</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">0</samp><samp class="p" data-group-id="7996950373-2">)</samp><samp class="w">
</samp><samp class="k" data-group-id="7996950373-1">end</samp></code></pre><p><code class="inline">expr</code> is the AST of an expression. <code class="inline">call_args</code> must be the AST <em>of a call</em>,
otherwise this function will raise an error. As an example, consider the pipe
operator <a href="Kernel.xhtml#%7C%3E/2"><code class="inline">|&gt;/2</code></a>, which uses this function to build pipelines.</p><p>Even if the expression is piped into the AST, it doesn't necessarily mean that
the AST is valid. For example, you could pipe an argument to <a href="Kernel.xhtml#div/2"><code class="inline">div/2</code></a>, effectively
turning it into a call to <code class="inline">div/3</code>, which is a function that doesn't exist by
default. The code will raise unless a <code class="inline">div/3</code> function is locally defined.</p>
  </section>
</section>
<section class="detail" id="postwalk/2">

  <div class="detail-header">
    <a href="#postwalk/2" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">postwalk(ast, fun)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/macro.ex#L714" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> postwalk(<a href="#t:t/0">t</a>(), (<a href="#t:t/0">t</a>() -&gt; <a href="#t:t/0">t</a>())) :: <a href="#t:t/0">t</a>()</pre>

      </div>

<p>This function behaves like <a href="#prewalk/2"><code class="inline">prewalk/2</code></a>, but performs a depth-first,
post-order traversal of quoted expressions.</p>
  </section>
</section>
<section class="detail" id="postwalk/3">

  <div class="detail-header">
    <a href="#postwalk/3" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">postwalk(ast, acc, fun)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/macro.ex#L723" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> postwalk(<a href="#t:t/0">t</a>(), <a href="typespecs.xhtml#basic-types">any</a>(), (<a href="#t:t/0">t</a>(), <a href="typespecs.xhtml#basic-types">any</a>() -&gt; {<a href="#t:t/0">t</a>(), <a href="typespecs.xhtml#basic-types">any</a>()})) :: {<a href="#t:t/0">t</a>(), <a href="typespecs.xhtml#basic-types">any</a>()}</pre>

      </div>

<p>This functions behaves like <a href="#prewalk/3"><code class="inline">prewalk/3</code></a>, but performs a depth-first,
post-order traversal of quoted expressions using an accumulator.</p>
  </section>
</section>
<section class="detail" id="postwalker/1">

  <div class="detail-header">
    <a href="#postwalker/1" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">postwalker(ast)</h1>

        <span class="note">(since 1.13.0)</span>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/macro.ex#L990" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> postwalker(<a href="#t:t/0">t</a>()) :: <a href="Enumerable.xhtml#t:t/0">Enumerable.t</a>()</pre>

      </div>

<p>Returns an enumerable that traverses the  <code class="inline">ast</code> in depth-first,
post-order traversal.</p><h2 id="postwalker/1-examples" class="section-heading"><a href="#postwalker/1-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="n">ast</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="k">quote</samp><samp class="w"> </samp><samp class="ss">do</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="n">foo</samp><samp class="p" data-group-id="6188852088-1">(</samp><samp class="mi">1</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;abc&quot;</samp><samp class="p" data-group-id="6188852088-1">)</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Enum</samp><samp class="o">.</samp><samp class="n">map</samp><samp class="p" data-group-id="6188852088-2">(</samp><samp class="nc">Macro</samp><samp class="o">.</samp><samp class="n">postwalker</samp><samp class="p" data-group-id="6188852088-3">(</samp><samp class="n">ast</samp><samp class="p" data-group-id="6188852088-3">)</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="o">&amp;</samp><samp class="w"> </samp><samp class="ni">&amp;1</samp><samp class="p" data-group-id="6188852088-2">)</samp><samp class="w">
</samp><samp class="p" data-group-id="6188852088-4">[</samp><samp class="mi">1</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;abc&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="6188852088-5">{</samp><samp class="ss">:foo</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="6188852088-6">[</samp><samp class="p" data-group-id="6188852088-6">]</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="6188852088-7">[</samp><samp class="mi">1</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;abc&quot;</samp><samp class="p" data-group-id="6188852088-7">]</samp><samp class="p" data-group-id="6188852088-5">}</samp><samp class="p" data-group-id="6188852088-4">]</samp></code></pre>
  </section>
</section>
<section class="detail" id="prewalk/2">

  <div class="detail-header">
    <a href="#prewalk/2" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">prewalk(ast, fun)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/macro.ex#L676" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> prewalk(<a href="#t:t/0">t</a>(), (<a href="#t:t/0">t</a>() -&gt; <a href="#t:t/0">t</a>())) :: <a href="#t:t/0">t</a>()</pre>

      </div>

<p>Performs a depth-first, pre-order traversal of quoted expressions.</p><p>Returns a new AST where each node is the result of invoking <code class="inline">fun</code> on each
corresponding node of <code class="inline">ast</code>.</p><h2 id="prewalk/2-examples" class="section-heading"><a href="#prewalk/2-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="n">ast</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="k">quote</samp><samp class="w"> </samp><samp class="ss">do</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">5</samp><samp class="w"> </samp><samp class="o">+</samp><samp class="w"> </samp><samp class="mi">3</samp><samp class="w"> </samp><samp class="o">*</samp><samp class="w"> </samp><samp class="mi">7</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="p" data-group-id="0838933818-1">{</samp><samp class="ss">:+</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="bp">_</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="0838933818-2">[</samp><samp class="mi">5</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="0838933818-3">{</samp><samp class="ss">:*</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="bp">_</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="0838933818-4">[</samp><samp class="mi">3</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">7</samp><samp class="p" data-group-id="0838933818-4">]</samp><samp class="p" data-group-id="0838933818-3">}</samp><samp class="p" data-group-id="0838933818-2">]</samp><samp class="p" data-group-id="0838933818-1">}</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="n">ast</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="n">new_ast</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="nc">Macro</samp><samp class="o">.</samp><samp class="n">prewalk</samp><samp class="p" data-group-id="0838933818-5">(</samp><samp class="n">ast</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="k" data-group-id="0838933818-6">fn</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="w">  </samp><samp class="p" data-group-id="0838933818-7">{</samp><samp class="ss">:+</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">meta</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">children</samp><samp class="p" data-group-id="0838933818-7">}</samp><samp class="w"> </samp><samp class="o">-&gt;</samp><samp class="w"> </samp><samp class="p" data-group-id="0838933818-8">{</samp><samp class="ss">:*</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">meta</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">children</samp><samp class="p" data-group-id="0838933818-8">}</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="w">  </samp><samp class="p" data-group-id="0838933818-9">{</samp><samp class="ss">:*</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">meta</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">children</samp><samp class="p" data-group-id="0838933818-9">}</samp><samp class="w"> </samp><samp class="o">-&gt;</samp><samp class="w"> </samp><samp class="p" data-group-id="0838933818-10">{</samp><samp class="ss">:+</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">meta</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">children</samp><samp class="p" data-group-id="0838933818-10">}</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="w">  </samp><samp class="n">other</samp><samp class="w"> </samp><samp class="o">-&gt;</samp><samp class="w"> </samp><samp class="n">other</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="k" data-group-id="0838933818-6">end</samp><samp class="p" data-group-id="0838933818-5">)</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="p" data-group-id="0838933818-11">{</samp><samp class="ss">:*</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="bp">_</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="0838933818-12">[</samp><samp class="mi">5</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="0838933818-13">{</samp><samp class="ss">:+</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="bp">_</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="0838933818-14">[</samp><samp class="mi">3</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">7</samp><samp class="p" data-group-id="0838933818-14">]</samp><samp class="p" data-group-id="0838933818-13">}</samp><samp class="p" data-group-id="0838933818-12">]</samp><samp class="p" data-group-id="0838933818-11">}</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="n">new_ast</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Code</samp><samp class="o">.</samp><samp class="n">eval_quoted</samp><samp class="p" data-group-id="0838933818-15">(</samp><samp class="n">ast</samp><samp class="p" data-group-id="0838933818-15">)</samp><samp class="w">
</samp><samp class="p" data-group-id="0838933818-16">{</samp><samp class="mi">26</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="0838933818-17">[</samp><samp class="p" data-group-id="0838933818-17">]</samp><samp class="p" data-group-id="0838933818-16">}</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Code</samp><samp class="o">.</samp><samp class="n">eval_quoted</samp><samp class="p" data-group-id="0838933818-18">(</samp><samp class="n">new_ast</samp><samp class="p" data-group-id="0838933818-18">)</samp><samp class="w">
</samp><samp class="p" data-group-id="0838933818-19">{</samp><samp class="mi">50</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="0838933818-20">[</samp><samp class="p" data-group-id="0838933818-20">]</samp><samp class="p" data-group-id="0838933818-19">}</samp></code></pre>
  </section>
</section>
<section class="detail" id="prewalk/3">

  <div class="detail-header">
    <a href="#prewalk/3" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">prewalk(ast, acc, fun)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/macro.ex#L705" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> prewalk(<a href="#t:t/0">t</a>(), <a href="typespecs.xhtml#basic-types">any</a>(), (<a href="#t:t/0">t</a>(), <a href="typespecs.xhtml#basic-types">any</a>() -&gt; {<a href="#t:t/0">t</a>(), <a href="typespecs.xhtml#basic-types">any</a>()})) :: {<a href="#t:t/0">t</a>(), <a href="typespecs.xhtml#basic-types">any</a>()}</pre>

      </div>

<p>Performs a depth-first, pre-order traversal of quoted expressions
using an accumulator.</p><p>Returns a tuple where the first element is a new AST where each node is the
result of invoking <code class="inline">fun</code> on each corresponding node and the second one is the
final accumulator.</p><h2 id="prewalk/3-examples" class="section-heading"><a href="#prewalk/3-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="n">ast</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="k">quote</samp><samp class="w"> </samp><samp class="ss">do</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">5</samp><samp class="w"> </samp><samp class="o">+</samp><samp class="w"> </samp><samp class="mi">3</samp><samp class="w"> </samp><samp class="o">*</samp><samp class="w"> </samp><samp class="mi">7</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="p" data-group-id="4976987052-1">{</samp><samp class="ss">:+</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="bp">_</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="4976987052-2">[</samp><samp class="mi">5</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="4976987052-3">{</samp><samp class="ss">:*</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="bp">_</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="4976987052-4">[</samp><samp class="mi">3</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">7</samp><samp class="p" data-group-id="4976987052-4">]</samp><samp class="p" data-group-id="4976987052-3">}</samp><samp class="p" data-group-id="4976987052-2">]</samp><samp class="p" data-group-id="4976987052-1">}</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="n">ast</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="p" data-group-id="4976987052-5">{</samp><samp class="n">new_ast</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">acc</samp><samp class="p" data-group-id="4976987052-5">}</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="nc">Macro</samp><samp class="o">.</samp><samp class="n">prewalk</samp><samp class="p" data-group-id="4976987052-6">(</samp><samp class="n">ast</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="4976987052-7">[</samp><samp class="p" data-group-id="4976987052-7">]</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="k" data-group-id="4976987052-8">fn</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="w">  </samp><samp class="p" data-group-id="4976987052-9">{</samp><samp class="ss">:+</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">meta</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">children</samp><samp class="p" data-group-id="4976987052-9">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">acc</samp><samp class="w"> </samp><samp class="o">-&gt;</samp><samp class="w"> </samp><samp class="p" data-group-id="4976987052-10">{</samp><samp class="p" data-group-id="4976987052-11">{</samp><samp class="ss">:*</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">meta</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">children</samp><samp class="p" data-group-id="4976987052-11">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="4976987052-12">[</samp><samp class="ss">:+</samp><samp class="w"> </samp><samp class="o">|</samp><samp class="w"> </samp><samp class="n">acc</samp><samp class="p" data-group-id="4976987052-12">]</samp><samp class="p" data-group-id="4976987052-10">}</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="w">  </samp><samp class="p" data-group-id="4976987052-13">{</samp><samp class="ss">:*</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">meta</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">children</samp><samp class="p" data-group-id="4976987052-13">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">acc</samp><samp class="w"> </samp><samp class="o">-&gt;</samp><samp class="w"> </samp><samp class="p" data-group-id="4976987052-14">{</samp><samp class="p" data-group-id="4976987052-15">{</samp><samp class="ss">:+</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">meta</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">children</samp><samp class="p" data-group-id="4976987052-15">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="4976987052-16">[</samp><samp class="ss">:*</samp><samp class="w"> </samp><samp class="o">|</samp><samp class="w"> </samp><samp class="n">acc</samp><samp class="p" data-group-id="4976987052-16">]</samp><samp class="p" data-group-id="4976987052-14">}</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="w">  </samp><samp class="n">other</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">acc</samp><samp class="w"> </samp><samp class="o">-&gt;</samp><samp class="w"> </samp><samp class="p" data-group-id="4976987052-17">{</samp><samp class="n">other</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">acc</samp><samp class="p" data-group-id="4976987052-17">}</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="k" data-group-id="4976987052-8">end</samp><samp class="p" data-group-id="4976987052-6">)</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="p" data-group-id="4976987052-18">{</samp><samp class="p" data-group-id="4976987052-19">{</samp><samp class="ss">:*</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="bp">_</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="4976987052-20">[</samp><samp class="mi">5</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="4976987052-21">{</samp><samp class="ss">:+</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="bp">_</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="4976987052-22">[</samp><samp class="mi">3</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">7</samp><samp class="p" data-group-id="4976987052-22">]</samp><samp class="p" data-group-id="4976987052-21">}</samp><samp class="p" data-group-id="4976987052-20">]</samp><samp class="p" data-group-id="4976987052-19">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="4976987052-23">[</samp><samp class="ss">:*</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:+</samp><samp class="p" data-group-id="4976987052-23">]</samp><samp class="p" data-group-id="4976987052-18">}</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="p" data-group-id="4976987052-24">{</samp><samp class="n">new_ast</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">acc</samp><samp class="p" data-group-id="4976987052-24">}</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Code</samp><samp class="o">.</samp><samp class="n">eval_quoted</samp><samp class="p" data-group-id="4976987052-25">(</samp><samp class="n">ast</samp><samp class="p" data-group-id="4976987052-25">)</samp><samp class="w">
</samp><samp class="p" data-group-id="4976987052-26">{</samp><samp class="mi">26</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="4976987052-27">[</samp><samp class="p" data-group-id="4976987052-27">]</samp><samp class="p" data-group-id="4976987052-26">}</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Code</samp><samp class="o">.</samp><samp class="n">eval_quoted</samp><samp class="p" data-group-id="4976987052-28">(</samp><samp class="n">new_ast</samp><samp class="p" data-group-id="4976987052-28">)</samp><samp class="w">
</samp><samp class="p" data-group-id="4976987052-29">{</samp><samp class="mi">50</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="4976987052-30">[</samp><samp class="p" data-group-id="4976987052-30">]</samp><samp class="p" data-group-id="4976987052-29">}</samp></code></pre>
  </section>
</section>
<section class="detail" id="prewalker/1">

  <div class="detail-header">
    <a href="#prewalker/1" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">prewalker(ast)</h1>

        <span class="note">(since 1.13.0)</span>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/macro.ex#L932" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> prewalker(<a href="#t:t/0">t</a>()) :: <a href="Enumerable.xhtml#t:t/0">Enumerable.t</a>()</pre>

      </div>

<p>Returns an enumerable that traverses the  <code class="inline">ast</code> in depth-first,
pre-order traversal.</p><h2 id="prewalker/1-examples" class="section-heading"><a href="#prewalker/1-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="n">ast</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="k">quote</samp><samp class="w"> </samp><samp class="ss">do</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="n">foo</samp><samp class="p" data-group-id="7903224299-1">(</samp><samp class="mi">1</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;abc&quot;</samp><samp class="p" data-group-id="7903224299-1">)</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Enum</samp><samp class="o">.</samp><samp class="n">map</samp><samp class="p" data-group-id="7903224299-2">(</samp><samp class="nc">Macro</samp><samp class="o">.</samp><samp class="n">prewalker</samp><samp class="p" data-group-id="7903224299-3">(</samp><samp class="n">ast</samp><samp class="p" data-group-id="7903224299-3">)</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="o">&amp;</samp><samp class="w"> </samp><samp class="ni">&amp;1</samp><samp class="p" data-group-id="7903224299-2">)</samp><samp class="w">
</samp><samp class="p" data-group-id="7903224299-4">[</samp><samp class="p" data-group-id="7903224299-5">{</samp><samp class="ss">:foo</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="7903224299-6">[</samp><samp class="p" data-group-id="7903224299-6">]</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="7903224299-7">[</samp><samp class="mi">1</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;abc&quot;</samp><samp class="p" data-group-id="7903224299-7">]</samp><samp class="p" data-group-id="7903224299-5">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">1</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;abc&quot;</samp><samp class="p" data-group-id="7903224299-4">]</samp></code></pre>
  </section>
</section>
<section class="detail" id="quoted_literal?/1">

  <div class="detail-header">
    <a href="#quoted_literal?/1" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">quoted_literal?(term)</h1>

        <span class="note">(since 1.7.0)</span>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/macro.ex#L1997" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> quoted_literal?(<a href="#t:t/0">t</a>()) :: <a href="typespecs.xhtml#built-in-types">boolean</a>()</pre>

      </div>

<p>Returns <code class="inline">true</code> if the given quoted expression represents a quoted literal.</p><p>Atoms and numbers are always literals. Binaries, lists, tuples,
maps, and structs are only literals if all of their terms are also literals.</p><h2 id="quoted_literal?/1-examples" class="section-heading"><a href="#quoted_literal?/1-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Macro</samp><samp class="o">.</samp><samp class="n">quoted_literal?</samp><samp class="p" data-group-id="1516053693-1">(</samp><samp class="k">quote</samp><samp class="p" data-group-id="1516053693-2">(</samp><samp class="ss">do</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;foo&quot;</samp><samp class="p" data-group-id="1516053693-2">)</samp><samp class="p" data-group-id="1516053693-1">)</samp><samp class="w">
</samp><samp class="no">true</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Macro</samp><samp class="o">.</samp><samp class="n">quoted_literal?</samp><samp class="p" data-group-id="1516053693-3">(</samp><samp class="k">quote</samp><samp class="p" data-group-id="1516053693-4">(</samp><samp class="ss">do</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="1516053693-5">{</samp><samp class="s">&quot;foo&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">1</samp><samp class="p" data-group-id="1516053693-5">}</samp><samp class="p" data-group-id="1516053693-4">)</samp><samp class="p" data-group-id="1516053693-3">)</samp><samp class="w">
</samp><samp class="no">true</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Macro</samp><samp class="o">.</samp><samp class="n">quoted_literal?</samp><samp class="p" data-group-id="1516053693-6">(</samp><samp class="k">quote</samp><samp class="p" data-group-id="1516053693-7">(</samp><samp class="ss">do</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="1516053693-8">{</samp><samp class="s">&quot;foo&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">1</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:baz</samp><samp class="p" data-group-id="1516053693-8">}</samp><samp class="p" data-group-id="1516053693-7">)</samp><samp class="p" data-group-id="1516053693-6">)</samp><samp class="w">
</samp><samp class="no">true</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Macro</samp><samp class="o">.</samp><samp class="n">quoted_literal?</samp><samp class="p" data-group-id="1516053693-9">(</samp><samp class="k">quote</samp><samp class="p" data-group-id="1516053693-10">(</samp><samp class="ss">do</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="1516053693-11">%{</samp><samp class="ss">foo</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;bar&quot;</samp><samp class="p" data-group-id="1516053693-11">}</samp><samp class="p" data-group-id="1516053693-10">)</samp><samp class="p" data-group-id="1516053693-9">)</samp><samp class="w">
</samp><samp class="no">true</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Macro</samp><samp class="o">.</samp><samp class="n">quoted_literal?</samp><samp class="p" data-group-id="1516053693-12">(</samp><samp class="k">quote</samp><samp class="p" data-group-id="1516053693-13">(</samp><samp class="ss">do</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="1516053693-14">%</samp><samp class="nc" data-group-id="1516053693-14">URI</samp><samp class="p" data-group-id="1516053693-14">{</samp><samp class="ss">path</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;/&quot;</samp><samp class="p" data-group-id="1516053693-14">}</samp><samp class="p" data-group-id="1516053693-13">)</samp><samp class="p" data-group-id="1516053693-12">)</samp><samp class="w">
</samp><samp class="no">true</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Macro</samp><samp class="o">.</samp><samp class="n">quoted_literal?</samp><samp class="p" data-group-id="1516053693-15">(</samp><samp class="k">quote</samp><samp class="p" data-group-id="1516053693-16">(</samp><samp class="ss">do</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="nc">URI</samp><samp class="o">.</samp><samp class="n">parse</samp><samp class="p" data-group-id="1516053693-17">(</samp><samp class="s">&quot;/&quot;</samp><samp class="p" data-group-id="1516053693-17">)</samp><samp class="p" data-group-id="1516053693-16">)</samp><samp class="p" data-group-id="1516053693-15">)</samp><samp class="w">
</samp><samp class="no">false</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Macro</samp><samp class="o">.</samp><samp class="n">quoted_literal?</samp><samp class="p" data-group-id="1516053693-18">(</samp><samp class="k">quote</samp><samp class="p" data-group-id="1516053693-19">(</samp><samp class="ss">do</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="1516053693-20">{</samp><samp class="n">foo</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">var</samp><samp class="p" data-group-id="1516053693-20">}</samp><samp class="p" data-group-id="1516053693-19">)</samp><samp class="p" data-group-id="1516053693-18">)</samp><samp class="w">
</samp><samp class="no">false</samp></code></pre>
  </section>
</section>
<section class="detail" id="special_form?/2">

  <div class="detail-header">
    <a href="#special_form?/2" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">special_form?(name, arity)</h1>

        <span class="note">(since 1.7.0)</span>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/macro.ex#L1930" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> special_form?(name :: <a href="typespecs.xhtml#basic-types">atom</a>(), <a href="typespecs.xhtml#built-in-types">arity</a>()) :: <a href="typespecs.xhtml#built-in-types">boolean</a>()</pre>

      </div>

<p>Returns <code class="inline">true</code> if the given name and arity is a special form.</p>
  </section>
</section>
<section class="detail" id="struct!/2">

  <div class="detail-header">
    <a href="#struct!/2" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">struct!(module, env)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/macro.ex#L839" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

    <div class="deprecated">
      This function is deprecated. Use Macro.struct_info!/2 instead.
    </div>

  <section class="docstring">


  </section>
</section>
<section class="detail" id="struct_info!/2">

  <div class="detail-header">
    <a href="#struct_info!/2" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">struct_info!(module, env)</h1>

        <span class="note">(since 1.18.0)</span>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/macro.ex#L862" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> struct_info!(<a href="typespecs.xhtml#built-in-types">module</a>(), <a href="Macro.Env.xhtml#t:t/0">Macro.Env.t</a>()) :: [
  %{field: <a href="typespecs.xhtml#basic-types">atom</a>(), required: <a href="typespecs.xhtml#built-in-types">boolean</a>(), default: <a href="typespecs.xhtml#built-in-types">term</a>()}
]</pre>

      </div>

<p>Extracts the struct information (equivalent to calling
<code class="inline">module.__info__(:struct)</code>).</p><p>This is useful when a struct needs to be expanded at
compilation time and the struct being expanded may or may
not have been compiled. This function is also capable of
expanding structs defined under the module being compiled.
Calling this function also adds an export dependency on the
given struct.</p><p>It will raise <a href="ArgumentError.xhtml"><code class="inline">ArgumentError</code></a> if the struct is not available.</p>
  </section>
</section>
<section class="detail" id="to_string/1">

  <div class="detail-header">
    <a href="#to_string/1" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">to_string(tree)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/macro.ex#L1152" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> to_string(<a href="#t:t/0">t</a>()) :: <a href="String.xhtml#t:t/0">String.t</a>()</pre>

      </div>

<p>Converts the given expression AST to a string.</p><p>This is a convenience function for converting AST into
a string, which discards all formatting of the original
code and wraps newlines around 98 characters. See
<a href="Code.xhtml#quoted_to_algebra/2"><code class="inline">Code.quoted_to_algebra/2</code></a> as a lower level function
with more control around formatting.</p><p>If the AST contains invalid nodes, this function will
attempt to inspect them, to aid debugging, although
the elements won't be formatted accordingly.</p><h2 id="to_string/1-examples" class="section-heading"><a href="#to_string/1-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Macro</samp><samp class="o">.</samp><samp class="n">to_string</samp><samp class="p" data-group-id="0532280852-1">(</samp><samp class="k">quote</samp><samp class="p" data-group-id="0532280852-2">(</samp><samp class="ss">do</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="n">foo</samp><samp class="o">.</samp><samp class="n">bar</samp><samp class="p" data-group-id="0532280852-3">(</samp><samp class="mi">1</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">2</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">3</samp><samp class="p" data-group-id="0532280852-3">)</samp><samp class="p" data-group-id="0532280852-2">)</samp><samp class="p" data-group-id="0532280852-1">)</samp><samp class="w">
</samp><samp class="s">&quot;foo.bar(1, 2, 3)&quot;</samp></code></pre>
  </section>
</section>
<section class="detail" id="to_string/2">

  <div class="detail-header">
    <a href="#to_string/2" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">to_string(tree, fun)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/macro.ex#L1181" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

    <div class="deprecated">
      This function is deprecated. Use Macro.to_string/1 instead.
    </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> to_string(<a href="#t:t/0">t</a>(), (<a href="#t:t/0">t</a>(), <a href="String.xhtml#t:t/0">String.t</a>() -&gt; <a href="String.xhtml#t:t/0">String.t</a>())) :: <a href="String.xhtml#t:t/0">String.t</a>()</pre>

      </div>

<p>Converts the given expression AST to a string.</p><p>The given <code class="inline">fun</code> is called for every node in the AST with two arguments: the
AST of the node being printed and the string representation of that same
node. The return value of this function is used as the final string
representation for that AST node.</p><p>This function discards all formatting of the original code.</p><h2 id="to_string/2-examples" class="section-heading"><a href="#to_string/2-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="nc">Macro</samp><samp class="o">.</samp><samp class="n">to_string</samp><samp class="p" data-group-id="7969437612-1">(</samp><samp class="k">quote</samp><samp class="p" data-group-id="7969437612-2">(</samp><samp class="ss">do</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">1</samp><samp class="w"> </samp><samp class="o">+</samp><samp class="w"> </samp><samp class="mi">2</samp><samp class="p" data-group-id="7969437612-2">)</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="k" data-group-id="7969437612-3">fn</samp><samp class="w">
  </samp><samp class="mi">1</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="c">_string</samp><samp class="w"> </samp><samp class="o">-&gt;</samp><samp class="w"> </samp><samp class="s">&quot;one&quot;</samp><samp class="w">
  </samp><samp class="mi">2</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="c">_string</samp><samp class="w"> </samp><samp class="o">-&gt;</samp><samp class="w"> </samp><samp class="s">&quot;two&quot;</samp><samp class="w">
  </samp><samp class="c">_ast</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">string</samp><samp class="w"> </samp><samp class="o">-&gt;</samp><samp class="w"> </samp><samp class="n">string</samp><samp class="w">
</samp><samp class="k" data-group-id="7969437612-3">end</samp><samp class="p" data-group-id="7969437612-1">)</samp><samp class="w">
</samp><samp class="c1">#=&gt; &quot;one + two&quot;</samp></code></pre>
  </section>
</section>
<section class="detail" id="traverse/4">

  <div class="detail-header">
    <a href="#traverse/4" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">traverse(ast, acc, pre, post)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/macro.ex#L604" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> traverse(<a href="#t:t/0">t</a>(), <a href="typespecs.xhtml#basic-types">any</a>(), (<a href="#t:t/0">t</a>(), <a href="typespecs.xhtml#basic-types">any</a>() -&gt; {<a href="#t:t/0">t</a>(), <a href="typespecs.xhtml#basic-types">any</a>()}), (<a href="#t:t/0">t</a>(), <a href="typespecs.xhtml#basic-types">any</a>() -&gt; {<a href="#t:t/0">t</a>(), <a href="typespecs.xhtml#basic-types">any</a>()})) ::
  {<a href="#t:t/0">t</a>(), <a href="typespecs.xhtml#basic-types">any</a>()}</pre>

      </div>

<p>Performs a depth-first traversal of quoted expressions
using an accumulator.</p><p>Returns a tuple where the first element is a new AST and the second one is
the final accumulator. The new AST is the result of invoking <code class="inline">pre</code> on each
node of <code class="inline">ast</code> during the pre-order phase and <code class="inline">post</code> during the post-order
phase.</p><h2 id="traverse/4-examples" class="section-heading"><a href="#traverse/4-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="n">ast</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="k">quote</samp><samp class="w"> </samp><samp class="ss">do</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">5</samp><samp class="w"> </samp><samp class="o">+</samp><samp class="w"> </samp><samp class="mi">3</samp><samp class="w"> </samp><samp class="o">*</samp><samp class="w"> </samp><samp class="mi">7</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="p" data-group-id="0735768506-1">{</samp><samp class="ss">:+</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="bp">_</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="0735768506-2">[</samp><samp class="mi">5</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="0735768506-3">{</samp><samp class="ss">:*</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="bp">_</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="0735768506-4">[</samp><samp class="mi">3</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">7</samp><samp class="p" data-group-id="0735768506-4">]</samp><samp class="p" data-group-id="0735768506-3">}</samp><samp class="p" data-group-id="0735768506-2">]</samp><samp class="p" data-group-id="0735768506-1">}</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="n">ast</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="p" data-group-id="0735768506-5">{</samp><samp class="n">new_ast</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">acc</samp><samp class="p" data-group-id="0735768506-5">}</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="w"> </samp><samp class="nc">Macro</samp><samp class="o">.</samp><samp class="n">traverse</samp><samp class="p" data-group-id="0735768506-6">(</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="w">   </samp><samp class="n">ast</samp><samp class="p">,</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="w">   </samp><samp class="p" data-group-id="0735768506-7">[</samp><samp class="p" data-group-id="0735768506-7">]</samp><samp class="p">,</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="w">   </samp><samp class="k" data-group-id="0735768506-8">fn</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="w">     </samp><samp class="p" data-group-id="0735768506-9">{</samp><samp class="ss">:+</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">meta</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">children</samp><samp class="p" data-group-id="0735768506-9">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">acc</samp><samp class="w"> </samp><samp class="o">-&gt;</samp><samp class="w"> </samp><samp class="p" data-group-id="0735768506-10">{</samp><samp class="p" data-group-id="0735768506-11">{</samp><samp class="ss">:-</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">meta</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">children</samp><samp class="p" data-group-id="0735768506-11">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="0735768506-12">[</samp><samp class="ss">:-</samp><samp class="w"> </samp><samp class="o">|</samp><samp class="w"> </samp><samp class="n">acc</samp><samp class="p" data-group-id="0735768506-12">]</samp><samp class="p" data-group-id="0735768506-10">}</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="w">     </samp><samp class="p" data-group-id="0735768506-13">{</samp><samp class="ss">:*</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">meta</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">children</samp><samp class="p" data-group-id="0735768506-13">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">acc</samp><samp class="w"> </samp><samp class="o">-&gt;</samp><samp class="w"> </samp><samp class="p" data-group-id="0735768506-14">{</samp><samp class="p" data-group-id="0735768506-15">{</samp><samp class="ss">:/</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">meta</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">children</samp><samp class="p" data-group-id="0735768506-15">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="0735768506-16">[</samp><samp class="ss">:/</samp><samp class="w"> </samp><samp class="o">|</samp><samp class="w"> </samp><samp class="n">acc</samp><samp class="p" data-group-id="0735768506-16">]</samp><samp class="p" data-group-id="0735768506-14">}</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="w">     </samp><samp class="n">other</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">acc</samp><samp class="w"> </samp><samp class="o">-&gt;</samp><samp class="w"> </samp><samp class="p" data-group-id="0735768506-17">{</samp><samp class="n">other</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">acc</samp><samp class="p" data-group-id="0735768506-17">}</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="w">   </samp><samp class="k" data-group-id="0735768506-8">end</samp><samp class="p">,</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="w">   </samp><samp class="k" data-group-id="0735768506-18">fn</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="w">     </samp><samp class="p" data-group-id="0735768506-19">{</samp><samp class="ss">:-</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">meta</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">children</samp><samp class="p" data-group-id="0735768506-19">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">acc</samp><samp class="w"> </samp><samp class="o">-&gt;</samp><samp class="w"> </samp><samp class="p" data-group-id="0735768506-20">{</samp><samp class="p" data-group-id="0735768506-21">{</samp><samp class="ss">:min</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">meta</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">children</samp><samp class="p" data-group-id="0735768506-21">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="0735768506-22">[</samp><samp class="ss">:min</samp><samp class="w"> </samp><samp class="o">|</samp><samp class="w"> </samp><samp class="n">acc</samp><samp class="p" data-group-id="0735768506-22">]</samp><samp class="p" data-group-id="0735768506-20">}</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="w">     </samp><samp class="p" data-group-id="0735768506-23">{</samp><samp class="ss">:/</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">meta</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">children</samp><samp class="p" data-group-id="0735768506-23">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">acc</samp><samp class="w"> </samp><samp class="o">-&gt;</samp><samp class="w"> </samp><samp class="p" data-group-id="0735768506-24">{</samp><samp class="p" data-group-id="0735768506-25">{</samp><samp class="ss">:max</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">meta</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">children</samp><samp class="p" data-group-id="0735768506-25">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="0735768506-26">[</samp><samp class="ss">:max</samp><samp class="w"> </samp><samp class="o">|</samp><samp class="w"> </samp><samp class="n">acc</samp><samp class="p" data-group-id="0735768506-26">]</samp><samp class="p" data-group-id="0735768506-24">}</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="w">     </samp><samp class="n">other</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">acc</samp><samp class="w"> </samp><samp class="o">-&gt;</samp><samp class="w"> </samp><samp class="p" data-group-id="0735768506-27">{</samp><samp class="n">other</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">acc</samp><samp class="p" data-group-id="0735768506-27">}</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="w">   </samp><samp class="k" data-group-id="0735768506-18">end</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="w"> </samp><samp class="p" data-group-id="0735768506-6">)</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="p" data-group-id="0735768506-28">{</samp><samp class="ss">:min</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="bp">_</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="0735768506-29">[</samp><samp class="mi">5</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="0735768506-30">{</samp><samp class="ss">:max</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="bp">_</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="0735768506-31">[</samp><samp class="mi">3</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">7</samp><samp class="p" data-group-id="0735768506-31">]</samp><samp class="p" data-group-id="0735768506-30">}</samp><samp class="p" data-group-id="0735768506-29">]</samp><samp class="p" data-group-id="0735768506-28">}</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="n">new_ast</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="p" data-group-id="0735768506-32">[</samp><samp class="ss">:min</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:max</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:/</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:-</samp><samp class="p" data-group-id="0735768506-32">]</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="n">acc</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Code</samp><samp class="o">.</samp><samp class="n">eval_quoted</samp><samp class="p" data-group-id="0735768506-33">(</samp><samp class="n">new_ast</samp><samp class="p" data-group-id="0735768506-33">)</samp><samp class="w">
</samp><samp class="p" data-group-id="0735768506-34">{</samp><samp class="mi">5</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="0735768506-35">[</samp><samp class="p" data-group-id="0735768506-35">]</samp><samp class="p" data-group-id="0735768506-34">}</samp></code></pre>
  </section>
</section>
<section class="detail" id="underscore/1">

  <div class="detail-header">
    <a href="#underscore/1" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">underscore(atom_or_string)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/macro.ex#L2194" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> underscore(<a href="typespecs.xhtml#basic-types">atom</a>() | <a href="String.xhtml#t:t/0">String.t</a>()) :: <a href="String.xhtml#t:t/0">String.t</a>()</pre>

      </div>

<p>Converts the given argument to a string with the underscore-slash format.</p><p>The argument must either be an atom, representing an Elixir module,
or a string representing a module without the <code class="inline">Elixir.</code> prefix.</p><p>This function was designed to format language identifiers/tokens with the underscore-slash format,
that's why it belongs to the <a href="Macro.xhtml"><code class="inline">Macro</code></a> module. Do not use it as a general
mechanism for underscoring strings as it does not support Unicode or
characters that are not valid in Elixir identifiers.</p><h2 id="underscore/1-examples" class="section-heading"><a href="#underscore/1-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Macro</samp><samp class="o">.</samp><samp class="n">underscore</samp><samp class="p" data-group-id="9728023456-1">(</samp><samp class="s">&quot;FooBar&quot;</samp><samp class="p" data-group-id="9728023456-1">)</samp><samp class="w">
</samp><samp class="s">&quot;foo_bar&quot;</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Macro</samp><samp class="o">.</samp><samp class="n">underscore</samp><samp class="p" data-group-id="9728023456-2">(</samp><samp class="s">&quot;Foo.Bar&quot;</samp><samp class="p" data-group-id="9728023456-2">)</samp><samp class="w">
</samp><samp class="s">&quot;foo/bar&quot;</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Macro</samp><samp class="o">.</samp><samp class="n">underscore</samp><samp class="p" data-group-id="9728023456-3">(</samp><samp class="nc">Foo.Bar</samp><samp class="p" data-group-id="9728023456-3">)</samp><samp class="w">
</samp><samp class="s">&quot;foo/bar&quot;</samp></code></pre><p>In general, <code class="inline">underscore</code> can be thought of as the reverse of
<code class="inline">camelize</code>, however, in some cases formatting may be lost:</p><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Macro</samp><samp class="o">.</samp><samp class="n">underscore</samp><samp class="p" data-group-id="3626451078-1">(</samp><samp class="s">&quot;SAPExample&quot;</samp><samp class="p" data-group-id="3626451078-1">)</samp><samp class="w">
</samp><samp class="s">&quot;sap_example&quot;</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Macro</samp><samp class="o">.</samp><samp class="n">camelize</samp><samp class="p" data-group-id="3626451078-2">(</samp><samp class="s">&quot;sap_example&quot;</samp><samp class="p" data-group-id="3626451078-2">)</samp><samp class="w">
</samp><samp class="s">&quot;SapExample&quot;</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Macro</samp><samp class="o">.</samp><samp class="n">camelize</samp><samp class="p" data-group-id="3626451078-3">(</samp><samp class="s">&quot;hello_10&quot;</samp><samp class="p" data-group-id="3626451078-3">)</samp><samp class="w">
</samp><samp class="s">&quot;Hello10&quot;</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Macro</samp><samp class="o">.</samp><samp class="n">camelize</samp><samp class="p" data-group-id="3626451078-4">(</samp><samp class="s">&quot;foo/bar&quot;</samp><samp class="p" data-group-id="3626451078-4">)</samp><samp class="w">
</samp><samp class="s">&quot;Foo.Bar&quot;</samp></code></pre>
  </section>
</section>
<section class="detail" id="unescape_string/1">

  <div class="detail-header">
    <a href="#unescape_string/1" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">unescape_string(string)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/macro.ex#L1066" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> unescape_string(<a href="String.xhtml#t:t/0">String.t</a>()) :: <a href="String.xhtml#t:t/0">String.t</a>()</pre>

      </div>

<p>Unescapes characters in a string.</p><p>This is the unescaping behaviour used by default in Elixir
single- and double-quoted strings. Check <a href="#unescape_string/2"><code class="inline">unescape_string/2</code></a>
for information on how to customize the escaping map.</p><p>In this setup, Elixir will escape the following: <code class="inline">\0</code>, <code class="inline">\a</code>, <code class="inline">\b</code>,
<code class="inline">\d</code>, <code class="inline">\e</code>, <code class="inline">\f</code>, <code class="inline">\n</code>, <code class="inline">\r</code>, <code class="inline">\s</code>, <code class="inline">\t</code> and <code class="inline">\v</code>. Bytes can be
given as hexadecimals via <code class="inline">\xNN</code> and Unicode code points as
<code class="inline">\uNNNN</code> escapes.</p><p>This function is commonly used on sigil implementations
(like <code class="inline">~r</code>, <code class="inline">~s</code> and others), which receive a raw, unescaped
string, and it can be used anywhere that needs to mimic how
Elixir parses strings.</p><h2 id="unescape_string/1-examples" class="section-heading"><a href="#unescape_string/1-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Macro</samp><samp class="o">.</samp><samp class="n">unescape_string</samp><samp class="p" data-group-id="9495490554-1">(</samp><samp class="s">&quot;example</samp><samp class="se">\\</samp><samp class="s">n&quot;</samp><samp class="p" data-group-id="9495490554-1">)</samp><samp class="w">
</samp><samp class="s">&quot;example</samp><samp class="se">\n</samp><samp class="s">&quot;</samp></code></pre><p>In the example above, we pass a string with <code class="inline">\n</code> escaped
and return a version with it unescaped.</p>
  </section>
</section>
<section class="detail" id="unescape_string/2">

  <div class="detail-header">
    <a href="#unescape_string/2" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">unescape_string(string, map)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/macro.ex#L1112" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> unescape_string(<a href="String.xhtml#t:t/0">String.t</a>(), (<a href="typespecs.xhtml#basic-types">non_neg_integer</a>() -&gt; <a href="typespecs.xhtml#basic-types">non_neg_integer</a>() | false)) ::
  <a href="String.xhtml#t:t/0">String.t</a>()</pre>

      </div>

<p>Unescapes characters in a string according to the given mapping.</p><p>Check <a href="#unescape_string/1"><code class="inline">unescape_string/1</code></a> if you want to use the same mapping
as Elixir single- and double-quoted strings.</p><h2 id="unescape_string/2-mapping-function" class="section-heading"><a href="#unescape_string/2-mapping-function" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Mapping function</span></h2><p>The mapping function receives an integer representing the code point
of the character it wants to unescape. There are also the special atoms
<code class="inline">:newline</code>, <code class="inline">:unicode</code>, and <code class="inline">:hex</code>, which control newline, unicode,
and escaping respectively.</p><p>Here is the default mapping function implemented by Elixir:</p><pre><code class="makeup elixir" translate="no"><samp class="kd">def</samp><samp class="w"> </samp><samp class="nf">unescape_map</samp><samp class="p" data-group-id="3431986429-1">(</samp><samp class="ss">:newline</samp><samp class="p" data-group-id="3431986429-1">)</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">do</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">true</samp><samp class="w">
</samp><samp class="kd">def</samp><samp class="w"> </samp><samp class="nf">unescape_map</samp><samp class="p" data-group-id="3431986429-2">(</samp><samp class="ss">:unicode</samp><samp class="p" data-group-id="3431986429-2">)</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">do</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">true</samp><samp class="w">
</samp><samp class="kd">def</samp><samp class="w"> </samp><samp class="nf">unescape_map</samp><samp class="p" data-group-id="3431986429-3">(</samp><samp class="ss">:hex</samp><samp class="p" data-group-id="3431986429-3">)</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">do</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">true</samp><samp class="w">
</samp><samp class="kd">def</samp><samp class="w"> </samp><samp class="nf">unescape_map</samp><samp class="p" data-group-id="3431986429-4">(</samp><samp class="sc">?0</samp><samp class="p" data-group-id="3431986429-4">)</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">do</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="sc">?0</samp><samp class="w">
</samp><samp class="kd">def</samp><samp class="w"> </samp><samp class="nf">unescape_map</samp><samp class="p" data-group-id="3431986429-5">(</samp><samp class="sc">?a</samp><samp class="p" data-group-id="3431986429-5">)</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">do</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="sc">?\a</samp><samp class="w">
</samp><samp class="kd">def</samp><samp class="w"> </samp><samp class="nf">unescape_map</samp><samp class="p" data-group-id="3431986429-6">(</samp><samp class="sc">?b</samp><samp class="p" data-group-id="3431986429-6">)</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">do</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="sc">?\b</samp><samp class="w">
</samp><samp class="kd">def</samp><samp class="w"> </samp><samp class="nf">unescape_map</samp><samp class="p" data-group-id="3431986429-7">(</samp><samp class="sc">?d</samp><samp class="p" data-group-id="3431986429-7">)</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">do</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="sc">?\d</samp><samp class="w">
</samp><samp class="kd">def</samp><samp class="w"> </samp><samp class="nf">unescape_map</samp><samp class="p" data-group-id="3431986429-8">(</samp><samp class="sc">?e</samp><samp class="p" data-group-id="3431986429-8">)</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">do</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="sc">?\e</samp><samp class="w">
</samp><samp class="kd">def</samp><samp class="w"> </samp><samp class="nf">unescape_map</samp><samp class="p" data-group-id="3431986429-9">(</samp><samp class="sc">?f</samp><samp class="p" data-group-id="3431986429-9">)</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">do</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="sc">?\f</samp><samp class="w">
</samp><samp class="kd">def</samp><samp class="w"> </samp><samp class="nf">unescape_map</samp><samp class="p" data-group-id="3431986429-10">(</samp><samp class="sc">?n</samp><samp class="p" data-group-id="3431986429-10">)</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">do</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="sc">?\n</samp><samp class="w">
</samp><samp class="kd">def</samp><samp class="w"> </samp><samp class="nf">unescape_map</samp><samp class="p" data-group-id="3431986429-11">(</samp><samp class="sc">?r</samp><samp class="p" data-group-id="3431986429-11">)</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">do</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="sc">?\r</samp><samp class="w">
</samp><samp class="kd">def</samp><samp class="w"> </samp><samp class="nf">unescape_map</samp><samp class="p" data-group-id="3431986429-12">(</samp><samp class="sc">?s</samp><samp class="p" data-group-id="3431986429-12">)</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">do</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="sc">?\s</samp><samp class="w">
</samp><samp class="kd">def</samp><samp class="w"> </samp><samp class="nf">unescape_map</samp><samp class="p" data-group-id="3431986429-13">(</samp><samp class="sc">?t</samp><samp class="p" data-group-id="3431986429-13">)</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">do</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="sc">?\t</samp><samp class="w">
</samp><samp class="kd">def</samp><samp class="w"> </samp><samp class="nf">unescape_map</samp><samp class="p" data-group-id="3431986429-14">(</samp><samp class="sc">?v</samp><samp class="p" data-group-id="3431986429-14">)</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">do</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="sc">?\v</samp><samp class="w">
</samp><samp class="kd">def</samp><samp class="w"> </samp><samp class="nf">unescape_map</samp><samp class="p" data-group-id="3431986429-15">(</samp><samp class="n">e</samp><samp class="p" data-group-id="3431986429-15">)</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">do</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="n">e</samp></code></pre><p>If the <code class="inline">unescape_map/1</code> function returns <code class="inline">false</code>, the char is
not escaped and the backslash is kept in the string.</p><h2 id="unescape_string/2-examples" class="section-heading"><a href="#unescape_string/2-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><p>Using the <code class="inline">unescape_map/1</code> function defined above is easy:</p><pre><code class="makeup elixir" translate="no"><samp class="nc">Macro</samp><samp class="o">.</samp><samp class="n">unescape_string</samp><samp class="p" data-group-id="6702335928-1">(</samp><samp class="s">&quot;example</samp><samp class="se">\\</samp><samp class="s">n&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="o">&amp;</samp><samp class="n">unescape_map</samp><samp class="p" data-group-id="6702335928-2">(</samp><samp class="ni">&amp;1</samp><samp class="p" data-group-id="6702335928-2">)</samp><samp class="p" data-group-id="6702335928-1">)</samp></code></pre>
  </section>
</section>
<section class="detail" id="unique_var/2">

  <div class="detail-header">
    <a href="#unique_var/2" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">unique_var(var, context)</h1>

        <span class="note">(since 1.11.3)</span>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/macro.ex#L565" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> unique_var(var, context) :: {var, [{:counter, <a href="typespecs.xhtml#basic-types">integer</a>()}], context}
when var: <a href="typespecs.xhtml#basic-types">atom</a>(), context: <a href="typespecs.xhtml#basic-types">atom</a>()</pre>

      </div>

<p>Generates an AST node representing a unique variable
given by the atoms <code class="inline">var</code> and <code class="inline">context</code>.</p><p>Calling this function with the same arguments will
generate another variable, with its own unique counter.
See <a href="#var/2"><code class="inline">var/2</code></a> for an alternative.</p><h2 id="unique_var/2-examples" class="section-heading"><a href="#unique_var/2-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="p" data-group-id="1034761003-1">{</samp><samp class="ss">:foo</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="1034761003-2">[</samp><samp class="ss">counter</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="n">c</samp><samp class="p" data-group-id="1034761003-2">]</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="bp">__MODULE__</samp><samp class="p" data-group-id="1034761003-1">}</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="nc">Macro</samp><samp class="o">.</samp><samp class="n">unique_var</samp><samp class="p" data-group-id="1034761003-3">(</samp><samp class="ss">:foo</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="bp">__MODULE__</samp><samp class="p" data-group-id="1034761003-3">)</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="n">is_integer</samp><samp class="p" data-group-id="1034761003-4">(</samp><samp class="n">c</samp><samp class="p" data-group-id="1034761003-4">)</samp><samp class="w">
</samp><samp class="no">true</samp></code></pre>
  </section>
</section>
<section class="detail" id="unpipe/1">

  <div class="detail-header">
    <a href="#unpipe/1" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">unpipe(expr)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/macro.ex#L221" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> unpipe(<a href="#t:t/0">t</a>()) :: [<a href="#t:t/0">t</a>()]</pre>

      </div>

<p>Breaks a pipeline expression into a list.</p><p>The AST for a pipeline (a sequence of applications of <a href="Kernel.xhtml#%7C%3E/2"><code class="inline">|&gt;/2</code></a>) is similar to the
AST of a sequence of binary operators or function applications: the top-level
expression is the right-most <code class="inline">:|&gt;</code> (which is the last one to be executed), and
its left-hand and right-hand sides are its arguments:</p><pre><code class="makeup elixir" translate="no"><samp class="k">quote</samp><samp class="w"> </samp><samp class="ss">do</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">100</samp><samp class="w"> </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="n">div</samp><samp class="p" data-group-id="5920899070-1">(</samp><samp class="mi">5</samp><samp class="p" data-group-id="5920899070-1">)</samp><samp class="w"> </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="n">div</samp><samp class="p" data-group-id="5920899070-2">(</samp><samp class="mi">2</samp><samp class="p" data-group-id="5920899070-2">)</samp><samp class="w">
</samp><samp class="c1">#=&gt; {:|&gt;, _, [arg1, arg2]}</samp></code></pre><p>In the example above, the <a href="Kernel.xhtml#%7C%3E/2"><code class="inline">|&gt;/2</code></a> pipe is the right-most pipe; <code class="inline">arg1</code> is the AST
for <code class="inline">100 |&gt; div(5)</code>, and <code class="inline">arg2</code> is the AST for <code class="inline">div(2)</code>.</p><p>It's often useful to have the AST for such a pipeline as a list of function
applications. This function does exactly that:</p><pre><code class="makeup elixir" translate="no"><samp class="nc">Macro</samp><samp class="o">.</samp><samp class="n">unpipe</samp><samp class="p" data-group-id="2312412035-1">(</samp><samp class="k">quote</samp><samp class="w"> </samp><samp class="ss">do</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">100</samp><samp class="w"> </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="n">div</samp><samp class="p" data-group-id="2312412035-2">(</samp><samp class="mi">5</samp><samp class="p" data-group-id="2312412035-2">)</samp><samp class="w"> </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="n">div</samp><samp class="p" data-group-id="2312412035-3">(</samp><samp class="mi">2</samp><samp class="p" data-group-id="2312412035-3">)</samp><samp class="p" data-group-id="2312412035-1">)</samp><samp class="w">
</samp><samp class="c1">#=&gt; [{100, 0}, {{:div, [], [5]}, 0}, {{:div, [], [2]}, 0}]</samp></code></pre><p>We get a list that follows the pipeline directly: first the <code class="inline">100</code>, then the
<code class="inline">div(5)</code> (more precisely, its AST), then <code class="inline">div(2)</code>. The <code class="inline">0</code> as the second
element of the tuples is the position of the previous element in the pipeline
inside the current function application: <code class="inline">{{:div, [], [5]}, 0}</code> means that the
previous element (<code class="inline">100</code>) will be inserted as the 0th (first) argument to the
<a href="Kernel.xhtml#div/2"><code class="inline">div/2</code></a> function, so that the AST for that function will become <code class="inline">{:div, [], [100, 5]}</code> (<code class="inline">div(100, 5)</code>).</p>
  </section>
</section>
<section class="detail" id="update_meta/2">

  <div class="detail-header">
    <a href="#update_meta/2" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">update_meta(quoted, fun)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/macro.ex#L363" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> update_meta(<a href="#t:t/0">t</a>(), (<a href="typespecs.xhtml#built-in-types">keyword</a>() -&gt; <a href="typespecs.xhtml#built-in-types">keyword</a>())) :: <a href="#t:t/0">t</a>()</pre>

      </div>

<p>Applies the given function to the node metadata if it contains one.</p><p>This is often useful when used with <a href="#prewalk/2"><code class="inline">Macro.prewalk/2</code></a> to remove
information like lines and hygienic counters from the expression
for either storage or comparison.</p><h2 id="update_meta/2-examples" class="section-heading"><a href="#update_meta/2-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="n">quoted</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="k">quote</samp><samp class="w"> </samp><samp class="ss">line</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">10</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">do</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="n">sample</samp><samp class="p" data-group-id="9085241920-1">(</samp><samp class="p" data-group-id="9085241920-1">)</samp><samp class="w">
</samp><samp class="p" data-group-id="9085241920-2">{</samp><samp class="ss">:sample</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="9085241920-3">[</samp><samp class="ss">line</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">10</samp><samp class="p" data-group-id="9085241920-3">]</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="9085241920-4">[</samp><samp class="p" data-group-id="9085241920-4">]</samp><samp class="p" data-group-id="9085241920-2">}</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Macro</samp><samp class="o">.</samp><samp class="n">update_meta</samp><samp class="p" data-group-id="9085241920-5">(</samp><samp class="n">quoted</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="o">&amp;</samp><samp class="nc">Keyword</samp><samp class="o">.</samp><samp class="n">delete</samp><samp class="p" data-group-id="9085241920-6">(</samp><samp class="ni">&amp;1</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:line</samp><samp class="p" data-group-id="9085241920-6">)</samp><samp class="p" data-group-id="9085241920-5">)</samp><samp class="w">
</samp><samp class="p" data-group-id="9085241920-7">{</samp><samp class="ss">:sample</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="9085241920-8">[</samp><samp class="p" data-group-id="9085241920-8">]</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="9085241920-9">[</samp><samp class="p" data-group-id="9085241920-9">]</samp><samp class="p" data-group-id="9085241920-7">}</samp></code></pre>
  </section>
</section>
<section class="detail" id="validate/1">

  <div class="detail-header">
    <a href="#validate/1" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">validate(expr)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/macro.ex#L893" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> validate(<a href="typespecs.xhtml#built-in-types">term</a>()) :: :ok | {:error, <a href="typespecs.xhtml#built-in-types">term</a>()}</pre>

      </div>

<p>Validates the given expressions are valid quoted expressions.</p><p>Check the type <a href="#t:t/0"><code class="inline">Macro.t/0</code></a> for a complete specification of a
valid quoted expression.</p><p>It returns <code class="inline">:ok</code> if the expression is valid. Otherwise it returns
a tuple in the form of <code class="inline">{:error, remainder}</code> where <code class="inline">remainder</code> is
the invalid part of the quoted expression.</p><h2 id="validate/1-examples" class="section-heading"><a href="#validate/1-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Macro</samp><samp class="o">.</samp><samp class="n">validate</samp><samp class="p" data-group-id="2675948464-1">(</samp><samp class="p" data-group-id="2675948464-2">{</samp><samp class="ss">:two_element</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:tuple</samp><samp class="p" data-group-id="2675948464-2">}</samp><samp class="p" data-group-id="2675948464-1">)</samp><samp class="w">
</samp><samp class="ss">:ok</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Macro</samp><samp class="o">.</samp><samp class="n">validate</samp><samp class="p" data-group-id="2675948464-3">(</samp><samp class="p" data-group-id="2675948464-4">{</samp><samp class="ss">:three</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:element</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:tuple</samp><samp class="p" data-group-id="2675948464-4">}</samp><samp class="p" data-group-id="2675948464-3">)</samp><samp class="w">
</samp><samp class="p" data-group-id="2675948464-5">{</samp><samp class="ss">:error</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="2675948464-6">{</samp><samp class="ss">:three</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:element</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:tuple</samp><samp class="p" data-group-id="2675948464-6">}</samp><samp class="p" data-group-id="2675948464-5">}</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Macro</samp><samp class="o">.</samp><samp class="n">validate</samp><samp class="p" data-group-id="2675948464-7">(</samp><samp class="p" data-group-id="2675948464-8">[</samp><samp class="mi">1</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">2</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">3</samp><samp class="p" data-group-id="2675948464-8">]</samp><samp class="p" data-group-id="2675948464-7">)</samp><samp class="w">
</samp><samp class="ss">:ok</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Macro</samp><samp class="o">.</samp><samp class="n">validate</samp><samp class="p" data-group-id="2675948464-9">(</samp><samp class="p" data-group-id="2675948464-10">[</samp><samp class="mi">1</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">2</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">3</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="2675948464-11">{</samp><samp class="mi">4</samp><samp class="p" data-group-id="2675948464-11">}</samp><samp class="p" data-group-id="2675948464-10">]</samp><samp class="p" data-group-id="2675948464-9">)</samp><samp class="w">
</samp><samp class="p" data-group-id="2675948464-12">{</samp><samp class="ss">:error</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="2675948464-13">{</samp><samp class="mi">4</samp><samp class="p" data-group-id="2675948464-13">}</samp><samp class="p" data-group-id="2675948464-12">}</samp></code></pre>
  </section>
</section>
<section class="detail" id="var/2">

  <div class="detail-header">
    <a href="#var/2" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">var(var, context)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/macro.ex#L543" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> var(var, context) :: {var, [], context} when var: <a href="typespecs.xhtml#basic-types">atom</a>(), context: <a href="typespecs.xhtml#basic-types">atom</a>()</pre>

      </div>

<p>Generates an AST node representing the variable given
by the atoms <code class="inline">var</code> and <code class="inline">context</code>.</p><p>Note this variable is not unique. If you later on want
to access this same variable, you can invoke <a href="#var/2"><code class="inline">var/2</code></a>
again with the same arguments. Use <a href="#unique_var/2"><code class="inline">unique_var/2</code></a> to
generate a unique variable that can't be overridden.</p><h2 id="var/2-examples" class="section-heading"><a href="#var/2-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><p>In order to build a variable, a context is expected.
Most of the times, in order to preserve hygiene, the
context must be <a href="Kernel.SpecialForms.xhtml#__MODULE__/0"><code class="inline">__MODULE__/0</code></a>:</p><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Macro</samp><samp class="o">.</samp><samp class="n">var</samp><samp class="p" data-group-id="5341229714-1">(</samp><samp class="ss">:foo</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="bp">__MODULE__</samp><samp class="p" data-group-id="5341229714-1">)</samp><samp class="w">
</samp><samp class="p" data-group-id="5341229714-2">{</samp><samp class="ss">:foo</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="5341229714-3">[</samp><samp class="p" data-group-id="5341229714-3">]</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="bp">__MODULE__</samp><samp class="p" data-group-id="5341229714-2">}</samp></code></pre><p>However, if there is a need to access the user variable,
nil can be given:</p><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Macro</samp><samp class="o">.</samp><samp class="n">var</samp><samp class="p" data-group-id="0886664676-1">(</samp><samp class="ss">:foo</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="no">nil</samp><samp class="p" data-group-id="0886664676-1">)</samp><samp class="w">
</samp><samp class="p" data-group-id="0886664676-2">{</samp><samp class="ss">:foo</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="0886664676-3">[</samp><samp class="p" data-group-id="0886664676-3">]</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="no">nil</samp><samp class="p" data-group-id="0886664676-2">}</samp></code></pre>
  </section>
</section>

        </div>
      </section>


  </body>
</html>
