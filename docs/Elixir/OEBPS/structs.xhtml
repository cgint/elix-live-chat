<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"
      xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>Structs - Elixir v1.18.4</title>
    <meta name="generator" content="ExDoc v0.38.2" />
    <link type="text/css" rel="stylesheet" href="dist/epub-elixir-FNUUKFP7.css" />
    <script src="dist/epub-4WIP524F.js"></script>

  </head>
  <body class="content-inner">

    <h1 id="content">Structs</h1>
<p>We learned about maps <a href="keywords-and-maps.xhtml">in earlier chapters</a>:</p><pre><code class="makeup elixir" translate="no"><span class="gp unselectable">iex&gt; </span><span class="n">map</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p" data-group-id="3523787987-1">%{</span><span class="ss">a</span><span class="p">:</span><span class="w"> </span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="ss">b</span><span class="p">:</span><span class="w"> </span><span class="mi">2</span><span class="p" data-group-id="3523787987-1">}</span><span class="w">
</span><span class="p" data-group-id="3523787987-2">%{</span><span class="ss">a</span><span class="p">:</span><span class="w"> </span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="ss">b</span><span class="p">:</span><span class="w"> </span><span class="mi">2</span><span class="p" data-group-id="3523787987-2">}</span><span class="w">
</span><span class="gp unselectable">iex&gt; </span><span class="n">map</span><span class="p" data-group-id="3523787987-3">[</span><span class="ss">:a</span><span class="p" data-group-id="3523787987-3">]</span><span class="w">
</span><span class="mi">1</span><span class="w">
</span><span class="gp unselectable">iex&gt; </span><span class="p" data-group-id="3523787987-4">%{</span><span class="n">map</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="ss">a</span><span class="p">:</span><span class="w"> </span><span class="mi">3</span><span class="p" data-group-id="3523787987-4">}</span><span class="w">
</span><span class="p" data-group-id="3523787987-5">%{</span><span class="ss">a</span><span class="p">:</span><span class="w"> </span><span class="mi">3</span><span class="p">,</span><span class="w"> </span><span class="ss">b</span><span class="p">:</span><span class="w"> </span><span class="mi">2</span><span class="p" data-group-id="3523787987-5">}</span></code></pre><p>Structs are extensions built on top of maps that provide compile-time checks and default values.</p><h2 id="defining-structs">Defining structs</h2><p>To define a struct, the <a href="Kernel.xhtml#defstruct/1"><code class="inline">defstruct/1</code></a> construct is used:</p><pre><code class="makeup elixir" translate="no"><span class="gp unselectable">iex&gt; </span><span class="kd">defmodule</span><span class="w"> </span><span class="nc">User</span><span class="w"> </span><span class="k" data-group-id="2014832936-1">do</span><span class="w">
</span><span class="gp unselectable">...&gt; </span><span class="w">  </span><span class="kd">defstruct</span><span class="w"> </span><span class="ss">name</span><span class="p">:</span><span class="w"> </span><span class="s">&quot;John&quot;</span><span class="p">,</span><span class="w"> </span><span class="ss">age</span><span class="p">:</span><span class="w"> </span><span class="mi">27</span><span class="w">
</span><span class="gp unselectable">...&gt; </span><span class="k" data-group-id="2014832936-1">end</span></code></pre><p>The keyword list used with <code class="inline">defstruct</code> defines what fields the struct will have along with their default values. Structs take the name of the module they're defined in. In the example above, we defined a struct named <code class="inline">User</code>.</p><p>We can now create <code class="inline">User</code> structs by using a syntax similar to the one used to create maps:</p><pre><code class="makeup elixir" translate="no"><span class="gp unselectable">iex&gt; </span><span class="p" data-group-id="3990463014-1">%</span><span class="nc" data-group-id="3990463014-1">User</span><span class="p" data-group-id="3990463014-1">{</span><span class="p" data-group-id="3990463014-1">}</span><span class="w">
</span><span class="p" data-group-id="3990463014-2">%</span><span class="nc" data-group-id="3990463014-2">User</span><span class="p" data-group-id="3990463014-2">{</span><span class="ss">age</span><span class="p">:</span><span class="w"> </span><span class="mi">27</span><span class="p">,</span><span class="w"> </span><span class="ss">name</span><span class="p">:</span><span class="w"> </span><span class="s">&quot;John&quot;</span><span class="p" data-group-id="3990463014-2">}</span><span class="w">
</span><span class="gp unselectable">iex&gt; </span><span class="p" data-group-id="3990463014-3">%</span><span class="nc" data-group-id="3990463014-3">User</span><span class="p" data-group-id="3990463014-3">{</span><span class="ss">name</span><span class="p">:</span><span class="w"> </span><span class="s">&quot;Jane&quot;</span><span class="p" data-group-id="3990463014-3">}</span><span class="w">
</span><span class="p" data-group-id="3990463014-4">%</span><span class="nc" data-group-id="3990463014-4">User</span><span class="p" data-group-id="3990463014-4">{</span><span class="ss">age</span><span class="p">:</span><span class="w"> </span><span class="mi">27</span><span class="p">,</span><span class="w"> </span><span class="ss">name</span><span class="p">:</span><span class="w"> </span><span class="s">&quot;Jane&quot;</span><span class="p" data-group-id="3990463014-4">}</span></code></pre><p>Structs provide <em>compile-time</em> guarantees that only the fields defined through <code class="inline">defstruct</code> will be allowed to exist in a struct:</p><pre><code class="makeup elixir" translate="no"><span class="gp unselectable">iex&gt; </span><span class="p" data-group-id="8253956720-1">%</span><span class="nc" data-group-id="8253956720-1">User</span><span class="p" data-group-id="8253956720-1">{</span><span class="ss">oops</span><span class="p">:</span><span class="w"> </span><span class="ss">:field</span><span class="p" data-group-id="8253956720-1">}</span><span class="w">
</span><span class="gt">** (KeyError) key :oops not found expanding struct: User.__struct__/1</span></code></pre><h2 id="accessing-and-updating-structs">Accessing and updating structs</h2><p>Structs share the same syntax for accessing and updating fields as maps of fixed keys:</p><pre><code class="makeup elixir" translate="no"><span class="gp unselectable">iex&gt; </span><span class="n">john</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p" data-group-id="2783740477-1">%</span><span class="nc" data-group-id="2783740477-1">User</span><span class="p" data-group-id="2783740477-1">{</span><span class="p" data-group-id="2783740477-1">}</span><span class="w">
</span><span class="p" data-group-id="2783740477-2">%</span><span class="nc" data-group-id="2783740477-2">User</span><span class="p" data-group-id="2783740477-2">{</span><span class="ss">age</span><span class="p">:</span><span class="w"> </span><span class="mi">27</span><span class="p">,</span><span class="w"> </span><span class="ss">name</span><span class="p">:</span><span class="w"> </span><span class="s">&quot;John&quot;</span><span class="p" data-group-id="2783740477-2">}</span><span class="w">
</span><span class="gp unselectable">iex&gt; </span><span class="n">john</span><span class="o">.</span><span class="n">name</span><span class="w">
</span><span class="s">&quot;John&quot;</span><span class="w">
</span><span class="gp unselectable">iex&gt; </span><span class="n">jane</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p" data-group-id="2783740477-3">%{</span><span class="n">john</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="ss">name</span><span class="p">:</span><span class="w"> </span><span class="s">&quot;Jane&quot;</span><span class="p" data-group-id="2783740477-3">}</span><span class="w">
</span><span class="p" data-group-id="2783740477-4">%</span><span class="nc" data-group-id="2783740477-4">User</span><span class="p" data-group-id="2783740477-4">{</span><span class="ss">age</span><span class="p">:</span><span class="w"> </span><span class="mi">27</span><span class="p">,</span><span class="w"> </span><span class="ss">name</span><span class="p">:</span><span class="w"> </span><span class="s">&quot;Jane&quot;</span><span class="p" data-group-id="2783740477-4">}</span><span class="w">
</span><span class="gp unselectable">iex&gt; </span><span class="p" data-group-id="2783740477-5">%{</span><span class="n">jane</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="ss">oops</span><span class="p">:</span><span class="w"> </span><span class="ss">:field</span><span class="p" data-group-id="2783740477-5">}</span><span class="w">
</span><span class="gt">** (KeyError) key :oops not found in: %User{age: 27, name: &quot;Jane&quot;}</span></code></pre><p>When using the update syntax (<code class="inline">|</code>), Elixir is aware that no new keys will be added to the struct, allowing the maps underneath to share their structure in memory. In the example above, both <code class="inline">john</code> and <code class="inline">jane</code> share the same key structure in memory.</p><p>Structs can also be used in pattern matching, both for matching on the value of specific keys as well as for ensuring that the matching value is a struct of the same type as the matched value.</p><pre><code class="makeup elixir" translate="no"><span class="gp unselectable">iex&gt; </span><span class="p" data-group-id="5051354879-1">%</span><span class="nc" data-group-id="5051354879-1">User</span><span class="p" data-group-id="5051354879-1">{</span><span class="ss">name</span><span class="p">:</span><span class="w"> </span><span class="n">name</span><span class="p" data-group-id="5051354879-1">}</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">john</span><span class="w">
</span><span class="p" data-group-id="5051354879-2">%</span><span class="nc" data-group-id="5051354879-2">User</span><span class="p" data-group-id="5051354879-2">{</span><span class="ss">age</span><span class="p">:</span><span class="w"> </span><span class="mi">27</span><span class="p">,</span><span class="w"> </span><span class="ss">name</span><span class="p">:</span><span class="w"> </span><span class="s">&quot;John&quot;</span><span class="p" data-group-id="5051354879-2">}</span><span class="w">
</span><span class="gp unselectable">iex&gt; </span><span class="n">name</span><span class="w">
</span><span class="s">&quot;John&quot;</span><span class="w">
</span><span class="gp unselectable">iex&gt; </span><span class="p" data-group-id="5051354879-3">%</span><span class="nc" data-group-id="5051354879-3">User</span><span class="p" data-group-id="5051354879-3">{</span><span class="p" data-group-id="5051354879-3">}</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p" data-group-id="5051354879-4">%{</span><span class="p" data-group-id="5051354879-4">}</span><span class="w">
</span><span class="gt">** (MatchError) no match of right hand side value: %{}</span></code></pre><p>For more details on creating, updating, and pattern matching structs, see the documentation for <a href="Kernel.SpecialForms.xhtml#%25/2"><code class="inline">%/2</code></a>.</p><h2 id="structs-are-bare-maps-underneath">Structs are bare maps underneath</h2><p>Structs are simply maps with a &quot;special&quot; field named <code class="inline">__struct__</code> that holds the name of the struct:</p><pre><code class="makeup elixir" translate="no"><span class="gp unselectable">iex&gt; </span><span class="n">is_map</span><span class="p" data-group-id="5309341833-1">(</span><span class="n">john</span><span class="p" data-group-id="5309341833-1">)</span><span class="w">
</span><span class="no">true</span><span class="w">
</span><span class="gp unselectable">iex&gt; </span><span class="n">john</span><span class="o">.</span><span class="c">__struct__</span><span class="w">
</span><span class="nc">User</span></code></pre><p>However, structs do not inherit any of the protocols that maps do. For example, you can neither enumerate nor access a struct:</p><pre><code class="makeup elixir" translate="no"><span class="gp unselectable">iex&gt; </span><span class="n">john</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p" data-group-id="4628251167-1">%</span><span class="nc" data-group-id="4628251167-1">User</span><span class="p" data-group-id="4628251167-1">{</span><span class="p" data-group-id="4628251167-1">}</span><span class="w">
</span><span class="p" data-group-id="4628251167-2">%</span><span class="nc" data-group-id="4628251167-2">User</span><span class="p" data-group-id="4628251167-2">{</span><span class="ss">age</span><span class="p">:</span><span class="w"> </span><span class="mi">27</span><span class="p">,</span><span class="w"> </span><span class="ss">name</span><span class="p">:</span><span class="w"> </span><span class="s">&quot;John&quot;</span><span class="p" data-group-id="4628251167-2">}</span><span class="w">
</span><span class="gp unselectable">iex&gt; </span><span class="n">john</span><span class="p" data-group-id="4628251167-3">[</span><span class="ss">:name</span><span class="p" data-group-id="4628251167-3">]</span><span class="w">
</span><span class="gt">** (UndefinedFunctionError) function User.fetch/2 is undefined (User does not implement the Access behaviour)
             User.fetch(%User{age: 27, name: &quot;John&quot;}, :name)</span><span class="w">
</span><span class="gp unselectable">iex&gt; </span><span class="nc">Enum</span><span class="o">.</span><span class="n">each</span><span class="p" data-group-id="4628251167-4">(</span><span class="n">john</span><span class="p">,</span><span class="w"> </span><span class="k" data-group-id="4628251167-5">fn</span><span class="w"> </span><span class="p" data-group-id="4628251167-6">{</span><span class="n">field</span><span class="p">,</span><span class="w"> </span><span class="n">value</span><span class="p" data-group-id="4628251167-6">}</span><span class="w"> </span><span class="o">-&gt;</span><span class="w"> </span><span class="nc">IO</span><span class="o">.</span><span class="n">puts</span><span class="p" data-group-id="4628251167-7">(</span><span class="n">value</span><span class="p" data-group-id="4628251167-7">)</span><span class="w"> </span><span class="k" data-group-id="4628251167-5">end</span><span class="p" data-group-id="4628251167-4">)</span><span class="w">
</span><span class="gt">** (Protocol.UndefinedError) protocol Enumerable not implemented for %User{age: 27, name: &quot;John&quot;} of type User (a struct)</span></code></pre><p>Structs alongside protocols provide one of the most important features for Elixir developers: data polymorphism. That's what we will explore in the next chapter.</p><h2 id="default-values-and-required-keys">Default values and required keys</h2><p>If you don't specify a default key value when defining a struct, <code class="inline">nil</code> will be assumed:</p><pre><code class="makeup elixir" translate="no"><span class="gp unselectable">iex&gt; </span><span class="kd">defmodule</span><span class="w"> </span><span class="nc">Product</span><span class="w"> </span><span class="k" data-group-id="5342726867-1">do</span><span class="w">
</span><span class="gp unselectable">...&gt; </span><span class="w">  </span><span class="kd">defstruct</span><span class="w"> </span><span class="p" data-group-id="5342726867-2">[</span><span class="ss">:name</span><span class="p" data-group-id="5342726867-2">]</span><span class="w">
</span><span class="gp unselectable">...&gt; </span><span class="k" data-group-id="5342726867-1">end</span><span class="w">
</span><span class="gp unselectable">iex&gt; </span><span class="p" data-group-id="5342726867-3">%</span><span class="nc" data-group-id="5342726867-3">Product</span><span class="p" data-group-id="5342726867-3">{</span><span class="p" data-group-id="5342726867-3">}</span><span class="w">
</span><span class="p" data-group-id="5342726867-4">%</span><span class="nc" data-group-id="5342726867-4">Product</span><span class="p" data-group-id="5342726867-4">{</span><span class="ss">name</span><span class="p">:</span><span class="w"> </span><span class="no">nil</span><span class="p" data-group-id="5342726867-4">}</span></code></pre><p>You can define a structure combining both fields with explicit default values, and implicit <code class="inline">nil</code> values. In this case you must first specify the fields which implicitly default to nil:</p><pre><code class="makeup elixir" translate="no"><span class="gp unselectable">iex&gt; </span><span class="kd">defmodule</span><span class="w"> </span><span class="nc">User</span><span class="w"> </span><span class="k" data-group-id="7048247012-1">do</span><span class="w">
</span><span class="gp unselectable">...&gt; </span><span class="w">  </span><span class="kd">defstruct</span><span class="w"> </span><span class="p" data-group-id="7048247012-2">[</span><span class="ss">:email</span><span class="p">,</span><span class="w"> </span><span class="ss">name</span><span class="p">:</span><span class="w"> </span><span class="s">&quot;John&quot;</span><span class="p">,</span><span class="w"> </span><span class="ss">age</span><span class="p">:</span><span class="w"> </span><span class="mi">27</span><span class="p" data-group-id="7048247012-2">]</span><span class="w">
</span><span class="gp unselectable">...&gt; </span><span class="k" data-group-id="7048247012-1">end</span><span class="w">
</span><span class="gp unselectable">iex&gt; </span><span class="p" data-group-id="7048247012-3">%</span><span class="nc" data-group-id="7048247012-3">User</span><span class="p" data-group-id="7048247012-3">{</span><span class="p" data-group-id="7048247012-3">}</span><span class="w">
</span><span class="p" data-group-id="7048247012-4">%</span><span class="nc" data-group-id="7048247012-4">User</span><span class="p" data-group-id="7048247012-4">{</span><span class="ss">age</span><span class="p">:</span><span class="w"> </span><span class="mi">27</span><span class="p">,</span><span class="w"> </span><span class="ss">email</span><span class="p">:</span><span class="w"> </span><span class="no">nil</span><span class="p">,</span><span class="w"> </span><span class="ss">name</span><span class="p">:</span><span class="w"> </span><span class="s">&quot;John&quot;</span><span class="p" data-group-id="7048247012-4">}</span></code></pre><p>Doing it in reverse order will raise a syntax error:</p><pre><code class="makeup elixir" translate="no"><span class="gp unselectable">iex&gt; </span><span class="kd">defmodule</span><span class="w"> </span><span class="nc">User</span><span class="w"> </span><span class="k" data-group-id="1721760895-1">do</span><span class="w">
</span><span class="gp unselectable">...&gt; </span><span class="w">  </span><span class="kd">defstruct</span><span class="w"> </span><span class="p" data-group-id="1721760895-2">[</span><span class="ss">name</span><span class="p">:</span><span class="w"> </span><span class="s">&quot;John&quot;</span><span class="p">,</span><span class="w"> </span><span class="ss">age</span><span class="p">:</span><span class="w"> </span><span class="mi">27</span><span class="p">,</span><span class="w"> </span><span class="ss">:email</span><span class="p" data-group-id="1721760895-2">]</span><span class="w">
</span><span class="gp unselectable">...&gt; </span><span class="k" data-group-id="1721760895-1">end</span><span class="w">
</span><span class="gt">** (SyntaxError) iex:107: unexpected expression after keyword list. Keyword lists must always come last in lists and maps.</span></code></pre><p>You can also enforce that certain keys have to be specified when creating the struct via the <code class="inline">@enforce_keys</code> module attribute:</p><pre><code class="makeup elixir" translate="no"><span class="gp unselectable">iex&gt; </span><span class="kd">defmodule</span><span class="w"> </span><span class="nc">Car</span><span class="w"> </span><span class="k" data-group-id="6237462557-1">do</span><span class="w">
</span><span class="gp unselectable">...&gt; </span><span class="w">  </span><span class="na">@enforce_keys</span><span class="w"> </span><span class="p" data-group-id="6237462557-2">[</span><span class="ss">:make</span><span class="p" data-group-id="6237462557-2">]</span><span class="w">
</span><span class="gp unselectable">...&gt; </span><span class="w">  </span><span class="kd">defstruct</span><span class="w"> </span><span class="p" data-group-id="6237462557-3">[</span><span class="ss">:model</span><span class="p">,</span><span class="w"> </span><span class="ss">:make</span><span class="p" data-group-id="6237462557-3">]</span><span class="w">
</span><span class="gp unselectable">...&gt; </span><span class="k" data-group-id="6237462557-1">end</span><span class="w">
</span><span class="gp unselectable">iex&gt; </span><span class="p" data-group-id="6237462557-4">%</span><span class="nc" data-group-id="6237462557-4">Car</span><span class="p" data-group-id="6237462557-4">{</span><span class="p" data-group-id="6237462557-4">}</span><span class="w">
</span><span class="gt">** (ArgumentError) the following keys must also be given when building struct Car: [:make]
    expanding struct: Car.__struct__/1</span></code></pre><p>Enforcing keys provides a simple compile-time guarantee to aid developers when building structs. It is not enforced on updates and it does not provide any sort of value-validation.</p>

  </body>
</html>
