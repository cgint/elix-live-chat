<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"
      xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>Regex - Elixir v1.18.4</title>
    <meta name="generator" content="ExDoc v0.38.2" />
    <link type="text/css" rel="stylesheet" href="dist/epub-elixir-FNUUKFP7.css" />
    <script src="dist/epub-4WIP524F.js"></script>

  </head>
  <body class="content-inner">

    <h1 id="content">
Regex 
    </h1>


      <section id="moduledoc" class="docstring">
<p>Provides regular expressions for Elixir.</p><p>Regex is based on PCRE (Perl Compatible Regular Expressions) and
built on top of Erlang's <code class="inline">:re</code> module. More information can be found
in the <a href="https://www.erlang.org/doc/apps/stdlib/re.html"><code class="inline">:re</code> module documentation</a>.</p><p>Regular expressions in Elixir can be created using the sigils
<code class="inline">~r</code> (see <a href="Kernel.xhtml#sigil_r/2"><code class="inline">sigil_r/2</code></a>):</p><pre><code class="makeup elixir" translate="no"><samp class="c1"># A simple regular expression that matches foo anywhere in the string</samp><samp class="w">
</samp><samp class="sr">~r/foo/</samp><samp class="w">

</samp><samp class="c1"># A regular expression with case insensitive and Unicode options</samp><samp class="w">
</samp><samp class="sr">~r/foo/iu</samp></code></pre><p>Regular expressions created via sigils are pre-compiled and stored
in the <code class="inline">.beam</code> file. Note that this may be a problem if you are precompiling
Elixir, see the &quot;Precompilation&quot; section for more information.</p><p>A Regex is represented internally as the <a href="Regex.xhtml"><code class="inline">Regex</code></a> struct. Therefore,
<code class="inline">%Regex{}</code> can be used whenever there is a need to match on them.
Keep in mind that all of the structs fields are private. There is
also not guarantee two regular expressions from the same source are
equal, for example:</p><pre><code class="makeup elixir" translate="no"><samp class="sr">~r/(?&lt;foo&gt;.)(?&lt;bar&gt;.)/</samp><samp class="w"> </samp><samp class="o">==</samp><samp class="w"> </samp><samp class="sr">~r/(?&lt;foo&gt;.)(?&lt;bar&gt;.)/</samp></code></pre><p>may return <code class="inline">true</code> or <code class="inline">false</code> depending on your machine, endianness,
available optimizations and others. You can, however, retrieve the source
of a compiled regular expression by accessing the <code class="inline">source</code> field, and then
compare those directly:</p><pre><code class="makeup elixir" translate="no"><samp class="sr">~r/(?&lt;foo&gt;.)(?&lt;bar&gt;.)/</samp><samp class="o">.</samp><samp class="n">source</samp><samp class="w"> </samp><samp class="o">==</samp><samp class="w"> </samp><samp class="sr">~r/(?&lt;foo&gt;.)(?&lt;bar&gt;.)/</samp><samp class="o">.</samp><samp class="n">source</samp></code></pre><h2 id="module-escapes">Escapes</h2><p>Escape sequences are split into two categories.</p><h3 id="module-non-printing-characters">Non-printing characters</h3><ul><li><code class="inline">\a</code> - Alarm, that is, the BEL character (hex 07)</li><li><code class="inline">\e</code> - Escape (hex 1B)</li><li><code class="inline">\f</code> - Form feed (hex 0C)</li><li><code class="inline">\n</code> - Line feed (hex 0A)</li><li><code class="inline">\r</code> - Carriage return (hex 0D)</li><li><code class="inline">\t</code> - Tab (hex 09)</li><li><code class="inline">\xhh</code> - Character with hex code hh</li><li><code class="inline">\x{hhh..}</code> - Character with hex code hhh..</li></ul><p><code class="inline">\u</code> and <code class="inline">\U</code> are not supported. Other escape sequences, such as <code class="inline">\ddd</code>
for octals, are supported but discouraged.</p><h3 id="module-generic-character-types">Generic character types</h3><ul><li><code class="inline">\d</code> - Any decimal digit</li><li><code class="inline">\D</code> - Any character that is not a decimal digit</li><li><code class="inline">\h</code> - Any horizontal whitespace character</li><li><code class="inline">\H</code> - Any character that is not a horizontal whitespace character</li><li><code class="inline">\s</code> - Any whitespace character</li><li><code class="inline">\S</code> - Any character that is not a whitespace character</li><li><code class="inline">\v</code> - Any vertical whitespace character</li><li><code class="inline">\V</code> - Any character that is not a vertical whitespace character</li><li><code class="inline">\w</code> - Any &quot;word&quot; character</li><li><code class="inline">\W</code> - Any &quot;non-word&quot; character</li></ul><h2 id="module-modifiers">Modifiers</h2><p>The modifiers available when creating a Regex are:</p><ul><li><p><code class="inline">:unicode</code> (u) - enables Unicode specific patterns like <code class="inline">\p</code> and causes
character classes like <code class="inline">\w</code>, <code class="inline">\W</code>, <code class="inline">\s</code>, and the like to also match on Unicode
(see examples below in &quot;Character classes&quot;). It expects valid Unicode
strings to be given on match</p></li><li><p><code class="inline">:caseless</code> (i) - adds case insensitivity</p></li><li><p><code class="inline">:dotall</code> (s) - causes dot to match newlines and also set newline to
anycrlf; the new line setting can be overridden by setting <code class="inline">(*CR)</code> or
<code class="inline">(*LF)</code> or <code class="inline">(*CRLF)</code> or <code class="inline">(*ANY)</code> according to <code class="inline">:re</code> documentation</p></li><li><p><code class="inline">:multiline</code> (m) - causes <code class="inline">^</code> and <code class="inline">$</code> to mark the beginning and end of
each line; use <code class="inline">\A</code> and <code class="inline">\z</code> to match the end or beginning of the string</p></li><li><p><code class="inline">:extended</code> (x) - whitespace characters are ignored except when escaped
or within <code class="inline">[..]</code>, and allow <code class="inline">#</code> to delimit comments</p></li><li><p><code class="inline">:firstline</code> (f) - forces the unanchored pattern to match before or at the
first newline, though the matched text may continue over the newline</p></li><li><p><code class="inline">:ungreedy</code> (U) - inverts the &quot;greediness&quot; of the regexp
(the previous <code class="inline">r</code> option is deprecated in favor of <code class="inline">U</code>)</p></li></ul><p>The options not available are:</p><ul><li><code class="inline">:anchored</code> - not available, use <code class="inline">^</code> or <code class="inline">\A</code> instead</li><li><code class="inline">:dollar_endonly</code> - not available, use <code class="inline">\z</code> instead</li><li><code class="inline">:no_auto_capture</code> - not available, use <code class="inline">?:</code> instead</li><li><code class="inline">:newline</code> - not available, use <code class="inline">(*CR)</code> or <code class="inline">(*LF)</code> or <code class="inline">(*CRLF)</code> or
<code class="inline">(*ANYCRLF)</code> or <code class="inline">(*ANY)</code> at the beginning of the regexp according to the
<code class="inline">:re</code> documentation</li></ul><h2 id="module-captures">Captures</h2><p>Many functions in this module handle what to capture in a regex
match via the <code class="inline">:capture</code> option. The supported values are:</p><ul><li><p><code class="inline">:all</code> - all captured subpatterns including the complete matching string
(this is the default)</p></li><li><p><code class="inline">:first</code> - only the first captured subpattern, which is always the
complete matching part of the string; all explicitly captured subpatterns
are discarded</p></li><li><p><code class="inline">:all_but_first</code> - all but the first matching subpattern, i.e. all
explicitly captured subpatterns, but not the complete matching part of
the string</p></li><li><p><code class="inline">:none</code> - does not return matching subpatterns at all</p></li><li><p><code class="inline">:all_names</code> - captures all named subpattern matches in the Regex as a list
ordered <strong>alphabetically</strong> by the names of the subpatterns</p></li><li><p><code class="inline">list(binary | atom)</code> - a list of named captures to capture</p></li></ul><h2 id="module-character-classes">Character classes</h2><p>Regex supports several built in named character classes. These are used by
enclosing the class name in <code class="inline">[: :]</code> inside a group. For example:</p><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">match?</samp><samp class="p" data-group-id="2227163202-1">(</samp><samp class="s">&quot;123&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="sr">~r/^[[:alnum:]]+$/</samp><samp class="p" data-group-id="2227163202-1">)</samp><samp class="w">
</samp><samp class="no">true</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">match?</samp><samp class="p" data-group-id="2227163202-2">(</samp><samp class="s">&quot;123 456&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="sr">~r/^[[:alnum:][:blank:]]+$/</samp><samp class="p" data-group-id="2227163202-2">)</samp><samp class="w">
</samp><samp class="no">true</samp></code></pre><p>The supported class names are:</p><ul><li>alnum - Letters and digits</li><li>alpha - Letters</li><li>blank - Space or tab only</li><li>cntrl - Control characters</li><li>digit - Decimal digits (same as \d)</li><li>graph - Printing characters, excluding space</li><li>lower - Lowercase letters</li><li>print - Printing characters, including space</li><li>punct - Printing characters, excluding letters, digits, and space</li><li>space - Whitespace (the same as \s from PCRE 8.34)</li><li>upper - Uppercase letters</li><li>word  - &quot;Word&quot; characters (same as \w)</li><li>xdigit - Hexadecimal digits</li></ul><p>There is another character class, <code class="inline">ascii</code>, that erroneously matches
Latin-1 characters instead of the 0-127 range specified by POSIX. This
cannot be fixed without altering the behavior of other classes, so we
recommend matching the range with <code class="inline">[\\0-\x7f]</code> instead.</p><p>Note the behavior of those classes may change according to the Unicode
and other modifiers:</p><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">match?</samp><samp class="p" data-group-id="4764246458-1">(</samp><samp class="s">&quot;josé&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="sr">~r/^[[:lower:]]+$/</samp><samp class="p" data-group-id="4764246458-1">)</samp><samp class="w">
</samp><samp class="no">false</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">match?</samp><samp class="p" data-group-id="4764246458-2">(</samp><samp class="s">&quot;josé&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="sr">~r/^[[:lower:]]+$/u</samp><samp class="p" data-group-id="4764246458-2">)</samp><samp class="w">
</samp><samp class="no">true</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Regex</samp><samp class="o">.</samp><samp class="n">replace</samp><samp class="p" data-group-id="4764246458-3">(</samp><samp class="sr">~r/</samp><samp class="se">\s</samp><samp class="sr">/</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;Unicode</samp><samp class="se">\u00A0</samp><samp class="s">spaces&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;-&quot;</samp><samp class="p" data-group-id="4764246458-3">)</samp><samp class="w">
</samp><samp class="s">&quot;Unicode spaces&quot;</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Regex</samp><samp class="o">.</samp><samp class="n">replace</samp><samp class="p" data-group-id="4764246458-4">(</samp><samp class="sr">~r/</samp><samp class="se">\s</samp><samp class="sr">/u</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;Unicode</samp><samp class="se">\u00A0</samp><samp class="s">spaces&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;-&quot;</samp><samp class="p" data-group-id="4764246458-4">)</samp><samp class="w">
</samp><samp class="s">&quot;Unicode-spaces&quot;</samp></code></pre><h2 id="module-precompilation">Precompilation</h2><p>Regular expressions built with sigil are precompiled and stored in <code class="inline">.beam</code>
files. Precompiled regexes will be checked in runtime and may work slower
between operating systems and OTP releases. This is rarely a problem, as most Elixir code
shared during development is compiled on the target (such as dependencies,
archives, and escripts) and, when running in production, the code must either
be compiled on the target (via <a href="https://hexdocs.pm/mix/Mix.Tasks.Compile.html"><code class="inline">mix compile</code></a> or similar) or released on the
host (via <code class="inline">mix releases</code> or similar) with a matching OTP, operating system
and architecture as the target.</p><p>If you know you are running on a different system than the current one and
you are doing multiple matches with the regex, you can manually invoke
<a href="#recompile/1"><code class="inline">Regex.recompile/1</code></a> or <a href="#recompile!/1"><code class="inline">Regex.recompile!/1</code></a> to perform a runtime version
check and recompile the regex if necessary.</p>
      </section>


      <section id="summary" class="details-list">
        <h1 class="section-heading">Summary</h1>
<div class="summary-types summary">
  <h2>
    <a href="#types">Types</a>
  </h2>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#t:t/0" data-no-tooltip="" translate="no">t()</a>

      </div>

    </div>

</div>
<div class="summary-functions summary">
  <h2>
    <a href="#functions">Functions</a>
  </h2>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#compile/2" data-no-tooltip="" translate="no">compile(source, opts \\ &quot;&quot;)</a>

      </div>

        <div class="summary-synopsis"><p>Compiles the regular expression.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#compile!/2" data-no-tooltip="" translate="no">compile!(source, options \\ &quot;&quot;)</a>

      </div>

        <div class="summary-synopsis"><p>Compiles the regular expression and raises <a><code class="inline">Regex.CompileError</code></a> in case of errors.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#escape/1" data-no-tooltip="" translate="no">escape(string)</a>

      </div>

        <div class="summary-synopsis"><p>Escapes a string to be literally matched in a regex.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#match?/2" data-no-tooltip="" translate="no">match?(regex, string)</a>

      </div>

        <div class="summary-synopsis"><p>Returns a boolean indicating whether there was a match or not.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#named_captures/3" data-no-tooltip="" translate="no">named_captures(regex, string, options \\ [])</a>

      </div>

        <div class="summary-synopsis"><p>Returns the given captures as a map or <code class="inline">nil</code> if no captures are found.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#names/1" data-no-tooltip="" translate="no">names(regex)</a>

      </div>

        <div class="summary-synopsis"><p>Returns a list of names in the regex.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#opts/1" data-no-tooltip="" translate="no">opts(regex)</a>

      </div>

        <div class="summary-synopsis"><p>Returns the regex options.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#re_pattern/1" data-no-tooltip="" translate="no">re_pattern(regex)</a>

      </div>

        <div class="summary-synopsis"><p>Returns the underlying <code class="inline">re_pattern</code> in the regular expression.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#recompile/1" data-no-tooltip="" translate="no">recompile(regex)</a>

      </div>

        <div class="summary-synopsis"><p>Recompiles the existing regular expression if necessary.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#recompile!/1" data-no-tooltip="" translate="no">recompile!(regex)</a>

      </div>

        <div class="summary-synopsis"><p>Recompiles the existing regular expression and raises <a><code class="inline">Regex.CompileError</code></a> in case of errors.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#replace/4" data-no-tooltip="" translate="no">replace(regex, string, replacement, options \\ [])</a>

      </div>

        <div class="summary-synopsis"><p>Receives a regex, a binary and a replacement, returns a new
binary where all matches are replaced by the replacement.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#run/3" data-no-tooltip="" translate="no">run(regex, string, options \\ [])</a>

      </div>

        <div class="summary-synopsis"><p>Runs the regular expression against the given string until the first match.
It returns a list with all captures or <code class="inline">nil</code> if no match occurred.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#scan/3" data-no-tooltip="" translate="no">scan(regex, string, options \\ [])</a>

      </div>

        <div class="summary-synopsis"><p>Same as <a><code class="inline">run/3</code></a> but returns all non-overlapping matches of the regular expression.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#source/1" data-no-tooltip="" translate="no">source(regex)</a>

      </div>

        <div class="summary-synopsis"><p>Returns the regex source as a binary.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#split/3" data-no-tooltip="" translate="no">split(regex, string, options \\ [])</a>

      </div>

        <div class="summary-synopsis"><p>Splits the given target based on the given pattern and in the given number of
parts.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#version/0" data-no-tooltip="" translate="no">version()</a>

      </div>

        <div class="summary-synopsis"><p>Returns the version of the underlying Regex engine.</p></div>

    </div>

</div>

      </section>


      <section id="types" class="details-list">
        <h1 class="section-heading">Types</h1>

        <div class="types-list">
<section class="detail" id="t:t/0">

  <div class="detail-header">
    <a href="#t:t/0" class="detail-link" data-no-tooltip="" aria-label="Link to this type">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">t()</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/regex.ex#L189" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@type</span> t() :: %Regex{
  opts: <a href="typespecs.xhtml#built-in-types">binary</a>() | [<a href="typespecs.xhtml#built-in-types">term</a>()],
  re_pattern: <a href="typespecs.xhtml#built-in-types">term</a>(),
  re_version: <a href="typespecs.xhtml#built-in-types">term</a>(),
  source: <a href="typespecs.xhtml#built-in-types">binary</a>()
}</pre>

      </div>


  </section>
</section>

        </div>
      </section>

      <section id="functions" class="details-list">
        <h1 class="section-heading">Functions</h1>

        <div class="functions-list">
<section class="detail" id="compile/2">

    <span id="compile/1"></span>

  <div class="detail-header">
    <a href="#compile/2" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">compile(source, opts \\ &quot;&quot;)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/regex.ex#L223" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> compile(<a href="typespecs.xhtml#built-in-types">binary</a>(), <a href="typespecs.xhtml#built-in-types">binary</a>() | [<a href="typespecs.xhtml#built-in-types">term</a>()]) :: {:ok, <a href="#t:t/0">t</a>()} | {:error, <a href="typespecs.xhtml#built-in-types">term</a>()}</pre>

      </div>

<p>Compiles the regular expression.</p><p>The given options can either be a binary with the characters
representing the same regex options given to the
<code class="inline">~r</code> (see <a href="Kernel.xhtml#sigil_r/2"><code class="inline">sigil_r/2</code></a>) sigil, or a list of options, as
expected by the Erlang's <a href="https://www.erlang.org/doc/apps/stdlib/re.html"><code class="inline">:re</code></a> module.</p><p>It returns <code class="inline">{:ok, regex}</code> in case of success,
<code class="inline">{:error, reason}</code> otherwise.</p><h2 id="compile/2-examples" class="section-heading"><a href="#compile/2-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="nc">Regex</samp><samp class="o">.</samp><samp class="n">compile</samp><samp class="p" data-group-id="0759323964-1">(</samp><samp class="s">&quot;foo&quot;</samp><samp class="p" data-group-id="0759323964-1">)</samp><samp class="w">
</samp><samp class="c1">#=&gt; {:ok, ~r/foo/}</samp><samp class="w">

</samp><samp class="nc">Regex</samp><samp class="o">.</samp><samp class="n">compile</samp><samp class="p" data-group-id="0759323964-2">(</samp><samp class="s">&quot;foo&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;i&quot;</samp><samp class="p" data-group-id="0759323964-2">)</samp><samp class="w">
</samp><samp class="c1">#=&gt;{:ok, ~r/foo/i}</samp><samp class="w">

</samp><samp class="nc">Regex</samp><samp class="o">.</samp><samp class="n">compile</samp><samp class="p" data-group-id="0759323964-3">(</samp><samp class="s">&quot;*foo&quot;</samp><samp class="p" data-group-id="0759323964-3">)</samp><samp class="w">
</samp><samp class="c1">#=&gt; {:error, {~c&quot;nothing to repeat&quot;, 0}}</samp></code></pre>
  </section>
</section>
<section class="detail" id="compile!/2">

    <span id="compile!/1"></span>

  <div class="detail-header">
    <a href="#compile!/2" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">compile!(source, options \\ &quot;&quot;)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/regex.ex#L251" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> compile!(<a href="typespecs.xhtml#built-in-types">binary</a>(), <a href="typespecs.xhtml#built-in-types">binary</a>() | [<a href="typespecs.xhtml#built-in-types">term</a>()]) :: <a href="#t:t/0">t</a>()</pre>

      </div>

<p>Compiles the regular expression and raises <a href="Regex.CompileError.xhtml"><code class="inline">Regex.CompileError</code></a> in case of errors.</p>
  </section>
</section>
<section class="detail" id="escape/1">

  <div class="detail-header">
    <a href="#escape/1" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">escape(string)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/regex.ex#L868" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> escape(<a href="String.xhtml#t:t/0">String.t</a>()) :: <a href="String.xhtml#t:t/0">String.t</a>()</pre>

      </div>

<p>Escapes a string to be literally matched in a regex.</p><h2 id="escape/1-examples" class="section-heading"><a href="#escape/1-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Regex</samp><samp class="o">.</samp><samp class="n">escape</samp><samp class="p" data-group-id="2758149575-1">(</samp><samp class="s">&quot;.&quot;</samp><samp class="p" data-group-id="2758149575-1">)</samp><samp class="w">
</samp><samp class="s">&quot;</samp><samp class="se">\\</samp><samp class="s">.&quot;</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Regex</samp><samp class="o">.</samp><samp class="n">escape</samp><samp class="p" data-group-id="2758149575-2">(</samp><samp class="s">&quot;</samp><samp class="se">\\</samp><samp class="s">what if&quot;</samp><samp class="p" data-group-id="2758149575-2">)</samp><samp class="w">
</samp><samp class="s">&quot;</samp><samp class="se">\\</samp><samp class="se">\\</samp><samp class="s">what</samp><samp class="se">\\</samp><samp class="s"> if&quot;</samp></code></pre>
  </section>
</section>
<section class="detail" id="match?/2">

  <div class="detail-header">
    <a href="#match?/2" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">match?(regex, string)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/regex.ex#L316" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> match?(<a href="#t:t/0">t</a>(), <a href="String.xhtml#t:t/0">String.t</a>()) :: <a href="typespecs.xhtml#built-in-types">boolean</a>()</pre>

      </div>

<p>Returns a boolean indicating whether there was a match or not.</p><h2 id="match?/2-examples" class="section-heading"><a href="#match?/2-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Regex</samp><samp class="o">.</samp><samp class="n">match?</samp><samp class="p" data-group-id="3133425424-1">(</samp><samp class="sr">~r/foo/</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;foo&quot;</samp><samp class="p" data-group-id="3133425424-1">)</samp><samp class="w">
</samp><samp class="no">true</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Regex</samp><samp class="o">.</samp><samp class="n">match?</samp><samp class="p" data-group-id="3133425424-2">(</samp><samp class="sr">~r/foo/</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;bar&quot;</samp><samp class="p" data-group-id="3133425424-2">)</samp><samp class="w">
</samp><samp class="no">false</samp></code></pre><p>Elixir also provides text-based match operator <a href="Kernel.xhtml#=~/2"><code class="inline">=~/2</code></a> and function <a href="String.xhtml#match?/2"><code class="inline">String.match?/2</code></a> as
an alternative to test strings against regular expressions and
strings.</p>
  </section>
</section>
<section class="detail" id="named_captures/3">

    <span id="named_captures/2"></span>

  <div class="detail-header">
    <a href="#named_captures/3" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">named_captures(regex, string, options \\ [])</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/regex.ex#L393" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> named_captures(<a href="#t:t/0">t</a>(), <a href="String.xhtml#t:t/0">String.t</a>(), [<a href="typespecs.xhtml#built-in-types">term</a>()]) :: <a href="typespecs.xhtml#basic-types">map</a>() | nil</pre>

      </div>

<p>Returns the given captures as a map or <code class="inline">nil</code> if no captures are found.</p><h2 id="named_captures/3-options" class="section-heading"><a href="#named_captures/3-options" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Options</span></h2><ul><li><code class="inline">:return</code> - when set to <code class="inline">:index</code>, returns byte index and match length.
Defaults to <code class="inline">:binary</code>.</li></ul><h2 id="named_captures/3-examples" class="section-heading"><a href="#named_captures/3-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Regex</samp><samp class="o">.</samp><samp class="n">named_captures</samp><samp class="p" data-group-id="9659244535-1">(</samp><samp class="sr">~r/c(?&lt;foo&gt;d)/</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;abcd&quot;</samp><samp class="p" data-group-id="9659244535-1">)</samp><samp class="w">
</samp><samp class="p" data-group-id="9659244535-2">%{</samp><samp class="s">&quot;foo&quot;</samp><samp class="w"> </samp><samp class="p">=&gt;</samp><samp class="w"> </samp><samp class="s">&quot;d&quot;</samp><samp class="p" data-group-id="9659244535-2">}</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Regex</samp><samp class="o">.</samp><samp class="n">named_captures</samp><samp class="p" data-group-id="9659244535-3">(</samp><samp class="sr">~r/a(?&lt;foo&gt;b)c(?&lt;bar&gt;d)/</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;abcd&quot;</samp><samp class="p" data-group-id="9659244535-3">)</samp><samp class="w">
</samp><samp class="p" data-group-id="9659244535-4">%{</samp><samp class="s">&quot;bar&quot;</samp><samp class="w"> </samp><samp class="p">=&gt;</samp><samp class="w"> </samp><samp class="s">&quot;d&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;foo&quot;</samp><samp class="w"> </samp><samp class="p">=&gt;</samp><samp class="w"> </samp><samp class="s">&quot;b&quot;</samp><samp class="p" data-group-id="9659244535-4">}</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Regex</samp><samp class="o">.</samp><samp class="n">named_captures</samp><samp class="p" data-group-id="9659244535-5">(</samp><samp class="sr">~r/a(?&lt;foo&gt;b)c(?&lt;bar&gt;d)/</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;efgh&quot;</samp><samp class="p" data-group-id="9659244535-5">)</samp><samp class="w">
</samp><samp class="no">nil</samp></code></pre>
  </section>
</section>
<section class="detail" id="names/1">

  <div class="detail-header">
    <a href="#names/1" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">names(regex)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/regex.ex#L451" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> names(<a href="#t:t/0">t</a>()) :: [<a href="String.xhtml#t:t/0">String.t</a>()]</pre>

      </div>

<p>Returns a list of names in the regex.</p><h2 id="names/1-examples" class="section-heading"><a href="#names/1-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Regex</samp><samp class="o">.</samp><samp class="n">names</samp><samp class="p" data-group-id="7000645679-1">(</samp><samp class="sr">~r/(?&lt;foo&gt;bar)/</samp><samp class="p" data-group-id="7000645679-1">)</samp><samp class="w">
</samp><samp class="p" data-group-id="7000645679-2">[</samp><samp class="s">&quot;foo&quot;</samp><samp class="p" data-group-id="7000645679-2">]</samp></code></pre>
  </section>
</section>
<section class="detail" id="opts/1">

  <div class="detail-header">
    <a href="#opts/1" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">opts(regex)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/regex.ex#L437" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> opts(<a href="#t:t/0">t</a>()) :: [<a href="typespecs.xhtml#built-in-types">term</a>()]</pre>

      </div>

<p>Returns the regex options.</p><p>See the documentation of <a href="#compile/2"><code class="inline">Regex.compile/2</code></a> for more information.</p><h2 id="opts/1-examples" class="section-heading"><a href="#opts/1-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Regex</samp><samp class="o">.</samp><samp class="n">opts</samp><samp class="p" data-group-id="8613274140-1">(</samp><samp class="sr">~r/foo/m</samp><samp class="p" data-group-id="8613274140-1">)</samp><samp class="w">
</samp><samp class="p" data-group-id="8613274140-2">[</samp><samp class="ss">:multiline</samp><samp class="p" data-group-id="8613274140-2">]</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Regex</samp><samp class="o">.</samp><samp class="n">opts</samp><samp class="p" data-group-id="8613274140-3">(</samp><samp class="nc">Regex</samp><samp class="o">.</samp><samp class="n">compile!</samp><samp class="p" data-group-id="8613274140-4">(</samp><samp class="s">&quot;foo&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="8613274140-5">[</samp><samp class="ss">:caseless</samp><samp class="p" data-group-id="8613274140-5">]</samp><samp class="p" data-group-id="8613274140-4">)</samp><samp class="p" data-group-id="8613274140-3">)</samp><samp class="w">
</samp><samp class="p" data-group-id="8613274140-6">[</samp><samp class="ss">:caseless</samp><samp class="p" data-group-id="8613274140-6">]</samp></code></pre>
  </section>
</section>
<section class="detail" id="re_pattern/1">

  <div class="detail-header">
    <a href="#re_pattern/1" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">re_pattern(regex)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/regex.ex#L404" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> re_pattern(<a href="#t:t/0">t</a>()) :: <a href="typespecs.xhtml#built-in-types">term</a>()</pre>

      </div>

<p>Returns the underlying <code class="inline">re_pattern</code> in the regular expression.</p>
  </section>
</section>
<section class="detail" id="recompile/1">

  <div class="detail-header">
    <a href="#recompile/1" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">recompile(regex)</h1>

        <span class="note">(since 1.4.0)</span>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/regex.ex#L266" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> recompile(<a href="#t:t/0">t</a>()) :: {:ok, <a href="#t:t/0">t</a>()} | {:error, <a href="typespecs.xhtml#basic-types">any</a>()}</pre>

      </div>

<p>Recompiles the existing regular expression if necessary.</p><p>This checks the version stored in the regular expression
and recompiles the regex in case of version mismatch.</p>
  </section>
</section>
<section class="detail" id="recompile!/1">

  <div class="detail-header">
    <a href="#recompile!/1" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">recompile!(regex)</h1>

        <span class="note">(since 1.4.0)</span>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/regex.ex#L284" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> recompile!(<a href="#t:t/0">t</a>()) :: <a href="#t:t/0">t</a>()</pre>

      </div>

<p>Recompiles the existing regular expression and raises <a href="Regex.CompileError.xhtml"><code class="inline">Regex.CompileError</code></a> in case of errors.</p>
  </section>
</section>
<section class="detail" id="replace/4">

    <span id="replace/3"></span>

  <div class="detail-header">
    <a href="#replace/4" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">replace(regex, string, replacement, options \\ [])</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/regex.ex#L725" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> replace(<a href="#t:t/0">t</a>(), <a href="String.xhtml#t:t/0">String.t</a>(), <a href="String.xhtml#t:t/0">String.t</a>() | (... -&gt; <a href="String.xhtml#t:t/0">String.t</a>()), [
  {:global, <a href="typespecs.xhtml#built-in-types">boolean</a>()}
]) :: <a href="String.xhtml#t:t/0">String.t</a>()</pre>

      </div>

<p>Receives a regex, a binary and a replacement, returns a new
binary where all matches are replaced by the replacement.</p><p>The replacement can be either a string or a function that returns a string.
The resulting string is used as a replacement for every match.</p><p>When the replacement is a string, it allows specific captures of the match
using brackets at the regex expression and accessing them in the replacement
via <code class="inline">\N</code> or <code class="inline">\g{N}</code>, where <code class="inline">N</code> is the number of the capture. In case <code class="inline">\0</code> is
used, the whole match is inserted. Note that in regexes the backslash needs
to be escaped, hence in practice you'll need to use <code class="inline">\\N</code> and <code class="inline">\\g{N}</code>.</p><p>When the replacement is a function, it allows specific captures too.
The function may have arity N where each argument maps to a capture,
with the first argument being the whole match. If the function expects more
arguments than captures found, the remaining arguments will receive <code class="inline">&quot;&quot;</code>.</p><h2 id="replace/4-options" class="section-heading"><a href="#replace/4-options" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Options</span></h2><ul><li><code class="inline">:global</code> - when <code class="inline">false</code>, replaces only the first occurrence
(defaults to <code class="inline">true</code>)</li></ul><h2 id="replace/4-examples" class="section-heading"><a href="#replace/4-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Regex</samp><samp class="o">.</samp><samp class="n">replace</samp><samp class="p" data-group-id="7599020736-1">(</samp><samp class="sr">~r/d/</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;abc&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;d&quot;</samp><samp class="p" data-group-id="7599020736-1">)</samp><samp class="w">
</samp><samp class="s">&quot;abc&quot;</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Regex</samp><samp class="o">.</samp><samp class="n">replace</samp><samp class="p" data-group-id="7599020736-2">(</samp><samp class="sr">~r/b/</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;abc&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;d&quot;</samp><samp class="p" data-group-id="7599020736-2">)</samp><samp class="w">
</samp><samp class="s">&quot;adc&quot;</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Regex</samp><samp class="o">.</samp><samp class="n">replace</samp><samp class="p" data-group-id="7599020736-3">(</samp><samp class="sr">~r/b/</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;abc&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;[</samp><samp class="se">\\</samp><samp class="s">0]&quot;</samp><samp class="p" data-group-id="7599020736-3">)</samp><samp class="w">
</samp><samp class="s">&quot;a[b]c&quot;</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Regex</samp><samp class="o">.</samp><samp class="n">replace</samp><samp class="p" data-group-id="7599020736-4">(</samp><samp class="sr">~r/a(b|d)c/</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;abcadc&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;[</samp><samp class="se">\\</samp><samp class="s">1]&quot;</samp><samp class="p" data-group-id="7599020736-4">)</samp><samp class="w">
</samp><samp class="s">&quot;[b][d]&quot;</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Regex</samp><samp class="o">.</samp><samp class="n">replace</samp><samp class="p" data-group-id="7599020736-5">(</samp><samp class="sr">~r/</samp><samp class="se">\.</samp><samp class="sr">(</samp><samp class="se">\d</samp><samp class="sr">)$/</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;500.5&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;.</samp><samp class="se">\\</samp><samp class="s">g{1}0&quot;</samp><samp class="p" data-group-id="7599020736-5">)</samp><samp class="w">
</samp><samp class="s">&quot;500.50&quot;</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Regex</samp><samp class="o">.</samp><samp class="n">replace</samp><samp class="p" data-group-id="7599020736-6">(</samp><samp class="sr">~r/a(b|d)c/</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;abcadc&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="k" data-group-id="7599020736-7">fn</samp><samp class="w"> </samp><samp class="bp">_</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">x</samp><samp class="w"> </samp><samp class="o">-&gt;</samp><samp class="w"> </samp><samp class="s">&quot;[</samp><samp class="si" data-group-id="7599020736-8">#{</samp><samp class="n">x</samp><samp class="si" data-group-id="7599020736-8">}</samp><samp class="s">]&quot;</samp><samp class="w"> </samp><samp class="k" data-group-id="7599020736-7">end</samp><samp class="p" data-group-id="7599020736-6">)</samp><samp class="w">
</samp><samp class="s">&quot;[b][d]&quot;</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Regex</samp><samp class="o">.</samp><samp class="n">replace</samp><samp class="p" data-group-id="7599020736-9">(</samp><samp class="sr">~r/(</samp><samp class="se">\w</samp><samp class="sr">+)@(</samp><samp class="se">\w</samp><samp class="sr">+).(</samp><samp class="se">\w</samp><samp class="sr">+)/</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;abc@def.com&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="k" data-group-id="7599020736-10">fn</samp><samp class="w"> </samp><samp class="c">_full</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="c">_c1</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="c">_c2</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">c3</samp><samp class="w"> </samp><samp class="o">-&gt;</samp><samp class="w"> </samp><samp class="s">&quot;TLD: </samp><samp class="si" data-group-id="7599020736-11">#{</samp><samp class="n">c3</samp><samp class="si" data-group-id="7599020736-11">}</samp><samp class="s">&quot;</samp><samp class="w"> </samp><samp class="k" data-group-id="7599020736-10">end</samp><samp class="p" data-group-id="7599020736-9">)</samp><samp class="w">
</samp><samp class="s">&quot;TLD: com&quot;</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Regex</samp><samp class="o">.</samp><samp class="n">replace</samp><samp class="p" data-group-id="7599020736-12">(</samp><samp class="sr">~r/a/</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;abcadc&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;A&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">global</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">false</samp><samp class="p" data-group-id="7599020736-12">)</samp><samp class="w">
</samp><samp class="s">&quot;Abcadc&quot;</samp></code></pre>
  </section>
</section>
<section class="detail" id="run/3">

    <span id="run/2"></span>

  <div class="detail-header">
    <a href="#run/3" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">run(regex, string, options \\ [])</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/regex.ex#L358" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> run(<a href="#t:t/0">t</a>(), <a href="typespecs.xhtml#built-in-types">binary</a>(), [<a href="typespecs.xhtml#built-in-types">term</a>()]) :: nil | [<a href="typespecs.xhtml#built-in-types">binary</a>()] | [{<a href="typespecs.xhtml#basic-types">integer</a>(), <a href="typespecs.xhtml#basic-types">integer</a>()}]</pre>

      </div>

<p>Runs the regular expression against the given string until the first match.
It returns a list with all captures or <code class="inline">nil</code> if no match occurred.</p><h2 id="run/3-options" class="section-heading"><a href="#run/3-options" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Options</span></h2><ul><li><code class="inline">:return</code> - when set to <code class="inline">:index</code>, returns byte index and match length.
Defaults to <code class="inline">:binary</code>.</li><li><code class="inline">:capture</code> - what to capture in the result. See the <a href="#module-captures">&quot;Captures&quot; section</a>
to see the possible capture values.</li><li><code class="inline">:offset</code> - (since v1.12.0) specifies the starting offset to match in the given string.
Defaults to zero.</li></ul><h2 id="run/3-examples" class="section-heading"><a href="#run/3-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Regex</samp><samp class="o">.</samp><samp class="n">run</samp><samp class="p" data-group-id="2379849804-1">(</samp><samp class="sr">~r/c(d)/</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;abcd&quot;</samp><samp class="p" data-group-id="2379849804-1">)</samp><samp class="w">
</samp><samp class="p" data-group-id="2379849804-2">[</samp><samp class="s">&quot;cd&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;d&quot;</samp><samp class="p" data-group-id="2379849804-2">]</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Regex</samp><samp class="o">.</samp><samp class="n">run</samp><samp class="p" data-group-id="2379849804-3">(</samp><samp class="sr">~r/e/</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;abcd&quot;</samp><samp class="p" data-group-id="2379849804-3">)</samp><samp class="w">
</samp><samp class="no">nil</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Regex</samp><samp class="o">.</samp><samp class="n">run</samp><samp class="p" data-group-id="2379849804-4">(</samp><samp class="sr">~r/c(d)/</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;abcd&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">return</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="ss">:index</samp><samp class="p" data-group-id="2379849804-4">)</samp><samp class="w">
</samp><samp class="p" data-group-id="2379849804-5">[</samp><samp class="p" data-group-id="2379849804-6">{</samp><samp class="mi">2</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">2</samp><samp class="p" data-group-id="2379849804-6">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="2379849804-7">{</samp><samp class="mi">3</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">1</samp><samp class="p" data-group-id="2379849804-7">}</samp><samp class="p" data-group-id="2379849804-5">]</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Regex</samp><samp class="o">.</samp><samp class="n">run</samp><samp class="p" data-group-id="2379849804-8">(</samp><samp class="sr">~r/c(d)/</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;abcd&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">capture</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="ss">:first</samp><samp class="p" data-group-id="2379849804-8">)</samp><samp class="w">
</samp><samp class="p" data-group-id="2379849804-9">[</samp><samp class="s">&quot;cd&quot;</samp><samp class="p" data-group-id="2379849804-9">]</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Regex</samp><samp class="o">.</samp><samp class="n">run</samp><samp class="p" data-group-id="2379849804-10">(</samp><samp class="sr">~r/c(?&lt;foo&gt;d)/</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;abcd&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">capture</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="2379849804-11">[</samp><samp class="s">&quot;foo&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;bar&quot;</samp><samp class="p" data-group-id="2379849804-11">]</samp><samp class="p" data-group-id="2379849804-10">)</samp><samp class="w">
</samp><samp class="p" data-group-id="2379849804-12">[</samp><samp class="s">&quot;d&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;&quot;</samp><samp class="p" data-group-id="2379849804-12">]</samp></code></pre>
  </section>
</section>
<section class="detail" id="scan/3">

    <span id="scan/2"></span>

  <div class="detail-header">
    <a href="#scan/3" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">scan(regex, string, options \\ [])</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/regex.ex#L509" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> scan(<a href="#t:t/0">t</a>(), <a href="String.xhtml#t:t/0">String.t</a>(), [<a href="typespecs.xhtml#built-in-types">term</a>()]) :: [[<a href="String.xhtml#t:t/0">String.t</a>()]] | [[{<a href="typespecs.xhtml#basic-types">integer</a>(), <a href="typespecs.xhtml#basic-types">integer</a>()}]]</pre>

      </div>

<p>Same as <a href="#run/3"><code class="inline">run/3</code></a> but returns all non-overlapping matches of the regular expression.</p><p>A list of lists is returned, where each entry in the primary list represents a
match and each entry in the secondary list represents the captured contents.</p><h2 id="scan/3-options" class="section-heading"><a href="#scan/3-options" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Options</span></h2><ul><li><code class="inline">:return</code> - when set to <code class="inline">:index</code>, returns byte index and match length.
Defaults to <code class="inline">:binary</code>.</li><li><code class="inline">:capture</code> - what to capture in the result. See the <a href="#module-captures">&quot;Captures&quot; section</a>
to see the possible capture values.</li><li><code class="inline">:offset</code> - (since v1.12.0) specifies the starting offset to match in the given string.
Defaults to zero.</li></ul><h2 id="scan/3-examples" class="section-heading"><a href="#scan/3-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Regex</samp><samp class="o">.</samp><samp class="n">scan</samp><samp class="p" data-group-id="3446465214-1">(</samp><samp class="sr">~r/c(d|e)/</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;abcd abce&quot;</samp><samp class="p" data-group-id="3446465214-1">)</samp><samp class="w">
</samp><samp class="p" data-group-id="3446465214-2">[</samp><samp class="p" data-group-id="3446465214-3">[</samp><samp class="s">&quot;cd&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;d&quot;</samp><samp class="p" data-group-id="3446465214-3">]</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="3446465214-4">[</samp><samp class="s">&quot;ce&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;e&quot;</samp><samp class="p" data-group-id="3446465214-4">]</samp><samp class="p" data-group-id="3446465214-2">]</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Regex</samp><samp class="o">.</samp><samp class="n">scan</samp><samp class="p" data-group-id="3446465214-5">(</samp><samp class="sr">~r/c(?:d|e)/</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;abcd abce&quot;</samp><samp class="p" data-group-id="3446465214-5">)</samp><samp class="w">
</samp><samp class="p" data-group-id="3446465214-6">[</samp><samp class="p" data-group-id="3446465214-7">[</samp><samp class="s">&quot;cd&quot;</samp><samp class="p" data-group-id="3446465214-7">]</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="3446465214-8">[</samp><samp class="s">&quot;ce&quot;</samp><samp class="p" data-group-id="3446465214-8">]</samp><samp class="p" data-group-id="3446465214-6">]</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Regex</samp><samp class="o">.</samp><samp class="n">scan</samp><samp class="p" data-group-id="3446465214-9">(</samp><samp class="sr">~r/e/</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;abcd&quot;</samp><samp class="p" data-group-id="3446465214-9">)</samp><samp class="w">
</samp><samp class="p" data-group-id="3446465214-10">[</samp><samp class="p" data-group-id="3446465214-10">]</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Regex</samp><samp class="o">.</samp><samp class="n">scan</samp><samp class="p" data-group-id="3446465214-11">(</samp><samp class="sr">~r/ab|bc|cd/</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;abcd&quot;</samp><samp class="p" data-group-id="3446465214-11">)</samp><samp class="w">
</samp><samp class="p" data-group-id="3446465214-12">[</samp><samp class="p" data-group-id="3446465214-13">[</samp><samp class="s">&quot;ab&quot;</samp><samp class="p" data-group-id="3446465214-13">]</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="3446465214-14">[</samp><samp class="s">&quot;cd&quot;</samp><samp class="p" data-group-id="3446465214-14">]</samp><samp class="p" data-group-id="3446465214-12">]</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Regex</samp><samp class="o">.</samp><samp class="n">scan</samp><samp class="p" data-group-id="3446465214-15">(</samp><samp class="sr">~r/ab|bc|cd/</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;abbccd&quot;</samp><samp class="p" data-group-id="3446465214-15">)</samp><samp class="w">
</samp><samp class="p" data-group-id="3446465214-16">[</samp><samp class="p" data-group-id="3446465214-17">[</samp><samp class="s">&quot;ab&quot;</samp><samp class="p" data-group-id="3446465214-17">]</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="3446465214-18">[</samp><samp class="s">&quot;bc&quot;</samp><samp class="p" data-group-id="3446465214-18">]</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="3446465214-19">[</samp><samp class="s">&quot;cd&quot;</samp><samp class="p" data-group-id="3446465214-19">]</samp><samp class="p" data-group-id="3446465214-16">]</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Regex</samp><samp class="o">.</samp><samp class="n">scan</samp><samp class="p" data-group-id="3446465214-20">(</samp><samp class="sr">~r/</samp><samp class="se">\p</samp><samp class="sr">{Sc}/u</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;$, £, and €&quot;</samp><samp class="p" data-group-id="3446465214-20">)</samp><samp class="w">
</samp><samp class="p" data-group-id="3446465214-21">[</samp><samp class="p" data-group-id="3446465214-22">[</samp><samp class="s">&quot;$&quot;</samp><samp class="p" data-group-id="3446465214-22">]</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="3446465214-23">[</samp><samp class="s">&quot;£&quot;</samp><samp class="p" data-group-id="3446465214-23">]</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="3446465214-24">[</samp><samp class="s">&quot;€&quot;</samp><samp class="p" data-group-id="3446465214-24">]</samp><samp class="p" data-group-id="3446465214-21">]</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Regex</samp><samp class="o">.</samp><samp class="n">scan</samp><samp class="p" data-group-id="3446465214-25">(</samp><samp class="sr">~r/=+/</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;=ü†ƒ8===&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">return</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="ss">:index</samp><samp class="p" data-group-id="3446465214-25">)</samp><samp class="w">
</samp><samp class="p" data-group-id="3446465214-26">[</samp><samp class="p" data-group-id="3446465214-27">[</samp><samp class="p" data-group-id="3446465214-28">{</samp><samp class="mi">0</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">1</samp><samp class="p" data-group-id="3446465214-28">}</samp><samp class="p" data-group-id="3446465214-27">]</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="3446465214-29">[</samp><samp class="p" data-group-id="3446465214-30">{</samp><samp class="mi">9</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">3</samp><samp class="p" data-group-id="3446465214-30">}</samp><samp class="p" data-group-id="3446465214-29">]</samp><samp class="p" data-group-id="3446465214-26">]</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Regex</samp><samp class="o">.</samp><samp class="n">scan</samp><samp class="p" data-group-id="3446465214-31">(</samp><samp class="sr">~r/c(d|e)/</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;abcd abce&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">capture</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="ss">:first</samp><samp class="p" data-group-id="3446465214-31">)</samp><samp class="w">
</samp><samp class="p" data-group-id="3446465214-32">[</samp><samp class="p" data-group-id="3446465214-33">[</samp><samp class="s">&quot;cd&quot;</samp><samp class="p" data-group-id="3446465214-33">]</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="3446465214-34">[</samp><samp class="s">&quot;ce&quot;</samp><samp class="p" data-group-id="3446465214-34">]</samp><samp class="p" data-group-id="3446465214-32">]</samp></code></pre>
  </section>
</section>
<section class="detail" id="source/1">

  <div class="detail-header">
    <a href="#source/1" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">source(regex)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/regex.ex#L418" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> source(<a href="#t:t/0">t</a>()) :: <a href="String.xhtml#t:t/0">String.t</a>()</pre>

      </div>

<p>Returns the regex source as a binary.</p><h2 id="source/1-examples" class="section-heading"><a href="#source/1-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Regex</samp><samp class="o">.</samp><samp class="n">source</samp><samp class="p" data-group-id="4018621973-1">(</samp><samp class="sr">~r/foo/</samp><samp class="p" data-group-id="4018621973-1">)</samp><samp class="w">
</samp><samp class="s">&quot;foo&quot;</samp></code></pre>
  </section>
</section>
<section class="detail" id="split/3">

    <span id="split/2"></span>

  <div class="detail-header">
    <a href="#split/3" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">split(regex, string, options \\ [])</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/regex.ex#L596" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> split(<a href="#t:t/0">t</a>(), <a href="String.xhtml#t:t/0">String.t</a>(), [<a href="typespecs.xhtml#built-in-types">term</a>()]) :: [<a href="String.xhtml#t:t/0">String.t</a>()]</pre>

      </div>

<p>Splits the given target based on the given pattern and in the given number of
parts.</p><h2 id="split/3-options" class="section-heading"><a href="#split/3-options" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Options</span></h2><ul><li><p><code class="inline">:parts</code> - when specified, splits the string into the given number of
parts. If not specified, <code class="inline">:parts</code> defaults to <code class="inline">:infinity</code>, which will
split the string into the maximum number of parts possible based on the
given pattern.</p></li><li><p><code class="inline">:trim</code> - when <code class="inline">true</code>, removes empty strings (<code class="inline">&quot;&quot;</code>) from the result.
Defaults to <code class="inline">false</code>.</p></li><li><p><code class="inline">:on</code> - specifies which captures to split the string on, and in what
order. Defaults to <code class="inline">:first</code> which means captures inside the regex do not
affect the splitting process. See the <a href="#module-captures">&quot;Captures&quot; section</a>
to see the possible capture values.</p></li><li><p><code class="inline">:include_captures</code> - when <code class="inline">true</code>, includes in the result the matches of
the regular expression. The matches are not counted towards the maximum
number of parts if combined with the <code class="inline">:parts</code> option. Defaults to <code class="inline">false</code>.</p></li></ul><h2 id="split/3-examples" class="section-heading"><a href="#split/3-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Regex</samp><samp class="o">.</samp><samp class="n">split</samp><samp class="p" data-group-id="8496869910-1">(</samp><samp class="sr">~r/-/</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;a-b-c&quot;</samp><samp class="p" data-group-id="8496869910-1">)</samp><samp class="w">
</samp><samp class="p" data-group-id="8496869910-2">[</samp><samp class="s">&quot;a&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;b&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;c&quot;</samp><samp class="p" data-group-id="8496869910-2">]</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Regex</samp><samp class="o">.</samp><samp class="n">split</samp><samp class="p" data-group-id="8496869910-3">(</samp><samp class="sr">~r/-/</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;a-b-c&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">parts</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">2</samp><samp class="p" data-group-id="8496869910-3">)</samp><samp class="w">
</samp><samp class="p" data-group-id="8496869910-4">[</samp><samp class="s">&quot;a&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;b-c&quot;</samp><samp class="p" data-group-id="8496869910-4">]</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Regex</samp><samp class="o">.</samp><samp class="n">split</samp><samp class="p" data-group-id="8496869910-5">(</samp><samp class="sr">~r/-/</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;abc&quot;</samp><samp class="p" data-group-id="8496869910-5">)</samp><samp class="w">
</samp><samp class="p" data-group-id="8496869910-6">[</samp><samp class="s">&quot;abc&quot;</samp><samp class="p" data-group-id="8496869910-6">]</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Regex</samp><samp class="o">.</samp><samp class="n">split</samp><samp class="p" data-group-id="8496869910-7">(</samp><samp class="sr">~r//</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;abc&quot;</samp><samp class="p" data-group-id="8496869910-7">)</samp><samp class="w">
</samp><samp class="p" data-group-id="8496869910-8">[</samp><samp class="s">&quot;&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;a&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;b&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;c&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;&quot;</samp><samp class="p" data-group-id="8496869910-8">]</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Regex</samp><samp class="o">.</samp><samp class="n">split</samp><samp class="p" data-group-id="8496869910-9">(</samp><samp class="sr">~r/a(?&lt;second&gt;b)c/</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;abc&quot;</samp><samp class="p" data-group-id="8496869910-9">)</samp><samp class="w">
</samp><samp class="p" data-group-id="8496869910-10">[</samp><samp class="s">&quot;&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;&quot;</samp><samp class="p" data-group-id="8496869910-10">]</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Regex</samp><samp class="o">.</samp><samp class="n">split</samp><samp class="p" data-group-id="8496869910-11">(</samp><samp class="sr">~r/a(?&lt;second&gt;b)c/</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;abc&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">on</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="8496869910-12">[</samp><samp class="ss">:second</samp><samp class="p" data-group-id="8496869910-12">]</samp><samp class="p" data-group-id="8496869910-11">)</samp><samp class="w">
</samp><samp class="p" data-group-id="8496869910-13">[</samp><samp class="s">&quot;a&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;c&quot;</samp><samp class="p" data-group-id="8496869910-13">]</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Regex</samp><samp class="o">.</samp><samp class="n">split</samp><samp class="p" data-group-id="8496869910-14">(</samp><samp class="sr">~r/(x)/</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;Elixir&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">include_captures</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">true</samp><samp class="p" data-group-id="8496869910-14">)</samp><samp class="w">
</samp><samp class="p" data-group-id="8496869910-15">[</samp><samp class="s">&quot;Eli&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;x&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;ir&quot;</samp><samp class="p" data-group-id="8496869910-15">]</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Regex</samp><samp class="o">.</samp><samp class="n">split</samp><samp class="p" data-group-id="8496869910-16">(</samp><samp class="sr">~r/a(?&lt;second&gt;b)c/</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;abc&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">on</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="8496869910-17">[</samp><samp class="ss">:second</samp><samp class="p" data-group-id="8496869910-17">]</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">include_captures</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">true</samp><samp class="p" data-group-id="8496869910-16">)</samp><samp class="w">
</samp><samp class="p" data-group-id="8496869910-18">[</samp><samp class="s">&quot;a&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;b&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;c&quot;</samp><samp class="p" data-group-id="8496869910-18">]</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Regex</samp><samp class="o">.</samp><samp class="n">split</samp><samp class="p" data-group-id="8496869910-19">(</samp><samp class="sr">~r/-/</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;-a-b--c&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">trim</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">true</samp><samp class="p" data-group-id="8496869910-19">)</samp><samp class="w">
</samp><samp class="p" data-group-id="8496869910-20">[</samp><samp class="s">&quot;a&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;b&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;c&quot;</samp><samp class="p" data-group-id="8496869910-20">]</samp></code></pre>
  </section>
</section>
<section class="detail" id="version/0">

  <div class="detail-header">
    <a href="#version/0" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">version()</h1>

        <span class="note">(since 1.4.0)</span>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/regex.ex#L296" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> version() :: <a href="typespecs.xhtml#built-in-types">term</a>()</pre>

      </div>

<p>Returns the version of the underlying Regex engine.</p>
  </section>
</section>

        </div>
      </section>


  </body>
</html>
