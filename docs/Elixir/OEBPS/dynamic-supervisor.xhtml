<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"
      xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>Supervising dynamic children - Elixir v1.18.4</title>
    <meta name="generator" content="ExDoc v0.38.2" />
    <link type="text/css" rel="stylesheet" href="dist/epub-elixir-FNUUKFP7.css" />
    <script src="dist/epub-4WIP524F.js"></script>

  </head>
  <body class="content-inner">

    <h1 id="content">Supervising dynamic children</h1>
<p>We have now successfully defined our supervisor which is automatically started (and stopped) as part of our application life cycle.</p><p>Remember, however, that our <code class="inline">KV.Registry</code> is both linking (via <code class="inline">start_link</code>) and monitoring (via <code class="inline">monitor</code>) bucket processes in the <code class="inline">handle_cast/2</code> callback:</p><pre><code class="makeup elixir" translate="no"><span class="p" data-group-id="0726818370-1">{</span><span class="ss">:ok</span><span class="p">,</span><span class="w"> </span><span class="n">bucket</span><span class="p" data-group-id="0726818370-1">}</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nc">KV.Bucket</span><span class="o">.</span><span class="n">start_link</span><span class="p" data-group-id="0726818370-2">(</span><span class="p" data-group-id="0726818370-3">[</span><span class="p" data-group-id="0726818370-3">]</span><span class="p" data-group-id="0726818370-2">)</span><span class="w">
</span><span class="n">ref</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nc">Process</span><span class="o">.</span><span class="n">monitor</span><span class="p" data-group-id="0726818370-4">(</span><span class="n">bucket</span><span class="p" data-group-id="0726818370-4">)</span></code></pre><p>Links are bidirectional, which implies that a crash in a bucket will crash the registry. Although we now have the supervisor, which guarantees the registry will be back up and running, crashing the registry still means we lose all data associating bucket names to their respective processes.</p><p>In other words, we want the registry to keep on running even if a bucket crashes. Let's write a new registry test:</p><pre><code class="makeup elixir" translate="no"><span class="n">test</span><span class="w"> </span><span class="s">&quot;removes bucket on crash&quot;</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="0702883836-1">%{</span><span class="ss">registry</span><span class="p">:</span><span class="w"> </span><span class="n">registry</span><span class="p" data-group-id="0702883836-1">}</span><span class="w"> </span><span class="k" data-group-id="0702883836-2">do</span><span class="w">
  </span><span class="nc">KV.Registry</span><span class="o">.</span><span class="n">create</span><span class="p" data-group-id="0702883836-3">(</span><span class="n">registry</span><span class="p">,</span><span class="w"> </span><span class="s">&quot;shopping&quot;</span><span class="p" data-group-id="0702883836-3">)</span><span class="w">
  </span><span class="p" data-group-id="0702883836-4">{</span><span class="ss">:ok</span><span class="p">,</span><span class="w"> </span><span class="n">bucket</span><span class="p" data-group-id="0702883836-4">}</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nc">KV.Registry</span><span class="o">.</span><span class="n">lookup</span><span class="p" data-group-id="0702883836-5">(</span><span class="n">registry</span><span class="p">,</span><span class="w"> </span><span class="s">&quot;shopping&quot;</span><span class="p" data-group-id="0702883836-5">)</span><span class="w">

  </span><span class="c1"># Stop the bucket with non-normal reason</span><span class="w">
  </span><span class="nc">Agent</span><span class="o">.</span><span class="n">stop</span><span class="p" data-group-id="0702883836-6">(</span><span class="n">bucket</span><span class="p">,</span><span class="w"> </span><span class="ss">:shutdown</span><span class="p" data-group-id="0702883836-6">)</span><span class="w">
  </span><span class="n">assert</span><span class="w"> </span><span class="nc">KV.Registry</span><span class="o">.</span><span class="n">lookup</span><span class="p" data-group-id="0702883836-7">(</span><span class="n">registry</span><span class="p">,</span><span class="w"> </span><span class="s">&quot;shopping&quot;</span><span class="p" data-group-id="0702883836-7">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="ss">:error</span><span class="w">
</span><span class="k" data-group-id="0702883836-2">end</span></code></pre><p>The test is similar to &quot;removes bucket on exit&quot; except that we are being a bit more harsh by sending <code class="inline">:shutdown</code> as the exit reason instead of <code class="inline">:normal</code>. If a process terminates with a reason other than <code class="inline">:normal</code>, all linked processes receive an EXIT signal, causing the linked process to also terminate unless it is trapping exits.</p><p>Since the bucket terminated, the registry also stopped, and our test fails when trying to <a href="GenServer.xhtml#call/3"><code class="inline">GenServer.call/3</code></a> it:</p><pre><code class="text">  1) test removes bucket on crash (KV.RegistryTest)
     test/kv/registry_test.exs:26
     ** (exit) exited in: GenServer.call(#PID&lt;0.148.0&gt;, {:lookup, &quot;shopping&quot;}, 5000)
         ** (EXIT) no process: the process is not alive or there's no process currently associated with the given name, possibly because its application isn't started
     code: assert KV.Registry.lookup(registry, &quot;shopping&quot;) == :error
     stacktrace:
       (elixir) lib/gen_server.ex:770: GenServer.call/3
       test/kv/registry_test.exs:33: (test)</code></pre><p>We are going to solve this issue by defining a new supervisor that will spawn and supervise all buckets. Opposite to the previous Supervisor we defined, the children are not known upfront, but they are rather started dynamically. For those situations, we use a supervisor optimized to such use cases called <a href="DynamicSupervisor.xhtml"><code class="inline">DynamicSupervisor</code></a>. The <a href="DynamicSupervisor.xhtml"><code class="inline">DynamicSupervisor</code></a> does not expect a list of children during initialization; instead each child is started manually via <a href="DynamicSupervisor.xhtml#start_child/2"><code class="inline">DynamicSupervisor.start_child/2</code></a>.</p><h2 id="the-bucket-supervisor">The bucket supervisor</h2><p>Since a <a href="DynamicSupervisor.xhtml"><code class="inline">DynamicSupervisor</code></a> does not define any children during initialization, the <a href="DynamicSupervisor.xhtml"><code class="inline">DynamicSupervisor</code></a> also allows us to skip the work of defining a whole separate module with the usual <code class="inline">start_link</code> function and the <code class="inline">init</code> callback. Instead, we can define a <a href="DynamicSupervisor.xhtml"><code class="inline">DynamicSupervisor</code></a> directly in the supervision tree, by giving it a name and a strategy.</p><p>Open up <code class="inline">lib/kv/supervisor.ex</code> and add the dynamic supervisor as a child as follows:</p><pre><code class="makeup elixir" translate="no"><span class="w">  </span><span class="kd">def</span><span class="w"> </span><span class="nf">init</span><span class="p" data-group-id="7460825010-1">(</span><span class="ss">:ok</span><span class="p" data-group-id="7460825010-1">)</span><span class="w"> </span><span class="k" data-group-id="7460825010-2">do</span><span class="w">
    </span><span class="n">children</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p" data-group-id="7460825010-3">[</span><span class="w">
      </span><span class="p" data-group-id="7460825010-4">{</span><span class="nc">KV.Registry</span><span class="p">,</span><span class="w"> </span><span class="ss">name</span><span class="p">:</span><span class="w"> </span><span class="nc">KV.Registry</span><span class="p" data-group-id="7460825010-4">}</span><span class="p">,</span><span class="w">
      </span><span class="p" data-group-id="7460825010-5">{</span><span class="nc">DynamicSupervisor</span><span class="p">,</span><span class="w"> </span><span class="ss">name</span><span class="p">:</span><span class="w"> </span><span class="nc">KV.BucketSupervisor</span><span class="p">,</span><span class="w"> </span><span class="ss">strategy</span><span class="p">:</span><span class="w"> </span><span class="ss">:one_for_one</span><span class="p" data-group-id="7460825010-5">}</span><span class="w">
    </span><span class="p" data-group-id="7460825010-3">]</span><span class="w">

    </span><span class="nc">Supervisor</span><span class="o">.</span><span class="n">init</span><span class="p" data-group-id="7460825010-6">(</span><span class="n">children</span><span class="p">,</span><span class="w"> </span><span class="ss">strategy</span><span class="p">:</span><span class="w"> </span><span class="ss">:one_for_one</span><span class="p" data-group-id="7460825010-6">)</span><span class="w">
  </span><span class="k" data-group-id="7460825010-2">end</span></code></pre><p>Remember that the name of a process can be any atom. So far, we have named processes with the same name as the modules that define their implementation. For example, the process defined by <code class="inline">KV.Registry</code> was given a process name of <code class="inline">KV.Registry</code>. This is simply a convention: If later there is an error in your system that says, &quot;process named KV.Registry crashed with reason&quot;, we know exactly where to investigate.</p><p>In this case, there is no module, so we picked the name <code class="inline">KV.BucketSupervisor</code>. It could have been any other name. We also chose the <code class="inline">:one_for_one</code> strategy, which is currently the only available strategy for dynamic supervisors.</p><p>Run <code class="inline">iex -S mix</code> so we can give our dynamic supervisor a try:</p><pre><code class="makeup elixir" translate="no"><span class="gp unselectable">iex&gt; </span><span class="p" data-group-id="0114511692-1">{</span><span class="ss">:ok</span><span class="p">,</span><span class="w"> </span><span class="n">bucket</span><span class="p" data-group-id="0114511692-1">}</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nc">DynamicSupervisor</span><span class="o">.</span><span class="n">start_child</span><span class="p" data-group-id="0114511692-2">(</span><span class="nc">KV.BucketSupervisor</span><span class="p">,</span><span class="w"> </span><span class="nc">KV.Bucket</span><span class="p" data-group-id="0114511692-2">)</span><span class="w">
</span><span class="p" data-group-id="0114511692-3">{</span><span class="ss">:ok</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="0114511692-4">#</span><span class="nc" data-group-id="0114511692-4">PID</span><span class="p" data-group-id="0114511692-4">&lt;</span><span class="mi">0</span><span class="o">.</span><span class="mi">72</span><span class="o">.</span><span class="mi">0</span><span class="p" data-group-id="0114511692-4">&gt;</span><span class="p" data-group-id="0114511692-3">}</span><span class="w">
</span><span class="gp unselectable">iex&gt; </span><span class="nc">KV.Bucket</span><span class="o">.</span><span class="n">put</span><span class="p" data-group-id="0114511692-5">(</span><span class="n">bucket</span><span class="p">,</span><span class="w"> </span><span class="s">&quot;eggs&quot;</span><span class="p">,</span><span class="w"> </span><span class="mi">3</span><span class="p" data-group-id="0114511692-5">)</span><span class="w">
</span><span class="ss">:ok</span><span class="w">
</span><span class="gp unselectable">iex&gt; </span><span class="nc">KV.Bucket</span><span class="o">.</span><span class="n">get</span><span class="p" data-group-id="0114511692-6">(</span><span class="n">bucket</span><span class="p">,</span><span class="w"> </span><span class="s">&quot;eggs&quot;</span><span class="p" data-group-id="0114511692-6">)</span><span class="w">
</span><span class="mi">3</span></code></pre><p><a href="DynamicSupervisor.xhtml#start_child/2"><code class="inline">DynamicSupervisor.start_child/2</code></a> expects the name of the supervisor and the child specification of the child to be started.</p><p>The last step is to change the registry to use the dynamic supervisor:</p><pre><code class="makeup elixir" translate="no"><span class="w">  </span><span class="kd">def</span><span class="w"> </span><span class="nf">handle_cast</span><span class="p" data-group-id="7565940231-1">(</span><span class="p" data-group-id="7565940231-2">{</span><span class="ss">:create</span><span class="p">,</span><span class="w"> </span><span class="n">name</span><span class="p" data-group-id="7565940231-2">}</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="7565940231-3">{</span><span class="n">names</span><span class="p">,</span><span class="w"> </span><span class="n">refs</span><span class="p" data-group-id="7565940231-3">}</span><span class="p" data-group-id="7565940231-1">)</span><span class="w"> </span><span class="k" data-group-id="7565940231-4">do</span><span class="w">
    </span><span class="k">if</span><span class="w"> </span><span class="nc">Map</span><span class="o">.</span><span class="n">has_key?</span><span class="p" data-group-id="7565940231-5">(</span><span class="n">names</span><span class="p">,</span><span class="w"> </span><span class="n">name</span><span class="p" data-group-id="7565940231-5">)</span><span class="w"> </span><span class="k" data-group-id="7565940231-6">do</span><span class="w">
      </span><span class="p" data-group-id="7565940231-7">{</span><span class="ss">:noreply</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="7565940231-8">{</span><span class="n">names</span><span class="p">,</span><span class="w"> </span><span class="n">refs</span><span class="p" data-group-id="7565940231-8">}</span><span class="p" data-group-id="7565940231-7">}</span><span class="w">
    </span><span class="k" data-group-id="7565940231-6">else</span><span class="w">
      </span><span class="p" data-group-id="7565940231-9">{</span><span class="ss">:ok</span><span class="p">,</span><span class="w"> </span><span class="n">pid</span><span class="p" data-group-id="7565940231-9">}</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nc">DynamicSupervisor</span><span class="o">.</span><span class="n">start_child</span><span class="p" data-group-id="7565940231-10">(</span><span class="nc">KV.BucketSupervisor</span><span class="p">,</span><span class="w"> </span><span class="nc">KV.Bucket</span><span class="p" data-group-id="7565940231-10">)</span><span class="w">
      </span><span class="n">ref</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nc">Process</span><span class="o">.</span><span class="n">monitor</span><span class="p" data-group-id="7565940231-11">(</span><span class="n">pid</span><span class="p" data-group-id="7565940231-11">)</span><span class="w">
      </span><span class="n">refs</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nc">Map</span><span class="o">.</span><span class="n">put</span><span class="p" data-group-id="7565940231-12">(</span><span class="n">refs</span><span class="p">,</span><span class="w"> </span><span class="n">ref</span><span class="p">,</span><span class="w"> </span><span class="n">name</span><span class="p" data-group-id="7565940231-12">)</span><span class="w">
      </span><span class="n">names</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nc">Map</span><span class="o">.</span><span class="n">put</span><span class="p" data-group-id="7565940231-13">(</span><span class="n">names</span><span class="p">,</span><span class="w"> </span><span class="n">name</span><span class="p">,</span><span class="w"> </span><span class="n">pid</span><span class="p" data-group-id="7565940231-13">)</span><span class="w">
      </span><span class="p" data-group-id="7565940231-14">{</span><span class="ss">:noreply</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="7565940231-15">{</span><span class="n">names</span><span class="p">,</span><span class="w"> </span><span class="n">refs</span><span class="p" data-group-id="7565940231-15">}</span><span class="p" data-group-id="7565940231-14">}</span><span class="w">
    </span><span class="k" data-group-id="7565940231-6">end</span><span class="w">
  </span><span class="k" data-group-id="7565940231-4">end</span></code></pre><p>That's enough for our tests to pass but there is a resource leakage in our application. When a bucket terminates, the supervisor will start a new bucket in its place. After all, that's the role of the supervisor!</p><p>However, when the supervisor restarts the new bucket, the registry does not know about it. So we will have an empty bucket in the supervisor that nobody can access! To solve this, we want to say that buckets are actually temporary. If they crash, regardless of the reason, they should not be restarted.</p><p>We can do this by passing the <code class="inline">restart: :temporary</code> option to <code class="inline">use Agent</code> in <code class="inline">KV.Bucket</code>:</p><pre><code class="makeup elixir" translate="no"><span class="kd">defmodule</span><span class="w"> </span><span class="nc">KV.Bucket</span><span class="w"> </span><span class="k" data-group-id="2727560110-1">do</span><span class="w">
  </span><span class="kn">use</span><span class="w"> </span><span class="nc">Agent</span><span class="p">,</span><span class="w"> </span><span class="ss">restart</span><span class="p">:</span><span class="w"> </span><span class="ss">:temporary</span></code></pre><p>Let's also add a test to <code class="inline">test/kv/bucket_test.exs</code> that guarantees the bucket is temporary:</p><pre><code class="makeup elixir" translate="no"><span class="w">  </span><span class="n">test</span><span class="w"> </span><span class="s">&quot;are temporary workers&quot;</span><span class="w"> </span><span class="k" data-group-id="9566458104-1">do</span><span class="w">
    </span><span class="n">assert</span><span class="w"> </span><span class="nc">Supervisor</span><span class="o">.</span><span class="n">child_spec</span><span class="p" data-group-id="9566458104-2">(</span><span class="nc">KV.Bucket</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="9566458104-3">[</span><span class="p" data-group-id="9566458104-3">]</span><span class="p" data-group-id="9566458104-2">)</span><span class="o">.</span><span class="n">restart</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="ss">:temporary</span><span class="w">
  </span><span class="k" data-group-id="9566458104-1">end</span></code></pre><p>Our test uses the <a href="Supervisor.xhtml#child_spec/2"><code class="inline">Supervisor.child_spec/2</code></a> function to retrieve the child specification out of a module and then assert its restart value is <code class="inline">:temporary</code>. At this point, you may be wondering why use a supervisor if it never restarts its children. It happens that supervisors provide more than restarts, they are also responsible for guaranteeing proper startup and shutdown, especially in case of crashes in a supervision tree.</p><h2 id="supervision-trees">Supervision trees</h2><p>When we added <code class="inline">KV.BucketSupervisor</code> as a child of <code class="inline">KV.Supervisor</code>, we began to have supervisors that supervise other supervisors, forming so-called &quot;supervision trees&quot;.</p><p>Every time you add a new child to a supervisor, it is important to evaluate if the supervisor strategy is correct as well as the order of child processes. In this case, we are using <code class="inline">:one_for_one</code> and the <code class="inline">KV.Registry</code> is started before <code class="inline">KV.BucketSupervisor</code>.</p><p>One flaw that shows up right away is the ordering issue. Since <code class="inline">KV.Registry</code> invokes <code class="inline">KV.BucketSupervisor</code>, then the <code class="inline">KV.BucketSupervisor</code> must be started before <code class="inline">KV.Registry</code>. Otherwise, it may happen that the registry attempts to reach the bucket supervisor before it has started.</p><p>The second flaw is related to the supervision strategy. If <code class="inline">KV.Registry</code> dies, all information linking <code class="inline">KV.Bucket</code> names to bucket processes is lost. Therefore the <code class="inline">KV.BucketSupervisor</code> and all children must terminate too - otherwise we will have orphan processes.</p><p>In light of this observation, we should consider moving to another supervision strategy. The two other candidates are <code class="inline">:one_for_all</code> and <code class="inline">:rest_for_one</code>. A supervisor using the <code class="inline">:rest_for_one</code> strategy will kill and restart child processes which were started <em>after</em> the crashed child. In this case, we would want <code class="inline">KV.BucketSupervisor</code> to terminate if <code class="inline">KV.Registry</code> terminates. This would require the bucket supervisor to be placed after the registry which violates the ordering constraints we have established two paragraphs above.</p><p>So our last option is to go all in and pick the <code class="inline">:one_for_all</code> strategy: the supervisor will kill and restart all of its children processes whenever any one of them dies. This is a completely reasonable approach for our application, since the registry can't work without the bucket supervisor, and the bucket supervisor should terminate without the registry. Let's reimplement <code class="inline">init/1</code> in <code class="inline">KV.Supervisor</code> to encode those properties:</p><pre><code class="makeup elixir" translate="no"><span class="w">  </span><span class="kd">def</span><span class="w"> </span><span class="nf">init</span><span class="p" data-group-id="9320507200-1">(</span><span class="ss">:ok</span><span class="p" data-group-id="9320507200-1">)</span><span class="w"> </span><span class="k" data-group-id="9320507200-2">do</span><span class="w">
    </span><span class="n">children</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p" data-group-id="9320507200-3">[</span><span class="w">
      </span><span class="p" data-group-id="9320507200-4">{</span><span class="nc">DynamicSupervisor</span><span class="p">,</span><span class="w"> </span><span class="ss">name</span><span class="p">:</span><span class="w"> </span><span class="nc">KV.BucketSupervisor</span><span class="p">,</span><span class="w"> </span><span class="ss">strategy</span><span class="p">:</span><span class="w"> </span><span class="ss">:one_for_one</span><span class="p" data-group-id="9320507200-4">}</span><span class="p">,</span><span class="w">
      </span><span class="p" data-group-id="9320507200-5">{</span><span class="nc">KV.Registry</span><span class="p">,</span><span class="w"> </span><span class="ss">name</span><span class="p">:</span><span class="w"> </span><span class="nc">KV.Registry</span><span class="p" data-group-id="9320507200-5">}</span><span class="w">
    </span><span class="p" data-group-id="9320507200-3">]</span><span class="w">

    </span><span class="nc">Supervisor</span><span class="o">.</span><span class="n">init</span><span class="p" data-group-id="9320507200-6">(</span><span class="n">children</span><span class="p">,</span><span class="w"> </span><span class="ss">strategy</span><span class="p">:</span><span class="w"> </span><span class="ss">:one_for_all</span><span class="p" data-group-id="9320507200-6">)</span><span class="w">
  </span><span class="k" data-group-id="9320507200-2">end</span></code></pre><p>There are two topics left before we move on to the next chapter.</p><h2 id="shared-state-in-tests">Shared state in tests</h2><p>So far we have been starting one registry per test to ensure they are isolated:</p><pre><code class="makeup elixir" translate="no"><span class="n">setup</span><span class="w"> </span><span class="k" data-group-id="2195455890-1">do</span><span class="w">
  </span><span class="n">registry</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">start_supervised!</span><span class="p" data-group-id="2195455890-2">(</span><span class="nc">KV.Registry</span><span class="p" data-group-id="2195455890-2">)</span><span class="w">
  </span><span class="p" data-group-id="2195455890-3">%{</span><span class="ss">registry</span><span class="p">:</span><span class="w"> </span><span class="n">registry</span><span class="p" data-group-id="2195455890-3">}</span><span class="w">
</span><span class="k" data-group-id="2195455890-1">end</span></code></pre><p>Since we have changed our registry to use <code class="inline">KV.BucketSupervisor</code>, our tests are now relying on this shared supervisor even though each test has its own registry. The question is: should we?</p><p>It depends. It is ok to rely on shared state as long as we depend only on a non-shared partition of this state. Although multiple registries may start buckets on the shared bucket supervisor, those buckets and registries are isolated from each other. We would only run into concurrency issues if we used a function like <code class="inline">DynamicSupervisor.count_children(KV.BucketSupervisor)</code> which would count all buckets from all registries, potentially giving different results when tests run concurrently.</p><p>Since we have relied only on a non-shared partition of the bucket supervisor so far, we don't need to worry about concurrency issues in our test suite. In case it ever becomes a problem, we can start a supervisor per test and pass it as an argument to the registry <code class="inline">start_link</code> function.</p><h2 id="observer">Observer</h2><p>Now that we have defined our supervision tree, it is a great opportunity to introduce the Observer tool that ships with Erlang. Start your application with <code class="inline">iex -S mix</code> and key this in:</p><pre><code class="makeup elixir" translate="no"><span class="gp unselectable">iex&gt; </span><span class="nc">:observer</span><span class="o">.</span><span class="n">start</span><span class="p" data-group-id="0858443401-1">(</span><span class="p" data-group-id="0858443401-1">)</span></code></pre><section role="note" class="admonition warning"><h4 class="admonition-title warning">Missing dependencies</h4><p>When running <code class="inline">iex</code> inside a project with <code class="inline">iex -S mix</code>, <code class="inline">observer</code> won't be available as a dependency. To do so, you will need to call the following functions before:</p><pre><code class="makeup elixir" translate="no"><span class="gp unselectable">iex&gt; </span><span class="nc">Mix</span><span class="o">.</span><span class="n">ensure_application!</span><span class="p" data-group-id="2654337293-1">(</span><span class="ss">:wx</span><span class="p" data-group-id="2654337293-1">)</span><span class="w">             </span><span class="c1"># Not necessary on Erlang/OTP 27+</span><span class="w">
</span><span class="gp unselectable">iex&gt; </span><span class="nc">Mix</span><span class="o">.</span><span class="n">ensure_application!</span><span class="p" data-group-id="2654337293-2">(</span><span class="ss">:runtime_tools</span><span class="p" data-group-id="2654337293-2">)</span><span class="w">  </span><span class="c1"># Not necessary on Erlang/OTP 27+</span><span class="w">
</span><span class="gp unselectable">iex&gt; </span><span class="nc">Mix</span><span class="o">.</span><span class="n">ensure_application!</span><span class="p" data-group-id="2654337293-3">(</span><span class="ss">:observer</span><span class="p" data-group-id="2654337293-3">)</span><span class="w">
</span><span class="gp unselectable">iex&gt; </span><span class="nc">:observer</span><span class="o">.</span><span class="n">start</span><span class="p" data-group-id="2654337293-4">(</span><span class="p" data-group-id="2654337293-4">)</span></code></pre><p>If any of the calls above fail, here is what may have happened: some package managers default to installing a minimized Erlang without WX bindings for GUI support. In some package managers, you may be able to replace the headless Erlang with a more complete package (look for packages named <code class="inline">erlang</code> vs <code class="inline">erlang-nox</code> on Debian/Ubuntu/Arch). In others managers, you may need to install a separate <code class="inline">erlang-wx</code> (or similarly named) package.</p><p>There are conversations to improve this experience in future releases.</p></section><p>A GUI should pop up containing all sorts of information about our system, from general statistics to load charts as well as a list of all running processes and applications.</p><p>In the Applications tab, you will see all applications currently running in your system alongside their supervision tree. You can select the <code class="inline">kv</code> application to explore it further:</p><img src="assets/kv-observer.png" alt="Observer GUI screenshot"/><p>Not only that, as you create new buckets on the terminal, you should see new processes spawned in the supervision tree shown in Observer:</p><pre><code class="makeup elixir" translate="no"><span class="gp unselectable">iex&gt; </span><span class="nc">KV.Registry</span><span class="o">.</span><span class="n">create</span><span class="p" data-group-id="8473502120-1">(</span><span class="nc">KV.Registry</span><span class="p">,</span><span class="w"> </span><span class="s">&quot;shopping&quot;</span><span class="p" data-group-id="8473502120-1">)</span><span class="w">
</span><span class="ss">:ok</span></code></pre><p>We will leave it up to you to further explore what Observer provides. Note you can double-click any process in the supervision tree to retrieve more information about it, as well as right-click a process to send &quot;a kill signal&quot;, a perfect way to emulate failures and see if your supervisor reacts as expected.</p><p>At the end of the day, tools like Observer are one of the reasons you want to always start processes inside supervision trees, even if they are temporary, to ensure they are always reachable and introspectable.</p><p>Now that our buckets are properly linked and supervised, let's see how we can speed things up.</p>

  </body>
</html>
