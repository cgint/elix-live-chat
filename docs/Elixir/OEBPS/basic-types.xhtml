<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"
      xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>Basic types - Elixir v1.18.4</title>
    <meta name="generator" content="ExDoc v0.38.2" />
    <link type="text/css" rel="stylesheet" href="dist/epub-elixir-FNUUKFP7.css" />
    <script src="dist/epub-4WIP524F.js"></script>

  </head>
  <body class="content-inner">

    <h1 id="content">Basic types</h1>
<p>In this chapter we will learn more about Elixir basic types: integers, floats, booleans, atoms, and strings. Other data types, such as lists and tuples, will be explored in the next chapter.</p><pre><code class="makeup elixir" translate="no"><span class="gp unselectable">iex&gt; </span><span class="mi">1</span><span class="w">          </span><span class="c1"># integer</span><span class="w">
</span><span class="gp unselectable">iex&gt; </span><span class="mh">0x1F</span><span class="w">       </span><span class="c1"># integer</span><span class="w">
</span><span class="gp unselectable">iex&gt; </span><span class="mf">1.0</span><span class="w">        </span><span class="c1"># float</span><span class="w">
</span><span class="gp unselectable">iex&gt; </span><span class="no">true</span><span class="w">       </span><span class="c1"># boolean</span><span class="w">
</span><span class="gp unselectable">iex&gt; </span><span class="ss">:atom</span><span class="w">      </span><span class="c1"># atom / symbol</span><span class="w">
</span><span class="gp unselectable">iex&gt; </span><span class="s">&quot;elixir&quot;</span><span class="w">   </span><span class="c1"># string</span><span class="w">
</span><span class="gp unselectable">iex&gt; </span><span class="p" data-group-id="5673128452-1">[</span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="mi">2</span><span class="p">,</span><span class="w"> </span><span class="mi">3</span><span class="p" data-group-id="5673128452-1">]</span><span class="w">  </span><span class="c1"># list</span><span class="w">
</span><span class="gp unselectable">iex&gt; </span><span class="p" data-group-id="5673128452-2">{</span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="mi">2</span><span class="p">,</span><span class="w"> </span><span class="mi">3</span><span class="p" data-group-id="5673128452-2">}</span><span class="w">  </span><span class="c1"># tuple</span></code></pre><h2 id="basic-arithmetic">Basic arithmetic</h2><p>Open up <code class="inline">iex</code> and type the following expressions:</p><pre><code class="makeup elixir" translate="no"><span class="gp unselectable">iex&gt; </span><span class="mi">1</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="mi">2</span><span class="w">
</span><span class="mi">3</span><span class="w">
</span><span class="gp unselectable">iex&gt; </span><span class="mi">5</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="mi">5</span><span class="w">
</span><span class="mi">25</span><span class="w">
</span><span class="gp unselectable">iex&gt; </span><span class="mi">10</span><span class="w"> </span><span class="o">/</span><span class="w"> </span><span class="mi">2</span><span class="w">
</span><span class="mf">5.0</span></code></pre><p>Notice that <code class="inline">10 / 2</code> returned a float <code class="inline">5.0</code> instead of an integer <code class="inline">5</code>. This is expected. In Elixir, the operator <a href="Kernel.xhtml#//2"><code class="inline">/</code></a> always returns a float. If you want to do integer division or get the division remainder, you can invoke the <a href="Kernel.xhtml#div/2"><code class="inline">div</code></a> and <a href="Kernel.xhtml#rem/2"><code class="inline">rem</code></a> functions:</p><pre><code class="makeup elixir" translate="no"><span class="gp unselectable">iex&gt; </span><span class="n">div</span><span class="p" data-group-id="1152093067-1">(</span><span class="mi">10</span><span class="p">,</span><span class="w"> </span><span class="mi">2</span><span class="p" data-group-id="1152093067-1">)</span><span class="w">
</span><span class="mi">5</span><span class="w">
</span><span class="gp unselectable">iex&gt; </span><span class="n">div</span><span class="w"> </span><span class="mi">10</span><span class="p">,</span><span class="w"> </span><span class="mi">2</span><span class="w">
</span><span class="mi">5</span><span class="w">
</span><span class="gp unselectable">iex&gt; </span><span class="n">rem</span><span class="w"> </span><span class="mi">10</span><span class="p">,</span><span class="w"> </span><span class="mi">3</span><span class="w">
</span><span class="mi">1</span></code></pre><p>Notice that Elixir allows you to drop the parentheses when invoking functions that expect one or more arguments. This feature gives a cleaner syntax when writing declarations and control-flow constructs. However, Elixir developers generally prefer to use parentheses.</p><p>Elixir also supports shortcut notations for entering binary, octal, and hexadecimal numbers:</p><pre><code class="makeup elixir" translate="no"><span class="gp unselectable">iex&gt; </span><span class="mb">0b1010</span><span class="w">
</span><span class="mi">10</span><span class="w">
</span><span class="gp unselectable">iex&gt; </span><span class="mo">0o777</span><span class="w">
</span><span class="mi">511</span><span class="w">
</span><span class="gp unselectable">iex&gt; </span><span class="mh">0x1F</span><span class="w">
</span><span class="mi">31</span></code></pre><p>Float numbers require a dot followed by at least one digit and also support <code class="inline">e</code> for scientific notation:</p><pre><code class="makeup elixir" translate="no"><span class="gp unselectable">iex&gt; </span><span class="mf">1.0</span><span class="w">
</span><span class="mf">1.0</span><span class="w">
</span><span class="gp unselectable">iex&gt; </span><span class="mf">1.0e-10</span><span class="w">
</span><span class="mf">1.0e-10</span></code></pre><p>Floats in Elixir are 64-bit precision.</p><p>You can invoke the <a href="Kernel.xhtml#round/1"><code class="inline">round</code></a> function to get the closest integer to a given float, or the <a href="Kernel.xhtml#trunc/1"><code class="inline">trunc</code></a> function to get the integer part of a float.</p><pre><code class="makeup elixir" translate="no"><span class="gp unselectable">iex&gt; </span><span class="n">round</span><span class="p" data-group-id="2874731040-1">(</span><span class="mf">3.58</span><span class="p" data-group-id="2874731040-1">)</span><span class="w">
</span><span class="mi">4</span><span class="w">
</span><span class="gp unselectable">iex&gt; </span><span class="n">trunc</span><span class="p" data-group-id="2874731040-2">(</span><span class="mf">3.58</span><span class="p" data-group-id="2874731040-2">)</span><span class="w">
</span><span class="mi">3</span></code></pre><p>Finally, we work with different data types, we will learn Elixir provides several predicate functions to check for the type of a value. For example, <a href="Kernel.xhtml#is_integer/1"><code class="inline">is_integer</code></a> can be used to check if a value is an integer or not:</p><pre><code class="makeup elixir" translate="no"><span class="gp unselectable">iex&gt; </span><span class="n">is_integer</span><span class="p" data-group-id="1005642671-1">(</span><span class="mi">1</span><span class="p" data-group-id="1005642671-1">)</span><span class="w">
</span><span class="no">true</span><span class="w">
</span><span class="gp unselectable">iex&gt; </span><span class="n">is_integer</span><span class="p" data-group-id="1005642671-2">(</span><span class="mf">2.0</span><span class="p" data-group-id="1005642671-2">)</span><span class="w">
</span><span class="no">false</span></code></pre><p>You can also use <a href="Kernel.xhtml#is_float/1"><code class="inline">is_float</code></a> or <a href="Kernel.xhtml#is_number/1"><code class="inline">is_number</code></a> to check, respectively, if an argument is a float, or either an integer or float.</p><h2 id="booleans-and-nil">Booleans and <code class="inline">nil</code></h2><p>Elixir supports <code class="inline">true</code> and <code class="inline">false</code> as booleans:</p><pre><code class="makeup elixir" translate="no"><span class="gp unselectable">iex&gt; </span><span class="no">true</span><span class="w">
</span><span class="no">true</span><span class="w">
</span><span class="gp unselectable">iex&gt; </span><span class="no">true</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="no">false</span><span class="w">
</span><span class="no">false</span></code></pre><p>Elixir also provides three boolean operators: <a href="Kernel.xhtml#or/2"><code class="inline">or</code></a>, <a href="Kernel.xhtml#and/2"><code class="inline">and</code></a>, and <a href="Kernel.xhtml#not/1"><code class="inline">not</code></a>. These operators are strict in the sense that they expect something that evaluates to a boolean (<code class="inline">true</code> or <code class="inline">false</code>) as their first argument:</p><pre><code class="makeup elixir" translate="no"><span class="gp unselectable">iex&gt; </span><span class="no">true</span><span class="w"> </span><span class="ow">and</span><span class="w"> </span><span class="no">true</span><span class="w">
</span><span class="no">true</span><span class="w">
</span><span class="gp unselectable">iex&gt; </span><span class="no">false</span><span class="w"> </span><span class="ow">or</span><span class="w"> </span><span class="n">is_boolean</span><span class="p" data-group-id="8472287219-1">(</span><span class="no">true</span><span class="p" data-group-id="8472287219-1">)</span><span class="w">
</span><span class="no">true</span></code></pre><p>Providing a non-boolean will raise an exception:</p><pre><code class="makeup elixir" translate="no"><span class="gp unselectable">iex&gt; </span><span class="mi">1</span><span class="w"> </span><span class="ow">and</span><span class="w"> </span><span class="no">true</span><span class="w">
</span><span class="gt">** (BadBooleanError) expected a boolean on left-side of &quot;and&quot;, got: 1</span></code></pre><p><code class="inline">or</code> and <code class="inline">and</code> are short-circuit operators. They only execute the right side if the left side is not enough to determine the result:</p><pre><code class="makeup elixir" translate="no"><span class="gp unselectable">iex&gt; </span><span class="no">false</span><span class="w"> </span><span class="ow">and</span><span class="w"> </span><span class="k">raise</span><span class="p" data-group-id="5215108316-1">(</span><span class="s">&quot;This error will never be raised&quot;</span><span class="p" data-group-id="5215108316-1">)</span><span class="w">
</span><span class="no">false</span><span class="w">
</span><span class="gp unselectable">iex&gt; </span><span class="no">true</span><span class="w"> </span><span class="ow">or</span><span class="w"> </span><span class="k">raise</span><span class="p" data-group-id="5215108316-2">(</span><span class="s">&quot;This error will never be raised&quot;</span><span class="p" data-group-id="5215108316-2">)</span><span class="w">
</span><span class="no">true</span></code></pre><p>Elixir also provides the concept of <code class="inline">nil</code>, to indicate the absence of a value, and a set of logical operators that also manipulate <code class="inline">nil</code>: <a href="Kernel.xhtml#%7C%7C/2"><code class="inline">||/2</code></a>, <a href="Kernel.xhtml#&&/2"><code class="inline">&amp;&amp;/2</code></a>, and <a href="Kernel.xhtml#!/1"><code class="inline">!/1</code></a>. For these operators, <code class="inline">false</code> and <code class="inline">nil</code> are considered &quot;falsy&quot;, all other values are considered &quot;truthy&quot;:</p><pre><code class="makeup elixir" translate="no"><span class="c1"># or</span><span class="w">
</span><span class="gp unselectable">iex&gt; </span><span class="mi">1</span><span class="w"> </span><span class="o">||</span><span class="w"> </span><span class="no">true</span><span class="w">
</span><span class="mi">1</span><span class="w">
</span><span class="gp unselectable">iex&gt; </span><span class="no">false</span><span class="w"> </span><span class="o">||</span><span class="w"> </span><span class="mi">11</span><span class="w">
</span><span class="mi">11</span><span class="w">

</span><span class="c1"># and</span><span class="w">
</span><span class="gp unselectable">iex&gt; </span><span class="no">nil</span><span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span><span class="mi">13</span><span class="w">
</span><span class="no">nil</span><span class="w">
</span><span class="gp unselectable">iex&gt; </span><span class="no">true</span><span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span><span class="mi">17</span><span class="w">
</span><span class="mi">17</span><span class="w">

</span><span class="c1"># not</span><span class="w">
</span><span class="gp unselectable">iex&gt; </span><span class="o">!</span><span class="no">true</span><span class="w">
</span><span class="no">false</span><span class="w">
</span><span class="gp unselectable">iex&gt; </span><span class="o">!</span><span class="mi">1</span><span class="w">
</span><span class="no">false</span><span class="w">
</span><span class="gp unselectable">iex&gt; </span><span class="o">!</span><span class="no">nil</span><span class="w">
</span><span class="no">true</span></code></pre><p>Similarly, values like <code class="inline">0</code> and <code class="inline">&quot;&quot;</code>, which some other programming languages consider to be &quot;falsy&quot;, are also &quot;truthy&quot; in Elixir.</p><p>As a rule of thumb, use <code class="inline">and</code>, <code class="inline">or</code> and <code class="inline">not</code> when you are expecting booleans. If any of the arguments are non-boolean, use <code class="inline">&amp;&amp;</code>, <code class="inline">||</code> and <code class="inline">!</code>.</p><h2 id="atoms">Atoms</h2><p>An atom is a constant whose value is its own name. Some other languages call these symbols. They are often useful to enumerate over distinct values, such as:</p><pre><code class="makeup elixir" translate="no"><span class="gp unselectable">iex&gt; </span><span class="ss">:apple</span><span class="w">
</span><span class="ss">:apple</span><span class="w">
</span><span class="gp unselectable">iex&gt; </span><span class="ss">:orange</span><span class="w">
</span><span class="ss">:orange</span><span class="w">
</span><span class="gp unselectable">iex&gt; </span><span class="ss">:watermelon</span><span class="w">
</span><span class="ss">:watermelon</span></code></pre><p>Atoms are equal if their names are equal.</p><pre><code class="makeup elixir" translate="no"><span class="gp unselectable">iex&gt; </span><span class="ss">:apple</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="ss">:apple</span><span class="w">
</span><span class="no">true</span><span class="w">
</span><span class="gp unselectable">iex&gt; </span><span class="ss">:apple</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="ss">:orange</span><span class="w">
</span><span class="no">false</span></code></pre><p>Often they are used to express the state of an operation, by using values such as <code class="inline">:ok</code> and <code class="inline">:error</code>.</p><p>The booleans <code class="inline">true</code> and <code class="inline">false</code> are also atoms:</p><pre><code class="makeup elixir" translate="no"><span class="gp unselectable">iex&gt; </span><span class="no">true</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="ss">:true</span><span class="w">
</span><span class="no">true</span><span class="w">
</span><span class="gp unselectable">iex&gt; </span><span class="n">is_atom</span><span class="p" data-group-id="9467797917-1">(</span><span class="no">false</span><span class="p" data-group-id="9467797917-1">)</span><span class="w">
</span><span class="no">true</span><span class="w">
</span><span class="gp unselectable">iex&gt; </span><span class="n">is_boolean</span><span class="p" data-group-id="9467797917-2">(</span><span class="ss">:false</span><span class="p" data-group-id="9467797917-2">)</span><span class="w">
</span><span class="no">true</span></code></pre><p>Elixir allows you to skip the leading <code class="inline">:</code> for the atoms <code class="inline">false</code>, <code class="inline">true</code> and <code class="inline">nil</code>.</p><h2 id="strings">Strings</h2><p>Strings in Elixir are delimited by double quotes, and they are encoded in UTF-8:</p><pre><code class="makeup elixir" translate="no"><span class="gp unselectable">iex&gt; </span><span class="s">&quot;hellö&quot;</span><span class="w">
</span><span class="s">&quot;hellö&quot;</span></code></pre><blockquote><p>Note: if you are running on Windows, there is a chance your terminal does not use UTF-8 by default. You can change the encoding of your current session by running <code class="inline">chcp 65001</code> before entering IEx.</p></blockquote><p>You can concatenate two strings with the <a href="Kernel.xhtml#%3C%3E/2"><code class="inline">&lt;&gt;</code></a> operator:</p><pre><code class="makeup elixir" translate="no"><span class="gp unselectable">iex&gt; </span><span class="s">&quot;hello &quot;</span><span class="w"> </span><span class="o">&lt;&gt;</span><span class="w"> </span><span class="s">&quot;world!&quot;</span><span class="w">
</span><span class="s">&quot;hello world!&quot;</span></code></pre><p>Elixir also supports string interpolation:</p><pre><code class="makeup elixir" translate="no"><span class="gp unselectable">iex&gt; </span><span class="n">string</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s">&quot;world&quot;</span><span class="w">
</span><span class="gp unselectable">iex&gt; </span><span class="s">&quot;hello </span><span class="si" data-group-id="6860466983-1">#{</span><span class="n">string</span><span class="si" data-group-id="6860466983-1">}</span><span class="s">!&quot;</span><span class="w">
</span><span class="s">&quot;hello world!&quot;</span></code></pre><p>String concatenation requires both sides to be strings but interpolation supports any data type that may be converted to a string:</p><pre><code class="makeup elixir" translate="no"><span class="gp unselectable">iex&gt; </span><span class="n">number</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">42</span><span class="w">
</span><span class="gp unselectable">iex&gt; </span><span class="s">&quot;i am </span><span class="si" data-group-id="0743463470-1">#{</span><span class="n">number</span><span class="si" data-group-id="0743463470-1">}</span><span class="s"> years old!&quot;</span><span class="w">
</span><span class="s">&quot;i am 42 years old!&quot;</span></code></pre><p>Strings can have line breaks in them. You can introduce them using escape sequences:</p><pre><code class="makeup elixir" translate="no"><span class="gp unselectable">iex&gt; </span><span class="s">&quot;hello</span><span class="gp unselectable">
...&gt; </span><span class="s">world&quot;</span><span class="w">
</span><span class="s">&quot;hello</span><span class="se">\n</span><span class="s">world&quot;</span><span class="w">
</span><span class="gp unselectable">iex&gt; </span><span class="s">&quot;hello</span><span class="se">\n</span><span class="s">world&quot;</span><span class="w">
</span><span class="s">&quot;hello</span><span class="se">\n</span><span class="s">world&quot;</span></code></pre><p>You can print a string using the <a href="IO.xhtml#puts/1"><code class="inline">IO.puts</code></a> function from the <a href="IO.xhtml"><code class="inline">IO</code></a> module:</p><pre><code class="makeup elixir" translate="no"><span class="gp unselectable">iex&gt; </span><span class="nc">IO</span><span class="o">.</span><span class="n">puts</span><span class="p" data-group-id="3789959942-1">(</span><span class="s">&quot;hello</span><span class="se">\n</span><span class="s">world&quot;</span><span class="p" data-group-id="3789959942-1">)</span><span class="w">
</span><span class="n">hello</span><span class="w">
</span><span class="n">world</span><span class="w">
</span><span class="ss">:ok</span></code></pre><p>Notice that the <a href="IO.xhtml#puts/1"><code class="inline">IO.puts</code></a> function returns the atom <code class="inline">:ok</code> after printing.</p><p>Strings in Elixir are represented internally by contiguous sequences of bytes known as binaries:</p><pre><code class="makeup elixir" translate="no"><span class="gp unselectable">iex&gt; </span><span class="n">is_binary</span><span class="p" data-group-id="4655262530-1">(</span><span class="s">&quot;hellö&quot;</span><span class="p" data-group-id="4655262530-1">)</span><span class="w">
</span><span class="no">true</span></code></pre><p>We can also get the number of bytes in a string:</p><pre><code class="makeup elixir" translate="no"><span class="gp unselectable">iex&gt; </span><span class="n">byte_size</span><span class="p" data-group-id="5645250833-1">(</span><span class="s">&quot;hellö&quot;</span><span class="p" data-group-id="5645250833-1">)</span><span class="w">
</span><span class="mi">6</span></code></pre><p>Notice that the number of bytes in that string is 6, even though it has 5 graphemes. That's because the grapheme &quot;ö&quot; takes 2 bytes to be represented in UTF-8. We can get the actual length of the string, based on the number of graphemes, by using the <a href="String.xhtml#length/1"><code class="inline">String.length</code></a> function:</p><pre><code class="makeup elixir" translate="no"><span class="gp unselectable">iex&gt; </span><span class="nc">String</span><span class="o">.</span><span class="n">length</span><span class="p" data-group-id="4095246422-1">(</span><span class="s">&quot;hellö&quot;</span><span class="p" data-group-id="4095246422-1">)</span><span class="w">
</span><span class="mi">5</span></code></pre><p>The <a href="String.xhtml"><code class="inline">String</code></a> module contains a bunch of functions that operate on strings as defined in the Unicode standard:</p><pre><code class="makeup elixir" translate="no"><span class="gp unselectable">iex&gt; </span><span class="nc">String</span><span class="o">.</span><span class="n">upcase</span><span class="p" data-group-id="5350983154-1">(</span><span class="s">&quot;hellö&quot;</span><span class="p" data-group-id="5350983154-1">)</span><span class="w">
</span><span class="s">&quot;HELLÖ&quot;</span></code></pre><h2 id="structural-comparison">Structural comparison</h2><p>Elixir also provides <a href="Kernel.xhtml#==/2"><code class="inline">==</code></a>, <a href="Kernel.xhtml#!=/2"><code class="inline">!=</code></a>, <a href="Kernel.xhtml#%3C=/2"><code class="inline">&lt;=</code></a>, <a href="Kernel.xhtml#%3E=/2"><code class="inline">&gt;=</code></a>, <a href="Kernel.xhtml#%3C/2"><code class="inline">&lt;</code></a> and <a href="Kernel.xhtml#%3E/2"><code class="inline">&gt;</code></a> as comparison operators. We can compare numbers:</p><pre><code class="makeup elixir" translate="no"><span class="gp unselectable">iex&gt; </span><span class="mi">1</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="mi">1</span><span class="w">
</span><span class="no">true</span><span class="w">
</span><span class="gp unselectable">iex&gt; </span><span class="mi">1</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="mi">2</span><span class="w">
</span><span class="no">true</span><span class="w">
</span><span class="gp unselectable">iex&gt; </span><span class="mi">1</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="mi">2</span><span class="w">
</span><span class="no">true</span></code></pre><p>But also atoms, strings, booleans, etc:</p><pre><code class="makeup elixir" translate="no"><span class="gp unselectable">iex&gt; </span><span class="s">&quot;foo&quot;</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s">&quot;foo&quot;</span><span class="w">
</span><span class="no">true</span><span class="w">
</span><span class="gp unselectable">iex&gt; </span><span class="s">&quot;foo&quot;</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s">&quot;bar&quot;</span><span class="w">
</span><span class="no">false</span></code></pre><p>Integers and floats compare the same if they have the same value:</p><pre><code class="makeup elixir" translate="no"><span class="gp unselectable">iex&gt; </span><span class="mi">1</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="mf">1.0</span><span class="w">
</span><span class="no">true</span><span class="w">
</span><span class="gp unselectable">iex&gt; </span><span class="mi">1</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="mf">2.0</span><span class="w">
</span><span class="no">false</span></code></pre><p>However, you can use the strict comparison operator <a href="Kernel.xhtml#===/2"><code class="inline">===</code></a> and <a href="Kernel.xhtml#!==/2"><code class="inline">!==</code></a> if you want to distinguish between integers and floats:</p><pre><code class="makeup elixir" translate="no"><span class="gp unselectable">iex&gt; </span><span class="mi">1</span><span class="w"> </span><span class="o">===</span><span class="w"> </span><span class="mf">1.0</span><span class="w">
</span><span class="no">false</span></code></pre><p>The comparison operators in Elixir can compare across any data type. We say these operators perform <em>structural comparison</em>. For more information, you can read our documentation on <a href="Kernel.xhtml#module-structural-comparison">Structural vs Semantic comparisons</a>.</p><p>Elixir also provides data-types for expressing collections, such as lists and tuples, which we learn next. When we talk about concurrency and fault-tolerance via processes, we will also discuss ports, pids, and references, but that will come on later chapters. Let's move forward.</p>

  </body>
</html>
