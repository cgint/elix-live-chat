<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"
      xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>Code - Elixir v1.18.4</title>
    <meta name="generator" content="ExDoc v0.38.2" />
    <link type="text/css" rel="stylesheet" href="dist/epub-elixir-FNUUKFP7.css" />
    <script src="dist/epub-4WIP524F.js"></script>

  </head>
  <body class="content-inner">

    <h1 id="content">
Code 
    </h1>


      <section id="moduledoc" class="docstring">
<p>Utilities for managing code compilation, code evaluation, and code loading.</p><p>This module complements Erlang's <a href="https://www.erlang.org/doc/apps/kernel/code.html"><code class="inline">:code</code> module</a>
to add behavior which is specific to Elixir. For functions to
manipulate Elixir's AST (rather than evaluating it), see the
<a href="Macro.xhtml"><code class="inline">Macro</code></a> module.</p><h2 id="module-working-with-files">Working with files</h2><p>This module contains three functions for compiling and evaluating files.
Here is a summary of them and their behavior:</p><ul><li><p><a href="#require_file/2"><code class="inline">require_file/2</code></a> - compiles a file and tracks its name. It does not
compile the file again if it has been previously required.</p></li><li><p><a href="#compile_file/2"><code class="inline">compile_file/2</code></a> - compiles a file without tracking its name. Compiles the
file multiple times when invoked multiple times.</p></li><li><p><a href="#eval_file/2"><code class="inline">eval_file/2</code></a> - evaluates the file contents without tracking its name. It
returns the result of the last expression in the file, instead of the modules
defined in it. Evaluated files do not trigger the compilation tracers described
in the next section.</p></li></ul><p>In a nutshell, the first must be used when you want to keep track of the files
handled by the system, to avoid the same file from being compiled multiple
times. This is common in scripts.</p><p><a href="#compile_file/2"><code class="inline">compile_file/2</code></a> must be used when you are interested in the modules defined in a
file, without tracking. <a href="#eval_file/2"><code class="inline">eval_file/2</code></a> should be used when you are interested in
the result of evaluating the file rather than the modules it defines.</p><p>The functions above work with Elixir source. If you want to work
with modules compiled to bytecode, which have the <code class="inline">.beam</code> extension
and are typically found below the _build directory of a Mix project,
see the functions in Erlang's <a href="https://www.erlang.org/doc/apps/kernel/code.html"><code class="inline">:code</code></a> module.</p><h2 id="module-code-loading-on-the-erlang-vm">Code loading on the Erlang VM</h2><p>Erlang has two modes to load code: interactive and embedded.</p><p>By default, the Erlang VM runs in interactive mode, where modules
are loaded as needed. In embedded mode the opposite happens, as all
modules need to be loaded upfront or explicitly.</p><p>You can use <a href="#ensure_loaded/1"><code class="inline">ensure_loaded/1</code></a> (as well as <a href="#ensure_loaded?/1"><code class="inline">ensure_loaded?/1</code></a> and
<a href="#ensure_loaded!/1"><code class="inline">ensure_loaded!/1</code></a>) to check if a module is loaded before using it and
act.</p><h2 id="module-ensure_compiled-1-and-ensure_compiled-1"><a href="#ensure_compiled/1"><code class="inline">ensure_compiled/1</code></a> and <a href="#ensure_compiled!/1"><code class="inline">ensure_compiled!/1</code></a></h2><p>Elixir also includes <a href="#ensure_compiled/1"><code class="inline">ensure_compiled/1</code></a> and <a href="#ensure_compiled!/1"><code class="inline">ensure_compiled!/1</code></a>
functions that are a superset of <a href="#ensure_loaded/1"><code class="inline">ensure_loaded/1</code></a>.</p><p>Since Elixir's compilation happens in parallel, in some situations
you may need to use a module that was not yet compiled, therefore
it can't even be loaded.</p><p>When invoked, <a href="#ensure_compiled/1"><code class="inline">ensure_compiled/1</code></a> and <a href="#ensure_compiled!/1"><code class="inline">ensure_compiled!/1</code></a> halt the
compilation of the caller until the module becomes available. Note that
the distinction between <a href="#ensure_compiled/1"><code class="inline">ensure_compiled/1</code></a> and <a href="#ensure_compiled!/1"><code class="inline">ensure_compiled!/1</code></a>
is important: if you are using <a href="#ensure_compiled!/1"><code class="inline">ensure_compiled!/1</code></a>, you are
indicating to the compiler that you can only continue if said module
is available.</p><p>If you are using <a href="#ensure_compiled/1"><code class="inline">Code.ensure_compiled/1</code></a>, you are implying you may
continue without the module and therefore Elixir may return
<code class="inline">{:error, :unavailable}</code> for cases where the module is not yet available
(but may be available later on).</p><p>For those reasons, developers must typically use <a href="#ensure_compiled!/1"><code class="inline">Code.ensure_compiled!/1</code></a>.
In particular, do not do this:</p><pre><code class="makeup elixir" translate="no"><samp class="k">case</samp><samp class="w"> </samp><samp class="nc">Code</samp><samp class="o">.</samp><samp class="n">ensure_compiled</samp><samp class="p" data-group-id="5037435127-1">(</samp><samp class="n">module</samp><samp class="p" data-group-id="5037435127-1">)</samp><samp class="w"> </samp><samp class="k" data-group-id="5037435127-2">do</samp><samp class="w">
  </samp><samp class="p" data-group-id="5037435127-3">{</samp><samp class="ss">:module</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="bp">_</samp><samp class="p" data-group-id="5037435127-3">}</samp><samp class="w"> </samp><samp class="o">-&gt;</samp><samp class="w"> </samp><samp class="n">module</samp><samp class="w">
  </samp><samp class="p" data-group-id="5037435127-4">{</samp><samp class="ss">:error</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="bp">_</samp><samp class="p" data-group-id="5037435127-4">}</samp><samp class="w"> </samp><samp class="o">-&gt;</samp><samp class="w"> </samp><samp class="k">raise</samp><samp class="w"> </samp><samp class="n">...</samp><samp class="w">
</samp><samp class="k" data-group-id="5037435127-2">end</samp></code></pre><p>Finally, note you only need <a href="#ensure_compiled!/1"><code class="inline">ensure_compiled!/1</code></a> to check for modules
being defined within the same project. It does not apply to modules from
dependencies as dependencies are always compiled upfront.</p><p>In most cases, <a href="#ensure_loaded/1"><code class="inline">ensure_loaded/1</code></a> is enough. <a href="#ensure_compiled!/1"><code class="inline">ensure_compiled!/1</code></a>
must be used in rare cases, usually involving macros that need to
invoke a module for callback information. The use of <a href="#ensure_compiled/1"><code class="inline">ensure_compiled/1</code></a>
is even less likely.</p><h2 id="module-compilation-tracers">Compilation tracers</h2><p>Elixir supports compilation tracers, which allow modules to observe constructs
handled by the Elixir compiler when compiling files. A tracer is a module
that implements the <code class="inline">trace/2</code> function. The function receives the event name
as first argument and <a href="Macro.Env.xhtml"><code class="inline">Macro.Env</code></a> as second and it must return <code class="inline">:ok</code>. It is
very important for a tracer to do as little work as possible synchronously
and dispatch the bulk of the work to a separate process. <strong>Slow tracers will
slow down compilation</strong>.</p><p>You can configure your list of tracers via <a href="#put_compiler_option/2"><code class="inline">put_compiler_option/2</code></a>. The
following events are available to tracers:</p><ul><li><p><code class="inline">:start</code> - (since v1.11.0) invoked whenever the compiler starts to trace
a new lexical context. A lexical context is started when compiling a new
file or when defining a module within a function. Note evaluated code
does not start a new lexical context (because they don't track unused
aliases, imports, etc) but defining a module inside evaluated code will.</p><p>Note this event may be emitted in parallel, where multiple files/modules
invoke <code class="inline">:start</code> and run at the same time. The value of the <code class="inline">lexical_tracker</code>
of the macro environment, albeit opaque, can be used to uniquely identify
the environment.</p></li><li><p><code class="inline">:stop</code> - (since v1.11.0) invoked whenever the compiler stops tracing a
new lexical context, such as a new file.</p></li><li><p><code class="inline">{:import, meta, module, opts}</code> - traced whenever <code class="inline">module</code> is imported.
<code class="inline">meta</code> is the import AST metadata and <code class="inline">opts</code> are the import options.</p></li><li><p><code class="inline">{:imported_function, meta, module, name, arity}</code> and
<code class="inline">{:imported_macro, meta, module, name, arity}</code> - traced whenever an
imported function or macro is invoked. <code class="inline">meta</code> is the call AST metadata,
<code class="inline">module</code> is the module the import is from, followed by the <code class="inline">name</code> and <code class="inline">arity</code>
of the imported function/macro. A :remote_function/:remote_macro event
may still be emitted for the imported module/name/arity.</p></li><li><p><code class="inline">{:imported_quoted, meta, module, name, [arity]}</code> - traced whenever an
imported function or macro is processed inside a <a href="Kernel.SpecialForms.xhtml#quote/2"><code class="inline">quote/2</code></a>. <code class="inline">meta</code> is the
call AST metadata, <code class="inline">module</code> is the module the import is from, followed by
the <code class="inline">name</code> and a list of <code class="inline">arities</code> of the imported function/macro.</p></li><li><p><code class="inline">{:alias, meta, alias, as, opts}</code> - traced whenever <code class="inline">alias</code> is aliased
to <code class="inline">as</code>. <code class="inline">meta</code> is the alias AST metadata and <code class="inline">opts</code> are the alias options.</p></li><li><p><code class="inline">{:alias_expansion, meta, as, alias}</code> traced whenever there is an alias
expansion for a previously defined <code class="inline">alias</code>, i.e. when the user writes <code class="inline">as</code>
which is expanded to <code class="inline">alias</code>. <code class="inline">meta</code> is the alias expansion AST metadata.</p></li><li><p><code class="inline">{:alias_reference, meta, module}</code> - traced whenever there is an alias
in the code, i.e. whenever the user writes <code class="inline">MyModule.Foo.Bar</code> in the code,
regardless if it was expanded or not.</p></li><li><p><code class="inline">{:require, meta, module, opts}</code> - traced whenever <code class="inline">module</code> is required.
<code class="inline">meta</code> is the require AST metadata and <code class="inline">opts</code> are the require options.
If the <code class="inline">meta</code> option contains the <code class="inline">:from_macro</code>, then module was called
from within a macro and therefore must be treated as a compile-time dependency.</p></li><li><p><code class="inline">{:struct_expansion, meta, module, keys}</code> - traced whenever <code class="inline">module</code>'s struct
is expanded. <code class="inline">meta</code> is the struct AST metadata and <code class="inline">keys</code> are the keys being
used by expansion</p></li><li><p><code class="inline">{:remote_function, meta, module, name, arity}</code> and
<code class="inline">{:remote_macro, meta, module, name, arity}</code> - traced whenever a remote
function or macro is referenced. <code class="inline">meta</code> is the call AST metadata, <code class="inline">module</code>
is the invoked module, followed by the <code class="inline">name</code> and <code class="inline">arity</code>.</p></li><li><p><code class="inline">{:local_function, meta, name, arity}</code> and
<code class="inline">{:local_macro, meta, name, arity}</code> - traced whenever a local
function or macro is referenced. <code class="inline">meta</code> is the call AST metadata, followed by
the <code class="inline">name</code> and <code class="inline">arity</code>.</p></li><li><p><code class="inline">{:compile_env, app, path, return}</code> - traced whenever <a href="Application.xhtml#compile_env/3"><code class="inline">Application.compile_env/3</code></a>
or <a href="Application.xhtml#compile_env!/2"><code class="inline">Application.compile_env!/2</code></a> are called. <code class="inline">app</code> is an atom, <code class="inline">path</code> is a list
of keys to traverse in the application environment and <code class="inline">return</code> is either
<code class="inline">{:ok, value}</code> or <code class="inline">:error</code>.</p></li><li><p><code class="inline">:defmodule</code> - (since v1.16.2) traced as soon as the definition of a module
starts. This is invoked early on in the module life cycle, <a href="Module.xhtml#open?/1"><code class="inline">Module.open?/1</code></a>
still returns <code class="inline">false</code> for such traces</p></li><li><p><code class="inline">{:on_module, bytecode, _ignore}</code> - (since v1.13.0) traced whenever a module
is defined. This is equivalent to the <code class="inline">@after_compile</code> callback and invoked
after any <code class="inline">@after_compile</code> in the given module. The third element is currently
<code class="inline">:none</code> but it may provide more metadata in the future. It is best to ignore
it at the moment. Note that <a href="Module.xhtml"><code class="inline">Module</code></a> functions expecting not yet compiled modules
(such as <a href="Module.xhtml#definitions_in/1"><code class="inline">Module.definitions_in/1</code></a>) are still available at the time this event
is emitted.</p></li></ul><p>The <code class="inline">:tracers</code> compiler option can be combined with the <code class="inline">:parser_options</code>
compiler option to enrich the metadata of the traced events above.</p><p>New events may be added at any time in the future, therefore it is advised
for the <code class="inline">trace/2</code> function to have a &quot;catch-all&quot; clause.</p><p>Below is an example tracer that prints all remote function invocations:</p><pre><code class="makeup elixir" translate="no"><samp class="kd">defmodule</samp><samp class="w"> </samp><samp class="nc">MyTracer</samp><samp class="w"> </samp><samp class="k" data-group-id="4651754598-1">do</samp><samp class="w">
  </samp><samp class="kd">def</samp><samp class="w"> </samp><samp class="nf">trace</samp><samp class="p" data-group-id="4651754598-2">(</samp><samp class="p" data-group-id="4651754598-3">{</samp><samp class="ss">:remote_function</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="c">_meta</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">module</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">name</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">arity</samp><samp class="p" data-group-id="4651754598-3">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">env</samp><samp class="p" data-group-id="4651754598-2">)</samp><samp class="w"> </samp><samp class="k" data-group-id="4651754598-4">do</samp><samp class="w">
    </samp><samp class="nc">IO</samp><samp class="o">.</samp><samp class="n">puts</samp><samp class="p" data-group-id="4651754598-5">(</samp><samp class="s">&quot;</samp><samp class="si" data-group-id="4651754598-6">#{</samp><samp class="n">env</samp><samp class="o">.</samp><samp class="n">file</samp><samp class="si" data-group-id="4651754598-6">}</samp><samp class="s">:</samp><samp class="si" data-group-id="4651754598-7">#{</samp><samp class="n">env</samp><samp class="o">.</samp><samp class="n">line</samp><samp class="si" data-group-id="4651754598-7">}</samp><samp class="s"> </samp><samp class="si" data-group-id="4651754598-8">#{</samp><samp class="n">inspect</samp><samp class="p" data-group-id="4651754598-9">(</samp><samp class="n">module</samp><samp class="p" data-group-id="4651754598-9">)</samp><samp class="si" data-group-id="4651754598-8">}</samp><samp class="s">.</samp><samp class="si" data-group-id="4651754598-10">#{</samp><samp class="n">name</samp><samp class="si" data-group-id="4651754598-10">}</samp><samp class="s">/</samp><samp class="si" data-group-id="4651754598-11">#{</samp><samp class="n">arity</samp><samp class="si" data-group-id="4651754598-11">}</samp><samp class="s">&quot;</samp><samp class="p" data-group-id="4651754598-5">)</samp><samp class="w">
    </samp><samp class="ss">:ok</samp><samp class="w">
  </samp><samp class="k" data-group-id="4651754598-4">end</samp><samp class="w">

  </samp><samp class="kd">def</samp><samp class="w"> </samp><samp class="nf">trace</samp><samp class="p" data-group-id="4651754598-12">(</samp><samp class="c">_event</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="c">_env</samp><samp class="p" data-group-id="4651754598-12">)</samp><samp class="w"> </samp><samp class="k" data-group-id="4651754598-13">do</samp><samp class="w">
    </samp><samp class="ss">:ok</samp><samp class="w">
  </samp><samp class="k" data-group-id="4651754598-13">end</samp><samp class="w">
</samp><samp class="k" data-group-id="4651754598-1">end</samp></code></pre>
      </section>


      <section id="summary" class="details-list">
        <h1 class="section-heading">Summary</h1>
<div class="summary-types summary">
  <h2>
    <a href="#types">Types</a>
  </h2>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#t:binding/0" data-no-tooltip="" translate="no">binding()</a>

      </div>

        <div class="summary-synopsis"><p>A list with all variables and their values.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#t:diagnostic/1" data-no-tooltip="" translate="no">diagnostic(severity)</a>

      </div>

        <div class="summary-synopsis"><p>Diagnostics returned by the compiler and code evaluation.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#t:line/0" data-no-tooltip="" translate="no">line()</a>

      </div>

        <div class="summary-synopsis"><p>The line. 0 indicates no line.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#t:position/0" data-no-tooltip="" translate="no">position()</a>

      </div>

        <div class="summary-synopsis"><p>The position of the diagnostic.</p></div>

    </div>

</div>
<div class="summary-functions summary">
  <h2>
    <a href="#functions">Functions</a>
  </h2>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#append_path/2" data-no-tooltip="" translate="no">append_path(path, opts \\ [])</a>

      </div>

        <div class="summary-synopsis"><p>Appends a path to the Erlang VM code path list.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#append_paths/2" data-no-tooltip="" translate="no">append_paths(paths, opts \\ [])</a>

      </div>

        <div class="summary-synopsis"><p>Appends a list of <code class="inline">paths</code> to the Erlang VM code path list.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#available_compiler_options/0" data-no-tooltip="" translate="no">available_compiler_options()</a>

      </div>

        <div class="summary-synopsis"><p>Returns a list with all available compiler options.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#can_await_module_compilation?/0" data-no-tooltip="" translate="no">can_await_module_compilation?()</a>

      </div>

        <div class="summary-synopsis"><p>Returns <code class="inline">true</code> if the current process can await for module compilation.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#compile_file/2" data-no-tooltip="" translate="no">compile_file(file, relative_to \\ nil)</a>

      </div>

        <div class="summary-synopsis"><p>Compiles the given file.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#compile_quoted/2" data-no-tooltip="" translate="no">compile_quoted(quoted, file \\ &quot;nofile&quot;)</a>

      </div>

        <div class="summary-synopsis"><p>Compiles the quoted expression.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#compile_string/2" data-no-tooltip="" translate="no">compile_string(string, file \\ &quot;nofile&quot;)</a>

      </div>

        <div class="summary-synopsis"><p>Compiles the given string.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#compiler_options/0" data-no-tooltip="" translate="no">compiler_options()</a>

      </div>

        <div class="summary-synopsis"><p>Gets all compilation options from the code server.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#compiler_options/1" data-no-tooltip="" translate="no">compiler_options(opts)</a>

      </div>

        <div class="summary-synopsis"><p>Stores all given compilation options.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#delete_path/1" data-no-tooltip="" translate="no">delete_path(path)</a>

      </div>

        <div class="summary-synopsis"><p>Deletes a path from the Erlang VM code path list.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#delete_paths/1" data-no-tooltip="" translate="no">delete_paths(paths)</a>

      </div>

        <div class="summary-synopsis"><p>Deletes a list of paths from the Erlang VM code path list.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#ensure_all_loaded/1" data-no-tooltip="" translate="no">ensure_all_loaded(modules)</a>

      </div>

        <div class="summary-synopsis"><p>Ensures the given modules are loaded.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#ensure_all_loaded!/1" data-no-tooltip="" translate="no">ensure_all_loaded!(modules)</a>

      </div>

        <div class="summary-synopsis"><p>Same as <a><code class="inline">ensure_all_loaded/1</code></a> but raises if any of the modules cannot be loaded.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#ensure_compiled/1" data-no-tooltip="" translate="no">ensure_compiled(module)</a>

      </div>

        <div class="summary-synopsis"><p>Similar to <a><code class="inline">ensure_compiled!/1</code></a> but indicates you can continue without said module.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#ensure_compiled!/1" data-no-tooltip="" translate="no">ensure_compiled!(module)</a>

      </div>

        <div class="summary-synopsis"><p>Ensures the given module is compiled and loaded.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#ensure_loaded/1" data-no-tooltip="" translate="no">ensure_loaded(module)</a>

      </div>

        <div class="summary-synopsis"><p>Ensures the given module is loaded.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#ensure_loaded!/1" data-no-tooltip="" translate="no">ensure_loaded!(module)</a>

      </div>

        <div class="summary-synopsis"><p>Same as <a><code class="inline">ensure_loaded/1</code></a> but raises if the module cannot be loaded.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#ensure_loaded?/1" data-no-tooltip="" translate="no">ensure_loaded?(module)</a>

      </div>

        <div class="summary-synopsis"><p>Ensures the given module is loaded.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#env_for_eval/1" data-no-tooltip="" translate="no">env_for_eval(env_or_opts)</a>

      </div>

        <div class="summary-synopsis"><p>Returns an environment for evaluation.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#eval_file/2" data-no-tooltip="" translate="no">eval_file(file, relative_to \\ nil)</a>

      </div>

        <div class="summary-synopsis"><p>Evaluates the given file.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#eval_quoted/3" data-no-tooltip="" translate="no">eval_quoted(quoted, binding \\ [], env_or_opts \\ [])</a>

      </div>

        <div class="summary-synopsis"><p>Evaluates the quoted contents.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#eval_quoted_with_env/4" data-no-tooltip="" translate="no">eval_quoted_with_env(quoted, binding, env, opts \\ [])</a>

      </div>

        <div class="summary-synopsis"><p>Evaluates the given <code class="inline">quoted</code> contents with <code class="inline">binding</code> and <code class="inline">env</code>.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#eval_string/3" data-no-tooltip="" translate="no">eval_string(string, binding \\ [], opts \\ [])</a>

      </div>

        <div class="summary-synopsis"><p>Evaluates the contents given by <code class="inline">string</code>.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#fetch_docs/1" data-no-tooltip="" translate="no">fetch_docs(module_or_path)</a>

      </div>

        <div class="summary-synopsis"><p>Returns the docs for the given module or path to <code class="inline">.beam</code> file.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#format_file!/2" data-no-tooltip="" translate="no">format_file!(file, opts \\ [])</a>

      </div>

        <div class="summary-synopsis"><p>Formats a file.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#format_string!/2" data-no-tooltip="" translate="no">format_string!(string, opts \\ [])</a>

      </div>

        <div class="summary-synopsis"><p>Formats the given code <code class="inline">string</code>.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#get_compiler_option/1" data-no-tooltip="" translate="no">get_compiler_option(key)</a>

      </div>

        <div class="summary-synopsis"><p>Returns the value of a given compiler option.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#loaded?/1" data-no-tooltip="" translate="no">loaded?(module)</a>

      </div>

        <div class="summary-synopsis"><p>Returns <code class="inline">true</code> if the module is loaded.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#prepend_path/2" data-no-tooltip="" translate="no">prepend_path(path, opts \\ [])</a>

      </div>

        <div class="summary-synopsis"><p>Prepends a path to the Erlang VM code path list.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#prepend_paths/2" data-no-tooltip="" translate="no">prepend_paths(paths, opts \\ [])</a>

      </div>

        <div class="summary-synopsis"><p>Prepends a list of <code class="inline">paths</code> to the Erlang VM code path list.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#print_diagnostic/2" data-no-tooltip="" translate="no">print_diagnostic(diagnostic, opts \\ [])</a>

      </div>

        <div class="summary-synopsis"><p>Prints a diagnostic into the standard error.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#purge_compiler_modules/0" data-no-tooltip="" translate="no">purge_compiler_modules()</a>

      </div>

        <div class="summary-synopsis"><p>Purge compiler modules.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#put_compiler_option/2" data-no-tooltip="" translate="no">put_compiler_option(key, value)</a>

      </div>

        <div class="summary-synopsis"><p>Stores a compilation option.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#quoted_to_algebra/2" data-no-tooltip="" translate="no">quoted_to_algebra(quoted, opts \\ [])</a>

      </div>

        <div class="summary-synopsis"><p>Converts a quoted expression to an algebra document using Elixir's formatter rules.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#require_file/2" data-no-tooltip="" translate="no">require_file(file, relative_to \\ nil)</a>

      </div>

        <div class="summary-synopsis"><p>Requires the given <code class="inline">file</code>.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#required_files/0" data-no-tooltip="" translate="no">required_files()</a>

      </div>

        <div class="summary-synopsis"><p>Lists all required files.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#string_to_quoted/2" data-no-tooltip="" translate="no">string_to_quoted(string, opts \\ [])</a>

      </div>

        <div class="summary-synopsis"><p>Converts the given string to its quoted form.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#string_to_quoted!/2" data-no-tooltip="" translate="no">string_to_quoted!(string, opts \\ [])</a>

      </div>

        <div class="summary-synopsis"><p>Converts the given string to its quoted form.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#string_to_quoted_with_comments/2" data-no-tooltip="" translate="no">string_to_quoted_with_comments(string, opts \\ [])</a>

      </div>

        <div class="summary-synopsis"><p>Converts the given string to its quoted form and a list of comments.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#string_to_quoted_with_comments!/2" data-no-tooltip="" translate="no">string_to_quoted_with_comments!(string, opts \\ [])</a>

      </div>

        <div class="summary-synopsis"><p>Converts the given string to its quoted form and a list of comments.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#unrequire_files/1" data-no-tooltip="" translate="no">unrequire_files(files)</a>

      </div>

        <div class="summary-synopsis"><p>Removes files from the required files list.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#with_diagnostics/2" data-no-tooltip="" translate="no">with_diagnostics(opts \\ [], fun)</a>

      </div>

        <div class="summary-synopsis"><p>Executes the given <code class="inline">fun</code> and capture all diagnostics.</p></div>

    </div>

</div>

      </section>


      <section id="types" class="details-list">
        <h1 class="section-heading">Types</h1>

        <div class="types-list">
<section class="detail" id="t:binding/0">

  <div class="detail-header">
    <a href="#t:binding/0" class="detail-link" data-no-tooltip="" aria-label="Link to this type">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">binding()</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/code.ex#L204" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@type</span> binding() :: [{<a href="typespecs.xhtml#basic-types">atom</a>() | <a href="typespecs.xhtml#basic-types">tuple</a>(), <a href="typespecs.xhtml#basic-types">any</a>()}]</pre>

      </div>

<p>A list with all variables and their values.</p><p>The binding keys are usually atoms, but they may be a tuple for variables
defined in a different context.</p>
  </section>
</section>
<section class="detail" id="t:diagnostic/1">

  <div class="detail-header">
    <a href="#t:diagnostic/1" class="detail-link" data-no-tooltip="" aria-label="Link to this type">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">diagnostic(severity)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/code.ex#L223" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@type</span> diagnostic(severity) :: %{
  :source =&gt; <a href="Path.xhtml#t:t/0">Path.t</a>() | nil,
  :file =&gt; <a href="Path.xhtml#t:t/0">Path.t</a>() | nil,
  :severity =&gt; severity,
  :message =&gt; <a href="String.xhtml#t:t/0">String.t</a>(),
  :position =&gt; <a href="#t:position/0">position</a>(),
  :stacktrace =&gt; <a href="Exception.xhtml#t:stacktrace/0">Exception.stacktrace</a>(),
  :span =&gt; {line :: <a href="typespecs.xhtml#basic-types">pos_integer</a>(), column :: <a href="typespecs.xhtml#basic-types">pos_integer</a>()} | nil,
  optional(:details) =&gt; <a href="typespecs.xhtml#built-in-types">term</a>(),
  optional(<a href="typespecs.xhtml#basic-types">any</a>()) =&gt; <a href="typespecs.xhtml#basic-types">any</a>()
}</pre>

      </div>

<p>Diagnostics returned by the compiler and code evaluation.</p><p>The file and position relate to where the diagnostic should be shown.
If there is a file and position, then the diagnostic is precise
and you can use the given file and position for generating snippets,
IDEs annotations, and so on. An optional span is available with
the line and column the diagnostic ends.</p><p>Otherwise, a stacktrace may be given, which you can place your own
heuristics to provide better reporting.</p><p>The source field points to the source file the compiler tracked
the error to. For example, a file <code class="inline">lib/foo.ex</code> may embed <code class="inline">.eex</code>
templates from <code class="inline">lib/foo/bar.eex</code>. A syntax error on the EEx template
will point to file <code class="inline">lib/foo/bar.eex</code> but the source is <code class="inline">lib/foo.ex</code>.</p>
  </section>
</section>
<section class="detail" id="t:line/0">

  <div class="detail-header">
    <a href="#t:line/0" class="detail-link" data-no-tooltip="" aria-label="Link to this type">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">line()</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/code.ex#L236" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@type</span> line() :: <a href="typespecs.xhtml#basic-types">non_neg_integer</a>()</pre>

      </div>

<p>The line. 0 indicates no line.</p>
  </section>
</section>
<section class="detail" id="t:position/0">

  <div class="detail-header">
    <a href="#t:position/0" class="detail-link" data-no-tooltip="" aria-label="Link to this type">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">position()</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/code.ex#L245" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@type</span> position() :: <a href="#t:line/0">line</a>() | {line :: <a href="typespecs.xhtml#basic-types">pos_integer</a>(), column :: <a href="typespecs.xhtml#basic-types">pos_integer</a>()}</pre>

      </div>

<p>The position of the diagnostic.</p><p>Can be either a line number or a <code class="inline">{line, column}</code>.
Line and columns numbers are one-based.
A position of <code class="inline">0</code> represents unknown.</p>
  </section>
</section>

        </div>
      </section>

      <section id="functions" class="details-list">
        <h1 class="section-heading">Functions</h1>

        <div class="functions-list">
<section class="detail" id="append_path/2">

    <span id="append_path/1"></span>

  <div class="detail-header">
    <a href="#append_path/2" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">append_path(path, opts \\ [])</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/code.ex#L350" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> append_path(<a href="Path.xhtml#t:t/0">Path.t</a>(), [{:cache, <a href="typespecs.xhtml#built-in-types">boolean</a>()}]) :: true | false</pre>

      </div>

<p>Appends a path to the Erlang VM code path list.</p><p>This is the list of directories the Erlang VM uses for
finding module code. The list of files is managed per Erlang
VM node.</p><p>The path is expanded with <a href="Path.xhtml#expand/1"><code class="inline">Path.expand/1</code></a> before being appended.
It requires the path to exist. Returns a boolean indicating if
the path was successfully added.</p><h2 id="append_path/2-examples" class="section-heading"><a href="#append_path/2-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="nc">Code</samp><samp class="o">.</samp><samp class="n">append_path</samp><samp class="p" data-group-id="4207649976-1">(</samp><samp class="s">&quot;.&quot;</samp><samp class="p" data-group-id="4207649976-1">)</samp><samp class="w">
</samp><samp class="c1">#=&gt; true</samp><samp class="w">

</samp><samp class="nc">Code</samp><samp class="o">.</samp><samp class="n">append_path</samp><samp class="p" data-group-id="4207649976-2">(</samp><samp class="s">&quot;/does_not_exist&quot;</samp><samp class="p" data-group-id="4207649976-2">)</samp><samp class="w">
</samp><samp class="c1">#=&gt; false</samp></code></pre><h2 id="append_path/2-options" class="section-heading"><a href="#append_path/2-options" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Options</span></h2><ul><li><code class="inline">:cache</code> - (since v1.15.0) when true, the code path is cached
the first time it is traversed in order to reduce file system
operations. It requires Erlang/OTP 26, otherwise it is a no-op.</li></ul>
  </section>
</section>
<section class="detail" id="append_paths/2">

    <span id="append_paths/1"></span>

  <div class="detail-header">
    <a href="#append_paths/2" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">append_paths(paths, opts \\ [])</h1>

        <span class="note">(since 1.15.0)</span>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/code.ex#L439" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> append_paths([<a href="Path.xhtml#t:t/0">Path.t</a>()], [{:cache, <a href="typespecs.xhtml#built-in-types">boolean</a>()}]) :: :ok</pre>

      </div>

<p>Appends a list of <code class="inline">paths</code> to the Erlang VM code path list.</p><p>This is the list of directories the Erlang VM uses for
finding module code. The list of files is managed per Erlang
VM node.</p><p>All paths are expanded with <a href="Path.xhtml#expand/1"><code class="inline">Path.expand/1</code></a> before being appended.
Only existing paths are appended. This function always returns <code class="inline">:ok</code>,
regardless of how many paths were appended. Use <a href="#append_path/1"><code class="inline">append_path/1</code></a>
if you need more control.</p><h2 id="append_paths/2-examples" class="section-heading"><a href="#append_paths/2-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="nc">Code</samp><samp class="o">.</samp><samp class="n">append_paths</samp><samp class="p" data-group-id="5964081486-1">(</samp><samp class="p" data-group-id="5964081486-2">[</samp><samp class="s">&quot;.&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;/does_not_exist&quot;</samp><samp class="p" data-group-id="5964081486-2">]</samp><samp class="p" data-group-id="5964081486-1">)</samp><samp class="w">
</samp><samp class="c1">#=&gt; :ok</samp></code></pre><h2 id="append_paths/2-options" class="section-heading"><a href="#append_paths/2-options" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Options</span></h2><ul><li><code class="inline">:cache</code> - when true, the code path is cached the first time
it is traversed in order to reduce file system operations.
It requires Erlang/OTP 26, otherwise it is a no-op.</li></ul>
  </section>
</section>
<section class="detail" id="available_compiler_options/0">

  <div class="detail-header">
    <a href="#available_compiler_options/0" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">available_compiler_options()</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/code.ex#L1613" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> available_compiler_options() :: [<a href="typespecs.xhtml#basic-types">atom</a>()]</pre>

      </div>

<p>Returns a list with all available compiler options.</p><p>For a description of all options, see <a href="#put_compiler_option/2"><code class="inline">put_compiler_option/2</code></a>.</p><h2 id="available_compiler_options/0-examples" class="section-heading"><a href="#available_compiler_options/0-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="nc">Code</samp><samp class="o">.</samp><samp class="n">available_compiler_options</samp><samp class="p" data-group-id="7428796632-1">(</samp><samp class="p" data-group-id="7428796632-1">)</samp><samp class="w">
</samp><samp class="c1">#=&gt; [:docs, :debug_info, ...]</samp></code></pre>
  </section>
</section>
<section class="detail" id="can_await_module_compilation?/0">

  <div class="detail-header">
    <a href="#can_await_module_compilation?/0" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">can_await_module_compilation?()</h1>

        <span class="note">(since 1.11.0)</span>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/code.ex#L2062" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> can_await_module_compilation?() :: <a href="typespecs.xhtml#built-in-types">boolean</a>()</pre>

      </div>

<p>Returns <code class="inline">true</code> if the current process can await for module compilation.</p><p>When compiling Elixir code via <a href="Kernel.ParallelCompiler.xhtml"><code class="inline">Kernel.ParallelCompiler</code></a>, which is
used by Mix and <code class="inline">elixirc</code>, calling a module that has not yet been
compiled will block the caller until the module becomes available.
Executing Elixir scripts, such as passing a filename to <code class="inline">elixir</code>,
does not await.</p>
  </section>
</section>
<section class="detail" id="compile_file/2">

    <span id="compile_file/1"></span>

  <div class="detail-header">
    <a href="#compile_file/2" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">compile_file(file, relative_to \\ nil)</h1>

        <span class="note">(since 1.7.0)</span>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/code.ex#L1836" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> compile_file(<a href="typespecs.xhtml#built-in-types">binary</a>(), nil | <a href="typespecs.xhtml#built-in-types">binary</a>()) :: [{<a href="typespecs.xhtml#built-in-types">module</a>(), <a href="typespecs.xhtml#built-in-types">binary</a>()}]</pre>

      </div>

<p>Compiles the given file.</p><p>Accepts <code class="inline">relative_to</code> as an argument to tell where the file is located.</p><p>Returns a list of tuples where the first element is the module name and
the second one is its bytecode (as a binary). Opposite to <a href="#require_file/2"><code class="inline">require_file/2</code></a>,
it does not track the filename of the compiled file.</p><p>If you would like to get the result of evaluating file rather than the
modules defined in it, see <a href="#eval_file/2"><code class="inline">eval_file/2</code></a>.</p><p>For compiling many files concurrently, see <a href="Kernel.ParallelCompiler.xhtml#compile/2"><code class="inline">Kernel.ParallelCompiler.compile/2</code></a>.</p>
  </section>
</section>
<section class="detail" id="compile_quoted/2">

    <span id="compile_quoted/1"></span>

  <div class="detail-header">
    <a href="#compile_quoted/2" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">compile_quoted(quoted, file \\ &quot;nofile&quot;)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/code.ex#L1814" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> compile_quoted(<a href="Macro.xhtml#t:t/0">Macro.t</a>(), <a href="typespecs.xhtml#built-in-types">binary</a>()) :: [{<a href="typespecs.xhtml#built-in-types">module</a>(), <a href="typespecs.xhtml#built-in-types">binary</a>()}]</pre>

      </div>

<p>Compiles the quoted expression.</p><p>Returns a list of tuples where the first element is the module name and
the second one is its bytecode (as a binary). A <code class="inline">file</code> can be
given as second argument which will be used for reporting warnings
and errors.</p>
  </section>
</section>
<section class="detail" id="compile_string/2">

    <span id="compile_string/1"></span>

  <div class="detail-header">
    <a href="#compile_string/2" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">compile_string(string, file \\ &quot;nofile&quot;)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/code.ex#L1799" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> compile_string(<a href="List.Chars.xhtml#t:t/0">List.Chars.t</a>(), <a href="typespecs.xhtml#built-in-types">binary</a>()) :: [{<a href="typespecs.xhtml#built-in-types">module</a>(), <a href="typespecs.xhtml#built-in-types">binary</a>()}]</pre>

      </div>

<p>Compiles the given string.</p><p>Returns a list of tuples where the first element is the module name
and the second one is its bytecode (as a binary). A <code class="inline">file</code> can be
given as a second argument which will be used for reporting warnings
and errors.</p><p><strong>Warning</strong>: <code class="inline">string</code> can be any Elixir code and code can be executed with
the same privileges as the Erlang VM: this means that such code could
compromise the machine (for example by executing system commands).
Don't use <a href="#compile_string/2"><code class="inline">compile_string/2</code></a> with untrusted input (such as strings coming
from the network).</p>
  </section>
</section>
<section class="detail" id="compiler_options/0">

  <div class="detail-header">
    <a href="#compiler_options/0" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">compiler_options()</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/code.ex#L1547" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> compiler_options() :: <a href="typespecs.xhtml#basic-types">map</a>()</pre>

      </div>

<p>Gets all compilation options from the code server.</p><p>To get individual options, see <a href="#get_compiler_option/1"><code class="inline">get_compiler_option/1</code></a>.
For a description of all options, see <a href="#put_compiler_option/2"><code class="inline">put_compiler_option/2</code></a>.</p><h2 id="compiler_options/0-examples" class="section-heading"><a href="#compiler_options/0-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="nc">Code</samp><samp class="o">.</samp><samp class="n">compiler_options</samp><samp class="p" data-group-id="4791575987-1">(</samp><samp class="p" data-group-id="4791575987-1">)</samp><samp class="w">
</samp><samp class="c1">#=&gt; %{debug_info: true, docs: true, ...}</samp></code></pre>
  </section>
</section>
<section class="detail" id="compiler_options/1">

  <div class="detail-header">
    <a href="#compiler_options/1" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">compiler_options(opts)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/code.ex#L1570" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> compiler_options(<a href="Enumerable.xhtml#t:t/1">Enumerable.t</a>({<a href="typespecs.xhtml#basic-types">atom</a>(), <a href="typespecs.xhtml#built-in-types">term</a>()})) :: %{
  optional(<a href="typespecs.xhtml#basic-types">atom</a>()) =&gt; <a href="typespecs.xhtml#built-in-types">term</a>()
}</pre>

      </div>

<p>Stores all given compilation options.</p><p>Changing the compilation options affect all processes
running in a given Erlang VM node. To store individual
options and for a description of all options, see
<a href="#put_compiler_option/2"><code class="inline">put_compiler_option/2</code></a>.</p><p>Returns a map with previous values.</p><h2 id="compiler_options/1-examples" class="section-heading"><a href="#compiler_options/1-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="nc">Code</samp><samp class="o">.</samp><samp class="n">compiler_options</samp><samp class="p" data-group-id="7343861980-1">(</samp><samp class="ss">infer_signatures</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">false</samp><samp class="p" data-group-id="7343861980-1">)</samp><samp class="w">
</samp><samp class="c1">#=&gt; %{infer_signatures: true}</samp></code></pre>
  </section>
</section>
<section class="detail" id="delete_path/1">

  <div class="detail-header">
    <a href="#delete_path/1" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">delete_path(path)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/code.ex#L471" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> delete_path(<a href="Path.xhtml#t:t/0">Path.t</a>()) :: <a href="typespecs.xhtml#built-in-types">boolean</a>()</pre>

      </div>

<p>Deletes a path from the Erlang VM code path list.</p><p>This is the list of directories the Erlang VM uses for finding
module code. The list of files is managed per Erlang VM node.</p><p>The path is expanded with <a href="Path.xhtml#expand/1"><code class="inline">Path.expand/1</code></a> before being deleted. If the
path does not exist, this function returns <code class="inline">false</code>.</p><h2 id="delete_path/1-examples" class="section-heading"><a href="#delete_path/1-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="nc">Code</samp><samp class="o">.</samp><samp class="n">prepend_path</samp><samp class="p" data-group-id="8571647289-1">(</samp><samp class="s">&quot;.&quot;</samp><samp class="p" data-group-id="8571647289-1">)</samp><samp class="w">
</samp><samp class="nc">Code</samp><samp class="o">.</samp><samp class="n">delete_path</samp><samp class="p" data-group-id="8571647289-2">(</samp><samp class="s">&quot;.&quot;</samp><samp class="p" data-group-id="8571647289-2">)</samp><samp class="w">
</samp><samp class="c1">#=&gt; true</samp><samp class="w">

</samp><samp class="nc">Code</samp><samp class="o">.</samp><samp class="n">delete_path</samp><samp class="p" data-group-id="8571647289-3">(</samp><samp class="s">&quot;/does_not_exist&quot;</samp><samp class="p" data-group-id="8571647289-3">)</samp><samp class="w">
</samp><samp class="c1">#=&gt; false</samp></code></pre>
  </section>
</section>
<section class="detail" id="delete_paths/1">

  <div class="detail-header">
    <a href="#delete_paths/1" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">delete_paths(paths)</h1>

        <span class="note">(since 1.15.0)</span>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/code.ex#L493" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> delete_paths([<a href="Path.xhtml#t:t/0">Path.t</a>()]) :: :ok</pre>

      </div>

<p>Deletes a list of paths from the Erlang VM code path list.</p><p>This is the list of directories the Erlang VM uses for finding
module code. The list of files is managed per Erlang VM node.</p><p>The path is expanded with <a href="Path.xhtml#expand/1"><code class="inline">Path.expand/1</code></a> before being deleted. If the
path does not exist, this function returns <code class="inline">false</code>.</p>
  </section>
</section>
<section class="detail" id="ensure_all_loaded/1">

  <div class="detail-header">
    <a href="#ensure_all_loaded/1" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">ensure_all_loaded(modules)</h1>

        <span class="note">(since 1.15.0)</span>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/code.ex#L1924" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> ensure_all_loaded([<a href="typespecs.xhtml#built-in-types">module</a>()]) :: :ok | {:error, [{<a href="typespecs.xhtml#built-in-types">module</a>(), reason}]}
when reason: :badfile | :nofile | :on_load_failure</pre>

      </div>

<p>Ensures the given modules are loaded.</p><p>Similar to <a href="#ensure_loaded/1"><code class="inline">ensure_loaded/1</code></a>, but accepts a list of modules instead of a single
module, and loads all of them.</p><p>If all modules load successfully, returns <code class="inline">:ok</code>. Otherwise, returns <code class="inline">{:error, errors}</code>
where <code class="inline">errors</code> is a list of tuples made of the module and the reason it failed to load.</p><h2 id="ensure_all_loaded/1-examples" class="section-heading"><a href="#ensure_all_loaded/1-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Code</samp><samp class="o">.</samp><samp class="n">ensure_all_loaded</samp><samp class="p" data-group-id="2862617984-1">(</samp><samp class="p" data-group-id="2862617984-2">[</samp><samp class="nc">Atom</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="nc">String</samp><samp class="p" data-group-id="2862617984-2">]</samp><samp class="p" data-group-id="2862617984-1">)</samp><samp class="w">
</samp><samp class="ss">:ok</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Code</samp><samp class="o">.</samp><samp class="n">ensure_all_loaded</samp><samp class="p" data-group-id="2862617984-3">(</samp><samp class="p" data-group-id="2862617984-4">[</samp><samp class="nc">Atom</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="nc">DoesNotExist</samp><samp class="p" data-group-id="2862617984-4">]</samp><samp class="p" data-group-id="2862617984-3">)</samp><samp class="w">
</samp><samp class="p" data-group-id="2862617984-5">{</samp><samp class="ss">:error</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="2862617984-6">[</samp><samp class="p" data-group-id="2862617984-7">{</samp><samp class="nc">DoesNotExist</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:nofile</samp><samp class="p" data-group-id="2862617984-7">}</samp><samp class="p" data-group-id="2862617984-6">]</samp><samp class="p" data-group-id="2862617984-5">}</samp></code></pre>
  </section>
</section>
<section class="detail" id="ensure_all_loaded!/1">

  <div class="detail-header">
    <a href="#ensure_all_loaded!/1" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">ensure_all_loaded!(modules)</h1>

        <span class="note">(since 1.15.0)</span>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/code.ex#L1933" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> ensure_all_loaded!([<a href="typespecs.xhtml#built-in-types">module</a>()]) :: :ok</pre>

      </div>

<p>Same as <a href="#ensure_all_loaded/1"><code class="inline">ensure_all_loaded/1</code></a> but raises if any of the modules cannot be loaded.</p>
  </section>
</section>
<section class="detail" id="ensure_compiled/1">

  <div class="detail-header">
    <a href="#ensure_compiled/1" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">ensure_compiled(module)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/code.ex#L1977" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> ensure_compiled(<a href="typespecs.xhtml#built-in-types">module</a>()) ::
  {:module, <a href="typespecs.xhtml#built-in-types">module</a>()}
  | {:error, :embedded | :badfile | :nofile | :on_load_failure | :unavailable}</pre>

      </div>

<p>Similar to <a href="#ensure_compiled!/1"><code class="inline">ensure_compiled!/1</code></a> but indicates you can continue without said module.</p><p>While <a href="#ensure_compiled!/1"><code class="inline">ensure_compiled!/1</code></a> indicates to the Elixir compiler you can
only continue when said module is available, this function indicates
you may continue compilation without said module.</p><p>If it succeeds in loading the module, it returns <code class="inline">{:module, module}</code>.
If not, returns <code class="inline">{:error, reason}</code> with the error reason.
If the module being checked is currently in a compiler deadlock,
this function returns <code class="inline">{:error, :unavailable}</code>. Unavailable doesn't
necessarily mean the module doesn't exist, just that it is not currently
available, but it (or may not) become available in the future.</p><p>Therefore, if you can only continue if the module is available, use
<a href="#ensure_compiled!/1"><code class="inline">ensure_compiled!/1</code></a> instead. In particular, do not do this:</p><pre><code class="makeup elixir" translate="no"><samp class="k">case</samp><samp class="w"> </samp><samp class="nc">Code</samp><samp class="o">.</samp><samp class="n">ensure_compiled</samp><samp class="p" data-group-id="0614760186-1">(</samp><samp class="n">module</samp><samp class="p" data-group-id="0614760186-1">)</samp><samp class="w"> </samp><samp class="k" data-group-id="0614760186-2">do</samp><samp class="w">
  </samp><samp class="p" data-group-id="0614760186-3">{</samp><samp class="ss">:module</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="bp">_</samp><samp class="p" data-group-id="0614760186-3">}</samp><samp class="w"> </samp><samp class="o">-&gt;</samp><samp class="w"> </samp><samp class="n">module</samp><samp class="w">
  </samp><samp class="p" data-group-id="0614760186-4">{</samp><samp class="ss">:error</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="bp">_</samp><samp class="p" data-group-id="0614760186-4">}</samp><samp class="w"> </samp><samp class="o">-&gt;</samp><samp class="w"> </samp><samp class="k">raise</samp><samp class="w"> </samp><samp class="n">...</samp><samp class="w">
</samp><samp class="k" data-group-id="0614760186-2">end</samp></code></pre><p>See the module documentation for more information on code loading.</p>
  </section>
</section>
<section class="detail" id="ensure_compiled!/1">

  <div class="detail-header">
    <a href="#ensure_compiled!/1" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">ensure_compiled!(module)</h1>

        <span class="note">(since 1.12.0)</span>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/code.ex#L2001" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> ensure_compiled!(<a href="typespecs.xhtml#built-in-types">module</a>()) :: <a href="typespecs.xhtml#built-in-types">module</a>()</pre>

      </div>

<p>Ensures the given module is compiled and loaded.</p><p>If the module is already loaded, it works as no-op. If the module was
not compiled yet, <a href="#ensure_compiled!/1"><code class="inline">ensure_compiled!/1</code></a> halts the compilation of the caller
until the module given to <a href="#ensure_compiled!/1"><code class="inline">ensure_compiled!/1</code></a> becomes available or
all files for the current project have been compiled. If compilation
finishes and the module is not available or is in a deadlock, an error
is raised.</p><p>Given this function halts compilation, use it carefully. In particular,
avoid using it to guess which modules are in the system. Overuse of this
function can also lead to deadlocks, where two modules check at the same time
if the other is compiled. This returns a specific unavailable error code,
where we cannot successfully verify a module is available or not.</p><p>See the module documentation for more information on code loading.</p>
  </section>
</section>
<section class="detail" id="ensure_loaded/1">

  <div class="detail-header">
    <a href="#ensure_loaded/1" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">ensure_loaded(module)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/code.ex#L1865" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> ensure_loaded(<a href="typespecs.xhtml#built-in-types">module</a>()) ::
  {:module, <a href="typespecs.xhtml#built-in-types">module</a>()}
  | {:error, :embedded | :badfile | :nofile | :on_load_failure}</pre>

      </div>

<p>Ensures the given module is loaded.</p><p>If the module is already loaded, this works as no-op. If the module
was not yet loaded, it tries to load it.</p><p>If it succeeds in loading the module, it returns <code class="inline">{:module, module}</code>.
If not, returns <code class="inline">{:error, reason}</code> with the error reason.</p><p>See the module documentation for more information on code loading.</p><h2 id="ensure_loaded/1-examples" class="section-heading"><a href="#ensure_loaded/1-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Code</samp><samp class="o">.</samp><samp class="n">ensure_loaded</samp><samp class="p" data-group-id="5266443009-1">(</samp><samp class="nc">Atom</samp><samp class="p" data-group-id="5266443009-1">)</samp><samp class="w">
</samp><samp class="p" data-group-id="5266443009-2">{</samp><samp class="ss">:module</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="nc">Atom</samp><samp class="p" data-group-id="5266443009-2">}</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Code</samp><samp class="o">.</samp><samp class="n">ensure_loaded</samp><samp class="p" data-group-id="5266443009-3">(</samp><samp class="nc">DoesNotExist</samp><samp class="p" data-group-id="5266443009-3">)</samp><samp class="w">
</samp><samp class="p" data-group-id="5266443009-4">{</samp><samp class="ss">:error</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:nofile</samp><samp class="p" data-group-id="5266443009-4">}</samp></code></pre>
  </section>
</section>
<section class="detail" id="ensure_loaded!/1">

  <div class="detail-header">
    <a href="#ensure_loaded!/1" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">ensure_loaded!(module)</h1>

        <span class="note">(since 1.12.0)</span>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/code.ex#L1892" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> ensure_loaded!(<a href="typespecs.xhtml#built-in-types">module</a>()) :: <a href="typespecs.xhtml#built-in-types">module</a>()</pre>

      </div>

<p>Same as <a href="#ensure_loaded/1"><code class="inline">ensure_loaded/1</code></a> but raises if the module cannot be loaded.</p>
  </section>
</section>
<section class="detail" id="ensure_loaded?/1">

  <div class="detail-header">
    <a href="#ensure_loaded?/1" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">ensure_loaded?(module)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/code.ex#L1883" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> ensure_loaded?(<a href="typespecs.xhtml#built-in-types">module</a>()) :: <a href="typespecs.xhtml#built-in-types">boolean</a>()</pre>

      </div>

<p>Ensures the given module is loaded.</p><p>Similar to <a href="#ensure_loaded/1"><code class="inline">ensure_loaded/1</code></a>, but returns <code class="inline">true</code> if the module
is already loaded or was successfully loaded. Returns <code class="inline">false</code>
otherwise.</p><h2 id="ensure_loaded?/1-examples" class="section-heading"><a href="#ensure_loaded?/1-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Code</samp><samp class="o">.</samp><samp class="n">ensure_loaded?</samp><samp class="p" data-group-id="7526441967-1">(</samp><samp class="nc">String</samp><samp class="p" data-group-id="7526441967-1">)</samp><samp class="w">
</samp><samp class="no">true</samp></code></pre>
  </section>
</section>
<section class="detail" id="env_for_eval/1">

  <div class="detail-header">
    <a href="#env_for_eval/1" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">env_for_eval(env_or_opts)</h1>

        <span class="note">(since 1.14.0)</span>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/code.ex#L1114" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

<p>Returns an environment for evaluation.</p><p>It accepts either a <a href="Macro.Env.xhtml"><code class="inline">Macro.Env</code></a>, that is then pruned and prepared,
or a list of options. It returns an environment that is ready for
evaluation.</p><p>Most functions in this module will automatically prepare the given
environment for evaluation, so you don't need to explicitly call
this function, with the exception of <a href="#eval_quoted_with_env/3"><code class="inline">eval_quoted_with_env/3</code></a>,
which was designed precisely to be called in a loop, to implement
features such as interactive shells or anything else with multiple
evaluations.</p><h2 id="env_for_eval/1-options" class="section-heading"><a href="#env_for_eval/1-options" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Options</span></h2><p>If an env is not given, the options can be:</p><ul><li><p><code class="inline">:file</code> - the file to be considered in the evaluation</p></li><li><p><code class="inline">:line</code> - the line on which the script starts</p></li><li><p><code class="inline">:module</code> - the module to run the environment on</p></li></ul>
  </section>
</section>
<section class="detail" id="eval_file/2">

    <span id="eval_file/1"></span>

  <div class="detail-header">
    <a href="#eval_file/2" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">eval_file(file, relative_to \\ nil)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/code.ex#L1463" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> eval_file(<a href="typespecs.xhtml#built-in-types">binary</a>(), nil | <a href="typespecs.xhtml#built-in-types">binary</a>()) :: {<a href="typespecs.xhtml#built-in-types">term</a>(), <a href="#t:binding/0">binding</a>()}</pre>

      </div>

<p>Evaluates the given file.</p><p>Accepts <code class="inline">relative_to</code> as an argument to tell where the file is located.</p><p>While <a href="#require_file/2"><code class="inline">require_file/2</code></a> and <a href="#compile_file/2"><code class="inline">compile_file/2</code></a> return the loaded modules and their
bytecode, <a href="#eval_file/2"><code class="inline">eval_file/2</code></a> simply evaluates the file contents and returns the
evaluation result and its binding (exactly the same return value as <a href="#eval_string/3"><code class="inline">eval_string/3</code></a>).</p>
  </section>
</section>
<section class="detail" id="eval_quoted/3">

    <span id="eval_quoted/1"></span>

    <span id="eval_quoted/2"></span>

  <div class="detail-header">
    <a href="#eval_quoted/3" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">eval_quoted(quoted, binding \\ [], env_or_opts \\ [])</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/code.ex#L1082" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> eval_quoted(<a href="Macro.xhtml#t:t/0">Macro.t</a>(), <a href="#t:binding/0">binding</a>(), <a href="Macro.Env.xhtml#t:t/0">Macro.Env.t</a>() | <a href="typespecs.xhtml#built-in-types">keyword</a>()) ::
  {<a href="typespecs.xhtml#built-in-types">term</a>(), <a href="#t:binding/0">binding</a>()}</pre>

      </div>

<p>Evaluates the quoted contents.</p><p><strong>Warning</strong>: Calling this function inside a macro is considered bad
practice as it will attempt to evaluate runtime values at compile time.
Macro arguments are typically transformed by unquoting them into the
returned quoted expressions (instead of evaluated).</p><p>See <a href="#eval_string/3"><code class="inline">eval_string/3</code></a> for a description of <code class="inline">binding</code> and <code class="inline">opts</code>.</p><h2 id="eval_quoted/3-examples" class="section-heading"><a href="#eval_quoted/3-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="n">contents</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="k">quote</samp><samp class="p" data-group-id="9446265618-1">(</samp><samp class="ss">do</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="n">var!</samp><samp class="p" data-group-id="9446265618-2">(</samp><samp class="n">a</samp><samp class="p" data-group-id="9446265618-2">)</samp><samp class="w"> </samp><samp class="o">+</samp><samp class="w"> </samp><samp class="n">var!</samp><samp class="p" data-group-id="9446265618-3">(</samp><samp class="n">b</samp><samp class="p" data-group-id="9446265618-3">)</samp><samp class="p" data-group-id="9446265618-1">)</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="p" data-group-id="9446265618-4">{</samp><samp class="n">result</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">binding</samp><samp class="p" data-group-id="9446265618-4">}</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="nc">Code</samp><samp class="o">.</samp><samp class="n">eval_quoted</samp><samp class="p" data-group-id="9446265618-5">(</samp><samp class="n">contents</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="9446265618-6">[</samp><samp class="ss">a</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">1</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">b</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">2</samp><samp class="p" data-group-id="9446265618-6">]</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">file</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="bp">__ENV__</samp><samp class="o">.</samp><samp class="n">file</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">line</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="bp">__ENV__</samp><samp class="o">.</samp><samp class="n">line</samp><samp class="p" data-group-id="9446265618-5">)</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="n">result</samp><samp class="w">
</samp><samp class="mi">3</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Enum</samp><samp class="o">.</samp><samp class="n">sort</samp><samp class="p" data-group-id="9446265618-7">(</samp><samp class="n">binding</samp><samp class="p" data-group-id="9446265618-7">)</samp><samp class="w">
</samp><samp class="p" data-group-id="9446265618-8">[</samp><samp class="ss">a</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">1</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">b</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">2</samp><samp class="p" data-group-id="9446265618-8">]</samp></code></pre><p>For convenience, you can pass <a href="Kernel.SpecialForms.xhtml#__ENV__/0"><code class="inline">__ENV__/0</code></a> as the <code class="inline">opts</code> argument and
all options will be automatically extracted from the current environment:</p><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="n">contents</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="k">quote</samp><samp class="p" data-group-id="6209028161-1">(</samp><samp class="ss">do</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="n">var!</samp><samp class="p" data-group-id="6209028161-2">(</samp><samp class="n">a</samp><samp class="p" data-group-id="6209028161-2">)</samp><samp class="w"> </samp><samp class="o">+</samp><samp class="w"> </samp><samp class="n">var!</samp><samp class="p" data-group-id="6209028161-3">(</samp><samp class="n">b</samp><samp class="p" data-group-id="6209028161-3">)</samp><samp class="p" data-group-id="6209028161-1">)</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="p" data-group-id="6209028161-4">{</samp><samp class="n">result</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">binding</samp><samp class="p" data-group-id="6209028161-4">}</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="nc">Code</samp><samp class="o">.</samp><samp class="n">eval_quoted</samp><samp class="p" data-group-id="6209028161-5">(</samp><samp class="n">contents</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="6209028161-6">[</samp><samp class="ss">a</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">1</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">b</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">2</samp><samp class="p" data-group-id="6209028161-6">]</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="bp">__ENV__</samp><samp class="p" data-group-id="6209028161-5">)</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="n">result</samp><samp class="w">
</samp><samp class="mi">3</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Enum</samp><samp class="o">.</samp><samp class="n">sort</samp><samp class="p" data-group-id="6209028161-7">(</samp><samp class="n">binding</samp><samp class="p" data-group-id="6209028161-7">)</samp><samp class="w">
</samp><samp class="p" data-group-id="6209028161-8">[</samp><samp class="ss">a</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">1</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">b</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">2</samp><samp class="p" data-group-id="6209028161-8">]</samp></code></pre>
  </section>
</section>
<section class="detail" id="eval_quoted_with_env/4">

    <span id="eval_quoted_with_env/3"></span>

  <div class="detail-header">
    <a href="#eval_quoted_with_env/4" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">eval_quoted_with_env(quoted, binding, env, opts \\ [])</h1>

        <span class="note">(since 1.14.0)</span>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/code.ex#L1137" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> eval_quoted_with_env(<a href="Macro.xhtml#t:t/0">Macro.t</a>(), <a href="#t:binding/0">binding</a>(), <a href="Macro.Env.xhtml#t:t/0">Macro.Env.t</a>(), <a href="typespecs.xhtml#built-in-types">keyword</a>()) ::
  {<a href="typespecs.xhtml#built-in-types">term</a>(), <a href="#t:binding/0">binding</a>(), <a href="Macro.Env.xhtml#t:t/0">Macro.Env.t</a>()}</pre>

      </div>

<p>Evaluates the given <code class="inline">quoted</code> contents with <code class="inline">binding</code> and <code class="inline">env</code>.</p><p>This function is meant to be called in a loop, to implement features
such as interactive shells or anything else with multiple evaluations.
Therefore, the first time you call this function, you must compute
the initial environment with <a href="#env_for_eval/1"><code class="inline">env_for_eval/1</code></a>. The remaining calls
must pass the environment that was returned by this function.</p><h2 id="eval_quoted_with_env/4-options" class="section-heading"><a href="#eval_quoted_with_env/4-options" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Options</span></h2><ul><li><code class="inline">:prune_binding</code> - (since v1.14.2) prune binding to keep only
variables read or written by the evaluated code. Note that
variables used by modules are always pruned, even if later used
by the modules. You can submit to the <code class="inline">:on_module</code> tracer event
and access the variables used by the module from its environment.</li></ul>
  </section>
</section>
<section class="detail" id="eval_string/3">

    <span id="eval_string/1"></span>

    <span id="eval_string/2"></span>

  <div class="detail-header">
    <a href="#eval_string/3" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">eval_string(string, binding \\ [], opts \\ [])</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/code.ex#L559" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> eval_string(<a href="List.Chars.xhtml#t:t/0">List.Chars.t</a>(), <a href="#t:binding/0">binding</a>(), <a href="Macro.Env.xhtml#t:t/0">Macro.Env.t</a>() | <a href="typespecs.xhtml#built-in-types">keyword</a>()) ::
  {<a href="typespecs.xhtml#built-in-types">term</a>(), <a href="#t:binding/0">binding</a>()}</pre>

      </div>

<p>Evaluates the contents given by <code class="inline">string</code>.</p><p>The <code class="inline">binding</code> argument is a list of all variables and their values.
The <code class="inline">opts</code> argument is a keyword list of environment options.</p><p><strong>Warning</strong>: <code class="inline">string</code> can be any Elixir code and will be executed with
the same privileges as the Erlang VM: this means that such code could
compromise the machine (for example by executing system commands).
Don't use <a href="#eval_string/3"><code class="inline">eval_string/3</code></a> with untrusted input (such as strings coming
from the network).</p><h2 id="eval_string/3-options" class="section-heading"><a href="#eval_string/3-options" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Options</span></h2><p>It accepts the same options as <a href="#env_for_eval/1"><code class="inline">env_for_eval/1</code></a>. Additionally, you may
also pass an environment as second argument, so the evaluation happens
within that environment.</p><p>Returns a tuple of the form <code class="inline">{value, binding}</code>, where <code class="inline">value</code> is the value
returned from evaluating <code class="inline">string</code>. If an error occurs while evaluating
<code class="inline">string</code>, an exception will be raised.</p><p><code class="inline">binding</code> is a list with all variable names and their values after evaluating
<code class="inline">string</code>. The binding keys are usually atoms, but they may be a tuple for variables
defined in a different context. The names are in no particular order.</p><h2 id="eval_string/3-examples" class="section-heading"><a href="#eval_string/3-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="p" data-group-id="1667161368-1">{</samp><samp class="n">result</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">binding</samp><samp class="p" data-group-id="1667161368-1">}</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="nc">Code</samp><samp class="o">.</samp><samp class="n">eval_string</samp><samp class="p" data-group-id="1667161368-2">(</samp><samp class="s">&quot;a + b&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="1667161368-3">[</samp><samp class="ss">a</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">1</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">b</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">2</samp><samp class="p" data-group-id="1667161368-3">]</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">file</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="bp">__ENV__</samp><samp class="o">.</samp><samp class="n">file</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">line</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="bp">__ENV__</samp><samp class="o">.</samp><samp class="n">line</samp><samp class="p" data-group-id="1667161368-2">)</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="n">result</samp><samp class="w">
</samp><samp class="mi">3</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Enum</samp><samp class="o">.</samp><samp class="n">sort</samp><samp class="p" data-group-id="1667161368-4">(</samp><samp class="n">binding</samp><samp class="p" data-group-id="1667161368-4">)</samp><samp class="w">
</samp><samp class="p" data-group-id="1667161368-5">[</samp><samp class="ss">a</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">1</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">b</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">2</samp><samp class="p" data-group-id="1667161368-5">]</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="p" data-group-id="1667161368-6">{</samp><samp class="n">result</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">binding</samp><samp class="p" data-group-id="1667161368-6">}</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="nc">Code</samp><samp class="o">.</samp><samp class="n">eval_string</samp><samp class="p" data-group-id="1667161368-7">(</samp><samp class="s">&quot;c = a + b&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="1667161368-8">[</samp><samp class="ss">a</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">1</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">b</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">2</samp><samp class="p" data-group-id="1667161368-8">]</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="bp">__ENV__</samp><samp class="p" data-group-id="1667161368-7">)</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="n">result</samp><samp class="w">
</samp><samp class="mi">3</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Enum</samp><samp class="o">.</samp><samp class="n">sort</samp><samp class="p" data-group-id="1667161368-9">(</samp><samp class="n">binding</samp><samp class="p" data-group-id="1667161368-9">)</samp><samp class="w">
</samp><samp class="p" data-group-id="1667161368-10">[</samp><samp class="ss">a</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">1</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">b</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">2</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">c</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">3</samp><samp class="p" data-group-id="1667161368-10">]</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="p" data-group-id="1667161368-11">{</samp><samp class="n">result</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">binding</samp><samp class="p" data-group-id="1667161368-11">}</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="nc">Code</samp><samp class="o">.</samp><samp class="n">eval_string</samp><samp class="p" data-group-id="1667161368-12">(</samp><samp class="s">&quot;a = a + b&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="1667161368-13">[</samp><samp class="ss">a</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">1</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">b</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">2</samp><samp class="p" data-group-id="1667161368-13">]</samp><samp class="p" data-group-id="1667161368-12">)</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="n">result</samp><samp class="w">
</samp><samp class="mi">3</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Enum</samp><samp class="o">.</samp><samp class="n">sort</samp><samp class="p" data-group-id="1667161368-14">(</samp><samp class="n">binding</samp><samp class="p" data-group-id="1667161368-14">)</samp><samp class="w">
</samp><samp class="p" data-group-id="1667161368-15">[</samp><samp class="ss">a</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">3</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">b</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">2</samp><samp class="p" data-group-id="1667161368-15">]</samp></code></pre><p>For convenience, you can pass <a href="Kernel.SpecialForms.xhtml#__ENV__/0"><code class="inline">__ENV__/0</code></a> as the <code class="inline">opts</code> argument and
all imports, requires and aliases defined in the current environment
will be automatically carried over:</p><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="p" data-group-id="9155483380-1">{</samp><samp class="n">result</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">binding</samp><samp class="p" data-group-id="9155483380-1">}</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="nc">Code</samp><samp class="o">.</samp><samp class="n">eval_string</samp><samp class="p" data-group-id="9155483380-2">(</samp><samp class="s">&quot;a + b&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="9155483380-3">[</samp><samp class="ss">a</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">1</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">b</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">2</samp><samp class="p" data-group-id="9155483380-3">]</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="bp">__ENV__</samp><samp class="p" data-group-id="9155483380-2">)</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="n">result</samp><samp class="w">
</samp><samp class="mi">3</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Enum</samp><samp class="o">.</samp><samp class="n">sort</samp><samp class="p" data-group-id="9155483380-4">(</samp><samp class="n">binding</samp><samp class="p" data-group-id="9155483380-4">)</samp><samp class="w">
</samp><samp class="p" data-group-id="9155483380-5">[</samp><samp class="ss">a</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">1</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">b</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">2</samp><samp class="p" data-group-id="9155483380-5">]</samp></code></pre>
  </section>
</section>
<section class="detail" id="fetch_docs/1">

  <div class="detail-header">
    <a href="#fetch_docs/1" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">fetch_docs(module_or_path)</h1>

        <span class="note">(since 1.7.0)</span>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/code.ex#L2114" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> fetch_docs(<a href="typespecs.xhtml#built-in-types">module</a>() | <a href="String.xhtml#t:t/0">String.t</a>()) ::
  {:docs_v1, annotation, beam_language, format, module_doc :: doc_content,
   metadata, docs :: [doc_element]}
  | {:error,
     :module_not_found
     | :chunk_not_found
     | {:invalid_chunk, <a href="typespecs.xhtml#built-in-types">binary</a>()}
     | :invalid_beam}
when annotation: <a href="https://www.erlang.org/doc/apps/stdlib/erl_anno.html#t:anno/0">:erl_anno.anno</a>(),
     beam_language: :elixir | :erlang | <a href="typespecs.xhtml#basic-types">atom</a>(),
     doc_content: %{optional(<a href="typespecs.xhtml#built-in-types">binary</a>()) =&gt; <a href="typespecs.xhtml#built-in-types">binary</a>()} | :none | :hidden,
     doc_element:
       {{kind :: <a href="typespecs.xhtml#basic-types">atom</a>(), function_name :: <a href="typespecs.xhtml#basic-types">atom</a>(), <a href="typespecs.xhtml#built-in-types">arity</a>()}, annotation,
        signature, doc_content, metadata},
     format: <a href="typespecs.xhtml#built-in-types">binary</a>(),
     signature: [<a href="typespecs.xhtml#built-in-types">binary</a>()],
     metadata: <a href="typespecs.xhtml#basic-types">map</a>()</pre>

      </div>

<p>Returns the docs for the given module or path to <code class="inline">.beam</code> file.</p><p>When given a module name, it finds its BEAM code and reads the docs from it.</p><p>When given a path to a <code class="inline">.beam</code> file, it will load the docs directly from that
file.</p><p>It returns the term stored in the documentation chunk in the format defined by
<a href="https://www.erlang.org/eeps/eep-0048.html">EEP 48</a> or <code class="inline">{:error, reason}</code> if
the chunk is not available.</p><h2 id="fetch_docs/1-examples" class="section-heading"><a href="#fetch_docs/1-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="c1"># Module documentation of an existing module</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="p" data-group-id="2948661184-1">{</samp><samp class="ss">:docs_v1</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="bp">_</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:elixir</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="bp">_</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="2948661184-2">%{</samp><samp class="s">&quot;en&quot;</samp><samp class="w"> </samp><samp class="p">=&gt;</samp><samp class="w"> </samp><samp class="n">module_doc</samp><samp class="p" data-group-id="2948661184-2">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="bp">_</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="bp">_</samp><samp class="p" data-group-id="2948661184-1">}</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="nc">Code</samp><samp class="o">.</samp><samp class="n">fetch_docs</samp><samp class="p" data-group-id="2948661184-3">(</samp><samp class="nc">Atom</samp><samp class="p" data-group-id="2948661184-3">)</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="n">module_doc</samp><samp class="w"> </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">split</samp><samp class="p" data-group-id="2948661184-4">(</samp><samp class="s">&quot;</samp><samp class="se">\n</samp><samp class="s">&quot;</samp><samp class="p" data-group-id="2948661184-4">)</samp><samp class="w"> </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Enum</samp><samp class="o">.</samp><samp class="n">at</samp><samp class="p" data-group-id="2948661184-5">(</samp><samp class="mi">0</samp><samp class="p" data-group-id="2948661184-5">)</samp><samp class="w">
</samp><samp class="s">&quot;Atoms are constants whose values are their own name.&quot;</samp><samp class="w">

</samp><samp class="c1"># A module that doesn&#39;t exist</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Code</samp><samp class="o">.</samp><samp class="n">fetch_docs</samp><samp class="p" data-group-id="2948661184-6">(</samp><samp class="nc">ModuleNotGood</samp><samp class="p" data-group-id="2948661184-6">)</samp><samp class="w">
</samp><samp class="p" data-group-id="2948661184-7">{</samp><samp class="ss">:error</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:module_not_found</samp><samp class="p" data-group-id="2948661184-7">}</samp></code></pre>
  </section>
</section>
<section class="detail" id="format_file!/2">

    <span id="format_file!/1"></span>

  <div class="detail-header">
    <a href="#format_file!/2" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">format_file!(file, opts \\ [])</h1>

        <span class="note">(since 1.6.0)</span>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/code.ex#L1045" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> format_file!(
  <a href="typespecs.xhtml#built-in-types">binary</a>(),
  <a href="typespecs.xhtml#built-in-types">keyword</a>()
) :: <a href="typespecs.xhtml#built-in-types">iodata</a>()</pre>

      </div>

<p>Formats a file.</p><p>See <a href="#format_string!/2"><code class="inline">format_string!/2</code></a> for more information on code formatting and
available options.</p>
  </section>
</section>
<section class="detail" id="format_string!/2">

    <span id="format_string!/1"></span>

  <div class="detail-header">
    <a href="#format_string!/2" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">format_string!(string, opts \\ [])</h1>

        <span class="note">(since 1.6.0)</span>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/code.ex#L1020" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> format_string!(
  <a href="typespecs.xhtml#built-in-types">binary</a>(),
  <a href="typespecs.xhtml#built-in-types">keyword</a>()
) :: <a href="typespecs.xhtml#built-in-types">iodata</a>()</pre>

      </div>

<p>Formats the given code <code class="inline">string</code>.</p><p>The formatter receives a string representing Elixir code and
returns iodata representing the formatted code according to
pre-defined rules.</p><h2 id="format_string!/2-options" class="section-heading"><a href="#format_string!/2-options" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Options</span></h2><p>Regular options (do not change the AST):</p><ul><li><p><code class="inline">:file</code> - the file which contains the string, used for error
reporting</p></li><li><p><code class="inline">:line</code> - the line the string starts, used for error reporting</p></li><li><p><code class="inline">:line_length</code> - the line length to aim for when formatting
the document. Defaults to 98. This value indicates when an expression
should be broken over multiple lines but it is not guaranteed
to do so. See the &quot;Line length&quot; section below for more information</p></li><li><p><code class="inline">:locals_without_parens</code> - a keyword list of name and arity
pairs that should be kept without parens whenever possible.
The arity may be the atom <code class="inline">:*</code>, which implies all arities of
that name. The formatter already includes a list of functions
and this option augments this list.</p></li><li><p><code class="inline">:force_do_end_blocks</code> (since v1.9.0) - when <code class="inline">true</code>, converts all
inline usages of <code class="inline">do: ...</code>,  <code class="inline">else: ...</code> and friends into <code class="inline">do</code>-<code class="inline">end</code>
blocks. Defaults to <code class="inline">false</code>. Note that this option is convergent:
once you set it to <code class="inline">true</code>, <strong>all keywords</strong> will be converted.
If you set it to <code class="inline">false</code> later on, <code class="inline">do</code>-<code class="inline">end</code> blocks won't be
converted back to keywords.</p></li></ul><p>Migration options (change the AST), see the &quot;Migration formatting&quot; section below:</p><ul><li><p><code class="inline">:migrate</code> (since v1.18.0) - when <code class="inline">true</code>, sets all other migration options
to <code class="inline">true</code> by default. Defaults to <code class="inline">false</code>.</p></li><li><p><code class="inline">:migrate_bitstring_modifiers</code> (since v1.18.0) - when <code class="inline">true</code>,
removes unnecessary parentheses in known bitstring
<a href="Kernel.SpecialForms.xhtml#%3C%3C%3E%3E/1">modifiers</a>, for example <code class="inline">&lt;&lt;foo::binary()&gt;&gt;</code>
becomes <code class="inline">&lt;&lt;foo::binary&gt;&gt;</code>, or adds parentheses for custom
modifiers, where <code class="inline">&lt;&lt;foo::custom_type&gt;&gt;</code> becomes <code class="inline">&lt;&lt;foo::custom_type()&gt;&gt;</code>.
Defaults to the value of the <code class="inline">:migrate</code> option. This option changes the AST.</p></li><li><p><code class="inline">:migrate_charlists_as_sigils</code> (since v1.18.0) - when <code class="inline">true</code>,
formats charlists as <a href="Kernel.xhtml#sigil_c/2"><code class="inline">~c</code></a> sigils, for example
<code class="inline">'foo'</code> becomes <code class="inline">~c&quot;foo&quot;</code>.
Defaults to the value of the <code class="inline">:migrate</code> option. This option changes the AST.</p></li><li><p><code class="inline">:migrate_unless</code> (since v1.18.0) - when <code class="inline">true</code>,
rewrites <code class="inline">unless</code> expressions using <code class="inline">if</code> with a negated condition, for example
<code class="inline">unless foo, do:</code> becomes <code class="inline">if !foo, do:</code>.
Defaults to the value of the <code class="inline">:migrate</code> option. This option changes the AST.</p></li></ul><h2 id="format_string!/2-design-principles" class="section-heading"><a href="#format_string!/2-design-principles" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Design principles</span></h2><p>The formatter was designed under three principles.</p><p>First, the formatter never changes the semantics of the code by default.
This means the input AST and the output AST are almost always equivalent.</p><p>The second principle is to provide as little configuration as possible.
This eases the formatter adoption by removing contention points while
making sure a single style is followed consistently by the community as
a whole.</p><p>The formatter does not hard code names. The formatter will not behave
specially because a function is named <code class="inline">defmodule</code>, <code class="inline">def</code>, or the like. This
principle mirrors Elixir's goal of being an extensible language where
developers can extend the language with new constructs as if they were
part of the language. When it is absolutely necessary to change behavior
based on the name, this behavior should be configurable, such as the
<code class="inline">:locals_without_parens</code> option.</p><h2 id="format_string!/2-running-the-formatter" class="section-heading"><a href="#format_string!/2-running-the-formatter" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Running the formatter</span></h2><p>The formatter attempts to fit the most it can on a single line and
introduces line breaks wherever possible when it cannot.</p><p>In some cases, this may lead to undesired formatting. Therefore, <strong>some
code generated by the formatter may not be aesthetically pleasing and
may require explicit intervention from the developer</strong>. That's why we
do not recommend to run the formatter blindly in an existing codebase.
Instead you should format and sanity check each formatted file.</p><p>For example, the formatter may break a long function definition over
multiple clauses:</p><pre><code class="makeup elixir" translate="no"><samp class="kd">def</samp><samp class="w"> </samp><samp class="nf">my_function</samp><samp class="p" data-group-id="5558876607-1">(</samp><samp class="w">
  </samp><samp class="p" data-group-id="5558876607-2">%</samp><samp class="nc" data-group-id="5558876607-2">User</samp><samp class="p" data-group-id="5558876607-2">{</samp><samp class="ss">name</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="n">name</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">age</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="n">age</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">...</samp><samp class="p" data-group-id="5558876607-2">}</samp><samp class="p">,</samp><samp class="w">
  </samp><samp class="n">arg1</samp><samp class="p">,</samp><samp class="w">
  </samp><samp class="n">arg2</samp><samp class="w">
</samp><samp class="p" data-group-id="5558876607-1">)</samp><samp class="w"> </samp><samp class="k" data-group-id="5558876607-3">do</samp><samp class="w">
  </samp><samp class="n">...</samp><samp class="w">
</samp><samp class="k" data-group-id="5558876607-3">end</samp></code></pre><p>While the code above is completely valid, you may prefer to match on
the struct variables inside the function body in order to keep the
definition on a single line:</p><pre><code class="makeup elixir" translate="no"><samp class="kd">def</samp><samp class="w"> </samp><samp class="nf">my_function</samp><samp class="p" data-group-id="7906070098-1">(</samp><samp class="p" data-group-id="7906070098-2">%</samp><samp class="nc" data-group-id="7906070098-2">User</samp><samp class="p" data-group-id="7906070098-2">{</samp><samp class="p" data-group-id="7906070098-2">}</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="n">user</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">arg1</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">arg2</samp><samp class="p" data-group-id="7906070098-1">)</samp><samp class="w"> </samp><samp class="k" data-group-id="7906070098-3">do</samp><samp class="w">
  </samp><samp class="p" data-group-id="7906070098-4">%{</samp><samp class="ss">name</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="n">name</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">age</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="n">age</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">...</samp><samp class="p" data-group-id="7906070098-4">}</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="n">user</samp><samp class="w">
  </samp><samp class="n">...</samp><samp class="w">
</samp><samp class="k" data-group-id="7906070098-3">end</samp></code></pre><p>In some situations, you can use the fact the formatter does not generate
elegant code as a hint for refactoring. Take this code:</p><pre><code class="makeup elixir" translate="no"><samp class="kd">def</samp><samp class="w"> </samp><samp class="nf">board?</samp><samp class="p" data-group-id="9195538752-1">(</samp><samp class="n">board_id</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="9195538752-2">%</samp><samp class="nc" data-group-id="9195538752-2">User</samp><samp class="p" data-group-id="9195538752-2">{</samp><samp class="p" data-group-id="9195538752-2">}</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="n">user</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">available_permissions</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">required_permissions</samp><samp class="p" data-group-id="9195538752-1">)</samp><samp class="w"> </samp><samp class="k" data-group-id="9195538752-3">do</samp><samp class="w">
  </samp><samp class="nc">Tracker.OrganizationMembers</samp><samp class="o">.</samp><samp class="n">user_in_organization?</samp><samp class="p" data-group-id="9195538752-4">(</samp><samp class="n">user</samp><samp class="o">.</samp><samp class="n">id</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">board</samp><samp class="o">.</samp><samp class="n">organization_id</samp><samp class="p" data-group-id="9195538752-4">)</samp><samp class="w"> </samp><samp class="ow">and</samp><samp class="w">
    </samp><samp class="n">required_permissions</samp><samp class="w"> </samp><samp class="o">==</samp><samp class="w"> </samp><samp class="nc">Enum</samp><samp class="o">.</samp><samp class="n">to_list</samp><samp class="p" data-group-id="9195538752-5">(</samp><samp class="nc">MapSet</samp><samp class="o">.</samp><samp class="n">intersection</samp><samp class="p" data-group-id="9195538752-6">(</samp><samp class="nc">MapSet</samp><samp class="o">.</samp><samp class="n">new</samp><samp class="p" data-group-id="9195538752-7">(</samp><samp class="n">required_permissions</samp><samp class="p" data-group-id="9195538752-7">)</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="nc">MapSet</samp><samp class="o">.</samp><samp class="n">new</samp><samp class="p" data-group-id="9195538752-8">(</samp><samp class="n">available_permissions</samp><samp class="p" data-group-id="9195538752-8">)</samp><samp class="p" data-group-id="9195538752-6">)</samp><samp class="p" data-group-id="9195538752-5">)</samp><samp class="w">
</samp><samp class="k" data-group-id="9195538752-3">end</samp></code></pre><p>The code above has very long lines and running the formatter is not going
to address this issue. In fact, the formatter may make it more obvious that
you have complex expressions:</p><pre><code class="makeup elixir" translate="no"><samp class="kd">def</samp><samp class="w"> </samp><samp class="nf">board?</samp><samp class="p" data-group-id="4930316406-1">(</samp><samp class="n">board_id</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="4930316406-2">%</samp><samp class="nc" data-group-id="4930316406-2">User</samp><samp class="p" data-group-id="4930316406-2">{</samp><samp class="p" data-group-id="4930316406-2">}</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="n">user</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">available_permissions</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">required_permissions</samp><samp class="p" data-group-id="4930316406-1">)</samp><samp class="w"> </samp><samp class="k" data-group-id="4930316406-3">do</samp><samp class="w">
  </samp><samp class="nc">Tracker.OrganizationMembers</samp><samp class="o">.</samp><samp class="n">user_in_organization?</samp><samp class="p" data-group-id="4930316406-4">(</samp><samp class="n">user</samp><samp class="o">.</samp><samp class="n">id</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">board</samp><samp class="o">.</samp><samp class="n">organization_id</samp><samp class="p" data-group-id="4930316406-4">)</samp><samp class="w"> </samp><samp class="ow">and</samp><samp class="w">
    </samp><samp class="n">required_permissions</samp><samp class="w"> </samp><samp class="o">==</samp><samp class="w">
      </samp><samp class="nc">Enum</samp><samp class="o">.</samp><samp class="n">to_list</samp><samp class="p" data-group-id="4930316406-5">(</samp><samp class="w">
        </samp><samp class="nc">MapSet</samp><samp class="o">.</samp><samp class="n">intersection</samp><samp class="p" data-group-id="4930316406-6">(</samp><samp class="w">
          </samp><samp class="nc">MapSet</samp><samp class="o">.</samp><samp class="n">new</samp><samp class="p" data-group-id="4930316406-7">(</samp><samp class="n">required_permissions</samp><samp class="p" data-group-id="4930316406-7">)</samp><samp class="p">,</samp><samp class="w">
          </samp><samp class="nc">MapSet</samp><samp class="o">.</samp><samp class="n">new</samp><samp class="p" data-group-id="4930316406-8">(</samp><samp class="n">available_permissions</samp><samp class="p" data-group-id="4930316406-8">)</samp><samp class="w">
        </samp><samp class="p" data-group-id="4930316406-6">)</samp><samp class="w">
      </samp><samp class="p" data-group-id="4930316406-5">)</samp><samp class="w">
</samp><samp class="k" data-group-id="4930316406-3">end</samp></code></pre><p>Take such cases as a suggestion that your code should be refactored:</p><pre><code class="makeup elixir" translate="no"><samp class="kd">def</samp><samp class="w"> </samp><samp class="nf">board?</samp><samp class="p" data-group-id="8130466110-1">(</samp><samp class="n">board_id</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="8130466110-2">%</samp><samp class="nc" data-group-id="8130466110-2">User</samp><samp class="p" data-group-id="8130466110-2">{</samp><samp class="p" data-group-id="8130466110-2">}</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="n">user</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">available_permissions</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">required_permissions</samp><samp class="p" data-group-id="8130466110-1">)</samp><samp class="w"> </samp><samp class="k" data-group-id="8130466110-3">do</samp><samp class="w">
  </samp><samp class="nc">Tracker.OrganizationMembers</samp><samp class="o">.</samp><samp class="n">user_in_organization?</samp><samp class="p" data-group-id="8130466110-4">(</samp><samp class="n">user</samp><samp class="o">.</samp><samp class="n">id</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">board</samp><samp class="o">.</samp><samp class="n">organization_id</samp><samp class="p" data-group-id="8130466110-4">)</samp><samp class="w"> </samp><samp class="ow">and</samp><samp class="w">
    </samp><samp class="n">matching_permissions?</samp><samp class="p" data-group-id="8130466110-5">(</samp><samp class="n">required_permissions</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">available_permissions</samp><samp class="p" data-group-id="8130466110-5">)</samp><samp class="w">
</samp><samp class="k" data-group-id="8130466110-3">end</samp><samp class="w">

</samp><samp class="kd">defp</samp><samp class="w"> </samp><samp class="nf">matching_permissions?</samp><samp class="p" data-group-id="8130466110-6">(</samp><samp class="n">required_permissions</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">available_permissions</samp><samp class="p" data-group-id="8130466110-6">)</samp><samp class="w"> </samp><samp class="k" data-group-id="8130466110-7">do</samp><samp class="w">
  </samp><samp class="n">intersection</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w">
    </samp><samp class="n">required_permissions</samp><samp class="w">
    </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">MapSet</samp><samp class="o">.</samp><samp class="n">new</samp><samp class="p" data-group-id="8130466110-8">(</samp><samp class="p" data-group-id="8130466110-8">)</samp><samp class="w">
    </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">MapSet</samp><samp class="o">.</samp><samp class="n">intersection</samp><samp class="p" data-group-id="8130466110-9">(</samp><samp class="nc">MapSet</samp><samp class="o">.</samp><samp class="n">new</samp><samp class="p" data-group-id="8130466110-10">(</samp><samp class="n">available_permissions</samp><samp class="p" data-group-id="8130466110-10">)</samp><samp class="p" data-group-id="8130466110-9">)</samp><samp class="w">
    </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Enum</samp><samp class="o">.</samp><samp class="n">to_list</samp><samp class="p" data-group-id="8130466110-11">(</samp><samp class="p" data-group-id="8130466110-11">)</samp><samp class="w">

  </samp><samp class="n">required_permissions</samp><samp class="w"> </samp><samp class="o">==</samp><samp class="w"> </samp><samp class="n">intersection</samp><samp class="w">
</samp><samp class="k" data-group-id="8130466110-7">end</samp></code></pre><p>To sum it up: since the formatter cannot change the semantics of your
code, sometimes it is necessary to tweak or refactor the code to get
optimal formatting. To help better understand how to control the formatter,
we describe in the next sections the cases where the formatter keeps the
user encoding and how to control multiline expressions.</p><h2 id="format_string!/2-line-length" class="section-heading"><a href="#format_string!/2-line-length" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Line length</span></h2><p>Another point about the formatter is that the <code class="inline">:line_length</code> configuration
indicates when an expression should be broken over multiple lines but it is
not guaranteed to do so. In many cases, it is not possible for the formatter
to break your code apart, which means it will go over the line length.
For example, if you have a long string:</p><pre><code class="makeup elixir" translate="no"><samp class="s">&quot;this is a very long string that will go over the line length&quot;</samp></code></pre><p>The formatter doesn't know how to break it apart without changing the
code underlying syntax representation, so it is up to you to step in:</p><pre><code class="makeup elixir" translate="no"><samp class="s">&quot;this is a very long string &quot;</samp><samp class="w"> </samp><samp class="o">&lt;&gt;</samp><samp class="w">
   </samp><samp class="s">&quot;that will go over the line length&quot;</samp></code></pre><p>The string concatenation makes the code fit on a single line and also
gives more options to the formatter.</p><p>This may also appear in keywords such as do/end blocks and operators,
where the <code class="inline">do</code> keyword may go over the line length because there is no
opportunity for the formatter to introduce a line break in a readable way.
For example, if you do:</p><pre><code class="makeup elixir" translate="no"><samp class="k">case</samp><samp class="w"> </samp><samp class="n">very_long_expression</samp><samp class="p" data-group-id="1955268484-1">(</samp><samp class="p" data-group-id="1955268484-1">)</samp><samp class="w"> </samp><samp class="k" data-group-id="1955268484-2">do</samp><samp class="w">
</samp><samp class="k" data-group-id="1955268484-2">end</samp></code></pre><p>And only the <code class="inline">do</code> keyword is beyond the line length, Elixir <strong>will not</strong>
emit this:</p><pre><code class="makeup elixir" translate="no"><samp class="k">case</samp><samp class="w"> </samp><samp class="n">very_long_expression</samp><samp class="p" data-group-id="1060101022-1">(</samp><samp class="p" data-group-id="1060101022-1">)</samp><samp class="w">
</samp><samp class="k" data-group-id="1060101022-2">do</samp><samp class="w">
</samp><samp class="k" data-group-id="1060101022-2">end</samp></code></pre><p>So it prefers to not touch the line at all and leave <code class="inline">do</code> above the
line limit.</p><h2 id="format_string!/2-keeping-user-s-formatting" class="section-heading"><a href="#format_string!/2-keeping-user-s-formatting" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Keeping user's formatting</span></h2><p>The formatter respects the input format in some cases. Those are
listed below:</p><ul><li><p>Insignificant digits in numbers are kept as is. The formatter,
however, always inserts underscores for decimal numbers with more
than 5 digits and converts hexadecimal digits to uppercase</p></li><li><p>Strings, charlists, atoms and sigils are kept as is. No character
is automatically escaped or unescaped. The choice of delimiter is
also respected from the input</p></li><li><p>Newlines inside blocks are kept as in the input except for:</p><ol><li>expressions that take multiple lines will always have an empty
line before and after and 2) empty lines are always squeezed
together into a single empty line</li></ol></li><li><p>The choice between <code class="inline">:do</code> keyword and <code class="inline">do</code>-<code class="inline">end</code> blocks is left
to the user</p></li><li><p>Lists, tuples, bitstrings, maps, structs and function calls will be
broken into multiple lines if they are followed by a newline in the
opening bracket and preceded by a new line in the closing bracket</p></li><li><p>Newlines before certain operators (such as the pipeline operators)
and before other operators (such as comparison operators)</p></li></ul><p>The behaviors above are not guaranteed. We may remove or add new
rules in the future. The goal of documenting them is to provide better
understanding on what to expect from the formatter.</p><h3 id="format_string!/2-multi-line-lists-maps-tuples-and-the-like" class="section-heading"><a href="#format_string!/2-multi-line-lists-maps-tuples-and-the-like" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Multi-line lists, maps, tuples, and the like</span></h3><p>You can force lists, tuples, bitstrings, maps, structs and function
calls to have one entry per line by adding a newline after the opening
bracket and a new line before the closing bracket lines. For example:</p><pre><code class="makeup elixir" translate="no"><samp class="p" data-group-id="5673541373-1">[</samp><samp class="w">
  </samp><samp class="n">foo</samp><samp class="p">,</samp><samp class="w">
  </samp><samp class="n">bar</samp><samp class="w">
</samp><samp class="p" data-group-id="5673541373-1">]</samp></code></pre><p>If there are no newlines around the brackets, then the formatter will
try to fit everything on a single line, such that the snippet below</p><pre><code class="makeup elixir" translate="no"><samp class="p" data-group-id="3005476561-1">[</samp><samp class="n">foo</samp><samp class="p">,</samp><samp class="w">
 </samp><samp class="n">bar</samp><samp class="p" data-group-id="3005476561-1">]</samp></code></pre><p>will be formatted as</p><pre><code class="makeup elixir" translate="no"><samp class="p" data-group-id="8467691273-1">[</samp><samp class="n">foo</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">bar</samp><samp class="p" data-group-id="8467691273-1">]</samp></code></pre><p>You can also force function calls and keywords to be rendered on multiple
lines by having each entry on its own line:</p><pre><code class="makeup elixir" translate="no"><samp class="kd">defstruct</samp><samp class="w"> </samp><samp class="ss">name</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">nil</samp><samp class="p">,</samp><samp class="w">
          </samp><samp class="ss">age</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">0</samp></code></pre><p>The code above will be kept with one keyword entry per line by the
formatter. To avoid that, just squash everything into a single line.</p><h3 id="format_string!/2-parens-and-no-parens-in-function-calls" class="section-heading"><a href="#format_string!/2-parens-and-no-parens-in-function-calls" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Parens and no parens in function calls</span></h3><p>Elixir has two syntaxes for function calls. With parens and no parens.
By default, Elixir will add parens to all calls except for:</p><ol><li>calls that have <code class="inline">do</code>-<code class="inline">end</code> blocks</li><li>local calls without parens where the name and arity of the local
call is also listed under <code class="inline">:locals_without_parens</code> (except for
calls with arity 0, where the compiler always require parens)</li></ol><p>The choice of parens and no parens also affects indentation. When a
function call with parens doesn't fit on the same line, the formatter
introduces a newline around parens and indents the arguments with two
spaces:</p><pre><code class="makeup elixir" translate="no"><samp class="n">some_call</samp><samp class="p" data-group-id="1339580087-1">(</samp><samp class="w">
  </samp><samp class="n">arg1</samp><samp class="p">,</samp><samp class="w">
  </samp><samp class="n">arg2</samp><samp class="p">,</samp><samp class="w">
  </samp><samp class="n">arg3</samp><samp class="w">
</samp><samp class="p" data-group-id="1339580087-1">)</samp></code></pre><p>On the other hand, function calls without parens are always indented
by the function call length itself, like this:</p><pre><code class="makeup elixir" translate="no"><samp class="n">some_call</samp><samp class="w"> </samp><samp class="n">arg1</samp><samp class="p">,</samp><samp class="w">
          </samp><samp class="n">arg2</samp><samp class="p">,</samp><samp class="w">
          </samp><samp class="n">arg3</samp></code></pre><p>If the last argument is a data structure, such as maps and lists, and
the beginning of the data structure fits on the same line as the function
call, then no indentation happens, this allows code like this:</p><pre><code class="makeup elixir" translate="no"><samp class="nc">Enum</samp><samp class="o">.</samp><samp class="n">reduce</samp><samp class="p" data-group-id="0488304124-1">(</samp><samp class="n">some_collection</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">initial_value</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="k" data-group-id="0488304124-2">fn</samp><samp class="w"> </samp><samp class="n">element</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">acc</samp><samp class="w"> </samp><samp class="o">-&gt;</samp><samp class="w">
  </samp><samp class="c1"># code</samp><samp class="w">
</samp><samp class="k" data-group-id="0488304124-2">end</samp><samp class="p" data-group-id="0488304124-1">)</samp><samp class="w">

</samp><samp class="n">some_function_without_parens</samp><samp class="w"> </samp><samp class="p" data-group-id="0488304124-3">%{</samp><samp class="w">
  </samp><samp class="ss">foo</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="ss">:bar</samp><samp class="p">,</samp><samp class="w">
  </samp><samp class="ss">baz</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="ss">:bat</samp><samp class="w">
</samp><samp class="p" data-group-id="0488304124-3">}</samp></code></pre><h2 id="format_string!/2-code-comments" class="section-heading"><a href="#format_string!/2-code-comments" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Code comments</span></h2><p>The formatter handles code comments and guarantees a space is always added
between the beginning of the comment (#) and the next character.</p><p>The formatter also extracts all trailing comments to their previous line.
For example, the code below</p><pre><code class="makeup elixir" translate="no"><samp class="n">hello</samp><samp class="w"> </samp><samp class="c1">#world</samp></code></pre><p>will be rewritten to</p><pre><code class="makeup elixir" translate="no"><samp class="c1"># world</samp><samp class="w">
</samp><samp class="n">hello</samp></code></pre><p>While the formatter attempts to preserve comments in most situations,
that's not always possible, because code comments are handled apart from
the code representation (AST). While the formatter can preserve code
comments between expressions and function arguments, the formatter
cannot currently preserve them around operators. For example, the following
code will move the code comments to before the operator usage:</p><pre><code class="makeup elixir" translate="no"><samp class="n">foo</samp><samp class="p" data-group-id="6799132796-1">(</samp><samp class="p" data-group-id="6799132796-1">)</samp><samp class="w"> </samp><samp class="o">||</samp><samp class="w">
  </samp><samp class="c1"># also check for bar</samp><samp class="w">
  </samp><samp class="n">bar</samp><samp class="p" data-group-id="6799132796-2">(</samp><samp class="p" data-group-id="6799132796-2">)</samp></code></pre><p>In some situations, code comments can be seen as ambiguous by the formatter.
For example, the comment in the anonymous function below</p><pre><code class="makeup elixir" translate="no"><samp class="k" data-group-id="6195105983-1">fn</samp><samp class="w">
  </samp><samp class="n">arg1</samp><samp class="w"> </samp><samp class="o">-&gt;</samp><samp class="w">
    </samp><samp class="n">body1</samp><samp class="w">
    </samp><samp class="c1"># comment</samp><samp class="w">

  </samp><samp class="n">arg2</samp><samp class="w"> </samp><samp class="o">-&gt;</samp><samp class="w">
    </samp><samp class="n">body2</samp><samp class="w">
</samp><samp class="k" data-group-id="6195105983-1">end</samp></code></pre><p>and in this one</p><pre><code class="makeup elixir" translate="no"><samp class="k" data-group-id="2339898326-1">fn</samp><samp class="w">
  </samp><samp class="n">arg1</samp><samp class="w"> </samp><samp class="o">-&gt;</samp><samp class="w">
    </samp><samp class="n">body1</samp><samp class="w">

  </samp><samp class="c1"># comment</samp><samp class="w">
  </samp><samp class="n">arg2</samp><samp class="w"> </samp><samp class="o">-&gt;</samp><samp class="w">
    </samp><samp class="n">body2</samp><samp class="w">
</samp><samp class="k" data-group-id="2339898326-1">end</samp></code></pre><p>are considered equivalent (the nesting is discarded alongside most of
user formatting). In such cases, the code formatter will always format to
the latter.</p><h2 id="format_string!/2-newlines" class="section-heading"><a href="#format_string!/2-newlines" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Newlines</span></h2><p>The formatter converts all newlines in code from <code class="inline">\r\n</code> to <code class="inline">\n</code>.</p><h2 id="format_string!/2-migration-formatting" class="section-heading"><a href="#format_string!/2-migration-formatting" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Migration formatting</span></h2><p>As part of the Elixir release cycle, deprecations are being introduced,
emitting warnings which might require existing code to be changed.
In order to reduce the burden on developers when upgrading Elixir to the
next version, the formatter exposes some options, disabled by default,
in order to automate this process.</p><p>These options should address most of the typical use cases, but given they
introduce changes to the AST, there is a non-zero risk for meta-programming
heavy projects that relied on a specific AST, or projects that are
re-defining functions from the <a href="Kernel.xhtml"><code class="inline">Kernel</code></a>. In such cases, migrations cannot
be applied blindly and some extra changes might be needed in order to
address the deprecation warnings.</p>
  </section>
</section>
<section class="detail" id="get_compiler_option/1">

  <div class="detail-header">
    <a href="#get_compiler_option/1" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">get_compiler_option(key)</h1>

        <span class="note">(since 1.10.0)</span>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/code.ex#L1591" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> get_compiler_option(<a href="typespecs.xhtml#basic-types">atom</a>()) :: <a href="typespecs.xhtml#built-in-types">term</a>()</pre>

      </div>

<p>Returns the value of a given compiler option.</p><p>For a description of all options, see <a href="#put_compiler_option/2"><code class="inline">put_compiler_option/2</code></a>.</p><h2 id="get_compiler_option/1-examples" class="section-heading"><a href="#get_compiler_option/1-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="nc">Code</samp><samp class="o">.</samp><samp class="n">get_compiler_option</samp><samp class="p" data-group-id="8668017239-1">(</samp><samp class="ss">:debug_info</samp><samp class="p" data-group-id="8668017239-1">)</samp><samp class="w">
</samp><samp class="c1">#=&gt; true</samp></code></pre>
  </section>
</section>
<section class="detail" id="loaded?/1">

  <div class="detail-header">
    <a href="#loaded?/1" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">loaded?(module)</h1>

        <span class="note">(since 1.15.0)</span>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/code.ex#L2047" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> loaded?(<a href="typespecs.xhtml#built-in-types">module</a>()) :: <a href="typespecs.xhtml#built-in-types">boolean</a>()</pre>

      </div>

<p>Returns <code class="inline">true</code> if the module is loaded.</p><p>This function doesn't attempt to load the module. For such behavior,
<a href="#ensure_loaded?/1"><code class="inline">ensure_loaded?/1</code></a> can be used.</p><h2 id="loaded?/1-examples" class="section-heading"><a href="#loaded?/1-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Code</samp><samp class="o">.</samp><samp class="n">loaded?</samp><samp class="p" data-group-id="1449167604-1">(</samp><samp class="nc">Atom</samp><samp class="p" data-group-id="1449167604-1">)</samp><samp class="w">
</samp><samp class="no">true</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Code</samp><samp class="o">.</samp><samp class="n">loaded?</samp><samp class="p" data-group-id="1449167604-2">(</samp><samp class="nc">NotYetLoaded</samp><samp class="p" data-group-id="1449167604-2">)</samp><samp class="w">
</samp><samp class="no">false</samp></code></pre>
  </section>
</section>
<section class="detail" id="prepend_path/2">

    <span id="prepend_path/1"></span>

  <div class="detail-header">
    <a href="#prepend_path/2" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">prepend_path(path, opts \\ [])</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/code.ex#L381" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> prepend_path(<a href="Path.xhtml#t:t/0">Path.t</a>(), [{:cache, <a href="typespecs.xhtml#built-in-types">boolean</a>()}]) :: <a href="typespecs.xhtml#built-in-types">boolean</a>()</pre>

      </div>

<p>Prepends a path to the Erlang VM code path list.</p><p>This is the list of directories the Erlang VM uses for
finding module code. The list of files is managed per Erlang
VM node.</p><p>The path is expanded with <a href="Path.xhtml#expand/1"><code class="inline">Path.expand/1</code></a> before being prepended.
It requires the path to exist. Returns a boolean indicating if
the path was successfully added.</p><h2 id="prepend_path/2-examples" class="section-heading"><a href="#prepend_path/2-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="nc">Code</samp><samp class="o">.</samp><samp class="n">prepend_path</samp><samp class="p" data-group-id="7885690106-1">(</samp><samp class="s">&quot;.&quot;</samp><samp class="p" data-group-id="7885690106-1">)</samp><samp class="w">
</samp><samp class="c1">#=&gt; true</samp><samp class="w">

</samp><samp class="nc">Code</samp><samp class="o">.</samp><samp class="n">prepend_path</samp><samp class="p" data-group-id="7885690106-2">(</samp><samp class="s">&quot;/does_not_exist&quot;</samp><samp class="p" data-group-id="7885690106-2">)</samp><samp class="w">
</samp><samp class="c1">#=&gt; false</samp></code></pre><h2 id="prepend_path/2-options" class="section-heading"><a href="#prepend_path/2-options" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Options</span></h2><ul><li><code class="inline">:cache</code> - (since v1.15.0) when true, the code path is cached
the first time it is traversed in order to reduce file system
operations. It requires Erlang/OTP 26, otherwise it is a no-op.</li></ul>
  </section>
</section>
<section class="detail" id="prepend_paths/2">

    <span id="prepend_paths/1"></span>

  <div class="detail-header">
    <a href="#prepend_paths/2" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">prepend_paths(paths, opts \\ [])</h1>

        <span class="note">(since 1.15.0)</span>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/code.ex#L410" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> prepend_paths([<a href="Path.xhtml#t:t/0">Path.t</a>()], [{:cache, <a href="typespecs.xhtml#built-in-types">boolean</a>()}]) :: :ok</pre>

      </div>

<p>Prepends a list of <code class="inline">paths</code> to the Erlang VM code path list.</p><p>This is the list of directories the Erlang VM uses for
finding module code. The list of files is managed per Erlang
VM node.</p><p>All paths are expanded with <a href="Path.xhtml#expand/1"><code class="inline">Path.expand/1</code></a> before being prepended.
Only existing paths are prepended. This function always returns <code class="inline">:ok</code>,
regardless of how many paths were prepended. Use <a href="#prepend_path/1"><code class="inline">prepend_path/1</code></a>
if you need more control.</p><h2 id="prepend_paths/2-examples" class="section-heading"><a href="#prepend_paths/2-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="nc">Code</samp><samp class="o">.</samp><samp class="n">prepend_paths</samp><samp class="p" data-group-id="6050753174-1">(</samp><samp class="p" data-group-id="6050753174-2">[</samp><samp class="s">&quot;.&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;/does_not_exist&quot;</samp><samp class="p" data-group-id="6050753174-2">]</samp><samp class="p" data-group-id="6050753174-1">)</samp><samp class="w">
</samp><samp class="c1">#=&gt; :ok</samp></code></pre><h2 id="prepend_paths/2-options" class="section-heading"><a href="#prepend_paths/2-options" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Options</span></h2><ul><li><code class="inline">:cache</code> - when true, the code path is cached the first time
it is traversed in order to reduce file system operations.
It requires Erlang/OTP 26, otherwise it is a no-op.</li></ul>
  </section>
</section>
<section class="detail" id="print_diagnostic/2">

    <span id="print_diagnostic/1"></span>

  <div class="detail-header">
    <a href="#print_diagnostic/2" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">print_diagnostic(diagnostic, opts \\ [])</h1>

        <span class="note">(since 1.15.0)</span>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/code.ex#L647" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> print_diagnostic(
  <a href="#t:diagnostic/1">diagnostic</a>(:warning | :error),
  <a href="typespecs.xhtml#built-in-types">keyword</a>()
) :: :ok</pre>

      </div>

<p>Prints a diagnostic into the standard error.</p><p>A diagnostic is either returned by <a href="Kernel.ParallelCompiler.xhtml"><code class="inline">Kernel.ParallelCompiler</code></a>
or by <a href="#with_diagnostics/2"><code class="inline">Code.with_diagnostics/2</code></a>.</p><h2 id="print_diagnostic/2-options" class="section-heading"><a href="#print_diagnostic/2-options" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Options</span></h2><ul><li><code class="inline">:snippet</code> - whether to read the code snippet in the diagnostic location.
As it may impact performance, it is not recommended to be used in runtime.
Defaults to <code class="inline">true</code>.</li></ul>
  </section>
</section>
<section class="detail" id="purge_compiler_modules/0">

  <div class="detail-header">
    <a href="#purge_compiler_modules/0" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">purge_compiler_modules()</h1>

        <span class="note">(since 1.7.0)</span>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/code.ex#L1780" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> purge_compiler_modules() :: {:ok, <a href="typespecs.xhtml#basic-types">non_neg_integer</a>()}</pre>

      </div>

<p>Purge compiler modules.</p><p>The compiler utilizes temporary modules to compile code. For example,
<code class="inline">elixir_compiler_1</code>, <code class="inline">elixir_compiler_2</code>, and so on. In case the compiled code
stores references to anonymous functions or similar, the Elixir compiler
may be unable to reclaim those modules, keeping an unnecessary amount of
code in memory and eventually leading to modules such as <code class="inline">elixir_compiler_12345</code>.</p><p>This function purges all modules currently kept by the compiler, allowing
old compiler module names to be reused. If there are any processes running
any code from such modules, they will be terminated too.</p><p>This function is only meant to be called if you have a long running node
that is constantly evaluating code.</p><p>It returns <code class="inline">{:ok, number_of_modules_purged}</code>.</p>
  </section>
</section>
<section class="detail" id="put_compiler_option/2">

  <div class="detail-header">
    <a href="#put_compiler_option/2" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">put_compiler_option(key, value)</h1>

        <span class="note">(since 1.10.0)</span>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/code.ex#L1699" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> put_compiler_option(<a href="typespecs.xhtml#basic-types">atom</a>(), <a href="typespecs.xhtml#built-in-types">term</a>()) :: :ok</pre>

      </div>

<p>Stores a compilation option.</p><p>Changing the compilation options affect all processes running in a
given Erlang VM node.</p><p>Available options are:</p><ul><li><p><code class="inline">:docs</code> - when <code class="inline">true</code>, retains documentation in the compiled module.
Defaults to <code class="inline">true</code>.</p></li><li><p><code class="inline">:debug_info</code> - when <code class="inline">true</code>, retains debug information in the compiled
module. This option can also be overridden per module using the <code class="inline">@compile</code>
directive. Defaults to <code class="inline">true</code>.</p><p>This enables tooling to partially reconstruct the original source code,
for instance, to perform static analysis of code. Therefore, disabling
<code class="inline">:debug_info</code> is not recommended as it removes the ability of the
Elixir compiler and other tools to provide feedback. If you want to
remove the <code class="inline">:debug_info</code> while deploying, tools like <a href="https://hexdocs.pm/mix/Mix.Tasks.Release.html"><code class="inline">mix release</code></a>
already do such by default.</p><p>Other environments, such as <a href="https://hexdocs.pm/mix/Mix.Tasks.Test.html"><code class="inline">mix test</code></a>, automatically disables this
via the <code class="inline">:test_elixirc_options</code> project configuration, as there is
typically no need to store debug chunks for test files.</p></li><li><p><code class="inline">:ignore_already_consolidated</code> (since v1.10.0) - when <code class="inline">true</code>, does not warn
when a protocol has already been consolidated and a new implementation is added.
Defaults to <code class="inline">false</code>.</p></li><li><p><code class="inline">:ignore_module_conflict</code> - when <code class="inline">true</code>, does not warn when a module has
already been defined. Defaults to <code class="inline">false</code>.</p></li><li><p><code class="inline">:infer_signatures</code> (since v1.18.0) - when <code class="inline">false</code>, it disables module-local
signature inference used when type checking remote calls to the compiled
module. Type checking will be executed regardless of the value of this option.
Defaults to <code class="inline">true</code>.</p><p><a href="https://hexdocs.pm/mix/Mix.Tasks.Test.html"><code class="inline">mix test</code></a> automatically disables this option via the <code class="inline">:test_elixirc_options</code>
project configuration, as there is typically no need to store infer signatures
for test files.</p></li><li><p><code class="inline">:relative_paths</code> - when <code class="inline">true</code>, uses relative paths in quoted nodes,
warnings, and errors generated by the compiler. Note disabling this option
won't affect runtime warnings and errors. Defaults to <code class="inline">true</code>.</p></li><li><p><code class="inline">:no_warn_undefined</code> (since v1.10.0) - list of modules and <code class="inline">{Mod, fun, arity}</code>
tuples that will not emit warnings that the module or function does not exist
at compilation time. Pass atom <code class="inline">:all</code> to skip warning for all undefined
functions. This can be useful when doing dynamic compilation. Defaults to <code class="inline">[]</code>.</p></li><li><p><code class="inline">:tracers</code> (since v1.10.0) - a list of tracers (modules) to be used during
compilation. See the module docs for more information. Defaults to <code class="inline">[]</code>.</p></li><li><p><code class="inline">:parser_options</code> (since v1.10.0) - a keyword list of options to be given
to the parser when compiling files. It accepts the same options as
<a href="#string_to_quoted/2"><code class="inline">string_to_quoted/2</code></a> (except by the options that change the AST itself).
This can be used in combination with the tracer to retrieve localized
information about events happening during compilation. Defaults to <code class="inline">[columns: true]</code>.
This option only affects code compilation functions, such as <a href="#compile_string/2"><code class="inline">compile_string/2</code></a>
and <a href="#compile_file/2"><code class="inline">compile_file/2</code></a> but not <a href="#string_to_quoted/2"><code class="inline">string_to_quoted/2</code></a> and friends, as the
latter is used for other purposes beyond compilation.</p></li><li><p><code class="inline">:on_undefined_variable</code> (since v1.15.0) - either <code class="inline">:raise</code> or <code class="inline">:warn</code>.
When <code class="inline">:raise</code> (the default), undefined variables will trigger a compilation
error. You may be set it to <code class="inline">:warn</code> if you want undefined variables to
emit a warning and expand as to a local call to the zero-arity function
of the same name (for example, <code class="inline">node</code> would be expanded as <code class="inline">node()</code>).
This <code class="inline">:warn</code> behavior only exists for compatibility reasons when working
with old dependencies, its usage is discouraged and it will be removed
in future releases.</p></li></ul><p>It always returns <code class="inline">:ok</code>. Raises an error for invalid options.</p><h2 id="put_compiler_option/2-examples" class="section-heading"><a href="#put_compiler_option/2-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="nc">Code</samp><samp class="o">.</samp><samp class="n">put_compiler_option</samp><samp class="p" data-group-id="0749745421-1">(</samp><samp class="ss">:debug_info</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="no">true</samp><samp class="p" data-group-id="0749745421-1">)</samp><samp class="w">
</samp><samp class="c1">#=&gt; :ok</samp></code></pre>
  </section>
</section>
<section class="detail" id="quoted_to_algebra/2">

    <span id="quoted_to_algebra/1"></span>

  <div class="detail-header">
    <a href="#quoted_to_algebra/2" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">quoted_to_algebra(quoted, opts \\ [])</h1>

        <span class="note">(since 1.13.0)</span>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/code.ex#L1447" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> quoted_to_algebra(
  <a href="Macro.xhtml#t:t/0">Macro.t</a>(),
  <a href="typespecs.xhtml#built-in-types">keyword</a>()
) :: <a href="Inspect.Algebra.xhtml#t:t/0">Inspect.Algebra.t</a>()</pre>

      </div>

<p>Converts a quoted expression to an algebra document using Elixir's formatter rules.</p><p>The algebra document can be converted into a string by calling:</p><pre><code class="makeup elixir" translate="no"><samp class="n">doc</samp><samp class="w">
</samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Inspect.Algebra</samp><samp class="o">.</samp><samp class="n">format</samp><samp class="p" data-group-id="8325376880-1">(</samp><samp class="ss">:infinity</samp><samp class="p" data-group-id="8325376880-1">)</samp><samp class="w">
</samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">IO</samp><samp class="o">.</samp><samp class="n">iodata_to_binary</samp><samp class="p" data-group-id="8325376880-2">(</samp><samp class="p" data-group-id="8325376880-2">)</samp></code></pre><p>For a high-level function that does the same, see <a href="Macro.xhtml#to_string/1"><code class="inline">Macro.to_string/1</code></a>.</p><h2 id="quoted_to_algebra/2-formatting-considerations" class="section-heading"><a href="#quoted_to_algebra/2-formatting-considerations" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Formatting considerations</span></h2><p>The Elixir AST does not contain metadata for literals like strings, lists, or
tuples with two elements, which means that the produced algebra document will
not respect all of the user preferences and comments may be misplaced.
To get better results, you can use the <code class="inline">:token_metadata</code>, <code class="inline">:unescape</code> and
<code class="inline">:literal_encoder</code> options to <a href="#string_to_quoted/2"><code class="inline">string_to_quoted/2</code></a> to provide additional
information to the formatter:</p><pre><code class="makeup elixir" translate="no"><samp class="p" data-group-id="6302931031-1">[</samp><samp class="w">
  </samp><samp class="ss">literal_encoder</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="o">&amp;</samp><samp class="p" data-group-id="6302931031-2">{</samp><samp class="ss">:ok</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="6302931031-3">{</samp><samp class="ss">:__block__</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ni">&amp;2</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="6302931031-4">[</samp><samp class="ni">&amp;1</samp><samp class="p" data-group-id="6302931031-4">]</samp><samp class="p" data-group-id="6302931031-3">}</samp><samp class="p" data-group-id="6302931031-2">}</samp><samp class="p">,</samp><samp class="w">
  </samp><samp class="ss">token_metadata</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">true</samp><samp class="p">,</samp><samp class="w">
  </samp><samp class="ss">unescape</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">false</samp><samp class="w">
</samp><samp class="p" data-group-id="6302931031-1">]</samp></code></pre><p>This will produce an AST that contains information such as <code class="inline">do</code> blocks start
and end lines or sigil delimiters, and by wrapping literals in blocks they can
now hold metadata like line number, string delimiter and escaped sequences, or
integer formatting (such as <code class="inline">0x2a</code> instead of <code class="inline">47</code>). However, <strong>note this AST is
not valid</strong>. If you evaluate it, it won't have the same semantics as the regular
Elixir AST due to the <code class="inline">:unescape</code> and <code class="inline">:literal_encoder</code> options. However,
those options are useful if you're doing source code manipulation, where it's
important to preserve user choices and comments placing.</p><h2 id="quoted_to_algebra/2-options" class="section-heading"><a href="#quoted_to_algebra/2-options" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Options</span></h2><ul><li><p><code class="inline">:comments</code> - the list of comments associated with the quoted expression.
Defaults to <code class="inline">[]</code>. It is recommended that both <code class="inline">:token_metadata</code> and
<code class="inline">:literal_encoder</code> options are given to <a href="#string_to_quoted_with_comments/2"><code class="inline">string_to_quoted_with_comments/2</code></a>
in order to get proper placement for comments</p></li><li><p><code class="inline">:escape</code> - when <code class="inline">true</code>, escaped sequences like <code class="inline">\n</code> will be escaped into
<code class="inline">\\n</code>. If the <code class="inline">:unescape</code> option was set to <code class="inline">false</code> when using
<a href="#string_to_quoted/2"><code class="inline">string_to_quoted/2</code></a>, setting this option to <code class="inline">false</code> will prevent it from
escaping the sequences twice. Defaults to <code class="inline">true</code>.</p></li><li><p><code class="inline">:locals_without_parens</code> - a keyword list of name and arity
pairs that should be kept without parens whenever possible.
The arity may be the atom <code class="inline">:*</code>, which implies all arities of
that name. The formatter already includes a list of functions
and this option augments this list.</p></li><li><p><code class="inline">:syntax_colors</code> - a keyword list of colors the output is colorized.
See <a href="Inspect.Opts.xhtml"><code class="inline">Inspect.Opts</code></a> for more information.</p></li></ul>
  </section>
</section>
<section class="detail" id="require_file/2">

    <span id="require_file/1"></span>

  <div class="detail-header">
    <a href="#require_file/2" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">require_file(file, relative_to \\ nil)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/code.ex#L1516" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> require_file(<a href="typespecs.xhtml#built-in-types">binary</a>(), nil | <a href="typespecs.xhtml#built-in-types">binary</a>()) :: [{<a href="typespecs.xhtml#built-in-types">module</a>(), <a href="typespecs.xhtml#built-in-types">binary</a>()}] | nil</pre>

      </div>

<p>Requires the given <code class="inline">file</code>.</p><p>Accepts <code class="inline">relative_to</code> as an argument to tell where the file is located.
If the file was already required, <a href="#require_file/2"><code class="inline">require_file/2</code></a> doesn't do anything and
returns <code class="inline">nil</code>.</p><p>Note that if <a href="#require_file/2"><code class="inline">require_file/2</code></a> is invoked by different processes concurrently,
the first process to invoke <a href="#require_file/2"><code class="inline">require_file/2</code></a> acquires a lock and the remaining
ones will block until the file is available. This means that if <a href="#require_file/2"><code class="inline">require_file/2</code></a>
is called more than once with a given file, that file will be compiled only once.
The first process to call <a href="#require_file/2"><code class="inline">require_file/2</code></a> will get the list of loaded modules,
others will get <code class="inline">nil</code>. The list of required files is managed per Erlang VM node.</p><p>See <a href="#compile_file/2"><code class="inline">compile_file/2</code></a> if you would like to compile a file without tracking its
filenames. Finally, if you would like to get the result of evaluating a file rather
than the modules defined in it, see <a href="#eval_file/2"><code class="inline">eval_file/2</code></a>.</p><h2 id="require_file/2-examples" class="section-heading"><a href="#require_file/2-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><p>If the file has not been required, it returns the list of modules:</p><pre><code class="makeup elixir" translate="no"><samp class="n">modules</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="nc">Code</samp><samp class="o">.</samp><samp class="n">require_file</samp><samp class="p" data-group-id="3928533463-1">(</samp><samp class="s">&quot;eex_test.exs&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;../eex/test&quot;</samp><samp class="p" data-group-id="3928533463-1">)</samp><samp class="w">
</samp><samp class="nc">List</samp><samp class="o">.</samp><samp class="n">first</samp><samp class="p" data-group-id="3928533463-2">(</samp><samp class="n">modules</samp><samp class="p" data-group-id="3928533463-2">)</samp><samp class="w">
</samp><samp class="c1">#=&gt; {EExTest.Compiled, &lt;&lt;70, 79, 82, 49, ...&gt;&gt;}</samp></code></pre><p>If the file has been required, it returns <code class="inline">nil</code>:</p><pre><code class="makeup elixir" translate="no"><samp class="nc">Code</samp><samp class="o">.</samp><samp class="n">require_file</samp><samp class="p" data-group-id="1112900861-1">(</samp><samp class="s">&quot;eex_test.exs&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;../eex/test&quot;</samp><samp class="p" data-group-id="1112900861-1">)</samp><samp class="w">
</samp><samp class="c1">#=&gt; nil</samp></code></pre>
  </section>
</section>
<section class="detail" id="required_files/0">

  <div class="detail-header">
    <a href="#required_files/0" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">required_files()</h1>

        <span class="note">(since 1.7.0)</span>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/code.ex#L273" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> required_files() :: [<a href="typespecs.xhtml#built-in-types">binary</a>()]</pre>

      </div>

<p>Lists all required files.</p><h2 id="required_files/0-examples" class="section-heading"><a href="#required_files/0-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="nc">Code</samp><samp class="o">.</samp><samp class="n">require_file</samp><samp class="p" data-group-id="0643209967-1">(</samp><samp class="s">&quot;../eex/test/eex_test.exs&quot;</samp><samp class="p" data-group-id="0643209967-1">)</samp><samp class="w">
</samp><samp class="nc">List</samp><samp class="o">.</samp><samp class="n">first</samp><samp class="p" data-group-id="0643209967-2">(</samp><samp class="nc">Code</samp><samp class="o">.</samp><samp class="n">required_files</samp><samp class="p" data-group-id="0643209967-3">(</samp><samp class="p" data-group-id="0643209967-3">)</samp><samp class="p" data-group-id="0643209967-2">)</samp><samp class="w"> </samp><samp class="o">=~</samp><samp class="w"> </samp><samp class="s">&quot;eex_test.exs&quot;</samp><samp class="w">
</samp><samp class="c1">#=&gt; true</samp></code></pre>
  </section>
</section>
<section class="detail" id="string_to_quoted/2">

    <span id="string_to_quoted/1"></span>

  <div class="detail-header">
    <a href="#string_to_quoted/2" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">string_to_quoted(string, opts \\ [])</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/code.ex#L1236" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> string_to_quoted(
  <a href="List.Chars.xhtml#t:t/0">List.Chars.t</a>(),
  <a href="typespecs.xhtml#built-in-types">keyword</a>()
) ::
  {:ok, <a href="Macro.xhtml#t:t/0">Macro.t</a>()}
  | {:error, {location :: <a href="typespecs.xhtml#built-in-types">keyword</a>(), <a href="typespecs.xhtml#built-in-types">binary</a>() | {<a href="typespecs.xhtml#built-in-types">binary</a>(), <a href="typespecs.xhtml#built-in-types">binary</a>()}, <a href="typespecs.xhtml#built-in-types">binary</a>()}}</pre>

      </div>

<p>Converts the given string to its quoted form.</p><p>Returns <code class="inline">{:ok, quoted_form}</code> if it succeeds,
<code class="inline">{:error, {meta, message_info, token}}</code> otherwise.</p><h2 id="string_to_quoted/2-options" class="section-heading"><a href="#string_to_quoted/2-options" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Options</span></h2><ul><li><p><code class="inline">:file</code> - the filename to be reported in case of parsing errors.
Defaults to <code class="inline">&quot;nofile&quot;</code>.</p></li><li><p><code class="inline">:line</code> - the starting line of the string being parsed.
Defaults to 1.</p></li><li><p><code class="inline">:column</code> - (since v1.11.0) the starting column of the string being parsed.
Defaults to 1.</p></li><li><p><code class="inline">:columns</code> - when <code class="inline">true</code>, attach a <code class="inline">:column</code> key to the quoted
metadata. Defaults to <code class="inline">false</code>.</p></li><li><p><code class="inline">:unescape</code> (since v1.10.0) - when <code class="inline">false</code>, preserves escaped sequences.
For example, <code class="inline">&quot;null byte\\t\\x00&quot;</code> will be kept as is instead of being
converted to a bitstring literal. Note if you set this option to false, the
resulting AST is no longer valid, but it can be useful to analyze/transform
source code, typically in combination with <a href="#quoted_to_algebra/2"><code class="inline">quoted_to_algebra/2</code></a>.
Defaults to <code class="inline">true</code>.</p></li><li><p><code class="inline">:existing_atoms_only</code> - when <code class="inline">true</code>, raises an error
when non-existing atoms are found by the tokenizer.
Defaults to <code class="inline">false</code>.</p></li><li><p><code class="inline">:token_metadata</code> (since v1.10.0) - when <code class="inline">true</code>, includes token-related
metadata in the expression AST, such as metadata for <code class="inline">do</code> and <code class="inline">end</code>
tokens, for closing tokens, end of expressions, as well as delimiters
for sigils. See <a href="Macro.xhtml#t:metadata/0"><code class="inline">Macro.metadata/0</code></a>. Defaults to <code class="inline">false</code>.</p></li><li><p><code class="inline">:literal_encoder</code> (since v1.10.0) - how to encode literals in the AST.
It must be a function that receives two arguments, the literal and its
metadata, and it must return <code class="inline">{:ok, ast :: Macro.t}</code> or
<code class="inline">{:error, reason :: binary}</code>. If you return anything than the literal
itself as the <code class="inline">term</code>, then the AST is no longer valid. This option
may still useful for textual analysis of the source code.</p></li><li><p><code class="inline">:static_atoms_encoder</code> - the static atom encoder function, see
&quot;The <code class="inline">:static_atoms_encoder</code> function&quot; section below. Note this
option overrides the <code class="inline">:existing_atoms_only</code> behavior for static
atoms but <code class="inline">:existing_atoms_only</code> is still used for dynamic atoms,
such as atoms with interpolations.</p></li><li><p><code class="inline">:emit_warnings</code> (since v1.16.0) - when <code class="inline">false</code>, does not emit
tokenizing/parsing related warnings. Defaults to <code class="inline">true</code>.</p></li></ul><h2 id="string_to_quoted/2-macro-to_string-2" class="section-heading"><a href="#string_to_quoted/2-macro-to_string-2" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text"><a href="Macro.xhtml#to_string/2"><code class="inline">Macro.to_string/2</code></a></span></h2><p>The opposite of converting a string to its quoted form is
<a href="Macro.xhtml#to_string/2"><code class="inline">Macro.to_string/2</code></a>, which converts a quoted form to a string/binary
representation.</p><h2 id="string_to_quoted/2-the-static_atoms_encoder-function" class="section-heading"><a href="#string_to_quoted/2-the-static_atoms_encoder-function" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">The <code class="inline">:static_atoms_encoder</code> function</span></h2><p>When <code class="inline">static_atoms_encoder: &amp;my_encoder/2</code> is passed as an argument,
<code class="inline">my_encoder/2</code> is called every time the tokenizer needs to create a
&quot;static&quot; atom. Static atoms are atoms in the AST that function as
aliases, remote calls, local calls, variable names, regular atoms
and keyword lists.</p><p>The encoder function will receive the atom name (as a binary) and a
keyword list with the current file, line and column. It must return
<code class="inline">{:ok, token :: term} | {:error, reason :: binary}</code>.</p><p>The encoder function is supposed to create an atom from the given
string. To produce a valid AST, it is required to return <code class="inline">{:ok, term}</code>,
where <code class="inline">term</code> is an atom. It is possible to return something other than an atom,
however, in that case the AST is no longer &quot;valid&quot; in that it cannot
be used to compile or evaluate Elixir code. A use case for this is
if you want to use the Elixir parser in a user-facing situation, but
you don't want to exhaust the atom table.</p><p>The atom encoder is not called for <em>all</em> atoms that are present in
the AST. It won't be invoked for the following atoms:</p><ul><li><p>operators (<code class="inline">:+</code>, <code class="inline">:-</code>, and so on)</p></li><li><p>syntax keywords (<code class="inline">fn</code>, <code class="inline">do</code>, <code class="inline">else</code>, and so on)</p></li><li><p>atoms containing interpolation (<code class="inline">:&quot;#{1 + 1} is two&quot;</code>), as these
atoms are constructed at runtime</p></li><li><p>atoms used to represent single-letter sigils like <code class="inline">:sigil_X</code>
(but multi-letter sigils like <code class="inline">:sigil_XYZ</code> are encoded).</p></li></ul>
  </section>
</section>
<section class="detail" id="string_to_quoted!/2">

    <span id="string_to_quoted!/1"></span>

  <div class="detail-header">
    <a href="#string_to_quoted!/2" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">string_to_quoted!(string, opts \\ [])</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/code.ex#L1262" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> string_to_quoted!(
  <a href="List.Chars.xhtml#t:t/0">List.Chars.t</a>(),
  <a href="typespecs.xhtml#built-in-types">keyword</a>()
) :: <a href="Macro.xhtml#t:t/0">Macro.t</a>()</pre>

      </div>

<p>Converts the given string to its quoted form.</p><p>It returns the AST if it succeeds,
raises an exception otherwise. The exception is a <a href="TokenMissingError.xhtml"><code class="inline">TokenMissingError</code></a>
in case a token is missing (usually because the expression is incomplete),
<a href="MismatchedDelimiterError.xhtml"><code class="inline">MismatchedDelimiterError</code></a> (in case of mismatched opening and closing delimiters) and
<a href="SyntaxError.xhtml"><code class="inline">SyntaxError</code></a> otherwise.</p><p>Check <a href="#string_to_quoted/2"><code class="inline">string_to_quoted/2</code></a> for options information.</p>
  </section>
</section>
<section class="detail" id="string_to_quoted_with_comments/2">

    <span id="string_to_quoted_with_comments/1"></span>

  <div class="detail-header">
    <a href="#string_to_quoted_with_comments/2" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">string_to_quoted_with_comments(string, opts \\ [])</h1>

        <span class="note">(since 1.13.0)</span>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/code.ex#L1314" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> string_to_quoted_with_comments(
  <a href="List.Chars.xhtml#t:t/0">List.Chars.t</a>(),
  <a href="typespecs.xhtml#built-in-types">keyword</a>()
) ::
  {:ok, <a href="Macro.xhtml#t:t/0">Macro.t</a>(), [<a href="typespecs.xhtml#basic-types">map</a>()]} | {:error, {location :: <a href="typespecs.xhtml#built-in-types">keyword</a>(), <a href="typespecs.xhtml#built-in-types">term</a>(), <a href="typespecs.xhtml#built-in-types">term</a>()}}</pre>

      </div>

<p>Converts the given string to its quoted form and a list of comments.</p><p>This function is useful when performing textual changes to the source code,
while preserving information like comments and literals position.</p><p>Returns <code class="inline">{:ok, quoted_form, comments}</code> if it succeeds,
<code class="inline">{:error, {line, error, token}}</code> otherwise.</p><p>Comments are maps with the following fields:</p><ul><li><p><code class="inline">:line</code> - The line number of the source code</p></li><li><p><code class="inline">:text</code> - The full text of the comment, including the leading <code class="inline">#</code></p></li><li><p><code class="inline">:previous_eol_count</code> - How many end of lines there are between the comment and the previous AST node or comment</p></li><li><p><code class="inline">:next_eol_count</code> - How many end of lines there are between the comment and the next AST node or comment</p></li></ul><p>Check <a href="#string_to_quoted/2"><code class="inline">string_to_quoted/2</code></a> for options information.</p><h2 id="string_to_quoted_with_comments/2-examples" class="section-heading"><a href="#string_to_quoted_with_comments/2-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Code</samp><samp class="o">.</samp><samp class="n">string_to_quoted_with_comments</samp><samp class="p" data-group-id="3355604088-1">(</samp><samp class="s">&quot;&quot;&quot;</samp><samp class="gp unselectable">
...&gt; </samp><samp class="s">:foo</samp><samp class="gp unselectable">
...&gt;</samp><samp class="gp unselectable">
...&gt; </samp><samp class="s"># Hello, world!</samp><samp class="gp unselectable">
...&gt;</samp><samp class="gp unselectable">
...&gt;</samp><samp class="gp unselectable">
...&gt; </samp><samp class="s"># Some more comments!</samp><samp class="gp unselectable">
...&gt; </samp><samp class="s">&quot;&quot;&quot;</samp><samp class="p" data-group-id="3355604088-1">)</samp><samp class="w">
</samp><samp class="p" data-group-id="3355604088-2">{</samp><samp class="ss">:ok</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:foo</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="3355604088-3">[</samp><samp class="w">
  </samp><samp class="p" data-group-id="3355604088-4">%{</samp><samp class="ss">line</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">3</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">column</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">1</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">previous_eol_count</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">2</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">next_eol_count</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">3</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">text</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;# Hello, world!&quot;</samp><samp class="p" data-group-id="3355604088-4">}</samp><samp class="p">,</samp><samp class="w">
  </samp><samp class="p" data-group-id="3355604088-5">%{</samp><samp class="ss">line</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">6</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">column</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">1</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">previous_eol_count</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">3</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">next_eol_count</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">1</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">text</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;# Some more comments!&quot;</samp><samp class="p" data-group-id="3355604088-5">}</samp><samp class="p">,</samp><samp class="w">
</samp><samp class="p" data-group-id="3355604088-3">]</samp><samp class="p" data-group-id="3355604088-2">}</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Code</samp><samp class="o">.</samp><samp class="n">string_to_quoted_with_comments</samp><samp class="p" data-group-id="3355604088-6">(</samp><samp class="s">&quot;:foo # :bar&quot;</samp><samp class="p" data-group-id="3355604088-6">)</samp><samp class="w">
</samp><samp class="p" data-group-id="3355604088-7">{</samp><samp class="ss">:ok</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:foo</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="3355604088-8">[</samp><samp class="w">
  </samp><samp class="p" data-group-id="3355604088-9">%{</samp><samp class="ss">line</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">1</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">column</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">6</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">previous_eol_count</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">0</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">next_eol_count</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">0</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">text</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;# :bar&quot;</samp><samp class="p" data-group-id="3355604088-9">}</samp><samp class="w">
</samp><samp class="p" data-group-id="3355604088-8">]</samp><samp class="p" data-group-id="3355604088-7">}</samp></code></pre>
  </section>
</section>
<section class="detail" id="string_to_quoted_with_comments!/2">

    <span id="string_to_quoted_with_comments!/1"></span>

  <div class="detail-header">
    <a href="#string_to_quoted_with_comments!/2" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">string_to_quoted_with_comments!(string, opts \\ [])</h1>

        <span class="note">(since 1.13.0)</span>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/code.ex#L1343" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> string_to_quoted_with_comments!(
  <a href="List.Chars.xhtml#t:t/0">List.Chars.t</a>(),
  <a href="typespecs.xhtml#built-in-types">keyword</a>()
) :: {<a href="Macro.xhtml#t:t/0">Macro.t</a>(), [<a href="typespecs.xhtml#basic-types">map</a>()]}</pre>

      </div>

<p>Converts the given string to its quoted form and a list of comments.</p><p>Returns the AST and a list of comments if it succeeds, raises an exception
otherwise. The exception is a <a href="TokenMissingError.xhtml"><code class="inline">TokenMissingError</code></a> in case a token is missing
(usually because the expression is incomplete), <a href="SyntaxError.xhtml"><code class="inline">SyntaxError</code></a> otherwise.</p><p>Check <a href="#string_to_quoted/2"><code class="inline">string_to_quoted/2</code></a> for options information.</p>
  </section>
</section>
<section class="detail" id="unrequire_files/1">

  <div class="detail-header">
    <a href="#unrequire_files/1" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">unrequire_files(files)</h1>

        <span class="note">(since 1.7.0)</span>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/code.ex#L313" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> unrequire_files([<a href="typespecs.xhtml#built-in-types">binary</a>()]) :: :ok</pre>

      </div>

<p>Removes files from the required files list.</p><p>The modules defined in the file are not removed;
calling this function only removes them from the list,
allowing them to be required again.</p><p>The list of files is managed per Erlang VM node.</p><h2 id="unrequire_files/1-examples" class="section-heading"><a href="#unrequire_files/1-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="c1"># Require EEx test code</samp><samp class="w">
</samp><samp class="nc">Code</samp><samp class="o">.</samp><samp class="n">require_file</samp><samp class="p" data-group-id="0261657904-1">(</samp><samp class="s">&quot;../eex/test/eex_test.exs&quot;</samp><samp class="p" data-group-id="0261657904-1">)</samp><samp class="w">

</samp><samp class="c1"># Now unrequire all files</samp><samp class="w">
</samp><samp class="nc">Code</samp><samp class="o">.</samp><samp class="n">unrequire_files</samp><samp class="p" data-group-id="0261657904-2">(</samp><samp class="nc">Code</samp><samp class="o">.</samp><samp class="n">required_files</samp><samp class="p" data-group-id="0261657904-3">(</samp><samp class="p" data-group-id="0261657904-3">)</samp><samp class="p" data-group-id="0261657904-2">)</samp><samp class="w">

</samp><samp class="c1"># Note that modules are still available</samp><samp class="w">
</samp><samp class="n">function_exported?</samp><samp class="p" data-group-id="0261657904-4">(</samp><samp class="nc">EExTest.Compiled</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:before_compile</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">0</samp><samp class="p" data-group-id="0261657904-4">)</samp><samp class="w">
</samp><samp class="c1">#=&gt; true</samp></code></pre>
  </section>
</section>
<section class="detail" id="with_diagnostics/2">

    <span id="with_diagnostics/1"></span>

  <div class="detail-header">
    <a href="#with_diagnostics/2" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">with_diagnostics(opts \\ [], fun)</h1>

        <span class="note">(since 1.15.0)</span>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/code.ex#L615" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> with_diagnostics(
  <a href="typespecs.xhtml#built-in-types">keyword</a>(),
  (-&gt; result)
) :: {result, [<a href="#t:diagnostic/1">diagnostic</a>(:warning | :error)]}
when result: <a href="typespecs.xhtml#built-in-types">term</a>()</pre>

      </div>

<p>Executes the given <code class="inline">fun</code> and capture all diagnostics.</p><p>Diagnostics are warnings and errors emitted during code
evaluation or single-file compilation and by functions
such as <a href="IO.xhtml#warn/2"><code class="inline">IO.warn/2</code></a>.</p><p>If using <a href="https://hexdocs.pm/mix/Mix.Tasks.Compile.html"><code class="inline">mix compile</code></a> or <a href="Kernel.ParallelCompiler.xhtml"><code class="inline">Kernel.ParallelCompiler</code></a>,
note they already capture and return diagnostics.</p><h2 id="with_diagnostics/2-options" class="section-heading"><a href="#with_diagnostics/2-options" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Options</span></h2><ul><li><code class="inline">:log</code> - if the diagnostics should be logged as they happen.
Defaults to <code class="inline">false</code>.</li></ul><section role="note" class="admonition info"><h4 class="admonition-title info">Rescuing errors</h4><p><a href="#with_diagnostics/2"><code class="inline">with_diagnostics/2</code></a> does not automatically handle exceptions.
You may capture them by adding a <a href="Kernel.SpecialForms.xhtml#try/1"><code class="inline">try/1</code></a> in <code class="inline">fun</code>:</p><pre><code class="makeup elixir" translate="no"><samp class="p" data-group-id="2786440230-1">{</samp><samp class="n">result</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">all_errors_and_warnings</samp><samp class="p" data-group-id="2786440230-1">}</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w">
  </samp><samp class="nc">Code</samp><samp class="o">.</samp><samp class="n">with_diagnostics</samp><samp class="p" data-group-id="2786440230-2">(</samp><samp class="k" data-group-id="2786440230-3">fn</samp><samp class="w"> </samp><samp class="o">-&gt;</samp><samp class="w">
    </samp><samp class="k">try</samp><samp class="w"> </samp><samp class="k" data-group-id="2786440230-4">do</samp><samp class="w">
      </samp><samp class="p" data-group-id="2786440230-5">{</samp><samp class="ss">:ok</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="nc">Code</samp><samp class="o">.</samp><samp class="n">compile_quoted</samp><samp class="p" data-group-id="2786440230-6">(</samp><samp class="n">quoted</samp><samp class="p" data-group-id="2786440230-6">)</samp><samp class="p" data-group-id="2786440230-5">}</samp><samp class="w">
    </samp><samp class="k" data-group-id="2786440230-4">rescue</samp><samp class="w">
      </samp><samp class="n">err</samp><samp class="w"> </samp><samp class="o">-&gt;</samp><samp class="w"> </samp><samp class="p" data-group-id="2786440230-7">{</samp><samp class="ss">:error</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">err</samp><samp class="p" data-group-id="2786440230-7">}</samp><samp class="w">
    </samp><samp class="k" data-group-id="2786440230-4">end</samp><samp class="w">
  </samp><samp class="k" data-group-id="2786440230-3">end</samp><samp class="p" data-group-id="2786440230-2">)</samp></code></pre></section>
  </section>
</section>

        </div>
      </section>


  </body>
</html>
