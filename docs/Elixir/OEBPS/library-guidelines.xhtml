<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"
      xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>Library guidelines - Elixir v1.18.4</title>
    <meta name="generator" content="ExDoc v0.38.2" />
    <link type="text/css" rel="stylesheet" href="dist/epub-elixir-FNUUKFP7.css" />
    <script src="dist/epub-4WIP524F.js"></script>

  </head>
  <body class="content-inner">

    <h1 id="content">Library guidelines</h1>
<p>This document outlines general guidelines for those writing and publishing
Elixir libraries meant to be consumed by other developers.</p><h2 id="getting-started">Getting started</h2><p>You can create a new Elixir library by running the <a href="https://hexdocs.pm/mix/Mix.Tasks.New.html"><code class="inline">mix new</code></a> command:</p><pre><code class="makeup shell" translate="no"><span class="gp unselectable">$ </span><span class="">mix new my_library
</span></code></pre><p>The project name is given in the <code class="inline">snake_case</code> convention where all letters are lowercase and words are separate with underscores. This is the same convention used by variables, function names and atoms in Elixir. See the <a href="naming-conventions.xhtml">Naming Conventions</a> document for more information.</p><p>Every project has a <code class="inline">mix.exs</code> file, with instructions on how to build, compile, run tests, and so on. Libraries commonly have a <code class="inline">lib</code> directory, which includes Elixir source code, and a <code class="inline">test</code> directory. A <code class="inline">src</code> directory may also exist for Erlang sources.</p><p>The <a href="https://hexdocs.pm/mix/Mix.Tasks.New.html"><code class="inline">mix new</code></a> command also allows the <code class="inline">--sup</code> option to scaffold a new project with a supervision tree out of the box. For more information on running your project, see the official <a href="introduction-to-mix.xhtml">Mix &amp; OTP guide</a> or <a href="https://hexdocs.pm/mix/Mix.html">Mix documentation</a>.</p><h2 id="publishing">Publishing</h2><p>Writing code is only the first of many steps to publish a package. We strongly recommend developers to:</p><ul><li><p>Choose a versioning schema. Elixir requires versions to be in the format <code class="inline">MAJOR.MINOR.PATCH</code> but the meaning of those numbers is up to you. Most projects choose <a href="https://semver.org/">Semantic Versioning</a>.</p></li><li><p>Choose a <a href="https://choosealicense.com/">license</a>. The most common licenses in the Elixir community are the <a href="https://choosealicense.com/licenses/mit/">MIT License</a> and the <a href="https://choosealicense.com/licenses/apache-2.0/">Apache License 2.0</a>. The latter is also the one used by Elixir itself.</p></li><li><p>Run the <a href="https://hexdocs.pm/mix/Mix.Tasks.Format.html">code formatter</a>. The code formatter formats your code according to a consistent style shared by your library and the whole community, making it easier for other developers to understand your code and contribute.</p></li><li><p>Write tests. Elixir ships with a test-framework named <a href="https://hexdocs.pm/ex_unit/ExUnit.html">ExUnit</a>. The project generated by <a href="https://hexdocs.pm/mix/Mix.Tasks.New.html"><code class="inline">mix new</code></a> includes sample tests and doctests.</p></li><li><p>Write documentation. The Elixir community is proud of treating documentation as a first-class citizen and making documentation easily accessible. Libraries contribute to the status quo by providing complete API documentation with examples for their modules, types and functions. See the <a href="writing-documentation.xhtml">Writing documentation</a> chapter of the Getting Started guide for more information. Projects like <a href="https://github.com/elixir-lang/ex_doc">ExDoc</a> can be used to generate HTML and EPUB documents from the documentation. ExDoc also supports &quot;extra pages&quot;, like this one that you are reading. Such pages augment the documentation with tutorials, guides, references, and even cheat-sheets.</p></li><li><p>Follow best practices. The Elixir project documents <a href="what-anti-patterns.xhtml">a series of anti-patterns</a> that you may want to avoid in your code. The <a href="process-anti-patterns.xhtml">process-related anti-patterns</a> and <a href="macro-anti-patterns.xhtml">meta-programming anti-patterns</a> are of special attention to library authors.</p></li></ul><p>Projects are often made available to other developers <a href="https://hex.pm/docs/publish">by publishing a Hex package</a>. Hex also <a href="https://hex.pm/pricing">supports private packages for organizations</a>. If ExDoc is configured for the Mix project, publishing a package on Hex will also automatically publish the generated documentation to <a href="https://hexdocs.pm">HexDocs</a>.</p><h2 id="dependency-handling">Dependency handling</h2><p>When your library is used as a dependency, it runs by default in the <code class="inline">:prod</code> environment. Therefore, if your library has dependencies that are only useful in development or testing, you want to specify those dependencies with the <code class="inline">:only</code> option. You can also specify <code class="inline">:optional</code> dependencies in your library, which are not enforced upon users of your library. In such cases, you should also consider compiling your projects with the <code class="inline">mix compile --no-optional-deps --warnings-as-errors</code> in your test environments, to ensure your library compiles without warnings even if optional dependencies are missing. See <a href="https://hexdocs.pm/mix/Mix.Tasks.Deps.html"><code class="inline">mix deps</code></a> for all available options.</p><p>Keep in mind your library's <a href="https://hexdocs.pm/mix/Mix.Project.html#module-configuration">lockfile</a> (usually named <code class="inline">mix.lock</code>) is <em>ignored by the host project</em>. Running <a href="https://hexdocs.pm/mix/Mix.Tasks.Deps.Get.html"><code class="inline">mix deps.get</code></a> in the host project attempts to get the latest possible versions of your libraryâ€™s dependencies, as specified by the requirements in the <code class="inline">deps</code> section of your <code class="inline">mix.exs</code>. These versions might be greater than those stored in your <code class="inline">mix.lock</code> (and hence used in your tests / CI).</p><p>On the other hand, contributors of your library, need a deterministic build, which implies the presence of <code class="inline">mix.lock</code> in your Version Control System (VCS), such as <code class="inline">git</code>.</p><p>If you want to validate both scenarios, you should check the <code class="inline">mix.lock</code> into version control and run two different Continuous Integration (CI) workflows: one that relies on the <code class="inline">mix.lock</code> for deterministic builds, and another one, that starts with <code class="inline">mix deps.unlock --all</code> and always compiles your library and runs tests against latest versions of dependencies. The latter one might be even run nightly or otherwise recurrently to stay notified about any possible issue in regard to dependencies updates.</p>

  </body>
</html>
