<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"
      xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>Dependencies and umbrella projects - Elixir v1.18.4</title>
    <meta name="generator" content="ExDoc v0.38.2" />
    <link type="text/css" rel="stylesheet" href="dist/epub-elixir-FNUUKFP7.css" />
    <script src="dist/epub-4WIP524F.js"></script>

  </head>
  <body class="content-inner">

    <h1 id="content">Dependencies and umbrella projects</h1>
<p>In this chapter, we will discuss how to manage dependencies in Mix.</p><p>Our <code class="inline">kv</code> application is complete, so it's time to implement the server that will handle the requests we defined in the first chapter:</p><pre><code class="text">CREATE shopping
OK

PUT shopping milk 1
OK

PUT shopping eggs 3
OK

GET shopping milk
1
OK

DELETE shopping eggs
OK</code></pre><p>However, instead of adding more code to the <code class="inline">kv</code> application, we are going to build the TCP server as another application that is a client of the <code class="inline">kv</code> application. Since the whole runtime and Elixir ecosystem are geared towards applications, it makes sense to break our projects into smaller applications that work together rather than building a big, monolithic app.</p><p>Before creating our new application, we must discuss how Mix handles dependencies. In practice, there are two kinds of dependencies we usually work with: internal and external dependencies. Mix supports mechanisms to work with both.</p><h2 id="external-dependencies">External dependencies</h2><p>External dependencies are the ones not tied to your business domain. For example, if you need an HTTP API for your distributed KV application, you can use the <a href="https://github.com/elixir-lang/plug">Plug</a> project as an external dependency.</p><p>Installing external dependencies is simple. Most commonly, we use the <a href="https://hex.pm">Hex Package Manager</a>, by listing the dependency inside the deps function in our <code class="inline">mix.exs</code> file:</p><pre><code class="makeup elixir" translate="no"><span class="kd">def</span><span class="w"> </span><span class="nf">deps</span><span class="w"> </span><span class="k" data-group-id="6854450079-1">do</span><span class="w">
  </span><span class="p" data-group-id="6854450079-2">[</span><span class="p" data-group-id="6854450079-3">{</span><span class="ss">:plug</span><span class="p">,</span><span class="w"> </span><span class="s">&quot;~&gt; 1.0&quot;</span><span class="p" data-group-id="6854450079-3">}</span><span class="p" data-group-id="6854450079-2">]</span><span class="w">
</span><span class="k" data-group-id="6854450079-1">end</span></code></pre><p>This dependency refers to the latest version of Plug in the 1.x.x version series that has been pushed to Hex. This is indicated by the <code class="inline">~&gt;</code> preceding the version number. For more information on specifying version requirements, see the documentation for the <a href="Version.xhtml"><code class="inline">Version</code></a> module.</p><p>Typically, stable releases are pushed to Hex. If you want to depend on an external dependency still in development, Mix is able to manage Git dependencies too:</p><pre><code class="makeup elixir" translate="no"><span class="kd">def</span><span class="w"> </span><span class="nf">deps</span><span class="w"> </span><span class="k" data-group-id="6317403341-1">do</span><span class="w">
  </span><span class="p" data-group-id="6317403341-2">[</span><span class="p" data-group-id="6317403341-3">{</span><span class="ss">:plug</span><span class="p">,</span><span class="w"> </span><span class="ss">git</span><span class="p">:</span><span class="w"> </span><span class="s">&quot;https://github.com/elixir-lang/plug.git&quot;</span><span class="p" data-group-id="6317403341-3">}</span><span class="p" data-group-id="6317403341-2">]</span><span class="w">
</span><span class="k" data-group-id="6317403341-1">end</span></code></pre><p>You will notice that when you add a dependency to your project, Mix generates a <code class="inline">mix.lock</code> file that guarantees <em>repeatable builds</em>. The lock file must be checked in to your version control system, to guarantee that everyone who uses the project will use the same dependency versions as you.</p><p>Mix provides many tasks for working with dependencies, which can be seen in <a href="https://hexdocs.pm/mix/Mix.Tasks.Help.html"><code class="inline">mix help</code></a>:</p><pre><code class="makeup console" translate="no"><span class="gp unselectable">$ </span><span class="">mix help
</span><span class="">mix deps              # Lists dependencies and their status
</span><span class="">mix deps.clean        # Deletes the given dependencies&#39; files
</span><span class="">mix deps.compile      # Compiles dependencies
</span><span class="">mix deps.get          # Gets all out of date dependencies
</span><span class="">mix deps.tree         # Prints the dependency tree
</span><span class="">mix deps.unlock       # Unlocks the given dependencies
</span><span class="">mix deps.update       # Updates the given dependencies
</span></code></pre><p>The most common tasks are <a href="https://hexdocs.pm/mix/Mix.Tasks.Deps.Get.html"><code class="inline">mix deps.get</code></a> and <a href="https://hexdocs.pm/mix/Mix.Tasks.Deps.Update.html"><code class="inline">mix deps.update</code></a>. Once fetched, dependencies are automatically compiled for you. You can read more about deps by typing <a href="https://hexdocs.pm/mix/Mix.Tasks.Deps.html"><code class="inline">mix help deps</code></a>, and in the documentation for the <a href="https://hexdocs.pm/mix/Mix.Tasks.Deps.html"><code class="inline">Mix.Tasks.Deps</code></a> module.</p><h2 id="internal-dependencies">Internal dependencies</h2><p>Internal dependencies are the ones that are specific to your project. They usually don't make sense outside the scope of your project/company/organization. Most of the time, you want to keep them private, whether due to technical, economic or business reasons.</p><p>If you have an internal dependency, Mix supports two methods to work with them: Git repositories or umbrella projects.</p><p>For example, if you push the <code class="inline">kv</code> project to a Git repository, you'll need to list it in your deps code in order to use it:</p><pre><code class="makeup elixir" translate="no"><span class="kd">def</span><span class="w"> </span><span class="nf">deps</span><span class="w"> </span><span class="k" data-group-id="5168580779-1">do</span><span class="w">
  </span><span class="p" data-group-id="5168580779-2">[</span><span class="p" data-group-id="5168580779-3">{</span><span class="ss">:kv</span><span class="p">,</span><span class="w"> </span><span class="ss">git</span><span class="p">:</span><span class="w"> </span><span class="s">&quot;https://github.com/YOUR_ACCOUNT/kv.git&quot;</span><span class="p" data-group-id="5168580779-3">}</span><span class="p" data-group-id="5168580779-2">]</span><span class="w">
</span><span class="k" data-group-id="5168580779-1">end</span></code></pre><p>If the repository is private though, you may need to specify the private URL <code class="inline">git@github.com:YOUR_ACCOUNT/kv.git</code>. In any case, Mix will be able to fetch it for you as long as you have the proper credentials.</p><p>Using Git repositories for internal dependencies is somewhat discouraged in Elixir. Remember that the runtime and the Elixir ecosystem already provide the concept of applications. As such, we expect you to frequently break your code into applications that can be organized logically, even within a single project.</p><p>However, if you push every application as a separate project to a Git repository, your projects may become very hard to maintain as you will spend a lot of time managing those Git repositories rather than writing your code.</p><p>For this reason, Mix supports &quot;umbrella projects&quot;. Umbrella projects are used to build applications that run together in a single repository. That is exactly the style we are going to explore in the next sections.</p><p>Let's create a new Mix project. We are going to creatively name it <code class="inline">kv_umbrella</code>, and this new project will have both the existing <code class="inline">kv</code> application and the new <code class="inline">kv_server</code> application inside. The directory structure will look like this:</p><pre><code class="makeup elixir" translate="no"><span class="o">+</span><span class="w"> </span><span class="n">kv_umbrella</span><span class="w">
  </span><span class="o">+</span><span class="w"> </span><span class="n">apps</span><span class="w">
    </span><span class="o">+</span><span class="w"> </span><span class="n">kv</span><span class="w">
    </span><span class="o">+</span><span class="w"> </span><span class="n">kv_server</span></code></pre><p>The interesting thing about this approach is that Mix has many conveniences for working with such projects, such as the ability to compile and test all applications inside <code class="inline">apps</code> with a single command. However, even though they are all listed together inside <code class="inline">apps</code>, they are still decoupled from each other, so you can build, test and deploy each application in isolation if you want to.</p><p>So let's get started!</p><h2 id="umbrella-projects">Umbrella projects</h2><p>Let's start a new project using <a href="https://hexdocs.pm/mix/Mix.Tasks.New.html"><code class="inline">mix new</code></a>. This new project will be named <code class="inline">kv_umbrella</code> and we need to pass the <code class="inline">--umbrella</code> option when creating it. Do not create this new project inside the existing <code class="inline">kv</code> project!</p><pre><code class="makeup console" translate="no"><span class="gp unselectable">$ </span><span class="">mix new kv_umbrella --umbrella
</span><span class="">* creating README.md
</span><span class="">* creating .formatter.exs
</span><span class="">* creating .gitignore
</span><span class="">* creating mix.exs
</span><span class="">* creating apps
</span><span class="">* creating config
</span><span class="">* creating config/config.exs
</span></code></pre><p>From the printed information, we can see far fewer files are generated. The generated <code class="inline">mix.exs</code> file is different too. Let's take a look (comments have been removed):</p><pre><code class="makeup elixir" translate="no"><span class="kd">defmodule</span><span class="w"> </span><span class="nc">KvUmbrella.MixProject</span><span class="w"> </span><span class="k" data-group-id="4175087538-1">do</span><span class="w">
  </span><span class="kn">use</span><span class="w"> </span><span class="nc">Mix.Project</span><span class="w">

  </span><span class="kd">def</span><span class="w"> </span><span class="nf">project</span><span class="w"> </span><span class="k" data-group-id="4175087538-2">do</span><span class="w">
    </span><span class="p" data-group-id="4175087538-3">[</span><span class="w">
      </span><span class="ss">apps_path</span><span class="p">:</span><span class="w"> </span><span class="s">&quot;apps&quot;</span><span class="p">,</span><span class="w">
      </span><span class="ss">start_permanent</span><span class="p">:</span><span class="w"> </span><span class="nc">Mix</span><span class="o">.</span><span class="n">env</span><span class="p" data-group-id="4175087538-4">(</span><span class="p" data-group-id="4175087538-4">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="ss">:prod</span><span class="p">,</span><span class="w">
      </span><span class="ss">deps</span><span class="p">:</span><span class="w"> </span><span class="n">deps</span><span class="p" data-group-id="4175087538-5">(</span><span class="p" data-group-id="4175087538-5">)</span><span class="w">
    </span><span class="p" data-group-id="4175087538-3">]</span><span class="w">
  </span><span class="k" data-group-id="4175087538-2">end</span><span class="w">

  </span><span class="kd">defp</span><span class="w"> </span><span class="nf">deps</span><span class="w"> </span><span class="k" data-group-id="4175087538-6">do</span><span class="w">
    </span><span class="p" data-group-id="4175087538-7">[</span><span class="p" data-group-id="4175087538-7">]</span><span class="w">
  </span><span class="k" data-group-id="4175087538-6">end</span><span class="w">
</span><span class="k" data-group-id="4175087538-1">end</span></code></pre><p>What makes this project different from the previous one is the <code class="inline">apps_path: &quot;apps&quot;</code> entry in the project definition. This means this project will act as an umbrella. Such projects do not have source files nor tests, although they can have their own dependencies. Each child application must be defined inside the <code class="inline">apps</code> directory.</p><p>Let's move inside the apps directory and start building <code class="inline">kv_server</code>. This time, we are going to pass the <code class="inline">--sup</code> flag, which will tell Mix to generate a supervision tree automatically for us, instead of building one manually as we did in previous chapters:</p><pre><code class="makeup console" translate="no"><span class="gp unselectable">$ </span><span class="">cd kv_umbrella/apps
</span><span class="gp unselectable">$ </span><span class="">mix new kv_server --module KVServer --sup
</span></code></pre><p>The generated files are similar to the ones we first generated for <code class="inline">kv</code>, with a few differences. Let's open up <code class="inline">mix.exs</code>:</p><pre><code class="makeup elixir" translate="no"><span class="kd">defmodule</span><span class="w"> </span><span class="nc">KVServer.MixProject</span><span class="w"> </span><span class="k" data-group-id="9956785341-1">do</span><span class="w">
  </span><span class="kn">use</span><span class="w"> </span><span class="nc">Mix.Project</span><span class="w">

  </span><span class="kd">def</span><span class="w"> </span><span class="nf">project</span><span class="w"> </span><span class="k" data-group-id="9956785341-2">do</span><span class="w">
    </span><span class="p" data-group-id="9956785341-3">[</span><span class="w">
      </span><span class="ss">app</span><span class="p">:</span><span class="w"> </span><span class="ss">:kv_server</span><span class="p">,</span><span class="w">
      </span><span class="ss">version</span><span class="p">:</span><span class="w"> </span><span class="s">&quot;0.1.0&quot;</span><span class="p">,</span><span class="w">
      </span><span class="ss">build_path</span><span class="p">:</span><span class="w"> </span><span class="s">&quot;../../_build&quot;</span><span class="p">,</span><span class="w">
      </span><span class="ss">config_path</span><span class="p">:</span><span class="w"> </span><span class="s">&quot;../../config/config.exs&quot;</span><span class="p">,</span><span class="w">
      </span><span class="ss">deps_path</span><span class="p">:</span><span class="w"> </span><span class="s">&quot;../../deps&quot;</span><span class="p">,</span><span class="w">
      </span><span class="ss">lockfile</span><span class="p">:</span><span class="w"> </span><span class="s">&quot;../../mix.lock&quot;</span><span class="p">,</span><span class="w">
      </span><span class="ss">elixir</span><span class="p">:</span><span class="w"> </span><span class="s">&quot;~&gt; 1.14&quot;</span><span class="p">,</span><span class="w">
      </span><span class="ss">start_permanent</span><span class="p">:</span><span class="w"> </span><span class="nc">Mix</span><span class="o">.</span><span class="n">env</span><span class="p" data-group-id="9956785341-4">(</span><span class="p" data-group-id="9956785341-4">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="ss">:prod</span><span class="p">,</span><span class="w">
      </span><span class="ss">deps</span><span class="p">:</span><span class="w"> </span><span class="n">deps</span><span class="p" data-group-id="9956785341-5">(</span><span class="p" data-group-id="9956785341-5">)</span><span class="w">
    </span><span class="p" data-group-id="9956785341-3">]</span><span class="w">
  </span><span class="k" data-group-id="9956785341-2">end</span><span class="w">

  </span><span class="c1"># Run &quot;mix help compile.app&quot; to learn about applications</span><span class="w">
  </span><span class="kd">def</span><span class="w"> </span><span class="nf">application</span><span class="w"> </span><span class="k" data-group-id="9956785341-6">do</span><span class="w">
    </span><span class="p" data-group-id="9956785341-7">[</span><span class="w">
      </span><span class="ss">extra_applications</span><span class="p">:</span><span class="w"> </span><span class="p" data-group-id="9956785341-8">[</span><span class="ss">:logger</span><span class="p" data-group-id="9956785341-8">]</span><span class="p">,</span><span class="w">
      </span><span class="ss">mod</span><span class="p">:</span><span class="w"> </span><span class="p" data-group-id="9956785341-9">{</span><span class="nc">KVServer.Application</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="9956785341-10">[</span><span class="p" data-group-id="9956785341-10">]</span><span class="p" data-group-id="9956785341-9">}</span><span class="w">
    </span><span class="p" data-group-id="9956785341-7">]</span><span class="w">
  </span><span class="k" data-group-id="9956785341-6">end</span><span class="w">

  </span><span class="c1"># Run &quot;mix help deps&quot; to learn about dependencies</span><span class="w">
  </span><span class="kd">defp</span><span class="w"> </span><span class="nf">deps</span><span class="w"> </span><span class="k" data-group-id="9956785341-11">do</span><span class="w">
    </span><span class="p" data-group-id="9956785341-12">[</span><span class="w">
      </span><span class="c1"># {:dep_from_hexpm, &quot;~&gt; 0.3.0&quot;},</span><span class="w">
      </span><span class="c1"># {:dep_from_git, git: &quot;https://github.com/elixir-lang/my_dep.git&quot;, tag: &quot;0.1.0&quot;},</span><span class="w">
      </span><span class="c1"># {:sibling_app_in_umbrella, in_umbrella: true},</span><span class="w">
    </span><span class="p" data-group-id="9956785341-12">]</span><span class="w">
  </span><span class="k" data-group-id="9956785341-11">end</span><span class="w">
</span><span class="k" data-group-id="9956785341-1">end</span></code></pre><p>First of all, since we generated this project inside <code class="inline">kv_umbrella/apps</code>, Mix automatically detected the umbrella structure and added four lines to the project definition:</p><pre><code class="makeup elixir" translate="no"><span class="ss">build_path</span><span class="p">:</span><span class="w"> </span><span class="s">&quot;../../_build&quot;</span><span class="p">,</span><span class="w">
</span><span class="ss">config_path</span><span class="p">:</span><span class="w"> </span><span class="s">&quot;../../config/config.exs&quot;</span><span class="p">,</span><span class="w">
</span><span class="ss">deps_path</span><span class="p">:</span><span class="w"> </span><span class="s">&quot;../../deps&quot;</span><span class="p">,</span><span class="w">
</span><span class="ss">lockfile</span><span class="p">:</span><span class="w"> </span><span class="s">&quot;../../mix.lock&quot;</span><span class="p">,</span></code></pre><p>Those options mean all dependencies will be checked out to <code class="inline">kv_umbrella/deps</code>, and they will share the same build, config, and lock files. We haven't talked about configuration yet, but from here we can build the intuition that all configuration and dependencies are shared across all projects in an umbrella, and it is not per application.</p><p>The second change is in the <code class="inline">application</code> function inside <code class="inline">mix.exs</code>:</p><pre><code class="makeup elixir" translate="no"><span class="kd">def</span><span class="w"> </span><span class="nf">application</span><span class="w"> </span><span class="k" data-group-id="3921354680-1">do</span><span class="w">
  </span><span class="p" data-group-id="3921354680-2">[</span><span class="w">
    </span><span class="ss">extra_applications</span><span class="p">:</span><span class="w"> </span><span class="p" data-group-id="3921354680-3">[</span><span class="ss">:logger</span><span class="p" data-group-id="3921354680-3">]</span><span class="p">,</span><span class="w">
    </span><span class="ss">mod</span><span class="p">:</span><span class="w"> </span><span class="p" data-group-id="3921354680-4">{</span><span class="nc">KVServer.Application</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="3921354680-5">[</span><span class="p" data-group-id="3921354680-5">]</span><span class="p" data-group-id="3921354680-4">}</span><span class="w">
  </span><span class="p" data-group-id="3921354680-2">]</span><span class="w">
</span><span class="k" data-group-id="3921354680-1">end</span></code></pre><p>Because we passed the <code class="inline">--sup</code> flag, Mix automatically added <code class="inline">mod: {KVServer.Application, []}</code>, specifying that <code class="inline">KVServer.Application</code> is our application callback module. <code class="inline">KVServer.Application</code> will start our application supervision tree.</p><p>In fact, let's open up <code class="inline">lib/kv_server/application.ex</code>:</p><pre><code class="makeup elixir" translate="no"><span class="kd">defmodule</span><span class="w"> </span><span class="nc">KVServer.Application</span><span class="w"> </span><span class="k" data-group-id="4159638026-1">do</span><span class="w">
  </span><span class="c1"># See https://hexdocs.pm/elixir/Application.html</span><span class="w">
  </span><span class="c1"># for more information on OTP Applications</span><span class="w">
  </span><span class="na">@moduledoc</span><span class="w"> </span><span class="no">false</span><span class="w">

  </span><span class="kn">use</span><span class="w"> </span><span class="nc">Application</span><span class="w">

  </span><span class="na">@impl</span><span class="w"> </span><span class="no">true</span><span class="w">
  </span><span class="kd">def</span><span class="w"> </span><span class="nf">start</span><span class="p" data-group-id="4159638026-2">(</span><span class="c">_type</span><span class="p">,</span><span class="w"> </span><span class="c">_args</span><span class="p" data-group-id="4159638026-2">)</span><span class="w"> </span><span class="k" data-group-id="4159638026-3">do</span><span class="w">
    </span><span class="c1"># List all child processes to be supervised</span><span class="w">
    </span><span class="n">children</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p" data-group-id="4159638026-4">[</span><span class="w">
      </span><span class="c1"># Starts a worker by calling: KVServer.Worker.start_link(arg)</span><span class="w">
      </span><span class="c1"># {KVServer.Worker, arg},</span><span class="w">
    </span><span class="p" data-group-id="4159638026-4">]</span><span class="w">

    </span><span class="c1"># See https://hexdocs.pm/elixir/Supervisor.html</span><span class="w">
    </span><span class="c1"># for other strategies and supported options</span><span class="w">
    </span><span class="n">opts</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p" data-group-id="4159638026-5">[</span><span class="ss">strategy</span><span class="p">:</span><span class="w"> </span><span class="ss">:one_for_one</span><span class="p">,</span><span class="w"> </span><span class="ss">name</span><span class="p">:</span><span class="w"> </span><span class="nc">KVServer.Supervisor</span><span class="p" data-group-id="4159638026-5">]</span><span class="w">
    </span><span class="nc">Supervisor</span><span class="o">.</span><span class="n">start_link</span><span class="p" data-group-id="4159638026-6">(</span><span class="n">children</span><span class="p">,</span><span class="w"> </span><span class="n">opts</span><span class="p" data-group-id="4159638026-6">)</span><span class="w">
  </span><span class="k" data-group-id="4159638026-3">end</span><span class="w">
</span><span class="k" data-group-id="4159638026-1">end</span></code></pre><p>Notice that it defines the application callback function, <code class="inline">start/2</code>, and instead of defining a supervisor named <code class="inline">KVServer.Supervisor</code> that uses the <a href="Supervisor.xhtml"><code class="inline">Supervisor</code></a> module, it conveniently defined the supervisor inline! You can read more about such supervisors by reading the <a href="Supervisor.xhtml"><code class="inline">Supervisor</code></a> module documentation.</p><p>We can already try out our first umbrella child. We could run tests inside the <code class="inline">apps/kv_server</code> directory, but that wouldn't be much fun. Instead, go to the root of the umbrella project and run <a href="https://hexdocs.pm/mix/Mix.Tasks.Test.html"><code class="inline">mix test</code></a>:</p><pre><code class="makeup console" translate="no"><span class="gp unselectable">$ </span><span class="">mix test
</span></code></pre><p>And it works!</p><p>Since we want <code class="inline">kv_server</code> to eventually use the functionality we defined in <code class="inline">kv</code>, we need to add <code class="inline">kv</code> as a dependency to our application.</p><h2 id="dependencies-within-an-umbrella-project">Dependencies within an umbrella project</h2><p>Dependencies between applications in an umbrella project must still be explicitly defined and Mix makes it easy to do so. Open up <code class="inline">apps/kv_server/mix.exs</code> and change the <code class="inline">deps/0</code> function to the following:</p><pre><code class="makeup elixir" translate="no"><span class="kd">defp</span><span class="w"> </span><span class="nf">deps</span><span class="w"> </span><span class="k" data-group-id="1710341939-1">do</span><span class="w">
  </span><span class="p" data-group-id="1710341939-2">[</span><span class="p" data-group-id="1710341939-3">{</span><span class="ss">:kv</span><span class="p">,</span><span class="w"> </span><span class="ss">in_umbrella</span><span class="p">:</span><span class="w"> </span><span class="no">true</span><span class="p" data-group-id="1710341939-3">}</span><span class="p" data-group-id="1710341939-2">]</span><span class="w">
</span><span class="k" data-group-id="1710341939-1">end</span></code></pre><p>The line above makes <code class="inline">:kv</code> available as a dependency inside <code class="inline">:kv_server</code> and automatically starts the <code class="inline">:kv</code> application before the server starts.</p><p>Finally, copy the <code class="inline">kv</code> application we have built so far to the <code class="inline">apps</code> directory in our new umbrella project. The final directory structure should match the structure we mentioned earlier:</p><pre><code class="makeup elixir" translate="no"><span class="o">+</span><span class="w"> </span><span class="n">kv_umbrella</span><span class="w">
  </span><span class="o">+</span><span class="w"> </span><span class="n">apps</span><span class="w">
    </span><span class="o">+</span><span class="w"> </span><span class="n">kv</span><span class="w">
    </span><span class="o">+</span><span class="w"> </span><span class="n">kv_server</span></code></pre><p>We now need to modify <code class="inline">apps/kv/mix.exs</code> to contain the umbrella entries we have seen in <code class="inline">apps/kv_server/mix.exs</code>. Open up <code class="inline">apps/kv/mix.exs</code> and add to the <code class="inline">project/0</code> function:</p><pre><code class="makeup elixir" translate="no"><span class="ss">build_path</span><span class="p">:</span><span class="w"> </span><span class="s">&quot;../../_build&quot;</span><span class="p">,</span><span class="w">
</span><span class="ss">config_path</span><span class="p">:</span><span class="w"> </span><span class="s">&quot;../../config/config.exs&quot;</span><span class="p">,</span><span class="w">
</span><span class="ss">deps_path</span><span class="p">:</span><span class="w"> </span><span class="s">&quot;../../deps&quot;</span><span class="p">,</span><span class="w">
</span><span class="ss">lockfile</span><span class="p">:</span><span class="w"> </span><span class="s">&quot;../../mix.lock&quot;</span><span class="p">,</span></code></pre><p>Now you can run tests for both projects from the umbrella root with <a href="https://hexdocs.pm/mix/Mix.Tasks.Test.html"><code class="inline">mix test</code></a>. Sweet!</p><h2 id="don-t-drink-the-kool-aid">Don't drink the kool aid</h2><p>Umbrella projects are a convenience to help you organize and manage multiple applications. While it provides a degree of separation between applications, those applications are not fully decoupled, as they share the same configuration and the same dependencies.</p><p>The pattern of keeping multiple applications in the same repository is known as &quot;mono-repo&quot;. Umbrella projects maximize this pattern by providing conveniences to compile, test and run multiple applications at once.</p><p>If you find yourself in a position where you want to use different configurations in each application for the same dependency or use different dependency versions, then it is likely your codebase has grown beyond what umbrellas can provide.</p><p>The good news is that breaking an umbrella apart is quite straightforward, as you simply need to move applications outside of the umbrella project's <code class="inline">apps/</code> directory and update the project's mix.exs file to no longer set the <code class="inline">build_path</code>, <code class="inline">config_path</code>, <code class="inline">deps_path</code>, and <code class="inline">lockfile</code> configuration. You can depend on private projects outside of the umbrella in multiple ways:</p><ol><li>Move it to a separate folder within the same repository and point to it using a path dependency (the mono-repo pattern)</li><li>Move the repository to a separate Git repository and depend on it</li><li>Publish the project to a private <a href="https://hex.pm/">Hex.pm</a> organization</li></ol><h2 id="summing-up">Summing up</h2><p>In this chapter, we have learned more about Mix dependencies and umbrella projects. While we may run <code class="inline">kv</code> without a server, our <code class="inline">kv_server</code> depends directly on <code class="inline">kv</code>. By breaking them into separate applications, we gain more control in how they are developed and tested.</p><p>When using umbrella applications, it is important to have a clear boundary between them. Our upcoming <code class="inline">kv_server</code> must only access public APIs defined in <code class="inline">kv</code>. Think of your umbrella apps as any other dependency or even Elixir itself: you can only access what is public and documented. Reaching into private functionality in your dependencies is a poor practice that will eventually cause your code to break when a new version is up.</p><p>Umbrella applications can also be used as a stepping stone for eventually extracting an application from your codebase. For example, imagine a web application that has to send &quot;push notifications&quot; to its users. The whole &quot;push notifications system&quot; can be developed as a separate application in the umbrella, with its own supervision tree and APIs. If you ever run into a situation where another project needs the push notifications system, the system can be moved to a private repository or <a href="https://hex.pm/">a Hex package</a>.</p><p>Finally, keep in mind that applications in an umbrella project all share the same configurations and dependencies. If two applications in your umbrella need to configure the same dependency in drastically different ways or even use different versions, you have probably outgrown the benefits brought by umbrellas. Remember you can break the umbrella and still leverage the benefits behind &quot;mono-repos&quot;.</p><p>With our umbrella project up and running, it is time to start writing our server.</p>

  </body>
</html>
