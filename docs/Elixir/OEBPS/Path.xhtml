<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"
      xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>Path - Elixir v1.18.4</title>
    <meta name="generator" content="ExDoc v0.38.2" />
    <link type="text/css" rel="stylesheet" href="dist/epub-elixir-FNUUKFP7.css" />
    <script src="dist/epub-4WIP524F.js"></script>

  </head>
  <body class="content-inner">

    <h1 id="content">
Path 
    </h1>


      <section id="moduledoc" class="docstring">
<p>This module provides conveniences for manipulating or
retrieving file system paths.</p><p>The functions in this module may receive chardata as
arguments and will always return a string encoded in UTF-8. Chardata
is a string or a list of characters and strings, see <a href="IO.xhtml#t:chardata/0"><code class="inline">IO.chardata/0</code></a>.
If a binary is given, in whatever encoding, its encoding will be kept.</p><p>The majority of the functions in this module do not
interact with the file system, except for a few functions
that require it (like <a href="#wildcard/2"><code class="inline">wildcard/2</code></a> and <a href="#expand/1"><code class="inline">expand/1</code></a>).</p>
      </section>


      <section id="summary" class="details-list">
        <h1 class="section-heading">Summary</h1>
<div class="summary-types summary">
  <h2>
    <a href="#types">Types</a>
  </h2>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#t:t/0" data-no-tooltip="" translate="no">t()</a>

      </div>

        <div class="summary-synopsis"><p>A path.</p></div>

    </div>

</div>
<div class="summary-functions summary">
  <h2>
    <a href="#functions">Functions</a>
  </h2>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#absname/1" data-no-tooltip="" translate="no">absname(path)</a>

      </div>

        <div class="summary-synopsis"><p>Converts the given path to an absolute one.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#absname/2" data-no-tooltip="" translate="no">absname(path, relative_to)</a>

      </div>

        <div class="summary-synopsis"><p>Builds a path from <code class="inline">relative_to</code> to <code class="inline">path</code>.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#basename/1" data-no-tooltip="" translate="no">basename(path)</a>

      </div>

        <div class="summary-synopsis"><p>Returns the last component of the path or the path
itself if it does not contain any directory separators.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#basename/2" data-no-tooltip="" translate="no">basename(path, extension)</a>

      </div>

        <div class="summary-synopsis"><p>Returns the last component of <code class="inline">path</code> with the <code class="inline">extension</code>
stripped.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#dirname/1" data-no-tooltip="" translate="no">dirname(path)</a>

      </div>

        <div class="summary-synopsis"><p>Returns the directory component of <code class="inline">path</code>.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#expand/1" data-no-tooltip="" translate="no">expand(path)</a>

      </div>

        <div class="summary-synopsis"><p>Converts the path to an absolute one, expanding
any <code class="inline">.</code> and <code class="inline">..</code> components and a leading <code class="inline">~</code>.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#expand/2" data-no-tooltip="" translate="no">expand(path, relative_to)</a>

      </div>

        <div class="summary-synopsis"><p>Expands the path relative to the path given as the second argument
expanding any <code class="inline">.</code> and <code class="inline">..</code> characters.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#extname/1" data-no-tooltip="" translate="no">extname(path)</a>

      </div>

        <div class="summary-synopsis"><p>Returns the extension of the last component of <code class="inline">path</code>.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#join/1" data-no-tooltip="" translate="no">join(list)</a>

      </div>

        <div class="summary-synopsis"><p>Joins a list of paths.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#join/2" data-no-tooltip="" translate="no">join(left, right)</a>

      </div>

        <div class="summary-synopsis"><p>Joins two paths.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#relative/1" data-no-tooltip="" translate="no">relative(name)</a>

      </div>

        <div class="summary-synopsis"><p>Forces the path to be a relative path.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#relative_to/3" data-no-tooltip="" translate="no">relative_to(path, cwd, opts \\ [])</a>

      </div>

        <div class="summary-synopsis"><p>Returns the direct relative path from <code class="inline">path</code> in relation to <code class="inline">cwd</code>.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#relative_to_cwd/2" data-no-tooltip="" translate="no">relative_to_cwd(path, opts \\ [])</a>

      </div>

        <div class="summary-synopsis"><p>Convenience to get the path relative to the current working
directory.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#rootname/1" data-no-tooltip="" translate="no">rootname(path)</a>

      </div>

        <div class="summary-synopsis"><p>Returns the <code class="inline">path</code> with the <code class="inline">extension</code> stripped.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#rootname/2" data-no-tooltip="" translate="no">rootname(path, extension)</a>

      </div>

        <div class="summary-synopsis"><p>Returns the <code class="inline">path</code> with the <code class="inline">extension</code> stripped.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#safe_relative/2" data-no-tooltip="" translate="no">safe_relative(path, relative_to \\ File.cwd!())</a>

      </div>

        <div class="summary-synopsis"><p>Returns a relative path that is protected from directory-traversal attacks.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#safe_relative_to/2" data-no-tooltip="" translate="no">safe_relative_to(path, cwd)</a>

          <span class="deprecated" title="Use safe_relative/2 instead">deprecated</span>

      </div>

        <div class="summary-synopsis"><p>Returns a relative path that is protected from directory-traversal attacks.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#split/1" data-no-tooltip="" translate="no">split(path)</a>

      </div>

        <div class="summary-synopsis"><p>Splits the path into a list at the path separator.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#type/1" data-no-tooltip="" translate="no">type(name)</a>

      </div>

        <div class="summary-synopsis"><p>Returns the path type.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#wildcard/2" data-no-tooltip="" translate="no">wildcard(glob, opts \\ [])</a>

      </div>

        <div class="summary-synopsis"><p>Traverses paths according to the given <code class="inline">glob</code> expression and returns a
list of matches.</p></div>

    </div>

</div>

      </section>


      <section id="types" class="details-list">
        <h1 class="section-heading">Types</h1>

        <div class="types-list">
<section class="detail" id="t:t/0">

  <div class="detail-header">
    <a href="#t:t/0" class="detail-link" data-no-tooltip="" aria-label="Link to this type">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">t()</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/path.ex#L19" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@type</span> t() :: <a href="IO.xhtml#t:chardata/0">IO.chardata</a>()</pre>

      </div>

<p>A path.</p>
  </section>
</section>

        </div>
      </section>

      <section id="functions" class="details-list">
        <h1 class="section-heading">Functions</h1>

        <div class="functions-list">
<section class="detail" id="absname/1">

  <div class="detail-header">
    <a href="#absname/1" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">absname(path)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/path.ex#L46" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> absname(<a href="#t:t/0">t</a>()) :: <a href="typespecs.xhtml#built-in-types">binary</a>()</pre>

      </div>

<p>Converts the given path to an absolute one.</p><p>Unlike <a href="#expand/1"><code class="inline">expand/1</code></a>, no attempt is made to resolve <code class="inline">..</code>, <code class="inline">.</code>, or <code class="inline">~</code>.</p><h2 id="absname/1-examples" class="section-heading"><a href="#absname/1-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><h3 id="absname/1-unix-like-operating-systems" class="section-heading"><a href="#absname/1-unix-like-operating-systems" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Unix-like operating systems</span></h3><pre><code class="makeup elixir" translate="no"><samp class="nc">Path</samp><samp class="o">.</samp><samp class="n">absname</samp><samp class="p" data-group-id="8209461353-1">(</samp><samp class="s">&quot;foo&quot;</samp><samp class="p" data-group-id="8209461353-1">)</samp><samp class="w">
</samp><samp class="c1">#=&gt; &quot;/usr/local/foo&quot;</samp><samp class="w">

</samp><samp class="nc">Path</samp><samp class="o">.</samp><samp class="n">absname</samp><samp class="p" data-group-id="8209461353-2">(</samp><samp class="s">&quot;../x&quot;</samp><samp class="p" data-group-id="8209461353-2">)</samp><samp class="w">
</samp><samp class="c1">#=&gt; &quot;/usr/local/../x&quot;</samp></code></pre><h3 id="absname/1-windows" class="section-heading"><a href="#absname/1-windows" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Windows</span></h3><pre><code class="makeup elixir" translate="no"><samp class="nc">Path</samp><samp class="o">.</samp><samp class="n">absname</samp><samp class="p" data-group-id="8355617222-1">(</samp><samp class="s">&quot;foo&quot;</samp><samp class="p" data-group-id="8355617222-1">)</samp><samp class="w">
</samp><samp class="c1">#=&gt; &quot;D:/usr/local/foo&quot;</samp><samp class="w">

</samp><samp class="nc">Path</samp><samp class="o">.</samp><samp class="n">absname</samp><samp class="p" data-group-id="8355617222-2">(</samp><samp class="s">&quot;../x&quot;</samp><samp class="p" data-group-id="8355617222-2">)</samp><samp class="w">
</samp><samp class="c1">#=&gt; &quot;D:/usr/local/../x&quot;</samp></code></pre>
  </section>
</section>
<section class="detail" id="absname/2">

  <div class="detail-header">
    <a href="#absname/2" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">absname(path, relative_to)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/path.ex#L72" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> absname(<a href="#t:t/0">t</a>(), <a href="#t:t/0">t</a>() | (-&gt; <a href="#t:t/0">t</a>())) :: <a href="typespecs.xhtml#built-in-types">binary</a>()</pre>

      </div>

<p>Builds a path from <code class="inline">relative_to</code> to <code class="inline">path</code>.</p><p>If <code class="inline">path</code> is already an absolute path, <code class="inline">relative_to</code> is ignored. See also
<a href="#relative_to/3"><code class="inline">relative_to/3</code></a>. <code class="inline">relative_to</code> is either a path or an anonymous function,
which is invoked only when necessary, that returns a path.</p><p>Unlike <a href="#expand/2"><code class="inline">expand/2</code></a>, no attempt is made to resolve <code class="inline">..</code>, <code class="inline">.</code> or <code class="inline">~</code>.</p><h2 id="absname/2-examples" class="section-heading"><a href="#absname/2-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Path</samp><samp class="o">.</samp><samp class="n">absname</samp><samp class="p" data-group-id="1032873283-1">(</samp><samp class="s">&quot;foo&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;bar&quot;</samp><samp class="p" data-group-id="1032873283-1">)</samp><samp class="w">
</samp><samp class="s">&quot;bar/foo&quot;</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Path</samp><samp class="o">.</samp><samp class="n">absname</samp><samp class="p" data-group-id="1032873283-2">(</samp><samp class="s">&quot;../x&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;bar&quot;</samp><samp class="p" data-group-id="1032873283-2">)</samp><samp class="w">
</samp><samp class="s">&quot;bar/../x&quot;</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Path</samp><samp class="o">.</samp><samp class="n">absname</samp><samp class="p" data-group-id="1032873283-3">(</samp><samp class="s">&quot;foo&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="k" data-group-id="1032873283-4">fn</samp><samp class="w"> </samp><samp class="o">-&gt;</samp><samp class="w"> </samp><samp class="s">&quot;lazy&quot;</samp><samp class="w"> </samp><samp class="k" data-group-id="1032873283-4">end</samp><samp class="p" data-group-id="1032873283-3">)</samp><samp class="w">
</samp><samp class="s">&quot;lazy/foo&quot;</samp></code></pre>
  </section>
</section>
<section class="detail" id="basename/1">

  <div class="detail-header">
    <a href="#basename/1" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">basename(path)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/path.ex#L506" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> basename(<a href="#t:t/0">t</a>()) :: <a href="typespecs.xhtml#built-in-types">binary</a>()</pre>

      </div>

<p>Returns the last component of the path or the path
itself if it does not contain any directory separators.</p><h2 id="basename/1-examples" class="section-heading"><a href="#basename/1-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Path</samp><samp class="o">.</samp><samp class="n">basename</samp><samp class="p" data-group-id="4739783954-1">(</samp><samp class="s">&quot;foo&quot;</samp><samp class="p" data-group-id="4739783954-1">)</samp><samp class="w">
</samp><samp class="s">&quot;foo&quot;</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Path</samp><samp class="o">.</samp><samp class="n">basename</samp><samp class="p" data-group-id="4739783954-2">(</samp><samp class="s">&quot;foo/bar&quot;</samp><samp class="p" data-group-id="4739783954-2">)</samp><samp class="w">
</samp><samp class="s">&quot;bar&quot;</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Path</samp><samp class="o">.</samp><samp class="n">basename</samp><samp class="p" data-group-id="4739783954-3">(</samp><samp class="s">&quot;lib/module/submodule.ex&quot;</samp><samp class="p" data-group-id="4739783954-3">)</samp><samp class="w">
</samp><samp class="s">&quot;submodule.ex&quot;</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Path</samp><samp class="o">.</samp><samp class="n">basename</samp><samp class="p" data-group-id="4739783954-4">(</samp><samp class="s">&quot;/&quot;</samp><samp class="p" data-group-id="4739783954-4">)</samp><samp class="w">
</samp><samp class="s">&quot;&quot;</samp></code></pre>
  </section>
</section>
<section class="detail" id="basename/2">

  <div class="detail-header">
    <a href="#basename/2" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">basename(path, extension)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/path.ex#L530" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> basename(<a href="#t:t/0">t</a>(), <a href="#t:t/0">t</a>()) :: <a href="typespecs.xhtml#built-in-types">binary</a>()</pre>

      </div>

<p>Returns the last component of <code class="inline">path</code> with the <code class="inline">extension</code>
stripped.</p><p>This function should be used to remove a specific
extension which may or may not be there.</p><h2 id="basename/2-examples" class="section-heading"><a href="#basename/2-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Path</samp><samp class="o">.</samp><samp class="n">basename</samp><samp class="p" data-group-id="3198151268-1">(</samp><samp class="s">&quot;~/foo/bar.ex&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;.ex&quot;</samp><samp class="p" data-group-id="3198151268-1">)</samp><samp class="w">
</samp><samp class="s">&quot;bar&quot;</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Path</samp><samp class="o">.</samp><samp class="n">basename</samp><samp class="p" data-group-id="3198151268-2">(</samp><samp class="s">&quot;~/foo/bar.exs&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;.ex&quot;</samp><samp class="p" data-group-id="3198151268-2">)</samp><samp class="w">
</samp><samp class="s">&quot;bar.exs&quot;</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Path</samp><samp class="o">.</samp><samp class="n">basename</samp><samp class="p" data-group-id="3198151268-3">(</samp><samp class="s">&quot;~/foo/bar.old.ex&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;.ex&quot;</samp><samp class="p" data-group-id="3198151268-3">)</samp><samp class="w">
</samp><samp class="s">&quot;bar.old&quot;</samp></code></pre>
  </section>
</section>
<section class="detail" id="dirname/1">

  <div class="detail-header">
    <a href="#dirname/1" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">dirname(path)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/path.ex#L553" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> dirname(<a href="#t:t/0">t</a>()) :: <a href="typespecs.xhtml#built-in-types">binary</a>()</pre>

      </div>

<p>Returns the directory component of <code class="inline">path</code>.</p><h2 id="dirname/1-examples" class="section-heading"><a href="#dirname/1-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Path</samp><samp class="o">.</samp><samp class="n">dirname</samp><samp class="p" data-group-id="7423028646-1">(</samp><samp class="s">&quot;/foo/bar.ex&quot;</samp><samp class="p" data-group-id="7423028646-1">)</samp><samp class="w">
</samp><samp class="s">&quot;/foo&quot;</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Path</samp><samp class="o">.</samp><samp class="n">dirname</samp><samp class="p" data-group-id="7423028646-2">(</samp><samp class="s">&quot;/foo/bar/baz.ex&quot;</samp><samp class="p" data-group-id="7423028646-2">)</samp><samp class="w">
</samp><samp class="s">&quot;/foo/bar&quot;</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Path</samp><samp class="o">.</samp><samp class="n">dirname</samp><samp class="p" data-group-id="7423028646-3">(</samp><samp class="s">&quot;/foo/bar/&quot;</samp><samp class="p" data-group-id="7423028646-3">)</samp><samp class="w">
</samp><samp class="s">&quot;/foo/bar&quot;</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Path</samp><samp class="o">.</samp><samp class="n">dirname</samp><samp class="p" data-group-id="7423028646-4">(</samp><samp class="s">&quot;bar.ex&quot;</samp><samp class="p" data-group-id="7423028646-4">)</samp><samp class="w">
</samp><samp class="s">&quot;.&quot;</samp></code></pre>
  </section>
</section>
<section class="detail" id="expand/1">

  <div class="detail-header">
    <a href="#expand/1" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">expand(path)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/path.ex#L188" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> expand(<a href="#t:t/0">t</a>()) :: <a href="typespecs.xhtml#built-in-types">binary</a>()</pre>

      </div>

<p>Converts the path to an absolute one, expanding
any <code class="inline">.</code> and <code class="inline">..</code> components and a leading <code class="inline">~</code>.</p><p>If a relative path is provided it is expanded relatively to
the current working directory.</p><h2 id="expand/1-examples" class="section-heading"><a href="#expand/1-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="nc">Path</samp><samp class="o">.</samp><samp class="n">expand</samp><samp class="p" data-group-id="0415301142-1">(</samp><samp class="s">&quot;/foo/bar/../baz&quot;</samp><samp class="p" data-group-id="0415301142-1">)</samp><samp class="w">
</samp><samp class="c1">#=&gt; &quot;/foo/baz&quot;</samp><samp class="w">

</samp><samp class="nc">Path</samp><samp class="o">.</samp><samp class="n">expand</samp><samp class="p" data-group-id="0415301142-2">(</samp><samp class="s">&quot;foo/bar/../baz&quot;</samp><samp class="p" data-group-id="0415301142-2">)</samp><samp class="w">
</samp><samp class="c1">#=&gt; &quot;$PWD/foo/baz&quot;</samp></code></pre>
  </section>
</section>
<section class="detail" id="expand/2">

  <div class="detail-header">
    <a href="#expand/2" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">expand(path, relative_to)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/path.ex#L217" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> expand(<a href="#t:t/0">t</a>(), <a href="#t:t/0">t</a>()) :: <a href="typespecs.xhtml#built-in-types">binary</a>()</pre>

      </div>

<p>Expands the path relative to the path given as the second argument
expanding any <code class="inline">.</code> and <code class="inline">..</code> characters.</p><p>If the path is already an absolute path, <code class="inline">relative_to</code> is ignored.</p><p>Note that this function treats a <code class="inline">path</code> with a leading <code class="inline">~</code> as
an absolute one.</p><p>The second argument is first expanded to an absolute path.</p><h2 id="expand/2-examples" class="section-heading"><a href="#expand/2-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="c1"># Assuming that the absolute path to baz is /quux/baz</samp><samp class="w">
</samp><samp class="nc">Path</samp><samp class="o">.</samp><samp class="n">expand</samp><samp class="p" data-group-id="2394665496-1">(</samp><samp class="s">&quot;foo/bar/../bar&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;baz&quot;</samp><samp class="p" data-group-id="2394665496-1">)</samp><samp class="w">
</samp><samp class="c1">#=&gt; &quot;/quux/baz/foo/bar&quot;</samp><samp class="w">

</samp><samp class="nc">Path</samp><samp class="o">.</samp><samp class="n">expand</samp><samp class="p" data-group-id="2394665496-2">(</samp><samp class="s">&quot;foo/bar/../bar&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;/baz&quot;</samp><samp class="p" data-group-id="2394665496-2">)</samp><samp class="w">
</samp><samp class="c1">#=&gt; &quot;/baz/foo/bar&quot;</samp><samp class="w">

</samp><samp class="nc">Path</samp><samp class="o">.</samp><samp class="n">expand</samp><samp class="p" data-group-id="2394665496-3">(</samp><samp class="s">&quot;/foo/bar/../bar&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;/baz&quot;</samp><samp class="p" data-group-id="2394665496-3">)</samp><samp class="w">
</samp><samp class="c1">#=&gt; &quot;/foo/bar&quot;</samp></code></pre>
  </section>
</section>
<section class="detail" id="extname/1">

  <div class="detail-header">
    <a href="#extname/1" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">extname(path)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/path.ex#L579" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> extname(<a href="#t:t/0">t</a>()) :: <a href="typespecs.xhtml#built-in-types">binary</a>()</pre>

      </div>

<p>Returns the extension of the last component of <code class="inline">path</code>.</p><p>For filenames starting with a dot and without an extension, it returns
an empty string.</p><p>See <a href="#basename/1"><code class="inline">basename/1</code></a> and <a href="#rootname/1"><code class="inline">rootname/1</code></a> for related functions to extract
information from paths.</p><h2 id="extname/1-examples" class="section-heading"><a href="#extname/1-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Path</samp><samp class="o">.</samp><samp class="n">extname</samp><samp class="p" data-group-id="8928851098-1">(</samp><samp class="s">&quot;foo.erl&quot;</samp><samp class="p" data-group-id="8928851098-1">)</samp><samp class="w">
</samp><samp class="s">&quot;.erl&quot;</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Path</samp><samp class="o">.</samp><samp class="n">extname</samp><samp class="p" data-group-id="8928851098-2">(</samp><samp class="s">&quot;~/foo/bar&quot;</samp><samp class="p" data-group-id="8928851098-2">)</samp><samp class="w">
</samp><samp class="s">&quot;&quot;</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Path</samp><samp class="o">.</samp><samp class="n">extname</samp><samp class="p" data-group-id="8928851098-3">(</samp><samp class="s">&quot;.gitignore&quot;</samp><samp class="p" data-group-id="8928851098-3">)</samp><samp class="w">
</samp><samp class="s">&quot;&quot;</samp></code></pre>
  </section>
</section>
<section class="detail" id="join/1">

  <div class="detail-header">
    <a href="#join/1" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">join(list)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/path.ex#L641" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> join([<a href="#t:t/0">t</a>(), ...]) :: <a href="typespecs.xhtml#built-in-types">binary</a>()</pre>

      </div>

<p>Joins a list of paths.</p><p>This function should be used to convert a list of paths to a path.
Note that any trailing slash is removed when joining.</p><p>Raises an error if the given list of paths is empty.</p><h2 id="join/1-examples" class="section-heading"><a href="#join/1-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Path</samp><samp class="o">.</samp><samp class="n">join</samp><samp class="p" data-group-id="9428953442-1">(</samp><samp class="p" data-group-id="9428953442-2">[</samp><samp class="s">&quot;~&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;foo&quot;</samp><samp class="p" data-group-id="9428953442-2">]</samp><samp class="p" data-group-id="9428953442-1">)</samp><samp class="w">
</samp><samp class="s">&quot;~/foo&quot;</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Path</samp><samp class="o">.</samp><samp class="n">join</samp><samp class="p" data-group-id="9428953442-3">(</samp><samp class="p" data-group-id="9428953442-4">[</samp><samp class="s">&quot;foo&quot;</samp><samp class="p" data-group-id="9428953442-4">]</samp><samp class="p" data-group-id="9428953442-3">)</samp><samp class="w">
</samp><samp class="s">&quot;foo&quot;</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Path</samp><samp class="o">.</samp><samp class="n">join</samp><samp class="p" data-group-id="9428953442-5">(</samp><samp class="p" data-group-id="9428953442-6">[</samp><samp class="s">&quot;/&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;foo&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;bar/&quot;</samp><samp class="p" data-group-id="9428953442-6">]</samp><samp class="p" data-group-id="9428953442-5">)</samp><samp class="w">
</samp><samp class="s">&quot;/foo/bar&quot;</samp></code></pre>
  </section>
</section>
<section class="detail" id="join/2">

  <div class="detail-header">
    <a href="#join/2" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">join(left, right)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/path.ex#L670" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> join(<a href="#t:t/0">t</a>(), <a href="#t:t/0">t</a>()) :: <a href="typespecs.xhtml#built-in-types">binary</a>()</pre>

      </div>

<p>Joins two paths.</p><p>The right path will always be expanded to its relative format
and any trailing slash will be removed when joining.</p><h2 id="join/2-examples" class="section-heading"><a href="#join/2-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Path</samp><samp class="o">.</samp><samp class="n">join</samp><samp class="p" data-group-id="7586535788-1">(</samp><samp class="s">&quot;foo&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;bar&quot;</samp><samp class="p" data-group-id="7586535788-1">)</samp><samp class="w">
</samp><samp class="s">&quot;foo/bar&quot;</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Path</samp><samp class="o">.</samp><samp class="n">join</samp><samp class="p" data-group-id="7586535788-2">(</samp><samp class="s">&quot;/foo&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;/bar/&quot;</samp><samp class="p" data-group-id="7586535788-2">)</samp><samp class="w">
</samp><samp class="s">&quot;/foo/bar&quot;</samp></code></pre><p>The functions in this module support chardata, so giving a list will
treat it as a single entity:</p><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Path</samp><samp class="o">.</samp><samp class="n">join</samp><samp class="p" data-group-id="1211897130-1">(</samp><samp class="s">&quot;foo&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="1211897130-2">[</samp><samp class="s">&quot;bar&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;fiz&quot;</samp><samp class="p" data-group-id="1211897130-2">]</samp><samp class="p" data-group-id="1211897130-1">)</samp><samp class="w">
</samp><samp class="s">&quot;foo/barfiz&quot;</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Path</samp><samp class="o">.</samp><samp class="n">join</samp><samp class="p" data-group-id="1211897130-3">(</samp><samp class="p" data-group-id="1211897130-4">[</samp><samp class="s">&quot;foo&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;bar&quot;</samp><samp class="p" data-group-id="1211897130-4">]</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;fiz&quot;</samp><samp class="p" data-group-id="1211897130-3">)</samp><samp class="w">
</samp><samp class="s">&quot;foobar/fiz&quot;</samp></code></pre><p>Use <a href="#join/1"><code class="inline">join/1</code></a> if you need to join a list of paths instead.</p>
  </section>
</section>
<section class="detail" id="relative/1">

  <div class="detail-header">
    <a href="#relative/1" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">relative(name)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/path.ex#L277" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> relative(<a href="#t:t/0">t</a>()) :: <a href="typespecs.xhtml#built-in-types">binary</a>()</pre>

      </div>

<p>Forces the path to be a relative path.</p><p>If an absolute path is given, it is stripped from its root component.</p><h2 id="relative/1-examples" class="section-heading"><a href="#relative/1-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><h3 id="relative/1-unix-like-operating-systems" class="section-heading"><a href="#relative/1-unix-like-operating-systems" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Unix-like operating systems</span></h3><pre><code class="makeup elixir" translate="no"><samp class="nc">Path</samp><samp class="o">.</samp><samp class="n">relative</samp><samp class="p" data-group-id="4612417914-1">(</samp><samp class="s">&quot;/usr/local/bin&quot;</samp><samp class="p" data-group-id="4612417914-1">)</samp><samp class="w">   </samp><samp class="c1">#=&gt; &quot;usr/local/bin&quot;</samp><samp class="w">
</samp><samp class="nc">Path</samp><samp class="o">.</samp><samp class="n">relative</samp><samp class="p" data-group-id="4612417914-2">(</samp><samp class="s">&quot;usr/local/bin&quot;</samp><samp class="p" data-group-id="4612417914-2">)</samp><samp class="w">    </samp><samp class="c1">#=&gt; &quot;usr/local/bin&quot;</samp><samp class="w">
</samp><samp class="nc">Path</samp><samp class="o">.</samp><samp class="n">relative</samp><samp class="p" data-group-id="4612417914-3">(</samp><samp class="s">&quot;../usr/local/bin&quot;</samp><samp class="p" data-group-id="4612417914-3">)</samp><samp class="w"> </samp><samp class="c1">#=&gt; &quot;../usr/local/bin&quot;</samp></code></pre><h3 id="relative/1-windows" class="section-heading"><a href="#relative/1-windows" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Windows</span></h3><pre><code class="makeup elixir" translate="no"><samp class="nc">Path</samp><samp class="o">.</samp><samp class="n">relative</samp><samp class="p" data-group-id="2872851371-1">(</samp><samp class="s">&quot;D:/usr/local/bin&quot;</samp><samp class="p" data-group-id="2872851371-1">)</samp><samp class="w"> </samp><samp class="c1">#=&gt; &quot;usr/local/bin&quot;</samp><samp class="w">
</samp><samp class="nc">Path</samp><samp class="o">.</samp><samp class="n">relative</samp><samp class="p" data-group-id="2872851371-2">(</samp><samp class="s">&quot;usr/local/bin&quot;</samp><samp class="p" data-group-id="2872851371-2">)</samp><samp class="w">    </samp><samp class="c1">#=&gt; &quot;usr/local/bin&quot;</samp><samp class="w">
</samp><samp class="nc">Path</samp><samp class="o">.</samp><samp class="n">relative</samp><samp class="p" data-group-id="2872851371-3">(</samp><samp class="s">&quot;D:bar.ex&quot;</samp><samp class="p" data-group-id="2872851371-3">)</samp><samp class="w">         </samp><samp class="c1">#=&gt; &quot;bar.ex&quot;</samp><samp class="w">
</samp><samp class="nc">Path</samp><samp class="o">.</samp><samp class="n">relative</samp><samp class="p" data-group-id="2872851371-4">(</samp><samp class="s">&quot;/bar/foo.ex&quot;</samp><samp class="p" data-group-id="2872851371-4">)</samp><samp class="w">      </samp><samp class="c1">#=&gt; &quot;bar/foo.ex&quot;</samp></code></pre>
  </section>
</section>
<section class="detail" id="relative_to/3">

    <span id="relative_to/2"></span>

  <div class="detail-header">
    <a href="#relative_to/3" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">relative_to(path, cwd, opts \\ [])</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/path.ex#L401" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> relative_to(<a href="#t:t/0">t</a>(), <a href="#t:t/0">t</a>(), <a href="typespecs.xhtml#built-in-types">keyword</a>()) :: <a href="typespecs.xhtml#built-in-types">binary</a>()</pre>

      </div>

<p>Returns the direct relative path from <code class="inline">path</code> in relation to <code class="inline">cwd</code>.</p><p>In other words, this function attempts to return a path such that
<code class="inline">Path.expand(result, cwd)</code> points to <code class="inline">path</code>. This function aims
to return a relative path whenever possible, but that's not guaranteed:</p><ul><li><p>If both paths are relative, a relative path is always returned</p></li><li><p>If both paths are absolute, a relative path may be returned if
they share a common prefix. You can pass the <code class="inline">:force</code> option to
force this function to traverse up, but even then a relative
path is not guaranteed (for example, if the absolute paths
belong to different drives on Windows)</p></li><li><p>If a mixture of paths are given, the result will always match
the given <code class="inline">path</code> (the first argument)</p></li></ul><p>This function expands <code class="inline">.</code> and <code class="inline">..</code> entries without traversing the
file system, so it assumes no symlinks between the paths. See
<a href="#safe_relative_to/2"><code class="inline">safe_relative_to/2</code></a> for a safer alternative.</p><h2 id="relative_to/3-options" class="section-heading"><a href="#relative_to/3-options" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Options</span></h2><ul><li><code class="inline">:force</code> - (boolean since v1.16.0) if <code class="inline">true</code> forces a relative
path to be returned by traversing the path up. Except if the paths
are in different volumes on Windows. Defaults to <code class="inline">false</code>.</li></ul><h2 id="relative_to/3-examples" class="section-heading"><a href="#relative_to/3-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><h3 id="relative_to/3-with-relative-cwd" class="section-heading"><a href="#relative_to/3-with-relative-cwd" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">With relative <code class="inline">cwd</code></span></h3><p>If both paths are relative, a minimum path is computed:</p><pre><code class="makeup elixir" translate="no"><samp class="nc">Path</samp><samp class="o">.</samp><samp class="n">relative_to</samp><samp class="p" data-group-id="4148100249-1">(</samp><samp class="s">&quot;tmp/foo/bar&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;tmp&quot;</samp><samp class="p" data-group-id="4148100249-1">)</samp><samp class="w">      </samp><samp class="c1">#=&gt; &quot;foo/bar&quot;</samp><samp class="w">
</samp><samp class="nc">Path</samp><samp class="o">.</samp><samp class="n">relative_to</samp><samp class="p" data-group-id="4148100249-2">(</samp><samp class="s">&quot;tmp/foo/bar&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;tmp/foo&quot;</samp><samp class="p" data-group-id="4148100249-2">)</samp><samp class="w">  </samp><samp class="c1">#=&gt; &quot;bar&quot;</samp><samp class="w">
</samp><samp class="nc">Path</samp><samp class="o">.</samp><samp class="n">relative_to</samp><samp class="p" data-group-id="4148100249-3">(</samp><samp class="s">&quot;tmp/foo/bar&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;tmp/bat&quot;</samp><samp class="p" data-group-id="4148100249-3">)</samp><samp class="w">  </samp><samp class="c1">#=&gt; &quot;../foo/bar&quot;</samp></code></pre><p>If an absolute path is given with relative <code class="inline">cwd</code>, it is returned as:</p><pre><code class="makeup elixir" translate="no"><samp class="nc">Path</samp><samp class="o">.</samp><samp class="n">relative_to</samp><samp class="p" data-group-id="8793315613-1">(</samp><samp class="s">&quot;/usr/foo/bar&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;tmp/bat&quot;</samp><samp class="p" data-group-id="8793315613-1">)</samp><samp class="w">  </samp><samp class="c1">#=&gt; &quot;/usr/foo/bar&quot;</samp></code></pre><h3 id="relative_to/3-with-absolute-cwd" class="section-heading"><a href="#relative_to/3-with-absolute-cwd" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">With absolute <code class="inline">cwd</code></span></h3><p>If both paths are absolute, a relative is computed if possible,
without traversing up:</p><pre><code class="makeup elixir" translate="no"><samp class="nc">Path</samp><samp class="o">.</samp><samp class="n">relative_to</samp><samp class="p" data-group-id="8354969619-1">(</samp><samp class="s">&quot;/usr/local/foo&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;/usr/local&quot;</samp><samp class="p" data-group-id="8354969619-1">)</samp><samp class="w">      </samp><samp class="c1">#=&gt; &quot;foo&quot;</samp><samp class="w">
</samp><samp class="nc">Path</samp><samp class="o">.</samp><samp class="n">relative_to</samp><samp class="p" data-group-id="8354969619-2">(</samp><samp class="s">&quot;/usr/local/foo&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;/&quot;</samp><samp class="p" data-group-id="8354969619-2">)</samp><samp class="w">               </samp><samp class="c1">#=&gt; &quot;usr/local/foo&quot;</samp><samp class="w">
</samp><samp class="nc">Path</samp><samp class="o">.</samp><samp class="n">relative_to</samp><samp class="p" data-group-id="8354969619-3">(</samp><samp class="s">&quot;/usr/local/foo&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;/etc&quot;</samp><samp class="p" data-group-id="8354969619-3">)</samp><samp class="w">            </samp><samp class="c1">#=&gt; &quot;/usr/local/foo&quot;</samp><samp class="w">
</samp><samp class="nc">Path</samp><samp class="o">.</samp><samp class="n">relative_to</samp><samp class="p" data-group-id="8354969619-4">(</samp><samp class="s">&quot;/usr/local/foo&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;/usr/local/foo&quot;</samp><samp class="p" data-group-id="8354969619-4">)</samp><samp class="w">  </samp><samp class="c1">#=&gt; &quot;.&quot;</samp><samp class="w">
</samp><samp class="nc">Path</samp><samp class="o">.</samp><samp class="n">relative_to</samp><samp class="p" data-group-id="8354969619-5">(</samp><samp class="s">&quot;/usr/local/../foo&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;/usr/foo&quot;</samp><samp class="p" data-group-id="8354969619-5">)</samp><samp class="w">     </samp><samp class="c1">#=&gt; &quot;.&quot;</samp><samp class="w">
</samp><samp class="nc">Path</samp><samp class="o">.</samp><samp class="n">relative_to</samp><samp class="p" data-group-id="8354969619-6">(</samp><samp class="s">&quot;/usr/local/../foo/bar&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;/usr/foo&quot;</samp><samp class="p" data-group-id="8354969619-6">)</samp><samp class="w"> </samp><samp class="c1">#=&gt; &quot;bar&quot;</samp></code></pre><p>If <code class="inline">:force</code> is set to <code class="inline">true</code> paths are traversed up:</p><pre><code class="makeup elixir" translate="no"><samp class="nc">Path</samp><samp class="o">.</samp><samp class="n">relative_to</samp><samp class="p" data-group-id="6520020689-1">(</samp><samp class="s">&quot;/usr&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;/usr/local&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">force</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">true</samp><samp class="p" data-group-id="6520020689-1">)</samp><samp class="w">          </samp><samp class="c1">#=&gt; &quot;..&quot;</samp><samp class="w">
</samp><samp class="nc">Path</samp><samp class="o">.</samp><samp class="n">relative_to</samp><samp class="p" data-group-id="6520020689-2">(</samp><samp class="s">&quot;/usr/foo&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;/usr/local&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">force</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">true</samp><samp class="p" data-group-id="6520020689-2">)</samp><samp class="w">      </samp><samp class="c1">#=&gt; &quot;../foo&quot;</samp><samp class="w">
</samp><samp class="nc">Path</samp><samp class="o">.</samp><samp class="n">relative_to</samp><samp class="p" data-group-id="6520020689-3">(</samp><samp class="s">&quot;/usr/../foo/bar&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;/etc/foo&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">force</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">true</samp><samp class="p" data-group-id="6520020689-3">)</samp><samp class="w"> </samp><samp class="c1">#=&gt; &quot;../../foo/bar&quot;</samp></code></pre><p>If a relative path is given, it is assumed to be relative to the
given path, so the path is returned with &quot;.&quot; and &quot;..&quot; expanded:</p><pre><code class="makeup elixir" translate="no"><samp class="nc">Path</samp><samp class="o">.</samp><samp class="n">relative_to</samp><samp class="p" data-group-id="7057280725-1">(</samp><samp class="s">&quot;.&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;/usr/local&quot;</samp><samp class="p" data-group-id="7057280725-1">)</samp><samp class="w">          </samp><samp class="c1">#=&gt; &quot;.&quot;</samp><samp class="w">
</samp><samp class="nc">Path</samp><samp class="o">.</samp><samp class="n">relative_to</samp><samp class="p" data-group-id="7057280725-2">(</samp><samp class="s">&quot;foo&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;/usr/local&quot;</samp><samp class="p" data-group-id="7057280725-2">)</samp><samp class="w">        </samp><samp class="c1">#=&gt; &quot;foo&quot;</samp><samp class="w">
</samp><samp class="nc">Path</samp><samp class="o">.</samp><samp class="n">relative_to</samp><samp class="p" data-group-id="7057280725-3">(</samp><samp class="s">&quot;foo/../bar&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;/usr/local&quot;</samp><samp class="p" data-group-id="7057280725-3">)</samp><samp class="w"> </samp><samp class="c1">#=&gt; &quot;bar&quot;</samp><samp class="w">
</samp><samp class="nc">Path</samp><samp class="o">.</samp><samp class="n">relative_to</samp><samp class="p" data-group-id="7057280725-4">(</samp><samp class="s">&quot;foo/..&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;/usr/local&quot;</samp><samp class="p" data-group-id="7057280725-4">)</samp><samp class="w">     </samp><samp class="c1">#=&gt; &quot;.&quot;</samp><samp class="w">
</samp><samp class="nc">Path</samp><samp class="o">.</samp><samp class="n">relative_to</samp><samp class="p" data-group-id="7057280725-5">(</samp><samp class="s">&quot;../foo&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;/usr/local&quot;</samp><samp class="p" data-group-id="7057280725-5">)</samp><samp class="w">     </samp><samp class="c1">#=&gt; &quot;../foo&quot;</samp></code></pre>
  </section>
</section>
<section class="detail" id="relative_to_cwd/2">

    <span id="relative_to_cwd/1"></span>

  <div class="detail-header">
    <a href="#relative_to_cwd/2" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">relative_to_cwd(path, opts \\ [])</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/path.ex#L479" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> relative_to_cwd(
  <a href="#t:t/0">t</a>(),
  <a href="typespecs.xhtml#built-in-types">keyword</a>()
) :: <a href="typespecs.xhtml#built-in-types">binary</a>()</pre>

      </div>

<p>Convenience to get the path relative to the current working
directory.</p><p>If, for some reason, the current working directory
cannot be retrieved, this function returns the given <code class="inline">path</code>.</p><p>Check <a href="#relative_to/3"><code class="inline">relative_to/3</code></a> for the supported options.</p>
  </section>
</section>
<section class="detail" id="rootname/1">

  <div class="detail-header">
    <a href="#rootname/1" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">rootname(path)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/path.ex#L596" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> rootname(<a href="#t:t/0">t</a>()) :: <a href="typespecs.xhtml#built-in-types">binary</a>()</pre>

      </div>

<p>Returns the <code class="inline">path</code> with the <code class="inline">extension</code> stripped.</p><h2 id="rootname/1-examples" class="section-heading"><a href="#rootname/1-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Path</samp><samp class="o">.</samp><samp class="n">rootname</samp><samp class="p" data-group-id="3663404341-1">(</samp><samp class="s">&quot;/foo/bar&quot;</samp><samp class="p" data-group-id="3663404341-1">)</samp><samp class="w">
</samp><samp class="s">&quot;/foo/bar&quot;</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Path</samp><samp class="o">.</samp><samp class="n">rootname</samp><samp class="p" data-group-id="3663404341-2">(</samp><samp class="s">&quot;/foo/bar.ex&quot;</samp><samp class="p" data-group-id="3663404341-2">)</samp><samp class="w">
</samp><samp class="s">&quot;/foo/bar&quot;</samp></code></pre>
  </section>
</section>
<section class="detail" id="rootname/2">

  <div class="detail-header">
    <a href="#rootname/2" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">rootname(path, extension)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/path.ex#L616" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> rootname(<a href="#t:t/0">t</a>(), <a href="#t:t/0">t</a>()) :: <a href="typespecs.xhtml#built-in-types">binary</a>()</pre>

      </div>

<p>Returns the <code class="inline">path</code> with the <code class="inline">extension</code> stripped.</p><p>This function should be used to remove a specific extension which may
or may not be there.</p><h2 id="rootname/2-examples" class="section-heading"><a href="#rootname/2-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Path</samp><samp class="o">.</samp><samp class="n">rootname</samp><samp class="p" data-group-id="6806191442-1">(</samp><samp class="s">&quot;/foo/bar.erl&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;.erl&quot;</samp><samp class="p" data-group-id="6806191442-1">)</samp><samp class="w">
</samp><samp class="s">&quot;/foo/bar&quot;</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Path</samp><samp class="o">.</samp><samp class="n">rootname</samp><samp class="p" data-group-id="6806191442-2">(</samp><samp class="s">&quot;/foo/bar.erl&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;.ex&quot;</samp><samp class="p" data-group-id="6806191442-2">)</samp><samp class="w">
</samp><samp class="s">&quot;/foo/bar.erl&quot;</samp></code></pre>
  </section>
</section>
<section class="detail" id="safe_relative/2">

    <span id="safe_relative/1"></span>

  <div class="detail-header">
    <a href="#safe_relative/2" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">safe_relative(path, relative_to \\ File.cwd!())</h1>

        <span class="note">(since 1.14.0)</span>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/path.ex#L909" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> safe_relative(<a href="#t:t/0">t</a>(), <a href="#t:t/0">t</a>()) :: {:ok, <a href="typespecs.xhtml#built-in-types">binary</a>()} | :error</pre>

      </div>

<p>Returns a relative path that is protected from directory-traversal attacks.</p><p>The given relative path is sanitized by eliminating <code class="inline">..</code> and <code class="inline">.</code> components.</p><p>This function checks that, after expanding those components, the path is still &quot;safe&quot;.
Paths are considered unsafe if either of these is true:</p><ul><li><p>The path is not relative, such as <code class="inline">&quot;/foo/bar&quot;</code>.</p></li><li><p>A <code class="inline">..</code> component would make it so that the path would traverse up above
the root of <code class="inline">relative_to</code>.</p></li><li><p>A symbolic link in the path points to something above the root of <code class="inline">relative_to</code>.</p></li></ul><h2 id="safe_relative/2-examples" class="section-heading"><a href="#safe_relative/2-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Path</samp><samp class="o">.</samp><samp class="n">safe_relative</samp><samp class="p" data-group-id="8661407073-1">(</samp><samp class="s">&quot;foo&quot;</samp><samp class="p" data-group-id="8661407073-1">)</samp><samp class="w">
</samp><samp class="p" data-group-id="8661407073-2">{</samp><samp class="ss">:ok</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;foo&quot;</samp><samp class="p" data-group-id="8661407073-2">}</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Path</samp><samp class="o">.</samp><samp class="n">safe_relative</samp><samp class="p" data-group-id="8661407073-3">(</samp><samp class="s">&quot;deps/my_dep/app.beam&quot;</samp><samp class="p" data-group-id="8661407073-3">)</samp><samp class="w">
</samp><samp class="p" data-group-id="8661407073-4">{</samp><samp class="ss">:ok</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;deps/my_dep/app.beam&quot;</samp><samp class="p" data-group-id="8661407073-4">}</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Path</samp><samp class="o">.</samp><samp class="n">safe_relative</samp><samp class="p" data-group-id="8661407073-5">(</samp><samp class="s">&quot;deps/my_dep/./build/../app.beam&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="nc">File</samp><samp class="o">.</samp><samp class="n">cwd!</samp><samp class="p" data-group-id="8661407073-6">(</samp><samp class="p" data-group-id="8661407073-6">)</samp><samp class="p" data-group-id="8661407073-5">)</samp><samp class="w">
</samp><samp class="p" data-group-id="8661407073-7">{</samp><samp class="ss">:ok</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;deps/my_dep/app.beam&quot;</samp><samp class="p" data-group-id="8661407073-7">}</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Path</samp><samp class="o">.</samp><samp class="n">safe_relative</samp><samp class="p" data-group-id="8661407073-8">(</samp><samp class="s">&quot;my_dep/../..&quot;</samp><samp class="p" data-group-id="8661407073-8">)</samp><samp class="w">
</samp><samp class="ss">:error</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Path</samp><samp class="o">.</samp><samp class="n">safe_relative</samp><samp class="p" data-group-id="8661407073-9">(</samp><samp class="s">&quot;/usr/local&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="nc">File</samp><samp class="o">.</samp><samp class="n">cwd!</samp><samp class="p" data-group-id="8661407073-10">(</samp><samp class="p" data-group-id="8661407073-10">)</samp><samp class="p" data-group-id="8661407073-9">)</samp><samp class="w">
</samp><samp class="ss">:error</samp></code></pre>
  </section>
</section>
<section class="detail" id="safe_relative_to/2">

  <div class="detail-header">
    <a href="#safe_relative_to/2" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">safe_relative_to(path, cwd)</h1>

        <span class="note">(since 1.14.0)</span>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/path.ex#L870" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

    <div class="deprecated">
      This function is deprecated. Use safe_relative/2 instead.
    </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> safe_relative_to(<a href="#t:t/0">t</a>(), <a href="#t:t/0">t</a>()) :: {:ok, <a href="typespecs.xhtml#built-in-types">binary</a>()} | :error</pre>

      </div>

<p>Returns a relative path that is protected from directory-traversal attacks.</p><p>See <a href="#safe_relative/2"><code class="inline">safe_relative/2</code></a> for a non-deprecated version of this API.</p>
  </section>
</section>
<section class="detail" id="split/1">

  <div class="detail-header">
    <a href="#split/1" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">split(path)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/path.ex#L718" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> split(<a href="#t:t/0">t</a>()) :: [<a href="typespecs.xhtml#built-in-types">binary</a>()]</pre>

      </div>

<p>Splits the path into a list at the path separator.</p><p>If an empty string is given, returns an empty list.</p><p>On Windows, path is split on both <code class="inline">&quot;\&quot;</code> and <code class="inline">&quot;/&quot;</code> separators
and the driver letter, if there is one, is always returned
in lowercase.</p><h2 id="split/1-examples" class="section-heading"><a href="#split/1-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Path</samp><samp class="o">.</samp><samp class="n">split</samp><samp class="p" data-group-id="1227556181-1">(</samp><samp class="s">&quot;&quot;</samp><samp class="p" data-group-id="1227556181-1">)</samp><samp class="w">
</samp><samp class="p" data-group-id="1227556181-2">[</samp><samp class="p" data-group-id="1227556181-2">]</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Path</samp><samp class="o">.</samp><samp class="n">split</samp><samp class="p" data-group-id="1227556181-3">(</samp><samp class="s">&quot;foo&quot;</samp><samp class="p" data-group-id="1227556181-3">)</samp><samp class="w">
</samp><samp class="p" data-group-id="1227556181-4">[</samp><samp class="s">&quot;foo&quot;</samp><samp class="p" data-group-id="1227556181-4">]</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Path</samp><samp class="o">.</samp><samp class="n">split</samp><samp class="p" data-group-id="1227556181-5">(</samp><samp class="s">&quot;/foo/bar&quot;</samp><samp class="p" data-group-id="1227556181-5">)</samp><samp class="w">
</samp><samp class="p" data-group-id="1227556181-6">[</samp><samp class="s">&quot;/&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;foo&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;bar&quot;</samp><samp class="p" data-group-id="1227556181-6">]</samp></code></pre>
  </section>
</section>
<section class="detail" id="type/1">

  <div class="detail-header">
    <a href="#type/1" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">type(name)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/path.ex#L243" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> type(<a href="#t:t/0">t</a>()) :: :absolute | :relative | :volumerelative</pre>

      </div>

<p>Returns the path type.</p><h2 id="type/1-examples" class="section-heading"><a href="#type/1-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><h3 id="type/1-unix-like-operating-systems" class="section-heading"><a href="#type/1-unix-like-operating-systems" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Unix-like operating systems</span></h3><pre><code class="makeup elixir" translate="no"><samp class="nc">Path</samp><samp class="o">.</samp><samp class="n">type</samp><samp class="p" data-group-id="7806434590-1">(</samp><samp class="s">&quot;/&quot;</samp><samp class="p" data-group-id="7806434590-1">)</samp><samp class="w">                </samp><samp class="c1">#=&gt; :absolute</samp><samp class="w">
</samp><samp class="nc">Path</samp><samp class="o">.</samp><samp class="n">type</samp><samp class="p" data-group-id="7806434590-2">(</samp><samp class="s">&quot;/usr/local/bin&quot;</samp><samp class="p" data-group-id="7806434590-2">)</samp><samp class="w">   </samp><samp class="c1">#=&gt; :absolute</samp><samp class="w">
</samp><samp class="nc">Path</samp><samp class="o">.</samp><samp class="n">type</samp><samp class="p" data-group-id="7806434590-3">(</samp><samp class="s">&quot;usr/local/bin&quot;</samp><samp class="p" data-group-id="7806434590-3">)</samp><samp class="w">    </samp><samp class="c1">#=&gt; :relative</samp><samp class="w">
</samp><samp class="nc">Path</samp><samp class="o">.</samp><samp class="n">type</samp><samp class="p" data-group-id="7806434590-4">(</samp><samp class="s">&quot;../usr/local/bin&quot;</samp><samp class="p" data-group-id="7806434590-4">)</samp><samp class="w"> </samp><samp class="c1">#=&gt; :relative</samp><samp class="w">
</samp><samp class="nc">Path</samp><samp class="o">.</samp><samp class="n">type</samp><samp class="p" data-group-id="7806434590-5">(</samp><samp class="s">&quot;~/file&quot;</samp><samp class="p" data-group-id="7806434590-5">)</samp><samp class="w">           </samp><samp class="c1">#=&gt; :relative</samp></code></pre><h3 id="type/1-windows" class="section-heading"><a href="#type/1-windows" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Windows</span></h3><pre><code class="makeup elixir" translate="no"><samp class="nc">Path</samp><samp class="o">.</samp><samp class="n">type</samp><samp class="p" data-group-id="8058147524-1">(</samp><samp class="s">&quot;D:/usr/local/bin&quot;</samp><samp class="p" data-group-id="8058147524-1">)</samp><samp class="w"> </samp><samp class="c1">#=&gt; :absolute</samp><samp class="w">
</samp><samp class="nc">Path</samp><samp class="o">.</samp><samp class="n">type</samp><samp class="p" data-group-id="8058147524-2">(</samp><samp class="s">&quot;usr/local/bin&quot;</samp><samp class="p" data-group-id="8058147524-2">)</samp><samp class="w">    </samp><samp class="c1">#=&gt; :relative</samp><samp class="w">
</samp><samp class="nc">Path</samp><samp class="o">.</samp><samp class="n">type</samp><samp class="p" data-group-id="8058147524-3">(</samp><samp class="s">&quot;D:bar.ex&quot;</samp><samp class="p" data-group-id="8058147524-3">)</samp><samp class="w">         </samp><samp class="c1">#=&gt; :volumerelative</samp><samp class="w">
</samp><samp class="nc">Path</samp><samp class="o">.</samp><samp class="n">type</samp><samp class="p" data-group-id="8058147524-4">(</samp><samp class="s">&quot;/bar/foo.ex&quot;</samp><samp class="p" data-group-id="8058147524-4">)</samp><samp class="w">      </samp><samp class="c1">#=&gt; :volumerelative</samp></code></pre>
  </section>
</section>
<section class="detail" id="wildcard/2">

    <span id="wildcard/1"></span>

  <div class="detail-header">
    <a href="#wildcard/2" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">wildcard(glob, opts \\ [])</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/path.ex#L801" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> wildcard(
  <a href="#t:t/0">t</a>(),
  <a href="typespecs.xhtml#built-in-types">keyword</a>()
) :: [<a href="typespecs.xhtml#built-in-types">binary</a>()]</pre>

      </div>

<p>Traverses paths according to the given <code class="inline">glob</code> expression and returns a
list of matches.</p><p>The wildcard looks like an ordinary path, except that the following
&quot;wildcard characters&quot; are interpreted in a special way:</p><ul><li><p><code class="inline">?</code> - matches one character.</p></li><li><p><code class="inline">*</code> - matches any number of characters up to the end of the filename, the
next dot, or the next slash.</p></li><li><p><code class="inline">**</code> - two adjacent <code class="inline">*</code>'s used as a single pattern will match all
files and zero or more directories and subdirectories.</p></li><li><p><code class="inline">[char1,char2,...]</code> - matches any of the characters listed; two
characters separated by a hyphen will match a range of characters.
Do not add spaces before and after the comma as it would then match
paths containing the space character itself.</p></li><li><p><code class="inline">{item1,item2,...}</code> - matches one of the alternatives.
Do not add spaces before and after the comma as it would then match
paths containing the space character itself.</p></li></ul><p>Other characters represent themselves. Only paths that have
exactly the same character in the same position will match. Note
that matching is case-sensitive: <code class="inline">&quot;a&quot;</code> will not match <code class="inline">&quot;A&quot;</code>.</p><p>Directory separators must always be written as <code class="inline">/</code>, even on Windows.
You may call <a href="#expand/1"><code class="inline">Path.expand/1</code></a> to normalize the path before invoking
this function.</p><p>A character preceded by <code class="inline">\\</code> loses its special meaning.
Note that <code class="inline">\\</code> must be written as <code class="inline">\\\\</code> in a string literal.
For example, <code class="inline">&quot;\\\\?*&quot;</code> will match any filename starting with <code class="inline">?.</code>.</p><p>By default, the patterns <code class="inline">*</code> and <code class="inline">?</code> do not match files starting
with a dot <code class="inline">.</code>. See the <code class="inline">:match_dot</code> option in the &quot;Options&quot; section
below.</p><h2 id="wildcard/2-options" class="section-heading"><a href="#wildcard/2-options" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Options</span></h2><ul><li><code class="inline">:match_dot</code> - (boolean) if <code class="inline">false</code>, the special wildcard characters <code class="inline">*</code> and <code class="inline">?</code>
will not match files starting with a dot (<code class="inline">.</code>). If <code class="inline">true</code>, files starting with
a <code class="inline">.</code> will not be treated specially. Defaults to <code class="inline">false</code>.</li></ul><h2 id="wildcard/2-examples" class="section-heading"><a href="#wildcard/2-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><p>Imagine you have a directory called <code class="inline">projects</code> with three Elixir projects
inside of it: <code class="inline">elixir</code>, <code class="inline">ex_doc</code>, and <code class="inline">plug</code>. You can find all <code class="inline">.beam</code> files
inside the <code class="inline">ebin</code> directory of each project as follows:</p><pre><code class="makeup elixir" translate="no"><samp class="nc">Path</samp><samp class="o">.</samp><samp class="n">wildcard</samp><samp class="p" data-group-id="8249344897-1">(</samp><samp class="s">&quot;projects/*/ebin/**/*.beam&quot;</samp><samp class="p" data-group-id="8249344897-1">)</samp></code></pre><p>If you want to search for both <code class="inline">.beam</code> and <code class="inline">.app</code> files, you could do:</p><pre><code class="makeup elixir" translate="no"><samp class="nc">Path</samp><samp class="o">.</samp><samp class="n">wildcard</samp><samp class="p" data-group-id="5203683309-1">(</samp><samp class="s">&quot;projects/*/ebin/**/*.{beam,app}&quot;</samp><samp class="p" data-group-id="5203683309-1">)</samp></code></pre>
  </section>
</section>

        </div>
      </section>


  </body>
</html>
