<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"
      xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>StringIO - Elixir v1.18.4</title>
    <meta name="generator" content="ExDoc v0.38.2" />
    <link type="text/css" rel="stylesheet" href="dist/epub-elixir-FNUUKFP7.css" />
    <script src="dist/epub-4WIP524F.js"></script>

  </head>
  <body class="content-inner">

    <h1 id="content">
StringIO 
    </h1>


      <section id="moduledoc" class="docstring">
<p>Controls an IO device process that wraps a string.</p><p>A <a href="StringIO.xhtml"><code class="inline">StringIO</code></a> IO device can be passed as a &quot;device&quot; to
most of the functions in the <a href="IO.xhtml"><code class="inline">IO</code></a> module.</p><h2 id="module-examples">Examples</h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="p" data-group-id="0493747096-1">{</samp><samp class="ss">:ok</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">pid</samp><samp class="p" data-group-id="0493747096-1">}</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="nc">StringIO</samp><samp class="o">.</samp><samp class="n">open</samp><samp class="p" data-group-id="0493747096-2">(</samp><samp class="s">&quot;foo&quot;</samp><samp class="p" data-group-id="0493747096-2">)</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">IO</samp><samp class="o">.</samp><samp class="n">read</samp><samp class="p" data-group-id="0493747096-3">(</samp><samp class="n">pid</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">2</samp><samp class="p" data-group-id="0493747096-3">)</samp><samp class="w">
</samp><samp class="s">&quot;fo&quot;</samp></code></pre>
      </section>


      <section id="summary" class="details-list">
        <h1 class="section-heading">Summary</h1>
<div class="summary-functions summary">
  <h2>
    <a href="#functions">Functions</a>
  </h2>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#close/1" data-no-tooltip="" translate="no">close(pid)</a>

      </div>

        <div class="summary-synopsis"><p>Stops the IO device and returns the remaining input/output
buffers.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#contents/1" data-no-tooltip="" translate="no">contents(pid)</a>

      </div>

        <div class="summary-synopsis"><p>Returns the current input/output buffers for the given IO
device.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#flush/1" data-no-tooltip="" translate="no">flush(pid)</a>

      </div>

        <div class="summary-synopsis"><p>Flushes the output buffer and returns its current contents.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#open/2" data-no-tooltip="" translate="no">open(string, options_or_function \\ [])</a>

      </div>

        <div class="summary-synopsis"><p>Creates an IO device.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#open/3" data-no-tooltip="" translate="no">open(string, options, function)</a>

      </div>

        <div class="summary-synopsis"><p>Creates an IO device.</p></div>

    </div>

</div>

      </section>


      <section id="functions" class="details-list">
        <h1 class="section-heading">Functions</h1>

        <div class="functions-list">
<section class="detail" id="close/1">

  <div class="detail-header">
    <a href="#close/1" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">close(pid)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/string_io.ex#L171" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> close(<a href="typespecs.xhtml#basic-types">pid</a>()) :: {:ok, {<a href="typespecs.xhtml#built-in-types">binary</a>(), <a href="typespecs.xhtml#built-in-types">binary</a>()}}</pre>

      </div>

<p>Stops the IO device and returns the remaining input/output
buffers.</p><h2 id="close/1-examples" class="section-heading"><a href="#close/1-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="p" data-group-id="6870350808-1">{</samp><samp class="ss">:ok</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">pid</samp><samp class="p" data-group-id="6870350808-1">}</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="nc">StringIO</samp><samp class="o">.</samp><samp class="n">open</samp><samp class="p" data-group-id="6870350808-2">(</samp><samp class="s">&quot;in&quot;</samp><samp class="p" data-group-id="6870350808-2">)</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">IO</samp><samp class="o">.</samp><samp class="n">write</samp><samp class="p" data-group-id="6870350808-3">(</samp><samp class="n">pid</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;out&quot;</samp><samp class="p" data-group-id="6870350808-3">)</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">StringIO</samp><samp class="o">.</samp><samp class="n">close</samp><samp class="p" data-group-id="6870350808-4">(</samp><samp class="n">pid</samp><samp class="p" data-group-id="6870350808-4">)</samp><samp class="w">
</samp><samp class="p" data-group-id="6870350808-5">{</samp><samp class="ss">:ok</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="6870350808-6">{</samp><samp class="s">&quot;in&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;out&quot;</samp><samp class="p" data-group-id="6870350808-6">}</samp><samp class="p" data-group-id="6870350808-5">}</samp></code></pre>
  </section>
</section>
<section class="detail" id="contents/1">

  <div class="detail-header">
    <a href="#contents/1" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">contents(pid)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/string_io.ex#L136" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> contents(<a href="typespecs.xhtml#basic-types">pid</a>()) :: {<a href="typespecs.xhtml#built-in-types">binary</a>(), <a href="typespecs.xhtml#built-in-types">binary</a>()}</pre>

      </div>

<p>Returns the current input/output buffers for the given IO
device.</p><h2 id="contents/1-examples" class="section-heading"><a href="#contents/1-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="p" data-group-id="9686536757-1">{</samp><samp class="ss">:ok</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">pid</samp><samp class="p" data-group-id="9686536757-1">}</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="nc">StringIO</samp><samp class="o">.</samp><samp class="n">open</samp><samp class="p" data-group-id="9686536757-2">(</samp><samp class="s">&quot;in&quot;</samp><samp class="p" data-group-id="9686536757-2">)</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">IO</samp><samp class="o">.</samp><samp class="n">write</samp><samp class="p" data-group-id="9686536757-3">(</samp><samp class="n">pid</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;out&quot;</samp><samp class="p" data-group-id="9686536757-3">)</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">StringIO</samp><samp class="o">.</samp><samp class="n">contents</samp><samp class="p" data-group-id="9686536757-4">(</samp><samp class="n">pid</samp><samp class="p" data-group-id="9686536757-4">)</samp><samp class="w">
</samp><samp class="p" data-group-id="9686536757-5">{</samp><samp class="s">&quot;in&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;out&quot;</samp><samp class="p" data-group-id="9686536757-5">}</samp></code></pre>
  </section>
</section>
<section class="detail" id="flush/1">

  <div class="detail-header">
    <a href="#flush/1" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">flush(pid)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/string_io.ex#L154" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> flush(<a href="typespecs.xhtml#basic-types">pid</a>()) :: <a href="typespecs.xhtml#built-in-types">binary</a>()</pre>

      </div>

<p>Flushes the output buffer and returns its current contents.</p><h2 id="flush/1-examples" class="section-heading"><a href="#flush/1-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="p" data-group-id="4529099298-1">{</samp><samp class="ss">:ok</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">pid</samp><samp class="p" data-group-id="4529099298-1">}</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="nc">StringIO</samp><samp class="o">.</samp><samp class="n">open</samp><samp class="p" data-group-id="4529099298-2">(</samp><samp class="s">&quot;in&quot;</samp><samp class="p" data-group-id="4529099298-2">)</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">IO</samp><samp class="o">.</samp><samp class="n">write</samp><samp class="p" data-group-id="4529099298-3">(</samp><samp class="n">pid</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;out&quot;</samp><samp class="p" data-group-id="4529099298-3">)</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">StringIO</samp><samp class="o">.</samp><samp class="n">flush</samp><samp class="p" data-group-id="4529099298-4">(</samp><samp class="n">pid</samp><samp class="p" data-group-id="4529099298-4">)</samp><samp class="w">
</samp><samp class="s">&quot;out&quot;</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">StringIO</samp><samp class="o">.</samp><samp class="n">contents</samp><samp class="p" data-group-id="4529099298-5">(</samp><samp class="n">pid</samp><samp class="p" data-group-id="4529099298-5">)</samp><samp class="w">
</samp><samp class="p" data-group-id="4529099298-6">{</samp><samp class="s">&quot;in&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;&quot;</samp><samp class="p" data-group-id="4529099298-6">}</samp></code></pre>
  </section>
</section>
<section class="detail" id="open/2">

    <span id="open/1"></span>

  <div class="detail-header">
    <a href="#open/2" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">open(string, options_or_function \\ [])</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/string_io.ex#L112" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> open(
  <a href="typespecs.xhtml#built-in-types">binary</a>(),
  <a href="typespecs.xhtml#built-in-types">keyword</a>()
) :: {:ok, <a href="typespecs.xhtml#basic-types">pid</a>()}</pre>

          <pre translate="no"><span class="attribute">@spec</span> open(<a href="typespecs.xhtml#built-in-types">binary</a>(), (<a href="typespecs.xhtml#basic-types">pid</a>() -&gt; res)) :: {:ok, res} when res: var</pre>

      </div>

<p>Creates an IO device.</p><p><code class="inline">string</code> will be the initial input of the newly created
device.</p><p><code class="inline">options_or_function</code> can be a keyword list of options or
a function.</p><p>If options are provided, the result will be <code class="inline">{:ok, pid}</code>, returning the
IO device created. The option <code class="inline">:capture_prompt</code>, when set to <code class="inline">true</code>, causes
prompts (which are specified as arguments to <code class="inline">IO.get*</code> functions) to be
included in the device's output.</p><p>If a function is provided, the device will be created and sent to the
function. When the function returns, the device will be closed. The final
result will be a tuple with <code class="inline">:ok</code> and the result of the function.</p><h2 id="open/2-examples" class="section-heading"><a href="#open/2-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="p" data-group-id="2686815528-1">{</samp><samp class="ss">:ok</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">pid</samp><samp class="p" data-group-id="2686815528-1">}</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="nc">StringIO</samp><samp class="o">.</samp><samp class="n">open</samp><samp class="p" data-group-id="2686815528-2">(</samp><samp class="s">&quot;foo&quot;</samp><samp class="p" data-group-id="2686815528-2">)</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">IO</samp><samp class="o">.</samp><samp class="n">gets</samp><samp class="p" data-group-id="2686815528-3">(</samp><samp class="n">pid</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;&gt;&quot;</samp><samp class="p" data-group-id="2686815528-3">)</samp><samp class="w">
</samp><samp class="s">&quot;foo&quot;</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">StringIO</samp><samp class="o">.</samp><samp class="n">contents</samp><samp class="p" data-group-id="2686815528-4">(</samp><samp class="n">pid</samp><samp class="p" data-group-id="2686815528-4">)</samp><samp class="w">
</samp><samp class="p" data-group-id="2686815528-5">{</samp><samp class="s">&quot;&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;&quot;</samp><samp class="p" data-group-id="2686815528-5">}</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="p" data-group-id="2686815528-6">{</samp><samp class="ss">:ok</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">pid</samp><samp class="p" data-group-id="2686815528-6">}</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="nc">StringIO</samp><samp class="o">.</samp><samp class="n">open</samp><samp class="p" data-group-id="2686815528-7">(</samp><samp class="s">&quot;foo&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">capture_prompt</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">true</samp><samp class="p" data-group-id="2686815528-7">)</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">IO</samp><samp class="o">.</samp><samp class="n">gets</samp><samp class="p" data-group-id="2686815528-8">(</samp><samp class="n">pid</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;&gt;&quot;</samp><samp class="p" data-group-id="2686815528-8">)</samp><samp class="w">
</samp><samp class="s">&quot;foo&quot;</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">StringIO</samp><samp class="o">.</samp><samp class="n">contents</samp><samp class="p" data-group-id="2686815528-9">(</samp><samp class="n">pid</samp><samp class="p" data-group-id="2686815528-9">)</samp><samp class="w">
</samp><samp class="p" data-group-id="2686815528-10">{</samp><samp class="s">&quot;&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;&gt;&quot;</samp><samp class="p" data-group-id="2686815528-10">}</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">StringIO</samp><samp class="o">.</samp><samp class="n">open</samp><samp class="p" data-group-id="2686815528-11">(</samp><samp class="s">&quot;foo&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="k" data-group-id="2686815528-12">fn</samp><samp class="w"> </samp><samp class="n">pid</samp><samp class="w"> </samp><samp class="o">-&gt;</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="w">  </samp><samp class="n">input</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="nc">IO</samp><samp class="o">.</samp><samp class="n">gets</samp><samp class="p" data-group-id="2686815528-13">(</samp><samp class="n">pid</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;&gt;&quot;</samp><samp class="p" data-group-id="2686815528-13">)</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="w">  </samp><samp class="nc">IO</samp><samp class="o">.</samp><samp class="n">write</samp><samp class="p" data-group-id="2686815528-14">(</samp><samp class="n">pid</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;The input was </samp><samp class="si" data-group-id="2686815528-15">#{</samp><samp class="n">input</samp><samp class="si" data-group-id="2686815528-15">}</samp><samp class="s">&quot;</samp><samp class="p" data-group-id="2686815528-14">)</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="w">  </samp><samp class="nc">StringIO</samp><samp class="o">.</samp><samp class="n">contents</samp><samp class="p" data-group-id="2686815528-16">(</samp><samp class="n">pid</samp><samp class="p" data-group-id="2686815528-16">)</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="k" data-group-id="2686815528-12">end</samp><samp class="p" data-group-id="2686815528-11">)</samp><samp class="w">
</samp><samp class="p" data-group-id="2686815528-17">{</samp><samp class="ss">:ok</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="2686815528-18">{</samp><samp class="s">&quot;&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;The input was foo&quot;</samp><samp class="p" data-group-id="2686815528-18">}</samp><samp class="p" data-group-id="2686815528-17">}</samp></code></pre>
  </section>
</section>
<section class="detail" id="open/3">

  <div class="detail-header">
    <a href="#open/3" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">open(string, options, function)</h1>

        <span class="note">(since 1.7.0)</span>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/string_io.ex#L59" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> open(<a href="typespecs.xhtml#built-in-types">binary</a>(), <a href="typespecs.xhtml#built-in-types">keyword</a>(), (<a href="typespecs.xhtml#basic-types">pid</a>() -&gt; res)) :: {:ok, res} when res: var</pre>

      </div>

<p>Creates an IO device.</p><p><code class="inline">string</code> will be the initial input of the newly created
device.</p><p>The device will be created and sent to the function given.
When the function returns, the device will be closed. The final
result will be a tuple with <code class="inline">:ok</code> and the result of the function.</p><h2 id="open/3-options" class="section-heading"><a href="#open/3-options" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Options</span></h2><ul><li><p><code class="inline">:capture_prompt</code> - if set to <code class="inline">true</code>, prompts (specified as
arguments to <code class="inline">IO.get*</code> functions) are captured in the output.
Defaults to <code class="inline">false</code>.</p></li><li><p><code class="inline">:encoding</code> (since v1.10.0) - encoding of the IO device. Allowed
values are <code class="inline">:unicode</code> (default) and <code class="inline">:latin1</code>.</p></li></ul><h2 id="open/3-examples" class="section-heading"><a href="#open/3-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">StringIO</samp><samp class="o">.</samp><samp class="n">open</samp><samp class="p" data-group-id="9683434975-1">(</samp><samp class="s">&quot;foo&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="9683434975-2">[</samp><samp class="p" data-group-id="9683434975-2">]</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="k" data-group-id="9683434975-3">fn</samp><samp class="w"> </samp><samp class="n">pid</samp><samp class="w"> </samp><samp class="o">-&gt;</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="w">  </samp><samp class="n">input</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="nc">IO</samp><samp class="o">.</samp><samp class="n">gets</samp><samp class="p" data-group-id="9683434975-4">(</samp><samp class="n">pid</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;&gt;&quot;</samp><samp class="p" data-group-id="9683434975-4">)</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="w">  </samp><samp class="nc">IO</samp><samp class="o">.</samp><samp class="n">write</samp><samp class="p" data-group-id="9683434975-5">(</samp><samp class="n">pid</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;The input was </samp><samp class="si" data-group-id="9683434975-6">#{</samp><samp class="n">input</samp><samp class="si" data-group-id="9683434975-6">}</samp><samp class="s">&quot;</samp><samp class="p" data-group-id="9683434975-5">)</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="w">  </samp><samp class="nc">StringIO</samp><samp class="o">.</samp><samp class="n">contents</samp><samp class="p" data-group-id="9683434975-7">(</samp><samp class="n">pid</samp><samp class="p" data-group-id="9683434975-7">)</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="k" data-group-id="9683434975-3">end</samp><samp class="p" data-group-id="9683434975-1">)</samp><samp class="w">
</samp><samp class="p" data-group-id="9683434975-8">{</samp><samp class="ss">:ok</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="9683434975-9">{</samp><samp class="s">&quot;&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;The input was foo&quot;</samp><samp class="p" data-group-id="9683434975-9">}</samp><samp class="p" data-group-id="9683434975-8">}</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">StringIO</samp><samp class="o">.</samp><samp class="n">open</samp><samp class="p" data-group-id="9683434975-10">(</samp><samp class="s">&quot;foo&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="9683434975-11">[</samp><samp class="ss">capture_prompt</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">true</samp><samp class="p" data-group-id="9683434975-11">]</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="k" data-group-id="9683434975-12">fn</samp><samp class="w"> </samp><samp class="n">pid</samp><samp class="w"> </samp><samp class="o">-&gt;</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="w">  </samp><samp class="n">input</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="nc">IO</samp><samp class="o">.</samp><samp class="n">gets</samp><samp class="p" data-group-id="9683434975-13">(</samp><samp class="n">pid</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;&gt;&quot;</samp><samp class="p" data-group-id="9683434975-13">)</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="w">  </samp><samp class="nc">IO</samp><samp class="o">.</samp><samp class="n">write</samp><samp class="p" data-group-id="9683434975-14">(</samp><samp class="n">pid</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;The input was </samp><samp class="si" data-group-id="9683434975-15">#{</samp><samp class="n">input</samp><samp class="si" data-group-id="9683434975-15">}</samp><samp class="s">&quot;</samp><samp class="p" data-group-id="9683434975-14">)</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="w">  </samp><samp class="nc">StringIO</samp><samp class="o">.</samp><samp class="n">contents</samp><samp class="p" data-group-id="9683434975-16">(</samp><samp class="n">pid</samp><samp class="p" data-group-id="9683434975-16">)</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="k" data-group-id="9683434975-12">end</samp><samp class="p" data-group-id="9683434975-10">)</samp><samp class="w">
</samp><samp class="p" data-group-id="9683434975-17">{</samp><samp class="ss">:ok</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="9683434975-18">{</samp><samp class="s">&quot;&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;&gt;The input was foo&quot;</samp><samp class="p" data-group-id="9683434975-18">}</samp><samp class="p" data-group-id="9683434975-17">}</samp></code></pre>
  </section>
</section>

        </div>
      </section>


  </body>
</html>
