<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"
      xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>Function - Elixir v1.18.4</title>
    <meta name="generator" content="ExDoc v0.38.2" />
    <link type="text/css" rel="stylesheet" href="dist/epub-elixir-FNUUKFP7.css" />
    <script src="dist/epub-4WIP524F.js"></script>

  </head>
  <body class="content-inner">

    <h1 id="content">
Function 
    </h1>


      <section id="moduledoc" class="docstring">
<p>A set of functions for working with functions.</p><p>Anonymous functions are typically created by using <code class="inline">fn</code>:</p><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="n">add</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="k" data-group-id="1363190156-1">fn</samp><samp class="w"> </samp><samp class="n">a</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">b</samp><samp class="w"> </samp><samp class="o">-&gt;</samp><samp class="w"> </samp><samp class="n">a</samp><samp class="w"> </samp><samp class="o">+</samp><samp class="w"> </samp><samp class="n">b</samp><samp class="w"> </samp><samp class="k" data-group-id="1363190156-1">end</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="n">add</samp><samp class="o">.</samp><samp class="p" data-group-id="1363190156-2">(</samp><samp class="mi">1</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">2</samp><samp class="p" data-group-id="1363190156-2">)</samp><samp class="w">
</samp><samp class="mi">3</samp></code></pre><p>Anonymous functions can also have multiple clauses. All clauses
should expect the same number of arguments:</p><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="n">negate</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="k" data-group-id="4247289314-1">fn</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="w">  </samp><samp class="no">true</samp><samp class="w"> </samp><samp class="o">-&gt;</samp><samp class="w"> </samp><samp class="no">false</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="w">  </samp><samp class="no">false</samp><samp class="w"> </samp><samp class="o">-&gt;</samp><samp class="w"> </samp><samp class="no">true</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="k" data-group-id="4247289314-1">end</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="n">negate</samp><samp class="o">.</samp><samp class="p" data-group-id="4247289314-2">(</samp><samp class="no">false</samp><samp class="p" data-group-id="4247289314-2">)</samp><samp class="w">
</samp><samp class="no">true</samp></code></pre><h2 id="module-the-capture-operator">The capture operator</h2><p>It is also possible to capture public module functions and pass them
around as if they were anonymous functions by using the capture
operator <a href="Kernel.SpecialForms.xhtml#&/1"><code class="inline">&amp;/1</code></a>:</p><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="n">add</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="o">&amp;</samp><samp class="nc">Kernel</samp><samp class="o">.</samp><samp class="o">+</samp><samp class="o">/</samp><samp class="mi">2</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="n">add</samp><samp class="o">.</samp><samp class="p" data-group-id="9945489526-1">(</samp><samp class="mi">1</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">2</samp><samp class="p" data-group-id="9945489526-1">)</samp><samp class="w">
</samp><samp class="mi">3</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="n">length</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="o">&amp;</samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">length</samp><samp class="o">/</samp><samp class="mi">1</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="n">length</samp><samp class="o">.</samp><samp class="p" data-group-id="9945489526-2">(</samp><samp class="s">&quot;hello&quot;</samp><samp class="p" data-group-id="9945489526-2">)</samp><samp class="w">
</samp><samp class="mi">5</samp></code></pre><p>To capture a definition within the current module, you can skip the
module prefix, such as <code class="inline">&amp;my_fun/2</code>. In those cases, the captured
function can be public (<code class="inline">def</code>) or private (<code class="inline">defp</code>).</p><p>The capture operator can also be used to create anonymous functions
that expect at least one argument:</p><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="n">add</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="o">&amp;</samp><samp class="p" data-group-id="1565568141-1">(</samp><samp class="ni">&amp;1</samp><samp class="w"> </samp><samp class="o">+</samp><samp class="w"> </samp><samp class="ni">&amp;2</samp><samp class="p" data-group-id="1565568141-1">)</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="n">add</samp><samp class="o">.</samp><samp class="p" data-group-id="1565568141-2">(</samp><samp class="mi">1</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">2</samp><samp class="p" data-group-id="1565568141-2">)</samp><samp class="w">
</samp><samp class="mi">3</samp></code></pre><p>In such cases, using the capture operator is no different than using <code class="inline">fn</code>.</p><h2 id="module-internal-and-external-functions">Internal and external functions</h2><p>We say that functions that point to definitions residing in modules, such
as <code class="inline">&amp;String.length/1</code>, are <strong>external</strong> functions. All other functions are
<strong>local</strong> and they are always bound to the file or module that defined them.</p><p>Besides the functions in this module to work with functions, <a href="Kernel.xhtml"><code class="inline">Kernel</code></a> also
has an <a href="Kernel.xhtml#apply/2"><code class="inline">apply/2</code></a> function that invokes a function with a dynamic number of
arguments, as well as <a href="Kernel.xhtml#is_function/1"><code class="inline">is_function/1</code></a> and <a href="Kernel.xhtml#is_function/2"><code class="inline">is_function/2</code></a>, to check
respectively if a given value is a function or a function of a given arity.</p>
      </section>


      <section id="summary" class="details-list">
        <h1 class="section-heading">Summary</h1>
<div class="summary-types summary">
  <h2>
    <a href="#types">Types</a>
  </h2>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#t:information/0" data-no-tooltip="" translate="no">information()</a>

      </div>

    </div>

</div>
<div class="summary-functions summary">
  <h2>
    <a href="#functions">Functions</a>
  </h2>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#capture/3" data-no-tooltip="" translate="no">capture(module, function_name, arity)</a>

      </div>

        <div class="summary-synopsis"><p>Captures the given function.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#identity/1" data-no-tooltip="" translate="no">identity(value)</a>

      </div>

        <div class="summary-synopsis"><p>Returns its input <code class="inline">value</code>. This function can be passed as an anonymous function
to transformation functions.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#info/1" data-no-tooltip="" translate="no">info(fun)</a>

      </div>

        <div class="summary-synopsis"><p>Returns a keyword list with information about a function.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#info/2" data-no-tooltip="" translate="no">info(fun, item)</a>

      </div>

        <div class="summary-synopsis"><p>Returns a specific information about the function.</p></div>

    </div>

</div>

      </section>


      <section id="types" class="details-list">
        <h1 class="section-heading">Types</h1>

        <div class="types-list">
<section class="detail" id="t:information/0">

  <div class="detail-header">
    <a href="#t:information/0" class="detail-link" data-no-tooltip="" aria-label="Link to this type">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">information()</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/function.ex#L60" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@type</span> information() ::
  :arity
  | :env
  | :index
  | :module
  | :name
  | :new_index
  | :new_uniq
  | :pid
  | :type
  | :uniq</pre>

      </div>


  </section>
</section>

        </div>
      </section>

      <section id="functions" class="details-list">
        <h1 class="section-heading">Functions</h1>

        <div class="functions-list">
<section class="detail" id="capture/3">

  <div class="detail-header">
    <a href="#capture/3" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">capture(module, function_name, arity)</h1>

        <span class="note">(since 1.7.0)</span>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/function.ex#L85" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> capture(<a href="typespecs.xhtml#built-in-types">module</a>(), <a href="typespecs.xhtml#basic-types">atom</a>(), <a href="typespecs.xhtml#built-in-types">arity</a>()) :: <a href="typespecs.xhtml#built-in-types">fun</a>()</pre>

      </div>

<p>Captures the given function.</p><p>Inlined by the compiler.</p><h2 id="capture/3-examples" class="section-heading"><a href="#capture/3-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Function</samp><samp class="o">.</samp><samp class="n">capture</samp><samp class="p" data-group-id="5340114554-1">(</samp><samp class="nc">String</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:length</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">1</samp><samp class="p" data-group-id="5340114554-1">)</samp><samp class="w">
</samp><samp class="o">&amp;</samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">length</samp><samp class="o">/</samp><samp class="mi">1</samp></code></pre>
  </section>
</section>
<section class="detail" id="identity/1">

  <div class="detail-header">
    <a href="#identity/1" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">identity(value)</h1>

        <span class="note">(since 1.10.0)</span>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/function.ex#L207" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> identity(value) :: value when value: var</pre>

      </div>

<p>Returns its input <code class="inline">value</code>. This function can be passed as an anonymous function
to transformation functions.</p><h2 id="identity/1-examples" class="section-heading"><a href="#identity/1-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Function</samp><samp class="o">.</samp><samp class="n">identity</samp><samp class="p" data-group-id="8201101736-1">(</samp><samp class="s">&quot;Hello world!&quot;</samp><samp class="p" data-group-id="8201101736-1">)</samp><samp class="w">
</samp><samp class="s">&quot;Hello world!&quot;</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="s">~c&quot;abcdaabccc&quot;</samp><samp class="w"> </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Enum</samp><samp class="o">.</samp><samp class="n">sort</samp><samp class="p" data-group-id="8201101736-2">(</samp><samp class="p" data-group-id="8201101736-2">)</samp><samp class="w"> </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Enum</samp><samp class="o">.</samp><samp class="n">chunk_by</samp><samp class="p" data-group-id="8201101736-3">(</samp><samp class="o">&amp;</samp><samp class="nc">Function</samp><samp class="o">.</samp><samp class="n">identity</samp><samp class="o">/</samp><samp class="mi">1</samp><samp class="p" data-group-id="8201101736-3">)</samp><samp class="w">
</samp><samp class="p" data-group-id="8201101736-4">[</samp><samp class="s">~c&quot;aaa&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">~c&quot;bb&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">~c&quot;cccc&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">~c&quot;d&quot;</samp><samp class="p" data-group-id="8201101736-4">]</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Enum</samp><samp class="o">.</samp><samp class="n">group_by</samp><samp class="p" data-group-id="8201101736-5">(</samp><samp class="s">~c&quot;abracadabra&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="o">&amp;</samp><samp class="nc">Function</samp><samp class="o">.</samp><samp class="n">identity</samp><samp class="o">/</samp><samp class="mi">1</samp><samp class="p" data-group-id="8201101736-5">)</samp><samp class="w">
</samp><samp class="p" data-group-id="8201101736-6">%{</samp><samp class="mi">97</samp><samp class="w"> </samp><samp class="p">=&gt;</samp><samp class="w"> </samp><samp class="s">~c&quot;aaaaa&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">98</samp><samp class="w"> </samp><samp class="p">=&gt;</samp><samp class="w"> </samp><samp class="s">~c&quot;bb&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">99</samp><samp class="w"> </samp><samp class="p">=&gt;</samp><samp class="w"> </samp><samp class="s">~c&quot;c&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">100</samp><samp class="w"> </samp><samp class="p">=&gt;</samp><samp class="w"> </samp><samp class="s">~c&quot;d&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">114</samp><samp class="w"> </samp><samp class="p">=&gt;</samp><samp class="w"> </samp><samp class="s">~c&quot;rr&quot;</samp><samp class="p" data-group-id="8201101736-6">}</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Enum</samp><samp class="o">.</samp><samp class="n">map</samp><samp class="p" data-group-id="8201101736-7">(</samp><samp class="p" data-group-id="8201101736-8">[</samp><samp class="mi">1</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">2</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">3</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">4</samp><samp class="p" data-group-id="8201101736-8">]</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="o">&amp;</samp><samp class="nc">Function</samp><samp class="o">.</samp><samp class="n">identity</samp><samp class="o">/</samp><samp class="mi">1</samp><samp class="p" data-group-id="8201101736-7">)</samp><samp class="w">
</samp><samp class="p" data-group-id="8201101736-9">[</samp><samp class="mi">1</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">2</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">3</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">4</samp><samp class="p" data-group-id="8201101736-9">]</samp></code></pre>
  </section>
</section>
<section class="detail" id="info/1">

  <div class="detail-header">
    <a href="#info/1" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">info(fun)</h1>

        <span class="note">(since 1.7.0)</span>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/function.ex#L146" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> info(<a href="typespecs.xhtml#built-in-types">fun</a>()) :: [{<a href="#t:information/0">information</a>(), <a href="typespecs.xhtml#built-in-types">term</a>()}]</pre>

      </div>

<p>Returns a keyword list with information about a function.</p><p>The returned keys (with the corresponding possible values) for
all types of functions (local and external) are the following:</p><ul><li><p><code class="inline">:type</code> - <code class="inline">:local</code> (for anonymous functions) or <code class="inline">:external</code> (for
named functions).</p></li><li><p><code class="inline">:module</code> - an atom which is the module where the function is defined when
anonymous or the module which the function refers to when it's a named function.</p></li><li><p><code class="inline">:arity</code> - (integer) the number of arguments the function is to be called with.</p></li><li><p><code class="inline">:name</code> - (atom) the name of the function.</p></li><li><p><code class="inline">:env</code> - a list of the environment or free variables. For named
functions, the returned list is always empty.</p></li></ul><p>When <code class="inline">fun</code> is an anonymous function (that is, the type is <code class="inline">:local</code>), the following
additional keys are returned:</p><ul><li><p><code class="inline">:pid</code> - PID of the process that originally created the function.</p></li><li><p><code class="inline">:index</code> - (integer) an index into the module function table.</p></li><li><p><code class="inline">:new_index</code> - (integer) an index into the module function table.</p></li><li><p><code class="inline">:new_uniq</code> - (binary) a unique value for this function. It's
calculated from the compiled code for the entire module.</p></li><li><p><code class="inline">:uniq</code> - (integer) a unique value for this function. This integer is
calculated from the compiled code for the entire module.</p></li></ul><p><strong>Note</strong>: this function must be used only for debugging purposes.</p><p>Inlined by the compiler.</p><h2 id="info/1-examples" class="section-heading"><a href="#info/1-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="n">fun</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="k" data-group-id="1768619889-1">fn</samp><samp class="w"> </samp><samp class="n">x</samp><samp class="w"> </samp><samp class="o">-&gt;</samp><samp class="w"> </samp><samp class="n">x</samp><samp class="w"> </samp><samp class="k" data-group-id="1768619889-1">end</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="n">info</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="nc">Function</samp><samp class="o">.</samp><samp class="n">info</samp><samp class="p" data-group-id="1768619889-2">(</samp><samp class="n">fun</samp><samp class="p" data-group-id="1768619889-2">)</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Keyword</samp><samp class="o">.</samp><samp class="n">get</samp><samp class="p" data-group-id="1768619889-3">(</samp><samp class="n">info</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:arity</samp><samp class="p" data-group-id="1768619889-3">)</samp><samp class="w">
</samp><samp class="mi">1</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Keyword</samp><samp class="o">.</samp><samp class="n">get</samp><samp class="p" data-group-id="1768619889-4">(</samp><samp class="n">info</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:type</samp><samp class="p" data-group-id="1768619889-4">)</samp><samp class="w">
</samp><samp class="ss">:local</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="n">fun</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="o">&amp;</samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">length</samp><samp class="o">/</samp><samp class="mi">1</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="n">info</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="nc">Function</samp><samp class="o">.</samp><samp class="n">info</samp><samp class="p" data-group-id="1768619889-5">(</samp><samp class="n">fun</samp><samp class="p" data-group-id="1768619889-5">)</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Keyword</samp><samp class="o">.</samp><samp class="n">get</samp><samp class="p" data-group-id="1768619889-6">(</samp><samp class="n">info</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:type</samp><samp class="p" data-group-id="1768619889-6">)</samp><samp class="w">
</samp><samp class="ss">:external</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Keyword</samp><samp class="o">.</samp><samp class="n">get</samp><samp class="p" data-group-id="1768619889-7">(</samp><samp class="n">info</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:name</samp><samp class="p" data-group-id="1768619889-7">)</samp><samp class="w">
</samp><samp class="ss">:length</samp></code></pre>
  </section>
</section>
<section class="detail" id="info/2">

  <div class="detail-header">
    <a href="#info/2" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">info(fun, item)</h1>

        <span class="note">(since 1.7.0)</span>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/function.ex#L184" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> info(<a href="typespecs.xhtml#built-in-types">fun</a>(), item) :: {item, <a href="typespecs.xhtml#built-in-types">term</a>()} when item: <a href="#t:information/0">information</a>()</pre>

      </div>

<p>Returns a specific information about the function.</p><p>The returned information is a two-element tuple in the shape of
<code class="inline">{info, value}</code>.</p><p>For any function, the information asked for can be any of the atoms
<code class="inline">:module</code>, <code class="inline">:name</code>, <code class="inline">:arity</code>, <code class="inline">:env</code>, or <code class="inline">:type</code>.</p><p>For anonymous functions, there is also information about any of the
atoms <code class="inline">:index</code>, <code class="inline">:new_index</code>, <code class="inline">:new_uniq</code>, <code class="inline">:uniq</code>, and <code class="inline">:pid</code>.
For a named function, the value of any of these items is always the
atom <code class="inline">:undefined</code>.</p><p>For more information on each of the possible returned values, see
<a href="#info/1"><code class="inline">info/1</code></a>.</p><p>Inlined by the compiler.</p><h2 id="info/2-examples" class="section-heading"><a href="#info/2-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="n">f</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="k" data-group-id="1654403424-1">fn</samp><samp class="w"> </samp><samp class="n">x</samp><samp class="w"> </samp><samp class="o">-&gt;</samp><samp class="w"> </samp><samp class="n">x</samp><samp class="w"> </samp><samp class="k" data-group-id="1654403424-1">end</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Function</samp><samp class="o">.</samp><samp class="n">info</samp><samp class="p" data-group-id="1654403424-2">(</samp><samp class="n">f</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:arity</samp><samp class="p" data-group-id="1654403424-2">)</samp><samp class="w">
</samp><samp class="p" data-group-id="1654403424-3">{</samp><samp class="ss">:arity</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">1</samp><samp class="p" data-group-id="1654403424-3">}</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Function</samp><samp class="o">.</samp><samp class="n">info</samp><samp class="p" data-group-id="1654403424-4">(</samp><samp class="n">f</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:type</samp><samp class="p" data-group-id="1654403424-4">)</samp><samp class="w">
</samp><samp class="p" data-group-id="1654403424-5">{</samp><samp class="ss">:type</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:local</samp><samp class="p" data-group-id="1654403424-5">}</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="n">fun</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="o">&amp;</samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">length</samp><samp class="o">/</samp><samp class="mi">1</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Function</samp><samp class="o">.</samp><samp class="n">info</samp><samp class="p" data-group-id="1654403424-6">(</samp><samp class="n">fun</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:name</samp><samp class="p" data-group-id="1654403424-6">)</samp><samp class="w">
</samp><samp class="p" data-group-id="1654403424-7">{</samp><samp class="ss">:name</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:length</samp><samp class="p" data-group-id="1654403424-7">}</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Function</samp><samp class="o">.</samp><samp class="n">info</samp><samp class="p" data-group-id="1654403424-8">(</samp><samp class="n">fun</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:pid</samp><samp class="p" data-group-id="1654403424-8">)</samp><samp class="w">
</samp><samp class="p" data-group-id="1654403424-9">{</samp><samp class="ss">:pid</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:undefined</samp><samp class="p" data-group-id="1654403424-9">}</samp></code></pre>
  </section>
</section>

        </div>
      </section>


  </body>
</html>
