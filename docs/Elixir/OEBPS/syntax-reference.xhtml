<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"
      xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>Syntax reference - Elixir v1.18.4</title>
    <meta name="generator" content="ExDoc v0.38.2" />
    <link type="text/css" rel="stylesheet" href="dist/epub-elixir-FNUUKFP7.css" />
    <script src="dist/epub-4WIP524F.js"></script>

  </head>
  <body class="content-inner">

    <h1 id="content">Syntax reference</h1>
<p>Elixir syntax was designed to have a straightforward conversion to an abstract syntax tree (AST). This means the Elixir syntax is mostly uniform with a handful of &quot;syntax sugar&quot; constructs to reduce the noise in common Elixir idioms.</p><p>This document covers all of Elixir syntax constructs as a reference and then discuss their exact AST representation.</p><h2 id="reserved-words">Reserved words</h2><p>These are the reserved words in the Elixir language. They are detailed throughout this guide but summed up here for convenience:</p><ul><li><code class="inline">true</code>, <code class="inline">false</code>, <code class="inline">nil</code> - used as atoms</li><li><code class="inline">when</code>, <code class="inline">and</code>, <code class="inline">or</code>, <code class="inline">not</code>, <code class="inline">in</code> - used as operators</li><li><code class="inline">fn</code> - used for anonymous function definitions</li><li><code class="inline">do</code>, <code class="inline">end</code>, <code class="inline">catch</code>, <code class="inline">rescue</code>, <code class="inline">after</code>, <code class="inline">else</code> - used in do-end blocks</li></ul><h2 id="data-types">Data types</h2><h3 id="numbers">Numbers</h3><p>Integers (<code class="inline">1234</code>) and floats (<code class="inline">123.4</code>) in Elixir are represented as a sequence of digits that may be separated by underscore for readability purposes, such as <code class="inline">1_000_000</code>. Integers never contain a dot (<code class="inline">.</code>) in their representation. Floats contain a dot and at least one other digit after the dot. Floats also support the scientific notation, such as <code class="inline">123.4e10</code> or <code class="inline">123.4E10</code>.</p><h3 id="atoms">Atoms</h3><p>Unquoted atoms start with a colon (<code class="inline">:</code>) which must be immediately followed by a Unicode letter or an underscore. The atom may continue using a sequence of Unicode letters, numbers, underscores, and <code class="inline">@</code>. Atoms may end in <code class="inline">!</code> or <code class="inline">?</code>. Valid unquoted atoms are: <code class="inline">:ok</code>, <code class="inline">:ISO8601</code>, and <code class="inline">:integer?</code>.</p><p>If the colon is immediately followed by a pair of double- or single-quotes surrounding the atom name, the atom is considered quoted. In contrast with an unquoted atom, this one can be made of any Unicode character (not only letters), such as <code class="inline">:'ðŸŒ¢ Elixir'</code>, <code class="inline">:&quot;++olÃ¡++&quot;</code>, and <code class="inline">:&quot;123&quot;</code>.</p><p>Quoted and unquoted atoms with the same name are considered equivalent, so <code class="inline">:atom</code>, <code class="inline">:&quot;atom&quot;</code>, and <code class="inline">:'atom'</code> represent the same atom. The only catch is that the compiler will warn when quotes are used in atoms that do not need to be quoted.</p><p>All operators in Elixir are also valid atoms. Valid examples are <code class="inline">:foo</code>, <code class="inline">:FOO</code>, <code class="inline">:foo_42</code>, <code class="inline">:foo@bar</code>, and <code class="inline">:++</code>. Invalid examples are <code class="inline">:@foo</code> (<code class="inline">@</code> is not allowed at start), <code class="inline">:123</code> (numbers are not allowed at start), and <code class="inline">:(*)</code> (not a valid operator).</p><p><code class="inline">true</code>, <code class="inline">false</code>, and <code class="inline">nil</code> are reserved words that are represented by the atoms <code class="inline">:true</code>, <code class="inline">:false</code> and <code class="inline">:nil</code> respectively.</p><p>To learn more about all Unicode characters allowed in atom, see the <a href="unicode-syntax.xhtml">Unicode syntax</a> document.</p><h3 id="strings">Strings</h3><p>Single-line strings in Elixir are written between double-quotes, such as <code class="inline">&quot;foo&quot;</code>. Any double-quote inside the string must be escaped with <code class="inline">\</code>. Strings support Unicode characters and are stored as UTF-8 encoded binaries.</p><p>Multi-line strings in Elixir are written with three double-quotes, and can have unescaped quotes within them. The resulting string will end with a newline. The indentation of the last <code class="inline">&quot;&quot;&quot;</code> is used to strip indentation from the inner string. For example:</p><pre><code class="makeup elixir" translate="no"><span class="gp unselectable">iex&gt; </span><span class="n">test</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s">&quot;&quot;&quot;</span><span class="gp unselectable">
...&gt; </span><span class="s">    this</span><span class="gp unselectable">
...&gt; </span><span class="s">    is</span><span class="gp unselectable">
...&gt; </span><span class="s">    a</span><span class="gp unselectable">
...&gt; </span><span class="s">    test</span><span class="gp unselectable">
...&gt; </span><span class="s">&quot;&quot;&quot;</span><span class="w">
</span><span class="s">&quot;    this</span><span class="se">\n</span><span class="s">    is</span><span class="se">\n</span><span class="s">    a</span><span class="se">\n</span><span class="s">    test</span><span class="se">\n</span><span class="s">&quot;</span><span class="w">
</span><span class="gp unselectable">iex&gt; </span><span class="n">test</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s">&quot;&quot;&quot;</span><span class="gp unselectable">
...&gt; </span><span class="s">    This</span><span class="gp unselectable">
...&gt; </span><span class="s">    Is</span><span class="gp unselectable">
...&gt; </span><span class="s">    A</span><span class="gp unselectable">
...&gt; </span><span class="s">    Test</span><span class="gp unselectable">
...&gt; </span><span class="s">    &quot;&quot;&quot;</span><span class="w">
</span><span class="s">&quot;This</span><span class="se">\n</span><span class="s">Is</span><span class="se">\n</span><span class="s">A</span><span class="se">\n</span><span class="s">Test</span><span class="se">\n</span><span class="s">&quot;</span></code></pre><p>Strings are always represented as themselves in the AST.</p><h3 id="charlists">Charlists</h3><p>Charlists are lists of non-negative integers where each integer represents a Unicode code point.</p><pre><code class="makeup elixir" translate="no"><span class="gp unselectable">iex(6)&gt; </span><span class="sc">&#39;abc&#39;</span><span class="w"> </span><span class="o">===</span><span class="w"> </span><span class="p" data-group-id="3162674839-1">[</span><span class="mi">97</span><span class="p">,</span><span class="w"> </span><span class="mi">98</span><span class="p">,</span><span class="w"> </span><span class="mi">99</span><span class="p" data-group-id="3162674839-1">]</span><span class="w">
</span><span class="no">true</span></code></pre><p>Charlists are written in single-quotes, such as <code class="inline">'foo'</code>. Any single-quote inside the string must be escaped with <code class="inline">\</code>.
Multi-line charlists are written with three single-quotes (<code class="inline">'''</code>), the same way multi-line strings are.
However, this syntax is deprecated in favor of the charlist sigil <code class="inline">~c</code>.</p><p>Charlists are always represented as themselves in the AST.</p><p>For more in-depth information, please read the &quot;Charlists&quot; section in the <a href="List.xhtml"><code class="inline">List</code></a> module.</p><h3 id="lists-tuples-and-binaries">Lists, tuples and binaries</h3><p>Data structures such as lists, tuples, and binaries are marked respectively by the delimiters <code class="inline">[...]</code>, <code class="inline">{...}</code>, and <code class="inline">&lt;&lt;...&gt;&gt;</code>. Each element is separated by comma. A trailing comma is also allowed, such as in <code class="inline">[1, 2, 3,]</code>.</p><h3 id="maps-and-keyword-lists">Maps and keyword lists</h3><p>Maps use the <code class="inline">%{...}</code> notation and each key-value is given by pairs marked with <code class="inline">=&gt;</code>, such as <code class="inline">%{&quot;hello&quot; =&gt; 1, 2 =&gt; &quot;world&quot;}</code>.</p><p>Both keyword lists (list of two-element tuples where the first element is an atom) and maps with atom keys support a keyword notation where the colon character <code class="inline">:</code> is moved to the end of the atom. <code class="inline">%{hello: &quot;world&quot;}</code> is equivalent to <code class="inline">%{:hello =&gt; &quot;world&quot;}</code> and <code class="inline">[foo: :bar]</code> is equivalent to <code class="inline">[{:foo, :bar}]</code>. We discuss keywords in later sections.</p><h3 id="structs">Structs</h3><p>Structs built on the map syntax by passing the struct name between <code class="inline">%</code> and <code class="inline">{</code>. For example, <code class="inline">%User{...}</code>.</p><h2 id="expressions">Expressions</h2><h3 id="variables">Variables</h3><p>Variables in Elixir must start with an underscore or a Unicode letter that is not in uppercase or titlecase. The variable may continue using a sequence of Unicode letters, numbers, and underscores. Variables may end in <code class="inline">?</code> or <code class="inline">!</code>. To learn more about all Unicode characters allowed in variables, see the <a href="unicode-syntax.xhtml">Unicode syntax</a> document.</p><p><a href="naming-conventions.xhtml">Elixir's naming conventions</a> recommend variables to be in <code class="inline">snake_case</code> format.</p><h3 id="non-qualified-calls-local-calls">Non-qualified calls (local calls)</h3><p>Non-qualified calls, such as <code class="inline">add(1, 2)</code>, must start with characters and then follow the same rules as variables, which are optionally followed by parentheses, and then arguments.</p><p>Parentheses are required for zero-arity calls (i.e. calls without arguments), to avoid ambiguity with variables. If parentheses are used, they must immediately follow the function name <em>without spaces</em>. For example, <code class="inline">add (1, 2)</code> is a syntax error, since <code class="inline">(1, 2)</code> is treated as an invalid block which is attempted to be given as a single argument to <code class="inline">add</code>.</p><p><a href="naming-conventions.xhtml">Elixir's naming conventions</a> recommend calls to be in <code class="inline">snake_case</code> format.</p><h3 id="operators">Operators</h3><p>As many programming languages, Elixir also support operators as non-qualified calls with their precedence and associativity rules. Constructs such as <code class="inline">=</code>, <code class="inline">when</code>, <code class="inline">&amp;</code> and <code class="inline">@</code> are simply treated as operators. See <a href="operators.xhtml">the Operators page</a> for a full reference.</p><h3 id="qualified-calls-remote-calls">Qualified calls (remote calls)</h3><p>Qualified calls, such as <code class="inline">Math.add(1, 2)</code>, must start with characters and then follow the same rules as variables, which are optionally followed by parentheses, and then arguments. Qualified calls also support operators, such as <code class="inline">Kernel.+(1, 2)</code>. Elixir also allows the function name to be written between double- or single-quotes, allowing any character in between the quotes, such as <code class="inline">Math.&quot;++add++&quot;(1, 2)</code>.</p><p>Similar to non-qualified calls, parentheses have different meaning for zero-arity calls (i.e. calls without arguments). If parentheses are used, such as <code class="inline">mod.fun()</code>, it means a function call. If parenthesis are skipped, such as <code class="inline">map.field</code>, it means accessing a field of a map.</p><p><a href="naming-conventions.xhtml">Elixir's naming conventions</a> recommend calls to be in <code class="inline">snake_case</code> format.</p><h3 id="aliases">Aliases</h3><p>Aliases are constructs that expand to atoms at compile-time. The alias <a href="String.xhtml"><code class="inline">String</code></a> expands to the atom <code class="inline">:&quot;Elixir.String&quot;</code>. Aliases must start with an ASCII uppercase character which may be followed by any ASCII letter, number, or underscore. Non-ASCII characters are not supported in aliases.</p><p>Multiple aliases can be joined with <code class="inline">.</code>, such as <code class="inline">MyApp.String</code>, and it expands to the atom <code class="inline">:&quot;Elixir.MyApp.String&quot;</code>. The dot is effectively part of the name but it can also be used for composition. If you define <code class="inline">alias MyApp.Example, as: Example</code> in your code, then <code class="inline">Example</code> will always expand to <code class="inline">:&quot;Elixir.MyApp.Example&quot;</code> and <code class="inline">Example.String</code> will expand to <code class="inline">:&quot;Elixir.MyApp.Example.String&quot;</code>.</p><p><a href="naming-conventions.xhtml">Elixir's naming conventions</a> recommend aliases to be in <code class="inline">CamelCase</code> format.</p><h3 id="module-attributes">Module attributes</h3><p>Module attributes are module-specific storage and are written as the composition of the unary operator <code class="inline">@</code> with variables and local calls. For example, to write to a module attribute named <code class="inline">foo</code>, use <code class="inline">@foo &quot;value&quot;</code>, and use <code class="inline">@foo</code> to read from it. Given module attributes are written using existing constructs, they follow the same rules above defined for operators, variables, and local calls.</p><h3 id="blocks">Blocks</h3><p>Blocks are multiple Elixir expressions separated by newlines or semi-colons. A new block may be created at any moment by using parentheses.</p><h3 id="left-to-right-arrow">Left to right arrow</h3><p>The left to right arrow (<code class="inline">-&gt;</code>) is used to establish a relationship between left and right, commonly referred as clauses. The left side may have zero, one, or more arguments; the right side is zero, one, or more expressions separated by new line. The <code class="inline">-&gt;</code> may appear one or more times between one of the following terminators: <code class="inline">do</code>-<code class="inline">end</code>, <code class="inline">fn</code>-<code class="inline">end</code> or <code class="inline">(</code>-<code class="inline">)</code>. When <code class="inline">-&gt;</code> is used, only other clauses are allowed between those terminators. Mixing clauses and regular expressions is invalid syntax.</p><p>It is seen on <code class="inline">case</code> and <code class="inline">cond</code> constructs between <code class="inline">do</code> and <code class="inline">end</code>:</p><pre><code class="makeup elixir" translate="no"><span class="k">case</span><span class="w"> </span><span class="mi">1</span><span class="w"> </span><span class="k" data-group-id="1768651041-1">do</span><span class="w">
  </span><span class="mi">2</span><span class="w"> </span><span class="o">-&gt;</span><span class="w"> </span><span class="mi">3</span><span class="w">
  </span><span class="mi">4</span><span class="w"> </span><span class="o">-&gt;</span><span class="w"> </span><span class="mi">5</span><span class="w">
</span><span class="k" data-group-id="1768651041-1">end</span><span class="w">

</span><span class="k">cond</span><span class="w"> </span><span class="k" data-group-id="1768651041-2">do</span><span class="w">
  </span><span class="no">true</span><span class="w"> </span><span class="o">-&gt;</span><span class="w"> </span><span class="no">false</span><span class="w">
</span><span class="k" data-group-id="1768651041-2">end</span></code></pre><p>Seen in typespecs between <code class="inline">(</code> and <code class="inline">)</code>:</p><pre><code class="makeup elixir" translate="no"><span class="p" data-group-id="8461707588-1">(</span><span class="n">integer</span><span class="p" data-group-id="8461707588-2">(</span><span class="p" data-group-id="8461707588-2">)</span><span class="p">,</span><span class="w"> </span><span class="n">boolean</span><span class="p" data-group-id="8461707588-3">(</span><span class="p" data-group-id="8461707588-3">)</span><span class="w"> </span><span class="o">-&gt;</span><span class="w"> </span><span class="n">integer</span><span class="p" data-group-id="8461707588-4">(</span><span class="p" data-group-id="8461707588-4">)</span><span class="p" data-group-id="8461707588-1">)</span></code></pre><p>It is also used between <code class="inline">fn</code> and <code class="inline">end</code> for building anonymous functions:</p><pre><code class="makeup elixir" translate="no"><span class="k" data-group-id="1346799753-1">fn</span><span class="w">
  </span><span class="n">x</span><span class="p">,</span><span class="w"> </span><span class="n">y</span><span class="w"> </span><span class="o">-&gt;</span><span class="w"> </span><span class="n">x</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">y</span><span class="w">
</span><span class="k" data-group-id="1346799753-1">end</span></code></pre><h3 id="sigils">Sigils</h3><p>Sigils start with <code class="inline">~</code> and are followed by one lowercase letter or by one or more uppercase letters, immediately followed by one of the following pairs:</p><ul><li><code class="inline">(</code> and <code class="inline">)</code></li><li><code class="inline">{</code> and <code class="inline">}</code></li><li><code class="inline">[</code> and <code class="inline">]</code></li><li><code class="inline">&lt;</code> and <code class="inline">&gt;</code></li><li><code class="inline">&quot;</code> and <code class="inline">&quot;</code></li><li><code class="inline">'</code> and <code class="inline">'</code></li><li><code class="inline">|</code> and <code class="inline">|</code></li><li><code class="inline">/</code> and <code class="inline">/</code></li></ul><p>After closing the pair, zero or more ASCII letters and digits can be given as a modifier. Sigils are expressed as non-qualified calls prefixed with <code class="inline">sigil_</code> where the first argument is the sigil contents as a string and the second argument is a list of integers as modifiers:</p><p>If the sigil letter is in uppercase, no interpolation is allowed in the sigil, otherwise its contents may be dynamic. Compare the results of the sigils below for more information:</p><pre><code class="makeup elixir" translate="no"><span class="s">~s/f</span><span class="si" data-group-id="5921180417-1">#{</span><span class="s">&quot;o&quot;</span><span class="si" data-group-id="5921180417-1">}</span><span class="s">o/</span><span class="w">
</span><span class="s">~S/f#{&quot;o&quot;}o/</span></code></pre><p>Sigils are useful to encode text with their own escaping rules, such as regular expressions, datetimes, and others.</p><h2 id="the-elixir-ast">The Elixir AST</h2><p>Elixir syntax was designed to have a straightforward conversion to an abstract syntax tree (AST). Elixir's AST is a regular Elixir data structure composed of the following elements:</p><ul><li>atoms - such as <code class="inline">:foo</code></li><li>integers - such as <code class="inline">42</code></li><li>floats - such as <code class="inline">13.1</code></li><li>strings - such as <code class="inline">&quot;hello&quot;</code></li><li>lists - such as <code class="inline">[1, 2, 3]</code></li><li>tuples with two elements - such as <code class="inline">{&quot;hello&quot;, :world}</code></li><li>tuples with three elements, representing calls or variables, as explained next</li></ul><p>The building block of Elixir's AST is a call, such as:</p><pre><code class="makeup elixir" translate="no"><span class="n">sum</span><span class="p" data-group-id="2939342546-1">(</span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="mi">2</span><span class="p">,</span><span class="w"> </span><span class="mi">3</span><span class="p" data-group-id="2939342546-1">)</span></code></pre><p>which is represented as a tuple with three elements:</p><pre><code class="makeup elixir" translate="no"><span class="p" data-group-id="4068713569-1">{</span><span class="ss">:sum</span><span class="p">,</span><span class="w"> </span><span class="n">meta</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="4068713569-2">[</span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="mi">2</span><span class="p">,</span><span class="w"> </span><span class="mi">3</span><span class="p" data-group-id="4068713569-2">]</span><span class="p" data-group-id="4068713569-1">}</span></code></pre><p>the first element is an atom (or another tuple), the second element is a list of two-element tuples with metadata (such as line numbers) and the third is a list of arguments.</p><p>We can retrieve the AST for any Elixir expression by calling <code class="inline">quote</code>:</p><pre><code class="makeup elixir" translate="no"><span class="k">quote</span><span class="w"> </span><span class="k" data-group-id="0887915038-1">do</span><span class="w">
  </span><span class="n">sum</span><span class="p" data-group-id="0887915038-2">(</span><span class="p" data-group-id="0887915038-2">)</span><span class="w">
</span><span class="k" data-group-id="0887915038-1">end</span><span class="w">
</span><span class="c1">#=&gt; {:sum, [], []}</span></code></pre><p>Variables are also represented using a tuple with three elements and a combination of lists and atoms, for example:</p><pre><code class="makeup elixir" translate="no"><span class="k">quote</span><span class="w"> </span><span class="k" data-group-id="8263777619-1">do</span><span class="w">
  </span><span class="n">sum</span><span class="w">
</span><span class="k" data-group-id="8263777619-1">end</span><span class="w">
</span><span class="c1">#=&gt; {:sum, [], Elixir}</span></code></pre><p>You can see that variables are also represented with a tuple, except the third element is an atom expressing the variable context.</p><p>Over the course of this section, we will explore many Elixir syntax constructs alongside their AST representations.</p><h3 id="operators-1">Operators</h3><p>Operators are treated as non-qualified calls:</p><pre><code class="makeup elixir" translate="no"><span class="k">quote</span><span class="w"> </span><span class="k" data-group-id="1398790490-1">do</span><span class="w">
  </span><span class="mi">1</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="mi">2</span><span class="w">
</span><span class="k" data-group-id="1398790490-1">end</span><span class="w">
</span><span class="c1">#=&gt; {:+, [], [1, 2]}</span></code></pre><p>Note that <code class="inline">.</code> is also an operator. Remote calls use the dot in the AST with two arguments, where the second argument is always an atom:</p><pre><code class="makeup elixir" translate="no"><span class="k">quote</span><span class="w"> </span><span class="k" data-group-id="0702012438-1">do</span><span class="w">
  </span><span class="n">foo</span><span class="o">.</span><span class="n">bar</span><span class="p" data-group-id="0702012438-2">(</span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="mi">2</span><span class="p">,</span><span class="w"> </span><span class="mi">3</span><span class="p" data-group-id="0702012438-2">)</span><span class="w">
</span><span class="k" data-group-id="0702012438-1">end</span><span class="w">
</span><span class="c1">#=&gt; {{:., [], [{:foo, [], Elixir}, :bar]}, [], [1, 2, 3]}</span></code></pre><p>Calling anonymous functions uses the dot in the AST with a single argument, mirroring the fact the function name is &quot;missing&quot; from right side of the dot:</p><pre><code class="makeup elixir" translate="no"><span class="k">quote</span><span class="w"> </span><span class="k" data-group-id="2182904416-1">do</span><span class="w">
  </span><span class="n">foo</span><span class="o">.</span><span class="p" data-group-id="2182904416-2">(</span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="mi">2</span><span class="p">,</span><span class="w"> </span><span class="mi">3</span><span class="p" data-group-id="2182904416-2">)</span><span class="w">
</span><span class="k" data-group-id="2182904416-1">end</span><span class="w">
</span><span class="c1">#=&gt; {{:., [], [{:foo, [], Elixir}]}, [], [1, 2, 3]}</span></code></pre><h3 id="aliases-1">Aliases</h3><p>Aliases are represented by an <code class="inline">__aliases__</code> call with each segment separated by a dot as an argument:</p><pre><code class="makeup elixir" translate="no"><span class="k">quote</span><span class="w"> </span><span class="k" data-group-id="1635957602-1">do</span><span class="w">
  </span><span class="nc">Foo.Bar.Baz</span><span class="w">
</span><span class="k" data-group-id="1635957602-1">end</span><span class="w">
</span><span class="c1">#=&gt; {:__aliases__, [], [:Foo, :Bar, :Baz]}</span><span class="w">

</span><span class="k">quote</span><span class="w"> </span><span class="k" data-group-id="1635957602-2">do</span><span class="w">
  </span><span class="bp">__MODULE__</span><span class="o">.</span><span class="nc">Bar.Baz</span><span class="w">
</span><span class="k" data-group-id="1635957602-2">end</span><span class="w">
</span><span class="c1">#=&gt; {:__aliases__, [], [{:__MODULE__, [], Elixir}, :Bar, :Baz]}</span></code></pre><p>All arguments, except the first, are guaranteed to be atoms.</p><h3 id="data-structures">Data structures</h3><p>Remember that lists are literals, so they are represented as themselves in the AST:</p><pre><code class="makeup elixir" translate="no"><span class="k">quote</span><span class="w"> </span><span class="k" data-group-id="5446955308-1">do</span><span class="w">
  </span><span class="p" data-group-id="5446955308-2">[</span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="mi">2</span><span class="p">,</span><span class="w"> </span><span class="mi">3</span><span class="p" data-group-id="5446955308-2">]</span><span class="w">
</span><span class="k" data-group-id="5446955308-1">end</span><span class="w">
</span><span class="c1">#=&gt; [1, 2, 3]</span></code></pre><p>Tuples have their own representation, except for two-element tuples, which are represented as themselves:</p><pre><code class="makeup elixir" translate="no"><span class="k">quote</span><span class="w"> </span><span class="k" data-group-id="7508814600-1">do</span><span class="w">
  </span><span class="p" data-group-id="7508814600-2">{</span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="mi">2</span><span class="p" data-group-id="7508814600-2">}</span><span class="w">
</span><span class="k" data-group-id="7508814600-1">end</span><span class="w">
</span><span class="c1">#=&gt; {1, 2}</span><span class="w">

</span><span class="k">quote</span><span class="w"> </span><span class="k" data-group-id="7508814600-3">do</span><span class="w">
  </span><span class="p" data-group-id="7508814600-4">{</span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="mi">2</span><span class="p">,</span><span class="w"> </span><span class="mi">3</span><span class="p" data-group-id="7508814600-4">}</span><span class="w">
</span><span class="k" data-group-id="7508814600-3">end</span><span class="w">
</span><span class="c1">#=&gt; {:{}, [], [1, 2, 3]}</span></code></pre><p>Binaries have a representation similar to tuples, except they are tagged with <code class="inline">:&lt;&lt;&gt;&gt;</code> instead of <code class="inline">:{}</code>:</p><pre><code class="makeup elixir" translate="no"><span class="k">quote</span><span class="w"> </span><span class="k" data-group-id="1540206884-1">do</span><span class="w">
  </span><span class="p" data-group-id="1540206884-2">&lt;&lt;</span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="mi">2</span><span class="p">,</span><span class="w"> </span><span class="mi">3</span><span class="p" data-group-id="1540206884-2">&gt;&gt;</span><span class="w">
</span><span class="k" data-group-id="1540206884-1">end</span><span class="w">
</span><span class="c1">#=&gt; {:&lt;&lt;&gt;&gt;, [], [1, 2, 3]}</span></code></pre><p>The same applies to maps, where pairs are treated as a list of tuples with two elements:</p><pre><code class="makeup elixir" translate="no"><span class="k">quote</span><span class="w"> </span><span class="k" data-group-id="1006299329-1">do</span><span class="w">
  </span><span class="p" data-group-id="1006299329-2">%{</span><span class="mi">1</span><span class="w"> </span><span class="p">=&gt;</span><span class="w"> </span><span class="mi">2</span><span class="p">,</span><span class="w"> </span><span class="mi">3</span><span class="w"> </span><span class="p">=&gt;</span><span class="w"> </span><span class="mi">4</span><span class="p" data-group-id="1006299329-2">}</span><span class="w">
</span><span class="k" data-group-id="1006299329-1">end</span><span class="w">
</span><span class="c1">#=&gt; {:%{}, [], [{1, 2}, {3, 4}]}</span></code></pre><h3 id="blocks-1">Blocks</h3><p>Blocks are represented as a <code class="inline">__block__</code> call with each line as a separate argument:</p><pre><code class="makeup elixir" translate="no"><span class="k">quote</span><span class="w"> </span><span class="k" data-group-id="0155971639-1">do</span><span class="w">
  </span><span class="mi">1</span><span class="w">
  </span><span class="mi">2</span><span class="w">
  </span><span class="mi">3</span><span class="w">
</span><span class="k" data-group-id="0155971639-1">end</span><span class="w">
</span><span class="c1">#=&gt; {:__block__, [], [1, 2, 3]}</span><span class="w">

</span><span class="k">quote</span><span class="w"> </span><span class="k" data-group-id="0155971639-2">do</span><span class="w"> </span><span class="mi">1</span><span class="p">;</span><span class="w"> </span><span class="mi">2</span><span class="p">;</span><span class="w"> </span><span class="mi">3</span><span class="p">;</span><span class="w"> </span><span class="k" data-group-id="0155971639-2">end</span><span class="w">
</span><span class="c1">#=&gt; {:__block__, [], [1, 2, 3]}</span></code></pre><h3 id="left-to-right-arrow-1">Left to right arrow</h3><p>The left to right arrow (<code class="inline">-&gt;</code>) is represented similar to operators except that they are always part of a list, its left side represents a list of arguments and the right side is an expression.</p><p>For example, in <code class="inline">case</code> and <code class="inline">cond</code>:</p><pre><code class="makeup elixir" translate="no"><span class="k">quote</span><span class="w"> </span><span class="k" data-group-id="5817608387-1">do</span><span class="w">
  </span><span class="k">case</span><span class="w"> </span><span class="mi">1</span><span class="w"> </span><span class="k" data-group-id="5817608387-2">do</span><span class="w">
    </span><span class="mi">2</span><span class="w"> </span><span class="o">-&gt;</span><span class="w"> </span><span class="mi">3</span><span class="w">
    </span><span class="mi">4</span><span class="w"> </span><span class="o">-&gt;</span><span class="w"> </span><span class="mi">5</span><span class="w">
  </span><span class="k" data-group-id="5817608387-2">end</span><span class="w">
</span><span class="k" data-group-id="5817608387-1">end</span><span class="w">
</span><span class="c1">#=&gt; {:case, [], [1, [do: [{:-&gt;, [], [[2], 3]}, {:-&gt;, [], [[4], 5]}]]]}</span><span class="w">

</span><span class="k">quote</span><span class="w"> </span><span class="k" data-group-id="5817608387-3">do</span><span class="w">
  </span><span class="k">cond</span><span class="w"> </span><span class="k" data-group-id="5817608387-4">do</span><span class="w">
    </span><span class="no">true</span><span class="w"> </span><span class="o">-&gt;</span><span class="w"> </span><span class="no">false</span><span class="w">
  </span><span class="k" data-group-id="5817608387-4">end</span><span class="w">
</span><span class="k" data-group-id="5817608387-3">end</span><span class="w">
</span><span class="c1">#=&gt; {:cond, [], [[do: [{:-&gt;, [], [[true], false]}]]]}</span></code></pre><p>Between <code class="inline">(</code> and <code class="inline">)</code>:</p><pre><code class="makeup elixir" translate="no"><span class="k">quote</span><span class="w"> </span><span class="k" data-group-id="9171490739-1">do</span><span class="w">
  </span><span class="p" data-group-id="9171490739-2">(</span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="mi">2</span><span class="w"> </span><span class="o">-&gt;</span><span class="w"> </span><span class="mi">3</span><span class="w">
   </span><span class="mi">4</span><span class="p">,</span><span class="w"> </span><span class="mi">5</span><span class="w"> </span><span class="o">-&gt;</span><span class="w"> </span><span class="mi">6</span><span class="p" data-group-id="9171490739-2">)</span><span class="w">
</span><span class="k" data-group-id="9171490739-1">end</span><span class="w">
</span><span class="c1">#=&gt; [{:-&gt;, [], [[1, 2], 3]}, {:-&gt;, [], [[4, 5], 6]}]</span></code></pre><p>Between <code class="inline">fn</code> and <code class="inline">end</code>:</p><pre><code class="makeup elixir" translate="no"><span class="k">quote</span><span class="w"> </span><span class="k" data-group-id="6390194310-1">do</span><span class="w">
  </span><span class="k" data-group-id="6390194310-2">fn</span><span class="w">
    </span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="mi">2</span><span class="w"> </span><span class="o">-&gt;</span><span class="w"> </span><span class="mi">3</span><span class="w">
    </span><span class="mi">4</span><span class="p">,</span><span class="w"> </span><span class="mi">5</span><span class="w"> </span><span class="o">-&gt;</span><span class="w"> </span><span class="mi">6</span><span class="w">
  </span><span class="k" data-group-id="6390194310-2">end</span><span class="w">
</span><span class="k" data-group-id="6390194310-1">end</span><span class="w">
</span><span class="c1">#=&gt; {:fn, [], [{:-&gt;, [], [[1, 2], 3]}, {:-&gt;, [], [[4, 5], 6]}]}</span></code></pre><h3 id="qualified-tuples">Qualified tuples</h3><p>Qualified tuples (<code class="inline">foo.{bar, baz}</code>) are represented by a <code class="inline">{:., [], [expr, :{}]}</code> call, where the <code class="inline">expr</code> represents the left hand side of the dot, and the arguments represent the elements inside the curly braces. This is used in Elixir to provide multi aliases:</p><pre><code class="makeup elixir" translate="no"><span class="k">quote</span><span class="w"> </span><span class="k" data-group-id="9102407333-1">do</span><span class="w">
  </span><span class="nc">Foo</span><span class="o">.</span><span class="p" data-group-id="9102407333-2">{</span><span class="nc">Bar</span><span class="p">,</span><span class="w"> </span><span class="nc">Baz</span><span class="p" data-group-id="9102407333-2">}</span><span class="w">
</span><span class="k" data-group-id="9102407333-1">end</span><span class="w">
</span><span class="c1">#=&gt; {{:., [], [{:__aliases__, [], [:Foo]}, :{}]}, [], [{:__aliases__, [], [:Bar]}, {:__aliases__, [], [:Baz]}]}</span></code></pre><h3 id="do-end-blocks"><code class="inline">do</code>-<code class="inline">end</code> blocks</h3><p>Elixir's <code class="inline">do</code>-<code class="inline">end</code> blocks are equivalent to keywords as the last argument of a function call, where the block contents are wrapped in parentheses. For example:</p><pre><code class="makeup elixir" translate="no"><span class="k">if</span><span class="w"> </span><span class="no">true</span><span class="w"> </span><span class="k" data-group-id="9664381591-1">do</span><span class="w">
  </span><span class="n">this</span><span class="w">
</span><span class="k" data-group-id="9664381591-1">else</span><span class="w">
  </span><span class="n">that</span><span class="w">
</span><span class="k" data-group-id="9664381591-1">end</span></code></pre><p>is the same as:</p><pre><code class="makeup elixir" translate="no"><span class="k">if</span><span class="p" data-group-id="6502871239-1">(</span><span class="no">true</span><span class="p">,</span><span class="w"> </span><span class="ss">do</span><span class="p">:</span><span class="w"> </span><span class="p" data-group-id="6502871239-2">(</span><span class="n">this</span><span class="p" data-group-id="6502871239-2">)</span><span class="p">,</span><span class="w"> </span><span class="ss">else</span><span class="p">:</span><span class="w"> </span><span class="p" data-group-id="6502871239-3">(</span><span class="n">that</span><span class="p" data-group-id="6502871239-3">)</span><span class="p" data-group-id="6502871239-1">)</span></code></pre><p>While the construct above does not require custom nodes in Elixir's AST, they are restricted only to certain keywords, listed next:</p><ul><li><code class="inline">after</code></li><li><code class="inline">catch</code></li><li><code class="inline">else</code></li><li><code class="inline">rescue</code></li></ul><p>You will find them in constructs such as <code class="inline">receive</code>, <code class="inline">try</code>, and others. You can also find more examples in <a href="optional-syntax.xhtml">the Optional Syntax chapter</a>.</p>

  </body>
</html>
