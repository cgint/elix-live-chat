<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"
      xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>URI - Elixir v1.18.4</title>
    <meta name="generator" content="ExDoc v0.38.2" />
    <link type="text/css" rel="stylesheet" href="dist/epub-elixir-FNUUKFP7.css" />
    <script src="dist/epub-4WIP524F.js"></script>

  </head>
  <body class="content-inner">

    <h1 id="content">
URI 
    </h1>


      <section id="moduledoc" class="docstring">
<p>Utilities for working with URIs.</p><p>This module provides functions for working with URIs (for example, parsing
URIs or encoding query strings). The functions in this module are implemented
according to <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>.</p><p>Additionally, the Erlang <a href="https://www.erlang.org/doc/apps/stdlib/uri_string.html"><code class="inline">:uri_string</code> module</a> provides certain functionalities,
such as RFC 3986 compliant URI normalization.</p>
      </section>


      <section id="summary" class="details-list">
        <h1 class="section-heading">Summary</h1>
<div class="summary-types summary">
  <h2>
    <a href="#types">Types</a>
  </h2>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#t:authority/0" data-no-tooltip="" translate="no">authority()</a>

          <span class="deprecated" title="The authority field is deprecated">deprecated</span>

      </div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#t:t/0" data-no-tooltip="" translate="no">t()</a>

      </div>

    </div>

</div>
<div class="summary-functions summary">
  <h2>
    <a href="#functions">Functions</a>
  </h2>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#__struct__/0" data-no-tooltip="" translate="no">%URI{}</a>

      </div>

        <div class="summary-synopsis"><p>The URI struct.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#append_path/2" data-no-tooltip="" translate="no">append_path(uri, path)</a>

      </div>

        <div class="summary-synopsis"><p>Appends <code class="inline">path</code> to the given <code class="inline">uri</code>.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#append_query/2" data-no-tooltip="" translate="no">append_query(uri, query)</a>

      </div>

        <div class="summary-synopsis"><p>Appends <code class="inline">query</code> to the given <code class="inline">uri</code>.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#char_reserved?/1" data-no-tooltip="" translate="no">char_reserved?(character)</a>

      </div>

        <div class="summary-synopsis"><p>Checks if <code class="inline">character</code> is a reserved one in a URI.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#char_unescaped?/1" data-no-tooltip="" translate="no">char_unescaped?(character)</a>

      </div>

        <div class="summary-synopsis"><p>Checks if <code class="inline">character</code> is allowed unescaped in a URI.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#char_unreserved?/1" data-no-tooltip="" translate="no">char_unreserved?(character)</a>

      </div>

        <div class="summary-synopsis"><p>Checks if <code class="inline">character</code> is an unreserved one in a URI.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#decode/1" data-no-tooltip="" translate="no">decode(uri)</a>

      </div>

        <div class="summary-synopsis"><p>Percent-unescapes a URI.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#decode_query/3" data-no-tooltip="" translate="no">decode_query(query, map \\ %{}, encoding \\ :www_form)</a>

      </div>

        <div class="summary-synopsis"><p>Decodes <code class="inline">query</code> into a map.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#decode_www_form/1" data-no-tooltip="" translate="no">decode_www_form(string)</a>

      </div>

        <div class="summary-synopsis"><p>Decodes <code class="inline">string</code> as &quot;x-www-form-urlencoded&quot;.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#default_port/1" data-no-tooltip="" translate="no">default_port(scheme)</a>

      </div>

        <div class="summary-synopsis"><p>Returns the default port for a given <code class="inline">scheme</code>.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#default_port/2" data-no-tooltip="" translate="no">default_port(scheme, port)</a>

      </div>

        <div class="summary-synopsis"><p>Registers the default <code class="inline">port</code> for the given <code class="inline">scheme</code>.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#encode/2" data-no-tooltip="" translate="no">encode(string, predicate \\ &amp;char_unescaped?/1)</a>

      </div>

        <div class="summary-synopsis"><p>Percent-encodes all characters that require escaping in <code class="inline">string</code>.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#encode_query/2" data-no-tooltip="" translate="no">encode_query(enumerable, encoding \\ :www_form)</a>

      </div>

        <div class="summary-synopsis"><p>Encodes <code class="inline">enumerable</code> into a query string using <code class="inline">encoding</code>.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#encode_www_form/1" data-no-tooltip="" translate="no">encode_www_form(string)</a>

      </div>

        <div class="summary-synopsis"><p>Encodes <code class="inline">string</code> as &quot;x-www-form-urlencoded&quot;.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#merge/2" data-no-tooltip="" translate="no">merge(uri, rel)</a>

      </div>

        <div class="summary-synopsis"><p>Merges two URIs.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#new/1" data-no-tooltip="" translate="no">new(uri)</a>

      </div>

        <div class="summary-synopsis"><p>Creates a new URI struct from a URI or a string.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#new!/1" data-no-tooltip="" translate="no">new!(uri)</a>

      </div>

        <div class="summary-synopsis"><p>Similar to <a><code class="inline">new/1</code></a> but raises <a><code class="inline">URI.Error</code></a> if an invalid string is given.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#parse/1" data-no-tooltip="" translate="no">parse(uri)</a>

      </div>

        <div class="summary-synopsis"><p>Parses a URI into its components, without further validation.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#query_decoder/2" data-no-tooltip="" translate="no">query_decoder(query, encoding \\ :www_form)</a>

      </div>

        <div class="summary-synopsis"><p>Returns a stream of two-element tuples representing key-value pairs in the
given <code class="inline">query</code>.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#to_string/1" data-no-tooltip="" translate="no">to_string(uri)</a>

      </div>

        <div class="summary-synopsis"><p>Returns the string representation of the given <a>URI struct</a>.</p></div>

    </div>

</div>

      </section>


      <section id="types" class="details-list">
        <h1 class="section-heading">Types</h1>

        <div class="types-list">
<section class="detail" id="t:authority/0">

  <div class="detail-header">
    <a href="#t:authority/0" class="detail-link" data-no-tooltip="" aria-label="Link to this opaque">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">authority()</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/uri.ex#L41" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

    <div class="deprecated">
      This opaque is deprecated. The authority field is deprecated.
    </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@opaque</span> authority()</pre>

      </div>


  </section>
</section>
<section class="detail" id="t:t/0">

  <div class="detail-header">
    <a href="#t:t/0" class="detail-link" data-no-tooltip="" aria-label="Link to this type">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">t()</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/uri.ex#L29" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@type</span> t() :: %URI{
  authority: <a href="#t:authority/0">authority</a>(),
  fragment: nil | <a href="typespecs.xhtml#built-in-types">binary</a>(),
  host: nil | <a href="typespecs.xhtml#built-in-types">binary</a>(),
  path: nil | <a href="typespecs.xhtml#built-in-types">binary</a>(),
  port: nil | <a href="https://www.erlang.org/doc/apps/kernel/inet.html#t:port_number/0">:inet.port_number</a>(),
  query: nil | <a href="typespecs.xhtml#built-in-types">binary</a>(),
  scheme: nil | <a href="typespecs.xhtml#built-in-types">binary</a>(),
  userinfo: nil | <a href="typespecs.xhtml#built-in-types">binary</a>()
}</pre>

      </div>


  </section>
</section>

        </div>
      </section>

      <section id="functions" class="details-list">
        <h1 class="section-heading">Functions</h1>

        <div class="functions-list">
<section class="detail" id="__struct__/0">

  <div class="detail-header">
    <a href="#__struct__/0" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">%URI{}</h1>

        <span class="note">(struct)</span>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/uri.ex#L27" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

<p>The URI struct.</p><p>The fields are defined to match the following URI representation
(with field names between brackets):</p><pre><code class="makeup elixir" translate="no"><samp class="p" data-group-id="1891985274-1">[</samp><samp class="n">scheme</samp><samp class="p" data-group-id="1891985274-1">]</samp><samp class="ss">://</samp><samp class="p" data-group-id="1891985274-2">[</samp><samp class="n">userinfo</samp><samp class="p" data-group-id="1891985274-2">]</samp><samp class="err">@</samp><samp class="p" data-group-id="1891985274-3">[</samp><samp class="n">host</samp><samp class="p" data-group-id="1891985274-3">]</samp><samp class="p">:</samp><samp class="p" data-group-id="1891985274-4">[</samp><samp class="n">port</samp><samp class="p" data-group-id="1891985274-4">]</samp><samp class="p" data-group-id="1891985274-5">[</samp><samp class="n">path</samp><samp class="p" data-group-id="1891985274-5">]</samp><samp class="sc">?[</samp><samp class="n">query</samp><samp class="p">]</samp><samp class="c1">#[fragment]</samp></code></pre><p>Note the <code class="inline">authority</code> field is deprecated. <a href="#parse/1"><code class="inline">parse/1</code></a> will still
populate it for backwards compatibility but you should generally
avoid setting or getting it.</p>
  </section>
</section>
<section class="detail" id="append_path/2">

  <div class="detail-header">
    <a href="#append_path/2" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">append_path(uri, path)</h1>

        <span class="note">(since 1.15.0)</span>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/uri.ex#L1017" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> append_path(<a href="#t:t/0">t</a>(), <a href="String.xhtml#t:t/0">String.t</a>()) :: <a href="#t:t/0">t</a>()</pre>

      </div>

<p>Appends <code class="inline">path</code> to the given <code class="inline">uri</code>.</p><p>Path must start with <code class="inline">/</code> and cannot contain additional URL components like
fragments or query strings. This function further assumes the path is valid and
it does not contain a query string or fragment parts.</p><h2 id="append_path/2-examples" class="section-heading"><a href="#append_path/2-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">URI</samp><samp class="o">.</samp><samp class="n">append_path</samp><samp class="p" data-group-id="5648305149-1">(</samp><samp class="nc">URI</samp><samp class="o">.</samp><samp class="n">parse</samp><samp class="p" data-group-id="5648305149-2">(</samp><samp class="s">&quot;http://example.com/foo/?x=1&quot;</samp><samp class="p" data-group-id="5648305149-2">)</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;/my-path&quot;</samp><samp class="p" data-group-id="5648305149-1">)</samp><samp class="w"> </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">URI</samp><samp class="o">.</samp><samp class="n">to_string</samp><samp class="p" data-group-id="5648305149-3">(</samp><samp class="p" data-group-id="5648305149-3">)</samp><samp class="w">
</samp><samp class="s">&quot;http://example.com/foo/my-path?x=1&quot;</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">URI</samp><samp class="o">.</samp><samp class="n">append_path</samp><samp class="p" data-group-id="5648305149-4">(</samp><samp class="nc">URI</samp><samp class="o">.</samp><samp class="n">parse</samp><samp class="p" data-group-id="5648305149-5">(</samp><samp class="s">&quot;http://example.com&quot;</samp><samp class="p" data-group-id="5648305149-5">)</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;my-path&quot;</samp><samp class="p" data-group-id="5648305149-4">)</samp><samp class="w">
</samp><samp class="gt">** (ArgumentError) path must start with &quot;/&quot;, got: &quot;my-path&quot;</samp></code></pre>
  </section>
</section>
<section class="detail" id="append_query/2">

  <div class="detail-header">
    <a href="#append_query/2" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">append_query(uri, query)</h1>

        <span class="note">(since 1.14.0)</span>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/uri.ex#L987" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> append_query(<a href="#t:t/0">t</a>(), <a href="typespecs.xhtml#built-in-types">binary</a>()) :: <a href="#t:t/0">t</a>()</pre>

      </div>

<p>Appends <code class="inline">query</code> to the given <code class="inline">uri</code>.</p><p>The given <code class="inline">query</code> is not automatically encoded, use <a href="#encode/2"><code class="inline">encode/2</code></a> or <a href="#encode_www_form/1"><code class="inline">encode_www_form/1</code></a>.</p><h2 id="append_query/2-examples" class="section-heading"><a href="#append_query/2-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">URI</samp><samp class="o">.</samp><samp class="n">append_query</samp><samp class="p" data-group-id="8047732263-1">(</samp><samp class="nc">URI</samp><samp class="o">.</samp><samp class="n">parse</samp><samp class="p" data-group-id="8047732263-2">(</samp><samp class="s">&quot;http://example.com/&quot;</samp><samp class="p" data-group-id="8047732263-2">)</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;x=1&quot;</samp><samp class="p" data-group-id="8047732263-1">)</samp><samp class="w"> </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">URI</samp><samp class="o">.</samp><samp class="n">to_string</samp><samp class="p" data-group-id="8047732263-3">(</samp><samp class="p" data-group-id="8047732263-3">)</samp><samp class="w">
</samp><samp class="s">&quot;http://example.com/?x=1&quot;</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">URI</samp><samp class="o">.</samp><samp class="n">append_query</samp><samp class="p" data-group-id="8047732263-4">(</samp><samp class="nc">URI</samp><samp class="o">.</samp><samp class="n">parse</samp><samp class="p" data-group-id="8047732263-5">(</samp><samp class="s">&quot;http://example.com/?x=1&quot;</samp><samp class="p" data-group-id="8047732263-5">)</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;y=2&quot;</samp><samp class="p" data-group-id="8047732263-4">)</samp><samp class="w"> </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">URI</samp><samp class="o">.</samp><samp class="n">to_string</samp><samp class="p" data-group-id="8047732263-6">(</samp><samp class="p" data-group-id="8047732263-6">)</samp><samp class="w">
</samp><samp class="s">&quot;http://example.com/?x=1&amp;y=2&quot;</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">URI</samp><samp class="o">.</samp><samp class="n">append_query</samp><samp class="p" data-group-id="8047732263-7">(</samp><samp class="nc">URI</samp><samp class="o">.</samp><samp class="n">parse</samp><samp class="p" data-group-id="8047732263-8">(</samp><samp class="s">&quot;http://example.com/?x=1&quot;</samp><samp class="p" data-group-id="8047732263-8">)</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;x=2&quot;</samp><samp class="p" data-group-id="8047732263-7">)</samp><samp class="w"> </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">URI</samp><samp class="o">.</samp><samp class="n">to_string</samp><samp class="p" data-group-id="8047732263-9">(</samp><samp class="p" data-group-id="8047732263-9">)</samp><samp class="w">
</samp><samp class="s">&quot;http://example.com/?x=1&amp;x=2&quot;</samp></code></pre>
  </section>
</section>
<section class="detail" id="char_reserved?/1">

  <div class="detail-header">
    <a href="#char_reserved?/1" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">char_reserved?(character)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/uri.ex#L325" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> char_reserved?(<a href="typespecs.xhtml#built-in-types">byte</a>()) :: <a href="typespecs.xhtml#built-in-types">boolean</a>()</pre>

      </div>

<p>Checks if <code class="inline">character</code> is a reserved one in a URI.</p><p>As specified in <a href="https://tools.ietf.org/html/rfc3986#section-2.2">RFC 3986, section 2.2</a>,
the following characters are reserved: <code class="inline">:</code>, <code class="inline">/</code>, <code class="inline">?</code>, <code class="inline">#</code>, <code class="inline">[</code>, <code class="inline">]</code>, <code class="inline">@</code>, <code class="inline">!</code>, <code class="inline">$</code>, <code class="inline">&amp;</code>, <code class="inline">'</code>, <code class="inline">(</code>, <code class="inline">)</code>, <code class="inline">*</code>, <code class="inline">+</code>, <code class="inline">,</code>, <code class="inline">;</code>, <code class="inline">=</code></p><h2 id="char_reserved?/1-examples" class="section-heading"><a href="#char_reserved?/1-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">URI</samp><samp class="o">.</samp><samp class="n">char_reserved?</samp><samp class="p" data-group-id="9845204365-1">(</samp><samp class="sc">?+</samp><samp class="p" data-group-id="9845204365-1">)</samp><samp class="w">
</samp><samp class="no">true</samp></code></pre>
  </section>
</section>
<section class="detail" id="char_unescaped?/1">

  <div class="detail-header">
    <a href="#char_unescaped?/1" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">char_unescaped?(character)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/uri.ex#L363" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> char_unescaped?(<a href="typespecs.xhtml#built-in-types">byte</a>()) :: <a href="typespecs.xhtml#built-in-types">boolean</a>()</pre>

      </div>

<p>Checks if <code class="inline">character</code> is allowed unescaped in a URI.</p><p>This is the default used by <a href="#encode/2"><code class="inline">URI.encode/2</code></a> where both
<a href="#char_reserved?/1">reserved</a> and <a href="#char_unreserved?/1">unreserved characters</a>
are kept unescaped.</p><h2 id="char_unescaped?/1-examples" class="section-heading"><a href="#char_unescaped?/1-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">URI</samp><samp class="o">.</samp><samp class="n">char_unescaped?</samp><samp class="p" data-group-id="0769852945-1">(</samp><samp class="sc">?{</samp><samp class="p" data-group-id="0769852945-1">)</samp><samp class="w">
</samp><samp class="no">false</samp></code></pre>
  </section>
</section>
<section class="detail" id="char_unreserved?/1">

  <div class="detail-header">
    <a href="#char_unreserved?/1" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">char_unreserved?(character)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/uri.ex#L345" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> char_unreserved?(<a href="typespecs.xhtml#built-in-types">byte</a>()) :: <a href="typespecs.xhtml#built-in-types">boolean</a>()</pre>

      </div>

<p>Checks if <code class="inline">character</code> is an unreserved one in a URI.</p><p>As specified in <a href="https://tools.ietf.org/html/rfc3986#section-2.3">RFC 3986, section 2.3</a>,
the following characters are unreserved:</p><ul><li>Alphanumeric characters: <code class="inline">A-Z</code>, <code class="inline">a-z</code>, <code class="inline">0-9</code></li><li><code class="inline">~</code>, <code class="inline">_</code>, <code class="inline">-</code>, <code class="inline">.</code></li></ul><h2 id="char_unreserved?/1-examples" class="section-heading"><a href="#char_unreserved?/1-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">URI</samp><samp class="o">.</samp><samp class="n">char_unreserved?</samp><samp class="p" data-group-id="8128802070-1">(</samp><samp class="sc">?_</samp><samp class="p" data-group-id="8128802070-1">)</samp><samp class="w">
</samp><samp class="no">true</samp></code></pre>
  </section>
</section>
<section class="detail" id="decode/1">

  <div class="detail-header">
    <a href="#decode/1" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">decode(uri)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/uri.ex#L451" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> decode(<a href="typespecs.xhtml#built-in-types">binary</a>()) :: <a href="typespecs.xhtml#built-in-types">binary</a>()</pre>

      </div>

<p>Percent-unescapes a URI.</p><h2 id="decode/1-examples" class="section-heading"><a href="#decode/1-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">URI</samp><samp class="o">.</samp><samp class="n">decode</samp><samp class="p" data-group-id="1603255989-1">(</samp><samp class="s">&quot;https%3A%2F%2Felixir-lang.org&quot;</samp><samp class="p" data-group-id="1603255989-1">)</samp><samp class="w">
</samp><samp class="s">&quot;https://elixir-lang.org&quot;</samp></code></pre>
  </section>
</section>
<section class="detail" id="decode_query/3">

    <span id="decode_query/1"></span>

    <span id="decode_query/2"></span>

  <div class="detail-header">
    <a href="#decode_query/3" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">decode_query(query, map \\ %{}, encoding \\ :www_form)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/uri.ex#L202" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> decode_query(<a href="typespecs.xhtml#built-in-types">binary</a>(), %{optional(<a href="typespecs.xhtml#built-in-types">binary</a>()) =&gt; <a href="typespecs.xhtml#built-in-types">binary</a>()}, :rfc3986 | :www_form) ::
  %{
    optional(<a href="typespecs.xhtml#built-in-types">binary</a>()) =&gt; <a href="typespecs.xhtml#built-in-types">binary</a>()
  }</pre>

      </div>

<p>Decodes <code class="inline">query</code> into a map.</p><p>Given a query string in the form of <code class="inline">key1=value1&amp;key2=value2...</code>, this
function inserts each key-value pair in the query string as one entry in the
given <code class="inline">map</code>. Keys and values in the resulting map will be binaries. Keys and
values will be percent-unescaped.</p><p>You can specify one of the following <code class="inline">encoding</code> options:</p><ul><li><p><code class="inline">:www_form</code> - (default, since v1.12.0) keys and values are decoded as per
<a href="#decode_www_form/1"><code class="inline">decode_www_form/1</code></a>. This is the format typically used by browsers on
query strings and form data. It decodes &quot;+&quot; as &quot; &quot;.</p></li><li><p><code class="inline">:rfc3986</code> - (since v1.12.0) keys and values are decoded as per
<a href="#decode/1"><code class="inline">decode/1</code></a>. The result is the same as <code class="inline">:www_form</code> except for leaving &quot;+&quot;
as is in line with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>.</p></li></ul><p>Encoding defaults to <code class="inline">:www_form</code> for backward compatibility.</p><p>Use <a href="#query_decoder/1"><code class="inline">query_decoder/1</code></a> if you want to iterate over each value manually.</p><h2 id="decode_query/3-examples" class="section-heading"><a href="#decode_query/3-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">URI</samp><samp class="o">.</samp><samp class="n">decode_query</samp><samp class="p" data-group-id="7875445420-1">(</samp><samp class="s">&quot;foo=1&amp;bar=2&quot;</samp><samp class="p" data-group-id="7875445420-1">)</samp><samp class="w">
</samp><samp class="p" data-group-id="7875445420-2">%{</samp><samp class="s">&quot;bar&quot;</samp><samp class="w"> </samp><samp class="p">=&gt;</samp><samp class="w"> </samp><samp class="s">&quot;2&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;foo&quot;</samp><samp class="w"> </samp><samp class="p">=&gt;</samp><samp class="w"> </samp><samp class="s">&quot;1&quot;</samp><samp class="p" data-group-id="7875445420-2">}</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">URI</samp><samp class="o">.</samp><samp class="n">decode_query</samp><samp class="p" data-group-id="7875445420-3">(</samp><samp class="s">&quot;percent=oh+yes%21&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="7875445420-4">%{</samp><samp class="s">&quot;starting&quot;</samp><samp class="w"> </samp><samp class="p">=&gt;</samp><samp class="w"> </samp><samp class="s">&quot;map&quot;</samp><samp class="p" data-group-id="7875445420-4">}</samp><samp class="p" data-group-id="7875445420-3">)</samp><samp class="w">
</samp><samp class="p" data-group-id="7875445420-5">%{</samp><samp class="s">&quot;percent&quot;</samp><samp class="w"> </samp><samp class="p">=&gt;</samp><samp class="w"> </samp><samp class="s">&quot;oh yes!&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;starting&quot;</samp><samp class="w"> </samp><samp class="p">=&gt;</samp><samp class="w"> </samp><samp class="s">&quot;map&quot;</samp><samp class="p" data-group-id="7875445420-5">}</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">URI</samp><samp class="o">.</samp><samp class="n">decode_query</samp><samp class="p" data-group-id="7875445420-6">(</samp><samp class="s">&quot;percent=oh+yes%21&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="7875445420-7">%{</samp><samp class="p" data-group-id="7875445420-7">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:rfc3986</samp><samp class="p" data-group-id="7875445420-6">)</samp><samp class="w">
</samp><samp class="p" data-group-id="7875445420-8">%{</samp><samp class="s">&quot;percent&quot;</samp><samp class="w"> </samp><samp class="p">=&gt;</samp><samp class="w"> </samp><samp class="s">&quot;oh+yes!&quot;</samp><samp class="p" data-group-id="7875445420-8">}</samp></code></pre>
  </section>
</section>
<section class="detail" id="decode_www_form/1">

  <div class="detail-header">
    <a href="#decode_www_form/1" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">decode_www_form(string)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/uri.ex#L469" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> decode_www_form(<a href="typespecs.xhtml#built-in-types">binary</a>()) :: <a href="typespecs.xhtml#built-in-types">binary</a>()</pre>

      </div>

<p>Decodes <code class="inline">string</code> as &quot;x-www-form-urlencoded&quot;.</p><p>Note &quot;x-www-form-urlencoded&quot; is not specified as part of
RFC 3986. However, it is a commonly used format to encode
query strings and form data by browsers.</p><h2 id="decode_www_form/1-examples" class="section-heading"><a href="#decode_www_form/1-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">URI</samp><samp class="o">.</samp><samp class="n">decode_www_form</samp><samp class="p" data-group-id="3464806085-1">(</samp><samp class="s">&quot;%3Call+in%2F&quot;</samp><samp class="p" data-group-id="3464806085-1">)</samp><samp class="w">
</samp><samp class="s">&quot;&lt;all in/&quot;</samp></code></pre>
  </section>
</section>
<section class="detail" id="default_port/1">

  <div class="detail-header">
    <a href="#default_port/1" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">default_port(scheme)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/uri.ex#L80" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> default_port(<a href="typespecs.xhtml#built-in-types">binary</a>()) :: nil | <a href="typespecs.xhtml#basic-types">non_neg_integer</a>()</pre>

      </div>

<p>Returns the default port for a given <code class="inline">scheme</code>.</p><p>If the scheme is unknown to the <a href="URI.xhtml"><code class="inline">URI</code></a> module, this function returns
<code class="inline">nil</code>. The default port for any scheme can be configured globally
via <a href="#default_port/2"><code class="inline">default_port/2</code></a>.</p><h2 id="default_port/1-examples" class="section-heading"><a href="#default_port/1-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">URI</samp><samp class="o">.</samp><samp class="n">default_port</samp><samp class="p" data-group-id="3372267797-1">(</samp><samp class="s">&quot;ftp&quot;</samp><samp class="p" data-group-id="3372267797-1">)</samp><samp class="w">
</samp><samp class="mi">21</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">URI</samp><samp class="o">.</samp><samp class="n">default_port</samp><samp class="p" data-group-id="3372267797-2">(</samp><samp class="s">&quot;ponzi&quot;</samp><samp class="p" data-group-id="3372267797-2">)</samp><samp class="w">
</samp><samp class="no">nil</samp></code></pre>
  </section>
</section>
<section class="detail" id="default_port/2">

  <div class="detail-header">
    <a href="#default_port/2" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">default_port(scheme, port)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/uri.ex#L97" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> default_port(<a href="typespecs.xhtml#built-in-types">binary</a>(), <a href="typespecs.xhtml#basic-types">non_neg_integer</a>()) :: :ok</pre>

      </div>

<p>Registers the default <code class="inline">port</code> for the given <code class="inline">scheme</code>.</p><p>After this function is called, <code class="inline">port</code> will be returned by
<a href="#default_port/1"><code class="inline">default_port/1</code></a> for the given scheme <code class="inline">scheme</code>. Note that this function
changes the default port for the given <code class="inline">scheme</code> <em>globally</em>, meaning for
every application.</p><p>It is recommended for this function to be invoked in your
application's start callback in case you want to register
new URIs.</p>
  </section>
</section>
<section class="detail" id="encode/2">

    <span id="encode/1"></span>

  <div class="detail-header">
    <a href="#encode/2" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">encode(string, predicate \\ &amp;char_unescaped?/1)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/uri.ex#L402" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> encode(<a href="typespecs.xhtml#built-in-types">binary</a>(), (<a href="typespecs.xhtml#built-in-types">byte</a>() -&gt; <a href="typespecs.xhtml#built-in-types">as_boolean</a>(<a href="typespecs.xhtml#built-in-types">term</a>()))) :: <a href="typespecs.xhtml#built-in-types">binary</a>()</pre>

      </div>

<p>Percent-encodes all characters that require escaping in <code class="inline">string</code>.</p><p>The optional <code class="inline">predicate</code> argument specifies a function used to detect whether
a byte in the <code class="inline">string</code> should be escaped:</p><ul><li>if the function returns a truthy value, the byte should be kept as-is.</li><li>if the function returns a falsy value, the byte should be escaped.</li></ul><p>The <code class="inline">predicate</code> argument can use some built-in functions:</p><ul><li><a href="#char_unescaped?/1"><code class="inline">URI.char_unescaped?/1</code></a> (default) - reserved characters (such as <code class="inline">:</code>
and <code class="inline">/</code>) or unreserved (such as letters and numbers) are kept as-is.
It's typically used to encode the whole URI.</li><li><a href="#char_unreserved?/1"><code class="inline">URI.char_unreserved?/1</code></a> - unreserved characters (such as letters and
numbers) are kept as-is. It's typically used to encode components in
a URI, such as query or fragment.</li><li><a href="#char_reserved?/1"><code class="inline">URI.char_reserved?/1</code></a> - Reserved characters (such as <code class="inline">:</code> and <code class="inline">/</code>) are
kept as-is.</li></ul><p>And, you can also use custom functions.</p><p>See <a href="#encode_www_form/1"><code class="inline">encode_www_form/1</code></a> if you are interested in encoding <code class="inline">string</code> as
&quot;x-www-form-urlencoded&quot;.</p><h2 id="encode/2-examples" class="section-heading"><a href="#encode/2-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">URI</samp><samp class="o">.</samp><samp class="n">encode</samp><samp class="p" data-group-id="6698345244-1">(</samp><samp class="s">&quot;ftp://s-ite.tld/?value=put it+й&quot;</samp><samp class="p" data-group-id="6698345244-1">)</samp><samp class="w">
</samp><samp class="s">&quot;ftp://s-ite.tld/?value=put%20it+%D0%B9&quot;</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">URI</samp><samp class="o">.</samp><samp class="n">encode</samp><samp class="p" data-group-id="6698345244-2">(</samp><samp class="s">&quot;a string&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="o">&amp;</samp><samp class="p" data-group-id="6698345244-3">(</samp><samp class="ni">&amp;1</samp><samp class="w"> </samp><samp class="o">!=</samp><samp class="w"> </samp><samp class="sc">?i</samp><samp class="p" data-group-id="6698345244-3">)</samp><samp class="p" data-group-id="6698345244-2">)</samp><samp class="w">
</samp><samp class="s">&quot;a str%69ng&quot;</samp></code></pre>
  </section>
</section>
<section class="detail" id="encode_query/2">

    <span id="encode_query/1"></span>

  <div class="detail-header">
    <a href="#encode_query/2" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">encode_query(enumerable, encoding \\ :www_form)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/uri.ex#L144" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> encode_query(<a href="Enumerable.xhtml#t:t/0">Enumerable.t</a>(), :rfc3986 | :www_form) :: <a href="typespecs.xhtml#built-in-types">binary</a>()</pre>

      </div>

<p>Encodes <code class="inline">enumerable</code> into a query string using <code class="inline">encoding</code>.</p><p>Takes an enumerable that enumerates as a list of two-element
tuples (for instance, a map or a keyword list) and returns a string
in the form of <code class="inline">key1=value1&amp;key2=value2...</code>.</p><p>Keys and values can be any term that implements the <a href="String.Chars.xhtml"><code class="inline">String.Chars</code></a>
protocol with the exception of lists, which are explicitly forbidden.</p><p>You can specify one of the following <code class="inline">encoding</code> strategies:</p><ul><li><p><code class="inline">:www_form</code> - (default, since v1.12.0) keys and values are URL encoded as
per <a href="#encode_www_form/1"><code class="inline">encode_www_form/1</code></a>. This is the format typically used by browsers on
query strings and form data. It encodes &quot; &quot; as &quot;+&quot;.</p></li><li><p><code class="inline">:rfc3986</code> - (since v1.12.0) the same as <code class="inline">:www_form</code> except it encodes
&quot; &quot; as &quot;%20&quot; according <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>.
This is the best option if you are encoding in a non-browser situation,
since encoding spaces as &quot;+&quot; can be ambiguous to URI parsers. This can
inadvertently lead to spaces being interpreted as literal plus signs.</p></li></ul><p>Encoding defaults to <code class="inline">:www_form</code> for backward compatibility.</p><h2 id="encode_query/2-examples" class="section-heading"><a href="#encode_query/2-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="n">query</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="p" data-group-id="8216939939-1">%{</samp><samp class="s">&quot;foo&quot;</samp><samp class="w"> </samp><samp class="p">=&gt;</samp><samp class="w"> </samp><samp class="mi">1</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;bar&quot;</samp><samp class="w"> </samp><samp class="p">=&gt;</samp><samp class="w"> </samp><samp class="mi">2</samp><samp class="p" data-group-id="8216939939-1">}</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">URI</samp><samp class="o">.</samp><samp class="n">encode_query</samp><samp class="p" data-group-id="8216939939-2">(</samp><samp class="n">query</samp><samp class="p" data-group-id="8216939939-2">)</samp><samp class="w">
</samp><samp class="s">&quot;bar=2&amp;foo=1&quot;</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="n">query</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="p" data-group-id="8216939939-3">%{</samp><samp class="s">&quot;key&quot;</samp><samp class="w"> </samp><samp class="p">=&gt;</samp><samp class="w"> </samp><samp class="s">&quot;value with spaces&quot;</samp><samp class="p" data-group-id="8216939939-3">}</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">URI</samp><samp class="o">.</samp><samp class="n">encode_query</samp><samp class="p" data-group-id="8216939939-4">(</samp><samp class="n">query</samp><samp class="p" data-group-id="8216939939-4">)</samp><samp class="w">
</samp><samp class="s">&quot;key=value+with+spaces&quot;</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="n">query</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="p" data-group-id="8216939939-5">%{</samp><samp class="s">&quot;key&quot;</samp><samp class="w"> </samp><samp class="p">=&gt;</samp><samp class="w"> </samp><samp class="s">&quot;value with spaces&quot;</samp><samp class="p" data-group-id="8216939939-5">}</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">URI</samp><samp class="o">.</samp><samp class="n">encode_query</samp><samp class="p" data-group-id="8216939939-6">(</samp><samp class="n">query</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:rfc3986</samp><samp class="p" data-group-id="8216939939-6">)</samp><samp class="w">
</samp><samp class="s">&quot;key=value%20with%20spaces&quot;</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">URI</samp><samp class="o">.</samp><samp class="n">encode_query</samp><samp class="p" data-group-id="8216939939-7">(</samp><samp class="p" data-group-id="8216939939-8">%{</samp><samp class="ss">key</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="8216939939-9">[</samp><samp class="ss">:a</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:list</samp><samp class="p" data-group-id="8216939939-9">]</samp><samp class="p" data-group-id="8216939939-8">}</samp><samp class="p" data-group-id="8216939939-7">)</samp><samp class="w">
</samp><samp class="gt">** (ArgumentError) encode_query/2 values cannot be lists, got: [:a, :list]</samp></code></pre>
  </section>
</section>
<section class="detail" id="encode_www_form/1">

  <div class="detail-header">
    <a href="#encode_www_form/1" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">encode_www_form(string)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/uri.ex#L421" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> encode_www_form(<a href="typespecs.xhtml#built-in-types">binary</a>()) :: <a href="typespecs.xhtml#built-in-types">binary</a>()</pre>

      </div>

<p>Encodes <code class="inline">string</code> as &quot;x-www-form-urlencoded&quot;.</p><p>Note &quot;x-www-form-urlencoded&quot; is not specified as part of
RFC 3986. However, it is a commonly used format to encode
query strings and form data by browsers.</p><h2 id="encode_www_form/1-example" class="section-heading"><a href="#encode_www_form/1-example" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Example</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">URI</samp><samp class="o">.</samp><samp class="n">encode_www_form</samp><samp class="p" data-group-id="7193116762-1">(</samp><samp class="s">&quot;put: it+й&quot;</samp><samp class="p" data-group-id="7193116762-1">)</samp><samp class="w">
</samp><samp class="s">&quot;put%3A+it%2B%D0%B9&quot;</samp></code></pre>
  </section>
</section>
<section class="detail" id="merge/2">

  <div class="detail-header">
    <a href="#merge/2" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">merge(uri, rel)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/uri.ex#L900" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> merge(<a href="#t:t/0">t</a>() | <a href="typespecs.xhtml#built-in-types">binary</a>(), <a href="#t:t/0">t</a>() | <a href="typespecs.xhtml#built-in-types">binary</a>()) :: <a href="#t:t/0">t</a>()</pre>

      </div>

<p>Merges two URIs.</p><p>This function merges two URIs as per
<a href="https://tools.ietf.org/html/rfc3986#section-5.2">RFC 3986, section 5.2</a>.</p><h2 id="merge/2-examples" class="section-heading"><a href="#merge/2-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">URI</samp><samp class="o">.</samp><samp class="n">merge</samp><samp class="p" data-group-id="1876037372-1">(</samp><samp class="nc">URI</samp><samp class="o">.</samp><samp class="n">parse</samp><samp class="p" data-group-id="1876037372-2">(</samp><samp class="s">&quot;http://google.com&quot;</samp><samp class="p" data-group-id="1876037372-2">)</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;/query&quot;</samp><samp class="p" data-group-id="1876037372-1">)</samp><samp class="w"> </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="n">to_string</samp><samp class="p" data-group-id="1876037372-3">(</samp><samp class="p" data-group-id="1876037372-3">)</samp><samp class="w">
</samp><samp class="s">&quot;http://google.com/query&quot;</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">URI</samp><samp class="o">.</samp><samp class="n">merge</samp><samp class="p" data-group-id="1876037372-4">(</samp><samp class="s">&quot;http://example.com&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;http://google.com&quot;</samp><samp class="p" data-group-id="1876037372-4">)</samp><samp class="w"> </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="n">to_string</samp><samp class="p" data-group-id="1876037372-5">(</samp><samp class="p" data-group-id="1876037372-5">)</samp><samp class="w">
</samp><samp class="s">&quot;http://google.com&quot;</samp></code></pre>
  </section>
</section>
<section class="detail" id="new/1">

  <div class="detail-header">
    <a href="#new/1" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">new(uri)</h1>

        <span class="note">(since 1.13.0)</span>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/uri.ex#L602" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> new(<a href="#t:t/0">t</a>() | <a href="String.xhtml#t:t/0">String.t</a>()) :: {:ok, <a href="#t:t/0">t</a>()} | {:error, <a href="String.xhtml#t:t/0">String.t</a>()}</pre>

      </div>

<p>Creates a new URI struct from a URI or a string.</p><p>If a <code class="inline">%URI{}</code> struct is given, it returns <code class="inline">{:ok, uri}</code>. If a string is
given, it will parse and validate it. If the string is valid, it returns
<code class="inline">{:ok, uri}</code>, otherwise it returns <code class="inline">{:error, part}</code> with the invalid part
of the URI. For parsing URIs without further validation, see <a href="#parse/1"><code class="inline">parse/1</code></a>.</p><p>This function can parse both absolute and relative URLs. You can check
if a URI is absolute or relative by checking if the <code class="inline">scheme</code> field is
<code class="inline">nil</code> or not.</p><p>When a URI is given without a port, the value returned by <a href="#default_port/1"><code class="inline">URI.default_port/1</code></a>
for the URI's scheme is used for the <code class="inline">:port</code> field. The scheme is also
normalized to lowercase.</p><h2 id="new/1-examples" class="section-heading"><a href="#new/1-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">URI</samp><samp class="o">.</samp><samp class="n">new</samp><samp class="p" data-group-id="7408143700-1">(</samp><samp class="s">&quot;https://elixir-lang.org/&quot;</samp><samp class="p" data-group-id="7408143700-1">)</samp><samp class="w">
</samp><samp class="p" data-group-id="7408143700-2">{</samp><samp class="ss">:ok</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="7408143700-3">%</samp><samp class="nc" data-group-id="7408143700-3">URI</samp><samp class="p" data-group-id="7408143700-3">{</samp><samp class="w">
  </samp><samp class="ss">fragment</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">nil</samp><samp class="p">,</samp><samp class="w">
  </samp><samp class="ss">host</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;elixir-lang.org&quot;</samp><samp class="p">,</samp><samp class="w">
  </samp><samp class="ss">path</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;/&quot;</samp><samp class="p">,</samp><samp class="w">
  </samp><samp class="ss">port</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">443</samp><samp class="p">,</samp><samp class="w">
  </samp><samp class="ss">query</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">nil</samp><samp class="p">,</samp><samp class="w">
  </samp><samp class="ss">scheme</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;https&quot;</samp><samp class="p">,</samp><samp class="w">
  </samp><samp class="ss">userinfo</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">nil</samp><samp class="w">
</samp><samp class="p" data-group-id="7408143700-3">}</samp><samp class="p" data-group-id="7408143700-2">}</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">URI</samp><samp class="o">.</samp><samp class="n">new</samp><samp class="p" data-group-id="7408143700-4">(</samp><samp class="s">&quot;//elixir-lang.org/&quot;</samp><samp class="p" data-group-id="7408143700-4">)</samp><samp class="w">
</samp><samp class="p" data-group-id="7408143700-5">{</samp><samp class="ss">:ok</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="7408143700-6">%</samp><samp class="nc" data-group-id="7408143700-6">URI</samp><samp class="p" data-group-id="7408143700-6">{</samp><samp class="w">
  </samp><samp class="ss">fragment</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">nil</samp><samp class="p">,</samp><samp class="w">
  </samp><samp class="ss">host</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;elixir-lang.org&quot;</samp><samp class="p">,</samp><samp class="w">
  </samp><samp class="ss">path</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;/&quot;</samp><samp class="p">,</samp><samp class="w">
  </samp><samp class="ss">port</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">nil</samp><samp class="p">,</samp><samp class="w">
  </samp><samp class="ss">query</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">nil</samp><samp class="p">,</samp><samp class="w">
  </samp><samp class="ss">scheme</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">nil</samp><samp class="p">,</samp><samp class="w">
  </samp><samp class="ss">userinfo</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">nil</samp><samp class="w">
</samp><samp class="p" data-group-id="7408143700-6">}</samp><samp class="p" data-group-id="7408143700-5">}</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">URI</samp><samp class="o">.</samp><samp class="n">new</samp><samp class="p" data-group-id="7408143700-7">(</samp><samp class="s">&quot;/foo/bar&quot;</samp><samp class="p" data-group-id="7408143700-7">)</samp><samp class="w">
</samp><samp class="p" data-group-id="7408143700-8">{</samp><samp class="ss">:ok</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="7408143700-9">%</samp><samp class="nc" data-group-id="7408143700-9">URI</samp><samp class="p" data-group-id="7408143700-9">{</samp><samp class="w">
  </samp><samp class="ss">fragment</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">nil</samp><samp class="p">,</samp><samp class="w">
  </samp><samp class="ss">host</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">nil</samp><samp class="p">,</samp><samp class="w">
  </samp><samp class="ss">path</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;/foo/bar&quot;</samp><samp class="p">,</samp><samp class="w">
  </samp><samp class="ss">port</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">nil</samp><samp class="p">,</samp><samp class="w">
  </samp><samp class="ss">query</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">nil</samp><samp class="p">,</samp><samp class="w">
  </samp><samp class="ss">scheme</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">nil</samp><samp class="p">,</samp><samp class="w">
  </samp><samp class="ss">userinfo</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">nil</samp><samp class="w">
</samp><samp class="p" data-group-id="7408143700-9">}</samp><samp class="p" data-group-id="7408143700-8">}</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">URI</samp><samp class="o">.</samp><samp class="n">new</samp><samp class="p" data-group-id="7408143700-10">(</samp><samp class="s">&quot;foo/bar&quot;</samp><samp class="p" data-group-id="7408143700-10">)</samp><samp class="w">
</samp><samp class="p" data-group-id="7408143700-11">{</samp><samp class="ss">:ok</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="7408143700-12">%</samp><samp class="nc" data-group-id="7408143700-12">URI</samp><samp class="p" data-group-id="7408143700-12">{</samp><samp class="w">
  </samp><samp class="ss">fragment</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">nil</samp><samp class="p">,</samp><samp class="w">
  </samp><samp class="ss">host</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">nil</samp><samp class="p">,</samp><samp class="w">
  </samp><samp class="ss">path</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;foo/bar&quot;</samp><samp class="p">,</samp><samp class="w">
  </samp><samp class="ss">port</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">nil</samp><samp class="p">,</samp><samp class="w">
  </samp><samp class="ss">query</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">nil</samp><samp class="p">,</samp><samp class="w">
  </samp><samp class="ss">scheme</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">nil</samp><samp class="p">,</samp><samp class="w">
  </samp><samp class="ss">userinfo</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">nil</samp><samp class="w">
</samp><samp class="p" data-group-id="7408143700-12">}</samp><samp class="p" data-group-id="7408143700-11">}</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">URI</samp><samp class="o">.</samp><samp class="n">new</samp><samp class="p" data-group-id="7408143700-13">(</samp><samp class="s">&quot;//[fe80::]/&quot;</samp><samp class="p" data-group-id="7408143700-13">)</samp><samp class="w">
</samp><samp class="p" data-group-id="7408143700-14">{</samp><samp class="ss">:ok</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="7408143700-15">%</samp><samp class="nc" data-group-id="7408143700-15">URI</samp><samp class="p" data-group-id="7408143700-15">{</samp><samp class="w">
  </samp><samp class="ss">fragment</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">nil</samp><samp class="p">,</samp><samp class="w">
  </samp><samp class="ss">host</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;fe80::&quot;</samp><samp class="p">,</samp><samp class="w">
  </samp><samp class="ss">path</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;/&quot;</samp><samp class="p">,</samp><samp class="w">
  </samp><samp class="ss">port</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">nil</samp><samp class="p">,</samp><samp class="w">
  </samp><samp class="ss">query</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">nil</samp><samp class="p">,</samp><samp class="w">
  </samp><samp class="ss">scheme</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">nil</samp><samp class="p">,</samp><samp class="w">
  </samp><samp class="ss">userinfo</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">nil</samp><samp class="w">
</samp><samp class="p" data-group-id="7408143700-15">}</samp><samp class="p" data-group-id="7408143700-14">}</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">URI</samp><samp class="o">.</samp><samp class="n">new</samp><samp class="p" data-group-id="7408143700-16">(</samp><samp class="s">&quot;https:?query&quot;</samp><samp class="p" data-group-id="7408143700-16">)</samp><samp class="w">
</samp><samp class="p" data-group-id="7408143700-17">{</samp><samp class="ss">:ok</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="7408143700-18">%</samp><samp class="nc" data-group-id="7408143700-18">URI</samp><samp class="p" data-group-id="7408143700-18">{</samp><samp class="w">
  </samp><samp class="ss">fragment</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">nil</samp><samp class="p">,</samp><samp class="w">
  </samp><samp class="ss">host</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">nil</samp><samp class="p">,</samp><samp class="w">
  </samp><samp class="ss">path</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">nil</samp><samp class="p">,</samp><samp class="w">
  </samp><samp class="ss">port</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">443</samp><samp class="p">,</samp><samp class="w">
  </samp><samp class="ss">query</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;query&quot;</samp><samp class="p">,</samp><samp class="w">
  </samp><samp class="ss">scheme</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;https&quot;</samp><samp class="p">,</samp><samp class="w">
  </samp><samp class="ss">userinfo</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">nil</samp><samp class="w">
</samp><samp class="p" data-group-id="7408143700-18">}</samp><samp class="p" data-group-id="7408143700-17">}</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">URI</samp><samp class="o">.</samp><samp class="n">new</samp><samp class="p" data-group-id="7408143700-19">(</samp><samp class="s">&quot;/invalid_greater_than_in_path/&gt;&quot;</samp><samp class="p" data-group-id="7408143700-19">)</samp><samp class="w">
</samp><samp class="p" data-group-id="7408143700-20">{</samp><samp class="ss">:error</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;&gt;&quot;</samp><samp class="p" data-group-id="7408143700-20">}</samp></code></pre><p>Giving an existing URI simply returns it wrapped in a tuple:</p><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="p" data-group-id="4098208666-1">{</samp><samp class="ss">:ok</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">uri</samp><samp class="p" data-group-id="4098208666-1">}</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="nc">URI</samp><samp class="o">.</samp><samp class="n">new</samp><samp class="p" data-group-id="4098208666-2">(</samp><samp class="s">&quot;https://elixir-lang.org/&quot;</samp><samp class="p" data-group-id="4098208666-2">)</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">URI</samp><samp class="o">.</samp><samp class="n">new</samp><samp class="p" data-group-id="4098208666-3">(</samp><samp class="n">uri</samp><samp class="p" data-group-id="4098208666-3">)</samp><samp class="w">
</samp><samp class="p" data-group-id="4098208666-4">{</samp><samp class="ss">:ok</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="4098208666-5">%</samp><samp class="nc" data-group-id="4098208666-5">URI</samp><samp class="p" data-group-id="4098208666-5">{</samp><samp class="w">
  </samp><samp class="ss">fragment</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">nil</samp><samp class="p">,</samp><samp class="w">
  </samp><samp class="ss">host</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;elixir-lang.org&quot;</samp><samp class="p">,</samp><samp class="w">
  </samp><samp class="ss">path</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;/&quot;</samp><samp class="p">,</samp><samp class="w">
  </samp><samp class="ss">port</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">443</samp><samp class="p">,</samp><samp class="w">
  </samp><samp class="ss">query</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">nil</samp><samp class="p">,</samp><samp class="w">
  </samp><samp class="ss">scheme</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;https&quot;</samp><samp class="p">,</samp><samp class="w">
  </samp><samp class="ss">userinfo</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">nil</samp><samp class="w">
</samp><samp class="p" data-group-id="4098208666-5">}</samp><samp class="p" data-group-id="4098208666-4">}</samp></code></pre>
  </section>
</section>
<section class="detail" id="new!/1">

  <div class="detail-header">
    <a href="#new!/1" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">new!(uri)</h1>

        <span class="note">(since 1.13.0)</span>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/uri.ex#L646" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> new!(<a href="#t:t/0">t</a>() | <a href="String.xhtml#t:t/0">String.t</a>()) :: <a href="#t:t/0">t</a>()</pre>

      </div>

<p>Similar to <a href="#new/1"><code class="inline">new/1</code></a> but raises <a href="URI.Error.xhtml"><code class="inline">URI.Error</code></a> if an invalid string is given.</p><h2 id="new!/1-examples" class="section-heading"><a href="#new!/1-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">URI</samp><samp class="o">.</samp><samp class="n">new!</samp><samp class="p" data-group-id="8085405604-1">(</samp><samp class="s">&quot;https://elixir-lang.org/&quot;</samp><samp class="p" data-group-id="8085405604-1">)</samp><samp class="w">
</samp><samp class="p" data-group-id="8085405604-2">%</samp><samp class="nc" data-group-id="8085405604-2">URI</samp><samp class="p" data-group-id="8085405604-2">{</samp><samp class="w">
  </samp><samp class="ss">fragment</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">nil</samp><samp class="p">,</samp><samp class="w">
  </samp><samp class="ss">host</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;elixir-lang.org&quot;</samp><samp class="p">,</samp><samp class="w">
  </samp><samp class="ss">path</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;/&quot;</samp><samp class="p">,</samp><samp class="w">
  </samp><samp class="ss">port</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">443</samp><samp class="p">,</samp><samp class="w">
  </samp><samp class="ss">query</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">nil</samp><samp class="p">,</samp><samp class="w">
  </samp><samp class="ss">scheme</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;https&quot;</samp><samp class="p">,</samp><samp class="w">
  </samp><samp class="ss">userinfo</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">nil</samp><samp class="w">
</samp><samp class="p" data-group-id="8085405604-2">}</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">URI</samp><samp class="o">.</samp><samp class="n">new!</samp><samp class="p" data-group-id="8085405604-3">(</samp><samp class="s">&quot;/invalid_greater_than_in_path/&gt;&quot;</samp><samp class="p" data-group-id="8085405604-3">)</samp><samp class="w">
</samp><samp class="gt">** (URI.Error) cannot parse due to reason invalid_uri: &quot;&gt;&quot;</samp></code></pre><p>Giving an existing URI simply returns it:</p><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="n">uri</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="nc">URI</samp><samp class="o">.</samp><samp class="n">new!</samp><samp class="p" data-group-id="0500641269-1">(</samp><samp class="s">&quot;https://elixir-lang.org/&quot;</samp><samp class="p" data-group-id="0500641269-1">)</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">URI</samp><samp class="o">.</samp><samp class="n">new!</samp><samp class="p" data-group-id="0500641269-2">(</samp><samp class="n">uri</samp><samp class="p" data-group-id="0500641269-2">)</samp><samp class="w">
</samp><samp class="p" data-group-id="0500641269-3">%</samp><samp class="nc" data-group-id="0500641269-3">URI</samp><samp class="p" data-group-id="0500641269-3">{</samp><samp class="w">
  </samp><samp class="ss">fragment</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">nil</samp><samp class="p">,</samp><samp class="w">
  </samp><samp class="ss">host</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;elixir-lang.org&quot;</samp><samp class="p">,</samp><samp class="w">
  </samp><samp class="ss">path</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;/&quot;</samp><samp class="p">,</samp><samp class="w">
  </samp><samp class="ss">port</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">443</samp><samp class="p">,</samp><samp class="w">
  </samp><samp class="ss">query</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">nil</samp><samp class="p">,</samp><samp class="w">
  </samp><samp class="ss">scheme</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;https&quot;</samp><samp class="p">,</samp><samp class="w">
  </samp><samp class="ss">userinfo</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">nil</samp><samp class="w">
</samp><samp class="p" data-group-id="0500641269-3">}</samp></code></pre>
  </section>
</section>
<section class="detail" id="parse/1">

  <div class="detail-header">
    <a href="#parse/1" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">parse(uri)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/uri.ex#L783" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> parse(<a href="#t:t/0">t</a>() | <a href="typespecs.xhtml#built-in-types">binary</a>()) :: <a href="#t:t/0">t</a>()</pre>

      </div>

<p>Parses a URI into its components, without further validation.</p><p>This function can parse both absolute and relative URLs. You can check
if a URI is absolute or relative by checking if the <code class="inline">scheme</code> field is
nil or not. Furthermore, this function expects both absolute and
relative URIs to be well-formed and does not perform any validation.
See the &quot;Examples&quot; section below. Use <a href="#new/1"><code class="inline">new/1</code></a> if you want to validate
the URI fields after parsing.</p><p>When a URI is given without a port, the value returned by <a href="#default_port/1"><code class="inline">URI.default_port/1</code></a>
for the URI's scheme is used for the <code class="inline">:port</code> field. The scheme is also
normalized to lowercase.</p><p>If a <code class="inline">%URI{}</code> struct is given to this function, this function returns it
unmodified.</p><section role="note" class="admonition info"><h4 class="admonition-title info"><code class="inline">:authority</code> field</h4><p>This function sets the deprecated field <code class="inline">:authority</code> for backwards-compatibility reasons.</p></section><h2 id="parse/1-examples" class="section-heading"><a href="#parse/1-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">URI</samp><samp class="o">.</samp><samp class="n">parse</samp><samp class="p" data-group-id="5094076143-1">(</samp><samp class="s">&quot;https://elixir-lang.org/&quot;</samp><samp class="p" data-group-id="5094076143-1">)</samp><samp class="w">
</samp><samp class="p" data-group-id="5094076143-2">%</samp><samp class="nc" data-group-id="5094076143-2">URI</samp><samp class="p" data-group-id="5094076143-2">{</samp><samp class="w">
  </samp><samp class="ss">authority</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;elixir-lang.org&quot;</samp><samp class="p">,</samp><samp class="w">
  </samp><samp class="ss">fragment</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">nil</samp><samp class="p">,</samp><samp class="w">
  </samp><samp class="ss">host</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;elixir-lang.org&quot;</samp><samp class="p">,</samp><samp class="w">
  </samp><samp class="ss">path</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;/&quot;</samp><samp class="p">,</samp><samp class="w">
  </samp><samp class="ss">port</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">443</samp><samp class="p">,</samp><samp class="w">
  </samp><samp class="ss">query</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">nil</samp><samp class="p">,</samp><samp class="w">
  </samp><samp class="ss">scheme</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;https&quot;</samp><samp class="p">,</samp><samp class="w">
  </samp><samp class="ss">userinfo</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">nil</samp><samp class="w">
</samp><samp class="p" data-group-id="5094076143-2">}</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">URI</samp><samp class="o">.</samp><samp class="n">parse</samp><samp class="p" data-group-id="5094076143-3">(</samp><samp class="s">&quot;//elixir-lang.org/&quot;</samp><samp class="p" data-group-id="5094076143-3">)</samp><samp class="w">
</samp><samp class="p" data-group-id="5094076143-4">%</samp><samp class="nc" data-group-id="5094076143-4">URI</samp><samp class="p" data-group-id="5094076143-4">{</samp><samp class="w">
  </samp><samp class="ss">authority</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;elixir-lang.org&quot;</samp><samp class="p">,</samp><samp class="w">
  </samp><samp class="ss">fragment</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">nil</samp><samp class="p">,</samp><samp class="w">
  </samp><samp class="ss">host</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;elixir-lang.org&quot;</samp><samp class="p">,</samp><samp class="w">
  </samp><samp class="ss">path</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;/&quot;</samp><samp class="p">,</samp><samp class="w">
  </samp><samp class="ss">port</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">nil</samp><samp class="p">,</samp><samp class="w">
  </samp><samp class="ss">query</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">nil</samp><samp class="p">,</samp><samp class="w">
  </samp><samp class="ss">scheme</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">nil</samp><samp class="p">,</samp><samp class="w">
  </samp><samp class="ss">userinfo</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">nil</samp><samp class="w">
</samp><samp class="p" data-group-id="5094076143-4">}</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">URI</samp><samp class="o">.</samp><samp class="n">parse</samp><samp class="p" data-group-id="5094076143-5">(</samp><samp class="s">&quot;/foo/bar&quot;</samp><samp class="p" data-group-id="5094076143-5">)</samp><samp class="w">
</samp><samp class="p" data-group-id="5094076143-6">%</samp><samp class="nc" data-group-id="5094076143-6">URI</samp><samp class="p" data-group-id="5094076143-6">{</samp><samp class="w">
  </samp><samp class="ss">fragment</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">nil</samp><samp class="p">,</samp><samp class="w">
  </samp><samp class="ss">host</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">nil</samp><samp class="p">,</samp><samp class="w">
  </samp><samp class="ss">path</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;/foo/bar&quot;</samp><samp class="p">,</samp><samp class="w">
  </samp><samp class="ss">port</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">nil</samp><samp class="p">,</samp><samp class="w">
  </samp><samp class="ss">query</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">nil</samp><samp class="p">,</samp><samp class="w">
  </samp><samp class="ss">scheme</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">nil</samp><samp class="p">,</samp><samp class="w">
  </samp><samp class="ss">userinfo</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">nil</samp><samp class="w">
</samp><samp class="p" data-group-id="5094076143-6">}</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">URI</samp><samp class="o">.</samp><samp class="n">parse</samp><samp class="p" data-group-id="5094076143-7">(</samp><samp class="s">&quot;foo/bar&quot;</samp><samp class="p" data-group-id="5094076143-7">)</samp><samp class="w">
</samp><samp class="p" data-group-id="5094076143-8">%</samp><samp class="nc" data-group-id="5094076143-8">URI</samp><samp class="p" data-group-id="5094076143-8">{</samp><samp class="w">
  </samp><samp class="ss">fragment</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">nil</samp><samp class="p">,</samp><samp class="w">
  </samp><samp class="ss">host</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">nil</samp><samp class="p">,</samp><samp class="w">
  </samp><samp class="ss">path</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;foo/bar&quot;</samp><samp class="p">,</samp><samp class="w">
  </samp><samp class="ss">port</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">nil</samp><samp class="p">,</samp><samp class="w">
  </samp><samp class="ss">query</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">nil</samp><samp class="p">,</samp><samp class="w">
  </samp><samp class="ss">scheme</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">nil</samp><samp class="p">,</samp><samp class="w">
  </samp><samp class="ss">userinfo</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">nil</samp><samp class="w">
</samp><samp class="p" data-group-id="5094076143-8">}</samp></code></pre><p>In contrast to <a href="#new/1"><code class="inline">URI.new/1</code></a>, this function will parse poorly-formed
URIs, for example:</p><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">URI</samp><samp class="o">.</samp><samp class="n">parse</samp><samp class="p" data-group-id="9109386015-1">(</samp><samp class="s">&quot;/invalid_greater_than_in_path/&gt;&quot;</samp><samp class="p" data-group-id="9109386015-1">)</samp><samp class="w">
</samp><samp class="p" data-group-id="9109386015-2">%</samp><samp class="nc" data-group-id="9109386015-2">URI</samp><samp class="p" data-group-id="9109386015-2">{</samp><samp class="w">
  </samp><samp class="ss">fragment</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">nil</samp><samp class="p">,</samp><samp class="w">
  </samp><samp class="ss">host</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">nil</samp><samp class="p">,</samp><samp class="w">
  </samp><samp class="ss">path</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;/invalid_greater_than_in_path/&gt;&quot;</samp><samp class="p">,</samp><samp class="w">
  </samp><samp class="ss">port</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">nil</samp><samp class="p">,</samp><samp class="w">
  </samp><samp class="ss">query</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">nil</samp><samp class="p">,</samp><samp class="w">
  </samp><samp class="ss">scheme</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">nil</samp><samp class="p">,</samp><samp class="w">
  </samp><samp class="ss">userinfo</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">nil</samp><samp class="w">
</samp><samp class="p" data-group-id="9109386015-2">}</samp></code></pre><p>Another example is a URI with brackets in query strings. It is accepted
by <a href="#parse/1"><code class="inline">parse/1</code></a>, it is commonly accepted by browsers, but it will be refused
by <a href="#new/1"><code class="inline">new/1</code></a>:</p><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">URI</samp><samp class="o">.</samp><samp class="n">parse</samp><samp class="p" data-group-id="6897321220-1">(</samp><samp class="s">&quot;/?foo[bar]=baz&quot;</samp><samp class="p" data-group-id="6897321220-1">)</samp><samp class="w">
</samp><samp class="p" data-group-id="6897321220-2">%</samp><samp class="nc" data-group-id="6897321220-2">URI</samp><samp class="p" data-group-id="6897321220-2">{</samp><samp class="w">
  </samp><samp class="ss">fragment</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">nil</samp><samp class="p">,</samp><samp class="w">
  </samp><samp class="ss">host</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">nil</samp><samp class="p">,</samp><samp class="w">
  </samp><samp class="ss">path</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;/&quot;</samp><samp class="p">,</samp><samp class="w">
  </samp><samp class="ss">port</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">nil</samp><samp class="p">,</samp><samp class="w">
  </samp><samp class="ss">query</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;foo[bar]=baz&quot;</samp><samp class="p">,</samp><samp class="w">
  </samp><samp class="ss">scheme</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">nil</samp><samp class="p">,</samp><samp class="w">
  </samp><samp class="ss">userinfo</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">nil</samp><samp class="w">
</samp><samp class="p" data-group-id="6897321220-2">}</samp></code></pre>
  </section>
</section>
<section class="detail" id="query_decoder/2">

    <span id="query_decoder/1"></span>

  <div class="detail-header">
    <a href="#query_decoder/2" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">query_decoder(query, encoding \\ :www_form)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/uri.ex#L277" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> query_decoder(<a href="typespecs.xhtml#built-in-types">binary</a>(), :rfc3986 | :www_form) :: <a href="Enumerable.xhtml#t:t/0">Enumerable.t</a>()</pre>

      </div>

<p>Returns a stream of two-element tuples representing key-value pairs in the
given <code class="inline">query</code>.</p><p>Key and value in each tuple will be binaries and will be percent-unescaped.</p><p>You can specify one of the following <code class="inline">encoding</code> options:</p><ul><li><p><code class="inline">:www_form</code> - (default, since v1.12.0) keys and values are decoded as per
<a href="#decode_www_form/1"><code class="inline">decode_www_form/1</code></a>. This is the format typically used by browsers on
query strings and form data. It decodes &quot;+&quot; as &quot; &quot;.</p></li><li><p><code class="inline">:rfc3986</code> - (since v1.12.0) keys and values are decoded as per
<a href="#decode/1"><code class="inline">decode/1</code></a>. The result is the same as <code class="inline">:www_form</code> except for leaving &quot;+&quot;
as is in line with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>.</p></li></ul><p>Encoding defaults to <code class="inline">:www_form</code> for backward compatibility.</p><h2 id="query_decoder/2-examples" class="section-heading"><a href="#query_decoder/2-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">URI</samp><samp class="o">.</samp><samp class="n">query_decoder</samp><samp class="p" data-group-id="1588389239-1">(</samp><samp class="s">&quot;foo=1&amp;bar=2&quot;</samp><samp class="p" data-group-id="1588389239-1">)</samp><samp class="w"> </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Enum</samp><samp class="o">.</samp><samp class="n">to_list</samp><samp class="p" data-group-id="1588389239-2">(</samp><samp class="p" data-group-id="1588389239-2">)</samp><samp class="w">
</samp><samp class="p" data-group-id="1588389239-3">[</samp><samp class="p" data-group-id="1588389239-4">{</samp><samp class="s">&quot;foo&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;1&quot;</samp><samp class="p" data-group-id="1588389239-4">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="1588389239-5">{</samp><samp class="s">&quot;bar&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;2&quot;</samp><samp class="p" data-group-id="1588389239-5">}</samp><samp class="p" data-group-id="1588389239-3">]</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">URI</samp><samp class="o">.</samp><samp class="n">query_decoder</samp><samp class="p" data-group-id="1588389239-6">(</samp><samp class="s">&quot;food=bread%26butter&amp;drinks=tap%20water+please&quot;</samp><samp class="p" data-group-id="1588389239-6">)</samp><samp class="w"> </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Enum</samp><samp class="o">.</samp><samp class="n">to_list</samp><samp class="p" data-group-id="1588389239-7">(</samp><samp class="p" data-group-id="1588389239-7">)</samp><samp class="w">
</samp><samp class="p" data-group-id="1588389239-8">[</samp><samp class="p" data-group-id="1588389239-9">{</samp><samp class="s">&quot;food&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;bread&amp;butter&quot;</samp><samp class="p" data-group-id="1588389239-9">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="1588389239-10">{</samp><samp class="s">&quot;drinks&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;tap water please&quot;</samp><samp class="p" data-group-id="1588389239-10">}</samp><samp class="p" data-group-id="1588389239-8">]</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">URI</samp><samp class="o">.</samp><samp class="n">query_decoder</samp><samp class="p" data-group-id="1588389239-11">(</samp><samp class="s">&quot;food=bread%26butter&amp;drinks=tap%20water+please&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:rfc3986</samp><samp class="p" data-group-id="1588389239-11">)</samp><samp class="w"> </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Enum</samp><samp class="o">.</samp><samp class="n">to_list</samp><samp class="p" data-group-id="1588389239-12">(</samp><samp class="p" data-group-id="1588389239-12">)</samp><samp class="w">
</samp><samp class="p" data-group-id="1588389239-13">[</samp><samp class="p" data-group-id="1588389239-14">{</samp><samp class="s">&quot;food&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;bread&amp;butter&quot;</samp><samp class="p" data-group-id="1588389239-14">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="1588389239-15">{</samp><samp class="s">&quot;drinks&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;tap water+please&quot;</samp><samp class="p" data-group-id="1588389239-15">}</samp><samp class="p" data-group-id="1588389239-13">]</samp></code></pre>
  </section>
</section>
<section class="detail" id="to_string/1">

  <div class="detail-header">
    <a href="#to_string/1" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">to_string(uri)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/uri.ex#L882" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> to_string(<a href="#t:t/0">t</a>()) :: <a href="typespecs.xhtml#built-in-types">binary</a>()</pre>

      </div>

<p>Returns the string representation of the given <a href="#t:t/0">URI struct</a>.</p><h2 id="to_string/1-examples" class="section-heading"><a href="#to_string/1-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="n">uri</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="nc">URI</samp><samp class="o">.</samp><samp class="n">parse</samp><samp class="p" data-group-id="7426646593-1">(</samp><samp class="s">&quot;http://google.com&quot;</samp><samp class="p" data-group-id="7426646593-1">)</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">URI</samp><samp class="o">.</samp><samp class="n">to_string</samp><samp class="p" data-group-id="7426646593-2">(</samp><samp class="n">uri</samp><samp class="p" data-group-id="7426646593-2">)</samp><samp class="w">
</samp><samp class="s">&quot;http://google.com&quot;</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="n">uri</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="nc">URI</samp><samp class="o">.</samp><samp class="n">parse</samp><samp class="p" data-group-id="7426646593-3">(</samp><samp class="s">&quot;foo://bar.baz&quot;</samp><samp class="p" data-group-id="7426646593-3">)</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">URI</samp><samp class="o">.</samp><samp class="n">to_string</samp><samp class="p" data-group-id="7426646593-4">(</samp><samp class="n">uri</samp><samp class="p" data-group-id="7426646593-4">)</samp><samp class="w">
</samp><samp class="s">&quot;foo://bar.baz&quot;</samp></code></pre>
  </section>
</section>

        </div>
      </section>


  </body>
</html>
