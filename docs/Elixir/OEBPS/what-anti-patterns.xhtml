<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"
      xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>What are anti-patterns? - Elixir v1.18.4</title>
    <meta name="generator" content="ExDoc v0.38.2" />
    <link type="text/css" rel="stylesheet" href="dist/epub-elixir-FNUUKFP7.css" />
    <script src="dist/epub-4WIP524F.js"></script>

  </head>
  <body class="content-inner">

    <h1 id="content">What are anti-patterns?</h1>
<p>Anti-patterns describe common mistakes or indicators of problems in code.
They are also known as &quot;code smells&quot;.</p><p>The goal of these guides is to document potential anti-patterns found in Elixir software
and teach developers how to identify them and their pitfalls. If an existing piece
of code matches an anti-pattern, it does not mean your code must be rewritten.
Sometimes, even if a snippet matches a potential anti-pattern and its limitations,
it may be the best approach to the problem at hand. No codebase is free of anti-patterns
and one should not aim to remove all of them.</p><p>The anti-patterns in these guides are broken into 4 main categories:</p><ul><li><p><strong>Code-related anti-patterns:</strong> related to your code and particular
language idioms and features;</p></li><li><p><strong>Design-related anti-patterns:</strong> related to your modules, functions,
and the role they play within a codebase;</p></li><li><p><strong>Process-related anti-patterns:</strong> related to processes and process-based
abstractions;</p></li><li><p><strong>Meta-programming anti-patterns:</strong> related to meta-programming.</p></li></ul><p>Each anti-pattern is documented using the following structure:</p><ul><li><p><strong>Name:</strong> Unique identifier of the anti-pattern. This name is important to facilitate
communication between developers;</p></li><li><p><strong>Problem:</strong> How the anti-pattern can harm code quality and what impacts this can have
for developers;</p></li><li><p><strong>Example:</strong> Code and textual descriptions to illustrate the occurrence of the anti-pattern;</p></li><li><p><strong>Refactoring:</strong> Ways to change your code to improve its qualities. Examples of refactored
code are presented to illustrate these changes.</p></li></ul><p>An additional section with &quot;Additional Remarks&quot; may be provided. Those may include known scenarios where the anti-pattern does not apply.</p><p>The initial catalog of anti-patterns was proposed by Lucas Vegi and Marco Tulio Valente, from <a href="http://aserg.labsoft.dcc.ufmg.br/">ASERG/DCC/UFMG</a>. For more info, see <a href="https://github.com/lucasvegi/Elixir-Code-Smells/blob/main/etc/2023-emse-code-smells-elixir.pdf">Understanding Code Smells in Elixir Functional Language</a> and <a href="https://github.com/lucasvegi/Elixir-Code-Smells">the associated code repository</a>.</p><p>Additionally, the Security Working Group of the <a href="https://erlef.github.io/security-wg/">Erlang Ecosystem Foundation</a> publishes <a href="https://erlef.github.io/security-wg/">documents with security resources and best-practices of both Erlang and Elixir, including detailed guides for web applications</a>.</p>

  </body>
</html>
