<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"
      xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>case, cond, and if - Elixir v1.18.4</title>
    <meta name="generator" content="ExDoc v0.38.2" />
    <link type="text/css" rel="stylesheet" href="dist/epub-elixir-FNUUKFP7.css" />
    <script src="dist/epub-4WIP524F.js"></script>

  </head>
  <body class="content-inner">

    <h1 id="content">case, cond, and if</h1>
<p>In this chapter, we will learn about the <a href="Kernel.SpecialForms.xhtml#case/2"><code class="inline">case</code></a>, <a href="Kernel.SpecialForms.xhtml#cond/1"><code class="inline">cond</code></a>, and <a href="Kernel.xhtml#if/2"><code class="inline">if</code></a> control flow structures.</p><h2 id="case">case</h2><p><a href="Kernel.SpecialForms.xhtml#case/2"><code class="inline">case</code></a> allows us to compare a value against many patterns until we find a matching one:</p><pre><code class="makeup elixir" translate="no"><span class="gp unselectable">iex&gt; </span><span class="k">case</span><span class="w"> </span><span class="p" data-group-id="2738748913-1">{</span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="mi">2</span><span class="p">,</span><span class="w"> </span><span class="mi">3</span><span class="p" data-group-id="2738748913-1">}</span><span class="w"> </span><span class="k" data-group-id="2738748913-2">do</span><span class="w">
</span><span class="gp unselectable">...&gt; </span><span class="w">  </span><span class="p" data-group-id="2738748913-3">{</span><span class="mi">4</span><span class="p">,</span><span class="w"> </span><span class="mi">5</span><span class="p">,</span><span class="w"> </span><span class="mi">6</span><span class="p" data-group-id="2738748913-3">}</span><span class="w"> </span><span class="o">-&gt;</span><span class="w">
</span><span class="gp unselectable">...&gt; </span><span class="w">    </span><span class="s">&quot;This clause won&#39;t match&quot;</span><span class="w">
</span><span class="gp unselectable">...&gt; </span><span class="w">  </span><span class="p" data-group-id="2738748913-4">{</span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="n">x</span><span class="p">,</span><span class="w"> </span><span class="mi">3</span><span class="p" data-group-id="2738748913-4">}</span><span class="w"> </span><span class="o">-&gt;</span><span class="w">
</span><span class="gp unselectable">...&gt; </span><span class="w">    </span><span class="s">&quot;This clause will match and bind x to 2 in this clause&quot;</span><span class="w">
</span><span class="gp unselectable">...&gt; </span><span class="w">  </span><span class="bp">_</span><span class="w"> </span><span class="o">-&gt;</span><span class="w">
</span><span class="gp unselectable">...&gt; </span><span class="w">    </span><span class="s">&quot;This clause would match any value&quot;</span><span class="w">
</span><span class="gp unselectable">...&gt; </span><span class="k" data-group-id="2738748913-2">end</span><span class="w">
</span><span class="s">&quot;This clause will match and bind x to 2 in this clause&quot;</span></code></pre><p>If you want to pattern match against an existing variable, you need to use the <a href="Kernel.SpecialForms.xhtml#%5E/1"><code class="inline">^</code></a> operator:</p><pre><code class="makeup elixir" translate="no"><span class="gp unselectable">iex&gt; </span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">1</span><span class="w">
</span><span class="mi">1</span><span class="w">
</span><span class="gp unselectable">iex&gt; </span><span class="k">case</span><span class="w"> </span><span class="mi">10</span><span class="w"> </span><span class="k" data-group-id="9709387312-1">do</span><span class="w">
</span><span class="gp unselectable">...&gt; </span><span class="w">  </span><span class="o">^</span><span class="n">x</span><span class="w"> </span><span class="o">-&gt;</span><span class="w"> </span><span class="s">&quot;Won&#39;t match&quot;</span><span class="w">
</span><span class="gp unselectable">...&gt; </span><span class="w">  </span><span class="bp">_</span><span class="w"> </span><span class="o">-&gt;</span><span class="w"> </span><span class="s">&quot;Will match&quot;</span><span class="w">
</span><span class="gp unselectable">...&gt; </span><span class="k" data-group-id="9709387312-1">end</span><span class="w">
</span><span class="s">&quot;Will match&quot;</span></code></pre><p>Clauses also allow extra conditions to be specified via guards:</p><pre><code class="makeup elixir" translate="no"><span class="gp unselectable">iex&gt; </span><span class="k">case</span><span class="w"> </span><span class="p" data-group-id="0619027409-1">{</span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="mi">2</span><span class="p">,</span><span class="w"> </span><span class="mi">3</span><span class="p" data-group-id="0619027409-1">}</span><span class="w"> </span><span class="k" data-group-id="0619027409-2">do</span><span class="w">
</span><span class="gp unselectable">...&gt; </span><span class="w">  </span><span class="p" data-group-id="0619027409-3">{</span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="n">x</span><span class="p">,</span><span class="w"> </span><span class="mi">3</span><span class="p" data-group-id="0619027409-3">}</span><span class="w"> </span><span class="ow">when</span><span class="w"> </span><span class="n">x</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="mi">0</span><span class="w"> </span><span class="o">-&gt;</span><span class="w">
</span><span class="gp unselectable">...&gt; </span><span class="w">    </span><span class="s">&quot;Will match&quot;</span><span class="w">
</span><span class="gp unselectable">...&gt; </span><span class="w">  </span><span class="bp">_</span><span class="w"> </span><span class="o">-&gt;</span><span class="w">
</span><span class="gp unselectable">...&gt; </span><span class="w">    </span><span class="s">&quot;Would match, if guard condition were not satisfied&quot;</span><span class="w">
</span><span class="gp unselectable">...&gt; </span><span class="k" data-group-id="0619027409-2">end</span><span class="w">
</span><span class="s">&quot;Will match&quot;</span></code></pre><p>The first clause above will only match when <code class="inline">x</code> is positive.</p><p>Keep in mind errors in guards do not leak but simply make the guard fail:</p><pre><code class="makeup elixir" translate="no"><span class="gp unselectable">iex&gt; </span><span class="n">hd</span><span class="p" data-group-id="5681178468-1">(</span><span class="mi">1</span><span class="p" data-group-id="5681178468-1">)</span><span class="w">
</span><span class="gt">** (ArgumentError) argument error</span><span class="w">
</span><span class="gp unselectable">iex&gt; </span><span class="k">case</span><span class="w"> </span><span class="mi">1</span><span class="w"> </span><span class="k" data-group-id="5681178468-2">do</span><span class="w">
</span><span class="gp unselectable">...&gt; </span><span class="w">  </span><span class="n">x</span><span class="w"> </span><span class="ow">when</span><span class="w"> </span><span class="n">hd</span><span class="p" data-group-id="5681178468-3">(</span><span class="n">x</span><span class="p" data-group-id="5681178468-3">)</span><span class="w"> </span><span class="o">-&gt;</span><span class="w"> </span><span class="s">&quot;Won&#39;t match&quot;</span><span class="w">
</span><span class="gp unselectable">...&gt; </span><span class="w">  </span><span class="n">x</span><span class="w"> </span><span class="o">-&gt;</span><span class="w"> </span><span class="s">&quot;Got </span><span class="si" data-group-id="5681178468-4">#{</span><span class="n">x</span><span class="si" data-group-id="5681178468-4">}</span><span class="s">&quot;</span><span class="w">
</span><span class="gp unselectable">...&gt; </span><span class="k" data-group-id="5681178468-2">end</span><span class="w">
</span><span class="s">&quot;Got 1&quot;</span></code></pre><p>If none of the clauses match, an error is raised:</p><pre><code class="makeup elixir" translate="no"><span class="gp unselectable">iex&gt; </span><span class="k">case</span><span class="w"> </span><span class="ss">:ok</span><span class="w"> </span><span class="k" data-group-id="9769005657-1">do</span><span class="w">
</span><span class="gp unselectable">...&gt; </span><span class="w">  </span><span class="ss">:error</span><span class="w"> </span><span class="o">-&gt;</span><span class="w"> </span><span class="s">&quot;Won&#39;t match&quot;</span><span class="w">
</span><span class="gp unselectable">...&gt; </span><span class="k" data-group-id="9769005657-1">end</span><span class="w">
</span><span class="gt">** (CaseClauseError) no case clause matching: :ok</span></code></pre><p>The documentation for the <a href="Kernel.xhtml"><code class="inline">Kernel</code></a> module lists all available guards in its sidebar. You can also consult the complete <a href="patterns-and-guards.xhtml#guards">Patterns and Guards</a> reference for in-depth documentation.</p><h2 id="if">if</h2><p><a href="Kernel.SpecialForms.xhtml#case/2"><code class="inline">case</code></a> builds on pattern matching and guards to destructure and match on certain conditions. However, patterns and guards are limited only to certain expressions which are optimized by the compiler. In many situations, you need to write conditions that go beyond what can be expressed with <a href="Kernel.SpecialForms.xhtml#case/2"><code class="inline">case</code></a>. For those, <a href="Kernel.xhtml#if/2"><code class="inline">if</code></a> is a useful alternative:</p><pre><code class="makeup elixir" translate="no"><span class="gp unselectable">iex&gt; </span><span class="k">if</span><span class="w"> </span><span class="no">true</span><span class="w"> </span><span class="k" data-group-id="0288778617-1">do</span><span class="w">
</span><span class="gp unselectable">...&gt; </span><span class="w">  </span><span class="s">&quot;This works!&quot;</span><span class="w">
</span><span class="gp unselectable">...&gt; </span><span class="k" data-group-id="0288778617-1">end</span><span class="w">
</span><span class="s">&quot;This works!&quot;</span><span class="w">
</span><span class="gp unselectable">iex&gt; </span><span class="k">if</span><span class="w"> </span><span class="no">false</span><span class="w"> </span><span class="k" data-group-id="0288778617-2">do</span><span class="w">
</span><span class="gp unselectable">...&gt; </span><span class="w">  </span><span class="s">&quot;This will never be seen&quot;</span><span class="w">
</span><span class="gp unselectable">...&gt; </span><span class="k" data-group-id="0288778617-2">end</span><span class="w">
</span><span class="no">nil</span></code></pre><p>If the condition given to <a href="Kernel.xhtml#if/2"><code class="inline">if</code></a> returns <code class="inline">false</code> or <code class="inline">nil</code>, the body given between <code class="inline">do</code>-<code class="inline">end</code> is not executed and instead it returns <code class="inline">nil</code>.</p><p><a href="Kernel.xhtml#if/2"><code class="inline">if</code></a> also supports <code class="inline">else</code> blocks:</p><pre><code class="makeup elixir" translate="no"><span class="gp unselectable">iex&gt; </span><span class="k">if</span><span class="w"> </span><span class="no">nil</span><span class="w"> </span><span class="k" data-group-id="3186459004-1">do</span><span class="w">
</span><span class="gp unselectable">...&gt; </span><span class="w">  </span><span class="s">&quot;This won&#39;t be seen&quot;</span><span class="w">
</span><span class="gp unselectable">...&gt; </span><span class="k" data-group-id="3186459004-1">else</span><span class="w">
</span><span class="gp unselectable">...&gt; </span><span class="w">  </span><span class="s">&quot;This will&quot;</span><span class="w">
</span><span class="gp unselectable">...&gt; </span><span class="k" data-group-id="3186459004-1">end</span><span class="w">
</span><span class="s">&quot;This will&quot;</span></code></pre><p>This is also a good opportunity to talk about variable scoping in Elixir. If any variable is declared or changed inside <a href="Kernel.xhtml#if/2"><code class="inline">if</code></a>, <a href="Kernel.SpecialForms.xhtml#case/2"><code class="inline">case</code></a>, and similar constructs, the declaration and change will only be visible inside the construct. For example:</p><pre><code class="makeup elixir" translate="no"><span class="gp unselectable">iex&gt; </span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">1</span><span class="w">
</span><span class="mi">1</span><span class="w">
</span><span class="gp unselectable">iex&gt; </span><span class="k">if</span><span class="w"> </span><span class="no">true</span><span class="w"> </span><span class="k" data-group-id="3384332869-1">do</span><span class="w">
</span><span class="gp unselectable">...&gt; </span><span class="w">  </span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">x</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="mi">1</span><span class="w">
</span><span class="gp unselectable">...&gt; </span><span class="k" data-group-id="3384332869-1">end</span><span class="w">
</span><span class="mi">2</span><span class="w">
</span><span class="gp unselectable">iex&gt; </span><span class="n">x</span><span class="w">
</span><span class="mi">1</span></code></pre><p>In said cases, if you want to change a value, you must return the value from the <a href="Kernel.xhtml#if/2"><code class="inline">if</code></a>:</p><pre><code class="makeup elixir" translate="no"><span class="gp unselectable">iex&gt; </span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">1</span><span class="w">
</span><span class="mi">1</span><span class="w">
</span><span class="gp unselectable">iex&gt; </span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">if</span><span class="w"> </span><span class="no">true</span><span class="w"> </span><span class="k" data-group-id="2322638238-1">do</span><span class="w">
</span><span class="gp unselectable">...&gt; </span><span class="w">  </span><span class="n">x</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="mi">1</span><span class="w">
</span><span class="gp unselectable">...&gt; </span><span class="k" data-group-id="2322638238-1">else</span><span class="w">
</span><span class="gp unselectable">...&gt; </span><span class="w">  </span><span class="n">x</span><span class="w">
</span><span class="gp unselectable">...&gt; </span><span class="k" data-group-id="2322638238-1">end</span><span class="w">
</span><span class="mi">2</span></code></pre><section role="note" class="admonition info"><h4 class="admonition-title info"><code class="inline">if</code> is a macro</h4><p>An interesting note regarding <a href="Kernel.xhtml#if/2"><code class="inline">if</code></a> is that it is implemented as a macro in the language: it isn't a special language construct as it would be in many languages. You can check the documentation and its source for more information.</p></section><p>If you find yourself nesting several <a href="Kernel.xhtml#if/2"><code class="inline">if</code></a> blocks, you may want to consider using <a href="Kernel.SpecialForms.xhtml#cond/1"><code class="inline">cond</code></a> instead. Let's check it out.</p><h2 id="cond">cond</h2><p>We have used <code class="inline">case</code> to find a matching clauses from many patterns. We have used <code class="inline">if</code> to check for a single condition. If you need to check across several conditions and find the first one that does not evaluate to <code class="inline">nil</code> or <code class="inline">false</code>, <a href="Kernel.SpecialForms.xhtml#cond/1"><code class="inline">cond</code></a> is a useful construct:</p><pre><code class="makeup elixir" translate="no"><span class="gp unselectable">iex&gt; </span><span class="k">cond</span><span class="w"> </span><span class="k" data-group-id="0353078018-1">do</span><span class="w">
</span><span class="gp unselectable">...&gt; </span><span class="w">  </span><span class="mi">2</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="mi">2</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="mi">5</span><span class="w"> </span><span class="o">-&gt;</span><span class="w">
</span><span class="gp unselectable">...&gt; </span><span class="w">    </span><span class="s">&quot;This will not be true&quot;</span><span class="w">
</span><span class="gp unselectable">...&gt; </span><span class="w">  </span><span class="mi">2</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="mi">2</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="mi">3</span><span class="w"> </span><span class="o">-&gt;</span><span class="w">
</span><span class="gp unselectable">...&gt; </span><span class="w">    </span><span class="s">&quot;Nor this&quot;</span><span class="w">
</span><span class="gp unselectable">...&gt; </span><span class="w">  </span><span class="mi">1</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="mi">1</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="mi">2</span><span class="w"> </span><span class="o">-&gt;</span><span class="w">
</span><span class="gp unselectable">...&gt; </span><span class="w">    </span><span class="s">&quot;But this will&quot;</span><span class="w">
</span><span class="gp unselectable">...&gt; </span><span class="k" data-group-id="0353078018-1">end</span><span class="w">
</span><span class="s">&quot;But this will&quot;</span></code></pre><p>This is equivalent to <code class="inline">else if</code> clauses in many imperative languages - although used less frequently in Elixir.</p><p>If all of the conditions return <code class="inline">nil</code> or <code class="inline">false</code>, an error (<a href="CondClauseError.xhtml"><code class="inline">CondClauseError</code></a>) is raised. For this reason, it may be necessary to add a final condition, equal to <code class="inline">true</code>, which will always match:</p><pre><code class="makeup elixir" translate="no"><span class="gp unselectable">iex&gt; </span><span class="k">cond</span><span class="w"> </span><span class="k" data-group-id="9025414640-1">do</span><span class="w">
</span><span class="gp unselectable">...&gt; </span><span class="w">  </span><span class="mi">2</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="mi">2</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="mi">5</span><span class="w"> </span><span class="o">-&gt;</span><span class="w">
</span><span class="gp unselectable">...&gt; </span><span class="w">    </span><span class="s">&quot;This is never true&quot;</span><span class="w">
</span><span class="gp unselectable">...&gt; </span><span class="w">  </span><span class="mi">2</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="mi">2</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="mi">3</span><span class="w"> </span><span class="o">-&gt;</span><span class="w">
</span><span class="gp unselectable">...&gt; </span><span class="w">    </span><span class="s">&quot;Nor this&quot;</span><span class="w">
</span><span class="gp unselectable">...&gt; </span><span class="w">  </span><span class="no">true</span><span class="w"> </span><span class="o">-&gt;</span><span class="w">
</span><span class="gp unselectable">...&gt; </span><span class="w">    </span><span class="s">&quot;This is always true (equivalent to else)&quot;</span><span class="w">
</span><span class="gp unselectable">...&gt; </span><span class="k" data-group-id="9025414640-1">end</span><span class="w">
</span><span class="s">&quot;This is always true (equivalent to else)&quot;</span></code></pre><p>Similar to <a href="Kernel.xhtml#if/2"><code class="inline">if</code></a>, <a href="Kernel.SpecialForms.xhtml#cond/1"><code class="inline">cond</code></a> considers any value besides <code class="inline">nil</code> and <code class="inline">false</code> to be true:</p><pre><code class="makeup elixir" translate="no"><span class="gp unselectable">iex&gt; </span><span class="k">cond</span><span class="w"> </span><span class="k" data-group-id="4494531231-1">do</span><span class="w">
</span><span class="gp unselectable">...&gt; </span><span class="w">  </span><span class="n">hd</span><span class="p" data-group-id="4494531231-2">(</span><span class="p" data-group-id="4494531231-3">[</span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="mi">2</span><span class="p">,</span><span class="w"> </span><span class="mi">3</span><span class="p" data-group-id="4494531231-3">]</span><span class="p" data-group-id="4494531231-2">)</span><span class="w"> </span><span class="o">-&gt;</span><span class="w">
</span><span class="gp unselectable">...&gt; </span><span class="w">    </span><span class="s">&quot;1 is considered as true&quot;</span><span class="w">
</span><span class="gp unselectable">...&gt; </span><span class="k" data-group-id="4494531231-1">end</span><span class="w">
</span><span class="s">&quot;1 is considered as true&quot;</span></code></pre><h2 id="summing-up">Summing up</h2><p>We have concluded the introduction to the most fundamental control-flow constructs in Elixir. Generally speaking, Elixir developers prefer pattern matching and guards, using <a href="Kernel.SpecialForms.xhtml#case/2"><code class="inline">case</code></a> and function definitions (which we will explore in future chapters), as they are succinct and precise. When your logic cannot be outlined within patterns and guards, you may consider <a href="Kernel.xhtml#if/2"><code class="inline">if</code></a>, falling back to <a href="Kernel.SpecialForms.xhtml#cond/1"><code class="inline">cond</code></a> when there are several conditions to check.</p>

  </body>
</html>
