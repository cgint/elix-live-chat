<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"
      xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>GenEvent - Elixir v1.18.4</title>
    <meta name="generator" content="ExDoc v0.38.2" />
    <link type="text/css" rel="stylesheet" href="dist/epub-elixir-FNUUKFP7.css" />
    <script src="dist/epub-4WIP524F.js"></script>

  </head>
  <body class="content-inner">

    <h1 id="content">
GenEvent <small>behaviour</small>
    </h1>

      <div class="deprecated">
        This behaviour is deprecated. Use Erlang/OTP's :gen_event module instead.
      </div>


      <section id="moduledoc" class="docstring">
<p>An event manager with event handlers behaviour.</p><p>If you are interested in implementing an event manager, please read the
&quot;Alternatives&quot; section below. If you have to implement an event handler to
integrate with an existing system, such as Elixir's Logger, please use
<a href="https://www.erlang.org/doc/apps/stdlib/gen_event.html"><code class="inline">:gen_event</code></a> instead.</p><h2 id="module-alternatives">Alternatives</h2><p>There are a few suitable alternatives to replace GenEvent. Each of them can be
the most beneficial based on the use case.</p><h3 id="module-supervisor-and-genservers">Supervisor and GenServers</h3><p>One alternative to GenEvent is a very minimal solution consisting of using a
supervisor and multiple GenServers started under it. The supervisor acts as
the &quot;event manager&quot; and the children GenServers act as the &quot;event handlers&quot;.
This approach has some shortcomings (it provides no back-pressure for example)
but can still replace GenEvent for low-profile usages of it. <a href="https://dashbit.co/blog/replacing-genevent-by-a-supervisor-plus-genserver">This blog post
by Jos√©
Valim</a>
has more detailed information on this approach.</p><h3 id="module-genstage">GenStage</h3><p>If the use case where you were using GenEvent requires more complex logic,
<a href="https://github.com/elixir-lang/gen_stage">GenStage</a> provides a great
alternative. GenStage is an external Elixir library maintained by the Elixir
team; it provides a tool to implement systems that exchange events in a
demand-driven way with built-in support for back-pressure. See the <a href="https://hexdocs.pm/gen_stage">GenStage
documentation</a> for more information.</p><h3 id="module-gen_event"><code class="inline">:gen_event</code></h3><p>If your use case requires exactly what GenEvent provided, or you have to
integrate with an existing <code class="inline">:gen_event</code>-based system, you can still use the
<a href="https://www.erlang.org/doc/apps/stdlib/gen_event.html"><code class="inline">:gen_event</code></a> Erlang module.</p>
      </section>


      <section id="summary" class="details-list">
        <h1 class="section-heading">Summary</h1>
<div class="summary-types summary">
  <h2>
    <a href="#types">Types</a>
  </h2>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#t:handler/0" data-no-tooltip="" translate="no">handler()</a>

      </div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#t:manager/0" data-no-tooltip="" translate="no">manager()</a>

      </div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#t:name/0" data-no-tooltip="" translate="no">name()</a>

      </div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#t:on_start/0" data-no-tooltip="" translate="no">on_start()</a>

      </div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#t:options/0" data-no-tooltip="" translate="no">options()</a>

      </div>

    </div>

</div>
<div class="summary-callbacks summary">
  <h2>
    <a href="#callbacks">Callbacks</a>
  </h2>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#c:code_change/3" data-no-tooltip="" translate="no">code_change(old_vsn, state, extra)</a>

      </div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#c:handle_call/2" data-no-tooltip="" translate="no">handle_call(request, state)</a>

      </div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#c:handle_event/2" data-no-tooltip="" translate="no">handle_event(event, state)</a>

      </div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#c:handle_info/2" data-no-tooltip="" translate="no">handle_info(msg, state)</a>

      </div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#c:init/1" data-no-tooltip="" translate="no">init(args)</a>

      </div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#c:terminate/2" data-no-tooltip="" translate="no">terminate(reason, state)</a>

      </div>

    </div>

</div>

      </section>


      <section id="types" class="details-list">
        <h1 class="section-heading">Types</h1>

        <div class="types-list">
<section class="detail" id="t:handler/0">

  <div class="detail-header">
    <a href="#t:handler/0" class="detail-link" data-no-tooltip="" aria-label="Link to this type">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">handler()</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/gen_event.ex#L84" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@type</span> handler() :: <a href="typespecs.xhtml#basic-types">atom</a>() | {<a href="typespecs.xhtml#basic-types">atom</a>(), <a href="typespecs.xhtml#built-in-types">term</a>()}</pre>

      </div>


  </section>
</section>
<section class="detail" id="t:manager/0">

  <div class="detail-header">
    <a href="#t:manager/0" class="detail-link" data-no-tooltip="" aria-label="Link to this type">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">manager()</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/gen_event.ex#L82" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@type</span> manager() :: <a href="typespecs.xhtml#basic-types">pid</a>() | <a href="#t:name/0">name</a>() | {<a href="typespecs.xhtml#basic-types">atom</a>(), <a href="typespecs.xhtml#built-in-types">node</a>()}</pre>

      </div>


  </section>
</section>
<section class="detail" id="t:name/0">

  <div class="detail-header">
    <a href="#t:name/0" class="detail-link" data-no-tooltip="" aria-label="Link to this type">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">name()</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/gen_event.ex#L78" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@type</span> name() :: <a href="typespecs.xhtml#basic-types">atom</a>() | {:global, <a href="typespecs.xhtml#built-in-types">term</a>()} | {:via, <a href="typespecs.xhtml#built-in-types">module</a>(), <a href="typespecs.xhtml#built-in-types">term</a>()}</pre>

      </div>


  </section>
</section>
<section class="detail" id="t:on_start/0">

  <div class="detail-header">
    <a href="#t:on_start/0" class="detail-link" data-no-tooltip="" aria-label="Link to this type">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">on_start()</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/gen_event.ex#L76" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@type</span> on_start() :: {:ok, <a href="typespecs.xhtml#basic-types">pid</a>()} | {:error, {:already_started, <a href="typespecs.xhtml#basic-types">pid</a>()}}</pre>

      </div>


  </section>
</section>
<section class="detail" id="t:options/0">

  <div class="detail-header">
    <a href="#t:options/0" class="detail-link" data-no-tooltip="" aria-label="Link to this type">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">options()</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/gen_event.ex#L80" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@type</span> options() :: [{:name, <a href="#t:name/0">name</a>()}]</pre>

      </div>


  </section>
</section>

        </div>
      </section>

      <section id="callbacks" class="details-list">
        <h1 class="section-heading">Callbacks</h1>

        <div class="callbacks-list">
<section class="detail" id="c:code_change/3">

  <div class="detail-header">
    <a href="#c:code_change/3" class="detail-link" data-no-tooltip="" aria-label="Link to this callback">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">code_change(old_vsn, state, extra)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/gen_event.ex#L73" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@callback</span> code_change(old_vsn, state :: <a href="typespecs.xhtml#built-in-types">term</a>(), extra :: <a href="typespecs.xhtml#built-in-types">term</a>()) ::
  {:ok, new_state :: <a href="typespecs.xhtml#built-in-types">term</a>()}
when old_vsn: <a href="typespecs.xhtml#built-in-types">term</a>() | {:down, <a href="typespecs.xhtml#built-in-types">term</a>()}</pre>

      </div>


  </section>
</section>
<section class="detail" id="c:handle_call/2">

  <div class="detail-header">
    <a href="#c:handle_call/2" class="detail-link" data-no-tooltip="" aria-label="Link to this callback">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">handle_call(request, state)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/gen_event.ex#L58" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@callback</span> handle_call(request :: <a href="typespecs.xhtml#built-in-types">term</a>(), state :: <a href="typespecs.xhtml#built-in-types">term</a>()) ::
  {:ok, reply, new_state}
  | {:ok, reply, new_state, :hibernate}
  | {:remove_handler, reply}
when reply: <a href="typespecs.xhtml#built-in-types">term</a>(), new_state: <a href="typespecs.xhtml#built-in-types">term</a>()</pre>

      </div>


  </section>
</section>
<section class="detail" id="c:handle_event/2">

  <div class="detail-header">
    <a href="#c:handle_event/2" class="detail-link" data-no-tooltip="" aria-label="Link to this callback">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">handle_event(event, state)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/gen_event.ex#L52" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@callback</span> handle_event(event :: <a href="typespecs.xhtml#built-in-types">term</a>(), state :: <a href="typespecs.xhtml#built-in-types">term</a>()) ::
  {:ok, new_state} | {:ok, new_state, :hibernate} | :remove_handler
when new_state: <a href="typespecs.xhtml#built-in-types">term</a>()</pre>

      </div>


  </section>
</section>
<section class="detail" id="c:handle_info/2">

  <div class="detail-header">
    <a href="#c:handle_info/2" class="detail-link" data-no-tooltip="" aria-label="Link to this callback">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">handle_info(msg, state)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/gen_event.ex#L64" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@callback</span> handle_info(msg :: <a href="typespecs.xhtml#built-in-types">term</a>(), state :: <a href="typespecs.xhtml#built-in-types">term</a>()) ::
  {:ok, new_state} | {:ok, new_state, :hibernate} | :remove_handler
when new_state: <a href="typespecs.xhtml#built-in-types">term</a>()</pre>

      </div>


  </section>
</section>
<section class="detail" id="c:init/1">

  <div class="detail-header">
    <a href="#c:init/1" class="detail-link" data-no-tooltip="" aria-label="Link to this callback">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">init(args)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/gen_event.ex#L46" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@callback</span> init(args :: <a href="typespecs.xhtml#built-in-types">term</a>()) ::
  {:ok, state} | {:ok, state, :hibernate} | {:error, reason :: <a href="typespecs.xhtml#built-in-types">term</a>()}
when state: <a href="typespecs.xhtml#built-in-types">term</a>()</pre>

      </div>


  </section>
</section>
<section class="detail" id="c:terminate/2">

  <div class="detail-header">
    <a href="#c:terminate/2" class="detail-link" data-no-tooltip="" aria-label="Link to this callback">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">terminate(reason, state)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/gen_event.ex#L70" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@callback</span> terminate(reason, state :: <a href="typespecs.xhtml#built-in-types">term</a>()) :: <a href="typespecs.xhtml#built-in-types">term</a>()
when reason:
       :stop | {:stop, <a href="typespecs.xhtml#built-in-types">term</a>()} | :remove_handler | {:error, <a href="typespecs.xhtml#built-in-types">term</a>()} | <a href="typespecs.xhtml#built-in-types">term</a>()</pre>

      </div>


  </section>
</section>

        </div>
      </section>


  </body>
</html>
