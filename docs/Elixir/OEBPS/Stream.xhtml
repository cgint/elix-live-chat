<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"
      xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>Stream - Elixir v1.18.4</title>
    <meta name="generator" content="ExDoc v0.38.2" />
    <link type="text/css" rel="stylesheet" href="dist/epub-elixir-FNUUKFP7.css" />
    <script src="dist/epub-4WIP524F.js"></script>

  </head>
  <body class="content-inner">

    <h1 id="content">
Stream 
    </h1>


      <section id="moduledoc" class="docstring">
<p>Functions for creating and composing streams.</p><p>Streams are composable, lazy enumerables (for an introduction on
enumerables, see the <a href="Enum.xhtml"><code class="inline">Enum</code></a> module). Any enumerable that generates
elements one by one during enumeration is called a stream. For example,
Elixir's <a href="Range.xhtml"><code class="inline">Range</code></a> is a stream:</p><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="n">range</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="mi">1</samp><samp class="o">..</samp><samp class="mi">5</samp><samp class="w">
</samp><samp class="mi">1</samp><samp class="o">..</samp><samp class="mi">5</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Enum</samp><samp class="o">.</samp><samp class="n">map</samp><samp class="p" data-group-id="8636041431-1">(</samp><samp class="n">range</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="o">&amp;</samp><samp class="p" data-group-id="8636041431-2">(</samp><samp class="ni">&amp;1</samp><samp class="w"> </samp><samp class="o">*</samp><samp class="w"> </samp><samp class="mi">2</samp><samp class="p" data-group-id="8636041431-2">)</samp><samp class="p" data-group-id="8636041431-1">)</samp><samp class="w">
</samp><samp class="p" data-group-id="8636041431-3">[</samp><samp class="mi">2</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">4</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">6</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">8</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">10</samp><samp class="p" data-group-id="8636041431-3">]</samp></code></pre><p>In the example above, as we mapped over the range, the elements being
enumerated were created one by one, during enumeration. The <a href="Stream.xhtml"><code class="inline">Stream</code></a>
module allows us to map the range, without triggering its enumeration:</p><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="n">range</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="mi">1</samp><samp class="o">..</samp><samp class="mi">3</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="n">stream</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="nc">Stream</samp><samp class="o">.</samp><samp class="n">map</samp><samp class="p" data-group-id="4419016609-1">(</samp><samp class="n">range</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="o">&amp;</samp><samp class="p" data-group-id="4419016609-2">(</samp><samp class="ni">&amp;1</samp><samp class="w"> </samp><samp class="o">*</samp><samp class="w"> </samp><samp class="mi">2</samp><samp class="p" data-group-id="4419016609-2">)</samp><samp class="p" data-group-id="4419016609-1">)</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Enum</samp><samp class="o">.</samp><samp class="n">map</samp><samp class="p" data-group-id="4419016609-3">(</samp><samp class="n">stream</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="o">&amp;</samp><samp class="p" data-group-id="4419016609-4">(</samp><samp class="ni">&amp;1</samp><samp class="w"> </samp><samp class="o">+</samp><samp class="w"> </samp><samp class="mi">1</samp><samp class="p" data-group-id="4419016609-4">)</samp><samp class="p" data-group-id="4419016609-3">)</samp><samp class="w">
</samp><samp class="p" data-group-id="4419016609-5">[</samp><samp class="mi">3</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">5</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">7</samp><samp class="p" data-group-id="4419016609-5">]</samp></code></pre><p>Note that we started with a range and then we created a stream that is
meant to multiply each element in the range by 2. At this point, no
computation was done. Only when <a href="Enum.xhtml#map/2"><code class="inline">Enum.map/2</code></a> is called we actually
enumerate over each element in the range, multiplying it by 2 and adding 1.
We say the functions in <a href="Stream.xhtml"><code class="inline">Stream</code></a> are <em>lazy</em> and the functions in <a href="Enum.xhtml"><code class="inline">Enum</code></a>
are <em>eager</em>.</p><p>Due to their laziness, streams are useful when working with large
(or even infinite) collections. When chaining many operations with <a href="Enum.xhtml"><code class="inline">Enum</code></a>,
intermediate lists are created, while <a href="Stream.xhtml"><code class="inline">Stream</code></a> creates a recipe of
computations that are executed at a later moment. Then when the
stream is consumed later on, most commonly by using a function in
the <a href="Enum.xhtml"><code class="inline">Enum</code></a> module, the stream will emit its elements one by one.</p><p>Let's see another example:</p><pre><code class="makeup elixir" translate="no"><samp class="mi">1</samp><samp class="o">..</samp><samp class="mi">3</samp><samp class="w">
</samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Enum</samp><samp class="o">.</samp><samp class="n">map</samp><samp class="p" data-group-id="7728337995-1">(</samp><samp class="o">&amp;</samp><samp class="nc">IO</samp><samp class="o">.</samp><samp class="n">inspect</samp><samp class="p" data-group-id="7728337995-2">(</samp><samp class="ni">&amp;1</samp><samp class="p" data-group-id="7728337995-2">)</samp><samp class="p" data-group-id="7728337995-1">)</samp><samp class="w">
</samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Enum</samp><samp class="o">.</samp><samp class="n">map</samp><samp class="p" data-group-id="7728337995-3">(</samp><samp class="o">&amp;</samp><samp class="p" data-group-id="7728337995-4">(</samp><samp class="ni">&amp;1</samp><samp class="w"> </samp><samp class="o">*</samp><samp class="w"> </samp><samp class="mi">2</samp><samp class="p" data-group-id="7728337995-4">)</samp><samp class="p" data-group-id="7728337995-3">)</samp><samp class="w">
</samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Enum</samp><samp class="o">.</samp><samp class="n">map</samp><samp class="p" data-group-id="7728337995-5">(</samp><samp class="o">&amp;</samp><samp class="nc">IO</samp><samp class="o">.</samp><samp class="n">inspect</samp><samp class="p" data-group-id="7728337995-6">(</samp><samp class="ni">&amp;1</samp><samp class="p" data-group-id="7728337995-6">)</samp><samp class="p" data-group-id="7728337995-5">)</samp><samp class="w">
</samp><samp class="mi">1</samp><samp class="w">
</samp><samp class="mi">2</samp><samp class="w">
</samp><samp class="mi">3</samp><samp class="w">
</samp><samp class="mi">2</samp><samp class="w">
</samp><samp class="mi">4</samp><samp class="w">
</samp><samp class="mi">6</samp><samp class="w">
</samp><samp class="c1">#=&gt; [2, 4, 6]</samp></code></pre><p>Note that we first printed each element in the list, then multiplied each
element by 2 and finally printed each new value. In this example, the list
was enumerated three times. Let's see an example with streams:</p><pre><code class="makeup elixir" translate="no"><samp class="n">stream</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="mi">1</samp><samp class="o">..</samp><samp class="mi">3</samp><samp class="w">
</samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Stream</samp><samp class="o">.</samp><samp class="n">map</samp><samp class="p" data-group-id="0209760736-1">(</samp><samp class="o">&amp;</samp><samp class="nc">IO</samp><samp class="o">.</samp><samp class="n">inspect</samp><samp class="p" data-group-id="0209760736-2">(</samp><samp class="ni">&amp;1</samp><samp class="p" data-group-id="0209760736-2">)</samp><samp class="p" data-group-id="0209760736-1">)</samp><samp class="w">
</samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Stream</samp><samp class="o">.</samp><samp class="n">map</samp><samp class="p" data-group-id="0209760736-3">(</samp><samp class="o">&amp;</samp><samp class="p" data-group-id="0209760736-4">(</samp><samp class="ni">&amp;1</samp><samp class="w"> </samp><samp class="o">*</samp><samp class="w"> </samp><samp class="mi">2</samp><samp class="p" data-group-id="0209760736-4">)</samp><samp class="p" data-group-id="0209760736-3">)</samp><samp class="w">
</samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Stream</samp><samp class="o">.</samp><samp class="n">map</samp><samp class="p" data-group-id="0209760736-5">(</samp><samp class="o">&amp;</samp><samp class="nc">IO</samp><samp class="o">.</samp><samp class="n">inspect</samp><samp class="p" data-group-id="0209760736-6">(</samp><samp class="ni">&amp;1</samp><samp class="p" data-group-id="0209760736-6">)</samp><samp class="p" data-group-id="0209760736-5">)</samp><samp class="w">
</samp><samp class="nc">Enum</samp><samp class="o">.</samp><samp class="n">to_list</samp><samp class="p" data-group-id="0209760736-7">(</samp><samp class="n">stream</samp><samp class="p" data-group-id="0209760736-7">)</samp><samp class="w">
</samp><samp class="mi">1</samp><samp class="w">
</samp><samp class="mi">2</samp><samp class="w">
</samp><samp class="mi">2</samp><samp class="w">
</samp><samp class="mi">4</samp><samp class="w">
</samp><samp class="mi">3</samp><samp class="w">
</samp><samp class="mi">6</samp><samp class="w">
</samp><samp class="c1">#=&gt; [2, 4, 6]</samp></code></pre><p>Although the end result is the same, the order in which the elements were
printed changed! With streams, we print the first element and then print
its double. In this example, the list was enumerated just once!</p><p>That's what we meant when we said earlier that streams are composable,
lazy enumerables. Note that we could call <a href="#map/2"><code class="inline">Stream.map/2</code></a> multiple times,
effectively composing the streams and keeping them lazy. The computations
are only performed when you call a function from the <a href="Enum.xhtml"><code class="inline">Enum</code></a> module.</p><p>Like with <a href="Enum.xhtml"><code class="inline">Enum</code></a>, the functions in this module work in linear time. This
means that, the time it takes to perform an operation grows at the same
rate as the length of the list. This is expected on operations such as
<a href="#map/2"><code class="inline">Stream.map/2</code></a>. After all, if we want to traverse every element on a
stream, the longer the stream, the more elements we need to traverse,
and the longer it will take.</p><h2 id="module-creating-streams">Creating Streams</h2><p>There are many functions in Elixir's standard library that return
streams, some examples are:</p><ul><li><a href="IO.xhtml#stream/2"><code class="inline">IO.stream/2</code></a>         - streams input lines, one by one</li><li><a href="URI.xhtml#query_decoder/1"><code class="inline">URI.query_decoder/1</code></a> - decodes a query string, pair by pair</li></ul><p>This module also provides many convenience functions for creating streams,
like <a href="#cycle/1"><code class="inline">Stream.cycle/1</code></a>, <a href="#unfold/2"><code class="inline">Stream.unfold/2</code></a>, <a href="#resource/3"><code class="inline">Stream.resource/3</code></a> and more.</p><blockquote><h4>Do not check for <a href="Stream.xhtml"><code class="inline">Stream</code></a> structs</h4><p>While some functions in this module may return the <a href="Stream.xhtml"><code class="inline">Stream</code></a> struct,
you must never explicitly check for the <a href="Stream.xhtml"><code class="inline">Stream</code></a> struct, as streams
may come in several shapes, such as <a href="IO.Stream.xhtml"><code class="inline">IO.Stream</code></a>, <a href="File.Stream.xhtml"><code class="inline">File.Stream</code></a>, or
even <a href="Range.xhtml"><code class="inline">Range</code></a>s.</p><p>The functions in this module only guarantee to return enumerables
and their implementation (structs, anonymous functions, etc) may
change at any time. For example, a function that returns an anonymous
function today may return a struct in future releases.</p><p>Instead of checking for a particular type, you must instead write
assertive code that assumes you have an enumerable, using the functions
in the <a href="Enum.xhtml"><code class="inline">Enum</code></a> or <a href="Stream.xhtml"><code class="inline">Stream</code></a> module accordingly.</p></blockquote>
      </section>


      <section id="summary" class="details-list">
        <h1 class="section-heading">Summary</h1>
<div class="summary-types summary">
  <h2>
    <a href="#types">Types</a>
  </h2>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#t:acc/0" data-no-tooltip="" translate="no">acc()</a>

      </div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#t:default/0" data-no-tooltip="" translate="no">default()</a>

      </div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#t:element/0" data-no-tooltip="" translate="no">element()</a>

      </div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#t:index/0" data-no-tooltip="" translate="no">index()</a>

      </div>

        <div class="summary-synopsis"><p>Zero-based index.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#t:timer/0" data-no-tooltip="" translate="no">timer()</a>

      </div>

    </div>

</div>
<div class="summary-functions summary">
  <h2>
    <a href="#functions">Functions</a>
  </h2>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#chunk_by/2" data-no-tooltip="" translate="no">chunk_by(enum, fun)</a>

      </div>

        <div class="summary-synopsis"><p>Chunks the <code class="inline">enum</code> by buffering elements for which <code class="inline">fun</code> returns the same value.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#chunk_every/2" data-no-tooltip="" translate="no">chunk_every(enum, count)</a>

      </div>

        <div class="summary-synopsis"><p>Shortcut to <code class="inline">chunk_every(enum, count, count)</code>.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#chunk_every/4" data-no-tooltip="" translate="no">chunk_every(enum, count, step, leftover \\ [])</a>

      </div>

        <div class="summary-synopsis"><p>Streams the enumerable in chunks, containing <code class="inline">count</code> elements each,
where each new chunk starts <code class="inline">step</code> elements into the enumerable.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#chunk_while/4" data-no-tooltip="" translate="no">chunk_while(enum, acc, chunk_fun, after_fun)</a>

      </div>

        <div class="summary-synopsis"><p>Chunks the <code class="inline">enum</code> with fine grained control when every chunk is emitted.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#concat/1" data-no-tooltip="" translate="no">concat(enumerables)</a>

      </div>

        <div class="summary-synopsis"><p>Creates a stream that enumerates each enumerable in an enumerable.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#concat/2" data-no-tooltip="" translate="no">concat(first, second)</a>

      </div>

        <div class="summary-synopsis"><p>Creates a stream that enumerates the first argument, followed by the second.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#cycle/1" data-no-tooltip="" translate="no">cycle(enumerable)</a>

      </div>

        <div class="summary-synopsis"><p>Creates a stream that cycles through the given enumerable,
infinitely.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#dedup/1" data-no-tooltip="" translate="no">dedup(enum)</a>

      </div>

        <div class="summary-synopsis"><p>Creates a stream that only emits elements if they are different from the last emitted element.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#dedup_by/2" data-no-tooltip="" translate="no">dedup_by(enum, fun)</a>

      </div>

        <div class="summary-synopsis"><p>Creates a stream that only emits elements if the result of calling <code class="inline">fun</code> on the element is
different from the (stored) result of calling <code class="inline">fun</code> on the last emitted element.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#drop/2" data-no-tooltip="" translate="no">drop(enum, n)</a>

      </div>

        <div class="summary-synopsis"><p>Lazily drops the next <code class="inline">n</code> elements from the enumerable.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#drop_every/2" data-no-tooltip="" translate="no">drop_every(enum, nth)</a>

      </div>

        <div class="summary-synopsis"><p>Creates a stream that drops every <code class="inline">nth</code> element from the enumerable.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#drop_while/2" data-no-tooltip="" translate="no">drop_while(enum, fun)</a>

      </div>

        <div class="summary-synopsis"><p>Lazily drops elements of the enumerable while the given
function returns a truthy value.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#duplicate/2" data-no-tooltip="" translate="no">duplicate(value, n)</a>

      </div>

        <div class="summary-synopsis"><p>Duplicates the given element <code class="inline">n</code> times in a stream.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#each/2" data-no-tooltip="" translate="no">each(enum, fun)</a>

      </div>

        <div class="summary-synopsis"><p>Executes the given function for each element.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#filter/2" data-no-tooltip="" translate="no">filter(enum, fun)</a>

      </div>

        <div class="summary-synopsis"><p>Creates a stream that filters elements according to
the given function on enumeration.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#flat_map/2" data-no-tooltip="" translate="no">flat_map(enum, mapper)</a>

      </div>

        <div class="summary-synopsis"><p>Maps the given <code class="inline">fun</code> over <code class="inline">enumerable</code> and flattens the result.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#from_index/1" data-no-tooltip="" translate="no">from_index(fun_or_offset \\ 0)</a>

      </div>

        <div class="summary-synopsis"><p>Builds a stream from an index, either starting from offset, or given by function.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#intersperse/2" data-no-tooltip="" translate="no">intersperse(enumerable, intersperse_element)</a>

      </div>

        <div class="summary-synopsis"><p>Lazily intersperses <code class="inline">intersperse_element</code> between each element of the enumeration.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#interval/1" data-no-tooltip="" translate="no">interval(n)</a>

      </div>

        <div class="summary-synopsis"><p>Creates a stream that emits a value after the given period <code class="inline">n</code>
in milliseconds.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#into/3" data-no-tooltip="" translate="no">into(enum, collectable, transform \\ fn x -&gt; x end)</a>

      </div>

        <div class="summary-synopsis"><p>Injects the stream values into the given collectable as a side-effect.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#iterate/2" data-no-tooltip="" translate="no">iterate(start_value, next_fun)</a>

      </div>

        <div class="summary-synopsis"><p>Emits a sequence of values, starting with <code class="inline">start_value</code>.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#map/2" data-no-tooltip="" translate="no">map(enum, fun)</a>

      </div>

        <div class="summary-synopsis"><p>Creates a stream that will apply the given function on
enumeration.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#map_every/3" data-no-tooltip="" translate="no">map_every(enum, nth, fun)</a>

      </div>

        <div class="summary-synopsis"><p>Creates a stream that will apply the given function on
every <code class="inline">nth</code> element from the enumerable.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#reject/2" data-no-tooltip="" translate="no">reject(enum, fun)</a>

      </div>

        <div class="summary-synopsis"><p>Creates a stream that will reject elements according to
the given function on enumeration.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#repeatedly/1" data-no-tooltip="" translate="no">repeatedly(generator_fun)</a>

      </div>

        <div class="summary-synopsis"><p>Returns a stream generated by calling <code class="inline">generator_fun</code> repeatedly.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#resource/3" data-no-tooltip="" translate="no">resource(start_fun, next_fun, after_fun)</a>

      </div>

        <div class="summary-synopsis"><p>Emits a sequence of values for the given resource.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#run/1" data-no-tooltip="" translate="no">run(stream)</a>

      </div>

        <div class="summary-synopsis"><p>Runs the given stream.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#scan/2" data-no-tooltip="" translate="no">scan(enum, fun)</a>

      </div>

        <div class="summary-synopsis"><p>Creates a stream that applies the given function to each
element, emits the result and uses the same result as the accumulator
for the next computation. Uses the first element in the enumerable
as the starting value.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#scan/3" data-no-tooltip="" translate="no">scan(enum, acc, fun)</a>

      </div>

        <div class="summary-synopsis"><p>Creates a stream that applies the given function to each
element, emits the result and uses the same result as the accumulator
for the next computation. Uses the given <code class="inline">acc</code> as the starting value.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#take/2" data-no-tooltip="" translate="no">take(enum, count)</a>

      </div>

        <div class="summary-synopsis"><p>Lazily takes the next <code class="inline">count</code> elements from the enumerable and stops
enumeration.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#take_every/2" data-no-tooltip="" translate="no">take_every(enum, nth)</a>

      </div>

        <div class="summary-synopsis"><p>Creates a stream that takes every <code class="inline">nth</code> element from the enumerable.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#take_while/2" data-no-tooltip="" translate="no">take_while(enum, fun)</a>

      </div>

        <div class="summary-synopsis"><p>Lazily takes elements of the enumerable while the given
function returns a truthy value.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#timer/1" data-no-tooltip="" translate="no">timer(n)</a>

      </div>

        <div class="summary-synopsis"><p>Creates a stream that emits a single value after <code class="inline">n</code> milliseconds.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#transform/3" data-no-tooltip="" translate="no">transform(enum, acc, reducer)</a>

      </div>

        <div class="summary-synopsis"><p>Transforms an existing stream.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#transform/4" data-no-tooltip="" translate="no">transform(enum, start_fun, reducer, after_fun)</a>

      </div>

        <div class="summary-synopsis"><p>Similar to <a><code class="inline">Stream.transform/5</code></a>, except <code class="inline">last_fun</code> is not supplied.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#transform/5" data-no-tooltip="" translate="no">transform(enum, start_fun, reducer, last_fun, after_fun)</a>

      </div>

        <div class="summary-synopsis"><p>Transforms an existing stream with function-based start, last, and after
callbacks.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#unfold/2" data-no-tooltip="" translate="no">unfold(next_acc, next_fun)</a>

      </div>

        <div class="summary-synopsis"><p>Emits a sequence of values for the given accumulator.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#uniq/1" data-no-tooltip="" translate="no">uniq(enum)</a>

      </div>

        <div class="summary-synopsis"><p>Creates a stream that only emits elements if they are unique.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#uniq_by/2" data-no-tooltip="" translate="no">uniq_by(enum, fun)</a>

      </div>

        <div class="summary-synopsis"><p>Creates a stream that only emits elements if they are unique, by removing the
elements for which function <code class="inline">fun</code> returned duplicate elements.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#with_index/2" data-no-tooltip="" translate="no">with_index(enum, fun_or_offset \\ 0)</a>

      </div>

        <div class="summary-synopsis"><p>Creates a stream where each element in the enumerable will
be wrapped in a tuple alongside its index or according to a given function.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#zip/1" data-no-tooltip="" translate="no">zip(enumerables)</a>

      </div>

        <div class="summary-synopsis"><p>Zips corresponding elements from a finite collection of enumerables
into one stream of tuples.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#zip/2" data-no-tooltip="" translate="no">zip(enumerable1, enumerable2)</a>

      </div>

        <div class="summary-synopsis"><p>Zips two enumerables together, lazily.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#zip_with/2" data-no-tooltip="" translate="no">zip_with(enumerables, zip_fun)</a>

      </div>

        <div class="summary-synopsis"><p>Lazily zips corresponding elements from a finite collection of enumerables into a new
enumerable, transforming them with the <code class="inline">zip_fun</code> function as it goes.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#zip_with/3" data-no-tooltip="" translate="no">zip_with(enumerable1, enumerable2, zip_fun)</a>

      </div>

        <div class="summary-synopsis"><p>Lazily zips corresponding elements from two enumerables into a new one, transforming them with
the <code class="inline">zip_fun</code> function as it goes.</p></div>

    </div>

</div>

      </section>


      <section id="types" class="details-list">
        <h1 class="section-heading">Types</h1>

        <div class="types-list">
<section class="detail" id="t:acc/0">

  <div class="detail-header">
    <a href="#t:acc/0" class="detail-link" data-no-tooltip="" aria-label="Link to this type">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">acc()</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/stream.ex#L116" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@type</span> acc() :: <a href="typespecs.xhtml#basic-types">any</a>()</pre>

      </div>


  </section>
</section>
<section class="detail" id="t:default/0">

  <div class="detail-header">
    <a href="#t:default/0" class="detail-link" data-no-tooltip="" aria-label="Link to this type">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">default()</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/stream.ex#L122" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@type</span> default() :: <a href="typespecs.xhtml#basic-types">any</a>()</pre>

      </div>


  </section>
</section>
<section class="detail" id="t:element/0">

  <div class="detail-header">
    <a href="#t:element/0" class="detail-link" data-no-tooltip="" aria-label="Link to this type">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">element()</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/stream.ex#L117" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@type</span> element() :: <a href="typespecs.xhtml#basic-types">any</a>()</pre>

      </div>


  </section>
</section>
<section class="detail" id="t:index/0">

  <div class="detail-header">
    <a href="#t:index/0" class="detail-link" data-no-tooltip="" aria-label="Link to this type">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">index()</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/stream.ex#L120" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@type</span> index() :: <a href="typespecs.xhtml#basic-types">non_neg_integer</a>()</pre>

      </div>

<p>Zero-based index.</p>
  </section>
</section>
<section class="detail" id="t:timer/0">

  <div class="detail-header">
    <a href="#t:timer/0" class="detail-link" data-no-tooltip="" aria-label="Link to this type">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">timer()</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/stream.ex#L123" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@type</span> timer() :: <a href="typespecs.xhtml#basic-types">non_neg_integer</a>() | :infinity</pre>

      </div>


  </section>
</section>

        </div>
      </section>

      <section id="functions" class="details-list">
        <h1 class="section-heading">Functions</h1>

        <div class="functions-list">
<section class="detail" id="chunk_by/2">

  <div class="detail-header">
    <a href="#chunk_by/2" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">chunk_by(enum, fun)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/stream.ex#L228" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> chunk_by(<a href="Enumerable.xhtml#t:t/0">Enumerable.t</a>(), (<a href="#t:element/0">element</a>() -&gt; <a href="typespecs.xhtml#basic-types">any</a>())) :: <a href="Enumerable.xhtml#t:t/0">Enumerable.t</a>()</pre>

      </div>

<p>Chunks the <code class="inline">enum</code> by buffering elements for which <code class="inline">fun</code> returns the same value.</p><p>Elements are only emitted when <code class="inline">fun</code> returns a new value or the <code class="inline">enum</code> finishes.</p><h2 id="chunk_by/2-examples" class="section-heading"><a href="#chunk_by/2-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="n">stream</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="nc">Stream</samp><samp class="o">.</samp><samp class="n">chunk_by</samp><samp class="p" data-group-id="8398263329-1">(</samp><samp class="p" data-group-id="8398263329-2">[</samp><samp class="mi">1</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">2</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">2</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">3</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">4</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">4</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">6</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">7</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">7</samp><samp class="p" data-group-id="8398263329-2">]</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="o">&amp;</samp><samp class="p" data-group-id="8398263329-3">(</samp><samp class="n">rem</samp><samp class="p" data-group-id="8398263329-4">(</samp><samp class="ni">&amp;1</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">2</samp><samp class="p" data-group-id="8398263329-4">)</samp><samp class="w"> </samp><samp class="o">==</samp><samp class="w"> </samp><samp class="mi">1</samp><samp class="p" data-group-id="8398263329-3">)</samp><samp class="p" data-group-id="8398263329-1">)</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Enum</samp><samp class="o">.</samp><samp class="n">to_list</samp><samp class="p" data-group-id="8398263329-5">(</samp><samp class="n">stream</samp><samp class="p" data-group-id="8398263329-5">)</samp><samp class="w">
</samp><samp class="p" data-group-id="8398263329-6">[</samp><samp class="p" data-group-id="8398263329-7">[</samp><samp class="mi">1</samp><samp class="p" data-group-id="8398263329-7">]</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="8398263329-8">[</samp><samp class="mi">2</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">2</samp><samp class="p" data-group-id="8398263329-8">]</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="8398263329-9">[</samp><samp class="mi">3</samp><samp class="p" data-group-id="8398263329-9">]</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="8398263329-10">[</samp><samp class="mi">4</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">4</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">6</samp><samp class="p" data-group-id="8398263329-10">]</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="8398263329-11">[</samp><samp class="mi">7</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">7</samp><samp class="p" data-group-id="8398263329-11">]</samp><samp class="p" data-group-id="8398263329-6">]</samp></code></pre>
  </section>
</section>
<section class="detail" id="chunk_every/2">

  <div class="detail-header">
    <a href="#chunk_every/2" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">chunk_every(enum, count)</h1>

        <span class="note">(since 1.5.0)</span>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/stream.ex#L171" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> chunk_every(<a href="Enumerable.xhtml#t:t/0">Enumerable.t</a>(), <a href="typespecs.xhtml#basic-types">pos_integer</a>()) :: <a href="Enumerable.xhtml#t:t/0">Enumerable.t</a>()</pre>

      </div>

<p>Shortcut to <code class="inline">chunk_every(enum, count, count)</code>.</p>
  </section>
</section>
<section class="detail" id="chunk_every/4">

    <span id="chunk_every/3"></span>

  <div class="detail-header">
    <a href="#chunk_every/4" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">chunk_every(enum, count, step, leftover \\ [])</h1>

        <span class="note">(since 1.5.0)</span>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/stream.ex#L210" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> chunk_every(
  <a href="Enumerable.xhtml#t:t/0">Enumerable.t</a>(),
  <a href="typespecs.xhtml#basic-types">pos_integer</a>(),
  <a href="typespecs.xhtml#basic-types">pos_integer</a>(),
  <a href="Enumerable.xhtml#t:t/0">Enumerable.t</a>() | :discard
) ::
  <a href="Enumerable.xhtml#t:t/0">Enumerable.t</a>()</pre>

      </div>

<p>Streams the enumerable in chunks, containing <code class="inline">count</code> elements each,
where each new chunk starts <code class="inline">step</code> elements into the enumerable.</p><p><code class="inline">step</code> is optional and, if not passed, defaults to <code class="inline">count</code>, i.e.
chunks do not overlap. Chunking will stop as soon as the collection
ends or when we emit an incomplete chunk.</p><p>If the last chunk does not have <code class="inline">count</code> elements to fill the chunk,
elements are taken from <code class="inline">leftover</code> to fill in the chunk. If <code class="inline">leftover</code>
does not have enough elements to fill the chunk, then a partial chunk
is returned with less than <code class="inline">count</code> elements.</p><p>If <code class="inline">:discard</code> is given in <code class="inline">leftover</code>, the last chunk is discarded
unless it has exactly <code class="inline">count</code> elements.</p><h2 id="chunk_every/4-examples" class="section-heading"><a href="#chunk_every/4-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Stream</samp><samp class="o">.</samp><samp class="n">chunk_every</samp><samp class="p" data-group-id="7562236271-1">(</samp><samp class="p" data-group-id="7562236271-2">[</samp><samp class="mi">1</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">2</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">3</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">4</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">5</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">6</samp><samp class="p" data-group-id="7562236271-2">]</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">2</samp><samp class="p" data-group-id="7562236271-1">)</samp><samp class="w"> </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Enum</samp><samp class="o">.</samp><samp class="n">to_list</samp><samp class="p" data-group-id="7562236271-3">(</samp><samp class="p" data-group-id="7562236271-3">)</samp><samp class="w">
</samp><samp class="p" data-group-id="7562236271-4">[</samp><samp class="p" data-group-id="7562236271-5">[</samp><samp class="mi">1</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">2</samp><samp class="p" data-group-id="7562236271-5">]</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="7562236271-6">[</samp><samp class="mi">3</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">4</samp><samp class="p" data-group-id="7562236271-6">]</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="7562236271-7">[</samp><samp class="mi">5</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">6</samp><samp class="p" data-group-id="7562236271-7">]</samp><samp class="p" data-group-id="7562236271-4">]</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Stream</samp><samp class="o">.</samp><samp class="n">chunk_every</samp><samp class="p" data-group-id="7562236271-8">(</samp><samp class="p" data-group-id="7562236271-9">[</samp><samp class="mi">1</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">2</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">3</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">4</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">5</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">6</samp><samp class="p" data-group-id="7562236271-9">]</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">3</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">2</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:discard</samp><samp class="p" data-group-id="7562236271-8">)</samp><samp class="w"> </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Enum</samp><samp class="o">.</samp><samp class="n">to_list</samp><samp class="p" data-group-id="7562236271-10">(</samp><samp class="p" data-group-id="7562236271-10">)</samp><samp class="w">
</samp><samp class="p" data-group-id="7562236271-11">[</samp><samp class="p" data-group-id="7562236271-12">[</samp><samp class="mi">1</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">2</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">3</samp><samp class="p" data-group-id="7562236271-12">]</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="7562236271-13">[</samp><samp class="mi">3</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">4</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">5</samp><samp class="p" data-group-id="7562236271-13">]</samp><samp class="p" data-group-id="7562236271-11">]</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Stream</samp><samp class="o">.</samp><samp class="n">chunk_every</samp><samp class="p" data-group-id="7562236271-14">(</samp><samp class="p" data-group-id="7562236271-15">[</samp><samp class="mi">1</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">2</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">3</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">4</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">5</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">6</samp><samp class="p" data-group-id="7562236271-15">]</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">3</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">2</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="7562236271-16">[</samp><samp class="mi">7</samp><samp class="p" data-group-id="7562236271-16">]</samp><samp class="p" data-group-id="7562236271-14">)</samp><samp class="w"> </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Enum</samp><samp class="o">.</samp><samp class="n">to_list</samp><samp class="p" data-group-id="7562236271-17">(</samp><samp class="p" data-group-id="7562236271-17">)</samp><samp class="w">
</samp><samp class="p" data-group-id="7562236271-18">[</samp><samp class="p" data-group-id="7562236271-19">[</samp><samp class="mi">1</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">2</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">3</samp><samp class="p" data-group-id="7562236271-19">]</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="7562236271-20">[</samp><samp class="mi">3</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">4</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">5</samp><samp class="p" data-group-id="7562236271-20">]</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="7562236271-21">[</samp><samp class="mi">5</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">6</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">7</samp><samp class="p" data-group-id="7562236271-21">]</samp><samp class="p" data-group-id="7562236271-18">]</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Stream</samp><samp class="o">.</samp><samp class="n">chunk_every</samp><samp class="p" data-group-id="7562236271-22">(</samp><samp class="p" data-group-id="7562236271-23">[</samp><samp class="mi">1</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">2</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">3</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">4</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">5</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">6</samp><samp class="p" data-group-id="7562236271-23">]</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">3</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">3</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="7562236271-24">[</samp><samp class="p" data-group-id="7562236271-24">]</samp><samp class="p" data-group-id="7562236271-22">)</samp><samp class="w"> </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Enum</samp><samp class="o">.</samp><samp class="n">to_list</samp><samp class="p" data-group-id="7562236271-25">(</samp><samp class="p" data-group-id="7562236271-25">)</samp><samp class="w">
</samp><samp class="p" data-group-id="7562236271-26">[</samp><samp class="p" data-group-id="7562236271-27">[</samp><samp class="mi">1</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">2</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">3</samp><samp class="p" data-group-id="7562236271-27">]</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="7562236271-28">[</samp><samp class="mi">4</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">5</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">6</samp><samp class="p" data-group-id="7562236271-28">]</samp><samp class="p" data-group-id="7562236271-26">]</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Stream</samp><samp class="o">.</samp><samp class="n">chunk_every</samp><samp class="p" data-group-id="7562236271-29">(</samp><samp class="p" data-group-id="7562236271-30">[</samp><samp class="mi">1</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">2</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">3</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">4</samp><samp class="p" data-group-id="7562236271-30">]</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">3</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">3</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="nc">Stream</samp><samp class="o">.</samp><samp class="n">cycle</samp><samp class="p" data-group-id="7562236271-31">(</samp><samp class="p" data-group-id="7562236271-32">[</samp><samp class="mi">0</samp><samp class="p" data-group-id="7562236271-32">]</samp><samp class="p" data-group-id="7562236271-31">)</samp><samp class="p" data-group-id="7562236271-29">)</samp><samp class="w"> </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Enum</samp><samp class="o">.</samp><samp class="n">to_list</samp><samp class="p" data-group-id="7562236271-33">(</samp><samp class="p" data-group-id="7562236271-33">)</samp><samp class="w">
</samp><samp class="p" data-group-id="7562236271-34">[</samp><samp class="p" data-group-id="7562236271-35">[</samp><samp class="mi">1</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">2</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">3</samp><samp class="p" data-group-id="7562236271-35">]</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="7562236271-36">[</samp><samp class="mi">4</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">0</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">0</samp><samp class="p" data-group-id="7562236271-36">]</samp><samp class="p" data-group-id="7562236271-34">]</samp></code></pre>
  </section>
</section>
<section class="detail" id="chunk_while/4">

  <div class="detail-header">
    <a href="#chunk_while/4" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">chunk_while(enum, acc, chunk_fun, after_fun)</h1>

        <span class="note">(since 1.5.0)</span>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/stream.ex#L269" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> chunk_while(
  <a href="Enumerable.xhtml#t:t/0">Enumerable.t</a>(),
  <a href="#t:acc/0">acc</a>(),
  (<a href="#t:element/0">element</a>(), <a href="#t:acc/0">acc</a>() -&gt; {:cont, chunk, <a href="#t:acc/0">acc</a>()} | {:cont, <a href="#t:acc/0">acc</a>()} | {:halt, <a href="#t:acc/0">acc</a>()}),
  (<a href="#t:acc/0">acc</a>() -&gt; {:cont, chunk, <a href="#t:acc/0">acc</a>()} | {:cont, <a href="#t:acc/0">acc</a>()})
) :: <a href="Enumerable.xhtml#t:t/0">Enumerable.t</a>()
when chunk: <a href="typespecs.xhtml#basic-types">any</a>()</pre>

      </div>

<p>Chunks the <code class="inline">enum</code> with fine grained control when every chunk is emitted.</p><p><code class="inline">chunk_fun</code> receives the current element and the accumulator and
must return <code class="inline">{:cont, element, acc}</code> to emit the given chunk and
continue with accumulator or <code class="inline">{:cont, acc}</code> to not emit any chunk
and continue with the return accumulator.</p><p><code class="inline">after_fun</code> is invoked when iteration is done and must also return
<code class="inline">{:cont, element, acc}</code> or <code class="inline">{:cont, acc}</code>.</p><h2 id="chunk_while/4-examples" class="section-heading"><a href="#chunk_while/4-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="n">chunk_fun</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="k" data-group-id="9949031562-1">fn</samp><samp class="w"> </samp><samp class="n">element</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">acc</samp><samp class="w"> </samp><samp class="o">-&gt;</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="w">  </samp><samp class="k">if</samp><samp class="w"> </samp><samp class="n">rem</samp><samp class="p" data-group-id="9949031562-2">(</samp><samp class="n">element</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">2</samp><samp class="p" data-group-id="9949031562-2">)</samp><samp class="w"> </samp><samp class="o">==</samp><samp class="w"> </samp><samp class="mi">0</samp><samp class="w"> </samp><samp class="k" data-group-id="9949031562-3">do</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="w">    </samp><samp class="p" data-group-id="9949031562-4">{</samp><samp class="ss">:cont</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="nc">Enum</samp><samp class="o">.</samp><samp class="n">reverse</samp><samp class="p" data-group-id="9949031562-5">(</samp><samp class="p" data-group-id="9949031562-6">[</samp><samp class="n">element</samp><samp class="w"> </samp><samp class="o">|</samp><samp class="w"> </samp><samp class="n">acc</samp><samp class="p" data-group-id="9949031562-6">]</samp><samp class="p" data-group-id="9949031562-5">)</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="9949031562-7">[</samp><samp class="p" data-group-id="9949031562-7">]</samp><samp class="p" data-group-id="9949031562-4">}</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="w">  </samp><samp class="k" data-group-id="9949031562-3">else</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="w">    </samp><samp class="p" data-group-id="9949031562-8">{</samp><samp class="ss">:cont</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="9949031562-9">[</samp><samp class="n">element</samp><samp class="w"> </samp><samp class="o">|</samp><samp class="w"> </samp><samp class="n">acc</samp><samp class="p" data-group-id="9949031562-9">]</samp><samp class="p" data-group-id="9949031562-8">}</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="w">  </samp><samp class="k" data-group-id="9949031562-3">end</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="k" data-group-id="9949031562-1">end</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="n">after_fun</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="k" data-group-id="9949031562-10">fn</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="w">  </samp><samp class="p" data-group-id="9949031562-11">[</samp><samp class="p" data-group-id="9949031562-11">]</samp><samp class="w"> </samp><samp class="o">-&gt;</samp><samp class="w"> </samp><samp class="p" data-group-id="9949031562-12">{</samp><samp class="ss">:cont</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="9949031562-13">[</samp><samp class="p" data-group-id="9949031562-13">]</samp><samp class="p" data-group-id="9949031562-12">}</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="w">  </samp><samp class="n">acc</samp><samp class="w"> </samp><samp class="o">-&gt;</samp><samp class="w"> </samp><samp class="p" data-group-id="9949031562-14">{</samp><samp class="ss">:cont</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="nc">Enum</samp><samp class="o">.</samp><samp class="n">reverse</samp><samp class="p" data-group-id="9949031562-15">(</samp><samp class="n">acc</samp><samp class="p" data-group-id="9949031562-15">)</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="9949031562-16">[</samp><samp class="p" data-group-id="9949031562-16">]</samp><samp class="p" data-group-id="9949031562-14">}</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="k" data-group-id="9949031562-10">end</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="n">stream</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="nc">Stream</samp><samp class="o">.</samp><samp class="n">chunk_while</samp><samp class="p" data-group-id="9949031562-17">(</samp><samp class="mi">1</samp><samp class="o">..</samp><samp class="mi">10</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="9949031562-18">[</samp><samp class="p" data-group-id="9949031562-18">]</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">chunk_fun</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">after_fun</samp><samp class="p" data-group-id="9949031562-17">)</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Enum</samp><samp class="o">.</samp><samp class="n">to_list</samp><samp class="p" data-group-id="9949031562-19">(</samp><samp class="n">stream</samp><samp class="p" data-group-id="9949031562-19">)</samp><samp class="w">
</samp><samp class="p" data-group-id="9949031562-20">[</samp><samp class="p" data-group-id="9949031562-21">[</samp><samp class="mi">1</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">2</samp><samp class="p" data-group-id="9949031562-21">]</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="9949031562-22">[</samp><samp class="mi">3</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">4</samp><samp class="p" data-group-id="9949031562-22">]</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="9949031562-23">[</samp><samp class="mi">5</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">6</samp><samp class="p" data-group-id="9949031562-23">]</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="9949031562-24">[</samp><samp class="mi">7</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">8</samp><samp class="p" data-group-id="9949031562-24">]</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="9949031562-25">[</samp><samp class="mi">9</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">10</samp><samp class="p" data-group-id="9949031562-25">]</samp><samp class="p" data-group-id="9949031562-20">]</samp></code></pre>
  </section>
</section>
<section class="detail" id="concat/1">

  <div class="detail-header">
    <a href="#concat/1" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">concat(enumerables)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/stream.ex#L1243" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> concat(<a href="Enumerable.xhtml#t:t/0">Enumerable.t</a>()) :: <a href="Enumerable.xhtml#t:t/0">Enumerable.t</a>()</pre>

      </div>

<p>Creates a stream that enumerates each enumerable in an enumerable.</p><h2 id="concat/1-examples" class="section-heading"><a href="#concat/1-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="n">stream</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="nc">Stream</samp><samp class="o">.</samp><samp class="n">concat</samp><samp class="p" data-group-id="9113587735-1">(</samp><samp class="p" data-group-id="9113587735-2">[</samp><samp class="mi">1</samp><samp class="o">..</samp><samp class="mi">3</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">4</samp><samp class="o">..</samp><samp class="mi">6</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">7</samp><samp class="o">..</samp><samp class="mi">9</samp><samp class="p" data-group-id="9113587735-2">]</samp><samp class="p" data-group-id="9113587735-1">)</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Enum</samp><samp class="o">.</samp><samp class="n">to_list</samp><samp class="p" data-group-id="9113587735-3">(</samp><samp class="n">stream</samp><samp class="p" data-group-id="9113587735-3">)</samp><samp class="w">
</samp><samp class="p" data-group-id="9113587735-4">[</samp><samp class="mi">1</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">2</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">3</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">4</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">5</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">6</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">7</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">8</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">9</samp><samp class="p" data-group-id="9113587735-4">]</samp></code></pre>
  </section>
</section>
<section class="detail" id="concat/2">

  <div class="detail-header">
    <a href="#concat/2" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">concat(first, second)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/stream.ex#L1264" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> concat(<a href="Enumerable.xhtml#t:t/0">Enumerable.t</a>(), <a href="Enumerable.xhtml#t:t/0">Enumerable.t</a>()) :: <a href="Enumerable.xhtml#t:t/0">Enumerable.t</a>()</pre>

      </div>

<p>Creates a stream that enumerates the first argument, followed by the second.</p><h2 id="concat/2-examples" class="section-heading"><a href="#concat/2-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="n">stream</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="nc">Stream</samp><samp class="o">.</samp><samp class="n">concat</samp><samp class="p" data-group-id="9720177438-1">(</samp><samp class="mi">1</samp><samp class="o">..</samp><samp class="mi">3</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">4</samp><samp class="o">..</samp><samp class="mi">6</samp><samp class="p" data-group-id="9720177438-1">)</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Enum</samp><samp class="o">.</samp><samp class="n">to_list</samp><samp class="p" data-group-id="9720177438-2">(</samp><samp class="n">stream</samp><samp class="p" data-group-id="9720177438-2">)</samp><samp class="w">
</samp><samp class="p" data-group-id="9720177438-3">[</samp><samp class="mi">1</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">2</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">3</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">4</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">5</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">6</samp><samp class="p" data-group-id="9720177438-3">]</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="n">stream1</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="nc">Stream</samp><samp class="o">.</samp><samp class="n">cycle</samp><samp class="p" data-group-id="9720177438-4">(</samp><samp class="p" data-group-id="9720177438-5">[</samp><samp class="mi">1</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">2</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">3</samp><samp class="p" data-group-id="9720177438-5">]</samp><samp class="p" data-group-id="9720177438-4">)</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="n">stream2</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="nc">Stream</samp><samp class="o">.</samp><samp class="n">cycle</samp><samp class="p" data-group-id="9720177438-6">(</samp><samp class="p" data-group-id="9720177438-7">[</samp><samp class="mi">4</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">5</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">6</samp><samp class="p" data-group-id="9720177438-7">]</samp><samp class="p" data-group-id="9720177438-6">)</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="n">stream</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="nc">Stream</samp><samp class="o">.</samp><samp class="n">concat</samp><samp class="p" data-group-id="9720177438-8">(</samp><samp class="n">stream1</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">stream2</samp><samp class="p" data-group-id="9720177438-8">)</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Enum</samp><samp class="o">.</samp><samp class="n">take</samp><samp class="p" data-group-id="9720177438-9">(</samp><samp class="n">stream</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">6</samp><samp class="p" data-group-id="9720177438-9">)</samp><samp class="w">
</samp><samp class="p" data-group-id="9720177438-10">[</samp><samp class="mi">1</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">2</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">3</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">1</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">2</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">3</samp><samp class="p" data-group-id="9720177438-10">]</samp></code></pre>
  </section>
</section>
<section class="detail" id="cycle/1">

  <div class="detail-header">
    <a href="#cycle/1" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">cycle(enumerable)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/stream.ex#L1396" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> cycle(<a href="Enumerable.xhtml#t:t/0">Enumerable.t</a>()) :: <a href="Enumerable.xhtml#t:t/0">Enumerable.t</a>()</pre>

      </div>

<p>Creates a stream that cycles through the given enumerable,
infinitely.</p><h2 id="cycle/1-examples" class="section-heading"><a href="#cycle/1-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="n">stream</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="nc">Stream</samp><samp class="o">.</samp><samp class="n">cycle</samp><samp class="p" data-group-id="5731867311-1">(</samp><samp class="p" data-group-id="5731867311-2">[</samp><samp class="mi">1</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">2</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">3</samp><samp class="p" data-group-id="5731867311-2">]</samp><samp class="p" data-group-id="5731867311-1">)</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Enum</samp><samp class="o">.</samp><samp class="n">take</samp><samp class="p" data-group-id="5731867311-3">(</samp><samp class="n">stream</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">5</samp><samp class="p" data-group-id="5731867311-3">)</samp><samp class="w">
</samp><samp class="p" data-group-id="5731867311-4">[</samp><samp class="mi">1</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">2</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">3</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">1</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">2</samp><samp class="p" data-group-id="5731867311-4">]</samp></code></pre>
  </section>
</section>
<section class="detail" id="dedup/1">

  <div class="detail-header">
    <a href="#dedup/1" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">dedup(enum)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/stream.ex#L321" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> dedup(<a href="Enumerable.xhtml#t:t/0">Enumerable.t</a>()) :: <a href="Enumerable.xhtml#t:t/0">Enumerable.t</a>()</pre>

      </div>

<p>Creates a stream that only emits elements if they are different from the last emitted element.</p><p>This function only ever needs to store the last emitted element.</p><p>Elements are compared using <a href="Kernel.xhtml#===/2"><code class="inline">===/2</code></a>.</p><h2 id="dedup/1-examples" class="section-heading"><a href="#dedup/1-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Stream</samp><samp class="o">.</samp><samp class="n">dedup</samp><samp class="p" data-group-id="1058300927-1">(</samp><samp class="p" data-group-id="1058300927-2">[</samp><samp class="mi">1</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">2</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">3</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">3</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">2</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">1</samp><samp class="p" data-group-id="1058300927-2">]</samp><samp class="p" data-group-id="1058300927-1">)</samp><samp class="w"> </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Enum</samp><samp class="o">.</samp><samp class="n">to_list</samp><samp class="p" data-group-id="1058300927-3">(</samp><samp class="p" data-group-id="1058300927-3">)</samp><samp class="w">
</samp><samp class="p" data-group-id="1058300927-4">[</samp><samp class="mi">1</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">2</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">3</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">2</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">1</samp><samp class="p" data-group-id="1058300927-4">]</samp></code></pre>
  </section>
</section>
<section class="detail" id="dedup_by/2">

  <div class="detail-header">
    <a href="#dedup_by/2" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">dedup_by(enum, fun)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/stream.ex#L336" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> dedup_by(<a href="Enumerable.xhtml#t:t/0">Enumerable.t</a>(), (<a href="#t:element/0">element</a>() -&gt; <a href="typespecs.xhtml#built-in-types">term</a>())) :: <a href="Enumerable.xhtml#t:t/0">Enumerable.t</a>()</pre>

      </div>

<p>Creates a stream that only emits elements if the result of calling <code class="inline">fun</code> on the element is
different from the (stored) result of calling <code class="inline">fun</code> on the last emitted element.</p><h2 id="dedup_by/2-examples" class="section-heading"><a href="#dedup_by/2-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Stream</samp><samp class="o">.</samp><samp class="n">dedup_by</samp><samp class="p" data-group-id="0587180097-1">(</samp><samp class="p" data-group-id="0587180097-2">[</samp><samp class="p" data-group-id="0587180097-3">{</samp><samp class="mi">1</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:x</samp><samp class="p" data-group-id="0587180097-3">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="0587180097-4">{</samp><samp class="mi">2</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:y</samp><samp class="p" data-group-id="0587180097-4">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="0587180097-5">{</samp><samp class="mi">2</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:z</samp><samp class="p" data-group-id="0587180097-5">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="0587180097-6">{</samp><samp class="mi">1</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:x</samp><samp class="p" data-group-id="0587180097-6">}</samp><samp class="p" data-group-id="0587180097-2">]</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="k" data-group-id="0587180097-7">fn</samp><samp class="w"> </samp><samp class="p" data-group-id="0587180097-8">{</samp><samp class="n">x</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="bp">_</samp><samp class="p" data-group-id="0587180097-8">}</samp><samp class="w"> </samp><samp class="o">-&gt;</samp><samp class="w"> </samp><samp class="n">x</samp><samp class="w"> </samp><samp class="k" data-group-id="0587180097-7">end</samp><samp class="p" data-group-id="0587180097-1">)</samp><samp class="w"> </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Enum</samp><samp class="o">.</samp><samp class="n">to_list</samp><samp class="p" data-group-id="0587180097-9">(</samp><samp class="p" data-group-id="0587180097-9">)</samp><samp class="w">
</samp><samp class="p" data-group-id="0587180097-10">[</samp><samp class="p" data-group-id="0587180097-11">{</samp><samp class="mi">1</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:x</samp><samp class="p" data-group-id="0587180097-11">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="0587180097-12">{</samp><samp class="mi">2</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:y</samp><samp class="p" data-group-id="0587180097-12">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="0587180097-13">{</samp><samp class="mi">1</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:x</samp><samp class="p" data-group-id="0587180097-13">}</samp><samp class="p" data-group-id="0587180097-10">]</samp></code></pre>
  </section>
</section>
<section class="detail" id="drop/2">

  <div class="detail-header">
    <a href="#drop/2" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">drop(enum, n)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/stream.ex#L360" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> drop(<a href="Enumerable.xhtml#t:t/0">Enumerable.t</a>(), <a href="typespecs.xhtml#basic-types">integer</a>()) :: <a href="Enumerable.xhtml#t:t/0">Enumerable.t</a>()</pre>

      </div>

<p>Lazily drops the next <code class="inline">n</code> elements from the enumerable.</p><p>If a negative <code class="inline">n</code> is given, it will drop the last <code class="inline">n</code> elements from
the collection. Note that the mechanism by which this is implemented
will delay the emission of any element until <code class="inline">n</code> additional elements have
been emitted by the enum.</p><h2 id="drop/2-examples" class="section-heading"><a href="#drop/2-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="n">stream</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="nc">Stream</samp><samp class="o">.</samp><samp class="n">drop</samp><samp class="p" data-group-id="7921113620-1">(</samp><samp class="mi">1</samp><samp class="o">..</samp><samp class="mi">10</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">5</samp><samp class="p" data-group-id="7921113620-1">)</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Enum</samp><samp class="o">.</samp><samp class="n">to_list</samp><samp class="p" data-group-id="7921113620-2">(</samp><samp class="n">stream</samp><samp class="p" data-group-id="7921113620-2">)</samp><samp class="w">
</samp><samp class="p" data-group-id="7921113620-3">[</samp><samp class="mi">6</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">7</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">8</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">9</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">10</samp><samp class="p" data-group-id="7921113620-3">]</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="n">stream</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="nc">Stream</samp><samp class="o">.</samp><samp class="n">drop</samp><samp class="p" data-group-id="7921113620-4">(</samp><samp class="mi">1</samp><samp class="o">..</samp><samp class="mi">10</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="o">-</samp><samp class="mi">5</samp><samp class="p" data-group-id="7921113620-4">)</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Enum</samp><samp class="o">.</samp><samp class="n">to_list</samp><samp class="p" data-group-id="7921113620-5">(</samp><samp class="n">stream</samp><samp class="p" data-group-id="7921113620-5">)</samp><samp class="w">
</samp><samp class="p" data-group-id="7921113620-6">[</samp><samp class="mi">1</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">2</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">3</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">4</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">5</samp><samp class="p" data-group-id="7921113620-6">]</samp></code></pre>
  </section>
</section>
<section class="detail" id="drop_every/2">

  <div class="detail-header">
    <a href="#drop_every/2" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">drop_every(enum, nth)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/stream.ex#L413" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> drop_every(<a href="Enumerable.xhtml#t:t/0">Enumerable.t</a>(), <a href="typespecs.xhtml#basic-types">non_neg_integer</a>()) :: <a href="Enumerable.xhtml#t:t/0">Enumerable.t</a>()</pre>

      </div>

<p>Creates a stream that drops every <code class="inline">nth</code> element from the enumerable.</p><p>The first element is always dropped, unless <code class="inline">nth</code> is 0.</p><p><code class="inline">nth</code> must be a non-negative integer.</p><h2 id="drop_every/2-examples" class="section-heading"><a href="#drop_every/2-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="n">stream</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="nc">Stream</samp><samp class="o">.</samp><samp class="n">drop_every</samp><samp class="p" data-group-id="3215148013-1">(</samp><samp class="mi">1</samp><samp class="o">..</samp><samp class="mi">10</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">2</samp><samp class="p" data-group-id="3215148013-1">)</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Enum</samp><samp class="o">.</samp><samp class="n">to_list</samp><samp class="p" data-group-id="3215148013-2">(</samp><samp class="n">stream</samp><samp class="p" data-group-id="3215148013-2">)</samp><samp class="w">
</samp><samp class="p" data-group-id="3215148013-3">[</samp><samp class="mi">2</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">4</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">6</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">8</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">10</samp><samp class="p" data-group-id="3215148013-3">]</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="n">stream</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="nc">Stream</samp><samp class="o">.</samp><samp class="n">drop_every</samp><samp class="p" data-group-id="3215148013-4">(</samp><samp class="mi">1</samp><samp class="o">..</samp><samp class="mi">1000</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">1</samp><samp class="p" data-group-id="3215148013-4">)</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Enum</samp><samp class="o">.</samp><samp class="n">to_list</samp><samp class="p" data-group-id="3215148013-5">(</samp><samp class="n">stream</samp><samp class="p" data-group-id="3215148013-5">)</samp><samp class="w">
</samp><samp class="p" data-group-id="3215148013-6">[</samp><samp class="p" data-group-id="3215148013-6">]</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="n">stream</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="nc">Stream</samp><samp class="o">.</samp><samp class="n">drop_every</samp><samp class="p" data-group-id="3215148013-7">(</samp><samp class="p" data-group-id="3215148013-8">[</samp><samp class="mi">1</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">2</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">3</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">4</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">5</samp><samp class="p" data-group-id="3215148013-8">]</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">0</samp><samp class="p" data-group-id="3215148013-7">)</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Enum</samp><samp class="o">.</samp><samp class="n">to_list</samp><samp class="p" data-group-id="3215148013-9">(</samp><samp class="n">stream</samp><samp class="p" data-group-id="3215148013-9">)</samp><samp class="w">
</samp><samp class="p" data-group-id="3215148013-10">[</samp><samp class="mi">1</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">2</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">3</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">4</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">5</samp><samp class="p" data-group-id="3215148013-10">]</samp></code></pre>
  </section>
</section>
<section class="detail" id="drop_while/2">

  <div class="detail-header">
    <a href="#drop_while/2" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">drop_while(enum, fun)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/stream.ex#L433" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> drop_while(<a href="Enumerable.xhtml#t:t/0">Enumerable.t</a>(), (<a href="#t:element/0">element</a>() -&gt; <a href="typespecs.xhtml#built-in-types">as_boolean</a>(<a href="typespecs.xhtml#built-in-types">term</a>()))) :: <a href="Enumerable.xhtml#t:t/0">Enumerable.t</a>()</pre>

      </div>

<p>Lazily drops elements of the enumerable while the given
function returns a truthy value.</p><h2 id="drop_while/2-examples" class="section-heading"><a href="#drop_while/2-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="n">stream</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="nc">Stream</samp><samp class="o">.</samp><samp class="n">drop_while</samp><samp class="p" data-group-id="2164165324-1">(</samp><samp class="mi">1</samp><samp class="o">..</samp><samp class="mi">10</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="o">&amp;</samp><samp class="p" data-group-id="2164165324-2">(</samp><samp class="ni">&amp;1</samp><samp class="w"> </samp><samp class="o">&lt;=</samp><samp class="w"> </samp><samp class="mi">5</samp><samp class="p" data-group-id="2164165324-2">)</samp><samp class="p" data-group-id="2164165324-1">)</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Enum</samp><samp class="o">.</samp><samp class="n">to_list</samp><samp class="p" data-group-id="2164165324-3">(</samp><samp class="n">stream</samp><samp class="p" data-group-id="2164165324-3">)</samp><samp class="w">
</samp><samp class="p" data-group-id="2164165324-4">[</samp><samp class="mi">6</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">7</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">8</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">9</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">10</samp><samp class="p" data-group-id="2164165324-4">]</samp></code></pre>
  </section>
</section>
<section class="detail" id="duplicate/2">

  <div class="detail-header">
    <a href="#duplicate/2" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">duplicate(value, n)</h1>

        <span class="note">(since 1.14.0)</span>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/stream.ex#L464" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> duplicate(<a href="typespecs.xhtml#basic-types">any</a>(), <a href="typespecs.xhtml#basic-types">non_neg_integer</a>()) :: <a href="Enumerable.xhtml#t:t/0">Enumerable.t</a>()</pre>

      </div>

<p>Duplicates the given element <code class="inline">n</code> times in a stream.</p><p><code class="inline">n</code> is an integer greater than or equal to <code class="inline">0</code>.</p><p>If <code class="inline">n</code> is <code class="inline">0</code>, an empty stream is returned.</p><h2 id="duplicate/2-examples" class="section-heading"><a href="#duplicate/2-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="n">stream</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="nc">Stream</samp><samp class="o">.</samp><samp class="n">duplicate</samp><samp class="p" data-group-id="8579755352-1">(</samp><samp class="s">&quot;hello&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">0</samp><samp class="p" data-group-id="8579755352-1">)</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Enum</samp><samp class="o">.</samp><samp class="n">to_list</samp><samp class="p" data-group-id="8579755352-2">(</samp><samp class="n">stream</samp><samp class="p" data-group-id="8579755352-2">)</samp><samp class="w">
</samp><samp class="p" data-group-id="8579755352-3">[</samp><samp class="p" data-group-id="8579755352-3">]</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="n">stream</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="nc">Stream</samp><samp class="o">.</samp><samp class="n">duplicate</samp><samp class="p" data-group-id="8579755352-4">(</samp><samp class="s">&quot;hi&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">1</samp><samp class="p" data-group-id="8579755352-4">)</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Enum</samp><samp class="o">.</samp><samp class="n">to_list</samp><samp class="p" data-group-id="8579755352-5">(</samp><samp class="n">stream</samp><samp class="p" data-group-id="8579755352-5">)</samp><samp class="w">
</samp><samp class="p" data-group-id="8579755352-6">[</samp><samp class="s">&quot;hi&quot;</samp><samp class="p" data-group-id="8579755352-6">]</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="n">stream</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="nc">Stream</samp><samp class="o">.</samp><samp class="n">duplicate</samp><samp class="p" data-group-id="8579755352-7">(</samp><samp class="s">&quot;bye&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">2</samp><samp class="p" data-group-id="8579755352-7">)</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Enum</samp><samp class="o">.</samp><samp class="n">to_list</samp><samp class="p" data-group-id="8579755352-8">(</samp><samp class="n">stream</samp><samp class="p" data-group-id="8579755352-8">)</samp><samp class="w">
</samp><samp class="p" data-group-id="8579755352-9">[</samp><samp class="s">&quot;bye&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;bye&quot;</samp><samp class="p" data-group-id="8579755352-9">]</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="n">stream</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="nc">Stream</samp><samp class="o">.</samp><samp class="n">duplicate</samp><samp class="p" data-group-id="8579755352-10">(</samp><samp class="p" data-group-id="8579755352-11">[</samp><samp class="mi">1</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">2</samp><samp class="p" data-group-id="8579755352-11">]</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">3</samp><samp class="p" data-group-id="8579755352-10">)</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Enum</samp><samp class="o">.</samp><samp class="n">to_list</samp><samp class="p" data-group-id="8579755352-12">(</samp><samp class="n">stream</samp><samp class="p" data-group-id="8579755352-12">)</samp><samp class="w">
</samp><samp class="p" data-group-id="8579755352-13">[</samp><samp class="p" data-group-id="8579755352-14">[</samp><samp class="mi">1</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">2</samp><samp class="p" data-group-id="8579755352-14">]</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="8579755352-15">[</samp><samp class="mi">1</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">2</samp><samp class="p" data-group-id="8579755352-15">]</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="8579755352-16">[</samp><samp class="mi">1</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">2</samp><samp class="p" data-group-id="8579755352-16">]</samp><samp class="p" data-group-id="8579755352-13">]</samp></code></pre>
  </section>
</section>
<section class="detail" id="each/2">

  <div class="detail-header">
    <a href="#each/2" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">each(enum, fun)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/stream.ex#L492" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> each(<a href="Enumerable.xhtml#t:t/0">Enumerable.t</a>(), (<a href="#t:element/0">element</a>() -&gt; <a href="typespecs.xhtml#built-in-types">term</a>())) :: <a href="Enumerable.xhtml#t:t/0">Enumerable.t</a>()</pre>

      </div>

<p>Executes the given function for each element.</p><p>The values in the stream do not change, therefore this
function is useful for adding side effects (like printing)
to a stream. See <a href="#map/2"><code class="inline">map/2</code></a> if producing a different stream
is desired.</p><h2 id="each/2-examples" class="section-heading"><a href="#each/2-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="n">stream</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="nc">Stream</samp><samp class="o">.</samp><samp class="n">each</samp><samp class="p" data-group-id="0107886719-1">(</samp><samp class="p" data-group-id="0107886719-2">[</samp><samp class="mi">1</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">2</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">3</samp><samp class="p" data-group-id="0107886719-2">]</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="k" data-group-id="0107886719-3">fn</samp><samp class="w"> </samp><samp class="n">x</samp><samp class="w"> </samp><samp class="o">-&gt;</samp><samp class="w"> </samp><samp class="n">send</samp><samp class="p" data-group-id="0107886719-4">(</samp><samp class="n">self</samp><samp class="p" data-group-id="0107886719-5">(</samp><samp class="p" data-group-id="0107886719-5">)</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">x</samp><samp class="p" data-group-id="0107886719-4">)</samp><samp class="w"> </samp><samp class="k" data-group-id="0107886719-3">end</samp><samp class="p" data-group-id="0107886719-1">)</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Enum</samp><samp class="o">.</samp><samp class="n">to_list</samp><samp class="p" data-group-id="0107886719-6">(</samp><samp class="n">stream</samp><samp class="p" data-group-id="0107886719-6">)</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="k">receive</samp><samp class="w"> </samp><samp class="ss">do</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="0107886719-7">(</samp><samp class="n">x</samp><samp class="w"> </samp><samp class="ow">when</samp><samp class="w"> </samp><samp class="n">is_integer</samp><samp class="p" data-group-id="0107886719-8">(</samp><samp class="n">x</samp><samp class="p" data-group-id="0107886719-8">)</samp><samp class="w"> </samp><samp class="o">-&gt;</samp><samp class="w"> </samp><samp class="n">x</samp><samp class="p" data-group-id="0107886719-7">)</samp><samp class="w">
</samp><samp class="mi">1</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="k">receive</samp><samp class="w"> </samp><samp class="ss">do</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="0107886719-9">(</samp><samp class="n">x</samp><samp class="w"> </samp><samp class="ow">when</samp><samp class="w"> </samp><samp class="n">is_integer</samp><samp class="p" data-group-id="0107886719-10">(</samp><samp class="n">x</samp><samp class="p" data-group-id="0107886719-10">)</samp><samp class="w"> </samp><samp class="o">-&gt;</samp><samp class="w"> </samp><samp class="n">x</samp><samp class="p" data-group-id="0107886719-9">)</samp><samp class="w">
</samp><samp class="mi">2</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="k">receive</samp><samp class="w"> </samp><samp class="ss">do</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="0107886719-11">(</samp><samp class="n">x</samp><samp class="w"> </samp><samp class="ow">when</samp><samp class="w"> </samp><samp class="n">is_integer</samp><samp class="p" data-group-id="0107886719-12">(</samp><samp class="n">x</samp><samp class="p" data-group-id="0107886719-12">)</samp><samp class="w"> </samp><samp class="o">-&gt;</samp><samp class="w"> </samp><samp class="n">x</samp><samp class="p" data-group-id="0107886719-11">)</samp><samp class="w">
</samp><samp class="mi">3</samp></code></pre>
  </section>
</section>
<section class="detail" id="filter/2">

  <div class="detail-header">
    <a href="#filter/2" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">filter(enum, fun)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/stream.ex#L535" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> filter(<a href="Enumerable.xhtml#t:t/0">Enumerable.t</a>(), (<a href="#t:element/0">element</a>() -&gt; <a href="typespecs.xhtml#built-in-types">as_boolean</a>(<a href="typespecs.xhtml#built-in-types">term</a>()))) :: <a href="Enumerable.xhtml#t:t/0">Enumerable.t</a>()</pre>

      </div>

<p>Creates a stream that filters elements according to
the given function on enumeration.</p><h2 id="filter/2-examples" class="section-heading"><a href="#filter/2-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="n">stream</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="nc">Stream</samp><samp class="o">.</samp><samp class="n">filter</samp><samp class="p" data-group-id="3830478677-1">(</samp><samp class="p" data-group-id="3830478677-2">[</samp><samp class="mi">1</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">2</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">3</samp><samp class="p" data-group-id="3830478677-2">]</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="k" data-group-id="3830478677-3">fn</samp><samp class="w"> </samp><samp class="n">x</samp><samp class="w"> </samp><samp class="o">-&gt;</samp><samp class="w"> </samp><samp class="n">rem</samp><samp class="p" data-group-id="3830478677-4">(</samp><samp class="n">x</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">2</samp><samp class="p" data-group-id="3830478677-4">)</samp><samp class="w"> </samp><samp class="o">==</samp><samp class="w"> </samp><samp class="mi">0</samp><samp class="w"> </samp><samp class="k" data-group-id="3830478677-3">end</samp><samp class="p" data-group-id="3830478677-1">)</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Enum</samp><samp class="o">.</samp><samp class="n">to_list</samp><samp class="p" data-group-id="3830478677-5">(</samp><samp class="n">stream</samp><samp class="p" data-group-id="3830478677-5">)</samp><samp class="w">
</samp><samp class="p" data-group-id="3830478677-6">[</samp><samp class="mi">2</samp><samp class="p" data-group-id="3830478677-6">]</samp></code></pre>
  </section>
</section>
<section class="detail" id="flat_map/2">

  <div class="detail-header">
    <a href="#flat_map/2" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">flat_map(enum, mapper)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/stream.ex#L519" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> flat_map(<a href="Enumerable.xhtml#t:t/0">Enumerable.t</a>(), (<a href="#t:element/0">element</a>() -&gt; <a href="Enumerable.xhtml#t:t/0">Enumerable.t</a>())) :: <a href="Enumerable.xhtml#t:t/0">Enumerable.t</a>()</pre>

      </div>

<p>Maps the given <code class="inline">fun</code> over <code class="inline">enumerable</code> and flattens the result.</p><p>This function returns a new stream built by appending the result of invoking <code class="inline">fun</code>
on each element of <code class="inline">enumerable</code> together.</p><h2 id="flat_map/2-examples" class="section-heading"><a href="#flat_map/2-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="n">stream</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="nc">Stream</samp><samp class="o">.</samp><samp class="n">flat_map</samp><samp class="p" data-group-id="2578300836-1">(</samp><samp class="p" data-group-id="2578300836-2">[</samp><samp class="mi">1</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">2</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">3</samp><samp class="p" data-group-id="2578300836-2">]</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="k" data-group-id="2578300836-3">fn</samp><samp class="w"> </samp><samp class="n">x</samp><samp class="w"> </samp><samp class="o">-&gt;</samp><samp class="w"> </samp><samp class="p" data-group-id="2578300836-4">[</samp><samp class="n">x</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">x</samp><samp class="w"> </samp><samp class="o">*</samp><samp class="w"> </samp><samp class="mi">2</samp><samp class="p" data-group-id="2578300836-4">]</samp><samp class="w"> </samp><samp class="k" data-group-id="2578300836-3">end</samp><samp class="p" data-group-id="2578300836-1">)</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Enum</samp><samp class="o">.</samp><samp class="n">to_list</samp><samp class="p" data-group-id="2578300836-5">(</samp><samp class="n">stream</samp><samp class="p" data-group-id="2578300836-5">)</samp><samp class="w">
</samp><samp class="p" data-group-id="2578300836-6">[</samp><samp class="mi">1</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">2</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">2</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">4</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">3</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">6</samp><samp class="p" data-group-id="2578300836-6">]</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="n">stream</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="nc">Stream</samp><samp class="o">.</samp><samp class="n">flat_map</samp><samp class="p" data-group-id="2578300836-7">(</samp><samp class="p" data-group-id="2578300836-8">[</samp><samp class="mi">1</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">2</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">3</samp><samp class="p" data-group-id="2578300836-8">]</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="k" data-group-id="2578300836-9">fn</samp><samp class="w"> </samp><samp class="n">x</samp><samp class="w"> </samp><samp class="o">-&gt;</samp><samp class="w"> </samp><samp class="p" data-group-id="2578300836-10">[</samp><samp class="p" data-group-id="2578300836-11">[</samp><samp class="n">x</samp><samp class="p" data-group-id="2578300836-11">]</samp><samp class="p" data-group-id="2578300836-10">]</samp><samp class="w"> </samp><samp class="k" data-group-id="2578300836-9">end</samp><samp class="p" data-group-id="2578300836-7">)</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Enum</samp><samp class="o">.</samp><samp class="n">to_list</samp><samp class="p" data-group-id="2578300836-12">(</samp><samp class="n">stream</samp><samp class="p" data-group-id="2578300836-12">)</samp><samp class="w">
</samp><samp class="p" data-group-id="2578300836-13">[</samp><samp class="p" data-group-id="2578300836-14">[</samp><samp class="mi">1</samp><samp class="p" data-group-id="2578300836-14">]</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="2578300836-15">[</samp><samp class="mi">2</samp><samp class="p" data-group-id="2578300836-15">]</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="2578300836-16">[</samp><samp class="mi">3</samp><samp class="p" data-group-id="2578300836-16">]</samp><samp class="p" data-group-id="2578300836-13">]</samp></code></pre>
  </section>
</section>
<section class="detail" id="from_index/1">

    <span id="from_index/0"></span>

  <div class="detail-header">
    <a href="#from_index/1" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">from_index(fun_or_offset \\ 0)</h1>

        <span class="note">(since 1.17.0)</span>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/stream.ex#L1180" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> from_index(<a href="typespecs.xhtml#basic-types">integer</a>()) :: <a href="Enumerable.xhtml#t:t/1">Enumerable.t</a>(<a href="typespecs.xhtml#basic-types">integer</a>())</pre>

          <pre translate="no"><span class="attribute">@spec</span> from_index((<a href="typespecs.xhtml#basic-types">integer</a>() -&gt; return_value)) :: <a href="Enumerable.xhtml#t:t/1">Enumerable.t</a>(return_value)
when return_value: <a href="typespecs.xhtml#built-in-types">term</a>()</pre>

      </div>

<p>Builds a stream from an index, either starting from offset, or given by function.</p><p>May receive a function or an integer offset.</p><p>If an <code class="inline">offset</code> is given, it will emit elements from offset.</p><p>If a <code class="inline">function</code> is given, it will invoke the function with
elements from offset.</p><h2 id="from_index/1-examples" class="section-heading"><a href="#from_index/1-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Stream</samp><samp class="o">.</samp><samp class="n">from_index</samp><samp class="p" data-group-id="7515222065-1">(</samp><samp class="p" data-group-id="7515222065-1">)</samp><samp class="w"> </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Enum</samp><samp class="o">.</samp><samp class="n">take</samp><samp class="p" data-group-id="7515222065-2">(</samp><samp class="mi">3</samp><samp class="p" data-group-id="7515222065-2">)</samp><samp class="w">
</samp><samp class="p" data-group-id="7515222065-3">[</samp><samp class="mi">0</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">1</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">2</samp><samp class="p" data-group-id="7515222065-3">]</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Stream</samp><samp class="o">.</samp><samp class="n">from_index</samp><samp class="p" data-group-id="7515222065-4">(</samp><samp class="mi">1</samp><samp class="p" data-group-id="7515222065-4">)</samp><samp class="w"> </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Enum</samp><samp class="o">.</samp><samp class="n">take</samp><samp class="p" data-group-id="7515222065-5">(</samp><samp class="mi">3</samp><samp class="p" data-group-id="7515222065-5">)</samp><samp class="w">
</samp><samp class="p" data-group-id="7515222065-6">[</samp><samp class="mi">1</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">2</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">3</samp><samp class="p" data-group-id="7515222065-6">]</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Stream</samp><samp class="o">.</samp><samp class="n">from_index</samp><samp class="p" data-group-id="7515222065-7">(</samp><samp class="k" data-group-id="7515222065-8">fn</samp><samp class="w"> </samp><samp class="n">x</samp><samp class="w"> </samp><samp class="o">-&gt;</samp><samp class="w"> </samp><samp class="n">x</samp><samp class="w"> </samp><samp class="o">*</samp><samp class="w"> </samp><samp class="mi">10</samp><samp class="w"> </samp><samp class="k" data-group-id="7515222065-8">end</samp><samp class="p" data-group-id="7515222065-7">)</samp><samp class="w"> </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Enum</samp><samp class="o">.</samp><samp class="n">take</samp><samp class="p" data-group-id="7515222065-9">(</samp><samp class="mi">3</samp><samp class="p" data-group-id="7515222065-9">)</samp><samp class="w">
</samp><samp class="p" data-group-id="7515222065-10">[</samp><samp class="mi">0</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">10</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">20</samp><samp class="p" data-group-id="7515222065-10">]</samp></code></pre>
  </section>
</section>
<section class="detail" id="intersperse/2">

  <div class="detail-header">
    <a href="#intersperse/2" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">intersperse(enumerable, intersperse_element)</h1>

        <span class="note">(since 1.6.0)</span>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/stream.ex#L1725" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> intersperse(<a href="Enumerable.xhtml#t:t/0">Enumerable.t</a>(), <a href="typespecs.xhtml#basic-types">any</a>()) :: <a href="Enumerable.xhtml#t:t/0">Enumerable.t</a>()</pre>

      </div>

<p>Lazily intersperses <code class="inline">intersperse_element</code> between each element of the enumeration.</p><h2 id="intersperse/2-examples" class="section-heading"><a href="#intersperse/2-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Stream</samp><samp class="o">.</samp><samp class="n">intersperse</samp><samp class="p" data-group-id="5531552396-1">(</samp><samp class="p" data-group-id="5531552396-2">[</samp><samp class="mi">1</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">2</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">3</samp><samp class="p" data-group-id="5531552396-2">]</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">0</samp><samp class="p" data-group-id="5531552396-1">)</samp><samp class="w"> </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Enum</samp><samp class="o">.</samp><samp class="n">to_list</samp><samp class="p" data-group-id="5531552396-3">(</samp><samp class="p" data-group-id="5531552396-3">)</samp><samp class="w">
</samp><samp class="p" data-group-id="5531552396-4">[</samp><samp class="mi">1</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">0</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">2</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">0</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">3</samp><samp class="p" data-group-id="5531552396-4">]</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Stream</samp><samp class="o">.</samp><samp class="n">intersperse</samp><samp class="p" data-group-id="5531552396-5">(</samp><samp class="p" data-group-id="5531552396-6">[</samp><samp class="mi">1</samp><samp class="p" data-group-id="5531552396-6">]</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">0</samp><samp class="p" data-group-id="5531552396-5">)</samp><samp class="w"> </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Enum</samp><samp class="o">.</samp><samp class="n">to_list</samp><samp class="p" data-group-id="5531552396-7">(</samp><samp class="p" data-group-id="5531552396-7">)</samp><samp class="w">
</samp><samp class="p" data-group-id="5531552396-8">[</samp><samp class="mi">1</samp><samp class="p" data-group-id="5531552396-8">]</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Stream</samp><samp class="o">.</samp><samp class="n">intersperse</samp><samp class="p" data-group-id="5531552396-9">(</samp><samp class="p" data-group-id="5531552396-10">[</samp><samp class="p" data-group-id="5531552396-10">]</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">0</samp><samp class="p" data-group-id="5531552396-9">)</samp><samp class="w"> </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Enum</samp><samp class="o">.</samp><samp class="n">to_list</samp><samp class="p" data-group-id="5531552396-11">(</samp><samp class="p" data-group-id="5531552396-11">)</samp><samp class="w">
</samp><samp class="p" data-group-id="5531552396-12">[</samp><samp class="p" data-group-id="5531552396-12">]</samp></code></pre>
  </section>
</section>
<section class="detail" id="interval/1">

  <div class="detail-header">
    <a href="#interval/1" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">interval(n)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/stream.ex#L564" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> interval(<a href="#t:timer/0">timer</a>()) :: <a href="Enumerable.xhtml#t:t/0">Enumerable.t</a>()</pre>

      </div>

<p>Creates a stream that emits a value after the given period <code class="inline">n</code>
in milliseconds.</p><p>The values emitted are an increasing counter starting at <code class="inline">0</code>.
This operation will block the caller by the given interval
every time a new element is streamed.</p><p>Do not use this function to generate a sequence of numbers.
If blocking the caller process is not necessary, use
<code class="inline">Stream.iterate(0, &amp; &amp;1 + 1)</code> instead.</p><h2 id="interval/1-examples" class="section-heading"><a href="#interval/1-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Stream</samp><samp class="o">.</samp><samp class="n">interval</samp><samp class="p" data-group-id="2737613522-1">(</samp><samp class="mi">10</samp><samp class="p" data-group-id="2737613522-1">)</samp><samp class="w"> </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Enum</samp><samp class="o">.</samp><samp class="n">take</samp><samp class="p" data-group-id="2737613522-2">(</samp><samp class="mi">10</samp><samp class="p" data-group-id="2737613522-2">)</samp><samp class="w">
</samp><samp class="p" data-group-id="2737613522-3">[</samp><samp class="mi">0</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">1</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">2</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">3</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">4</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">5</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">6</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">7</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">8</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">9</samp><samp class="p" data-group-id="2737613522-3">]</samp></code></pre>
  </section>
</section>
<section class="detail" id="into/3">

    <span id="into/2"></span>

  <div class="detail-header">
    <a href="#into/3" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">into(enum, collectable, transform \\ fn x -&gt; x end)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/stream.ex#L580" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> into(<a href="Enumerable.xhtml#t:t/0">Enumerable.t</a>(), <a href="Collectable.xhtml#t:t/0">Collectable.t</a>(), (<a href="typespecs.xhtml#built-in-types">term</a>() -&gt; <a href="typespecs.xhtml#built-in-types">term</a>())) :: <a href="Enumerable.xhtml#t:t/0">Enumerable.t</a>()</pre>

      </div>

<p>Injects the stream values into the given collectable as a side-effect.</p><p>This function is often used with <a href="#run/1"><code class="inline">run/1</code></a> since any evaluation
is delayed until the stream is executed. See <a href="#run/1"><code class="inline">run/1</code></a> for an example.</p>
  </section>
</section>
<section class="detail" id="iterate/2">

  <div class="detail-header">
    <a href="#iterate/2" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">iterate(start_value, next_fun)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/stream.ex#L1469" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> iterate(<a href="#t:element/0">element</a>(), (<a href="#t:element/0">element</a>() -&gt; <a href="#t:element/0">element</a>())) :: <a href="Enumerable.xhtml#t:t/0">Enumerable.t</a>()</pre>

      </div>

<p>Emits a sequence of values, starting with <code class="inline">start_value</code>.</p><p>Successive values are generated by calling <code class="inline">next_fun</code>
on the previous value.</p><h2 id="iterate/2-examples" class="section-heading"><a href="#iterate/2-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Stream</samp><samp class="o">.</samp><samp class="n">iterate</samp><samp class="p" data-group-id="7242269837-1">(</samp><samp class="mi">1</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="o">&amp;</samp><samp class="p" data-group-id="7242269837-2">(</samp><samp class="ni">&amp;1</samp><samp class="w"> </samp><samp class="o">*</samp><samp class="w"> </samp><samp class="mi">2</samp><samp class="p" data-group-id="7242269837-2">)</samp><samp class="p" data-group-id="7242269837-1">)</samp><samp class="w"> </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Enum</samp><samp class="o">.</samp><samp class="n">take</samp><samp class="p" data-group-id="7242269837-3">(</samp><samp class="mi">5</samp><samp class="p" data-group-id="7242269837-3">)</samp><samp class="w">
</samp><samp class="p" data-group-id="7242269837-4">[</samp><samp class="mi">1</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">2</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">4</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">8</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">16</samp><samp class="p" data-group-id="7242269837-4">]</samp></code></pre>
  </section>
</section>
<section class="detail" id="map/2">

  <div class="detail-header">
    <a href="#map/2" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">map(enum, fun)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/stream.ex#L625" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> map(<a href="Enumerable.xhtml#t:t/0">Enumerable.t</a>(), (<a href="#t:element/0">element</a>() -&gt; <a href="typespecs.xhtml#basic-types">any</a>())) :: <a href="Enumerable.xhtml#t:t/0">Enumerable.t</a>()</pre>

      </div>

<p>Creates a stream that will apply the given function on
enumeration.</p><h2 id="map/2-examples" class="section-heading"><a href="#map/2-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="n">stream</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="nc">Stream</samp><samp class="o">.</samp><samp class="n">map</samp><samp class="p" data-group-id="9999864873-1">(</samp><samp class="p" data-group-id="9999864873-2">[</samp><samp class="mi">1</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">2</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">3</samp><samp class="p" data-group-id="9999864873-2">]</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="k" data-group-id="9999864873-3">fn</samp><samp class="w"> </samp><samp class="n">x</samp><samp class="w"> </samp><samp class="o">-&gt;</samp><samp class="w"> </samp><samp class="n">x</samp><samp class="w"> </samp><samp class="o">*</samp><samp class="w"> </samp><samp class="mi">2</samp><samp class="w"> </samp><samp class="k" data-group-id="9999864873-3">end</samp><samp class="p" data-group-id="9999864873-1">)</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Enum</samp><samp class="o">.</samp><samp class="n">to_list</samp><samp class="p" data-group-id="9999864873-4">(</samp><samp class="n">stream</samp><samp class="p" data-group-id="9999864873-4">)</samp><samp class="w">
</samp><samp class="p" data-group-id="9999864873-5">[</samp><samp class="mi">2</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">4</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">6</samp><samp class="p" data-group-id="9999864873-5">]</samp></code></pre>
  </section>
</section>
<section class="detail" id="map_every/3">

  <div class="detail-header">
    <a href="#map_every/3" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">map_every(enum, nth, fun)</h1>

        <span class="note">(since 1.4.0)</span>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/stream.ex#L654" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> map_every(<a href="Enumerable.xhtml#t:t/0">Enumerable.t</a>(), <a href="typespecs.xhtml#basic-types">non_neg_integer</a>(), (<a href="#t:element/0">element</a>() -&gt; <a href="typespecs.xhtml#basic-types">any</a>())) ::
  <a href="Enumerable.xhtml#t:t/0">Enumerable.t</a>()</pre>

      </div>

<p>Creates a stream that will apply the given function on
every <code class="inline">nth</code> element from the enumerable.</p><p>The first element is always passed to the given function.</p><p><code class="inline">nth</code> must be a non-negative integer.</p><h2 id="map_every/3-examples" class="section-heading"><a href="#map_every/3-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="n">stream</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="nc">Stream</samp><samp class="o">.</samp><samp class="n">map_every</samp><samp class="p" data-group-id="5949670072-1">(</samp><samp class="mi">1</samp><samp class="o">..</samp><samp class="mi">10</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">2</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="k" data-group-id="5949670072-2">fn</samp><samp class="w"> </samp><samp class="n">x</samp><samp class="w"> </samp><samp class="o">-&gt;</samp><samp class="w"> </samp><samp class="n">x</samp><samp class="w"> </samp><samp class="o">*</samp><samp class="w"> </samp><samp class="mi">2</samp><samp class="w"> </samp><samp class="k" data-group-id="5949670072-2">end</samp><samp class="p" data-group-id="5949670072-1">)</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Enum</samp><samp class="o">.</samp><samp class="n">to_list</samp><samp class="p" data-group-id="5949670072-3">(</samp><samp class="n">stream</samp><samp class="p" data-group-id="5949670072-3">)</samp><samp class="w">
</samp><samp class="p" data-group-id="5949670072-4">[</samp><samp class="mi">2</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">2</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">6</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">4</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">10</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">6</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">14</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">8</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">18</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">10</samp><samp class="p" data-group-id="5949670072-4">]</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="n">stream</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="nc">Stream</samp><samp class="o">.</samp><samp class="n">map_every</samp><samp class="p" data-group-id="5949670072-5">(</samp><samp class="p" data-group-id="5949670072-6">[</samp><samp class="mi">1</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">2</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">3</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">4</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">5</samp><samp class="p" data-group-id="5949670072-6">]</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">1</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="k" data-group-id="5949670072-7">fn</samp><samp class="w"> </samp><samp class="n">x</samp><samp class="w"> </samp><samp class="o">-&gt;</samp><samp class="w"> </samp><samp class="n">x</samp><samp class="w"> </samp><samp class="o">*</samp><samp class="w"> </samp><samp class="mi">2</samp><samp class="w"> </samp><samp class="k" data-group-id="5949670072-7">end</samp><samp class="p" data-group-id="5949670072-5">)</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Enum</samp><samp class="o">.</samp><samp class="n">to_list</samp><samp class="p" data-group-id="5949670072-8">(</samp><samp class="n">stream</samp><samp class="p" data-group-id="5949670072-8">)</samp><samp class="w">
</samp><samp class="p" data-group-id="5949670072-9">[</samp><samp class="mi">2</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">4</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">6</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">8</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">10</samp><samp class="p" data-group-id="5949670072-9">]</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="n">stream</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="nc">Stream</samp><samp class="o">.</samp><samp class="n">map_every</samp><samp class="p" data-group-id="5949670072-10">(</samp><samp class="mi">1</samp><samp class="o">..</samp><samp class="mi">5</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">0</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="k" data-group-id="5949670072-11">fn</samp><samp class="w"> </samp><samp class="n">x</samp><samp class="w"> </samp><samp class="o">-&gt;</samp><samp class="w"> </samp><samp class="n">x</samp><samp class="w"> </samp><samp class="o">*</samp><samp class="w"> </samp><samp class="mi">2</samp><samp class="w"> </samp><samp class="k" data-group-id="5949670072-11">end</samp><samp class="p" data-group-id="5949670072-10">)</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Enum</samp><samp class="o">.</samp><samp class="n">to_list</samp><samp class="p" data-group-id="5949670072-12">(</samp><samp class="n">stream</samp><samp class="p" data-group-id="5949670072-12">)</samp><samp class="w">
</samp><samp class="p" data-group-id="5949670072-13">[</samp><samp class="mi">1</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">2</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">3</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">4</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">5</samp><samp class="p" data-group-id="5949670072-13">]</samp></code></pre>
  </section>
</section>
<section class="detail" id="reject/2">

  <div class="detail-header">
    <a href="#reject/2" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">reject(enum, fun)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/stream.ex#L678" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> reject(<a href="Enumerable.xhtml#t:t/0">Enumerable.t</a>(), (<a href="#t:element/0">element</a>() -&gt; <a href="typespecs.xhtml#built-in-types">as_boolean</a>(<a href="typespecs.xhtml#built-in-types">term</a>()))) :: <a href="Enumerable.xhtml#t:t/0">Enumerable.t</a>()</pre>

      </div>

<p>Creates a stream that will reject elements according to
the given function on enumeration.</p><h2 id="reject/2-examples" class="section-heading"><a href="#reject/2-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="n">stream</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="nc">Stream</samp><samp class="o">.</samp><samp class="n">reject</samp><samp class="p" data-group-id="7020549588-1">(</samp><samp class="p" data-group-id="7020549588-2">[</samp><samp class="mi">1</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">2</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">3</samp><samp class="p" data-group-id="7020549588-2">]</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="k" data-group-id="7020549588-3">fn</samp><samp class="w"> </samp><samp class="n">x</samp><samp class="w"> </samp><samp class="o">-&gt;</samp><samp class="w"> </samp><samp class="n">rem</samp><samp class="p" data-group-id="7020549588-4">(</samp><samp class="n">x</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">2</samp><samp class="p" data-group-id="7020549588-4">)</samp><samp class="w"> </samp><samp class="o">==</samp><samp class="w"> </samp><samp class="mi">0</samp><samp class="w"> </samp><samp class="k" data-group-id="7020549588-3">end</samp><samp class="p" data-group-id="7020549588-1">)</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Enum</samp><samp class="o">.</samp><samp class="n">to_list</samp><samp class="p" data-group-id="7020549588-5">(</samp><samp class="n">stream</samp><samp class="p" data-group-id="7020549588-5">)</samp><samp class="w">
</samp><samp class="p" data-group-id="7020549588-6">[</samp><samp class="mi">1</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">3</samp><samp class="p" data-group-id="7020549588-6">]</samp></code></pre>
  </section>
</section>
<section class="detail" id="repeatedly/1">

  <div class="detail-header">
    <a href="#repeatedly/1" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">repeatedly(generator_fun)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/stream.ex#L1492" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> repeatedly((-&gt; <a href="#t:element/0">element</a>())) :: <a href="Enumerable.xhtml#t:t/0">Enumerable.t</a>()</pre>

      </div>

<p>Returns a stream generated by calling <code class="inline">generator_fun</code> repeatedly.</p><h2 id="repeatedly/1-examples" class="section-heading"><a href="#repeatedly/1-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="c1"># Although not necessary, let&#39;s seed the random algorithm</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">:rand</samp><samp class="o">.</samp><samp class="n">seed</samp><samp class="p" data-group-id="1272441341-1">(</samp><samp class="ss">:exsss</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="1272441341-2">{</samp><samp class="mi">1</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">2</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">3</samp><samp class="p" data-group-id="1272441341-2">}</samp><samp class="p" data-group-id="1272441341-1">)</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Stream</samp><samp class="o">.</samp><samp class="n">repeatedly</samp><samp class="p" data-group-id="1272441341-3">(</samp><samp class="o">&amp;</samp><samp class="nc">:rand</samp><samp class="o">.</samp><samp class="n">uniform</samp><samp class="o">/</samp><samp class="mi">0</samp><samp class="p" data-group-id="1272441341-3">)</samp><samp class="w"> </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Enum</samp><samp class="o">.</samp><samp class="n">take</samp><samp class="p" data-group-id="1272441341-4">(</samp><samp class="mi">3</samp><samp class="p" data-group-id="1272441341-4">)</samp><samp class="w">
</samp><samp class="p" data-group-id="1272441341-5">[</samp><samp class="mf">0.5455598952593053</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mf">0.6039309974353404</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mf">0.6684893034823949</samp><samp class="p" data-group-id="1272441341-5">]</samp></code></pre>
  </section>
</section>
<section class="detail" id="resource/3">

  <div class="detail-header">
    <a href="#resource/3" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">resource(start_fun, next_fun, after_fun)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/stream.ex#L1555" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> resource((-&gt; <a href="#t:acc/0">acc</a>()), (<a href="#t:acc/0">acc</a>() -&gt; {[<a href="#t:element/0">element</a>()], <a href="#t:acc/0">acc</a>()} | {:halt, <a href="#t:acc/0">acc</a>()}), (<a href="#t:acc/0">acc</a>() -&gt;
                                                                          <a href="typespecs.xhtml#built-in-types">term</a>())) ::
  <a href="Enumerable.xhtml#t:t/0">Enumerable.t</a>()</pre>

      </div>

<p>Emits a sequence of values for the given resource.</p><p>Similar to <a href="#transform/3"><code class="inline">transform/3</code></a> but the initial accumulated value is
computed lazily via <code class="inline">start_fun</code> and executes an <code class="inline">after_fun</code> at
the end of enumeration (both in cases of success and failure).</p><p>Successive values are generated by calling <code class="inline">next_fun</code> with the
previous accumulator (the initial value being the result returned
by <code class="inline">start_fun</code>) and it must return a tuple containing a list
of elements to be emitted and the next accumulator. The enumeration
finishes if it returns <code class="inline">{:halt, acc}</code>.</p><p>As the function name suggests, this function is useful to stream values from
resources.</p><h2 id="resource/3-examples" class="section-heading"><a href="#resource/3-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="nc">Stream</samp><samp class="o">.</samp><samp class="n">resource</samp><samp class="p" data-group-id="2939077341-1">(</samp><samp class="w">
  </samp><samp class="k" data-group-id="2939077341-2">fn</samp><samp class="w"> </samp><samp class="o">-&gt;</samp><samp class="w"> </samp><samp class="nc">File</samp><samp class="o">.</samp><samp class="n">open!</samp><samp class="p" data-group-id="2939077341-3">(</samp><samp class="s">&quot;sample&quot;</samp><samp class="p" data-group-id="2939077341-3">)</samp><samp class="w"> </samp><samp class="k" data-group-id="2939077341-2">end</samp><samp class="p">,</samp><samp class="w">
  </samp><samp class="k" data-group-id="2939077341-4">fn</samp><samp class="w"> </samp><samp class="n">file</samp><samp class="w"> </samp><samp class="o">-&gt;</samp><samp class="w">
    </samp><samp class="k">case</samp><samp class="w"> </samp><samp class="nc">IO</samp><samp class="o">.</samp><samp class="n">read</samp><samp class="p" data-group-id="2939077341-5">(</samp><samp class="n">file</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:line</samp><samp class="p" data-group-id="2939077341-5">)</samp><samp class="w"> </samp><samp class="k" data-group-id="2939077341-6">do</samp><samp class="w">
      </samp><samp class="n">data</samp><samp class="w"> </samp><samp class="ow">when</samp><samp class="w"> </samp><samp class="n">is_binary</samp><samp class="p" data-group-id="2939077341-7">(</samp><samp class="n">data</samp><samp class="p" data-group-id="2939077341-7">)</samp><samp class="w"> </samp><samp class="o">-&gt;</samp><samp class="w"> </samp><samp class="p" data-group-id="2939077341-8">{</samp><samp class="p" data-group-id="2939077341-9">[</samp><samp class="n">data</samp><samp class="p" data-group-id="2939077341-9">]</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">file</samp><samp class="p" data-group-id="2939077341-8">}</samp><samp class="w">
      </samp><samp class="bp">_</samp><samp class="w"> </samp><samp class="o">-&gt;</samp><samp class="w"> </samp><samp class="p" data-group-id="2939077341-10">{</samp><samp class="ss">:halt</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">file</samp><samp class="p" data-group-id="2939077341-10">}</samp><samp class="w">
    </samp><samp class="k" data-group-id="2939077341-6">end</samp><samp class="w">
  </samp><samp class="k" data-group-id="2939077341-4">end</samp><samp class="p">,</samp><samp class="w">
  </samp><samp class="k" data-group-id="2939077341-11">fn</samp><samp class="w"> </samp><samp class="n">file</samp><samp class="w"> </samp><samp class="o">-&gt;</samp><samp class="w"> </samp><samp class="nc">File</samp><samp class="o">.</samp><samp class="n">close</samp><samp class="p" data-group-id="2939077341-12">(</samp><samp class="n">file</samp><samp class="p" data-group-id="2939077341-12">)</samp><samp class="w"> </samp><samp class="k" data-group-id="2939077341-11">end</samp><samp class="w">
</samp><samp class="p" data-group-id="2939077341-1">)</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Stream</samp><samp class="o">.</samp><samp class="n">resource</samp><samp class="p" data-group-id="2939077341-13">(</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="w"> </samp><samp class="k" data-group-id="2939077341-14">fn</samp><samp class="w"> </samp><samp class="o">-&gt;</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="w">   </samp><samp class="p" data-group-id="2939077341-15">{</samp><samp class="ss">:ok</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">pid</samp><samp class="p" data-group-id="2939077341-15">}</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="nc">StringIO</samp><samp class="o">.</samp><samp class="n">open</samp><samp class="p" data-group-id="2939077341-16">(</samp><samp class="s">&quot;string&quot;</samp><samp class="p" data-group-id="2939077341-16">)</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="w">   </samp><samp class="n">pid</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="w"> </samp><samp class="k" data-group-id="2939077341-14">end</samp><samp class="p">,</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="w"> </samp><samp class="k" data-group-id="2939077341-17">fn</samp><samp class="w"> </samp><samp class="n">pid</samp><samp class="w"> </samp><samp class="o">-&gt;</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="w">   </samp><samp class="k">case</samp><samp class="w"> </samp><samp class="nc">IO</samp><samp class="o">.</samp><samp class="n">getn</samp><samp class="p" data-group-id="2939077341-18">(</samp><samp class="n">pid</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">1</samp><samp class="p" data-group-id="2939077341-18">)</samp><samp class="w"> </samp><samp class="k" data-group-id="2939077341-19">do</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="w">     </samp><samp class="ss">:eof</samp><samp class="w"> </samp><samp class="o">-&gt;</samp><samp class="w"> </samp><samp class="p" data-group-id="2939077341-20">{</samp><samp class="ss">:halt</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">pid</samp><samp class="p" data-group-id="2939077341-20">}</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="w">     </samp><samp class="n">char</samp><samp class="w"> </samp><samp class="o">-&gt;</samp><samp class="w"> </samp><samp class="p" data-group-id="2939077341-21">{</samp><samp class="p" data-group-id="2939077341-22">[</samp><samp class="n">char</samp><samp class="p" data-group-id="2939077341-22">]</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">pid</samp><samp class="p" data-group-id="2939077341-21">}</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="w">   </samp><samp class="k" data-group-id="2939077341-19">end</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="w"> </samp><samp class="k" data-group-id="2939077341-17">end</samp><samp class="p">,</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="w"> </samp><samp class="k" data-group-id="2939077341-23">fn</samp><samp class="w"> </samp><samp class="n">pid</samp><samp class="w"> </samp><samp class="o">-&gt;</samp><samp class="w"> </samp><samp class="nc">StringIO</samp><samp class="o">.</samp><samp class="n">close</samp><samp class="p" data-group-id="2939077341-24">(</samp><samp class="n">pid</samp><samp class="p" data-group-id="2939077341-24">)</samp><samp class="w"> </samp><samp class="k" data-group-id="2939077341-23">end</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="p" data-group-id="2939077341-13">)</samp><samp class="w"> </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Enum</samp><samp class="o">.</samp><samp class="n">to_list</samp><samp class="p" data-group-id="2939077341-25">(</samp><samp class="p" data-group-id="2939077341-25">)</samp><samp class="w">
</samp><samp class="p" data-group-id="2939077341-26">[</samp><samp class="s">&quot;s&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;t&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;r&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;i&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;n&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;g&quot;</samp><samp class="p" data-group-id="2939077341-26">]</samp></code></pre>
  </section>
</section>
<section class="detail" id="run/1">

  <div class="detail-header">
    <a href="#run/1" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">run(stream)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/stream.ex#L702" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> run(<a href="Enumerable.xhtml#t:t/0">Enumerable.t</a>()) :: :ok</pre>

      </div>

<p>Runs the given stream.</p><p>This is useful when a stream needs to be run, for side effects,
and there is no interest in its return result.</p><h2 id="run/1-examples" class="section-heading"><a href="#run/1-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><p>Open up a file, replace all <code class="inline">#</code> by <code class="inline">%</code> and stream to another file
without loading the whole file in memory:</p><pre><code class="makeup elixir" translate="no"><samp class="nc">File</samp><samp class="o">.</samp><samp class="n">stream!</samp><samp class="p" data-group-id="0638019239-1">(</samp><samp class="s">&quot;/path/to/file&quot;</samp><samp class="p" data-group-id="0638019239-1">)</samp><samp class="w">
</samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Stream</samp><samp class="o">.</samp><samp class="n">map</samp><samp class="p" data-group-id="0638019239-2">(</samp><samp class="o">&amp;</samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">replace</samp><samp class="p" data-group-id="0638019239-3">(</samp><samp class="ni">&amp;1</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;#&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;%&quot;</samp><samp class="p" data-group-id="0638019239-3">)</samp><samp class="p" data-group-id="0638019239-2">)</samp><samp class="w">
</samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Stream</samp><samp class="o">.</samp><samp class="n">into</samp><samp class="p" data-group-id="0638019239-4">(</samp><samp class="nc">File</samp><samp class="o">.</samp><samp class="n">stream!</samp><samp class="p" data-group-id="0638019239-5">(</samp><samp class="s">&quot;/path/to/other/file&quot;</samp><samp class="p" data-group-id="0638019239-5">)</samp><samp class="p" data-group-id="0638019239-4">)</samp><samp class="w">
</samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Stream</samp><samp class="o">.</samp><samp class="n">run</samp><samp class="p" data-group-id="0638019239-6">(</samp><samp class="p" data-group-id="0638019239-6">)</samp></code></pre><p>No computation will be done until we call one of the <a href="Enum.xhtml"><code class="inline">Enum</code></a> functions
or <a href="#run/1"><code class="inline">run/1</code></a>.</p>
  </section>
</section>
<section class="detail" id="scan/2">

  <div class="detail-header">
    <a href="#scan/2" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">scan(enum, fun)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/stream.ex#L721" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> scan(<a href="Enumerable.xhtml#t:t/0">Enumerable.t</a>(), (<a href="#t:element/0">element</a>(), <a href="#t:acc/0">acc</a>() -&gt; <a href="typespecs.xhtml#basic-types">any</a>())) :: <a href="Enumerable.xhtml#t:t/0">Enumerable.t</a>()</pre>

      </div>

<p>Creates a stream that applies the given function to each
element, emits the result and uses the same result as the accumulator
for the next computation. Uses the first element in the enumerable
as the starting value.</p><h2 id="scan/2-examples" class="section-heading"><a href="#scan/2-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="n">stream</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="nc">Stream</samp><samp class="o">.</samp><samp class="n">scan</samp><samp class="p" data-group-id="2630055667-1">(</samp><samp class="mi">1</samp><samp class="o">..</samp><samp class="mi">5</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="o">&amp;</samp><samp class="p" data-group-id="2630055667-2">(</samp><samp class="ni">&amp;1</samp><samp class="w"> </samp><samp class="o">+</samp><samp class="w"> </samp><samp class="ni">&amp;2</samp><samp class="p" data-group-id="2630055667-2">)</samp><samp class="p" data-group-id="2630055667-1">)</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Enum</samp><samp class="o">.</samp><samp class="n">to_list</samp><samp class="p" data-group-id="2630055667-3">(</samp><samp class="n">stream</samp><samp class="p" data-group-id="2630055667-3">)</samp><samp class="w">
</samp><samp class="p" data-group-id="2630055667-4">[</samp><samp class="mi">1</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">3</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">6</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">10</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">15</samp><samp class="p" data-group-id="2630055667-4">]</samp></code></pre>
  </section>
</section>
<section class="detail" id="scan/3">

  <div class="detail-header">
    <a href="#scan/3" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">scan(enum, acc, fun)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/stream.ex#L738" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> scan(<a href="Enumerable.xhtml#t:t/0">Enumerable.t</a>(), <a href="#t:acc/0">acc</a>(), (<a href="#t:element/0">element</a>(), <a href="#t:acc/0">acc</a>() -&gt; <a href="typespecs.xhtml#basic-types">any</a>())) :: <a href="Enumerable.xhtml#t:t/0">Enumerable.t</a>()</pre>

      </div>

<p>Creates a stream that applies the given function to each
element, emits the result and uses the same result as the accumulator
for the next computation. Uses the given <code class="inline">acc</code> as the starting value.</p><h2 id="scan/3-examples" class="section-heading"><a href="#scan/3-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="n">stream</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="nc">Stream</samp><samp class="o">.</samp><samp class="n">scan</samp><samp class="p" data-group-id="3967097573-1">(</samp><samp class="mi">1</samp><samp class="o">..</samp><samp class="mi">5</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">0</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="o">&amp;</samp><samp class="p" data-group-id="3967097573-2">(</samp><samp class="ni">&amp;1</samp><samp class="w"> </samp><samp class="o">+</samp><samp class="w"> </samp><samp class="ni">&amp;2</samp><samp class="p" data-group-id="3967097573-2">)</samp><samp class="p" data-group-id="3967097573-1">)</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Enum</samp><samp class="o">.</samp><samp class="n">to_list</samp><samp class="p" data-group-id="3967097573-3">(</samp><samp class="n">stream</samp><samp class="p" data-group-id="3967097573-3">)</samp><samp class="w">
</samp><samp class="p" data-group-id="3967097573-4">[</samp><samp class="mi">1</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">3</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">6</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">10</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">15</samp><samp class="p" data-group-id="3967097573-4">]</samp></code></pre>
  </section>
</section>
<section class="detail" id="take/2">

  <div class="detail-header">
    <a href="#take/2" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">take(enum, count)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/stream.ex#L768" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> take(<a href="Enumerable.xhtml#t:t/0">Enumerable.t</a>(), <a href="typespecs.xhtml#basic-types">integer</a>()) :: <a href="Enumerable.xhtml#t:t/0">Enumerable.t</a>()</pre>

      </div>

<p>Lazily takes the next <code class="inline">count</code> elements from the enumerable and stops
enumeration.</p><p>If a negative <code class="inline">count</code> is given, the last <code class="inline">count</code> values will be taken.
For such, the collection is fully enumerated keeping up to <code class="inline">2 * count</code>
elements in memory. Once the end of the collection is reached,
the last <code class="inline">count</code> elements will be executed. Therefore, using
a negative <code class="inline">count</code> on an infinite collection will never return.</p><h2 id="take/2-examples" class="section-heading"><a href="#take/2-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="n">stream</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="nc">Stream</samp><samp class="o">.</samp><samp class="n">take</samp><samp class="p" data-group-id="6248854431-1">(</samp><samp class="mi">1</samp><samp class="o">..</samp><samp class="mi">100</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">5</samp><samp class="p" data-group-id="6248854431-1">)</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Enum</samp><samp class="o">.</samp><samp class="n">to_list</samp><samp class="p" data-group-id="6248854431-2">(</samp><samp class="n">stream</samp><samp class="p" data-group-id="6248854431-2">)</samp><samp class="w">
</samp><samp class="p" data-group-id="6248854431-3">[</samp><samp class="mi">1</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">2</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">3</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">4</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">5</samp><samp class="p" data-group-id="6248854431-3">]</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="n">stream</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="nc">Stream</samp><samp class="o">.</samp><samp class="n">take</samp><samp class="p" data-group-id="6248854431-4">(</samp><samp class="mi">1</samp><samp class="o">..</samp><samp class="mi">100</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="o">-</samp><samp class="mi">5</samp><samp class="p" data-group-id="6248854431-4">)</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Enum</samp><samp class="o">.</samp><samp class="n">to_list</samp><samp class="p" data-group-id="6248854431-5">(</samp><samp class="n">stream</samp><samp class="p" data-group-id="6248854431-5">)</samp><samp class="w">
</samp><samp class="p" data-group-id="6248854431-6">[</samp><samp class="mi">96</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">97</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">98</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">99</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">100</samp><samp class="p" data-group-id="6248854431-6">]</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="n">stream</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="nc">Stream</samp><samp class="o">.</samp><samp class="n">cycle</samp><samp class="p" data-group-id="6248854431-7">(</samp><samp class="p" data-group-id="6248854431-8">[</samp><samp class="mi">1</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">2</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">3</samp><samp class="p" data-group-id="6248854431-8">]</samp><samp class="p" data-group-id="6248854431-7">)</samp><samp class="w"> </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Stream</samp><samp class="o">.</samp><samp class="n">take</samp><samp class="p" data-group-id="6248854431-9">(</samp><samp class="mi">5</samp><samp class="p" data-group-id="6248854431-9">)</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Enum</samp><samp class="o">.</samp><samp class="n">to_list</samp><samp class="p" data-group-id="6248854431-10">(</samp><samp class="n">stream</samp><samp class="p" data-group-id="6248854431-10">)</samp><samp class="w">
</samp><samp class="p" data-group-id="6248854431-11">[</samp><samp class="mi">1</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">2</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">3</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">1</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">2</samp><samp class="p" data-group-id="6248854431-11">]</samp></code></pre>
  </section>
</section>
<section class="detail" id="take_every/2">

  <div class="detail-header">
    <a href="#take_every/2" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">take_every(enum, nth)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/stream.ex#L807" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> take_every(<a href="Enumerable.xhtml#t:t/0">Enumerable.t</a>(), <a href="typespecs.xhtml#basic-types">non_neg_integer</a>()) :: <a href="Enumerable.xhtml#t:t/0">Enumerable.t</a>()</pre>

      </div>

<p>Creates a stream that takes every <code class="inline">nth</code> element from the enumerable.</p><p>The first element is always included, unless <code class="inline">nth</code> is 0.</p><p><code class="inline">nth</code> must be a non-negative integer.</p><h2 id="take_every/2-examples" class="section-heading"><a href="#take_every/2-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="n">stream</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="nc">Stream</samp><samp class="o">.</samp><samp class="n">take_every</samp><samp class="p" data-group-id="9084881558-1">(</samp><samp class="mi">1</samp><samp class="o">..</samp><samp class="mi">10</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">2</samp><samp class="p" data-group-id="9084881558-1">)</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Enum</samp><samp class="o">.</samp><samp class="n">to_list</samp><samp class="p" data-group-id="9084881558-2">(</samp><samp class="n">stream</samp><samp class="p" data-group-id="9084881558-2">)</samp><samp class="w">
</samp><samp class="p" data-group-id="9084881558-3">[</samp><samp class="mi">1</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">3</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">5</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">7</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">9</samp><samp class="p" data-group-id="9084881558-3">]</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="n">stream</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="nc">Stream</samp><samp class="o">.</samp><samp class="n">take_every</samp><samp class="p" data-group-id="9084881558-4">(</samp><samp class="p" data-group-id="9084881558-5">[</samp><samp class="mi">1</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">2</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">3</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">4</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">5</samp><samp class="p" data-group-id="9084881558-5">]</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">1</samp><samp class="p" data-group-id="9084881558-4">)</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Enum</samp><samp class="o">.</samp><samp class="n">to_list</samp><samp class="p" data-group-id="9084881558-6">(</samp><samp class="n">stream</samp><samp class="p" data-group-id="9084881558-6">)</samp><samp class="w">
</samp><samp class="p" data-group-id="9084881558-7">[</samp><samp class="mi">1</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">2</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">3</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">4</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">5</samp><samp class="p" data-group-id="9084881558-7">]</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="n">stream</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="nc">Stream</samp><samp class="o">.</samp><samp class="n">take_every</samp><samp class="p" data-group-id="9084881558-8">(</samp><samp class="mi">1</samp><samp class="o">..</samp><samp class="mi">1000</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">0</samp><samp class="p" data-group-id="9084881558-8">)</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Enum</samp><samp class="o">.</samp><samp class="n">to_list</samp><samp class="p" data-group-id="9084881558-9">(</samp><samp class="n">stream</samp><samp class="p" data-group-id="9084881558-9">)</samp><samp class="w">
</samp><samp class="p" data-group-id="9084881558-10">[</samp><samp class="p" data-group-id="9084881558-10">]</samp></code></pre>
  </section>
</section>
<section class="detail" id="take_while/2">

  <div class="detail-header">
    <a href="#take_while/2" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">take_while(enum, fun)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/stream.ex#L831" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> take_while(<a href="Enumerable.xhtml#t:t/0">Enumerable.t</a>(), (<a href="#t:element/0">element</a>() -&gt; <a href="typespecs.xhtml#built-in-types">as_boolean</a>(<a href="typespecs.xhtml#built-in-types">term</a>()))) :: <a href="Enumerable.xhtml#t:t/0">Enumerable.t</a>()</pre>

      </div>

<p>Lazily takes elements of the enumerable while the given
function returns a truthy value.</p><h2 id="take_while/2-examples" class="section-heading"><a href="#take_while/2-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="n">stream</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="nc">Stream</samp><samp class="o">.</samp><samp class="n">take_while</samp><samp class="p" data-group-id="1576314573-1">(</samp><samp class="mi">1</samp><samp class="o">..</samp><samp class="mi">100</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="o">&amp;</samp><samp class="p" data-group-id="1576314573-2">(</samp><samp class="ni">&amp;1</samp><samp class="w"> </samp><samp class="o">&lt;=</samp><samp class="w"> </samp><samp class="mi">5</samp><samp class="p" data-group-id="1576314573-2">)</samp><samp class="p" data-group-id="1576314573-1">)</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Enum</samp><samp class="o">.</samp><samp class="n">to_list</samp><samp class="p" data-group-id="1576314573-3">(</samp><samp class="n">stream</samp><samp class="p" data-group-id="1576314573-3">)</samp><samp class="w">
</samp><samp class="p" data-group-id="1576314573-4">[</samp><samp class="mi">1</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">2</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">3</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">4</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">5</samp><samp class="p" data-group-id="1576314573-4">]</samp></code></pre>
  </section>
</section>
<section class="detail" id="timer/1">

  <div class="detail-header">
    <a href="#timer/1" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">timer(n)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/stream.ex#L848" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> timer(<a href="#t:timer/0">timer</a>()) :: <a href="Enumerable.xhtml#t:t/0">Enumerable.t</a>()</pre>

      </div>

<p>Creates a stream that emits a single value after <code class="inline">n</code> milliseconds.</p><p>The value emitted is <code class="inline">0</code>. This operation will block the caller by
the given time until the element is streamed.</p><h2 id="timer/1-examples" class="section-heading"><a href="#timer/1-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Stream</samp><samp class="o">.</samp><samp class="n">timer</samp><samp class="p" data-group-id="9048926089-1">(</samp><samp class="mi">10</samp><samp class="p" data-group-id="9048926089-1">)</samp><samp class="w"> </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Enum</samp><samp class="o">.</samp><samp class="n">to_list</samp><samp class="p" data-group-id="9048926089-2">(</samp><samp class="p" data-group-id="9048926089-2">)</samp><samp class="w">
</samp><samp class="p" data-group-id="9048926089-3">[</samp><samp class="mi">0</samp><samp class="p" data-group-id="9048926089-3">]</samp></code></pre>
  </section>
</section>
<section class="detail" id="transform/3">

  <div class="detail-header">
    <a href="#transform/3" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">transform(enum, acc, reducer)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/stream.ex#L885" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> transform(<a href="Enumerable.xhtml#t:t/0">Enumerable.t</a>(), acc, fun) :: <a href="Enumerable.xhtml#t:t/0">Enumerable.t</a>()
when fun: (<a href="#t:element/0">element</a>(), acc -&gt; {<a href="Enumerable.xhtml#t:t/0">Enumerable.t</a>(), acc} | {:halt, acc}), acc: <a href="typespecs.xhtml#built-in-types">term</a>()</pre>

      </div>

<p>Transforms an existing stream.</p><p>It expects an accumulator and a function that receives two arguments,
the stream element and the updated accumulator. It must return a tuple,
where the first element is a new stream (often a list) or the atom <code class="inline">:halt</code>,
and the second element is the accumulator to be used by the next element.</p><p>Note: this function is equivalent to <a href="Enum.xhtml#flat_map_reduce/3"><code class="inline">Enum.flat_map_reduce/3</code></a>, except this
function does not return the accumulator once the stream is processed.</p><h2 id="transform/3-examples" class="section-heading"><a href="#transform/3-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><p><a href="#transform/3"><code class="inline">Stream.transform/3</code></a> is useful as it can be used as the basis to implement
many of the functions defined in this module. For example, we can implement
<code class="inline">Stream.take(enum, n)</code> as follows:</p><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="n">enum</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="mi">1001</samp><samp class="o">..</samp><samp class="mi">9999</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="n">n</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="mi">3</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="n">stream</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="nc">Stream</samp><samp class="o">.</samp><samp class="n">transform</samp><samp class="p" data-group-id="0168662737-1">(</samp><samp class="n">enum</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">0</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="k" data-group-id="0168662737-2">fn</samp><samp class="w"> </samp><samp class="n">i</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">acc</samp><samp class="w"> </samp><samp class="o">-&gt;</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="w">  </samp><samp class="k">if</samp><samp class="w"> </samp><samp class="n">acc</samp><samp class="w"> </samp><samp class="o">&lt;</samp><samp class="w"> </samp><samp class="n">n</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">do</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="0168662737-3">{</samp><samp class="p" data-group-id="0168662737-4">[</samp><samp class="n">i</samp><samp class="p" data-group-id="0168662737-4">]</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">acc</samp><samp class="w"> </samp><samp class="o">+</samp><samp class="w"> </samp><samp class="mi">1</samp><samp class="p" data-group-id="0168662737-3">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">else</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="0168662737-5">{</samp><samp class="ss">:halt</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">acc</samp><samp class="p" data-group-id="0168662737-5">}</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="k" data-group-id="0168662737-2">end</samp><samp class="p" data-group-id="0168662737-1">)</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Enum</samp><samp class="o">.</samp><samp class="n">to_list</samp><samp class="p" data-group-id="0168662737-6">(</samp><samp class="n">stream</samp><samp class="p" data-group-id="0168662737-6">)</samp><samp class="w">
</samp><samp class="p" data-group-id="0168662737-7">[</samp><samp class="mi">1001</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">1002</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">1003</samp><samp class="p" data-group-id="0168662737-7">]</samp></code></pre><p><a href="#transform/5"><code class="inline">Stream.transform/5</code></a> further generalizes this function to allow wrapping
around resources.</p>
  </section>
</section>
<section class="detail" id="transform/4">

  <div class="detail-header">
    <a href="#transform/4" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">transform(enum, start_fun, reducer, after_fun)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/stream.ex#L900" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> transform(<a href="Enumerable.xhtml#t:t/0">Enumerable.t</a>(), start_fun, reducer, after_fun) :: <a href="Enumerable.xhtml#t:t/0">Enumerable.t</a>()
when start_fun: (-&gt; acc),
     reducer: (<a href="#t:element/0">element</a>(), acc -&gt; {<a href="Enumerable.xhtml#t:t/0">Enumerable.t</a>(), acc} | {:halt, acc}),
     after_fun: (acc -&gt; <a href="typespecs.xhtml#built-in-types">term</a>()),
     acc: <a href="typespecs.xhtml#built-in-types">term</a>()</pre>

      </div>

<p>Similar to <a href="#transform/5"><code class="inline">Stream.transform/5</code></a>, except <code class="inline">last_fun</code> is not supplied.</p><p>This function can be seen as a combination of <a href="#resource/3"><code class="inline">Stream.resource/3</code></a> with
<a href="#transform/3"><code class="inline">Stream.transform/3</code></a>.</p>
  </section>
</section>
<section class="detail" id="transform/5">

  <div class="detail-header">
    <a href="#transform/5" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">transform(enum, start_fun, reducer, last_fun, after_fun)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/stream.ex#L927" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> transform(<a href="Enumerable.xhtml#t:t/0">Enumerable.t</a>(), start_fun, reducer, last_fun, after_fun) ::
  <a href="Enumerable.xhtml#t:t/0">Enumerable.t</a>()
when start_fun: (-&gt; acc),
     reducer: (<a href="#t:element/0">element</a>(), acc -&gt; {<a href="Enumerable.xhtml#t:t/0">Enumerable.t</a>(), acc} | {:halt, acc}),
     last_fun: (acc -&gt; {<a href="Enumerable.xhtml#t:t/0">Enumerable.t</a>(), acc} | {:halt, acc}),
     after_fun: (acc -&gt; <a href="typespecs.xhtml#built-in-types">term</a>()),
     acc: <a href="typespecs.xhtml#built-in-types">term</a>()</pre>

      </div>

<p>Transforms an existing stream with function-based start, last, and after
callbacks.</p><p>Once transformation starts, <code class="inline">start_fun</code> is invoked to compute the initial
accumulator. Then, for each element in the enumerable, the <code class="inline">reducer</code> function
is invoked with the element and the accumulator, returning new elements and a
new accumulator, as in <a href="#transform/3"><code class="inline">transform/3</code></a>.</p><p>Once the collection is done, <code class="inline">last_fun</code> is invoked with the accumulator to
emit any remaining items. Then <code class="inline">after_fun</code> is invoked, to close any resource,
but not emitting any new items. <code class="inline">last_fun</code> is only invoked if the given
enumerable terminates successfully (either because it is done or it halted
itself). <code class="inline">after_fun</code> is always invoked, therefore <code class="inline">after_fun</code> must be the
one used for closing resources.</p>
  </section>
</section>
<section class="detail" id="unfold/2">

  <div class="detail-header">
    <a href="#unfold/2" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">unfold(next_acc, next_fun)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/stream.ex#L1689" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> unfold(<a href="#t:acc/0">acc</a>(), (<a href="#t:acc/0">acc</a>() -&gt; {<a href="#t:element/0">element</a>(), <a href="#t:acc/0">acc</a>()} | nil)) :: <a href="Enumerable.xhtml#t:t/0">Enumerable.t</a>()</pre>

      </div>

<p>Emits a sequence of values for the given accumulator.</p><p>Successive values are generated by calling <code class="inline">next_fun</code> with the previous
accumulator and it must return a tuple with the current value and next
accumulator. The enumeration finishes if it returns <code class="inline">nil</code>.</p><h2 id="unfold/2-examples" class="section-heading"><a href="#unfold/2-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><p>To create a stream that counts down and stops before zero:</p><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Stream</samp><samp class="o">.</samp><samp class="n">unfold</samp><samp class="p" data-group-id="1322788246-1">(</samp><samp class="mi">5</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="k" data-group-id="1322788246-2">fn</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="w">  </samp><samp class="mi">0</samp><samp class="w"> </samp><samp class="o">-&gt;</samp><samp class="w"> </samp><samp class="no">nil</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="w">  </samp><samp class="n">n</samp><samp class="w"> </samp><samp class="o">-&gt;</samp><samp class="w"> </samp><samp class="p" data-group-id="1322788246-3">{</samp><samp class="n">n</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">n</samp><samp class="w"> </samp><samp class="o">-</samp><samp class="w"> </samp><samp class="mi">1</samp><samp class="p" data-group-id="1322788246-3">}</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="k" data-group-id="1322788246-2">end</samp><samp class="p" data-group-id="1322788246-1">)</samp><samp class="w"> </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Enum</samp><samp class="o">.</samp><samp class="n">to_list</samp><samp class="p" data-group-id="1322788246-4">(</samp><samp class="p" data-group-id="1322788246-4">)</samp><samp class="w">
</samp><samp class="p" data-group-id="1322788246-5">[</samp><samp class="mi">5</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">4</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">3</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">2</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">1</samp><samp class="p" data-group-id="1322788246-5">]</samp></code></pre><p>If <code class="inline">next_fun</code> never returns <code class="inline">nil</code>, the returned stream is <em>infinite</em>:</p><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Stream</samp><samp class="o">.</samp><samp class="n">unfold</samp><samp class="p" data-group-id="1841281954-1">(</samp><samp class="mi">0</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="k" data-group-id="1841281954-2">fn</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="w">  </samp><samp class="n">n</samp><samp class="w"> </samp><samp class="o">-&gt;</samp><samp class="w"> </samp><samp class="p" data-group-id="1841281954-3">{</samp><samp class="n">n</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">n</samp><samp class="w"> </samp><samp class="o">+</samp><samp class="w"> </samp><samp class="mi">1</samp><samp class="p" data-group-id="1841281954-3">}</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="k" data-group-id="1841281954-2">end</samp><samp class="p" data-group-id="1841281954-1">)</samp><samp class="w"> </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Enum</samp><samp class="o">.</samp><samp class="n">take</samp><samp class="p" data-group-id="1841281954-4">(</samp><samp class="mi">10</samp><samp class="p" data-group-id="1841281954-4">)</samp><samp class="w">
</samp><samp class="p" data-group-id="1841281954-5">[</samp><samp class="mi">0</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">1</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">2</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">3</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">4</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">5</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">6</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">7</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">8</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">9</samp><samp class="p" data-group-id="1841281954-5">]</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Stream</samp><samp class="o">.</samp><samp class="n">unfold</samp><samp class="p" data-group-id="1841281954-6">(</samp><samp class="mi">1</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="k" data-group-id="1841281954-7">fn</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="w">  </samp><samp class="n">n</samp><samp class="w"> </samp><samp class="o">-&gt;</samp><samp class="w"> </samp><samp class="p" data-group-id="1841281954-8">{</samp><samp class="n">n</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">n</samp><samp class="w"> </samp><samp class="o">*</samp><samp class="w"> </samp><samp class="mi">2</samp><samp class="p" data-group-id="1841281954-8">}</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="k" data-group-id="1841281954-7">end</samp><samp class="p" data-group-id="1841281954-6">)</samp><samp class="w"> </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Enum</samp><samp class="o">.</samp><samp class="n">take</samp><samp class="p" data-group-id="1841281954-9">(</samp><samp class="mi">10</samp><samp class="p" data-group-id="1841281954-9">)</samp><samp class="w">
</samp><samp class="p" data-group-id="1841281954-10">[</samp><samp class="mi">1</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">2</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">4</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">8</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">16</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">32</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">64</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">128</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">256</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">512</samp><samp class="p" data-group-id="1841281954-10">]</samp></code></pre>
  </section>
</section>
<section class="detail" id="uniq/1">

  <div class="detail-header">
    <a href="#uniq/1" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">uniq(enum)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/stream.ex#L1118" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> uniq(<a href="Enumerable.xhtml#t:t/0">Enumerable.t</a>()) :: <a href="Enumerable.xhtml#t:t/0">Enumerable.t</a>()</pre>

      </div>

<p>Creates a stream that only emits elements if they are unique.</p><p>Keep in mind that, in order to know if an element is unique
or not, this function needs to store all unique values emitted
by the stream. Therefore, if the stream is infinite, the number
of elements stored will grow infinitely, never being garbage-collected.</p><h2 id="uniq/1-examples" class="section-heading"><a href="#uniq/1-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Stream</samp><samp class="o">.</samp><samp class="n">uniq</samp><samp class="p" data-group-id="7450517153-1">(</samp><samp class="p" data-group-id="7450517153-2">[</samp><samp class="mi">1</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">2</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">3</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">3</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">2</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">1</samp><samp class="p" data-group-id="7450517153-2">]</samp><samp class="p" data-group-id="7450517153-1">)</samp><samp class="w"> </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Enum</samp><samp class="o">.</samp><samp class="n">to_list</samp><samp class="p" data-group-id="7450517153-3">(</samp><samp class="p" data-group-id="7450517153-3">)</samp><samp class="w">
</samp><samp class="p" data-group-id="7450517153-4">[</samp><samp class="mi">1</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">2</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">3</samp><samp class="p" data-group-id="7450517153-4">]</samp></code></pre>
  </section>
</section>
<section class="detail" id="uniq_by/2">

  <div class="detail-header">
    <a href="#uniq_by/2" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">uniq_by(enum, fun)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/stream.ex#L1150" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> uniq_by(<a href="Enumerable.xhtml#t:t/0">Enumerable.t</a>(), (<a href="#t:element/0">element</a>() -&gt; <a href="typespecs.xhtml#built-in-types">term</a>())) :: <a href="Enumerable.xhtml#t:t/0">Enumerable.t</a>()</pre>

      </div>

<p>Creates a stream that only emits elements if they are unique, by removing the
elements for which function <code class="inline">fun</code> returned duplicate elements.</p><p>The function <code class="inline">fun</code> maps every element to a term which is used to
determine if two elements are duplicates.</p><p>Keep in mind that, in order to know if an element is unique
or not, this function needs to store all unique values emitted
by the stream. Therefore, if the stream is infinite, the number
of elements stored will grow infinitely, never being garbage-collected.</p><h2 id="uniq_by/2-example" class="section-heading"><a href="#uniq_by/2-example" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Example</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Stream</samp><samp class="o">.</samp><samp class="n">uniq_by</samp><samp class="p" data-group-id="3136207899-1">(</samp><samp class="p" data-group-id="3136207899-2">[</samp><samp class="p" data-group-id="3136207899-3">{</samp><samp class="mi">1</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:x</samp><samp class="p" data-group-id="3136207899-3">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="3136207899-4">{</samp><samp class="mi">2</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:y</samp><samp class="p" data-group-id="3136207899-4">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="3136207899-5">{</samp><samp class="mi">1</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:z</samp><samp class="p" data-group-id="3136207899-5">}</samp><samp class="p" data-group-id="3136207899-2">]</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="k" data-group-id="3136207899-6">fn</samp><samp class="w"> </samp><samp class="p" data-group-id="3136207899-7">{</samp><samp class="n">x</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="bp">_</samp><samp class="p" data-group-id="3136207899-7">}</samp><samp class="w"> </samp><samp class="o">-&gt;</samp><samp class="w"> </samp><samp class="n">x</samp><samp class="w"> </samp><samp class="k" data-group-id="3136207899-6">end</samp><samp class="p" data-group-id="3136207899-1">)</samp><samp class="w"> </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Enum</samp><samp class="o">.</samp><samp class="n">to_list</samp><samp class="p" data-group-id="3136207899-8">(</samp><samp class="p" data-group-id="3136207899-8">)</samp><samp class="w">
</samp><samp class="p" data-group-id="3136207899-9">[</samp><samp class="p" data-group-id="3136207899-10">{</samp><samp class="mi">1</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:x</samp><samp class="p" data-group-id="3136207899-10">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="3136207899-11">{</samp><samp class="mi">2</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:y</samp><samp class="p" data-group-id="3136207899-11">}</samp><samp class="p" data-group-id="3136207899-9">]</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Stream</samp><samp class="o">.</samp><samp class="n">uniq_by</samp><samp class="p" data-group-id="3136207899-12">(</samp><samp class="p" data-group-id="3136207899-13">[</samp><samp class="ss">a</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="3136207899-14">{</samp><samp class="ss">:tea</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">2</samp><samp class="p" data-group-id="3136207899-14">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">b</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="3136207899-15">{</samp><samp class="ss">:tea</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">2</samp><samp class="p" data-group-id="3136207899-15">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">c</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="3136207899-16">{</samp><samp class="ss">:coffee</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">1</samp><samp class="p" data-group-id="3136207899-16">}</samp><samp class="p" data-group-id="3136207899-13">]</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="k" data-group-id="3136207899-17">fn</samp><samp class="w"> </samp><samp class="p" data-group-id="3136207899-18">{</samp><samp class="bp">_</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">y</samp><samp class="p" data-group-id="3136207899-18">}</samp><samp class="w"> </samp><samp class="o">-&gt;</samp><samp class="w"> </samp><samp class="n">y</samp><samp class="w"> </samp><samp class="k" data-group-id="3136207899-17">end</samp><samp class="p" data-group-id="3136207899-12">)</samp><samp class="w"> </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Enum</samp><samp class="o">.</samp><samp class="n">to_list</samp><samp class="p" data-group-id="3136207899-19">(</samp><samp class="p" data-group-id="3136207899-19">)</samp><samp class="w">
</samp><samp class="p" data-group-id="3136207899-20">[</samp><samp class="ss">a</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="3136207899-21">{</samp><samp class="ss">:tea</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">2</samp><samp class="p" data-group-id="3136207899-21">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">c</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="3136207899-22">{</samp><samp class="ss">:coffee</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">1</samp><samp class="p" data-group-id="3136207899-22">}</samp><samp class="p" data-group-id="3136207899-20">]</samp></code></pre>
  </section>
</section>
<section class="detail" id="with_index/2">

    <span id="with_index/1"></span>

  <div class="detail-header">
    <a href="#with_index/2" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">with_index(enum, fun_or_offset \\ 0)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/stream.ex#L1220" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> with_index(<a href="Enumerable.xhtml#t:t/0">Enumerable.t</a>(), <a href="typespecs.xhtml#basic-types">integer</a>()) :: <a href="Enumerable.xhtml#t:t/1">Enumerable.t</a>({<a href="#t:element/0">element</a>(), <a href="typespecs.xhtml#basic-types">integer</a>()})</pre>

          <pre translate="no"><span class="attribute">@spec</span> with_index(<a href="Enumerable.xhtml#t:t/0">Enumerable.t</a>(), (<a href="#t:element/0">element</a>(), <a href="#t:index/0">index</a>() -&gt; return_value)) ::
  <a href="Enumerable.xhtml#t:t/1">Enumerable.t</a>(return_value)
when return_value: <a href="typespecs.xhtml#built-in-types">term</a>()</pre>

      </div>

<p>Creates a stream where each element in the enumerable will
be wrapped in a tuple alongside its index or according to a given function.</p><p>May receive a function or an integer offset.</p><p>If an <code class="inline">offset</code> is given, it will index from the given offset instead of from
zero.</p><p>If a <code class="inline">function</code> is given, it will index by invoking the function for each
element and index (zero-based) of the enumerable.</p><h2 id="with_index/2-examples" class="section-heading"><a href="#with_index/2-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="n">stream</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="nc">Stream</samp><samp class="o">.</samp><samp class="n">with_index</samp><samp class="p" data-group-id="1493868140-1">(</samp><samp class="p" data-group-id="1493868140-2">[</samp><samp class="mi">1</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">2</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">3</samp><samp class="p" data-group-id="1493868140-2">]</samp><samp class="p" data-group-id="1493868140-1">)</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Enum</samp><samp class="o">.</samp><samp class="n">to_list</samp><samp class="p" data-group-id="1493868140-3">(</samp><samp class="n">stream</samp><samp class="p" data-group-id="1493868140-3">)</samp><samp class="w">
</samp><samp class="p" data-group-id="1493868140-4">[</samp><samp class="p" data-group-id="1493868140-5">{</samp><samp class="mi">1</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">0</samp><samp class="p" data-group-id="1493868140-5">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="1493868140-6">{</samp><samp class="mi">2</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">1</samp><samp class="p" data-group-id="1493868140-6">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="1493868140-7">{</samp><samp class="mi">3</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">2</samp><samp class="p" data-group-id="1493868140-7">}</samp><samp class="p" data-group-id="1493868140-4">]</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="n">stream</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="nc">Stream</samp><samp class="o">.</samp><samp class="n">with_index</samp><samp class="p" data-group-id="1493868140-8">(</samp><samp class="p" data-group-id="1493868140-9">[</samp><samp class="mi">1</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">2</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">3</samp><samp class="p" data-group-id="1493868140-9">]</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">3</samp><samp class="p" data-group-id="1493868140-8">)</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Enum</samp><samp class="o">.</samp><samp class="n">to_list</samp><samp class="p" data-group-id="1493868140-10">(</samp><samp class="n">stream</samp><samp class="p" data-group-id="1493868140-10">)</samp><samp class="w">
</samp><samp class="p" data-group-id="1493868140-11">[</samp><samp class="p" data-group-id="1493868140-12">{</samp><samp class="mi">1</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">3</samp><samp class="p" data-group-id="1493868140-12">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="1493868140-13">{</samp><samp class="mi">2</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">4</samp><samp class="p" data-group-id="1493868140-13">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="1493868140-14">{</samp><samp class="mi">3</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">5</samp><samp class="p" data-group-id="1493868140-14">}</samp><samp class="p" data-group-id="1493868140-11">]</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="n">stream</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="nc">Stream</samp><samp class="o">.</samp><samp class="n">with_index</samp><samp class="p" data-group-id="1493868140-15">(</samp><samp class="p" data-group-id="1493868140-16">[</samp><samp class="mi">1</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">2</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">3</samp><samp class="p" data-group-id="1493868140-16">]</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="k" data-group-id="1493868140-17">fn</samp><samp class="w"> </samp><samp class="n">x</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">index</samp><samp class="w"> </samp><samp class="o">-&gt;</samp><samp class="w"> </samp><samp class="n">x</samp><samp class="w"> </samp><samp class="o">+</samp><samp class="w"> </samp><samp class="n">index</samp><samp class="w"> </samp><samp class="k" data-group-id="1493868140-17">end</samp><samp class="p" data-group-id="1493868140-15">)</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Enum</samp><samp class="o">.</samp><samp class="n">to_list</samp><samp class="p" data-group-id="1493868140-18">(</samp><samp class="n">stream</samp><samp class="p" data-group-id="1493868140-18">)</samp><samp class="w">
</samp><samp class="p" data-group-id="1493868140-19">[</samp><samp class="mi">1</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">3</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">5</samp><samp class="p" data-group-id="1493868140-19">]</samp></code></pre>
  </section>
</section>
<section class="detail" id="zip/1">

  <div class="detail-header">
    <a href="#zip/1" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">zip(enumerables)</h1>

        <span class="note">(since 1.4.0)</span>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/stream.ex#L1309" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> zip(enumerables) :: <a href="Enumerable.xhtml#t:t/0">Enumerable.t</a>()
when enumerables: [<a href="Enumerable.xhtml#t:t/0">Enumerable.t</a>()] | <a href="Enumerable.xhtml#t:t/0">Enumerable.t</a>()</pre>

      </div>

<p>Zips corresponding elements from a finite collection of enumerables
into one stream of tuples.</p><p>The zipping finishes as soon as any enumerable in the given collection completes.</p><h2 id="zip/1-examples" class="section-heading"><a href="#zip/1-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="n">concat</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="nc">Stream</samp><samp class="o">.</samp><samp class="n">concat</samp><samp class="p" data-group-id="4595872885-1">(</samp><samp class="mi">1</samp><samp class="o">..</samp><samp class="mi">3</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">4</samp><samp class="o">..</samp><samp class="mi">6</samp><samp class="p" data-group-id="4595872885-1">)</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="n">cycle</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="nc">Stream</samp><samp class="o">.</samp><samp class="n">cycle</samp><samp class="p" data-group-id="4595872885-2">(</samp><samp class="p" data-group-id="4595872885-3">[</samp><samp class="s">&quot;foo&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;bar&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;baz&quot;</samp><samp class="p" data-group-id="4595872885-3">]</samp><samp class="p" data-group-id="4595872885-2">)</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Stream</samp><samp class="o">.</samp><samp class="n">zip</samp><samp class="p" data-group-id="4595872885-4">(</samp><samp class="p" data-group-id="4595872885-5">[</samp><samp class="n">concat</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="4595872885-6">[</samp><samp class="ss">:a</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:b</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:c</samp><samp class="p" data-group-id="4595872885-6">]</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">cycle</samp><samp class="p" data-group-id="4595872885-5">]</samp><samp class="p" data-group-id="4595872885-4">)</samp><samp class="w"> </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Enum</samp><samp class="o">.</samp><samp class="n">to_list</samp><samp class="p" data-group-id="4595872885-7">(</samp><samp class="p" data-group-id="4595872885-7">)</samp><samp class="w">
</samp><samp class="p" data-group-id="4595872885-8">[</samp><samp class="p" data-group-id="4595872885-9">{</samp><samp class="mi">1</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:a</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;foo&quot;</samp><samp class="p" data-group-id="4595872885-9">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="4595872885-10">{</samp><samp class="mi">2</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:b</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;bar&quot;</samp><samp class="p" data-group-id="4595872885-10">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="4595872885-11">{</samp><samp class="mi">3</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:c</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;baz&quot;</samp><samp class="p" data-group-id="4595872885-11">}</samp><samp class="p" data-group-id="4595872885-8">]</samp></code></pre>
  </section>
</section>
<section class="detail" id="zip/2">

  <div class="detail-header">
    <a href="#zip/2" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">zip(enumerable1, enumerable2)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/stream.ex#L1289" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> zip(<a href="Enumerable.xhtml#t:t/0">Enumerable.t</a>(), <a href="Enumerable.xhtml#t:t/0">Enumerable.t</a>()) :: <a href="Enumerable.xhtml#t:t/0">Enumerable.t</a>()</pre>

      </div>

<p>Zips two enumerables together, lazily.</p><p>Because a list of two-element tuples with atoms as the first
tuple element is a keyword list (<a href="Keyword.xhtml"><code class="inline">Keyword</code></a>), zipping a first <a href="Stream.xhtml"><code class="inline">Stream</code></a>
of atoms with a second <a href="Stream.xhtml"><code class="inline">Stream</code></a> of any kind creates a <a href="Stream.xhtml"><code class="inline">Stream</code></a>
that generates a keyword list.</p><p>The zipping finishes as soon as either enumerable completes.</p><h2 id="zip/2-examples" class="section-heading"><a href="#zip/2-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="n">concat</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="nc">Stream</samp><samp class="o">.</samp><samp class="n">concat</samp><samp class="p" data-group-id="2059715439-1">(</samp><samp class="mi">1</samp><samp class="o">..</samp><samp class="mi">3</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">4</samp><samp class="o">..</samp><samp class="mi">6</samp><samp class="p" data-group-id="2059715439-1">)</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="n">cycle</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="nc">Stream</samp><samp class="o">.</samp><samp class="n">cycle</samp><samp class="p" data-group-id="2059715439-2">(</samp><samp class="p" data-group-id="2059715439-3">[</samp><samp class="ss">:a</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:b</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:c</samp><samp class="p" data-group-id="2059715439-3">]</samp><samp class="p" data-group-id="2059715439-2">)</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Stream</samp><samp class="o">.</samp><samp class="n">zip</samp><samp class="p" data-group-id="2059715439-4">(</samp><samp class="n">concat</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">cycle</samp><samp class="p" data-group-id="2059715439-4">)</samp><samp class="w"> </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Enum</samp><samp class="o">.</samp><samp class="n">to_list</samp><samp class="p" data-group-id="2059715439-5">(</samp><samp class="p" data-group-id="2059715439-5">)</samp><samp class="w">
</samp><samp class="p" data-group-id="2059715439-6">[</samp><samp class="p" data-group-id="2059715439-7">{</samp><samp class="mi">1</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:a</samp><samp class="p" data-group-id="2059715439-7">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="2059715439-8">{</samp><samp class="mi">2</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:b</samp><samp class="p" data-group-id="2059715439-8">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="2059715439-9">{</samp><samp class="mi">3</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:c</samp><samp class="p" data-group-id="2059715439-9">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="2059715439-10">{</samp><samp class="mi">4</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:a</samp><samp class="p" data-group-id="2059715439-10">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="2059715439-11">{</samp><samp class="mi">5</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:b</samp><samp class="p" data-group-id="2059715439-11">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="2059715439-12">{</samp><samp class="mi">6</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:c</samp><samp class="p" data-group-id="2059715439-12">}</samp><samp class="p" data-group-id="2059715439-6">]</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Stream</samp><samp class="o">.</samp><samp class="n">zip</samp><samp class="p" data-group-id="2059715439-13">(</samp><samp class="n">cycle</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">concat</samp><samp class="p" data-group-id="2059715439-13">)</samp><samp class="w"> </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Enum</samp><samp class="o">.</samp><samp class="n">to_list</samp><samp class="p" data-group-id="2059715439-14">(</samp><samp class="p" data-group-id="2059715439-14">)</samp><samp class="w">
</samp><samp class="p" data-group-id="2059715439-15">[</samp><samp class="ss">a</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">1</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">b</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">2</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">c</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">3</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">a</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">4</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">b</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">5</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">c</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">6</samp><samp class="p" data-group-id="2059715439-15">]</samp></code></pre>
  </section>
</section>
<section class="detail" id="zip_with/2">

  <div class="detail-header">
    <a href="#zip_with/2" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">zip_with(enumerables, zip_fun)</h1>

        <span class="note">(since 1.12.0)</span>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/stream.ex#L1378" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> zip_with(enumerables, (<a href="Enumerable.xhtml#t:t/0">Enumerable.t</a>() -&gt; <a href="typespecs.xhtml#built-in-types">term</a>())) :: <a href="Enumerable.xhtml#t:t/0">Enumerable.t</a>()
when enumerables: [<a href="Enumerable.xhtml#t:t/0">Enumerable.t</a>()] | <a href="Enumerable.xhtml#t:t/0">Enumerable.t</a>()</pre>

      </div>

<p>Lazily zips corresponding elements from a finite collection of enumerables into a new
enumerable, transforming them with the <code class="inline">zip_fun</code> function as it goes.</p><p>The first element from each of the enums in <code class="inline">enumerables</code> will be put into a list which is then passed to
the one-arity <code class="inline">zip_fun</code> function. Then, the second elements from each of the enums are put into a list and passed to
<code class="inline">zip_fun</code>, and so on until any one of the enums in <code class="inline">enumerables</code> completes.</p><p>Returns a new enumerable with the results of calling <code class="inline">zip_fun</code>.</p><h2 id="zip_with/2-examples" class="section-heading"><a href="#zip_with/2-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="n">concat</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="nc">Stream</samp><samp class="o">.</samp><samp class="n">concat</samp><samp class="p" data-group-id="3846214965-1">(</samp><samp class="mi">1</samp><samp class="o">..</samp><samp class="mi">3</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">4</samp><samp class="o">..</samp><samp class="mi">6</samp><samp class="p" data-group-id="3846214965-1">)</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Stream</samp><samp class="o">.</samp><samp class="n">zip_with</samp><samp class="p" data-group-id="3846214965-2">(</samp><samp class="p" data-group-id="3846214965-3">[</samp><samp class="n">concat</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">concat</samp><samp class="p" data-group-id="3846214965-3">]</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="k" data-group-id="3846214965-4">fn</samp><samp class="w"> </samp><samp class="p" data-group-id="3846214965-5">[</samp><samp class="n">a</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">b</samp><samp class="p" data-group-id="3846214965-5">]</samp><samp class="w"> </samp><samp class="o">-&gt;</samp><samp class="w"> </samp><samp class="n">a</samp><samp class="w"> </samp><samp class="o">+</samp><samp class="w"> </samp><samp class="n">b</samp><samp class="w"> </samp><samp class="k" data-group-id="3846214965-4">end</samp><samp class="p" data-group-id="3846214965-2">)</samp><samp class="w"> </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Enum</samp><samp class="o">.</samp><samp class="n">to_list</samp><samp class="p" data-group-id="3846214965-6">(</samp><samp class="p" data-group-id="3846214965-6">)</samp><samp class="w">
</samp><samp class="p" data-group-id="3846214965-7">[</samp><samp class="mi">2</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">4</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">6</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">8</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">10</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">12</samp><samp class="p" data-group-id="3846214965-7">]</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="n">concat</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="nc">Stream</samp><samp class="o">.</samp><samp class="n">concat</samp><samp class="p" data-group-id="3846214965-8">(</samp><samp class="mi">1</samp><samp class="o">..</samp><samp class="mi">3</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">4</samp><samp class="o">..</samp><samp class="mi">6</samp><samp class="p" data-group-id="3846214965-8">)</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Stream</samp><samp class="o">.</samp><samp class="n">zip_with</samp><samp class="p" data-group-id="3846214965-9">(</samp><samp class="p" data-group-id="3846214965-10">[</samp><samp class="n">concat</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">concat</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">1</samp><samp class="o">..</samp><samp class="mi">3</samp><samp class="p" data-group-id="3846214965-10">]</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="k" data-group-id="3846214965-11">fn</samp><samp class="w"> </samp><samp class="p" data-group-id="3846214965-12">[</samp><samp class="n">a</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">b</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">c</samp><samp class="p" data-group-id="3846214965-12">]</samp><samp class="w"> </samp><samp class="o">-&gt;</samp><samp class="w"> </samp><samp class="n">a</samp><samp class="w"> </samp><samp class="o">+</samp><samp class="w"> </samp><samp class="n">b</samp><samp class="w"> </samp><samp class="o">+</samp><samp class="w"> </samp><samp class="n">c</samp><samp class="w"> </samp><samp class="k" data-group-id="3846214965-11">end</samp><samp class="p" data-group-id="3846214965-9">)</samp><samp class="w"> </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Enum</samp><samp class="o">.</samp><samp class="n">to_list</samp><samp class="p" data-group-id="3846214965-13">(</samp><samp class="p" data-group-id="3846214965-13">)</samp><samp class="w">
</samp><samp class="p" data-group-id="3846214965-14">[</samp><samp class="mi">3</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">6</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">9</samp><samp class="p" data-group-id="3846214965-14">]</samp></code></pre>
  </section>
</section>
<section class="detail" id="zip_with/3">

  <div class="detail-header">
    <a href="#zip_with/3" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">zip_with(enumerable1, enumerable2, zip_fun)</h1>

        <span class="note">(since 1.12.0)</span>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/stream.ex#L1330" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> zip_with(<a href="Enumerable.xhtml#t:t/0">Enumerable.t</a>(), <a href="Enumerable.xhtml#t:t/0">Enumerable.t</a>(), (<a href="typespecs.xhtml#built-in-types">term</a>(), <a href="typespecs.xhtml#built-in-types">term</a>() -&gt; <a href="typespecs.xhtml#built-in-types">term</a>())) ::
  <a href="Enumerable.xhtml#t:t/0">Enumerable.t</a>()</pre>

      </div>

<p>Lazily zips corresponding elements from two enumerables into a new one, transforming them with
the <code class="inline">zip_fun</code> function as it goes.</p><p>The <code class="inline">zip_fun</code> will be called with the first element from <code class="inline">enumerable1</code> and the first
element from <code class="inline">enumerable2</code>, then with the second element from each, and so on until
either one of the enumerables completes.</p><h2 id="zip_with/3-examples" class="section-heading"><a href="#zip_with/3-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="n">concat</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="nc">Stream</samp><samp class="o">.</samp><samp class="n">concat</samp><samp class="p" data-group-id="4936693023-1">(</samp><samp class="mi">1</samp><samp class="o">..</samp><samp class="mi">3</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">4</samp><samp class="o">..</samp><samp class="mi">6</samp><samp class="p" data-group-id="4936693023-1">)</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Stream</samp><samp class="o">.</samp><samp class="n">zip_with</samp><samp class="p" data-group-id="4936693023-2">(</samp><samp class="n">concat</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">concat</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="k" data-group-id="4936693023-3">fn</samp><samp class="w"> </samp><samp class="n">a</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">b</samp><samp class="w"> </samp><samp class="o">-&gt;</samp><samp class="w"> </samp><samp class="n">a</samp><samp class="w"> </samp><samp class="o">+</samp><samp class="w"> </samp><samp class="n">b</samp><samp class="w"> </samp><samp class="k" data-group-id="4936693023-3">end</samp><samp class="p" data-group-id="4936693023-2">)</samp><samp class="w"> </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Enum</samp><samp class="o">.</samp><samp class="n">to_list</samp><samp class="p" data-group-id="4936693023-4">(</samp><samp class="p" data-group-id="4936693023-4">)</samp><samp class="w">
</samp><samp class="p" data-group-id="4936693023-5">[</samp><samp class="mi">2</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">4</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">6</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">8</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">10</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">12</samp><samp class="p" data-group-id="4936693023-5">]</samp></code></pre>
  </section>
</section>

        </div>
      </section>


  </body>
</html>
