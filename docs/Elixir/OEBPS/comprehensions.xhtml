<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"
      xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>Comprehensions - Elixir v1.18.4</title>
    <meta name="generator" content="ExDoc v0.38.2" />
    <link type="text/css" rel="stylesheet" href="dist/epub-elixir-FNUUKFP7.css" />
    <script src="dist/epub-4WIP524F.js"></script>

  </head>
  <body class="content-inner">

    <h1 id="content">Comprehensions</h1>
<p>In Elixir, it is common to loop over an <a href="Enumerable.xhtml"><code class="inline">Enumerable</code></a>, often filtering out some results and mapping values into another list. Comprehensions are syntactic sugar for such constructs: they group those common tasks into the <code class="inline">for</code> special form.</p><p>For example, we can map a list of integers into their squared values:</p><pre><code class="makeup elixir" translate="no"><span class="gp unselectable">iex&gt; </span><span class="k">for</span><span class="w"> </span><span class="n">n</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="p" data-group-id="5206499454-1">[</span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="mi">2</span><span class="p">,</span><span class="w"> </span><span class="mi">3</span><span class="p">,</span><span class="w"> </span><span class="mi">4</span><span class="p" data-group-id="5206499454-1">]</span><span class="p">,</span><span class="w"> </span><span class="ss">do</span><span class="p">:</span><span class="w"> </span><span class="n">n</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">n</span><span class="w">
</span><span class="p" data-group-id="5206499454-2">[</span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="mi">4</span><span class="p">,</span><span class="w"> </span><span class="mi">9</span><span class="p">,</span><span class="w"> </span><span class="mi">16</span><span class="p" data-group-id="5206499454-2">]</span></code></pre><p>A comprehension is made of three parts: generators, filters, and collectables.</p><h2 id="generators-and-filters">Generators and filters</h2><p>In the expression above, <code class="inline">n &lt;- [1, 2, 3, 4]</code> is the <strong>generator</strong>. It is literally generating values to be used in the comprehension. Any enumerable can be passed on the right-hand side of the generator expression:</p><pre><code class="makeup elixir" translate="no"><span class="gp unselectable">iex&gt; </span><span class="k">for</span><span class="w"> </span><span class="n">n</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="mi">1</span><span class="o">..</span><span class="mi">4</span><span class="p">,</span><span class="w"> </span><span class="ss">do</span><span class="p">:</span><span class="w"> </span><span class="n">n</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">n</span><span class="w">
</span><span class="p" data-group-id="3287160391-1">[</span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="mi">4</span><span class="p">,</span><span class="w"> </span><span class="mi">9</span><span class="p">,</span><span class="w"> </span><span class="mi">16</span><span class="p" data-group-id="3287160391-1">]</span></code></pre><p>Generator expressions also support pattern matching on their left-hand side; all non-matching patterns are <em>ignored</em>. Imagine that, instead of a range, we have a keyword list where the key is the atom <code class="inline">:good</code> or <code class="inline">:bad</code> and we only want to compute the square of the <code class="inline">:good</code> values:</p><pre><code class="makeup elixir" translate="no"><span class="gp unselectable">iex&gt; </span><span class="n">values</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p" data-group-id="9475762709-1">[</span><span class="ss">good</span><span class="p">:</span><span class="w"> </span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="ss">good</span><span class="p">:</span><span class="w"> </span><span class="mi">2</span><span class="p">,</span><span class="w"> </span><span class="ss">bad</span><span class="p">:</span><span class="w"> </span><span class="mi">3</span><span class="p">,</span><span class="w"> </span><span class="ss">good</span><span class="p">:</span><span class="w"> </span><span class="mi">4</span><span class="p" data-group-id="9475762709-1">]</span><span class="w">
</span><span class="gp unselectable">iex&gt; </span><span class="k">for</span><span class="w"> </span><span class="p" data-group-id="9475762709-2">{</span><span class="ss">:good</span><span class="p">,</span><span class="w"> </span><span class="n">n</span><span class="p" data-group-id="9475762709-2">}</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">values</span><span class="p">,</span><span class="w"> </span><span class="ss">do</span><span class="p">:</span><span class="w"> </span><span class="n">n</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">n</span><span class="w">
</span><span class="p" data-group-id="9475762709-3">[</span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="mi">4</span><span class="p">,</span><span class="w"> </span><span class="mi">16</span><span class="p" data-group-id="9475762709-3">]</span></code></pre><p>Alternatively to pattern matching, filters can be used to select some particular elements. For example, we can select the multiples of 3 and discard all others:</p><pre><code class="makeup elixir" translate="no"><span class="gp unselectable">iex&gt; </span><span class="k">for</span><span class="w"> </span><span class="n">n</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="mi">0</span><span class="o">..</span><span class="mi">5</span><span class="p">,</span><span class="w"> </span><span class="n">rem</span><span class="p" data-group-id="6219911939-1">(</span><span class="n">n</span><span class="p">,</span><span class="w"> </span><span class="mi">3</span><span class="p" data-group-id="6219911939-1">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="ss">do</span><span class="p">:</span><span class="w"> </span><span class="n">n</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">n</span><span class="w">
</span><span class="p" data-group-id="6219911939-2">[</span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">9</span><span class="p" data-group-id="6219911939-2">]</span></code></pre><p>Comprehensions discard all elements for which the filter expression returns <code class="inline">false</code> or <code class="inline">nil</code>; all other values are selected.</p><p>Comprehensions generally provide a much more concise representation than using the equivalent functions from the <a href="Enum.xhtml"><code class="inline">Enum</code></a> and <a href="Stream.xhtml"><code class="inline">Stream</code></a> modules. Furthermore, comprehensions also allow multiple generators and filters to be given. Here is an example that receives a list of directories and gets the size of each file in those directories:</p><pre><code class="makeup elixir" translate="no"><span class="n">dirs</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p" data-group-id="4730841677-1">[</span><span class="s">&quot;/home/mikey&quot;</span><span class="p">,</span><span class="w"> </span><span class="s">&quot;/home/james&quot;</span><span class="p" data-group-id="4730841677-1">]</span><span class="w">

</span><span class="k">for</span><span class="w"> </span><span class="n">dir</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">dirs</span><span class="p">,</span><span class="w">
    </span><span class="n">file</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nc">File</span><span class="o">.</span><span class="n">ls!</span><span class="p" data-group-id="4730841677-2">(</span><span class="n">dir</span><span class="p" data-group-id="4730841677-2">)</span><span class="p">,</span><span class="w">
    </span><span class="n">path</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nc">Path</span><span class="o">.</span><span class="n">join</span><span class="p" data-group-id="4730841677-3">(</span><span class="n">dir</span><span class="p">,</span><span class="w"> </span><span class="n">file</span><span class="p" data-group-id="4730841677-3">)</span><span class="p">,</span><span class="w">
    </span><span class="nc">File</span><span class="o">.</span><span class="n">regular?</span><span class="p" data-group-id="4730841677-4">(</span><span class="n">path</span><span class="p" data-group-id="4730841677-4">)</span><span class="w"> </span><span class="k" data-group-id="4730841677-5">do</span><span class="w">
  </span><span class="nc">File</span><span class="o">.</span><span class="n">stat!</span><span class="p" data-group-id="4730841677-6">(</span><span class="n">path</span><span class="p" data-group-id="4730841677-6">)</span><span class="o">.</span><span class="n">size</span><span class="w">
</span><span class="k" data-group-id="4730841677-5">end</span></code></pre><p>Multiple generators can also be used to calculate the Cartesian product of two lists:</p><pre><code class="makeup elixir" translate="no"><span class="gp unselectable">iex&gt; </span><span class="k">for</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="p" data-group-id="6173392340-1">[</span><span class="ss">:a</span><span class="p">,</span><span class="w"> </span><span class="ss">:b</span><span class="p">,</span><span class="w"> </span><span class="ss">:c</span><span class="p" data-group-id="6173392340-1">]</span><span class="p">,</span><span class="w"> </span><span class="n">j</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="p" data-group-id="6173392340-2">[</span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="mi">2</span><span class="p" data-group-id="6173392340-2">]</span><span class="p">,</span><span class="w"> </span><span class="ss">do</span><span class="p">:</span><span class="w">  </span><span class="p" data-group-id="6173392340-3">{</span><span class="n">i</span><span class="p">,</span><span class="w"> </span><span class="n">j</span><span class="p" data-group-id="6173392340-3">}</span><span class="w">
</span><span class="p" data-group-id="6173392340-4">[</span><span class="ss">a</span><span class="p">:</span><span class="w"> </span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="ss">a</span><span class="p">:</span><span class="w"> </span><span class="mi">2</span><span class="p">,</span><span class="w"> </span><span class="ss">b</span><span class="p">:</span><span class="w"> </span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="ss">b</span><span class="p">:</span><span class="w"> </span><span class="mi">2</span><span class="p">,</span><span class="w"> </span><span class="ss">c</span><span class="p">:</span><span class="w"> </span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="ss">c</span><span class="p">:</span><span class="w"> </span><span class="mi">2</span><span class="p" data-group-id="6173392340-4">]</span></code></pre><p>Finally, keep in mind that variable assignments inside the comprehension, be it in generators, filters or inside the block, are not reflected outside of the comprehension.</p><h2 id="bitstring-generators">Bitstring generators</h2><p>Bitstring generators are also supported and are very useful when you need to comprehend over bitstring streams. The example below receives a list of pixels from a binary with their respective red, green and blue values and converts them into tuples of three elements each:</p><pre><code class="makeup elixir" translate="no"><span class="gp unselectable">iex&gt; </span><span class="n">pixels</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p" data-group-id="2175068532-1">&lt;&lt;</span><span class="mi">213</span><span class="p">,</span><span class="w"> </span><span class="mi">45</span><span class="p">,</span><span class="w"> </span><span class="mi">132</span><span class="p">,</span><span class="w"> </span><span class="mi">64</span><span class="p">,</span><span class="w"> </span><span class="mi">76</span><span class="p">,</span><span class="w"> </span><span class="mi">32</span><span class="p">,</span><span class="w"> </span><span class="mi">76</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">234</span><span class="p">,</span><span class="w"> </span><span class="mi">32</span><span class="p">,</span><span class="w"> </span><span class="mi">15</span><span class="p" data-group-id="2175068532-1">&gt;&gt;</span><span class="w">
</span><span class="gp unselectable">iex&gt; </span><span class="k">for</span><span class="w"> </span><span class="p" data-group-id="2175068532-2">&lt;&lt;</span><span class="n">r</span><span class="o">::</span><span class="mi">8</span><span class="p">,</span><span class="w"> </span><span class="n">g</span><span class="o">::</span><span class="mi">8</span><span class="p">,</span><span class="w"> </span><span class="n">b</span><span class="o">::</span><span class="mi">8</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">pixels</span><span class="p" data-group-id="2175068532-2">&gt;&gt;</span><span class="p">,</span><span class="w"> </span><span class="ss">do</span><span class="p">:</span><span class="w"> </span><span class="p" data-group-id="2175068532-3">{</span><span class="n">r</span><span class="p">,</span><span class="w"> </span><span class="n">g</span><span class="p">,</span><span class="w"> </span><span class="n">b</span><span class="p" data-group-id="2175068532-3">}</span><span class="w">
</span><span class="p" data-group-id="2175068532-4">[</span><span class="p" data-group-id="2175068532-5">{</span><span class="mi">213</span><span class="p">,</span><span class="w"> </span><span class="mi">45</span><span class="p">,</span><span class="w"> </span><span class="mi">132</span><span class="p" data-group-id="2175068532-5">}</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="2175068532-6">{</span><span class="mi">64</span><span class="p">,</span><span class="w"> </span><span class="mi">76</span><span class="p">,</span><span class="w"> </span><span class="mi">32</span><span class="p" data-group-id="2175068532-6">}</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="2175068532-7">{</span><span class="mi">76</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p" data-group-id="2175068532-7">}</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="2175068532-8">{</span><span class="mi">234</span><span class="p">,</span><span class="w"> </span><span class="mi">32</span><span class="p">,</span><span class="w"> </span><span class="mi">15</span><span class="p" data-group-id="2175068532-8">}</span><span class="p" data-group-id="2175068532-4">]</span></code></pre><p>A bitstring generator can be mixed with &quot;regular&quot; enumerable generators, and supports filters as well.</p><h2 id="the-into-option">The <code class="inline">:into</code> option</h2><p>In the examples above, all the comprehensions returned lists as their result. However, the result of a comprehension can be inserted into different data structures by passing the <code class="inline">:into</code> option to the comprehension.</p><p>For example, a bitstring generator can be used with the <code class="inline">:into</code> option in order to easily remove all spaces in a string:</p><pre><code class="makeup elixir" translate="no"><span class="gp unselectable">iex&gt; </span><span class="k">for</span><span class="w"> </span><span class="p" data-group-id="4173613859-1">&lt;&lt;</span><span class="n">c</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="s">&quot; hello world &quot;</span><span class="p" data-group-id="4173613859-1">&gt;&gt;</span><span class="p">,</span><span class="w"> </span><span class="n">c</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="sc">?\s</span><span class="p">,</span><span class="w"> </span><span class="ss">into</span><span class="p">:</span><span class="w"> </span><span class="s">&quot;&quot;</span><span class="p">,</span><span class="w"> </span><span class="ss">do</span><span class="p">:</span><span class="w"> </span><span class="p" data-group-id="4173613859-2">&lt;&lt;</span><span class="n">c</span><span class="p" data-group-id="4173613859-2">&gt;&gt;</span><span class="w">
</span><span class="s">&quot;helloworld&quot;</span></code></pre><p>Sets, maps, and other dictionaries can also be given to the <code class="inline">:into</code> option. In general, <code class="inline">:into</code> accepts any structure that implements the <a href="Collectable.xhtml"><code class="inline">Collectable</code></a> protocol.</p><p>A common use case of <code class="inline">:into</code> can be transforming values in a map:</p><pre><code class="makeup elixir" translate="no"><span class="gp unselectable">iex&gt; </span><span class="k">for</span><span class="w"> </span><span class="p" data-group-id="1281475019-1">{</span><span class="n">key</span><span class="p">,</span><span class="w"> </span><span class="n">val</span><span class="p" data-group-id="1281475019-1">}</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="p" data-group-id="1281475019-2">%{</span><span class="s">&quot;a&quot;</span><span class="w"> </span><span class="p">=&gt;</span><span class="w"> </span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="s">&quot;b&quot;</span><span class="w"> </span><span class="p">=&gt;</span><span class="w"> </span><span class="mi">2</span><span class="p" data-group-id="1281475019-2">}</span><span class="p">,</span><span class="w"> </span><span class="ss">into</span><span class="p">:</span><span class="w"> </span><span class="p" data-group-id="1281475019-3">%{</span><span class="p" data-group-id="1281475019-3">}</span><span class="p">,</span><span class="w"> </span><span class="ss">do</span><span class="p">:</span><span class="w"> </span><span class="p" data-group-id="1281475019-4">{</span><span class="n">key</span><span class="p">,</span><span class="w"> </span><span class="n">val</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">val</span><span class="p" data-group-id="1281475019-4">}</span><span class="w">
</span><span class="p" data-group-id="1281475019-5">%{</span><span class="s">&quot;a&quot;</span><span class="w"> </span><span class="p">=&gt;</span><span class="w"> </span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="s">&quot;b&quot;</span><span class="w"> </span><span class="p">=&gt;</span><span class="w"> </span><span class="mi">4</span><span class="p" data-group-id="1281475019-5">}</span></code></pre><p>Let's make another example using streams. Since the <a href="IO.xhtml"><code class="inline">IO</code></a> module provides streams (that are both <a href="Enumerable.xhtml"><code class="inline">Enumerable</code></a>s and <a href="Collectable.xhtml"><code class="inline">Collectable</code></a>s), an echo terminal that echoes back the upcased version of whatever is typed can be implemented using comprehensions:</p><pre><code class="makeup elixir" translate="no"><span class="gp unselectable">iex&gt; </span><span class="n">stream</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nc">IO</span><span class="o">.</span><span class="n">stream</span><span class="p" data-group-id="3687375357-1">(</span><span class="ss">:stdio</span><span class="p">,</span><span class="w"> </span><span class="ss">:line</span><span class="p" data-group-id="3687375357-1">)</span><span class="w">
</span><span class="gp unselectable">iex&gt; </span><span class="k">for</span><span class="w"> </span><span class="n">line</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">stream</span><span class="p">,</span><span class="w"> </span><span class="ss">into</span><span class="p">:</span><span class="w"> </span><span class="n">stream</span><span class="w"> </span><span class="k" data-group-id="3687375357-2">do</span><span class="w">
</span><span class="gp unselectable">...&gt; </span><span class="w">  </span><span class="nc">String</span><span class="o">.</span><span class="n">upcase</span><span class="p" data-group-id="3687375357-3">(</span><span class="n">line</span><span class="p" data-group-id="3687375357-3">)</span><span class="w"> </span><span class="o">&lt;&gt;</span><span class="w"> </span><span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span><span class="w">
</span><span class="gp unselectable">...&gt; </span><span class="k" data-group-id="3687375357-2">end</span></code></pre><p>Now type any string into the terminal and you will see that the same value will be printed in upper-case. Unfortunately, this example also got your IEx shell stuck in the comprehension, so you will need to hit <code class="inline">Ctrl+C</code> twice to get out of it. :)</p><h2 id="other-options">Other options</h2><p>Comprehensions support other options, such as <code class="inline">:reduce</code> and <code class="inline">:uniq</code>. Here are additional resources to learn more about comprehensions:</p><ul><li><a href="Kernel.SpecialForms.xhtml#for/1"><code class="inline">for</code> official reference in Elixir documentation</a></li><li><a href="https://www.mitchellhanberg.com/the-comprehensive-guide-to-elixirs-for-comprehension/">Mitchell Hanberg's comprehensive guide to Elixir's comprehensions</a></li></ul>

  </body>
</html>
