<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"
      xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>Naming conventions - Elixir v1.18.4</title>
    <meta name="generator" content="ExDoc v0.38.2" />
    <link type="text/css" rel="stylesheet" href="dist/epub-elixir-FNUUKFP7.css" />
    <script src="dist/epub-4WIP524F.js"></script>

  </head>
  <body class="content-inner">

    <h1 id="content">Naming conventions</h1>
<p>This document is a reference of the naming conventions in Elixir, from casing to punctuation characters.</p><p>The naming convention is, by definition, a subset of the Elixir syntax. A convention aims to
follow and set best practices for language and the community. If instead you want a complete reference into the Elixir syntax, beyond its conventions, see <a href="syntax-reference.xhtml">the Syntax reference</a>.</p><h2 id="casing">Casing</h2><p>Elixir developers must use <code class="inline">snake_case</code> when defining variables, function names, module attributes, and the like:</p><pre><code class="makeup elixir" translate="no"><span class="n">some_map</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p" data-group-id="8727651516-1">%{</span><span class="ss">this_is_a_key</span><span class="p">:</span><span class="w"> </span><span class="s">&quot;and a value&quot;</span><span class="p" data-group-id="8727651516-1">}</span><span class="w">
</span><span class="n">is_map</span><span class="p" data-group-id="8727651516-2">(</span><span class="n">some_map</span><span class="p" data-group-id="8727651516-2">)</span></code></pre><p>Aliases, commonly used as module names, are an exception as they must be capitalized and written in <code class="inline">CamelCase</code>, like <a href="OptionParser.xhtml"><code class="inline">OptionParser</code></a>. For aliases, capital letters are kept in acronyms, like <a href="https://hexdocs.pm/ex_unit/ExUnit.CaptureIO.html"><code class="inline">ExUnit.CaptureIO</code></a> or <a href="https://hexdocs.pm/mix/Mix.SCM.html"><code class="inline">Mix.SCM</code></a>.</p><p>Atoms can be written either in <code class="inline">:snake_case</code> or <code class="inline">:CamelCase</code>, although the convention is to use the snake case version throughout Elixir.</p><p>Generally speaking, filenames follow the <code class="inline">snake_case</code> convention of the module they define. For example, <code class="inline">MyApp</code> should be defined inside the <code class="inline">my_app.ex</code> file. However, this is only a convention. At the end of the day any filename can be used as they do not affect the compiled code in any way.</p><h2 id="underscore-_foo">Underscore (<code class="inline">_foo</code>)</h2><p>Elixir relies on underscores in different situations.</p><p>For example, a value that is not meant to be used must be assigned to <code class="inline">_</code> or to a variable starting with underscore:</p><pre><code class="makeup elixir" translate="no"><span class="gp unselectable">iex&gt; </span><span class="p" data-group-id="9118592734-1">{</span><span class="ss">:ok</span><span class="p">,</span><span class="w"> </span><span class="c">_contents</span><span class="p" data-group-id="9118592734-1">}</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nc">File</span><span class="o">.</span><span class="n">read</span><span class="p" data-group-id="9118592734-2">(</span><span class="s">&quot;README.md&quot;</span><span class="p" data-group-id="9118592734-2">)</span></code></pre><p>Function names may also start with an underscore. Such functions are never imported by default:</p><pre><code class="makeup elixir" translate="no"><span class="gp unselectable">iex&gt; </span><span class="kd">defmodule</span><span class="w"> </span><span class="nc">Example</span><span class="w"> </span><span class="k" data-group-id="3419266974-1">do</span><span class="w">
</span><span class="gp unselectable">...&gt; </span><span class="w">  </span><span class="kd">def</span><span class="w"> </span><span class="nf">_wont_be_imported</span><span class="w"> </span><span class="k" data-group-id="3419266974-2">do</span><span class="w">
</span><span class="gp unselectable">...&gt; </span><span class="w">    </span><span class="ss">:oops</span><span class="w">
</span><span class="gp unselectable">...&gt; </span><span class="w">  </span><span class="k" data-group-id="3419266974-2">end</span><span class="w">
</span><span class="gp unselectable">...&gt; </span><span class="k" data-group-id="3419266974-1">end</span><span class="w">

</span><span class="gp unselectable">iex&gt; </span><span class="kn">import</span><span class="w"> </span><span class="nc">Example</span><span class="w">
</span><span class="gp unselectable">iex&gt; </span><span class="c">_wont_be_imported</span><span class="p" data-group-id="3419266974-3">(</span><span class="p" data-group-id="3419266974-3">)</span><span class="w">
</span><span class="gt">** (CompileError) iex:1: undefined function _wont_be_imported/0</span></code></pre><p>Due to this property, Elixir relies on functions starting with underscore to attach compile-time metadata to modules. Such functions are most often in the <code class="inline">__foo__</code> format. For example, every module in Elixir has an <a href="Module.xhtml#c:__info__/1"><code class="inline">__info__/1</code></a> function:</p><pre><code class="makeup elixir" translate="no"><span class="gp unselectable">iex&gt; </span><span class="nc">String</span><span class="o">.</span><span class="c">__info__</span><span class="p" data-group-id="2828942740-1">(</span><span class="ss">:functions</span><span class="p" data-group-id="2828942740-1">)</span><span class="w">
</span><span class="p" data-group-id="2828942740-2">[</span><span class="ss">at</span><span class="p">:</span><span class="w"> </span><span class="mi">2</span><span class="p">,</span><span class="w"> </span><span class="ss">capitalize</span><span class="p">:</span><span class="w"> </span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="ss">chunk</span><span class="p">:</span><span class="w"> </span><span class="mi">2</span><span class="p">,</span><span class="w"> </span><span class="n">...</span><span class="p" data-group-id="2828942740-2">]</span></code></pre><p>Elixir also includes five special forms that follow the double underscore format: <a href="Kernel.SpecialForms.xhtml#__CALLER__/0"><code class="inline">__CALLER__/0</code></a>, <a href="Kernel.SpecialForms.xhtml#__DIR__/0"><code class="inline">__DIR__/0</code></a>, <a href="Kernel.SpecialForms.xhtml#__ENV__/0"><code class="inline">__ENV__/0</code></a>and <a href="Kernel.SpecialForms.xhtml#__MODULE__/0"><code class="inline">__MODULE__/0</code></a> retrieve compile-time information about the current environment, while <a href="Kernel.SpecialForms.xhtml#__STACKTRACE__/0"><code class="inline">__STACKTRACE__/0</code></a> retrieves the stacktrace for the current exception.</p><h2 id="trailing-bang-foo">Trailing bang (<code class="inline">foo!</code>)</h2><p>A trailing bang (exclamation mark) signifies a function or macro where failure cases raise an exception. They most often exist as a &quot;raising variant&quot; of a function that returns <code class="inline">:ok</code>/<code class="inline">:error</code> tuples (or <code class="inline">nil</code>).</p><p>One example is <a href="File.xhtml#read/1"><code class="inline">File.read/1</code></a> and <a href="File.xhtml#read!/1"><code class="inline">File.read!/1</code></a>. <a href="File.xhtml#read/1"><code class="inline">File.read/1</code></a> will return a success or failure tuple, whereas <a href="File.xhtml#read!/1"><code class="inline">File.read!/1</code></a> will return a plain value or else raise an exception:</p><pre><code class="makeup elixir" translate="no"><span class="gp unselectable">iex&gt; </span><span class="nc">File</span><span class="o">.</span><span class="n">read</span><span class="p" data-group-id="8099225995-1">(</span><span class="s">&quot;file.txt&quot;</span><span class="p" data-group-id="8099225995-1">)</span><span class="w">
</span><span class="p" data-group-id="8099225995-2">{</span><span class="ss">:ok</span><span class="p">,</span><span class="w"> </span><span class="s">&quot;file contents&quot;</span><span class="p" data-group-id="8099225995-2">}</span><span class="w">
</span><span class="gp unselectable">iex&gt; </span><span class="nc">File</span><span class="o">.</span><span class="n">read</span><span class="p" data-group-id="8099225995-3">(</span><span class="s">&quot;no_such_file.txt&quot;</span><span class="p" data-group-id="8099225995-3">)</span><span class="w">
</span><span class="p" data-group-id="8099225995-4">{</span><span class="ss">:error</span><span class="p">,</span><span class="w"> </span><span class="ss">:enoent</span><span class="p" data-group-id="8099225995-4">}</span><span class="w">

</span><span class="gp unselectable">iex&gt; </span><span class="nc">File</span><span class="o">.</span><span class="n">read!</span><span class="p" data-group-id="8099225995-5">(</span><span class="s">&quot;file.txt&quot;</span><span class="p" data-group-id="8099225995-5">)</span><span class="w">
</span><span class="s">&quot;file contents&quot;</span><span class="w">
</span><span class="gp unselectable">iex&gt; </span><span class="nc">File</span><span class="o">.</span><span class="n">read!</span><span class="p" data-group-id="8099225995-6">(</span><span class="s">&quot;no_such_file.txt&quot;</span><span class="p" data-group-id="8099225995-6">)</span><span class="w">
</span><span class="gt">** (File.Error) could not read file no_such_file.txt: no such file or directory</span></code></pre><p>The version without <code class="inline">!</code> is preferred when you want to handle different outcomes using pattern matching:</p><pre><code class="makeup elixir" translate="no"><span class="k">case</span><span class="w"> </span><span class="nc">File</span><span class="o">.</span><span class="n">read</span><span class="p" data-group-id="7104654340-1">(</span><span class="n">file</span><span class="p" data-group-id="7104654340-1">)</span><span class="w"> </span><span class="k" data-group-id="7104654340-2">do</span><span class="w">
  </span><span class="p" data-group-id="7104654340-3">{</span><span class="ss">:ok</span><span class="p">,</span><span class="w"> </span><span class="n">body</span><span class="p" data-group-id="7104654340-3">}</span><span class="w"> </span><span class="o">-&gt;</span><span class="w"> </span><span class="c1"># do something with the `body`</span><span class="w">
  </span><span class="p" data-group-id="7104654340-4">{</span><span class="ss">:error</span><span class="p">,</span><span class="w"> </span><span class="n">reason</span><span class="p" data-group-id="7104654340-4">}</span><span class="w"> </span><span class="o">-&gt;</span><span class="w"> </span><span class="c1"># handle the error caused by `reason`</span><span class="w">
</span><span class="k" data-group-id="7104654340-2">end</span></code></pre><p>However, if you expect the outcome to always be successful (for instance, if you expect the file always to exist), the bang variation can be more convenient and will raise a more helpful error message (than a failed pattern match) on failure.</p><p>When thinking about failure cases, we are often thinking about semantic errors related to the operation being performed, such as failing to open a file or trying to fetch key from a map. Errors that come from invalid argument types, or similar, must always raise regardless if the function has a bang or not. In such cases, the exception is often an <a href="ArgumentError.xhtml"><code class="inline">ArgumentError</code></a> or a detailed <a href="FunctionClauseError.xhtml"><code class="inline">FunctionClauseError</code></a>:</p><pre><code class="makeup elixir" translate="no"><span class="gp unselectable">iex(1)&gt; </span><span class="nc">File</span><span class="o">.</span><span class="n">read</span><span class="p" data-group-id="1273786063-1">(</span><span class="mi">123</span><span class="p" data-group-id="1273786063-1">)</span><span class="w">
</span><span class="gt">** (FunctionClauseError) no function clause matching in IO.chardata_to_string/1</span><span class="w">

    </span><span class="nc">The</span><span class="w"> </span><span class="n">following</span><span class="w"> </span><span class="n">arguments</span><span class="w"> </span><span class="n">were</span><span class="w"> </span><span class="n">given</span><span class="w"> </span><span class="n">to</span><span class="w"> </span><span class="nc">IO</span><span class="o">.</span><span class="n">chardata_to_string</span><span class="o">/</span><span class="mi">1</span><span class="p">:</span><span class="w">

        </span><span class="c1"># 1</span><span class="w">
        </span><span class="mi">123</span><span class="w">

    </span><span class="nc">Attempted</span><span class="w"> </span><span class="n">function</span><span class="w"> </span><span class="n">clauses</span><span class="w"> </span><span class="p" data-group-id="1273786063-2">(</span><span class="n">showing</span><span class="w"> </span><span class="mi">2</span><span class="w"> </span><span class="n">out</span><span class="w"> </span><span class="n">of</span><span class="w"> </span><span class="mi">2</span><span class="p" data-group-id="1273786063-2">)</span><span class="p">:</span><span class="w">

        </span><span class="kd">def</span><span class="w"> </span><span class="nf">chardata_to_string</span><span class="p" data-group-id="1273786063-3">(</span><span class="n">string</span><span class="p" data-group-id="1273786063-3">)</span><span class="w"> </span><span class="ow">when</span><span class="w"> </span><span class="n">is_binary</span><span class="p" data-group-id="1273786063-4">(</span><span class="n">string</span><span class="p" data-group-id="1273786063-4">)</span><span class="w">
        </span><span class="kd">def</span><span class="w"> </span><span class="nf">chardata_to_string</span><span class="p" data-group-id="1273786063-5">(</span><span class="n">list</span><span class="p" data-group-id="1273786063-5">)</span><span class="w"> </span><span class="ow">when</span><span class="w"> </span><span class="n">is_list</span><span class="p" data-group-id="1273786063-6">(</span><span class="n">list</span><span class="p" data-group-id="1273786063-6">)</span></code></pre><p>More examples of paired functions: <a href="Base.xhtml#decode16/2"><code class="inline">Base.decode16/2</code></a> and <a href="Base.xhtml#decode16!/2"><code class="inline">Base.decode16!/2</code></a>, <a href="File.xhtml#cwd/0"><code class="inline">File.cwd/0</code></a> and <a href="File.xhtml#cwd!/0"><code class="inline">File.cwd!/0</code></a>. In some situations, you may have bang functions without a non-bang counterpart. They also imply the possibility of errors, such as: <a href="Protocol.xhtml#assert_protocol!/1"><code class="inline">Protocol.assert_protocol!/1</code></a> and <a href="PartitionSupervisor.xhtml#resize!/2"><code class="inline">PartitionSupervisor.resize!/2</code></a>. This can be useful if you foresee the possibility of adding a non-raising variant in the future.</p><h2 id="trailing-question-mark-foo">Trailing question mark (<code class="inline">foo?</code>)</h2><p>Functions that return a boolean are named with a trailing question mark.</p><p>Examples: <a href="Keyword.xhtml#keyword?/1"><code class="inline">Keyword.keyword?/1</code></a>, <a href="https://hexdocs.pm/mix/Mix.html#debug?/0"><code class="inline">Mix.debug?/0</code></a>, <a href="String.xhtml#contains?/2"><code class="inline">String.contains?/2</code></a></p><p>However, functions that return booleans and are valid in guards follow another convention, described next.</p><h2 id="is_-prefix-is_foo"><code class="inline">is_</code> prefix (<code class="inline">is_foo</code>)</h2><p>Type checks and other boolean checks that are allowed in guard clauses are named with an <code class="inline">is_</code> prefix.</p><p>Examples: <a href="Integer.xhtml#is_even/1"><code class="inline">Integer.is_even/1</code></a>, <a href="Kernel.xhtml#is_list/1"><code class="inline">is_list/1</code></a></p><p>These functions and macros follow the Erlang convention of an <code class="inline">is_</code> prefix, instead of a trailing question mark, precisely to indicate that they are allowed in guard clauses.</p><p>Note that type checks that are not valid in guard clauses do not follow this convention. For example: <a href="Keyword.xhtml#keyword?/1"><code class="inline">Keyword.keyword?/1</code></a>.</p><h2 id="special-names">Special names</h2><p>Some names have specific meaning in Elixir. We detail those cases below.</p><h3 id="length-and-size">length and size</h3><p>When you see <code class="inline">size</code> in a function name, it means the operation runs in constant time (also written as &quot;O(1) time&quot;) because the size is stored alongside the data structure.</p><p>Examples: <a href="Kernel.xhtml#map_size/1"><code class="inline">map_size/1</code></a>, <a href="Kernel.xhtml#tuple_size/1"><code class="inline">tuple_size/1</code></a></p><p>When you see <code class="inline">length</code>, the operation runs in linear time (&quot;O(n) time&quot;) because the entire data structure has to be traversed.</p><p>Examples: <a href="Kernel.xhtml#length/1"><code class="inline">length/1</code></a>, <a href="String.xhtml#length/1"><code class="inline">String.length/1</code></a></p><p>In other words, functions using the word &quot;size&quot; in its name will take the same amount of time whether the data structure is tiny or huge. Conversely, functions having &quot;length&quot; in its name will take more time as the data structure grows in size.</p><h3 id="get-fetch-fetch">get, fetch, fetch!</h3><p>When you see the functions <code class="inline">get</code>, <code class="inline">fetch</code>, and <code class="inline">fetch!</code> for key-value data structures, you can expect the following behaviours:</p><ul><li><code class="inline">get</code> returns a default value (which itself defaults to <code class="inline">nil</code>) if the key is not present, or returns the requested value.</li><li><code class="inline">fetch</code> returns <code class="inline">:error</code> if the key is not present, or returns <code class="inline">{:ok, value}</code> if it is.</li><li><code class="inline">fetch!</code> <em>raises</em> if the key is not present, or returns the requested value.</li></ul><p>Examples: <a href="Map.xhtml#get/2"><code class="inline">Map.get/2</code></a>, <a href="Map.xhtml#fetch/2"><code class="inline">Map.fetch/2</code></a>, <a href="Map.xhtml#fetch!/2"><code class="inline">Map.fetch!/2</code></a>, <a href="Keyword.xhtml#get/2"><code class="inline">Keyword.get/2</code></a>, <a href="Keyword.xhtml#fetch/2"><code class="inline">Keyword.fetch/2</code></a>, <a href="Keyword.xhtml#fetch!/2"><code class="inline">Keyword.fetch!/2</code></a></p><h3 id="compare">compare</h3><p>The function <code class="inline">compare/2</code> should return <code class="inline">:lt</code> if the first term is less than the second, <code class="inline">:eq</code> if the two
terms compare as equivalent, or <code class="inline">:gt</code> if the first term is greater than the second.</p><p>Examples: <a href="DateTime.xhtml#compare/2"><code class="inline">DateTime.compare/2</code></a></p><p>Note that this specific convention is important due to the expectations of <a href="Enum.xhtml#sort/2"><code class="inline">Enum.sort/2</code></a></p>

  </body>
</html>
