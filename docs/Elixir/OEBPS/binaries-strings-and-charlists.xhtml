<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"
      xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>Binaries, strings, and charlists - Elixir v1.18.4</title>
    <meta name="generator" content="ExDoc v0.38.2" />
    <link type="text/css" rel="stylesheet" href="dist/epub-elixir-FNUUKFP7.css" />
    <script src="dist/epub-4WIP524F.js"></script>

  </head>
  <body class="content-inner">

    <h1 id="content">Binaries, strings, and charlists</h1>
<p>In <a href="basic-types.xhtml">&quot;Basic types&quot;</a>, we learned a bit about strings and we used the <a href="Kernel.xhtml#is_binary/1"><code class="inline">is_binary/1</code></a> function for checks:</p><pre><code class="makeup elixir" translate="no"><span class="gp unselectable">iex&gt; </span><span class="n">string</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s">&quot;hello&quot;</span><span class="w">
</span><span class="s">&quot;hello&quot;</span><span class="w">
</span><span class="gp unselectable">iex&gt; </span><span class="n">is_binary</span><span class="p" data-group-id="5002085898-1">(</span><span class="n">string</span><span class="p" data-group-id="5002085898-1">)</span><span class="w">
</span><span class="no">true</span></code></pre><p>In this chapter, we will gain clarity on what exactly binaries are and how they relate to strings. We will also learn about charlists, <code class="inline">~c&quot;like this&quot;</code>, which are often used for interoperability with Erlang.</p><p>Although strings are one of the most common data types in computer languages, they are subtly complex and are often misunderstood. To understand strings in Elixir, let's first discuss <a href="https://en.wikipedia.org/wiki/Unicode">Unicode</a> and character encodings, specifically the <a href="https://en.wikipedia.org/wiki/UTF-8">UTF-8</a> encoding.</p><h2 id="unicode-and-code-points">Unicode and Code Points</h2><p>In order to facilitate meaningful communication between computers across multiple languages, a standard is required so that the ones and zeros on one machine mean the same thing when they are transmitted to another. The <a href="https://unicode.org/standard/standard.html">Unicode Standard</a> acts as an official registry of virtually all the characters we know: this includes characters from classical and historical texts, emoji, and formatting and control characters as well.</p><p>Unicode organizes all of the characters in its repertoire into code charts, and each character is given a unique numerical index. This numerical index is known as a <a href="https://en.wikipedia.org/wiki/Code_point">Code Point</a>.</p><p>In Elixir you can use a <code class="inline">?</code> in front of a character literal to reveal its code point:</p><pre><code class="makeup elixir" translate="no"><span class="gp unselectable">iex&gt; </span><span class="sc">?a</span><span class="w">
</span><span class="mi">97</span><span class="w">
</span><span class="gp unselectable">iex&gt; </span><span class="sc">?ł</span><span class="w">
</span><span class="mi">322</span></code></pre><p>Note that most Unicode code charts will refer to a code point by its hexadecimal (hex) representation, e.g. <code class="inline">97</code> translates to <code class="inline">0061</code> in hex, and we can represent any Unicode character in an Elixir string by using the <code class="inline">\uXXXX</code> notation and the hex representation of its code point number:</p><pre><code class="makeup elixir" translate="no"><span class="gp unselectable">iex&gt; </span><span class="s">&quot;</span><span class="se">\u0061</span><span class="s">&quot;</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s">&quot;a&quot;</span><span class="w">
</span><span class="no">true</span><span class="w">
</span><span class="gp unselectable">iex&gt; </span><span class="mh">0x0061</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">97</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="sc">?a</span><span class="w">
</span><span class="mi">97</span></code></pre><p>The hex representation will also help you look up information about a code point, e.g. <a href="https://codepoints.net/U+0061">https://codepoints.net/U+0061</a> has a data sheet all about the lower case <code class="inline">a</code>, a.k.a. code point 97.</p><h2 id="utf-8-and-encodings">UTF-8 and Encodings</h2><p>Now that we understand what the Unicode standard is and what code points are, we can finally talk about encodings. Whereas the code point is <strong>what</strong> we store, an encoding deals with <strong>how</strong> we store it: encoding is an implementation. In other words, we need a mechanism to convert the code point numbers into bytes so they can be stored in memory, written to disk, etc.</p><p>Elixir uses UTF-8 to encode its strings, which means that code points are encoded as a series of 8-bit bytes. UTF-8 is a <strong>variable width</strong> character encoding that uses one to four bytes to store each code point. It is capable of encoding all valid Unicode code points. Let's see an example:</p><pre><code class="makeup elixir" translate="no"><span class="gp unselectable">iex&gt; </span><span class="n">string</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s">&quot;héllo&quot;</span><span class="w">
</span><span class="s">&quot;héllo&quot;</span><span class="w">
</span><span class="gp unselectable">iex&gt; </span><span class="nc">String</span><span class="o">.</span><span class="n">length</span><span class="p" data-group-id="7674183362-1">(</span><span class="n">string</span><span class="p" data-group-id="7674183362-1">)</span><span class="w">
</span><span class="mi">5</span><span class="w">
</span><span class="gp unselectable">iex&gt; </span><span class="n">byte_size</span><span class="p" data-group-id="7674183362-2">(</span><span class="n">string</span><span class="p" data-group-id="7674183362-2">)</span><span class="w">
</span><span class="mi">6</span></code></pre><p>Although the string above has 5 characters, it uses 6 bytes, as two bytes are used to represent the character <code class="inline">é</code>.</p><blockquote><p>Note: if you are running on Windows, there is a chance your terminal does not use UTF-8 by default. You can change the encoding of your current session by running <code class="inline">chcp 65001</code> before entering <code class="inline">iex</code> (<code class="inline">iex.bat</code>).</p></blockquote><p>Besides defining characters, UTF-8 also provides a notion of graphemes. Graphemes may consist of multiple characters that are often perceived as one. For example, the <a href="https://emojipedia.org/woman-firefighter/">woman firefighter emoji</a> is represented as the combination of three characters: the woman emoji (👩), a hidden zero-width joiner, and the fire engine emoji (🚒):</p><pre><code class="makeup elixir" translate="no"><span class="gp unselectable">iex&gt; </span><span class="nc">String</span><span class="o">.</span><span class="n">codepoints</span><span class="p" data-group-id="7618673239-1">(</span><span class="s">&quot;👩‍🚒&quot;</span><span class="p" data-group-id="7618673239-1">)</span><span class="w">
</span><span class="p" data-group-id="7618673239-2">[</span><span class="s">&quot;👩&quot;</span><span class="p">,</span><span class="w"> </span><span class="s">&quot;‍&quot;</span><span class="p">,</span><span class="w"> </span><span class="s">&quot;🚒&quot;</span><span class="p" data-group-id="7618673239-2">]</span><span class="w">
</span><span class="gp unselectable">iex&gt; </span><span class="nc">String</span><span class="o">.</span><span class="n">graphemes</span><span class="p" data-group-id="7618673239-3">(</span><span class="s">&quot;👩‍🚒&quot;</span><span class="p" data-group-id="7618673239-3">)</span><span class="w">
</span><span class="p" data-group-id="7618673239-4">[</span><span class="s">&quot;👩‍🚒&quot;</span><span class="p" data-group-id="7618673239-4">]</span></code></pre><p>However, Elixir is smart enough to know they are seen as a single character, and therefore the length is still one:</p><pre><code class="makeup elixir" translate="no"><span class="gp unselectable">iex&gt; </span><span class="nc">String</span><span class="o">.</span><span class="n">length</span><span class="p" data-group-id="5400242783-1">(</span><span class="s">&quot;👩‍🚒&quot;</span><span class="p" data-group-id="5400242783-1">)</span><span class="w">
</span><span class="mi">1</span></code></pre><blockquote><p>Note: if you can't see the emoji above in your terminal, you need to make sure your terminal supports emoji and that you are using a font that can render them.</p></blockquote><p>Although these rules may sound complicated, UTF-8 encoded documents are everywhere. This page itself is encoded in UTF-8. The encoding information is given to your browser which then knows how to render all of the bytes, characters, and graphemes accordingly.</p><p>If you want to see the exact bytes that a string would be stored in a file, a common trick is to concatenate the null byte <code class="inline">&lt;&lt;0&gt;&gt;</code> to it:</p><pre><code class="makeup elixir" translate="no"><span class="gp unselectable">iex&gt; </span><span class="s">&quot;hełło&quot;</span><span class="w"> </span><span class="o">&lt;&gt;</span><span class="w"> </span><span class="p" data-group-id="6739402106-1">&lt;&lt;</span><span class="mi">0</span><span class="p" data-group-id="6739402106-1">&gt;&gt;</span><span class="w">
</span><span class="p" data-group-id="6739402106-2">&lt;&lt;</span><span class="mi">104</span><span class="p">,</span><span class="w"> </span><span class="mi">101</span><span class="p">,</span><span class="w"> </span><span class="mi">197</span><span class="p">,</span><span class="w"> </span><span class="mi">130</span><span class="p">,</span><span class="w"> </span><span class="mi">197</span><span class="p">,</span><span class="w"> </span><span class="mi">130</span><span class="p">,</span><span class="w"> </span><span class="mi">111</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p" data-group-id="6739402106-2">&gt;&gt;</span></code></pre><p>Alternatively, you can view a string's binary representation by using <a href="IO.xhtml#inspect/2"><code class="inline">IO.inspect/2</code></a>:</p><pre><code class="makeup elixir" translate="no"><span class="gp unselectable">iex&gt; </span><span class="nc">IO</span><span class="o">.</span><span class="n">inspect</span><span class="p" data-group-id="1137934954-1">(</span><span class="s">&quot;hełło&quot;</span><span class="p">,</span><span class="w"> </span><span class="ss">binaries</span><span class="p">:</span><span class="w"> </span><span class="ss">:as_binaries</span><span class="p" data-group-id="1137934954-1">)</span><span class="w">
</span><span class="p" data-group-id="1137934954-2">&lt;&lt;</span><span class="mi">104</span><span class="p">,</span><span class="w"> </span><span class="mi">101</span><span class="p">,</span><span class="w"> </span><span class="mi">197</span><span class="p">,</span><span class="w"> </span><span class="mi">130</span><span class="p">,</span><span class="w"> </span><span class="mi">197</span><span class="p">,</span><span class="w"> </span><span class="mi">130</span><span class="p">,</span><span class="w"> </span><span class="mi">111</span><span class="p" data-group-id="1137934954-2">&gt;&gt;</span></code></pre><p>We are getting a little bit ahead of ourselves. Let's talk about bitstrings to learn about what exactly the <code class="inline">&lt;&lt;&gt;&gt;</code> constructor means.</p><h2 id="bitstrings">Bitstrings</h2><p>Although we have covered code points and UTF-8 encoding, we still need to go a bit deeper into how exactly we store the encoded bytes, and this is where we introduce the <strong>bitstring</strong>. A bitstring is a fundamental data type in Elixir, denoted with the <a href="Kernel.SpecialForms.xhtml#%3C%3C%3E%3E/1"><code class="inline">&lt;&lt;&gt;&gt;</code></a> syntax. <strong>A bitstring is a contiguous sequence of bits in memory.</strong></p><p>By default, 8 bits (i.e. 1 byte) is used to store each number in a bitstring, but you can manually specify the number of bits via a <code class="inline">::n</code> modifier to denote the size in <code class="inline">n</code> bits, or you can use the more verbose declaration <code class="inline">::size(n)</code>:</p><pre><code class="makeup elixir" translate="no"><span class="gp unselectable">iex&gt; </span><span class="p" data-group-id="0997008058-1">&lt;&lt;</span><span class="mi">42</span><span class="p" data-group-id="0997008058-1">&gt;&gt;</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="p" data-group-id="0997008058-2">&lt;&lt;</span><span class="mi">42</span><span class="o">::</span><span class="mi">8</span><span class="p" data-group-id="0997008058-2">&gt;&gt;</span><span class="w">
</span><span class="no">true</span><span class="w">
</span><span class="gp unselectable">iex&gt; </span><span class="p" data-group-id="0997008058-3">&lt;&lt;</span><span class="mi">3</span><span class="o">::</span><span class="mi">4</span><span class="p" data-group-id="0997008058-3">&gt;&gt;</span><span class="w">
</span><span class="p" data-group-id="0997008058-4">&lt;&lt;</span><span class="mi">3</span><span class="o">::</span><span class="n">size</span><span class="p" data-group-id="0997008058-5">(</span><span class="mi">4</span><span class="p" data-group-id="0997008058-5">)</span><span class="p" data-group-id="0997008058-4">&gt;&gt;</span></code></pre><p>For example, the decimal number <code class="inline">3</code> when represented with 4 bits in base 2 would be <code class="inline">0011</code>, which is equivalent to the values <code class="inline">0</code>, <code class="inline">0</code>, <code class="inline">1</code>, <code class="inline">1</code>, each stored using 1 bit:</p><pre><code class="makeup elixir" translate="no"><span class="gp unselectable">iex&gt; </span><span class="p" data-group-id="3587322854-1">&lt;&lt;</span><span class="mi">0</span><span class="o">::</span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="o">::</span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="mi">1</span><span class="o">::</span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="mi">1</span><span class="o">::</span><span class="mi">1</span><span class="p" data-group-id="3587322854-1">&gt;&gt;</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="p" data-group-id="3587322854-2">&lt;&lt;</span><span class="mi">3</span><span class="o">::</span><span class="mi">4</span><span class="p" data-group-id="3587322854-2">&gt;&gt;</span><span class="w">
</span><span class="no">true</span></code></pre><p>Any value that exceeds what can be stored by the number of bits provisioned is truncated:</p><pre><code class="makeup elixir" translate="no"><span class="gp unselectable">iex&gt; </span><span class="p" data-group-id="8245149680-1">&lt;&lt;</span><span class="mi">1</span><span class="p" data-group-id="8245149680-1">&gt;&gt;</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="p" data-group-id="8245149680-2">&lt;&lt;</span><span class="mi">257</span><span class="p" data-group-id="8245149680-2">&gt;&gt;</span><span class="w">
</span><span class="no">true</span></code></pre><p>Here, 257 in base 2 would be represented as <code class="inline">100000001</code>, but since we have reserved only 8 bits for its representation (by default), the left-most bit is ignored and the value becomes truncated to <code class="inline">00000001</code>, or simply <code class="inline">1</code> in decimal.</p><p>A complete reference for the bitstring constructor can be found in <a href="Kernel.SpecialForms.xhtml#%3C%3C%3E%3E/1"><code class="inline">&lt;&lt;&gt;&gt;</code></a>'s documentation.</p><h2 id="binaries">Binaries</h2><p><strong>A binary is a bitstring where the number of bits is divisible by 8.</strong> That means that every binary is a bitstring, but not every bitstring is a binary. We can use the <a href="Kernel.xhtml#is_bitstring/1"><code class="inline">is_bitstring/1</code></a> and <a href="Kernel.xhtml#is_binary/1"><code class="inline">is_binary/1</code></a> functions to demonstrate this.</p><pre><code class="makeup elixir" translate="no"><span class="gp unselectable">iex&gt; </span><span class="n">is_bitstring</span><span class="p" data-group-id="6322629116-1">(</span><span class="p" data-group-id="6322629116-2">&lt;&lt;</span><span class="mi">3</span><span class="o">::</span><span class="mi">4</span><span class="p" data-group-id="6322629116-2">&gt;&gt;</span><span class="p" data-group-id="6322629116-1">)</span><span class="w">
</span><span class="no">true</span><span class="w">
</span><span class="gp unselectable">iex&gt; </span><span class="n">is_binary</span><span class="p" data-group-id="6322629116-3">(</span><span class="p" data-group-id="6322629116-4">&lt;&lt;</span><span class="mi">3</span><span class="o">::</span><span class="mi">4</span><span class="p" data-group-id="6322629116-4">&gt;&gt;</span><span class="p" data-group-id="6322629116-3">)</span><span class="w">
</span><span class="no">false</span><span class="w">
</span><span class="gp unselectable">iex&gt; </span><span class="n">is_bitstring</span><span class="p" data-group-id="6322629116-5">(</span><span class="p" data-group-id="6322629116-6">&lt;&lt;</span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">255</span><span class="p">,</span><span class="w"> </span><span class="mi">42</span><span class="p" data-group-id="6322629116-6">&gt;&gt;</span><span class="p" data-group-id="6322629116-5">)</span><span class="w">
</span><span class="no">true</span><span class="w">
</span><span class="gp unselectable">iex&gt; </span><span class="n">is_binary</span><span class="p" data-group-id="6322629116-7">(</span><span class="p" data-group-id="6322629116-8">&lt;&lt;</span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">255</span><span class="p">,</span><span class="w"> </span><span class="mi">42</span><span class="p" data-group-id="6322629116-8">&gt;&gt;</span><span class="p" data-group-id="6322629116-7">)</span><span class="w">
</span><span class="no">true</span><span class="w">
</span><span class="gp unselectable">iex&gt; </span><span class="n">is_binary</span><span class="p" data-group-id="6322629116-9">(</span><span class="p" data-group-id="6322629116-10">&lt;&lt;</span><span class="mi">42</span><span class="o">::</span><span class="mi">16</span><span class="p" data-group-id="6322629116-10">&gt;&gt;</span><span class="p" data-group-id="6322629116-9">)</span><span class="w">
</span><span class="no">true</span></code></pre><p>We can pattern match on binaries / bitstrings:</p><pre><code class="makeup elixir" translate="no"><span class="gp unselectable">iex&gt; </span><span class="p" data-group-id="7485299749-1">&lt;&lt;</span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="n">x</span><span class="p" data-group-id="7485299749-1">&gt;&gt;</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p" data-group-id="7485299749-2">&lt;&lt;</span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="mi">2</span><span class="p" data-group-id="7485299749-2">&gt;&gt;</span><span class="w">
</span><span class="p" data-group-id="7485299749-3">&lt;&lt;</span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="mi">2</span><span class="p" data-group-id="7485299749-3">&gt;&gt;</span><span class="w">
</span><span class="gp unselectable">iex&gt; </span><span class="n">x</span><span class="w">
</span><span class="mi">2</span><span class="w">
</span><span class="gp unselectable">iex&gt; </span><span class="p" data-group-id="7485299749-4">&lt;&lt;</span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="n">x</span><span class="p" data-group-id="7485299749-4">&gt;&gt;</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p" data-group-id="7485299749-5">&lt;&lt;</span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="mi">2</span><span class="p">,</span><span class="w"> </span><span class="mi">3</span><span class="p" data-group-id="7485299749-5">&gt;&gt;</span><span class="w">
</span><span class="gt">** (MatchError) no match of right hand side value: &lt;&lt;0, 1, 2, 3&gt;&gt;</span></code></pre><p>Note that unless you explicitly use <code class="inline">::</code> modifiers, each entry in the binary pattern is expected to match a single byte (exactly 8 bits). If we want to match on a binary of unknown size, we can use the <code class="inline">binary</code> modifier at the end of the pattern:</p><pre><code class="makeup elixir" translate="no"><span class="gp unselectable">iex&gt; </span><span class="p" data-group-id="4600280095-1">&lt;&lt;</span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="n">x</span><span class="o">::</span><span class="n">binary</span><span class="p" data-group-id="4600280095-1">&gt;&gt;</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p" data-group-id="4600280095-2">&lt;&lt;</span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="mi">2</span><span class="p">,</span><span class="w"> </span><span class="mi">3</span><span class="p" data-group-id="4600280095-2">&gt;&gt;</span><span class="w">
</span><span class="p" data-group-id="4600280095-3">&lt;&lt;</span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="mi">2</span><span class="p">,</span><span class="w"> </span><span class="mi">3</span><span class="p" data-group-id="4600280095-3">&gt;&gt;</span><span class="w">
</span><span class="gp unselectable">iex&gt; </span><span class="n">x</span><span class="w">
</span><span class="p" data-group-id="4600280095-4">&lt;&lt;</span><span class="mi">2</span><span class="p">,</span><span class="w"> </span><span class="mi">3</span><span class="p" data-group-id="4600280095-4">&gt;&gt;</span></code></pre><p>There are a couple other modifiers that can be useful when doing pattern matches on binaries. The <code class="inline">binary-size(n)</code> modifier will match <code class="inline">n</code> bytes in a binary:</p><pre><code class="makeup elixir" translate="no"><span class="gp unselectable">iex&gt; </span><span class="p" data-group-id="0723866713-1">&lt;&lt;</span><span class="n">head</span><span class="o">::</span><span class="n">binary</span><span class="o">-</span><span class="n">size</span><span class="p" data-group-id="0723866713-2">(</span><span class="mi">2</span><span class="p" data-group-id="0723866713-2">)</span><span class="p">,</span><span class="w"> </span><span class="n">rest</span><span class="o">::</span><span class="n">binary</span><span class="p" data-group-id="0723866713-1">&gt;&gt;</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p" data-group-id="0723866713-3">&lt;&lt;</span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="mi">2</span><span class="p">,</span><span class="w"> </span><span class="mi">3</span><span class="p" data-group-id="0723866713-3">&gt;&gt;</span><span class="w">
</span><span class="p" data-group-id="0723866713-4">&lt;&lt;</span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="mi">2</span><span class="p">,</span><span class="w"> </span><span class="mi">3</span><span class="p" data-group-id="0723866713-4">&gt;&gt;</span><span class="w">
</span><span class="gp unselectable">iex&gt; </span><span class="n">head</span><span class="w">
</span><span class="p" data-group-id="0723866713-5">&lt;&lt;</span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">1</span><span class="p" data-group-id="0723866713-5">&gt;&gt;</span><span class="w">
</span><span class="gp unselectable">iex&gt; </span><span class="n">rest</span><span class="w">
</span><span class="p" data-group-id="0723866713-6">&lt;&lt;</span><span class="mi">2</span><span class="p">,</span><span class="w"> </span><span class="mi">3</span><span class="p" data-group-id="0723866713-6">&gt;&gt;</span></code></pre><p><strong>A string is a UTF-8 encoded binary</strong>, where the code point for each character is encoded using 1 to 4 bytes. Thus every string is a binary, but due to the UTF-8 standard encoding rules, not every binary is a valid string.</p><pre><code class="makeup elixir" translate="no"><span class="gp unselectable">iex&gt; </span><span class="n">is_binary</span><span class="p" data-group-id="6814615102-1">(</span><span class="s">&quot;hello&quot;</span><span class="p" data-group-id="6814615102-1">)</span><span class="w">
</span><span class="no">true</span><span class="w">
</span><span class="gp unselectable">iex&gt; </span><span class="n">is_binary</span><span class="p" data-group-id="6814615102-2">(</span><span class="p" data-group-id="6814615102-3">&lt;&lt;</span><span class="mi">239</span><span class="p">,</span><span class="w"> </span><span class="mi">191</span><span class="p">,</span><span class="w"> </span><span class="mi">19</span><span class="p" data-group-id="6814615102-3">&gt;&gt;</span><span class="p" data-group-id="6814615102-2">)</span><span class="w">
</span><span class="no">true</span><span class="w">
</span><span class="gp unselectable">iex&gt; </span><span class="nc">String</span><span class="o">.</span><span class="n">valid?</span><span class="p" data-group-id="6814615102-4">(</span><span class="p" data-group-id="6814615102-5">&lt;&lt;</span><span class="mi">239</span><span class="p">,</span><span class="w"> </span><span class="mi">191</span><span class="p">,</span><span class="w"> </span><span class="mi">19</span><span class="p" data-group-id="6814615102-5">&gt;&gt;</span><span class="p" data-group-id="6814615102-4">)</span><span class="w">
</span><span class="no">false</span></code></pre><p>The string concatenation operator <a href="Kernel.xhtml#%3C%3E/2"><code class="inline">&lt;&gt;</code></a> is actually a binary concatenation operator:</p><pre><code class="makeup elixir" translate="no"><span class="gp unselectable">iex&gt; </span><span class="s">&quot;a&quot;</span><span class="w"> </span><span class="o">&lt;&gt;</span><span class="w"> </span><span class="s">&quot;ha&quot;</span><span class="w">
</span><span class="s">&quot;aha&quot;</span><span class="w">
</span><span class="gp unselectable">iex&gt; </span><span class="p" data-group-id="9255476740-1">&lt;&lt;</span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">1</span><span class="p" data-group-id="9255476740-1">&gt;&gt;</span><span class="w"> </span><span class="o">&lt;&gt;</span><span class="w"> </span><span class="p" data-group-id="9255476740-2">&lt;&lt;</span><span class="mi">2</span><span class="p">,</span><span class="w"> </span><span class="mi">3</span><span class="p" data-group-id="9255476740-2">&gt;&gt;</span><span class="w">
</span><span class="p" data-group-id="9255476740-3">&lt;&lt;</span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="mi">2</span><span class="p">,</span><span class="w"> </span><span class="mi">3</span><span class="p" data-group-id="9255476740-3">&gt;&gt;</span></code></pre><p>Given that strings are binaries, we can also pattern match on strings:</p><pre><code class="makeup elixir" translate="no"><span class="gp unselectable">iex&gt; </span><span class="p" data-group-id="5385087899-1">&lt;&lt;</span><span class="n">head</span><span class="p">,</span><span class="w"> </span><span class="n">rest</span><span class="o">::</span><span class="n">binary</span><span class="p" data-group-id="5385087899-1">&gt;&gt;</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s">&quot;banana&quot;</span><span class="w">
</span><span class="s">&quot;banana&quot;</span><span class="w">
</span><span class="gp unselectable">iex&gt; </span><span class="n">head</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="sc">?b</span><span class="w">
</span><span class="no">true</span><span class="w">
</span><span class="gp unselectable">iex&gt; </span><span class="n">rest</span><span class="w">
</span><span class="s">&quot;anana&quot;</span></code></pre><p>However, remember that binary pattern matching works on <em>bytes</em>, so matching on the string like &quot;über&quot; with multibyte characters won't match on the <em>character</em>, it will match on the <em>first byte of that character</em>:</p><pre><code class="makeup elixir" translate="no"><span class="gp unselectable">iex&gt; </span><span class="s">&quot;ü&quot;</span><span class="w"> </span><span class="o">&lt;&gt;</span><span class="w"> </span><span class="p" data-group-id="0903881757-1">&lt;&lt;</span><span class="mi">0</span><span class="p" data-group-id="0903881757-1">&gt;&gt;</span><span class="w">
</span><span class="p" data-group-id="0903881757-2">&lt;&lt;</span><span class="mi">195</span><span class="p">,</span><span class="w"> </span><span class="mi">188</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p" data-group-id="0903881757-2">&gt;&gt;</span><span class="w">
</span><span class="gp unselectable">iex&gt; </span><span class="p" data-group-id="0903881757-3">&lt;&lt;</span><span class="n">x</span><span class="p">,</span><span class="w"> </span><span class="n">rest</span><span class="o">::</span><span class="n">binary</span><span class="p" data-group-id="0903881757-3">&gt;&gt;</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s">&quot;über&quot;</span><span class="w">
</span><span class="s">&quot;über&quot;</span><span class="w">
</span><span class="gp unselectable">iex&gt; </span><span class="n">x</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="sc">?ü</span><span class="w">
</span><span class="no">false</span><span class="w">
</span><span class="gp unselectable">iex&gt; </span><span class="n">rest</span><span class="w">
</span><span class="p" data-group-id="0903881757-4">&lt;&lt;</span><span class="mi">188</span><span class="p">,</span><span class="w"> </span><span class="mi">98</span><span class="p">,</span><span class="w"> </span><span class="mi">101</span><span class="p">,</span><span class="w"> </span><span class="mi">114</span><span class="p" data-group-id="0903881757-4">&gt;&gt;</span></code></pre><p>Above, <code class="inline">x</code> matched on only the first byte of the multibyte <code class="inline">ü</code> character.</p><p>Therefore, when pattern matching on strings, it is important to use the <code class="inline">utf8</code> modifier:</p><pre><code class="makeup elixir" translate="no"><span class="gp unselectable">iex&gt; </span><span class="p" data-group-id="9433221290-1">&lt;&lt;</span><span class="n">x</span><span class="o">::</span><span class="n">utf8</span><span class="p">,</span><span class="w"> </span><span class="n">rest</span><span class="o">::</span><span class="n">binary</span><span class="p" data-group-id="9433221290-1">&gt;&gt;</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s">&quot;über&quot;</span><span class="w">
</span><span class="s">&quot;über&quot;</span><span class="w">
</span><span class="gp unselectable">iex&gt; </span><span class="n">x</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="sc">?ü</span><span class="w">
</span><span class="no">true</span><span class="w">
</span><span class="gp unselectable">iex&gt; </span><span class="n">rest</span><span class="w">
</span><span class="s">&quot;ber&quot;</span></code></pre><h2 id="charlists">Charlists</h2><p>Our tour of our bitstrings, binaries, and strings is nearly complete, but we have one more data type to explain: the charlist.</p><p><strong>A charlist is a list of integers where all the integers are valid code points.</strong> In practice, you will not come across them often, only in specific scenarios such as interfacing with older Erlang libraries that do not accept binaries as arguments.</p><pre><code class="makeup elixir" translate="no"><span class="gp unselectable">iex&gt; </span><span class="s">~c&quot;hello&quot;</span><span class="w">
</span><span class="s">~c&quot;hello&quot;</span><span class="w">
</span><span class="gp unselectable">iex&gt; </span><span class="p" data-group-id="5524211868-1">[</span><span class="sc">?h</span><span class="p">,</span><span class="w"> </span><span class="sc">?e</span><span class="p">,</span><span class="w"> </span><span class="sc">?l</span><span class="p">,</span><span class="w"> </span><span class="sc">?l</span><span class="p">,</span><span class="w"> </span><span class="sc">?o</span><span class="p" data-group-id="5524211868-1">]</span><span class="w">
</span><span class="s">~c&quot;hello&quot;</span></code></pre><p>The <a href="Kernel.xhtml#sigil_c/2"><code class="inline">~c</code></a> sigil (we'll cover sigils later in the <a href="sigils.xhtml">&quot;Sigils&quot;</a> chapter) indicates the fact that we are dealing with a charlist and not a regular string.</p><p>Instead of containing bytes, a charlist contains integer code points. However, the list is only printed as a sigil if all code points are within the ASCII range:</p><pre><code class="makeup elixir" translate="no"><span class="gp unselectable">iex&gt; </span><span class="s">~c&quot;hełło&quot;</span><span class="w">
</span><span class="p" data-group-id="6082042578-1">[</span><span class="mi">104</span><span class="p">,</span><span class="w"> </span><span class="mi">101</span><span class="p">,</span><span class="w"> </span><span class="mi">322</span><span class="p">,</span><span class="w"> </span><span class="mi">322</span><span class="p">,</span><span class="w"> </span><span class="mi">111</span><span class="p" data-group-id="6082042578-1">]</span><span class="w">
</span><span class="gp unselectable">iex&gt; </span><span class="n">is_list</span><span class="p" data-group-id="6082042578-2">(</span><span class="s">~c&quot;hełło&quot;</span><span class="p" data-group-id="6082042578-2">)</span><span class="w">
</span><span class="no">true</span></code></pre><p>This is done to ease interoperability with Erlang, even though it may lead to some surprising behavior. For example, if you are storing a list of integers that happen to range between 0 and 127, by default IEx will interpret this as a charlist and it will display the corresponding ASCII characters.</p><pre><code class="makeup elixir" translate="no"><span class="gp unselectable">iex&gt; </span><span class="n">heartbeats_per_minute</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p" data-group-id="6751600814-1">[</span><span class="mi">99</span><span class="p">,</span><span class="w"> </span><span class="mi">97</span><span class="p">,</span><span class="w"> </span><span class="mi">116</span><span class="p" data-group-id="6751600814-1">]</span><span class="w">
</span><span class="s">~c&quot;cat&quot;</span></code></pre><p>You can always force charlists to be printed in their list representation by calling the <a href="Kernel.xhtml#inspect/2"><code class="inline">inspect/2</code></a> function:</p><pre><code class="makeup elixir" translate="no"><span class="gp unselectable">iex&gt; </span><span class="n">inspect</span><span class="p" data-group-id="7090926891-1">(</span><span class="n">heartbeats_per_minute</span><span class="p">,</span><span class="w"> </span><span class="ss">charlists</span><span class="p">:</span><span class="w"> </span><span class="ss">:as_list</span><span class="p" data-group-id="7090926891-1">)</span><span class="w">
</span><span class="s">&quot;[99, 97, 116]&quot;</span></code></pre><p>Furthermore, you can convert a charlist to a string and back by using the <a href="Kernel.xhtml#to_string/1"><code class="inline">to_string/1</code></a> and <a href="Kernel.xhtml#to_charlist/1"><code class="inline">to_charlist/1</code></a>:</p><pre><code class="makeup elixir" translate="no"><span class="gp unselectable">iex&gt; </span><span class="n">to_charlist</span><span class="p" data-group-id="3853779743-1">(</span><span class="s">&quot;hełło&quot;</span><span class="p" data-group-id="3853779743-1">)</span><span class="w">
</span><span class="p" data-group-id="3853779743-2">[</span><span class="mi">104</span><span class="p">,</span><span class="w"> </span><span class="mi">101</span><span class="p">,</span><span class="w"> </span><span class="mi">322</span><span class="p">,</span><span class="w"> </span><span class="mi">322</span><span class="p">,</span><span class="w"> </span><span class="mi">111</span><span class="p" data-group-id="3853779743-2">]</span><span class="w">
</span><span class="gp unselectable">iex&gt; </span><span class="n">to_string</span><span class="p" data-group-id="3853779743-3">(</span><span class="s">~c&quot;hełło&quot;</span><span class="p" data-group-id="3853779743-3">)</span><span class="w">
</span><span class="s">&quot;hełło&quot;</span><span class="w">
</span><span class="gp unselectable">iex&gt; </span><span class="n">to_string</span><span class="p" data-group-id="3853779743-4">(</span><span class="ss">:hello</span><span class="p" data-group-id="3853779743-4">)</span><span class="w">
</span><span class="s">&quot;hello&quot;</span><span class="w">
</span><span class="gp unselectable">iex&gt; </span><span class="n">to_string</span><span class="p" data-group-id="3853779743-5">(</span><span class="mi">1</span><span class="p" data-group-id="3853779743-5">)</span><span class="w">
</span><span class="s">&quot;1&quot;</span></code></pre><p>The functions above are polymorphic, in other words, they accept many shapes: not only do they convert charlists to strings (and vice-versa), they can also convert integers, atoms, and so on.</p><p>String (binary) concatenation uses the <a href="Kernel.xhtml#%3C%3E/2"><code class="inline">&lt;&gt;</code></a> operator but charlists, being lists, use the list concatenation operator <a href="Kernel.xhtml#++/2"><code class="inline">++</code></a>:</p><pre><code class="makeup elixir" translate="no"><span class="gp unselectable">iex&gt; </span><span class="s">~c&quot;this &quot;</span><span class="w"> </span><span class="o">&lt;&gt;</span><span class="w"> </span><span class="s">~c&quot;fails&quot;</span><span class="w">
</span><span class="gt">** (ArgumentError) expected binary argument in &lt;&gt; operator but got: ~c&quot;this &quot;
    (elixir) lib/kernel.ex:1821: Kernel.wrap_concatenation/3
    (elixir) lib/kernel.ex:1808: Kernel.extract_concatenations/2
    (elixir) expanding macro: Kernel.&lt;&gt;/2
    iex:1: (file)</span><span class="w">
</span><span class="gp unselectable">iex&gt; </span><span class="s">~c&quot;this &quot;</span><span class="w"> </span><span class="o">++</span><span class="w"> </span><span class="s">~c&quot;works&quot;</span><span class="w">
</span><span class="s">~c&quot;this works&quot;</span><span class="w">
</span><span class="gp unselectable">iex&gt; </span><span class="s">&quot;he&quot;</span><span class="w"> </span><span class="o">++</span><span class="w"> </span><span class="s">&quot;llo&quot;</span><span class="w">
</span><span class="gt">** (ArgumentError) argument error
    :erlang.++(&quot;he&quot;, &quot;llo&quot;)</span><span class="w">
</span><span class="gp unselectable">iex&gt; </span><span class="s">&quot;he&quot;</span><span class="w"> </span><span class="o">&lt;&gt;</span><span class="w"> </span><span class="s">&quot;llo&quot;</span><span class="w">
</span><span class="s">&quot;hello&quot;</span></code></pre><p>With binaries, strings, and charlists out of the way, it is time to talk about key-value data structures.</p>

  </body>
</html>
