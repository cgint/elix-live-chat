<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"
      xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>String - Elixir v1.18.4</title>
    <meta name="generator" content="ExDoc v0.38.2" />
    <link type="text/css" rel="stylesheet" href="dist/epub-elixir-FNUUKFP7.css" />
    <script src="dist/epub-4WIP524F.js"></script>

  </head>
  <body class="content-inner">

    <h1 id="content">
String 
    </h1>


      <section id="moduledoc" class="docstring">
<p>Strings in Elixir are UTF-8 encoded binaries.</p><p>Strings in Elixir are a sequence of Unicode characters,
typically written between double quoted strings, such
as <code class="inline">&quot;hello&quot;</code> and <code class="inline">&quot;héllò&quot;</code>.</p><p>In case a string must have a double-quote in itself,
the double quotes must be escaped with a backslash,
for example: <code class="inline">&quot;this is a string with \&quot;double quotes\&quot;&quot;</code>.</p><p>You can concatenate two strings with the <a href="Kernel.xhtml#%3C%3E/2"><code class="inline">&lt;&gt;/2</code></a> operator:</p><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="s">&quot;hello&quot;</samp><samp class="w"> </samp><samp class="o">&lt;&gt;</samp><samp class="w"> </samp><samp class="s">&quot; &quot;</samp><samp class="w"> </samp><samp class="o">&lt;&gt;</samp><samp class="w"> </samp><samp class="s">&quot;world&quot;</samp><samp class="w">
</samp><samp class="s">&quot;hello world&quot;</samp></code></pre><p>The functions in this module act according to
<a href="http://www.unicode.org/versions/Unicode16.0.0/">The Unicode Standard, Version 16.0.0</a>.</p><h2 id="module-interpolation">Interpolation</h2><p>Strings in Elixir also support interpolation. This allows
you to place some value in the middle of a string by using
the <code class="inline">#{}</code> syntax:</p><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="n">name</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="s">&quot;joe&quot;</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="s">&quot;hello </samp><samp class="si" data-group-id="5209309600-1">#{</samp><samp class="n">name</samp><samp class="si" data-group-id="5209309600-1">}</samp><samp class="s">&quot;</samp><samp class="w">
</samp><samp class="s">&quot;hello joe&quot;</samp></code></pre><p>Any Elixir expression is valid inside the interpolation.
If a string is given, the string is interpolated as is.
If any other value is given, Elixir will attempt to convert
it to a string using the <a href="String.Chars.xhtml"><code class="inline">String.Chars</code></a> protocol. This
allows, for example, to output an integer from the interpolation:</p><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="s">&quot;2 + 2 = </samp><samp class="si" data-group-id="6988959631-1">#{</samp><samp class="mi">2</samp><samp class="w"> </samp><samp class="o">+</samp><samp class="w"> </samp><samp class="mi">2</samp><samp class="si" data-group-id="6988959631-1">}</samp><samp class="s">&quot;</samp><samp class="w">
</samp><samp class="s">&quot;2 + 2 = 4&quot;</samp></code></pre><p>In case the value you want to interpolate cannot be
converted to a string, because it doesn't have a human
textual representation, a protocol error will be raised.</p><h2 id="module-escape-characters">Escape characters</h2><p>Besides allowing double-quotes to be escaped with a backslash,
strings also support the following escape characters:</p><ul><li><code class="inline">\0</code> - Null byte</li><li><code class="inline">\a</code> - Bell</li><li><code class="inline">\b</code> - Backspace</li><li><code class="inline">\t</code> - Horizontal tab</li><li><code class="inline">\n</code> - Line feed (New lines)</li><li><code class="inline">\v</code> - Vertical tab</li><li><code class="inline">\f</code> - Form feed</li><li><code class="inline">\r</code> - Carriage return</li><li><code class="inline">\e</code> - Command Escape</li><li><code class="inline">\s</code> - Space</li><li><code class="inline">\#</code> - Returns the <code class="inline">#</code> character itself, skipping interpolation</li><li><code class="inline">\\</code> - Single backslash</li><li><code class="inline">\xNN</code> - A byte represented by the hexadecimal <code class="inline">NN</code></li><li><code class="inline">\uNNNN</code> - A Unicode code point represented by <code class="inline">NNNN</code></li><li><code class="inline">\u{NNNNNN}</code> - A Unicode code point represented by <code class="inline">NNNNNN</code></li></ul><p>Note it is generally not advised to use <code class="inline">\xNN</code> in Elixir
strings, as introducing an invalid byte sequence would
make the string invalid. If you have to introduce a
character by its hexadecimal representation, it is best
to work with Unicode code points, such as <code class="inline">\uNNNN</code>. In fact,
understanding Unicode code points can be essential when doing
low-level manipulations of string, so let's explore them in
detail next.</p><h2 id="module-unicode-and-code-points">Unicode and code points</h2><p>In order to facilitate meaningful communication between computers
across multiple languages, a standard is required so that the ones
and zeros on one machine mean the same thing when they are transmitted
to another. The Unicode Standard acts as an official registry of
virtually all the characters we know: this includes characters from
classical and historical texts, emoji, and formatting and control
characters as well.</p><p>Unicode organizes all of the characters in its repertoire into code
charts, and each character is given a unique numerical index. This
numerical index is known as a Code Point.</p><p>In Elixir you can use a <code class="inline">?</code> in front of a character literal to reveal
its code point:</p><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="sc">?a</samp><samp class="w">
</samp><samp class="mi">97</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="sc">?ł</samp><samp class="w">
</samp><samp class="mi">322</samp></code></pre><p>Note that most Unicode code charts will refer to a code point by its
hexadecimal (hex) representation, e.g. <code class="inline">97</code> translates to <code class="inline">0061</code> in hex,
and we can represent any Unicode character in an Elixir string by
using the <code class="inline">\u</code> escape character followed by its code point number:</p><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="s">&quot;</samp><samp class="se">\u0061</samp><samp class="s">&quot;</samp><samp class="w"> </samp><samp class="o">===</samp><samp class="w"> </samp><samp class="s">&quot;a&quot;</samp><samp class="w">
</samp><samp class="no">true</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="mh">0x0061</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="mi">97</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="sc">?a</samp><samp class="w">
</samp><samp class="mi">97</samp></code></pre><p>The hex representation will also help you look up information about a
code point, e.g. <a href="https://codepoints.net/U+0061">https://codepoints.net/U+0061</a>
has a data sheet all about the lower case <code class="inline">a</code>, a.k.a. code point 97.
Remember you can get the hex presentation of a number by calling
<a href="Integer.xhtml#to_string/2"><code class="inline">Integer.to_string/2</code></a>:</p><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Integer</samp><samp class="o">.</samp><samp class="n">to_string</samp><samp class="p" data-group-id="9135723746-1">(</samp><samp class="sc">?a</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">16</samp><samp class="p" data-group-id="9135723746-1">)</samp><samp class="w">
</samp><samp class="s">&quot;61&quot;</samp></code></pre><h2 id="module-utf-8-encoded-and-encodings">UTF-8 encoded and encodings</h2><p>Now that we understand what the Unicode standard is and what code points
are, we can finally talk about encodings. Whereas the code point is <strong>what</strong>
we store, an encoding deals with <strong>how</strong> we store it: encoding is an
implementation. In other words, we need a mechanism to convert the code
point numbers into bytes so they can be stored in memory, written to disk, and such.</p><p>Elixir uses UTF-8 to encode its strings, which means that code points are
encoded as a series of 8-bit bytes. UTF-8 is a <strong>variable width</strong> character
encoding that uses one to four bytes to store each code point. It is capable
of encoding all valid Unicode code points. Let's see an example:</p><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="n">string</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="s">&quot;héllo&quot;</samp><samp class="w">
</samp><samp class="s">&quot;héllo&quot;</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">length</samp><samp class="p" data-group-id="6489660012-1">(</samp><samp class="n">string</samp><samp class="p" data-group-id="6489660012-1">)</samp><samp class="w">
</samp><samp class="mi">5</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="n">byte_size</samp><samp class="p" data-group-id="6489660012-2">(</samp><samp class="n">string</samp><samp class="p" data-group-id="6489660012-2">)</samp><samp class="w">
</samp><samp class="mi">6</samp></code></pre><p>Although the string above has 5 characters, it uses 6 bytes, as two bytes
are used to represent the character <code class="inline">é</code>.</p><h2 id="module-grapheme-clusters">Grapheme clusters</h2><p>This module also works with the concept of grapheme cluster
(from now on referenced as graphemes). Graphemes can consist
of multiple code points that may be perceived as a single character
by readers. For example, &quot;é&quot; can be represented either as a single
&quot;e with acute&quot; code point, as seen above in the string <code class="inline">&quot;héllo&quot;</code>,
or as the letter &quot;e&quot; followed by a &quot;combining acute accent&quot;
(two code points):</p><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="n">string</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="s">&quot;</samp><samp class="se">\u0065</samp><samp class="se">\u0301</samp><samp class="s">&quot;</samp><samp class="w">
</samp><samp class="s">&quot;é&quot;</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="n">byte_size</samp><samp class="p" data-group-id="4394772786-1">(</samp><samp class="n">string</samp><samp class="p" data-group-id="4394772786-1">)</samp><samp class="w">
</samp><samp class="mi">3</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">length</samp><samp class="p" data-group-id="4394772786-2">(</samp><samp class="n">string</samp><samp class="p" data-group-id="4394772786-2">)</samp><samp class="w">
</samp><samp class="mi">1</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">codepoints</samp><samp class="p" data-group-id="4394772786-3">(</samp><samp class="n">string</samp><samp class="p" data-group-id="4394772786-3">)</samp><samp class="w">
</samp><samp class="p" data-group-id="4394772786-4">[</samp><samp class="s">&quot;e&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;́&quot;</samp><samp class="p" data-group-id="4394772786-4">]</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">graphemes</samp><samp class="p" data-group-id="4394772786-5">(</samp><samp class="n">string</samp><samp class="p" data-group-id="4394772786-5">)</samp><samp class="w">
</samp><samp class="p" data-group-id="4394772786-6">[</samp><samp class="s">&quot;é&quot;</samp><samp class="p" data-group-id="4394772786-6">]</samp></code></pre><p>Although it looks visually the same as before, the example above
is made of two characters, it is perceived by users as one.</p><p>Graphemes can also be two characters that are interpreted as one
by some languages. For example, some languages may consider &quot;ch&quot;
as a single character. However, since this information depends on
the locale, it is not taken into account by this module.</p><p>In general, the functions in this module rely on the Unicode
Standard, but do not contain any of the locale specific behavior.
More information about graphemes can be found in the <a href="https://www.unicode.org/reports/tr29/">Unicode
Standard Annex #29</a>.</p><p>For converting a binary to a different encoding and for Unicode
normalization mechanisms, see Erlang's <code class="inline">:unicode</code> module.</p><h2 id="module-string-and-binary-operations">String and binary operations</h2><p>To act according to the Unicode Standard, many functions
in this module run in linear time, as they need to traverse
the whole string considering the proper Unicode code points.</p><p>For example, <a href="#length/1"><code class="inline">String.length/1</code></a> will take longer as
the input grows. On the other hand, <a href="Kernel.xhtml#byte_size/1"><code class="inline">Kernel.byte_size/1</code></a> always runs
in constant time (i.e. regardless of the input size).</p><p>This means often there are performance costs in using the
functions in this module, compared to the more low-level
operations that work directly with binaries:</p><ul><li><a href="Kernel.xhtml#binary_part/3"><code class="inline">Kernel.binary_part/3</code></a> - retrieves part of the binary</li><li><a href="Kernel.xhtml#bit_size/1"><code class="inline">Kernel.bit_size/1</code></a> and <a href="Kernel.xhtml#byte_size/1"><code class="inline">Kernel.byte_size/1</code></a> - size related functions</li><li><a href="Kernel.xhtml#is_bitstring/1"><code class="inline">Kernel.is_bitstring/1</code></a> and <a href="Kernel.xhtml#is_binary/1"><code class="inline">Kernel.is_binary/1</code></a> - type-check function</li><li>Plus a number of functions for working with binaries (bytes)
in the <a href="https://www.erlang.org/doc/apps/stdlib/binary.html"><code class="inline">:binary</code> module</a></li></ul><p>A <code class="inline">utf8</code> modifier is also available inside the binary syntax <code class="inline">&lt;&lt;&gt;&gt;</code>.
It can be used to match code points out of a binary/string:</p><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="p" data-group-id="9313862228-1">&lt;&lt;</samp><samp class="n">eacute</samp><samp class="o">::</samp><samp class="n">utf8</samp><samp class="p" data-group-id="9313862228-1">&gt;&gt;</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="s">&quot;é&quot;</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="n">eacute</samp><samp class="w">
</samp><samp class="mi">233</samp></code></pre><p>See the <a href="patterns-and-guards.xhtml"><em>Patterns and Guards</em> guide</a> and the documentation for
<a href="Kernel.SpecialForms.xhtml#%3C%3C%3E%3E/1"><code class="inline">&lt;&lt;&gt;&gt;</code></a> for more information on binary pattern matching.</p><p>You can also fully convert a string into a list of integer code points,
known as &quot;charlists&quot; in Elixir, by calling <a href="#to_charlist/1"><code class="inline">String.to_charlist/1</code></a>:</p><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">to_charlist</samp><samp class="p" data-group-id="0876761934-1">(</samp><samp class="s">&quot;héllo&quot;</samp><samp class="p" data-group-id="0876761934-1">)</samp><samp class="w">
</samp><samp class="p" data-group-id="0876761934-2">[</samp><samp class="mi">104</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">233</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">108</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">108</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">111</samp><samp class="p" data-group-id="0876761934-2">]</samp></code></pre><p>If you would rather see the underlying bytes of a string, instead of
its codepoints, a common trick is to concatenate the null byte <code class="inline">&lt;&lt;0&gt;&gt;</code>
to it:</p><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="s">&quot;héllo&quot;</samp><samp class="w"> </samp><samp class="o">&lt;&gt;</samp><samp class="w"> </samp><samp class="p" data-group-id="9153055628-1">&lt;&lt;</samp><samp class="mi">0</samp><samp class="p" data-group-id="9153055628-1">&gt;&gt;</samp><samp class="w">
</samp><samp class="p" data-group-id="9153055628-2">&lt;&lt;</samp><samp class="mi">104</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">195</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">169</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">108</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">108</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">111</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">0</samp><samp class="p" data-group-id="9153055628-2">&gt;&gt;</samp></code></pre><p>Alternatively, you can view a string's binary representation by
passing an option to <a href="IO.xhtml#inspect/2"><code class="inline">IO.inspect/2</code></a>:</p><pre><code class="makeup elixir" translate="no"><samp class="nc">IO</samp><samp class="o">.</samp><samp class="n">inspect</samp><samp class="p" data-group-id="6498667223-1">(</samp><samp class="s">&quot;héllo&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">binaries</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="ss">:as_binaries</samp><samp class="p" data-group-id="6498667223-1">)</samp><samp class="w">
</samp><samp class="c1">#=&gt; &lt;&lt;104, 195, 169, 108, 108, 111&gt;&gt;</samp></code></pre><h2 id="module-self-synchronization">Self-synchronization</h2><p>The UTF-8 encoding is self-synchronizing. This means that
if malformed data (i.e., data that is not possible according
to the definition of the encoding) is encountered, only one
code point needs to be rejected.</p><p>This module relies on this behavior to ignore such invalid
characters. For example, <a href="#length/1"><code class="inline">length/1</code></a> will return
a correct result even if an invalid code point is fed into it.</p><p>In other words, this module expects invalid data to be detected
elsewhere, usually when retrieving data from the external source.
For example, a driver that reads strings from a database will be
responsible to check the validity of the encoding. <a href="#chunk/2"><code class="inline">String.chunk/2</code></a>
can be used for breaking a string into valid and invalid parts.</p><h2 id="module-compile-binary-patterns">Compile binary patterns</h2><p>Many functions in this module work with patterns. For example,
<a href="#split/3"><code class="inline">String.split/3</code></a> can split a string into multiple strings given
a pattern. This pattern can be a string, a list of strings or
a compiled pattern:</p><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">split</samp><samp class="p" data-group-id="2292210902-1">(</samp><samp class="s">&quot;foo bar&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot; &quot;</samp><samp class="p" data-group-id="2292210902-1">)</samp><samp class="w">
</samp><samp class="p" data-group-id="2292210902-2">[</samp><samp class="s">&quot;foo&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;bar&quot;</samp><samp class="p" data-group-id="2292210902-2">]</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">split</samp><samp class="p" data-group-id="2292210902-3">(</samp><samp class="s">&quot;foo bar!&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="2292210902-4">[</samp><samp class="s">&quot; &quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;!&quot;</samp><samp class="p" data-group-id="2292210902-4">]</samp><samp class="p" data-group-id="2292210902-3">)</samp><samp class="w">
</samp><samp class="p" data-group-id="2292210902-5">[</samp><samp class="s">&quot;foo&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;bar&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;&quot;</samp><samp class="p" data-group-id="2292210902-5">]</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="n">pattern</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="nc">:binary</samp><samp class="o">.</samp><samp class="n">compile_pattern</samp><samp class="p" data-group-id="2292210902-6">(</samp><samp class="p" data-group-id="2292210902-7">[</samp><samp class="s">&quot; &quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;!&quot;</samp><samp class="p" data-group-id="2292210902-7">]</samp><samp class="p" data-group-id="2292210902-6">)</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">split</samp><samp class="p" data-group-id="2292210902-8">(</samp><samp class="s">&quot;foo bar!&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">pattern</samp><samp class="p" data-group-id="2292210902-8">)</samp><samp class="w">
</samp><samp class="p" data-group-id="2292210902-9">[</samp><samp class="s">&quot;foo&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;bar&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;&quot;</samp><samp class="p" data-group-id="2292210902-9">]</samp></code></pre><p>The compiled pattern is useful when the same match will
be done over and over again. Note though that the compiled
pattern cannot be stored in a module attribute as the pattern
is generated at runtime and does not survive compile time.</p>
      </section>


      <section id="summary" class="details-list">
        <h1 class="section-heading">Summary</h1>
<div class="summary-types summary">
  <h2>
    <a href="#types">Types</a>
  </h2>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#t:codepoint/0" data-no-tooltip="" translate="no">codepoint()</a>

      </div>

        <div class="summary-synopsis"><p>A single Unicode code point encoded in UTF-8. It may be one or more bytes.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#t:grapheme/0" data-no-tooltip="" translate="no">grapheme()</a>

      </div>

        <div class="summary-synopsis"><p>Multiple code points that may be perceived as a single character by readers</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#t:pattern/0" data-no-tooltip="" translate="no">pattern()</a>

      </div>

        <div class="summary-synopsis"><p>Pattern used in functions like <a><code class="inline">replace/4</code></a> and <a><code class="inline">split/3</code></a>.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#t:t/0" data-no-tooltip="" translate="no">t()</a>

      </div>

        <div class="summary-synopsis"><p>A UTF-8 encoded binary.</p></div>

    </div>

</div>
<div class="summary-functions summary">
  <h2>
    <a href="#functions">Functions</a>
  </h2>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#at/2" data-no-tooltip="" translate="no">at(string, position)</a>

      </div>

        <div class="summary-synopsis"><p>Returns the grapheme at the <code class="inline">position</code> of the given UTF-8 <code class="inline">string</code>.
If <code class="inline">position</code> is greater than <code class="inline">string</code> length, then it returns <code class="inline">nil</code>.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#bag_distance/2" data-no-tooltip="" translate="no">bag_distance(string1, string2)</a>

      </div>

        <div class="summary-synopsis"><p>Computes the bag distance between two strings.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#byte_slice/3" data-no-tooltip="" translate="no">byte_slice(string, start_bytes, size_bytes)</a>

      </div>

        <div class="summary-synopsis"><p>Returns a substring starting at (or after) <code class="inline">start_bytes</code> and of at most
the given <code class="inline">size_bytes</code>.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#capitalize/2" data-no-tooltip="" translate="no">capitalize(string, mode \\ :default)</a>

      </div>

        <div class="summary-synopsis"><p>Converts the first character in the given string to
uppercase and the remainder to lowercase according to <code class="inline">mode</code>.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#chunk/2" data-no-tooltip="" translate="no">chunk(string, trait)</a>

      </div>

        <div class="summary-synopsis"><p>Splits the string into chunks of characters that share a common trait.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#codepoints/1" data-no-tooltip="" translate="no">codepoints(string)</a>

      </div>

        <div class="summary-synopsis"><p>Returns a list of code points encoded as strings.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#contains?/2" data-no-tooltip="" translate="no">contains?(string, contents)</a>

      </div>

        <div class="summary-synopsis"><p>Searches if <code class="inline">string</code> contains any of the given <code class="inline">contents</code>.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#downcase/2" data-no-tooltip="" translate="no">downcase(string, mode \\ :default)</a>

      </div>

        <div class="summary-synopsis"><p>Converts all characters in the given string to lowercase according to <code class="inline">mode</code>.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#duplicate/2" data-no-tooltip="" translate="no">duplicate(subject, n)</a>

      </div>

        <div class="summary-synopsis"><p>Returns a string <code class="inline">subject</code> repeated <code class="inline">n</code> times.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#ends_with?/2" data-no-tooltip="" translate="no">ends_with?(string, suffix)</a>

      </div>

        <div class="summary-synopsis"><p>Returns <code class="inline">true</code> if <code class="inline">string</code> ends with any of the suffixes given.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#equivalent?/2" data-no-tooltip="" translate="no">equivalent?(string1, string2)</a>

      </div>

        <div class="summary-synopsis"><p>Returns <code class="inline">true</code> if <code class="inline">string1</code> is canonically equivalent to <code class="inline">string2</code>.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#first/1" data-no-tooltip="" translate="no">first(string)</a>

      </div>

        <div class="summary-synopsis"><p>Returns the first grapheme from a UTF-8 string,
<code class="inline">nil</code> if the string is empty.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#graphemes/1" data-no-tooltip="" translate="no">graphemes(string)</a>

      </div>

        <div class="summary-synopsis"><p>Returns Unicode graphemes in the string as per Extended Grapheme
Cluster algorithm.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#jaro_distance/2" data-no-tooltip="" translate="no">jaro_distance(string1, string2)</a>

      </div>

        <div class="summary-synopsis"><p>Computes the Jaro distance (similarity) between two strings.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#last/1" data-no-tooltip="" translate="no">last(string)</a>

      </div>

        <div class="summary-synopsis"><p>Returns the last grapheme from a UTF-8 string,
<code class="inline">nil</code> if the string is empty.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#length/1" data-no-tooltip="" translate="no">length(string)</a>

      </div>

        <div class="summary-synopsis"><p>Returns the number of Unicode graphemes in a UTF-8 string.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#match?/2" data-no-tooltip="" translate="no">match?(string, regex)</a>

      </div>

        <div class="summary-synopsis"><p>Checks if <code class="inline">string</code> matches the given regular expression.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#myers_difference/2" data-no-tooltip="" translate="no">myers_difference(string1, string2)</a>

      </div>

        <div class="summary-synopsis"><p>Returns a keyword list that represents an edit script.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#next_codepoint/1" data-no-tooltip="" translate="no">next_codepoint(arg)</a>

      </div>

        <div class="summary-synopsis"><p>Returns the next code point in a string.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#next_grapheme/1" data-no-tooltip="" translate="no">next_grapheme(string)</a>

      </div>

        <div class="summary-synopsis"><p>Returns the next grapheme in a string.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#next_grapheme_size/1" data-no-tooltip="" translate="no">next_grapheme_size(string)</a>

      </div>

        <div class="summary-synopsis"><p>Returns the size (in bytes) of the next grapheme.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#normalize/2" data-no-tooltip="" translate="no">normalize(string, form)</a>

      </div>

        <div class="summary-synopsis"><p>Converts all characters in <code class="inline">string</code> to Unicode normalization
form identified by <code class="inline">form</code>.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#pad_leading/3" data-no-tooltip="" translate="no">pad_leading(string, count, padding \\ [&quot; &quot;])</a>

      </div>

        <div class="summary-synopsis"><p>Returns a new string padded with a leading filler
which is made of elements from the <code class="inline">padding</code>.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#pad_trailing/3" data-no-tooltip="" translate="no">pad_trailing(string, count, padding \\ [&quot; &quot;])</a>

      </div>

        <div class="summary-synopsis"><p>Returns a new string padded with a trailing filler
which is made of elements from the <code class="inline">padding</code>.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#printable?/2" data-no-tooltip="" translate="no">printable?(string, character_limit \\ :infinity)</a>

      </div>

        <div class="summary-synopsis"><p>Checks if a string contains only printable characters up to <code class="inline">character_limit</code>.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#replace/4" data-no-tooltip="" translate="no">replace(subject, pattern, replacement, options \\ [])</a>

      </div>

        <div class="summary-synopsis"><p>Returns a new string created by replacing occurrences of <code class="inline">pattern</code> in
<code class="inline">subject</code> with <code class="inline">replacement</code>.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#replace_invalid/2" data-no-tooltip="" translate="no">replace_invalid(bytes, replacement \\ &quot;�&quot;)</a>

      </div>

        <div class="summary-synopsis"><p>Returns a new string created by replacing all invalid bytes with <code class="inline">replacement</code> (<code class="inline">&quot;�&quot;</code> by default).</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#replace_leading/3" data-no-tooltip="" translate="no">replace_leading(string, match, replacement)</a>

      </div>

        <div class="summary-synopsis"><p>Replaces all leading occurrences of <code class="inline">match</code> by <code class="inline">replacement</code> of <code class="inline">match</code> in <code class="inline">string</code>.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#replace_prefix/3" data-no-tooltip="" translate="no">replace_prefix(string, match, replacement)</a>

      </div>

        <div class="summary-synopsis"><p>Replaces prefix in <code class="inline">string</code> by <code class="inline">replacement</code> if it matches <code class="inline">match</code>.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#replace_suffix/3" data-no-tooltip="" translate="no">replace_suffix(string, match, replacement)</a>

      </div>

        <div class="summary-synopsis"><p>Replaces suffix in <code class="inline">string</code> by <code class="inline">replacement</code> if it matches <code class="inline">match</code>.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#replace_trailing/3" data-no-tooltip="" translate="no">replace_trailing(string, match, replacement)</a>

      </div>

        <div class="summary-synopsis"><p>Replaces all trailing occurrences of <code class="inline">match</code> by <code class="inline">replacement</code> in <code class="inline">string</code>.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#reverse/1" data-no-tooltip="" translate="no">reverse(string)</a>

      </div>

        <div class="summary-synopsis"><p>Reverses the graphemes in given string.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#slice/2" data-no-tooltip="" translate="no">slice(string, range)</a>

      </div>

        <div class="summary-synopsis"><p>Returns a substring from the offset given by the start of the
range to the offset given by the end of the range.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#slice/3" data-no-tooltip="" translate="no">slice(string, start, length)</a>

      </div>

        <div class="summary-synopsis"><p>Returns a substring starting at the offset <code class="inline">start</code>, and of the given <code class="inline">length</code>.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#split/1" data-no-tooltip="" translate="no">split(binary)</a>

      </div>

        <div class="summary-synopsis"><p>Divides a string into substrings at each Unicode whitespace
occurrence with leading and trailing whitespace ignored.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#split/3" data-no-tooltip="" translate="no">split(string, pattern, options \\ [])</a>

      </div>

        <div class="summary-synopsis"><p>Divides a string into parts based on a pattern.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#split_at/2" data-no-tooltip="" translate="no">split_at(string, position)</a>

      </div>

        <div class="summary-synopsis"><p>Splits a string into two at the specified offset. When the offset given is
negative, location is counted from the end of the string.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#splitter/3" data-no-tooltip="" translate="no">splitter(string, pattern, options \\ [])</a>

      </div>

        <div class="summary-synopsis"><p>Returns an enumerable that splits a string on demand.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#starts_with?/2" data-no-tooltip="" translate="no">starts_with?(string, prefix)</a>

      </div>

        <div class="summary-synopsis"><p>Returns <code class="inline">true</code> if <code class="inline">string</code> starts with any of the prefixes given.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#to_atom/1" data-no-tooltip="" translate="no">to_atom(string)</a>

      </div>

        <div class="summary-synopsis"><p>Converts a string to an existing atom or creates a new one.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#to_charlist/1" data-no-tooltip="" translate="no">to_charlist(string)</a>

      </div>

        <div class="summary-synopsis"><p>Converts a string into a charlist.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#to_existing_atom/1" data-no-tooltip="" translate="no">to_existing_atom(string)</a>

      </div>

        <div class="summary-synopsis"><p>Converts a string to an existing atom or raises if
the atom does not exist.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#to_float/1" data-no-tooltip="" translate="no">to_float(string)</a>

      </div>

        <div class="summary-synopsis"><p>Returns a float whose text representation is <code class="inline">string</code>.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#to_integer/1" data-no-tooltip="" translate="no">to_integer(string)</a>

      </div>

        <div class="summary-synopsis"><p>Returns an integer whose text representation is <code class="inline">string</code>.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#to_integer/2" data-no-tooltip="" translate="no">to_integer(string, base)</a>

      </div>

        <div class="summary-synopsis"><p>Returns an integer whose text representation is <code class="inline">string</code> in base <code class="inline">base</code>.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#trim/1" data-no-tooltip="" translate="no">trim(string)</a>

      </div>

        <div class="summary-synopsis"><p>Returns a string where all leading and trailing Unicode whitespaces
have been removed.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#trim/2" data-no-tooltip="" translate="no">trim(string, to_trim)</a>

      </div>

        <div class="summary-synopsis"><p>Returns a string where all leading and trailing <code class="inline">to_trim</code> characters have been
removed.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#trim_leading/1" data-no-tooltip="" translate="no">trim_leading(string)</a>

      </div>

        <div class="summary-synopsis"><p>Returns a string where all leading Unicode whitespaces
have been removed.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#trim_leading/2" data-no-tooltip="" translate="no">trim_leading(string, to_trim)</a>

      </div>

        <div class="summary-synopsis"><p>Returns a string where all leading <code class="inline">to_trim</code> characters have been removed.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#trim_trailing/1" data-no-tooltip="" translate="no">trim_trailing(string)</a>

      </div>

        <div class="summary-synopsis"><p>Returns a string where all trailing Unicode whitespaces
has been removed.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#trim_trailing/2" data-no-tooltip="" translate="no">trim_trailing(string, to_trim)</a>

      </div>

        <div class="summary-synopsis"><p>Returns a string where all trailing <code class="inline">to_trim</code> characters have been removed.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#upcase/2" data-no-tooltip="" translate="no">upcase(string, mode \\ :default)</a>

      </div>

        <div class="summary-synopsis"><p>Converts all characters in the given string to uppercase according to <code class="inline">mode</code>.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#valid?/2" data-no-tooltip="" translate="no">valid?(string, algorithm \\ :default)</a>

      </div>

        <div class="summary-synopsis"><p>Checks whether <code class="inline">string</code> contains only valid characters.</p></div>

    </div>

</div>

      </section>


      <section id="types" class="details-list">
        <h1 class="section-heading">Types</h1>

        <div class="types-list">
<section class="detail" id="t:codepoint/0">

  <div class="detail-header">
    <a href="#t:codepoint/0" class="detail-link" data-no-tooltip="" aria-label="Link to this type">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">codepoint()</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/string.ex#L276" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@type</span> codepoint() :: <a href="#t:t/0">t</a>()</pre>

      </div>

<p>A single Unicode code point encoded in UTF-8. It may be one or more bytes.</p>
  </section>
</section>
<section class="detail" id="t:grapheme/0">

  <div class="detail-header">
    <a href="#t:grapheme/0" class="detail-link" data-no-tooltip="" aria-label="Link to this type">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">grapheme()</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/string.ex#L279" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@type</span> grapheme() :: <a href="#t:t/0">t</a>()</pre>

      </div>

<p>Multiple code points that may be perceived as a single character by readers</p>
  </section>
</section>
<section class="detail" id="t:pattern/0">

  <div class="detail-header">
    <a href="#t:pattern/0" class="detail-link" data-no-tooltip="" aria-label="Link to this type">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">pattern()</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/string.ex#L292" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@type</span> pattern() ::
  <a href="#t:t/0">t</a>() | [nonempty_binary()] | (compiled_search_pattern :: <a href="https://www.erlang.org/doc/apps/stdlib/binary.html#t:cp/0">:binary.cp</a>())</pre>

      </div>

<p>Pattern used in functions like <a href="#replace/4"><code class="inline">replace/4</code></a> and <a href="#split/3"><code class="inline">split/3</code></a>.</p><p>It must be one of:</p><ul><li>a string</li><li>an empty list</li><li>a list containing non-empty strings</li><li>a compiled search pattern created by <a href="https://www.erlang.org/doc/apps/stdlib/binary.html#compile_pattern/1"><code class="inline">:binary.compile_pattern/1</code></a></li></ul>
  </section>
</section>
<section class="detail" id="t:t/0">

  <div class="detail-header">
    <a href="#t:t/0" class="detail-link" data-no-tooltip="" aria-label="Link to this type">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">t()</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/string.ex#L273" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@type</span> t() :: <a href="typespecs.xhtml#built-in-types">binary</a>()</pre>

      </div>

<p>A UTF-8 encoded binary.</p><p>The types <code class="inline">String.t()</code> and <code class="inline">binary()</code> are equivalent to analysis tools.
Although, for those reading the documentation, <code class="inline">String.t()</code> implies
it is a UTF-8 encoded binary.</p>
  </section>
</section>

        </div>
      </section>

      <section id="functions" class="details-list">
        <h1 class="section-heading">Functions</h1>

        <div class="functions-list">
<section class="detail" id="at/2">

  <div class="detail-header">
    <a href="#at/2" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">at(string, position)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/string.ex#L2271" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> at(<a href="#t:t/0">t</a>(), <a href="typespecs.xhtml#basic-types">integer</a>()) :: <a href="#t:grapheme/0">grapheme</a>() | nil</pre>

      </div>

<p>Returns the grapheme at the <code class="inline">position</code> of the given UTF-8 <code class="inline">string</code>.
If <code class="inline">position</code> is greater than <code class="inline">string</code> length, then it returns <code class="inline">nil</code>.</p><section role="note" class="admonition warning"><h4 class="admonition-title warning">Linear Access</h4><p>This function has to linearly traverse the string.
If you want to access a string or a binary in constant time based on the
number of bytes, use <a href="Kernel.xhtml#binary_slice/3"><code class="inline">Kernel.binary_slice/3</code></a> or <a href="https://www.erlang.org/doc/apps/stdlib/binary.html#at/2"><code class="inline">:binary.at/2</code></a> instead.</p></section><h2 id="at/2-examples" class="section-heading"><a href="#at/2-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">at</samp><samp class="p" data-group-id="9487732602-1">(</samp><samp class="s">&quot;elixir&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">0</samp><samp class="p" data-group-id="9487732602-1">)</samp><samp class="w">
</samp><samp class="s">&quot;e&quot;</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">at</samp><samp class="p" data-group-id="9487732602-2">(</samp><samp class="s">&quot;elixir&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">1</samp><samp class="p" data-group-id="9487732602-2">)</samp><samp class="w">
</samp><samp class="s">&quot;l&quot;</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">at</samp><samp class="p" data-group-id="9487732602-3">(</samp><samp class="s">&quot;elixir&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">10</samp><samp class="p" data-group-id="9487732602-3">)</samp><samp class="w">
</samp><samp class="no">nil</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">at</samp><samp class="p" data-group-id="9487732602-4">(</samp><samp class="s">&quot;elixir&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="o">-</samp><samp class="mi">1</samp><samp class="p" data-group-id="9487732602-4">)</samp><samp class="w">
</samp><samp class="s">&quot;r&quot;</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">at</samp><samp class="p" data-group-id="9487732602-5">(</samp><samp class="s">&quot;elixir&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="o">-</samp><samp class="mi">10</samp><samp class="p" data-group-id="9487732602-5">)</samp><samp class="w">
</samp><samp class="no">nil</samp></code></pre>
  </section>
</section>
<section class="detail" id="bag_distance/2">

  <div class="detail-header">
    <a href="#bag_distance/2" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">bag_distance(string1, string2)</h1>

        <span class="note">(since 1.8.0)</span>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/string.ex#L3043" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> bag_distance(<a href="#t:t/0">t</a>(), <a href="#t:t/0">t</a>()) :: <a href="typespecs.xhtml#basic-types">float</a>()</pre>

      </div>

<p>Computes the bag distance between two strings.</p><p>Returns a float value between 0 and 1 representing the bag
distance between <code class="inline">string1</code> and <code class="inline">string2</code>.</p><p>The bag distance is meant to be an efficient approximation
of the distance between two strings to quickly rule out strings
that are largely different.</p><p>The algorithm is outlined in the &quot;String Matching with Metric
Trees Using an Approximate Distance&quot; paper by Ilaria Bartolini,
Paolo Ciaccia, and Marco Patella.</p><h2 id="bag_distance/2-examples" class="section-heading"><a href="#bag_distance/2-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">bag_distance</samp><samp class="p" data-group-id="8182713698-1">(</samp><samp class="s">&quot;abc&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;&quot;</samp><samp class="p" data-group-id="8182713698-1">)</samp><samp class="w">
</samp><samp class="mf">0.0</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">bag_distance</samp><samp class="p" data-group-id="8182713698-2">(</samp><samp class="s">&quot;abcd&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;a&quot;</samp><samp class="p" data-group-id="8182713698-2">)</samp><samp class="w">
</samp><samp class="mf">0.25</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">bag_distance</samp><samp class="p" data-group-id="8182713698-3">(</samp><samp class="s">&quot;abcd&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;ab&quot;</samp><samp class="p" data-group-id="8182713698-3">)</samp><samp class="w">
</samp><samp class="mf">0.5</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">bag_distance</samp><samp class="p" data-group-id="8182713698-4">(</samp><samp class="s">&quot;abcd&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;abc&quot;</samp><samp class="p" data-group-id="8182713698-4">)</samp><samp class="w">
</samp><samp class="mf">0.75</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">bag_distance</samp><samp class="p" data-group-id="8182713698-5">(</samp><samp class="s">&quot;abcd&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;abcd&quot;</samp><samp class="p" data-group-id="8182713698-5">)</samp><samp class="w">
</samp><samp class="mf">1.0</samp></code></pre>
  </section>
</section>
<section class="detail" id="byte_slice/3">

  <div class="detail-header">
    <a href="#byte_slice/3" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">byte_slice(string, start_bytes, size_bytes)</h1>

        <span class="note">(since 1.17.0)</span>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/string.ex#L2598" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> byte_slice(<a href="#t:t/0">t</a>(), <a href="typespecs.xhtml#basic-types">integer</a>(), <a href="typespecs.xhtml#basic-types">non_neg_integer</a>()) :: <a href="#t:t/0">t</a>()</pre>

      </div>

<p>Returns a substring starting at (or after) <code class="inline">start_bytes</code> and of at most
the given <code class="inline">size_bytes</code>.</p><p>This function works on bytes and then adjusts the string to eliminate
truncated codepoints. This is useful when you have a string and you need
to guarantee it does not exceed a certain amount of bytes.</p><p>If the offset is greater than the number of bytes in the string, then it
returns <code class="inline">&quot;&quot;</code>. Similar to <a href="#slice/2"><code class="inline">String.slice/2</code></a>, a negative <code class="inline">start_bytes</code>
will be adjusted to the end of the string (but in bytes).</p><p>This function does not guarantee the string won't have invalid codepoints,
it only guarantees to remove truncated codepoints immediately at the beginning
or the end of the slice.</p><h2 id="byte_slice/3-examples" class="section-heading"><a href="#byte_slice/3-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><p>Consider the string &quot;héllo&quot;. Let's see its representation:</p><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="n">inspect</samp><samp class="p" data-group-id="3198200625-1">(</samp><samp class="s">&quot;héllo&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">binaries</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="ss">:as_binaries</samp><samp class="p" data-group-id="3198200625-1">)</samp><samp class="w">
</samp><samp class="s">&quot;&lt;&lt;104, 195, 169, 108, 108, 111&gt;&gt;&quot;</samp></code></pre><p>Although the string has 5 characters, it is made of 6 bytes. Now imagine
we want to get only the first two bytes. To do so, let's use <a href="Kernel.xhtml#binary_slice/3"><code class="inline">binary_slice/3</code></a>,
which is unaware of codepoints:</p><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="n">binary_slice</samp><samp class="p" data-group-id="4573688102-1">(</samp><samp class="s">&quot;héllo&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">0</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">2</samp><samp class="p" data-group-id="4573688102-1">)</samp><samp class="w">
</samp><samp class="p" data-group-id="4573688102-2">&lt;&lt;</samp><samp class="mi">104</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">195</samp><samp class="p" data-group-id="4573688102-2">&gt;&gt;</samp></code></pre><p>As you can see, this operation is unsafe and returns an invalid string.
That's because we cut the string in the middle of the bytes representing
&quot;é&quot;. On the other hand, we could use <a href="#slice/3"><code class="inline">String.slice/3</code></a>:</p><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">slice</samp><samp class="p" data-group-id="9146425550-1">(</samp><samp class="s">&quot;héllo&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">0</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">2</samp><samp class="p" data-group-id="9146425550-1">)</samp><samp class="w">
</samp><samp class="s">&quot;hé&quot;</samp></code></pre><p>While the above is correct, it has 3 bytes. If you have a requirement where
you need <em>at most</em> 2 bytes, the result would also be invalid. In such scenarios,
you can use this function, which will slice the given bytes, but clean up
the truncated codepoints:</p><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">byte_slice</samp><samp class="p" data-group-id="7893383135-1">(</samp><samp class="s">&quot;héllo&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">0</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">2</samp><samp class="p" data-group-id="7893383135-1">)</samp><samp class="w">
</samp><samp class="s">&quot;h&quot;</samp></code></pre><p>Truncated codepoints at the beginning are also cleaned up:</p><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">byte_slice</samp><samp class="p" data-group-id="1150483340-1">(</samp><samp class="s">&quot;héllo&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">2</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">3</samp><samp class="p" data-group-id="1150483340-1">)</samp><samp class="w">
</samp><samp class="s">&quot;llo&quot;</samp></code></pre><p>Note that, if you want to work on raw bytes, then you must use <a href="Kernel.xhtml#binary_slice/3"><code class="inline">binary_slice/3</code></a>
instead.</p>
  </section>
</section>
<section class="detail" id="capitalize/2">

    <span id="capitalize/1"></span>

  <div class="detail-header">
    <a href="#capitalize/2" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">capitalize(string, mode \\ :default)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/string.ex#L980" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> capitalize(<a href="#t:t/0">t</a>(), :default | :ascii | :greek | :turkic) :: <a href="#t:t/0">t</a>()</pre>

      </div>

<p>Converts the first character in the given string to
uppercase and the remainder to lowercase according to <code class="inline">mode</code>.</p><p><code class="inline">mode</code> may be <code class="inline">:default</code>, <code class="inline">:ascii</code>, <code class="inline">:greek</code> or <code class="inline">:turkic</code>. The <code class="inline">:default</code> mode
considers all non-conditional transformations outlined in the Unicode standard.
<code class="inline">:ascii</code> capitalizes only the letters A to Z. <code class="inline">:greek</code> includes the context
sensitive mappings found in Greek. <code class="inline">:turkic</code> properly handles the letter <code class="inline">i</code>
with the dotless variant.</p><p>Also see <a href="#upcase/2"><code class="inline">upcase/2</code></a> and <a href="#capitalize/2"><code class="inline">capitalize/2</code></a> for other conversions. If you want
a variation of this function that does not lowercase the rest of string,
see Erlang's <a href="https://www.erlang.org/doc/apps/stdlib/string.html#titlecase/1"><code class="inline">:string.titlecase/1</code></a>.</p><h2 id="capitalize/2-examples" class="section-heading"><a href="#capitalize/2-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">capitalize</samp><samp class="p" data-group-id="7923399284-1">(</samp><samp class="s">&quot;abcd&quot;</samp><samp class="p" data-group-id="7923399284-1">)</samp><samp class="w">
</samp><samp class="s">&quot;Abcd&quot;</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">capitalize</samp><samp class="p" data-group-id="7923399284-2">(</samp><samp class="s">&quot;ABCD&quot;</samp><samp class="p" data-group-id="7923399284-2">)</samp><samp class="w">
</samp><samp class="s">&quot;Abcd&quot;</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">capitalize</samp><samp class="p" data-group-id="7923399284-3">(</samp><samp class="s">&quot;ﬁn&quot;</samp><samp class="p" data-group-id="7923399284-3">)</samp><samp class="w">
</samp><samp class="s">&quot;Fin&quot;</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">capitalize</samp><samp class="p" data-group-id="7923399284-4">(</samp><samp class="s">&quot;olá&quot;</samp><samp class="p" data-group-id="7923399284-4">)</samp><samp class="w">
</samp><samp class="s">&quot;Olá&quot;</samp></code></pre>
  </section>
</section>
<section class="detail" id="chunk/2">

  <div class="detail-header">
    <a href="#chunk/2" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">chunk(string, trait)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/string.ex#L2036" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> chunk(<a href="#t:t/0">t</a>(), :valid | :printable) :: [<a href="#t:t/0">t</a>()]</pre>

      </div>

<p>Splits the string into chunks of characters that share a common trait.</p><p>The trait can be one of two options:</p><ul><li><p><code class="inline">:valid</code> - the string is split into chunks of valid and invalid
character sequences</p></li><li><p><code class="inline">:printable</code> - the string is split into chunks of printable and
non-printable character sequences</p></li></ul><p>Returns a list of binaries each of which contains only one kind of
characters.</p><p>If the given string is empty, an empty list is returned.</p><h2 id="chunk/2-examples" class="section-heading"><a href="#chunk/2-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">chunk</samp><samp class="p" data-group-id="7799587586-1">(</samp><samp class="p" data-group-id="7799587586-2">&lt;&lt;</samp><samp class="sc">?a</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="sc">?b</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="sc">?c</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">0</samp><samp class="p" data-group-id="7799587586-2">&gt;&gt;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:valid</samp><samp class="p" data-group-id="7799587586-1">)</samp><samp class="w">
</samp><samp class="p" data-group-id="7799587586-3">[</samp><samp class="s">&quot;abc</samp><samp class="se">\0</samp><samp class="s">&quot;</samp><samp class="p" data-group-id="7799587586-3">]</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">chunk</samp><samp class="p" data-group-id="7799587586-4">(</samp><samp class="p" data-group-id="7799587586-5">&lt;&lt;</samp><samp class="sc">?a</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="sc">?b</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="sc">?c</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">0</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mh">0xFFFF</samp><samp class="o">::</samp><samp class="n">utf16</samp><samp class="p" data-group-id="7799587586-5">&gt;&gt;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:valid</samp><samp class="p" data-group-id="7799587586-4">)</samp><samp class="w">
</samp><samp class="p" data-group-id="7799587586-6">[</samp><samp class="s">&quot;abc</samp><samp class="se">\0</samp><samp class="s">&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="7799587586-7">&lt;&lt;</samp><samp class="mh">0xFFFF</samp><samp class="o">::</samp><samp class="n">utf16</samp><samp class="p" data-group-id="7799587586-7">&gt;&gt;</samp><samp class="p" data-group-id="7799587586-6">]</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">chunk</samp><samp class="p" data-group-id="7799587586-8">(</samp><samp class="p" data-group-id="7799587586-9">&lt;&lt;</samp><samp class="sc">?a</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="sc">?b</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="sc">?c</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">0</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mh">0x0FFFF</samp><samp class="o">::</samp><samp class="n">utf8</samp><samp class="p" data-group-id="7799587586-9">&gt;&gt;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:printable</samp><samp class="p" data-group-id="7799587586-8">)</samp><samp class="w">
</samp><samp class="p" data-group-id="7799587586-10">[</samp><samp class="s">&quot;abc&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="7799587586-11">&lt;&lt;</samp><samp class="mi">0</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mh">0x0FFFF</samp><samp class="o">::</samp><samp class="n">utf8</samp><samp class="p" data-group-id="7799587586-11">&gt;&gt;</samp><samp class="p" data-group-id="7799587586-10">]</samp></code></pre>
  </section>
</section>
<section class="detail" id="codepoints/1">

  <div class="detail-header">
    <a href="#codepoints/1" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">codepoints(string)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/string.ex#L1770" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> codepoints(<a href="#t:t/0">t</a>()) :: [<a href="#t:codepoint/0">codepoint</a>()]</pre>

      </div>

<p>Returns a list of code points encoded as strings.</p><p>To retrieve code points in their natural integer
representation, see <a href="#to_charlist/1"><code class="inline">to_charlist/1</code></a>. For details about
code points and graphemes, see the <a href="String.xhtml"><code class="inline">String</code></a> module
documentation.</p><h2 id="codepoints/1-examples" class="section-heading"><a href="#codepoints/1-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">codepoints</samp><samp class="p" data-group-id="7870972090-1">(</samp><samp class="s">&quot;olá&quot;</samp><samp class="p" data-group-id="7870972090-1">)</samp><samp class="w">
</samp><samp class="p" data-group-id="7870972090-2">[</samp><samp class="s">&quot;o&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;l&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;á&quot;</samp><samp class="p" data-group-id="7870972090-2">]</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">codepoints</samp><samp class="p" data-group-id="7870972090-3">(</samp><samp class="s">&quot;оптими зации&quot;</samp><samp class="p" data-group-id="7870972090-3">)</samp><samp class="w">
</samp><samp class="p" data-group-id="7870972090-4">[</samp><samp class="s">&quot;о&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;п&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;т&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;и&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;м&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;и&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot; &quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;з&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;а&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;ц&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;и&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;и&quot;</samp><samp class="p" data-group-id="7870972090-4">]</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">codepoints</samp><samp class="p" data-group-id="7870972090-5">(</samp><samp class="s">&quot;ἅἪῼ&quot;</samp><samp class="p" data-group-id="7870972090-5">)</samp><samp class="w">
</samp><samp class="p" data-group-id="7870972090-6">[</samp><samp class="s">&quot;ἅ&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;Ἢ&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;ῼ&quot;</samp><samp class="p" data-group-id="7870972090-6">]</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">codepoints</samp><samp class="p" data-group-id="7870972090-7">(</samp><samp class="s">&quot;</samp><samp class="se">\u00e9</samp><samp class="s">&quot;</samp><samp class="p" data-group-id="7870972090-7">)</samp><samp class="w">
</samp><samp class="p" data-group-id="7870972090-8">[</samp><samp class="s">&quot;é&quot;</samp><samp class="p" data-group-id="7870972090-8">]</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">codepoints</samp><samp class="p" data-group-id="7870972090-9">(</samp><samp class="s">&quot;</samp><samp class="se">\u0065</samp><samp class="se">\u0301</samp><samp class="s">&quot;</samp><samp class="p" data-group-id="7870972090-9">)</samp><samp class="w">
</samp><samp class="p" data-group-id="7870972090-10">[</samp><samp class="s">&quot;e&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;́&quot;</samp><samp class="p" data-group-id="7870972090-10">]</samp></code></pre>
  </section>
</section>
<section class="detail" id="contains?/2">

  <div class="detail-header">
    <a href="#contains?/2" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">contains?(string, contents)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/string.ex#L2831" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> contains?(<a href="#t:t/0">t</a>(), [<a href="#t:t/0">t</a>()] | <a href="#t:pattern/0">pattern</a>()) :: <a href="typespecs.xhtml#built-in-types">boolean</a>()</pre>

      </div>

<p>Searches if <code class="inline">string</code> contains any of the given <code class="inline">contents</code>.</p><p><code class="inline">contents</code> can be either a string, a list of strings,
or a compiled pattern. If <code class="inline">contents</code> is a list, this
function will search if any of the strings in <code class="inline">contents</code>
are part of <code class="inline">string</code>.</p><section role="note" class="admonition tip"><h4 class="admonition-title tip">Searching for a string in a list</h4><p>If you want to check if <code class="inline">string</code> is listed in <code class="inline">contents</code>,
where <code class="inline">contents</code> is a list, use <code class="inline">Enum.member?(contents, string)</code>
instead.</p></section><h2 id="contains?/2-examples" class="section-heading"><a href="#contains?/2-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">contains?</samp><samp class="p" data-group-id="3468074321-1">(</samp><samp class="s">&quot;elixir of life&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;of&quot;</samp><samp class="p" data-group-id="3468074321-1">)</samp><samp class="w">
</samp><samp class="no">true</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">contains?</samp><samp class="p" data-group-id="3468074321-2">(</samp><samp class="s">&quot;elixir of life&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="3468074321-3">[</samp><samp class="s">&quot;life&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;death&quot;</samp><samp class="p" data-group-id="3468074321-3">]</samp><samp class="p" data-group-id="3468074321-2">)</samp><samp class="w">
</samp><samp class="no">true</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">contains?</samp><samp class="p" data-group-id="3468074321-4">(</samp><samp class="s">&quot;elixir of life&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="3468074321-5">[</samp><samp class="s">&quot;death&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;mercury&quot;</samp><samp class="p" data-group-id="3468074321-5">]</samp><samp class="p" data-group-id="3468074321-4">)</samp><samp class="w">
</samp><samp class="no">false</samp></code></pre><p>The argument can also be a compiled pattern:</p><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="n">pattern</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="nc">:binary</samp><samp class="o">.</samp><samp class="n">compile_pattern</samp><samp class="p" data-group-id="7714053407-1">(</samp><samp class="p" data-group-id="7714053407-2">[</samp><samp class="s">&quot;life&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;death&quot;</samp><samp class="p" data-group-id="7714053407-2">]</samp><samp class="p" data-group-id="7714053407-1">)</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">contains?</samp><samp class="p" data-group-id="7714053407-3">(</samp><samp class="s">&quot;elixir of life&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">pattern</samp><samp class="p" data-group-id="7714053407-3">)</samp><samp class="w">
</samp><samp class="no">true</samp></code></pre><p>An empty string will always match:</p><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">contains?</samp><samp class="p" data-group-id="5642362051-1">(</samp><samp class="s">&quot;elixir of life&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;&quot;</samp><samp class="p" data-group-id="5642362051-1">)</samp><samp class="w">
</samp><samp class="no">true</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">contains?</samp><samp class="p" data-group-id="5642362051-2">(</samp><samp class="s">&quot;elixir of life&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="5642362051-3">[</samp><samp class="s">&quot;&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;other&quot;</samp><samp class="p" data-group-id="5642362051-3">]</samp><samp class="p" data-group-id="5642362051-2">)</samp><samp class="w">
</samp><samp class="no">true</samp></code></pre><p>An empty list will never match:</p><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">contains?</samp><samp class="p" data-group-id="5045539417-1">(</samp><samp class="s">&quot;elixir of life&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="5045539417-2">[</samp><samp class="p" data-group-id="5045539417-2">]</samp><samp class="p" data-group-id="5045539417-1">)</samp><samp class="w">
</samp><samp class="no">false</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">contains?</samp><samp class="p" data-group-id="5045539417-3">(</samp><samp class="s">&quot;&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="5045539417-4">[</samp><samp class="p" data-group-id="5045539417-4">]</samp><samp class="p" data-group-id="5045539417-3">)</samp><samp class="w">
</samp><samp class="no">false</samp></code></pre><p>Be aware that this function can match within or across grapheme boundaries.
For example, take the grapheme &quot;é&quot; which is made of the characters
&quot;e&quot; and the acute accent. The following returns <code class="inline">true</code>:</p><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">contains?</samp><samp class="p" data-group-id="5015485954-1">(</samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">normalize</samp><samp class="p" data-group-id="5015485954-2">(</samp><samp class="s">&quot;é&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:nfd</samp><samp class="p" data-group-id="5015485954-2">)</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;e&quot;</samp><samp class="p" data-group-id="5015485954-1">)</samp><samp class="w">
</samp><samp class="no">true</samp></code></pre><p>However, if &quot;é&quot; is represented by the single character &quot;e with acute&quot;
accent, then it will return <code class="inline">false</code>:</p><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">contains?</samp><samp class="p" data-group-id="2808444471-1">(</samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">normalize</samp><samp class="p" data-group-id="2808444471-2">(</samp><samp class="s">&quot;é&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:nfc</samp><samp class="p" data-group-id="2808444471-2">)</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;e&quot;</samp><samp class="p" data-group-id="2808444471-1">)</samp><samp class="w">
</samp><samp class="no">false</samp></code></pre>
  </section>
</section>
<section class="detail" id="downcase/2">

    <span id="downcase/1"></span>

  <div class="detail-header">
    <a href="#downcase/2" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">downcase(string, mode \\ :default)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/string.ex#L928" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> downcase(<a href="#t:t/0">t</a>(), :default | :ascii | :greek | :turkic) :: <a href="#t:t/0">t</a>()</pre>

      </div>

<p>Converts all characters in the given string to lowercase according to <code class="inline">mode</code>.</p><p><code class="inline">mode</code> may be <code class="inline">:default</code>, <code class="inline">:ascii</code>, <code class="inline">:greek</code> or <code class="inline">:turkic</code>. The <code class="inline">:default</code> mode considers
all non-conditional transformations outlined in the Unicode standard. <code class="inline">:ascii</code>
lowercases only the letters A to Z. <code class="inline">:greek</code> includes the context sensitive
mappings found in Greek. <code class="inline">:turkic</code> properly handles the letter i with the dotless variant.</p><p>Also see <a href="#upcase/2"><code class="inline">upcase/2</code></a> and <a href="#capitalize/2"><code class="inline">capitalize/2</code></a> for other conversions.</p><h2 id="downcase/2-examples" class="section-heading"><a href="#downcase/2-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">downcase</samp><samp class="p" data-group-id="6463742107-1">(</samp><samp class="s">&quot;ABCD&quot;</samp><samp class="p" data-group-id="6463742107-1">)</samp><samp class="w">
</samp><samp class="s">&quot;abcd&quot;</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">downcase</samp><samp class="p" data-group-id="6463742107-2">(</samp><samp class="s">&quot;AB 123 XPTO&quot;</samp><samp class="p" data-group-id="6463742107-2">)</samp><samp class="w">
</samp><samp class="s">&quot;ab 123 xpto&quot;</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">downcase</samp><samp class="p" data-group-id="6463742107-3">(</samp><samp class="s">&quot;OLÁ&quot;</samp><samp class="p" data-group-id="6463742107-3">)</samp><samp class="w">
</samp><samp class="s">&quot;olá&quot;</samp></code></pre><p>The <code class="inline">:ascii</code> mode ignores Unicode characters and provides a more
performant implementation when you know the string contains only
ASCII characters:</p><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">downcase</samp><samp class="p" data-group-id="1240870174-1">(</samp><samp class="s">&quot;OLÁ&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:ascii</samp><samp class="p" data-group-id="1240870174-1">)</samp><samp class="w">
</samp><samp class="s">&quot;olÁ&quot;</samp></code></pre><p>The <code class="inline">:greek</code> mode properly handles the context sensitive sigma in Greek:</p><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">downcase</samp><samp class="p" data-group-id="7798081238-1">(</samp><samp class="s">&quot;ΣΣ&quot;</samp><samp class="p" data-group-id="7798081238-1">)</samp><samp class="w">
</samp><samp class="s">&quot;σσ&quot;</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">downcase</samp><samp class="p" data-group-id="7798081238-2">(</samp><samp class="s">&quot;ΣΣ&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:greek</samp><samp class="p" data-group-id="7798081238-2">)</samp><samp class="w">
</samp><samp class="s">&quot;σς&quot;</samp></code></pre><p>And <code class="inline">:turkic</code> properly handles the letter i with the dotless variant:</p><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">downcase</samp><samp class="p" data-group-id="8460578561-1">(</samp><samp class="s">&quot;Iİ&quot;</samp><samp class="p" data-group-id="8460578561-1">)</samp><samp class="w">
</samp><samp class="s">&quot;ii̇&quot;</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">downcase</samp><samp class="p" data-group-id="8460578561-2">(</samp><samp class="s">&quot;Iİ&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:turkic</samp><samp class="p" data-group-id="8460578561-2">)</samp><samp class="w">
</samp><samp class="s">&quot;ıi&quot;</samp></code></pre>
  </section>
</section>
<section class="detail" id="duplicate/2">

  <div class="detail-header">
    <a href="#duplicate/2" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">duplicate(subject, n)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/string.ex#L1739" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> duplicate(<a href="#t:t/0">t</a>(), <a href="typespecs.xhtml#basic-types">non_neg_integer</a>()) :: <a href="#t:t/0">t</a>()</pre>

      </div>

<p>Returns a string <code class="inline">subject</code> repeated <code class="inline">n</code> times.</p><p>Inlined by the compiler.</p><h2 id="duplicate/2-examples" class="section-heading"><a href="#duplicate/2-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">duplicate</samp><samp class="p" data-group-id="7975173438-1">(</samp><samp class="s">&quot;abc&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">0</samp><samp class="p" data-group-id="7975173438-1">)</samp><samp class="w">
</samp><samp class="s">&quot;&quot;</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">duplicate</samp><samp class="p" data-group-id="7975173438-2">(</samp><samp class="s">&quot;abc&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">1</samp><samp class="p" data-group-id="7975173438-2">)</samp><samp class="w">
</samp><samp class="s">&quot;abc&quot;</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">duplicate</samp><samp class="p" data-group-id="7975173438-3">(</samp><samp class="s">&quot;abc&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">2</samp><samp class="p" data-group-id="7975173438-3">)</samp><samp class="w">
</samp><samp class="s">&quot;abcabc&quot;</samp></code></pre>
  </section>
</section>
<section class="detail" id="ends_with?/2">

  <div class="detail-header">
    <a href="#ends_with?/2" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">ends_with?(string, suffix)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/string.ex#L2733" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> ends_with?(<a href="#t:t/0">t</a>(), <a href="#t:t/0">t</a>() | [<a href="#t:t/0">t</a>()]) :: <a href="typespecs.xhtml#built-in-types">boolean</a>()</pre>

      </div>

<p>Returns <code class="inline">true</code> if <code class="inline">string</code> ends with any of the suffixes given.</p><p><code class="inline">suffixes</code> can be either a single suffix or a list of suffixes.</p><h2 id="ends_with?/2-examples" class="section-heading"><a href="#ends_with?/2-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">ends_with?</samp><samp class="p" data-group-id="9053719782-1">(</samp><samp class="s">&quot;language&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;age&quot;</samp><samp class="p" data-group-id="9053719782-1">)</samp><samp class="w">
</samp><samp class="no">true</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">ends_with?</samp><samp class="p" data-group-id="9053719782-2">(</samp><samp class="s">&quot;language&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="9053719782-3">[</samp><samp class="s">&quot;youth&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;age&quot;</samp><samp class="p" data-group-id="9053719782-3">]</samp><samp class="p" data-group-id="9053719782-2">)</samp><samp class="w">
</samp><samp class="no">true</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">ends_with?</samp><samp class="p" data-group-id="9053719782-4">(</samp><samp class="s">&quot;language&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="9053719782-5">[</samp><samp class="s">&quot;youth&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;elixir&quot;</samp><samp class="p" data-group-id="9053719782-5">]</samp><samp class="p" data-group-id="9053719782-4">)</samp><samp class="w">
</samp><samp class="no">false</samp></code></pre><p>An empty suffix will always match:</p><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">ends_with?</samp><samp class="p" data-group-id="2974672302-1">(</samp><samp class="s">&quot;language&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;&quot;</samp><samp class="p" data-group-id="2974672302-1">)</samp><samp class="w">
</samp><samp class="no">true</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">ends_with?</samp><samp class="p" data-group-id="2974672302-2">(</samp><samp class="s">&quot;language&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="2974672302-3">[</samp><samp class="s">&quot;&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;other&quot;</samp><samp class="p" data-group-id="2974672302-3">]</samp><samp class="p" data-group-id="2974672302-2">)</samp><samp class="w">
</samp><samp class="no">true</samp></code></pre>
  </section>
</section>
<section class="detail" id="equivalent?/2">

  <div class="detail-header">
    <a href="#equivalent?/2" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">equivalent?(string1, string2)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/string.ex#L736" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> equivalent?(<a href="#t:t/0">t</a>(), <a href="#t:t/0">t</a>()) :: <a href="typespecs.xhtml#built-in-types">boolean</a>()</pre>

      </div>

<p>Returns <code class="inline">true</code> if <code class="inline">string1</code> is canonically equivalent to <code class="inline">string2</code>.</p><p>It performs Normalization Form Canonical Decomposition (NFD) on the
strings before comparing them. This function is equivalent to:</p><pre><code class="makeup elixir" translate="no"><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">normalize</samp><samp class="p" data-group-id="5209301047-1">(</samp><samp class="n">string1</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:nfd</samp><samp class="p" data-group-id="5209301047-1">)</samp><samp class="w"> </samp><samp class="o">==</samp><samp class="w"> </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">normalize</samp><samp class="p" data-group-id="5209301047-2">(</samp><samp class="n">string2</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:nfd</samp><samp class="p" data-group-id="5209301047-2">)</samp></code></pre><p>If you plan to compare multiple strings, multiple times in a row, you
may normalize them upfront and compare them directly to avoid multiple
normalization passes.</p><h2 id="equivalent?/2-examples" class="section-heading"><a href="#equivalent?/2-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">equivalent?</samp><samp class="p" data-group-id="2286667192-1">(</samp><samp class="s">&quot;abc&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;abc&quot;</samp><samp class="p" data-group-id="2286667192-1">)</samp><samp class="w">
</samp><samp class="no">true</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">equivalent?</samp><samp class="p" data-group-id="2286667192-2">(</samp><samp class="s">&quot;man</samp><samp class="se">\u0303</samp><samp class="s">ana&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;mañana&quot;</samp><samp class="p" data-group-id="2286667192-2">)</samp><samp class="w">
</samp><samp class="no">true</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">equivalent?</samp><samp class="p" data-group-id="2286667192-3">(</samp><samp class="s">&quot;abc&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;ABC&quot;</samp><samp class="p" data-group-id="2286667192-3">)</samp><samp class="w">
</samp><samp class="no">false</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">equivalent?</samp><samp class="p" data-group-id="2286667192-4">(</samp><samp class="s">&quot;nø&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;nó&quot;</samp><samp class="p" data-group-id="2286667192-4">)</samp><samp class="w">
</samp><samp class="no">false</samp></code></pre>
  </section>
</section>
<section class="detail" id="first/1">

  <div class="detail-header">
    <a href="#first/1" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">first(string)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/string.ex#L2170" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> first(<a href="#t:t/0">t</a>()) :: <a href="#t:grapheme/0">grapheme</a>() | nil</pre>

      </div>

<p>Returns the first grapheme from a UTF-8 string,
<code class="inline">nil</code> if the string is empty.</p><h2 id="first/1-examples" class="section-heading"><a href="#first/1-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">first</samp><samp class="p" data-group-id="8846387420-1">(</samp><samp class="s">&quot;elixir&quot;</samp><samp class="p" data-group-id="8846387420-1">)</samp><samp class="w">
</samp><samp class="s">&quot;e&quot;</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">first</samp><samp class="p" data-group-id="8846387420-2">(</samp><samp class="s">&quot;եոգլի&quot;</samp><samp class="p" data-group-id="8846387420-2">)</samp><samp class="w">
</samp><samp class="s">&quot;ե&quot;</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">first</samp><samp class="p" data-group-id="8846387420-3">(</samp><samp class="s">&quot;&quot;</samp><samp class="p" data-group-id="8846387420-3">)</samp><samp class="w">
</samp><samp class="no">nil</samp></code></pre>
  </section>
</section>
<section class="detail" id="graphemes/1">

  <div class="detail-header">
    <a href="#graphemes/1" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">graphemes(string)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/string.ex#L2088" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> graphemes(<a href="#t:t/0">t</a>()) :: [<a href="#t:grapheme/0">grapheme</a>()]</pre>

      </div>

<p>Returns Unicode graphemes in the string as per Extended Grapheme
Cluster algorithm.</p><p>The algorithm is outlined in the <a href="https://www.unicode.org/reports/tr29/">Unicode Standard Annex #29,
Unicode Text Segmentation</a>.</p><p>For details about code points and graphemes, see the <a href="String.xhtml"><code class="inline">String</code></a> module documentation.</p><h2 id="graphemes/1-examples" class="section-heading"><a href="#graphemes/1-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">graphemes</samp><samp class="p" data-group-id="0463006260-1">(</samp><samp class="s">&quot;Ńaïve&quot;</samp><samp class="p" data-group-id="0463006260-1">)</samp><samp class="w">
</samp><samp class="p" data-group-id="0463006260-2">[</samp><samp class="s">&quot;Ń&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;a&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;ï&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;v&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;e&quot;</samp><samp class="p" data-group-id="0463006260-2">]</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">graphemes</samp><samp class="p" data-group-id="0463006260-3">(</samp><samp class="s">&quot;</samp><samp class="se">\u00e9</samp><samp class="s">&quot;</samp><samp class="p" data-group-id="0463006260-3">)</samp><samp class="w">
</samp><samp class="p" data-group-id="0463006260-4">[</samp><samp class="s">&quot;é&quot;</samp><samp class="p" data-group-id="0463006260-4">]</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">graphemes</samp><samp class="p" data-group-id="0463006260-5">(</samp><samp class="s">&quot;</samp><samp class="se">\u0065</samp><samp class="se">\u0301</samp><samp class="s">&quot;</samp><samp class="p" data-group-id="0463006260-5">)</samp><samp class="w">
</samp><samp class="p" data-group-id="0463006260-6">[</samp><samp class="s">&quot;é&quot;</samp><samp class="p" data-group-id="0463006260-6">]</samp></code></pre>
  </section>
</section>
<section class="detail" id="jaro_distance/2">

  <div class="detail-header">
    <a href="#jaro_distance/2" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">jaro_distance(string1, string2)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/string.ex#L3105" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> jaro_distance(<a href="#t:t/0">t</a>(), <a href="#t:t/0">t</a>()) :: <a href="typespecs.xhtml#basic-types">float</a>()</pre>

      </div>

<p>Computes the Jaro distance (similarity) between two strings.</p><p>Returns a float value between <code class="inline">0.0</code> (equates to no similarity) and <code class="inline">1.0</code>
(is an exact match) representing <a href="https://en.wikipedia.org/wiki/Jaro-Winkler_distance">Jaro</a>
distance between <code class="inline">string1</code> and <code class="inline">string2</code>.</p><p>The Jaro distance metric is designed and best suited for short
strings such as person names. Elixir itself uses this function
to provide the &quot;did you mean?&quot; functionality. For instance, when you
are calling a function in a module and you have a typo in the
function name, we attempt to suggest the most similar function
name available, if any, based on the <a href="#jaro_distance/2"><code class="inline">jaro_distance/2</code></a> score.</p><h2 id="jaro_distance/2-examples" class="section-heading"><a href="#jaro_distance/2-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">jaro_distance</samp><samp class="p" data-group-id="0263269107-1">(</samp><samp class="s">&quot;Dwayne&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;Duane&quot;</samp><samp class="p" data-group-id="0263269107-1">)</samp><samp class="w">
</samp><samp class="mf">0.8222222222222223</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">jaro_distance</samp><samp class="p" data-group-id="0263269107-2">(</samp><samp class="s">&quot;even&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;odd&quot;</samp><samp class="p" data-group-id="0263269107-2">)</samp><samp class="w">
</samp><samp class="mf">0.0</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">jaro_distance</samp><samp class="p" data-group-id="0263269107-3">(</samp><samp class="s">&quot;same&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;same&quot;</samp><samp class="p" data-group-id="0263269107-3">)</samp><samp class="w">
</samp><samp class="mf">1.0</samp></code></pre>
  </section>
</section>
<section class="detail" id="last/1">

  <div class="detail-header">
    <a href="#last/1" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">last(string)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/string.ex#L2197" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> last(<a href="#t:t/0">t</a>()) :: <a href="#t:grapheme/0">grapheme</a>() | nil</pre>

      </div>

<p>Returns the last grapheme from a UTF-8 string,
<code class="inline">nil</code> if the string is empty.</p><p>It traverses the whole string to find its last grapheme.</p><h2 id="last/1-examples" class="section-heading"><a href="#last/1-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">last</samp><samp class="p" data-group-id="9064842146-1">(</samp><samp class="s">&quot;&quot;</samp><samp class="p" data-group-id="9064842146-1">)</samp><samp class="w">
</samp><samp class="no">nil</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">last</samp><samp class="p" data-group-id="9064842146-2">(</samp><samp class="s">&quot;elixir&quot;</samp><samp class="p" data-group-id="9064842146-2">)</samp><samp class="w">
</samp><samp class="s">&quot;r&quot;</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">last</samp><samp class="p" data-group-id="9064842146-3">(</samp><samp class="s">&quot;եոգլի&quot;</samp><samp class="p" data-group-id="9064842146-3">)</samp><samp class="w">
</samp><samp class="s">&quot;ի&quot;</samp></code></pre>
  </section>
</section>
<section class="detail" id="length/1">

  <div class="detail-header">
    <a href="#length/1" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">length(string)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/string.ex#L2218" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> length(<a href="#t:t/0">t</a>()) :: <a href="typespecs.xhtml#basic-types">non_neg_integer</a>()</pre>

      </div>

<p>Returns the number of Unicode graphemes in a UTF-8 string.</p><h2 id="length/1-examples" class="section-heading"><a href="#length/1-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">length</samp><samp class="p" data-group-id="3707194583-1">(</samp><samp class="s">&quot;elixir&quot;</samp><samp class="p" data-group-id="3707194583-1">)</samp><samp class="w">
</samp><samp class="mi">6</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">length</samp><samp class="p" data-group-id="3707194583-2">(</samp><samp class="s">&quot;եոգլի&quot;</samp><samp class="p" data-group-id="3707194583-2">)</samp><samp class="w">
</samp><samp class="mi">5</samp></code></pre>
  </section>
</section>
<section class="detail" id="match?/2">

  <div class="detail-header">
    <a href="#match?/2" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">match?(string, regex)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/string.ex#L2768" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> match?(<a href="#t:t/0">t</a>(), <a href="Regex.xhtml#t:t/0">Regex.t</a>()) :: <a href="typespecs.xhtml#built-in-types">boolean</a>()</pre>

      </div>

<p>Checks if <code class="inline">string</code> matches the given regular expression.</p><h2 id="match?/2-examples" class="section-heading"><a href="#match?/2-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">match?</samp><samp class="p" data-group-id="7721156122-1">(</samp><samp class="s">&quot;foo&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="sr">~r/foo/</samp><samp class="p" data-group-id="7721156122-1">)</samp><samp class="w">
</samp><samp class="no">true</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">match?</samp><samp class="p" data-group-id="7721156122-2">(</samp><samp class="s">&quot;bar&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="sr">~r/foo/</samp><samp class="p" data-group-id="7721156122-2">)</samp><samp class="w">
</samp><samp class="no">false</samp></code></pre><p>Elixir also provides text-based match operator <a href="Kernel.xhtml#=~/2"><code class="inline">=~/2</code></a> and function <a href="Regex.xhtml#match?/2"><code class="inline">Regex.match?/2</code></a> as
alternatives to test strings against regular expressions.</p>
  </section>
</section>
<section class="detail" id="myers_difference/2">

  <div class="detail-header">
    <a href="#myers_difference/2" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">myers_difference(string1, string2)</h1>

        <span class="note">(since 1.3.0)</span>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/string.ex#L3131" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> myers_difference(<a href="#t:t/0">t</a>(), <a href="#t:t/0">t</a>()) :: [{:eq | :ins | :del, <a href="#t:t/0">t</a>()}]</pre>

      </div>

<p>Returns a keyword list that represents an edit script.</p><p>Check <a href="List.xhtml#myers_difference/2"><code class="inline">List.myers_difference/2</code></a> for more information.</p><h2 id="myers_difference/2-examples" class="section-heading"><a href="#myers_difference/2-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="n">string1</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="s">&quot;fox hops over the dog&quot;</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="n">string2</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="s">&quot;fox jumps over the lazy cat&quot;</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">myers_difference</samp><samp class="p" data-group-id="4637848851-1">(</samp><samp class="n">string1</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">string2</samp><samp class="p" data-group-id="4637848851-1">)</samp><samp class="w">
</samp><samp class="p" data-group-id="4637848851-2">[</samp><samp class="ss">eq</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;fox &quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">del</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;ho&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">ins</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;jum&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">eq</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;ps over the &quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">del</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;dog&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">ins</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;lazy cat&quot;</samp><samp class="p" data-group-id="4637848851-2">]</samp></code></pre>
  </section>
</section>
<section class="detail" id="next_codepoint/1">

  <div class="detail-header">
    <a href="#next_codepoint/1" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">next_codepoint(arg)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/string.ex#L1826" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> next_codepoint(<a href="#t:t/0">t</a>()) :: {<a href="#t:codepoint/0">codepoint</a>(), <a href="#t:t/0">t</a>()} | nil</pre>

      </div>

<p>Returns the next code point in a string.</p><p>The result is a tuple with the code point and the
remainder of the string or <code class="inline">nil</code> in case
the string reached its end.</p><p>As with other functions in the <a href="String.xhtml"><code class="inline">String</code></a> module, <a href="#next_codepoint/1"><code class="inline">next_codepoint/1</code></a>
works with binaries that are invalid UTF-8. If the string starts
with a sequence of bytes that is not valid in UTF-8 encoding, the
first element of the returned tuple is a binary with the first byte.</p><h2 id="next_codepoint/1-examples" class="section-heading"><a href="#next_codepoint/1-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">next_codepoint</samp><samp class="p" data-group-id="7666494005-1">(</samp><samp class="s">&quot;olá&quot;</samp><samp class="p" data-group-id="7666494005-1">)</samp><samp class="w">
</samp><samp class="p" data-group-id="7666494005-2">{</samp><samp class="s">&quot;o&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;lá&quot;</samp><samp class="p" data-group-id="7666494005-2">}</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="n">invalid</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="s">&quot;</samp><samp class="se">\x</samp><samp class="s">80</samp><samp class="se">\x</samp><samp class="s">80OK&quot;</samp><samp class="w"> </samp><samp class="c1"># first two bytes are invalid in UTF-8</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="p" data-group-id="7666494005-3">{</samp><samp class="bp">_</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">rest</samp><samp class="p" data-group-id="7666494005-3">}</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">next_codepoint</samp><samp class="p" data-group-id="7666494005-4">(</samp><samp class="n">invalid</samp><samp class="p" data-group-id="7666494005-4">)</samp><samp class="w">
</samp><samp class="p" data-group-id="7666494005-5">{</samp><samp class="p" data-group-id="7666494005-6">&lt;&lt;</samp><samp class="mi">128</samp><samp class="p" data-group-id="7666494005-6">&gt;&gt;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="7666494005-7">&lt;&lt;</samp><samp class="mi">128</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">79</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">75</samp><samp class="p" data-group-id="7666494005-7">&gt;&gt;</samp><samp class="p" data-group-id="7666494005-5">}</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">next_codepoint</samp><samp class="p" data-group-id="7666494005-8">(</samp><samp class="n">rest</samp><samp class="p" data-group-id="7666494005-8">)</samp><samp class="w">
</samp><samp class="p" data-group-id="7666494005-9">{</samp><samp class="p" data-group-id="7666494005-10">&lt;&lt;</samp><samp class="mi">128</samp><samp class="p" data-group-id="7666494005-10">&gt;&gt;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;OK&quot;</samp><samp class="p" data-group-id="7666494005-9">}</samp></code></pre><h2 id="next_codepoint/1-comparison-with-binary-pattern-matching" class="section-heading"><a href="#next_codepoint/1-comparison-with-binary-pattern-matching" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Comparison with binary pattern matching</span></h2><p>Binary pattern matching provides a similar way to decompose
a string:</p><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="p" data-group-id="0464362402-1">&lt;&lt;</samp><samp class="n">codepoint</samp><samp class="o">::</samp><samp class="n">utf8</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">rest</samp><samp class="o">::</samp><samp class="n">binary</samp><samp class="p" data-group-id="0464362402-1">&gt;&gt;</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="s">&quot;Elixir&quot;</samp><samp class="w">
</samp><samp class="s">&quot;Elixir&quot;</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="n">codepoint</samp><samp class="w">
</samp><samp class="mi">69</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="n">rest</samp><samp class="w">
</samp><samp class="s">&quot;lixir&quot;</samp></code></pre><p>though not entirely equivalent because <code class="inline">codepoint</code> comes as
an integer, and the pattern won't match invalid UTF-8.</p><p>Binary pattern matching, however, is simpler and more efficient,
so pick the option that better suits your use case.</p>
  </section>
</section>
<section class="detail" id="next_grapheme/1">

  <div class="detail-header">
    <a href="#next_grapheme/1" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">next_grapheme(string)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/string.ex#L2116" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> next_grapheme(<a href="#t:t/0">t</a>()) :: {<a href="#t:grapheme/0">grapheme</a>(), <a href="#t:t/0">t</a>()} | nil</pre>

      </div>

<p>Returns the next grapheme in a string.</p><p>The result is a tuple with the grapheme and the
remainder of the string or <code class="inline">nil</code> in case
the String reached its end.</p><h2 id="next_grapheme/1-examples" class="section-heading"><a href="#next_grapheme/1-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">next_grapheme</samp><samp class="p" data-group-id="5538106687-1">(</samp><samp class="s">&quot;olá&quot;</samp><samp class="p" data-group-id="5538106687-1">)</samp><samp class="w">
</samp><samp class="p" data-group-id="5538106687-2">{</samp><samp class="s">&quot;o&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;lá&quot;</samp><samp class="p" data-group-id="5538106687-2">}</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">next_grapheme</samp><samp class="p" data-group-id="5538106687-3">(</samp><samp class="s">&quot;&quot;</samp><samp class="p" data-group-id="5538106687-3">)</samp><samp class="w">
</samp><samp class="no">nil</samp></code></pre>
  </section>
</section>
<section class="detail" id="next_grapheme_size/1">

  <div class="detail-header">
    <a href="#next_grapheme_size/1" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">next_grapheme_size(string)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/string.ex#L2143" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> next_grapheme_size(<a href="#t:t/0">t</a>()) :: {<a href="typespecs.xhtml#basic-types">pos_integer</a>(), <a href="#t:t/0">t</a>()} | nil</pre>

      </div>

<p>Returns the size (in bytes) of the next grapheme.</p><p>The result is a tuple with the next grapheme size in bytes and
the remainder of the string or <code class="inline">nil</code> in case the string
reached its end.</p><h2 id="next_grapheme_size/1-examples" class="section-heading"><a href="#next_grapheme_size/1-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">next_grapheme_size</samp><samp class="p" data-group-id="3973894817-1">(</samp><samp class="s">&quot;olá&quot;</samp><samp class="p" data-group-id="3973894817-1">)</samp><samp class="w">
</samp><samp class="p" data-group-id="3973894817-2">{</samp><samp class="mi">1</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;lá&quot;</samp><samp class="p" data-group-id="3973894817-2">}</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">next_grapheme_size</samp><samp class="p" data-group-id="3973894817-3">(</samp><samp class="s">&quot;&quot;</samp><samp class="p" data-group-id="3973894817-3">)</samp><samp class="w">
</samp><samp class="no">nil</samp></code></pre>
  </section>
</section>
<section class="detail" id="normalize/2">

  <div class="detail-header">
    <a href="#normalize/2" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">normalize(string, form)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/string.ex#L791" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> normalize(<a href="#t:t/0">t</a>(), :nfd | :nfc | :nfkd | :nfkc) :: <a href="#t:t/0">t</a>()</pre>

      </div>

<p>Converts all characters in <code class="inline">string</code> to Unicode normalization
form identified by <code class="inline">form</code>.</p><p>Invalid Unicode codepoints are skipped and the remaining of
the string is converted. If you want the algorithm to stop
and return on invalid codepoint, use <a href="https://www.erlang.org/doc/apps/stdlib/unicode.html#characters_to_nfd_binary/1"><code class="inline">:unicode.characters_to_nfd_binary/1</code></a>,
<a href="https://www.erlang.org/doc/apps/stdlib/unicode.html#characters_to_nfc_binary/1"><code class="inline">:unicode.characters_to_nfc_binary/1</code></a>, <a href="https://www.erlang.org/doc/apps/stdlib/unicode.html#characters_to_nfkd_binary/1"><code class="inline">:unicode.characters_to_nfkd_binary/1</code></a>,
and <a href="https://www.erlang.org/doc/apps/stdlib/unicode.html#characters_to_nfkc_binary/1"><code class="inline">:unicode.characters_to_nfkc_binary/1</code></a> instead.</p><p>Normalization forms <code class="inline">:nfkc</code> and <code class="inline">:nfkd</code> should not be blindly applied
to arbitrary text. Because they erase many formatting distinctions,
they will prevent round-trip conversion to and from many legacy
character sets.</p><h2 id="normalize/2-forms" class="section-heading"><a href="#normalize/2-forms" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Forms</span></h2><p>The supported forms are:</p><ul><li><p><code class="inline">:nfd</code> - Normalization Form Canonical Decomposition.
Characters are decomposed by canonical equivalence, and
multiple combining characters are arranged in a specific
order.</p></li><li><p><code class="inline">:nfc</code> - Normalization Form Canonical Composition.
Characters are decomposed and then recomposed by canonical equivalence.</p></li><li><p><code class="inline">:nfkd</code> - Normalization Form Compatibility Decomposition.
Characters are decomposed by compatibility equivalence, and
multiple combining characters are arranged in a specific
order.</p></li><li><p><code class="inline">:nfkc</code> - Normalization Form Compatibility Composition.
Characters are decomposed and then recomposed by compatibility equivalence.</p></li></ul><h2 id="normalize/2-examples" class="section-heading"><a href="#normalize/2-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">normalize</samp><samp class="p" data-group-id="6505402464-1">(</samp><samp class="s">&quot;yêṩ&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:nfd</samp><samp class="p" data-group-id="6505402464-1">)</samp><samp class="w">
</samp><samp class="s">&quot;yêṩ&quot;</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">normalize</samp><samp class="p" data-group-id="6505402464-2">(</samp><samp class="s">&quot;leña&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:nfc</samp><samp class="p" data-group-id="6505402464-2">)</samp><samp class="w">
</samp><samp class="s">&quot;leña&quot;</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">normalize</samp><samp class="p" data-group-id="6505402464-3">(</samp><samp class="s">&quot;ﬁ&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:nfkd</samp><samp class="p" data-group-id="6505402464-3">)</samp><samp class="w">
</samp><samp class="s">&quot;fi&quot;</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">normalize</samp><samp class="p" data-group-id="6505402464-4">(</samp><samp class="s">&quot;fi&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:nfkc</samp><samp class="p" data-group-id="6505402464-4">)</samp><samp class="w">
</samp><samp class="s">&quot;fi&quot;</samp></code></pre>
  </section>
</section>
<section class="detail" id="pad_leading/3">

    <span id="pad_leading/2"></span>

  <div class="detail-header">
    <a href="#pad_leading/3" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">pad_leading(string, count, padding \\ [&quot; &quot;])</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/string.ex#L1375" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> pad_leading(<a href="#t:t/0">t</a>(), <a href="typespecs.xhtml#basic-types">non_neg_integer</a>(), <a href="#t:t/0">t</a>() | [<a href="#t:t/0">t</a>()]) :: <a href="#t:t/0">t</a>()</pre>

      </div>

<p>Returns a new string padded with a leading filler
which is made of elements from the <code class="inline">padding</code>.</p><p>Passing a list of strings as <code class="inline">padding</code> will take one element of the list
for every missing entry. If the list is shorter than the number of inserts,
the filling will start again from the beginning of the list.
Passing a string <code class="inline">padding</code> is equivalent to passing the list of graphemes in it.
If no <code class="inline">padding</code> is given, it defaults to whitespace.</p><p>When <code class="inline">count</code> is less than or equal to the length of <code class="inline">string</code>,
given <code class="inline">string</code> is returned.</p><p>Raises <a href="ArgumentError.xhtml"><code class="inline">ArgumentError</code></a> if the given <code class="inline">padding</code> contains a non-string element.</p><h2 id="pad_leading/3-examples" class="section-heading"><a href="#pad_leading/3-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">pad_leading</samp><samp class="p" data-group-id="6672080235-1">(</samp><samp class="s">&quot;abc&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">5</samp><samp class="p" data-group-id="6672080235-1">)</samp><samp class="w">
</samp><samp class="s">&quot;  abc&quot;</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">pad_leading</samp><samp class="p" data-group-id="6672080235-2">(</samp><samp class="s">&quot;abc&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">4</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;12&quot;</samp><samp class="p" data-group-id="6672080235-2">)</samp><samp class="w">
</samp><samp class="s">&quot;1abc&quot;</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">pad_leading</samp><samp class="p" data-group-id="6672080235-3">(</samp><samp class="s">&quot;abc&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">6</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;12&quot;</samp><samp class="p" data-group-id="6672080235-3">)</samp><samp class="w">
</samp><samp class="s">&quot;121abc&quot;</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">pad_leading</samp><samp class="p" data-group-id="6672080235-4">(</samp><samp class="s">&quot;abc&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">5</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="6672080235-5">[</samp><samp class="s">&quot;1&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;23&quot;</samp><samp class="p" data-group-id="6672080235-5">]</samp><samp class="p" data-group-id="6672080235-4">)</samp><samp class="w">
</samp><samp class="s">&quot;123abc&quot;</samp></code></pre>
  </section>
</section>
<section class="detail" id="pad_trailing/3">

    <span id="pad_trailing/2"></span>

  <div class="detail-header">
    <a href="#pad_trailing/3" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">pad_trailing(string, count, padding \\ [&quot; &quot;])</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/string.ex#L1417" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> pad_trailing(<a href="#t:t/0">t</a>(), <a href="typespecs.xhtml#basic-types">non_neg_integer</a>(), <a href="#t:t/0">t</a>() | [<a href="#t:t/0">t</a>()]) :: <a href="#t:t/0">t</a>()</pre>

      </div>

<p>Returns a new string padded with a trailing filler
which is made of elements from the <code class="inline">padding</code>.</p><p>Passing a list of strings as <code class="inline">padding</code> will take one element of the list
for every missing entry. If the list is shorter than the number of inserts,
the filling will start again from the beginning of the list.
Passing a string <code class="inline">padding</code> is equivalent to passing the list of graphemes in it.
If no <code class="inline">padding</code> is given, it defaults to whitespace.</p><p>When <code class="inline">count</code> is less than or equal to the length of <code class="inline">string</code>,
given <code class="inline">string</code> is returned.</p><p>Raises <a href="ArgumentError.xhtml"><code class="inline">ArgumentError</code></a> if the given <code class="inline">padding</code> contains a non-string element.</p><h2 id="pad_trailing/3-examples" class="section-heading"><a href="#pad_trailing/3-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">pad_trailing</samp><samp class="p" data-group-id="1727745390-1">(</samp><samp class="s">&quot;abc&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">5</samp><samp class="p" data-group-id="1727745390-1">)</samp><samp class="w">
</samp><samp class="s">&quot;abc  &quot;</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">pad_trailing</samp><samp class="p" data-group-id="1727745390-2">(</samp><samp class="s">&quot;abc&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">4</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;12&quot;</samp><samp class="p" data-group-id="1727745390-2">)</samp><samp class="w">
</samp><samp class="s">&quot;abc1&quot;</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">pad_trailing</samp><samp class="p" data-group-id="1727745390-3">(</samp><samp class="s">&quot;abc&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">6</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;12&quot;</samp><samp class="p" data-group-id="1727745390-3">)</samp><samp class="w">
</samp><samp class="s">&quot;abc121&quot;</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">pad_trailing</samp><samp class="p" data-group-id="1727745390-4">(</samp><samp class="s">&quot;abc&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">5</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="1727745390-5">[</samp><samp class="s">&quot;1&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;23&quot;</samp><samp class="p" data-group-id="1727745390-5">]</samp><samp class="p" data-group-id="1727745390-4">)</samp><samp class="w">
</samp><samp class="s">&quot;abc123&quot;</samp></code></pre>
  </section>
</section>
<section class="detail" id="printable?/2">

    <span id="printable?/1"></span>

  <div class="detail-header">
    <a href="#printable?/2" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">printable?(string, character_limit \\ :infinity)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/string.ex#L322" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> printable?(<a href="#t:t/0">t</a>(), 0) :: true</pre>

          <pre translate="no"><span class="attribute">@spec</span> printable?(<a href="#t:t/0">t</a>(), <a href="typespecs.xhtml#basic-types">pos_integer</a>() | :infinity) :: <a href="typespecs.xhtml#built-in-types">boolean</a>()</pre>

      </div>

<p>Checks if a string contains only printable characters up to <code class="inline">character_limit</code>.</p><p>Takes an optional <code class="inline">character_limit</code> as a second argument. If <code class="inline">character_limit</code> is <code class="inline">0</code>, this
function will return <code class="inline">true</code>.</p><h2 id="printable?/2-examples" class="section-heading"><a href="#printable?/2-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">printable?</samp><samp class="p" data-group-id="7951443412-1">(</samp><samp class="s">&quot;abc&quot;</samp><samp class="p" data-group-id="7951443412-1">)</samp><samp class="w">
</samp><samp class="no">true</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">printable?</samp><samp class="p" data-group-id="7951443412-2">(</samp><samp class="s">&quot;abc&quot;</samp><samp class="w"> </samp><samp class="o">&lt;&gt;</samp><samp class="w"> </samp><samp class="p" data-group-id="7951443412-3">&lt;&lt;</samp><samp class="mi">0</samp><samp class="p" data-group-id="7951443412-3">&gt;&gt;</samp><samp class="p" data-group-id="7951443412-2">)</samp><samp class="w">
</samp><samp class="no">false</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">printable?</samp><samp class="p" data-group-id="7951443412-4">(</samp><samp class="s">&quot;abc&quot;</samp><samp class="w"> </samp><samp class="o">&lt;&gt;</samp><samp class="w"> </samp><samp class="p" data-group-id="7951443412-5">&lt;&lt;</samp><samp class="mi">0</samp><samp class="p" data-group-id="7951443412-5">&gt;&gt;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">2</samp><samp class="p" data-group-id="7951443412-4">)</samp><samp class="w">
</samp><samp class="no">true</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">printable?</samp><samp class="p" data-group-id="7951443412-6">(</samp><samp class="s">&quot;abc&quot;</samp><samp class="w"> </samp><samp class="o">&lt;&gt;</samp><samp class="w"> </samp><samp class="p" data-group-id="7951443412-7">&lt;&lt;</samp><samp class="mi">0</samp><samp class="p" data-group-id="7951443412-7">&gt;&gt;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">0</samp><samp class="p" data-group-id="7951443412-6">)</samp><samp class="w">
</samp><samp class="no">true</samp></code></pre>
  </section>
</section>
<section class="detail" id="replace/4">

    <span id="replace/3"></span>

  <div class="detail-header">
    <a href="#replace/4" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">replace(subject, pattern, replacement, options \\ [])</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/string.ex#L1571" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> replace(<a href="#t:t/0">t</a>(), <a href="#t:pattern/0">pattern</a>() | <a href="Regex.xhtml#t:t/0">Regex.t</a>(), <a href="#t:t/0">t</a>() | (<a href="#t:t/0">t</a>() -&gt; <a href="#t:t/0">t</a>() | <a href="typespecs.xhtml#built-in-types">iodata</a>()), <a href="typespecs.xhtml#built-in-types">keyword</a>()) ::
  <a href="#t:t/0">t</a>()</pre>

      </div>

<p>Returns a new string created by replacing occurrences of <code class="inline">pattern</code> in
<code class="inline">subject</code> with <code class="inline">replacement</code>.</p><p>The <code class="inline">subject</code> is always a string.</p><p>The <code class="inline">pattern</code> may be a string, a list of strings, a regular expression, or a
compiled pattern.</p><p>The <code class="inline">replacement</code> may be a string or a function that receives the matched
pattern and must return the replacement as a string or iodata.</p><p>By default it replaces all occurrences but this behavior can be controlled
through the <code class="inline">:global</code> option; see the &quot;Options&quot; section below.</p><h2 id="replace/4-options" class="section-heading"><a href="#replace/4-options" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Options</span></h2><ul><li><code class="inline">:global</code> - (boolean) if <code class="inline">true</code>, all occurrences of <code class="inline">pattern</code> are replaced
with <code class="inline">replacement</code>, otherwise only the first occurrence is
replaced. Defaults to <code class="inline">true</code></li></ul><h2 id="replace/4-examples" class="section-heading"><a href="#replace/4-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">replace</samp><samp class="p" data-group-id="9921475473-1">(</samp><samp class="s">&quot;a,b,c&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;,&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;-&quot;</samp><samp class="p" data-group-id="9921475473-1">)</samp><samp class="w">
</samp><samp class="s">&quot;a-b-c&quot;</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">replace</samp><samp class="p" data-group-id="9921475473-2">(</samp><samp class="s">&quot;a,b,c&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;,&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;-&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">global</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">false</samp><samp class="p" data-group-id="9921475473-2">)</samp><samp class="w">
</samp><samp class="s">&quot;a-b,c&quot;</samp></code></pre><p>The pattern may also be a list of strings and the replacement may also
be a function that receives the matches:</p><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">replace</samp><samp class="p" data-group-id="6970052430-1">(</samp><samp class="s">&quot;a,b,c&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="6970052430-2">[</samp><samp class="s">&quot;a&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;c&quot;</samp><samp class="p" data-group-id="6970052430-2">]</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="k" data-group-id="6970052430-3">fn</samp><samp class="w"> </samp><samp class="p" data-group-id="6970052430-4">&lt;&lt;</samp><samp class="n">char</samp><samp class="p" data-group-id="6970052430-4">&gt;&gt;</samp><samp class="w"> </samp><samp class="o">-&gt;</samp><samp class="w"> </samp><samp class="p" data-group-id="6970052430-5">&lt;&lt;</samp><samp class="n">char</samp><samp class="w"> </samp><samp class="o">+</samp><samp class="w"> </samp><samp class="mi">1</samp><samp class="p" data-group-id="6970052430-5">&gt;&gt;</samp><samp class="w"> </samp><samp class="k" data-group-id="6970052430-3">end</samp><samp class="p" data-group-id="6970052430-1">)</samp><samp class="w">
</samp><samp class="s">&quot;b,b,d&quot;</samp></code></pre><p>When the pattern is a regular expression, one can give <code class="inline">\N</code> or
<code class="inline">\g{N}</code> in the <code class="inline">replacement</code> string to access a specific capture in the
regular expression:</p><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">replace</samp><samp class="p" data-group-id="2415455548-1">(</samp><samp class="s">&quot;a,b,c&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="sr">~r/,(.)/</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;,</samp><samp class="se">\\</samp><samp class="s">1</samp><samp class="se">\\</samp><samp class="s">g{1}&quot;</samp><samp class="p" data-group-id="2415455548-1">)</samp><samp class="w">
</samp><samp class="s">&quot;a,bb,cc&quot;</samp></code></pre><p>Note that we had to escape the backslash escape character (i.e., we used <code class="inline">\\N</code>
instead of just <code class="inline">\N</code> to escape the backslash; same thing for <code class="inline">\\g{N}</code>). By
giving <code class="inline">\0</code>, one can inject the whole match in the replacement string.</p><p>A compiled pattern can also be given:</p><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="n">pattern</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="nc">:binary</samp><samp class="o">.</samp><samp class="n">compile_pattern</samp><samp class="p" data-group-id="4248139140-1">(</samp><samp class="s">&quot;,&quot;</samp><samp class="p" data-group-id="4248139140-1">)</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">replace</samp><samp class="p" data-group-id="4248139140-2">(</samp><samp class="s">&quot;a,b,c&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">pattern</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;[]&quot;</samp><samp class="p" data-group-id="4248139140-2">)</samp><samp class="w">
</samp><samp class="s">&quot;a[]b[]c&quot;</samp></code></pre><p>When an empty string is provided as a <code class="inline">pattern</code>, the function will treat it as
an implicit empty string between each grapheme and the string will be
interspersed. If an empty string is provided as <code class="inline">replacement</code> the <code class="inline">subject</code>
will be returned:</p><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">replace</samp><samp class="p" data-group-id="4911823532-1">(</samp><samp class="s">&quot;ELIXIR&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;.&quot;</samp><samp class="p" data-group-id="4911823532-1">)</samp><samp class="w">
</samp><samp class="s">&quot;.E.L.I.X.I.R.&quot;</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">replace</samp><samp class="p" data-group-id="4911823532-2">(</samp><samp class="s">&quot;ELIXIR&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;&quot;</samp><samp class="p" data-group-id="4911823532-2">)</samp><samp class="w">
</samp><samp class="s">&quot;ELIXIR&quot;</samp></code></pre><p>Be aware that this function can replace within or across grapheme boundaries.
For example, take the grapheme &quot;é&quot; which is made of the characters
&quot;e&quot; and the acute accent. The following will replace only the letter &quot;e&quot;,
moving the accent to the letter &quot;o&quot;:</p><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">replace</samp><samp class="p" data-group-id="6102735241-1">(</samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">normalize</samp><samp class="p" data-group-id="6102735241-2">(</samp><samp class="s">&quot;é&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:nfd</samp><samp class="p" data-group-id="6102735241-2">)</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;e&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;o&quot;</samp><samp class="p" data-group-id="6102735241-1">)</samp><samp class="w">
</samp><samp class="s">&quot;ó&quot;</samp></code></pre><p>However, if &quot;é&quot; is represented by the single character &quot;e with acute&quot;
accent, then it won't be replaced at all:</p><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">replace</samp><samp class="p" data-group-id="1589418762-1">(</samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">normalize</samp><samp class="p" data-group-id="1589418762-2">(</samp><samp class="s">&quot;é&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:nfc</samp><samp class="p" data-group-id="1589418762-2">)</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;e&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;o&quot;</samp><samp class="p" data-group-id="1589418762-1">)</samp><samp class="w">
</samp><samp class="s">&quot;é&quot;</samp></code></pre>
  </section>
</section>
<section class="detail" id="replace_invalid/2">

    <span id="replace_invalid/1"></span>

  <div class="detail-header">
    <a href="#replace_invalid/2" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">replace_invalid(bytes, replacement \\ &quot;�&quot;)</h1>

        <span class="note">(since 1.16.0)</span>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/string.ex#L1934" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> replace_invalid(<a href="typespecs.xhtml#built-in-types">binary</a>(), <a href="#t:t/0">t</a>()) :: <a href="#t:t/0">t</a>()</pre>

      </div>

<p>Returns a new string created by replacing all invalid bytes with <code class="inline">replacement</code> (<code class="inline">&quot;�&quot;</code> by default).</p><h2 id="replace_invalid/2-examples" class="section-heading"><a href="#replace_invalid/2-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">replace_invalid</samp><samp class="p" data-group-id="0127404222-1">(</samp><samp class="s">&quot;asd&quot;</samp><samp class="w"> </samp><samp class="o">&lt;&gt;</samp><samp class="w"> </samp><samp class="p" data-group-id="0127404222-2">&lt;&lt;</samp><samp class="mh">0xFF</samp><samp class="o">::</samp><samp class="mi">8</samp><samp class="p" data-group-id="0127404222-2">&gt;&gt;</samp><samp class="p" data-group-id="0127404222-1">)</samp><samp class="w">
</samp><samp class="s">&quot;asd�&quot;</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">replace_invalid</samp><samp class="p" data-group-id="0127404222-3">(</samp><samp class="s">&quot;nem rán bề bề&quot;</samp><samp class="p" data-group-id="0127404222-3">)</samp><samp class="w">
</samp><samp class="s">&quot;nem rán bề bề&quot;</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">replace_invalid</samp><samp class="p" data-group-id="0127404222-4">(</samp><samp class="s">&quot;nem rán b&quot;</samp><samp class="w"> </samp><samp class="o">&lt;&gt;</samp><samp class="w"> </samp><samp class="p" data-group-id="0127404222-5">&lt;&lt;</samp><samp class="mi">225</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">187</samp><samp class="p" data-group-id="0127404222-5">&gt;&gt;</samp><samp class="w"> </samp><samp class="o">&lt;&gt;</samp><samp class="w"> </samp><samp class="s">&quot; bề&quot;</samp><samp class="p" data-group-id="0127404222-4">)</samp><samp class="w">
</samp><samp class="s">&quot;nem rán b� bề&quot;</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">replace_invalid</samp><samp class="p" data-group-id="0127404222-6">(</samp><samp class="s">&quot;nem rán b&quot;</samp><samp class="w"> </samp><samp class="o">&lt;&gt;</samp><samp class="w"> </samp><samp class="p" data-group-id="0127404222-7">&lt;&lt;</samp><samp class="mi">225</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">187</samp><samp class="p" data-group-id="0127404222-7">&gt;&gt;</samp><samp class="w"> </samp><samp class="o">&lt;&gt;</samp><samp class="w"> </samp><samp class="s">&quot; bề&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;ERROR!&quot;</samp><samp class="p" data-group-id="0127404222-6">)</samp><samp class="w">
</samp><samp class="s">&quot;nem rán bERROR! bề&quot;</samp></code></pre>
  </section>
</section>
<section class="detail" id="replace_leading/3">

  <div class="detail-header">
    <a href="#replace_leading/3" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">replace_leading(string, match, replacement)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/string.ex#L1041" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> replace_leading(<a href="#t:t/0">t</a>(), <a href="#t:t/0">t</a>(), <a href="#t:t/0">t</a>()) :: <a href="#t:t/0">t</a>()</pre>

      </div>

<p>Replaces all leading occurrences of <code class="inline">match</code> by <code class="inline">replacement</code> of <code class="inline">match</code> in <code class="inline">string</code>.</p><p>Returns the string untouched if there are no occurrences.</p><p>If <code class="inline">match</code> is <code class="inline">&quot;&quot;</code>, this function raises an <a href="ArgumentError.xhtml"><code class="inline">ArgumentError</code></a> exception: this
happens because this function replaces <strong>all</strong> the occurrences of <code class="inline">match</code> at
the beginning of <code class="inline">string</code>, and it's impossible to replace &quot;multiple&quot;
occurrences of <code class="inline">&quot;&quot;</code>.</p><h2 id="replace_leading/3-examples" class="section-heading"><a href="#replace_leading/3-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">replace_leading</samp><samp class="p" data-group-id="4013561305-1">(</samp><samp class="s">&quot;hello world&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;hello &quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;&quot;</samp><samp class="p" data-group-id="4013561305-1">)</samp><samp class="w">
</samp><samp class="s">&quot;world&quot;</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">replace_leading</samp><samp class="p" data-group-id="4013561305-2">(</samp><samp class="s">&quot;hello hello world&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;hello &quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;&quot;</samp><samp class="p" data-group-id="4013561305-2">)</samp><samp class="w">
</samp><samp class="s">&quot;world&quot;</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">replace_leading</samp><samp class="p" data-group-id="4013561305-3">(</samp><samp class="s">&quot;hello world&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;hello &quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;ola &quot;</samp><samp class="p" data-group-id="4013561305-3">)</samp><samp class="w">
</samp><samp class="s">&quot;ola world&quot;</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">replace_leading</samp><samp class="p" data-group-id="4013561305-4">(</samp><samp class="s">&quot;hello hello world&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;hello &quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;ola &quot;</samp><samp class="p" data-group-id="4013561305-4">)</samp><samp class="w">
</samp><samp class="s">&quot;ola ola world&quot;</samp></code></pre><p>This function can replace across grapheme boundaries. See <a href="#replace/3"><code class="inline">replace/3</code></a>
for more information and examples.</p>
  </section>
</section>
<section class="detail" id="replace_prefix/3">

  <div class="detail-header">
    <a href="#replace_prefix/3" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">replace_prefix(string, match, replacement)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/string.ex#L1162" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> replace_prefix(<a href="#t:t/0">t</a>(), <a href="#t:t/0">t</a>(), <a href="#t:t/0">t</a>()) :: <a href="#t:t/0">t</a>()</pre>

      </div>

<p>Replaces prefix in <code class="inline">string</code> by <code class="inline">replacement</code> if it matches <code class="inline">match</code>.</p><p>Returns the string untouched if there is no match. If <code class="inline">match</code> is an empty
string (<code class="inline">&quot;&quot;</code>), <code class="inline">replacement</code> is just prepended to <code class="inline">string</code>.</p><h2 id="replace_prefix/3-examples" class="section-heading"><a href="#replace_prefix/3-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">replace_prefix</samp><samp class="p" data-group-id="7992392209-1">(</samp><samp class="s">&quot;world&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;hello &quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;&quot;</samp><samp class="p" data-group-id="7992392209-1">)</samp><samp class="w">
</samp><samp class="s">&quot;world&quot;</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">replace_prefix</samp><samp class="p" data-group-id="7992392209-2">(</samp><samp class="s">&quot;hello world&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;hello &quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;&quot;</samp><samp class="p" data-group-id="7992392209-2">)</samp><samp class="w">
</samp><samp class="s">&quot;world&quot;</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">replace_prefix</samp><samp class="p" data-group-id="7992392209-3">(</samp><samp class="s">&quot;hello hello world&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;hello &quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;&quot;</samp><samp class="p" data-group-id="7992392209-3">)</samp><samp class="w">
</samp><samp class="s">&quot;hello world&quot;</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">replace_prefix</samp><samp class="p" data-group-id="7992392209-4">(</samp><samp class="s">&quot;world&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;hello &quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;ola &quot;</samp><samp class="p" data-group-id="7992392209-4">)</samp><samp class="w">
</samp><samp class="s">&quot;world&quot;</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">replace_prefix</samp><samp class="p" data-group-id="7992392209-5">(</samp><samp class="s">&quot;hello world&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;hello &quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;ola &quot;</samp><samp class="p" data-group-id="7992392209-5">)</samp><samp class="w">
</samp><samp class="s">&quot;ola world&quot;</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">replace_prefix</samp><samp class="p" data-group-id="7992392209-6">(</samp><samp class="s">&quot;hello hello world&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;hello &quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;ola &quot;</samp><samp class="p" data-group-id="7992392209-6">)</samp><samp class="w">
</samp><samp class="s">&quot;ola hello world&quot;</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">replace_prefix</samp><samp class="p" data-group-id="7992392209-7">(</samp><samp class="s">&quot;world&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;hello &quot;</samp><samp class="p" data-group-id="7992392209-7">)</samp><samp class="w">
</samp><samp class="s">&quot;hello world&quot;</samp></code></pre><p>This function can replace across grapheme boundaries. See <a href="#replace/3"><code class="inline">replace/3</code></a>
for more information and examples.</p>
  </section>
</section>
<section class="detail" id="replace_suffix/3">

  <div class="detail-header">
    <a href="#replace_suffix/3" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">replace_suffix(string, match, replacement)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/string.ex#L1204" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> replace_suffix(<a href="#t:t/0">t</a>(), <a href="#t:t/0">t</a>(), <a href="#t:t/0">t</a>()) :: <a href="#t:t/0">t</a>()</pre>

      </div>

<p>Replaces suffix in <code class="inline">string</code> by <code class="inline">replacement</code> if it matches <code class="inline">match</code>.</p><p>Returns the string untouched if there is no match. If <code class="inline">match</code> is an empty
string (<code class="inline">&quot;&quot;</code>), <code class="inline">replacement</code> is just appended to <code class="inline">string</code>.</p><h2 id="replace_suffix/3-examples" class="section-heading"><a href="#replace_suffix/3-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">replace_suffix</samp><samp class="p" data-group-id="7162885827-1">(</samp><samp class="s">&quot;hello&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot; world&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;&quot;</samp><samp class="p" data-group-id="7162885827-1">)</samp><samp class="w">
</samp><samp class="s">&quot;hello&quot;</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">replace_suffix</samp><samp class="p" data-group-id="7162885827-2">(</samp><samp class="s">&quot;hello world&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot; world&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;&quot;</samp><samp class="p" data-group-id="7162885827-2">)</samp><samp class="w">
</samp><samp class="s">&quot;hello&quot;</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">replace_suffix</samp><samp class="p" data-group-id="7162885827-3">(</samp><samp class="s">&quot;hello world world&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot; world&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;&quot;</samp><samp class="p" data-group-id="7162885827-3">)</samp><samp class="w">
</samp><samp class="s">&quot;hello world&quot;</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">replace_suffix</samp><samp class="p" data-group-id="7162885827-4">(</samp><samp class="s">&quot;hello&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot; world&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot; mundo&quot;</samp><samp class="p" data-group-id="7162885827-4">)</samp><samp class="w">
</samp><samp class="s">&quot;hello&quot;</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">replace_suffix</samp><samp class="p" data-group-id="7162885827-5">(</samp><samp class="s">&quot;hello world&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot; world&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot; mundo&quot;</samp><samp class="p" data-group-id="7162885827-5">)</samp><samp class="w">
</samp><samp class="s">&quot;hello mundo&quot;</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">replace_suffix</samp><samp class="p" data-group-id="7162885827-6">(</samp><samp class="s">&quot;hello world world&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot; world&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot; mundo&quot;</samp><samp class="p" data-group-id="7162885827-6">)</samp><samp class="w">
</samp><samp class="s">&quot;hello world mundo&quot;</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">replace_suffix</samp><samp class="p" data-group-id="7162885827-7">(</samp><samp class="s">&quot;hello&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot; world&quot;</samp><samp class="p" data-group-id="7162885827-7">)</samp><samp class="w">
</samp><samp class="s">&quot;hello world&quot;</samp></code></pre><p>This function can replace across grapheme boundaries. See <a href="#replace/3"><code class="inline">replace/3</code></a>
for more information and examples.</p>
  </section>
</section>
<section class="detail" id="replace_trailing/3">

  <div class="detail-header">
    <a href="#replace_trailing/3" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">replace_trailing(string, match, replacement)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/string.ex#L1100" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> replace_trailing(<a href="#t:t/0">t</a>(), <a href="#t:t/0">t</a>(), <a href="#t:t/0">t</a>()) :: <a href="#t:t/0">t</a>()</pre>

      </div>

<p>Replaces all trailing occurrences of <code class="inline">match</code> by <code class="inline">replacement</code> in <code class="inline">string</code>.</p><p>Returns the string untouched if there are no occurrences.</p><p>If <code class="inline">match</code> is <code class="inline">&quot;&quot;</code>, this function raises an <a href="ArgumentError.xhtml"><code class="inline">ArgumentError</code></a> exception: this
happens because this function replaces <strong>all</strong> the occurrences of <code class="inline">match</code> at
the end of <code class="inline">string</code>, and it's impossible to replace &quot;multiple&quot; occurrences of
<code class="inline">&quot;&quot;</code>.</p><h2 id="replace_trailing/3-examples" class="section-heading"><a href="#replace_trailing/3-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">replace_trailing</samp><samp class="p" data-group-id="5526813639-1">(</samp><samp class="s">&quot;hello world&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot; world&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;&quot;</samp><samp class="p" data-group-id="5526813639-1">)</samp><samp class="w">
</samp><samp class="s">&quot;hello&quot;</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">replace_trailing</samp><samp class="p" data-group-id="5526813639-2">(</samp><samp class="s">&quot;hello world world&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot; world&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;&quot;</samp><samp class="p" data-group-id="5526813639-2">)</samp><samp class="w">
</samp><samp class="s">&quot;hello&quot;</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">replace_trailing</samp><samp class="p" data-group-id="5526813639-3">(</samp><samp class="s">&quot;hello world&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot; world&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot; mundo&quot;</samp><samp class="p" data-group-id="5526813639-3">)</samp><samp class="w">
</samp><samp class="s">&quot;hello mundo&quot;</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">replace_trailing</samp><samp class="p" data-group-id="5526813639-4">(</samp><samp class="s">&quot;hello world world&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot; world&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot; mundo&quot;</samp><samp class="p" data-group-id="5526813639-4">)</samp><samp class="w">
</samp><samp class="s">&quot;hello mundo mundo&quot;</samp></code></pre><p>This function can replace across grapheme boundaries. See <a href="#replace/3"><code class="inline">replace/3</code></a>
for more information and examples.</p>
  </section>
</section>
<section class="detail" id="reverse/1">

  <div class="detail-header">
    <a href="#reverse/1" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">reverse(string)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/string.ex#L1707" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> reverse(<a href="#t:t/0">t</a>()) :: <a href="#t:t/0">t</a>()</pre>

      </div>

<p>Reverses the graphemes in given string.</p><h2 id="reverse/1-examples" class="section-heading"><a href="#reverse/1-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">reverse</samp><samp class="p" data-group-id="6126110107-1">(</samp><samp class="s">&quot;abcd&quot;</samp><samp class="p" data-group-id="6126110107-1">)</samp><samp class="w">
</samp><samp class="s">&quot;dcba&quot;</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">reverse</samp><samp class="p" data-group-id="6126110107-2">(</samp><samp class="s">&quot;hello world&quot;</samp><samp class="p" data-group-id="6126110107-2">)</samp><samp class="w">
</samp><samp class="s">&quot;dlrow olleh&quot;</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">reverse</samp><samp class="p" data-group-id="6126110107-3">(</samp><samp class="s">&quot;hello ∂og&quot;</samp><samp class="p" data-group-id="6126110107-3">)</samp><samp class="w">
</samp><samp class="s">&quot;go∂ olleh&quot;</samp></code></pre><p>Keep in mind reversing the same string twice does
not necessarily yield the original string:</p><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="s">&quot;̀e&quot;</samp><samp class="w">
</samp><samp class="s">&quot;̀e&quot;</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">reverse</samp><samp class="p" data-group-id="4901469169-1">(</samp><samp class="s">&quot;̀e&quot;</samp><samp class="p" data-group-id="4901469169-1">)</samp><samp class="w">
</samp><samp class="s">&quot;è&quot;</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">reverse</samp><samp class="p" data-group-id="4901469169-2">(</samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">reverse</samp><samp class="p" data-group-id="4901469169-3">(</samp><samp class="s">&quot;̀e&quot;</samp><samp class="p" data-group-id="4901469169-3">)</samp><samp class="p" data-group-id="4901469169-2">)</samp><samp class="w">
</samp><samp class="s">&quot;è&quot;</samp></code></pre><p>In the first example the accent is before the vowel, so
it is considered two graphemes. However, when you reverse
it once, you have the vowel followed by the accent, which
becomes one grapheme. Reversing it again will keep it as
one single grapheme.</p>
  </section>
</section>
<section class="detail" id="slice/2">

  <div class="detail-header">
    <a href="#slice/2" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">slice(string, range)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/string.ex#L2420" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> slice(<a href="#t:t/0">t</a>(), <a href="Range.xhtml#t:t/0">Range.t</a>()) :: <a href="#t:t/0">t</a>()</pre>

      </div>

<p>Returns a substring from the offset given by the start of the
range to the offset given by the end of the range.</p><p>This function works on Unicode graphemes. For example, slicing the first
three characters of the string &quot;héllo&quot; will return &quot;hél&quot;, which internally
is represented by more than three bytes. Use <a href="#byte_slice/3"><code class="inline">String.byte_slice/3</code></a> if you
want to slice by a given number of bytes, while respecting the codepoint
boundaries. If you want to work on raw bytes, check <a href="Kernel.xhtml#binary_part/3"><code class="inline">Kernel.binary_part/3</code></a>
or <a href="Kernel.xhtml#binary_slice/3"><code class="inline">Kernel.binary_slice/3</code></a> instead.</p><p>If the start of the range is not a valid offset for the given
string or if the range is in reverse order, returns <code class="inline">&quot;&quot;</code>.</p><p>If the start or end of the range is negative, the whole string
is traversed first in order to convert the negative indices into
positive ones.</p><h2 id="slice/2-examples" class="section-heading"><a href="#slice/2-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">slice</samp><samp class="p" data-group-id="6482741773-1">(</samp><samp class="s">&quot;elixir&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">1</samp><samp class="o">..</samp><samp class="mi">3</samp><samp class="p" data-group-id="6482741773-1">)</samp><samp class="w">
</samp><samp class="s">&quot;lix&quot;</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">slice</samp><samp class="p" data-group-id="6482741773-2">(</samp><samp class="s">&quot;elixir&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">1</samp><samp class="o">..</samp><samp class="mi">10</samp><samp class="p" data-group-id="6482741773-2">)</samp><samp class="w">
</samp><samp class="s">&quot;lixir&quot;</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">slice</samp><samp class="p" data-group-id="6482741773-3">(</samp><samp class="s">&quot;elixir&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="o">-</samp><samp class="mi">4</samp><samp class="o">..</samp><samp class="o">-</samp><samp class="mi">1</samp><samp class="p" data-group-id="6482741773-3">)</samp><samp class="w">
</samp><samp class="s">&quot;ixir&quot;</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">slice</samp><samp class="p" data-group-id="6482741773-4">(</samp><samp class="s">&quot;elixir&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="o">-</samp><samp class="mi">4</samp><samp class="o">..</samp><samp class="mi">6</samp><samp class="p" data-group-id="6482741773-4">)</samp><samp class="w">
</samp><samp class="s">&quot;ixir&quot;</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">slice</samp><samp class="p" data-group-id="6482741773-5">(</samp><samp class="s">&quot;elixir&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="o">-</samp><samp class="mi">100</samp><samp class="o">..</samp><samp class="mi">100</samp><samp class="p" data-group-id="6482741773-5">)</samp><samp class="w">
</samp><samp class="s">&quot;elixir&quot;</samp></code></pre><p>For ranges where <code class="inline">start &gt; stop</code>, you need to explicitly
mark them as increasing:</p><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">slice</samp><samp class="p" data-group-id="7065830447-1">(</samp><samp class="s">&quot;elixir&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">2</samp><samp class="o">..</samp><samp class="o">-</samp><samp class="mi">1</samp><samp class="o">//</samp><samp class="mi">1</samp><samp class="p" data-group-id="7065830447-1">)</samp><samp class="w">
</samp><samp class="s">&quot;ixir&quot;</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">slice</samp><samp class="p" data-group-id="7065830447-2">(</samp><samp class="s">&quot;elixir&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">1</samp><samp class="o">..</samp><samp class="o">-</samp><samp class="mi">2</samp><samp class="o">//</samp><samp class="mi">1</samp><samp class="p" data-group-id="7065830447-2">)</samp><samp class="w">
</samp><samp class="s">&quot;lixi&quot;</samp></code></pre><p>You can use <a href="Kernel.xhtml#../0"><code class="inline">../0</code></a> as a shortcut for <code class="inline">0..-1//1</code>, which returns
the whole string as is:</p><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">slice</samp><samp class="p" data-group-id="2973337723-1">(</samp><samp class="s">&quot;elixir&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="o">..</samp><samp class="p" data-group-id="2973337723-1">)</samp><samp class="w">
</samp><samp class="s">&quot;elixir&quot;</samp></code></pre><p>The step can be any positive number. For example, to
get every 2 characters of the string:</p><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">slice</samp><samp class="p" data-group-id="8128933027-1">(</samp><samp class="s">&quot;elixir&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">0</samp><samp class="o">..</samp><samp class="o">-</samp><samp class="mi">1</samp><samp class="o">//</samp><samp class="mi">2</samp><samp class="p" data-group-id="8128933027-1">)</samp><samp class="w">
</samp><samp class="s">&quot;eii&quot;</samp></code></pre><p>If the first position is after the string ends or after
the last position of the range, it returns an empty string:</p><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">slice</samp><samp class="p" data-group-id="6672463036-1">(</samp><samp class="s">&quot;elixir&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">10</samp><samp class="o">..</samp><samp class="mi">3</samp><samp class="o">//</samp><samp class="mi">1</samp><samp class="p" data-group-id="6672463036-1">)</samp><samp class="w">
</samp><samp class="s">&quot;&quot;</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">slice</samp><samp class="p" data-group-id="6672463036-2">(</samp><samp class="s">&quot;a&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">1</samp><samp class="o">..</samp><samp class="mi">1500</samp><samp class="p" data-group-id="6672463036-2">)</samp><samp class="w">
</samp><samp class="s">&quot;&quot;</samp></code></pre>
  </section>
</section>
<section class="detail" id="slice/3">

  <div class="detail-header">
    <a href="#slice/3" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">slice(string, start, length)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/string.ex#L2333" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> slice(<a href="#t:t/0">t</a>(), <a href="typespecs.xhtml#basic-types">integer</a>(), <a href="typespecs.xhtml#basic-types">non_neg_integer</a>()) :: <a href="#t:grapheme/0">grapheme</a>()</pre>

      </div>

<p>Returns a substring starting at the offset <code class="inline">start</code>, and of the given <code class="inline">length</code>.</p><p>This function works on Unicode graphemes. For example, slicing the first
three characters of the string &quot;héllo&quot; will return &quot;hél&quot;, which internally
is represented by more than three bytes. Use <a href="#byte_slice/3"><code class="inline">String.byte_slice/3</code></a> if you
want to slice by a given number of bytes, while respecting the codepoint
boundaries. If you want to work on raw bytes, check <a href="Kernel.xhtml#binary_part/3"><code class="inline">Kernel.binary_part/3</code></a>
or <a href="Kernel.xhtml#binary_slice/3"><code class="inline">Kernel.binary_slice/3</code></a> instead.</p><p>If the offset is greater than string length, then it returns <code class="inline">&quot;&quot;</code>.</p><h2 id="slice/3-examples" class="section-heading"><a href="#slice/3-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">slice</samp><samp class="p" data-group-id="9075328167-1">(</samp><samp class="s">&quot;elixir&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">1</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">3</samp><samp class="p" data-group-id="9075328167-1">)</samp><samp class="w">
</samp><samp class="s">&quot;lix&quot;</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">slice</samp><samp class="p" data-group-id="9075328167-2">(</samp><samp class="s">&quot;elixir&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">1</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">10</samp><samp class="p" data-group-id="9075328167-2">)</samp><samp class="w">
</samp><samp class="s">&quot;lixir&quot;</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">slice</samp><samp class="p" data-group-id="9075328167-3">(</samp><samp class="s">&quot;elixir&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">10</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">3</samp><samp class="p" data-group-id="9075328167-3">)</samp><samp class="w">
</samp><samp class="s">&quot;&quot;</samp></code></pre><p>If the start position is negative, it is normalized
against the string length and clamped to 0:</p><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">slice</samp><samp class="p" data-group-id="1771423341-1">(</samp><samp class="s">&quot;elixir&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="o">-</samp><samp class="mi">4</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">4</samp><samp class="p" data-group-id="1771423341-1">)</samp><samp class="w">
</samp><samp class="s">&quot;ixir&quot;</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">slice</samp><samp class="p" data-group-id="1771423341-2">(</samp><samp class="s">&quot;elixir&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="o">-</samp><samp class="mi">10</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">3</samp><samp class="p" data-group-id="1771423341-2">)</samp><samp class="w">
</samp><samp class="s">&quot;eli&quot;</samp></code></pre><p>If start is more than the string length, an empty
string is returned:</p><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">slice</samp><samp class="p" data-group-id="4908256511-1">(</samp><samp class="s">&quot;elixir&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">10</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">1500</samp><samp class="p" data-group-id="4908256511-1">)</samp><samp class="w">
</samp><samp class="s">&quot;&quot;</samp></code></pre>
  </section>
</section>
<section class="detail" id="split/1">

  <div class="detail-header">
    <a href="#split/1" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">split(binary)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/string.ex#L386" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> split(<a href="#t:t/0">t</a>()) :: [<a href="#t:t/0">t</a>()]</pre>

      </div>

<p>Divides a string into substrings at each Unicode whitespace
occurrence with leading and trailing whitespace ignored.</p><p>Groups of whitespace are treated as a single occurrence.
Divisions do not occur on non-breaking whitespace.</p><h2 id="split/1-examples" class="section-heading"><a href="#split/1-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">split</samp><samp class="p" data-group-id="4017961720-1">(</samp><samp class="s">&quot;foo bar&quot;</samp><samp class="p" data-group-id="4017961720-1">)</samp><samp class="w">
</samp><samp class="p" data-group-id="4017961720-2">[</samp><samp class="s">&quot;foo&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;bar&quot;</samp><samp class="p" data-group-id="4017961720-2">]</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">split</samp><samp class="p" data-group-id="4017961720-3">(</samp><samp class="s">&quot;foo&quot;</samp><samp class="w"> </samp><samp class="o">&lt;&gt;</samp><samp class="w"> </samp><samp class="p" data-group-id="4017961720-4">&lt;&lt;</samp><samp class="mi">194</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">133</samp><samp class="p" data-group-id="4017961720-4">&gt;&gt;</samp><samp class="w"> </samp><samp class="o">&lt;&gt;</samp><samp class="w"> </samp><samp class="s">&quot;bar&quot;</samp><samp class="p" data-group-id="4017961720-3">)</samp><samp class="w">
</samp><samp class="p" data-group-id="4017961720-5">[</samp><samp class="s">&quot;foo&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;bar&quot;</samp><samp class="p" data-group-id="4017961720-5">]</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">split</samp><samp class="p" data-group-id="4017961720-6">(</samp><samp class="s">&quot; foo   bar &quot;</samp><samp class="p" data-group-id="4017961720-6">)</samp><samp class="w">
</samp><samp class="p" data-group-id="4017961720-7">[</samp><samp class="s">&quot;foo&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;bar&quot;</samp><samp class="p" data-group-id="4017961720-7">]</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">split</samp><samp class="p" data-group-id="4017961720-8">(</samp><samp class="s">&quot;no</samp><samp class="se">\u00a0</samp><samp class="s">break&quot;</samp><samp class="p" data-group-id="4017961720-8">)</samp><samp class="w">
</samp><samp class="p" data-group-id="4017961720-9">[</samp><samp class="s">&quot;no</samp><samp class="se">\u00a0</samp><samp class="s">break&quot;</samp><samp class="p" data-group-id="4017961720-9">]</samp></code></pre><p>Removes empty strings, like when using <code class="inline">trim: true</code> in <a href="#split/3"><code class="inline">String.split/3</code></a>.</p><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">split</samp><samp class="p" data-group-id="2828060525-1">(</samp><samp class="s">&quot; &quot;</samp><samp class="p" data-group-id="2828060525-1">)</samp><samp class="w">
</samp><samp class="p" data-group-id="2828060525-2">[</samp><samp class="p" data-group-id="2828060525-2">]</samp></code></pre>
  </section>
</section>
<section class="detail" id="split/3">

    <span id="split/2"></span>

  <div class="detail-header">
    <a href="#split/3" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">split(string, pattern, options \\ [])</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/string.ex#L502" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> split(<a href="#t:t/0">t</a>(), <a href="#t:pattern/0">pattern</a>() | <a href="Regex.xhtml#t:t/0">Regex.t</a>(), <a href="typespecs.xhtml#built-in-types">keyword</a>()) :: [<a href="#t:t/0">t</a>()]</pre>

      </div>

<p>Divides a string into parts based on a pattern.</p><p>Returns a list of these parts.</p><p>The <code class="inline">pattern</code> may be a string, a list of strings, a regular expression, or a
compiled pattern.</p><p>The string is split into as many parts as possible by
default, but can be controlled via the <code class="inline">:parts</code> option.</p><p>Empty strings are only removed from the result if the
<code class="inline">:trim</code> option is set to <code class="inline">true</code>.</p><p>When the pattern used is a regular expression, the string is
split using <a href="Regex.xhtml#split/3"><code class="inline">Regex.split/3</code></a>.</p><p>If the pattern cannot be found, a list containing the original
string will be returned.</p><h2 id="split/3-options" class="section-heading"><a href="#split/3-options" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Options</span></h2><ul><li><p><code class="inline">:parts</code> (positive integer or <code class="inline">:infinity</code>) - the string
is split into at most as many parts as this option specifies.
If <code class="inline">:infinity</code>, the string will be split into all possible
parts. Defaults to <code class="inline">:infinity</code>.</p></li><li><p><code class="inline">:trim</code> (boolean) - if <code class="inline">true</code>, empty strings are removed from
the resulting list.</p></li></ul><p>This function also accepts all options accepted by <a href="Regex.xhtml#split/3"><code class="inline">Regex.split/3</code></a>
if <code class="inline">pattern</code> is a regular expression.</p><h2 id="split/3-examples" class="section-heading"><a href="#split/3-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><p>Splitting with a string pattern:</p><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">split</samp><samp class="p" data-group-id="5252809117-1">(</samp><samp class="s">&quot;a,b,c&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;,&quot;</samp><samp class="p" data-group-id="5252809117-1">)</samp><samp class="w">
</samp><samp class="p" data-group-id="5252809117-2">[</samp><samp class="s">&quot;a&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;b&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;c&quot;</samp><samp class="p" data-group-id="5252809117-2">]</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">split</samp><samp class="p" data-group-id="5252809117-3">(</samp><samp class="s">&quot;a,b,c&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;,&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">parts</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">2</samp><samp class="p" data-group-id="5252809117-3">)</samp><samp class="w">
</samp><samp class="p" data-group-id="5252809117-4">[</samp><samp class="s">&quot;a&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;b,c&quot;</samp><samp class="p" data-group-id="5252809117-4">]</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">split</samp><samp class="p" data-group-id="5252809117-5">(</samp><samp class="s">&quot; a b c &quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot; &quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">trim</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">true</samp><samp class="p" data-group-id="5252809117-5">)</samp><samp class="w">
</samp><samp class="p" data-group-id="5252809117-6">[</samp><samp class="s">&quot;a&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;b&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;c&quot;</samp><samp class="p" data-group-id="5252809117-6">]</samp></code></pre><p>A list of patterns:</p><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">split</samp><samp class="p" data-group-id="0829503089-1">(</samp><samp class="s">&quot;1,2 3,4&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="0829503089-2">[</samp><samp class="s">&quot; &quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;,&quot;</samp><samp class="p" data-group-id="0829503089-2">]</samp><samp class="p" data-group-id="0829503089-1">)</samp><samp class="w">
</samp><samp class="p" data-group-id="0829503089-3">[</samp><samp class="s">&quot;1&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;2&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;3&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;4&quot;</samp><samp class="p" data-group-id="0829503089-3">]</samp></code></pre><p>A regular expression:</p><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">split</samp><samp class="p" data-group-id="0975053773-1">(</samp><samp class="s">&quot;a,b,c&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="sr">~r{,}</samp><samp class="p" data-group-id="0975053773-1">)</samp><samp class="w">
</samp><samp class="p" data-group-id="0975053773-2">[</samp><samp class="s">&quot;a&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;b&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;c&quot;</samp><samp class="p" data-group-id="0975053773-2">]</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">split</samp><samp class="p" data-group-id="0975053773-3">(</samp><samp class="s">&quot;a,b,c&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="sr">~r{,}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">parts</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">2</samp><samp class="p" data-group-id="0975053773-3">)</samp><samp class="w">
</samp><samp class="p" data-group-id="0975053773-4">[</samp><samp class="s">&quot;a&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;b,c&quot;</samp><samp class="p" data-group-id="0975053773-4">]</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">split</samp><samp class="p" data-group-id="0975053773-5">(</samp><samp class="s">&quot; a b c &quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="sr">~r{</samp><samp class="se">\s</samp><samp class="sr">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">trim</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">true</samp><samp class="p" data-group-id="0975053773-5">)</samp><samp class="w">
</samp><samp class="p" data-group-id="0975053773-6">[</samp><samp class="s">&quot;a&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;b&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;c&quot;</samp><samp class="p" data-group-id="0975053773-6">]</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">split</samp><samp class="p" data-group-id="0975053773-7">(</samp><samp class="s">&quot;abc&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="sr">~r{b}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">include_captures</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">true</samp><samp class="p" data-group-id="0975053773-7">)</samp><samp class="w">
</samp><samp class="p" data-group-id="0975053773-8">[</samp><samp class="s">&quot;a&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;b&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;c&quot;</samp><samp class="p" data-group-id="0975053773-8">]</samp></code></pre><p>A compiled pattern:</p><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="n">pattern</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="nc">:binary</samp><samp class="o">.</samp><samp class="n">compile_pattern</samp><samp class="p" data-group-id="1771451192-1">(</samp><samp class="p" data-group-id="1771451192-2">[</samp><samp class="s">&quot; &quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;,&quot;</samp><samp class="p" data-group-id="1771451192-2">]</samp><samp class="p" data-group-id="1771451192-1">)</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">split</samp><samp class="p" data-group-id="1771451192-3">(</samp><samp class="s">&quot;1,2 3,4&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">pattern</samp><samp class="p" data-group-id="1771451192-3">)</samp><samp class="w">
</samp><samp class="p" data-group-id="1771451192-4">[</samp><samp class="s">&quot;1&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;2&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;3&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;4&quot;</samp><samp class="p" data-group-id="1771451192-4">]</samp></code></pre><p>Splitting on empty string returns graphemes:</p><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">split</samp><samp class="p" data-group-id="1197904529-1">(</samp><samp class="s">&quot;abc&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;&quot;</samp><samp class="p" data-group-id="1197904529-1">)</samp><samp class="w">
</samp><samp class="p" data-group-id="1197904529-2">[</samp><samp class="s">&quot;&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;a&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;b&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;c&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;&quot;</samp><samp class="p" data-group-id="1197904529-2">]</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">split</samp><samp class="p" data-group-id="1197904529-3">(</samp><samp class="s">&quot;abc&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">trim</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">true</samp><samp class="p" data-group-id="1197904529-3">)</samp><samp class="w">
</samp><samp class="p" data-group-id="1197904529-4">[</samp><samp class="s">&quot;a&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;b&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;c&quot;</samp><samp class="p" data-group-id="1197904529-4">]</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">split</samp><samp class="p" data-group-id="1197904529-5">(</samp><samp class="s">&quot;abc&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">parts</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">1</samp><samp class="p" data-group-id="1197904529-5">)</samp><samp class="w">
</samp><samp class="p" data-group-id="1197904529-6">[</samp><samp class="s">&quot;abc&quot;</samp><samp class="p" data-group-id="1197904529-6">]</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">split</samp><samp class="p" data-group-id="1197904529-7">(</samp><samp class="s">&quot;abc&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">parts</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">3</samp><samp class="p" data-group-id="1197904529-7">)</samp><samp class="w">
</samp><samp class="p" data-group-id="1197904529-8">[</samp><samp class="s">&quot;&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;a&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;bc&quot;</samp><samp class="p" data-group-id="1197904529-8">]</samp></code></pre><p>Splitting on an non-existing pattern returns the original string:</p><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">split</samp><samp class="p" data-group-id="5400487696-1">(</samp><samp class="s">&quot;abc&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;,&quot;</samp><samp class="p" data-group-id="5400487696-1">)</samp><samp class="w">
</samp><samp class="p" data-group-id="5400487696-2">[</samp><samp class="s">&quot;abc&quot;</samp><samp class="p" data-group-id="5400487696-2">]</samp></code></pre><p>Be aware that this function can split within or across grapheme boundaries.
For example, take the grapheme &quot;é&quot; which is made of the characters
&quot;e&quot; and the acute accent. The following will split the string into two parts:</p><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">split</samp><samp class="p" data-group-id="6276575731-1">(</samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">normalize</samp><samp class="p" data-group-id="6276575731-2">(</samp><samp class="s">&quot;é&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:nfd</samp><samp class="p" data-group-id="6276575731-2">)</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;e&quot;</samp><samp class="p" data-group-id="6276575731-1">)</samp><samp class="w">
</samp><samp class="p" data-group-id="6276575731-3">[</samp><samp class="s">&quot;&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;́&quot;</samp><samp class="p" data-group-id="6276575731-3">]</samp></code></pre><p>However, if &quot;é&quot; is represented by the single character &quot;e with acute&quot;
accent, then it will split the string into just one part:</p><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">split</samp><samp class="p" data-group-id="6702067518-1">(</samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">normalize</samp><samp class="p" data-group-id="6702067518-2">(</samp><samp class="s">&quot;é&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:nfc</samp><samp class="p" data-group-id="6702067518-2">)</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;e&quot;</samp><samp class="p" data-group-id="6702067518-1">)</samp><samp class="w">
</samp><samp class="p" data-group-id="6702067518-3">[</samp><samp class="s">&quot;é&quot;</samp><samp class="p" data-group-id="6702067518-3">]</samp></code></pre><p>When using both the <code class="inline">:trim</code> and the <code class="inline">:parts</code> option, the empty values
are removed as the parts are computed (if any). No trimming happens
after all parts are computed:</p><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">split</samp><samp class="p" data-group-id="0536874572-1">(</samp><samp class="s">&quot; a  b  c  &quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot; &quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">trim</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">true</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">parts</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">2</samp><samp class="p" data-group-id="0536874572-1">)</samp><samp class="w">
</samp><samp class="p" data-group-id="0536874572-2">[</samp><samp class="s">&quot;a&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot; b  c  &quot;</samp><samp class="p" data-group-id="0536874572-2">]</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">split</samp><samp class="p" data-group-id="0536874572-3">(</samp><samp class="s">&quot; a  b  c  &quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot; &quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">trim</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">true</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">parts</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">3</samp><samp class="p" data-group-id="0536874572-3">)</samp><samp class="w">
</samp><samp class="p" data-group-id="0536874572-4">[</samp><samp class="s">&quot;a&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;b&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot; c  &quot;</samp><samp class="p" data-group-id="0536874572-4">]</samp></code></pre>
  </section>
</section>
<section class="detail" id="split_at/2">

  <div class="detail-header">
    <a href="#split_at/2" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">split_at(string, position)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/string.ex#L684" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> split_at(<a href="#t:t/0">t</a>(), <a href="typespecs.xhtml#basic-types">integer</a>()) :: {<a href="#t:t/0">t</a>(), <a href="#t:t/0">t</a>()}</pre>

      </div>

<p>Splits a string into two at the specified offset. When the offset given is
negative, location is counted from the end of the string.</p><p>The offset is capped to the length of the string. Returns a tuple with
two elements.</p><section role="note" class="admonition warning"><h4 class="admonition-title warning">Linear Access</h4><p>This function splits on graphemes and for such it has to linearly traverse
the string.
If you want to split a string or a binary based on the number of bytes,
use <a href="Kernel.xhtml#binary_part/3"><code class="inline">Kernel.binary_part/3</code></a> instead.</p></section><h2 id="split_at/2-examples" class="section-heading"><a href="#split_at/2-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">split_at</samp><samp class="p" data-group-id="4549911078-1">(</samp><samp class="s">&quot;sweetelixir&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">5</samp><samp class="p" data-group-id="4549911078-1">)</samp><samp class="w">
</samp><samp class="p" data-group-id="4549911078-2">{</samp><samp class="s">&quot;sweet&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;elixir&quot;</samp><samp class="p" data-group-id="4549911078-2">}</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">split_at</samp><samp class="p" data-group-id="4549911078-3">(</samp><samp class="s">&quot;sweetelixir&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="o">-</samp><samp class="mi">6</samp><samp class="p" data-group-id="4549911078-3">)</samp><samp class="w">
</samp><samp class="p" data-group-id="4549911078-4">{</samp><samp class="s">&quot;sweet&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;elixir&quot;</samp><samp class="p" data-group-id="4549911078-4">}</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">split_at</samp><samp class="p" data-group-id="4549911078-5">(</samp><samp class="s">&quot;abc&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">0</samp><samp class="p" data-group-id="4549911078-5">)</samp><samp class="w">
</samp><samp class="p" data-group-id="4549911078-6">{</samp><samp class="s">&quot;&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;abc&quot;</samp><samp class="p" data-group-id="4549911078-6">}</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">split_at</samp><samp class="p" data-group-id="4549911078-7">(</samp><samp class="s">&quot;abc&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">1000</samp><samp class="p" data-group-id="4549911078-7">)</samp><samp class="w">
</samp><samp class="p" data-group-id="4549911078-8">{</samp><samp class="s">&quot;abc&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;&quot;</samp><samp class="p" data-group-id="4549911078-8">}</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">split_at</samp><samp class="p" data-group-id="4549911078-9">(</samp><samp class="s">&quot;abc&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="o">-</samp><samp class="mi">1000</samp><samp class="p" data-group-id="4549911078-9">)</samp><samp class="w">
</samp><samp class="p" data-group-id="4549911078-10">{</samp><samp class="s">&quot;&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;abc&quot;</samp><samp class="p" data-group-id="4549911078-10">}</samp></code></pre>
  </section>
</section>
<section class="detail" id="splitter/3">

    <span id="splitter/2"></span>

  <div class="detail-header">
    <a href="#splitter/3" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">splitter(string, pattern, options \\ [])</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/string.ex#L607" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> splitter(<a href="#t:t/0">t</a>(), <a href="#t:pattern/0">pattern</a>(), <a href="typespecs.xhtml#built-in-types">keyword</a>()) :: <a href="Enumerable.xhtml#t:t/0">Enumerable.t</a>()</pre>

      </div>

<p>Returns an enumerable that splits a string on demand.</p><p>This is in contrast to <a href="#split/3"><code class="inline">split/3</code></a> which splits the
entire string upfront.</p><p>This function does not support regular expressions
by design. When using regular expressions, it is often
more efficient to have the regular expressions traverse
the string at once than in parts, like this function does.</p><h2 id="splitter/3-options" class="section-heading"><a href="#splitter/3-options" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Options</span></h2><ul><li>:trim - when <code class="inline">true</code>, does not emit empty patterns</li></ul><h2 id="splitter/3-examples" class="section-heading"><a href="#splitter/3-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">splitter</samp><samp class="p" data-group-id="9203477589-1">(</samp><samp class="s">&quot;1,2 3,4 5,6 7,8,...,99999&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="9203477589-2">[</samp><samp class="s">&quot; &quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;,&quot;</samp><samp class="p" data-group-id="9203477589-2">]</samp><samp class="p" data-group-id="9203477589-1">)</samp><samp class="w"> </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Enum</samp><samp class="o">.</samp><samp class="n">take</samp><samp class="p" data-group-id="9203477589-3">(</samp><samp class="mi">4</samp><samp class="p" data-group-id="9203477589-3">)</samp><samp class="w">
</samp><samp class="p" data-group-id="9203477589-4">[</samp><samp class="s">&quot;1&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;2&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;3&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;4&quot;</samp><samp class="p" data-group-id="9203477589-4">]</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">splitter</samp><samp class="p" data-group-id="9203477589-5">(</samp><samp class="s">&quot;abcd&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;&quot;</samp><samp class="p" data-group-id="9203477589-5">)</samp><samp class="w"> </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Enum</samp><samp class="o">.</samp><samp class="n">take</samp><samp class="p" data-group-id="9203477589-6">(</samp><samp class="mi">10</samp><samp class="p" data-group-id="9203477589-6">)</samp><samp class="w">
</samp><samp class="p" data-group-id="9203477589-7">[</samp><samp class="s">&quot;&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;a&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;b&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;c&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;d&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;&quot;</samp><samp class="p" data-group-id="9203477589-7">]</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">splitter</samp><samp class="p" data-group-id="9203477589-8">(</samp><samp class="s">&quot;abcd&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">trim</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">true</samp><samp class="p" data-group-id="9203477589-8">)</samp><samp class="w"> </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Enum</samp><samp class="o">.</samp><samp class="n">take</samp><samp class="p" data-group-id="9203477589-9">(</samp><samp class="mi">10</samp><samp class="p" data-group-id="9203477589-9">)</samp><samp class="w">
</samp><samp class="p" data-group-id="9203477589-10">[</samp><samp class="s">&quot;a&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;b&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;c&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;d&quot;</samp><samp class="p" data-group-id="9203477589-10">]</samp></code></pre><p>A compiled pattern can also be given:</p><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="n">pattern</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="nc">:binary</samp><samp class="o">.</samp><samp class="n">compile_pattern</samp><samp class="p" data-group-id="8177204531-1">(</samp><samp class="p" data-group-id="8177204531-2">[</samp><samp class="s">&quot; &quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;,&quot;</samp><samp class="p" data-group-id="8177204531-2">]</samp><samp class="p" data-group-id="8177204531-1">)</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">splitter</samp><samp class="p" data-group-id="8177204531-3">(</samp><samp class="s">&quot;1,2 3,4 5,6 7,8,...,99999&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">pattern</samp><samp class="p" data-group-id="8177204531-3">)</samp><samp class="w"> </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Enum</samp><samp class="o">.</samp><samp class="n">take</samp><samp class="p" data-group-id="8177204531-4">(</samp><samp class="mi">4</samp><samp class="p" data-group-id="8177204531-4">)</samp><samp class="w">
</samp><samp class="p" data-group-id="8177204531-5">[</samp><samp class="s">&quot;1&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;2&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;3&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;4&quot;</samp><samp class="p" data-group-id="8177204531-5">]</samp></code></pre>
  </section>
</section>
<section class="detail" id="starts_with?/2">

  <div class="detail-header">
    <a href="#starts_with?/2" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">starts_with?(string, prefix)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/string.ex#L2685" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> starts_with?(<a href="#t:t/0">t</a>(), <a href="#t:t/0">t</a>() | [<a href="#t:t/0">t</a>()]) :: <a href="typespecs.xhtml#built-in-types">boolean</a>()</pre>

      </div>

<p>Returns <code class="inline">true</code> if <code class="inline">string</code> starts with any of the prefixes given.</p><p><code class="inline">prefix</code> can be either a string, a list of strings, or a compiled
pattern.</p><h2 id="starts_with?/2-examples" class="section-heading"><a href="#starts_with?/2-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">starts_with?</samp><samp class="p" data-group-id="3568620211-1">(</samp><samp class="s">&quot;elixir&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;eli&quot;</samp><samp class="p" data-group-id="3568620211-1">)</samp><samp class="w">
</samp><samp class="no">true</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">starts_with?</samp><samp class="p" data-group-id="3568620211-2">(</samp><samp class="s">&quot;elixir&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="3568620211-3">[</samp><samp class="s">&quot;erlang&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;elixir&quot;</samp><samp class="p" data-group-id="3568620211-3">]</samp><samp class="p" data-group-id="3568620211-2">)</samp><samp class="w">
</samp><samp class="no">true</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">starts_with?</samp><samp class="p" data-group-id="3568620211-4">(</samp><samp class="s">&quot;elixir&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="3568620211-5">[</samp><samp class="s">&quot;erlang&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;ruby&quot;</samp><samp class="p" data-group-id="3568620211-5">]</samp><samp class="p" data-group-id="3568620211-4">)</samp><samp class="w">
</samp><samp class="no">false</samp></code></pre><p>An empty string will always match:</p><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">starts_with?</samp><samp class="p" data-group-id="9114330040-1">(</samp><samp class="s">&quot;elixir&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;&quot;</samp><samp class="p" data-group-id="9114330040-1">)</samp><samp class="w">
</samp><samp class="no">true</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">starts_with?</samp><samp class="p" data-group-id="9114330040-2">(</samp><samp class="s">&quot;elixir&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="9114330040-3">[</samp><samp class="s">&quot;&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;other&quot;</samp><samp class="p" data-group-id="9114330040-3">]</samp><samp class="p" data-group-id="9114330040-2">)</samp><samp class="w">
</samp><samp class="no">true</samp></code></pre><p>An empty list will never match:</p><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">starts_with?</samp><samp class="p" data-group-id="3739478849-1">(</samp><samp class="s">&quot;elixir&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="3739478849-2">[</samp><samp class="p" data-group-id="3739478849-2">]</samp><samp class="p" data-group-id="3739478849-1">)</samp><samp class="w">
</samp><samp class="no">false</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">starts_with?</samp><samp class="p" data-group-id="3739478849-3">(</samp><samp class="s">&quot;&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="3739478849-4">[</samp><samp class="p" data-group-id="3739478849-4">]</samp><samp class="p" data-group-id="3739478849-3">)</samp><samp class="w">
</samp><samp class="no">false</samp></code></pre>
  </section>
</section>
<section class="detail" id="to_atom/1">

  <div class="detail-header">
    <a href="#to_atom/1" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">to_atom(string)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/string.ex#L2905" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> to_atom(<a href="#t:t/0">t</a>()) :: <a href="typespecs.xhtml#basic-types">atom</a>()</pre>

      </div>

<p>Converts a string to an existing atom or creates a new one.</p><p>Warning: this function creates atoms dynamically and atoms are
not garbage-collected. Therefore, <code class="inline">string</code> should not be an
untrusted value, such as input received from a socket or during
a web request. Consider using <a href="#to_existing_atom/1"><code class="inline">to_existing_atom/1</code></a> instead.</p><p>By default, the maximum number of atoms is <code class="inline">1_048_576</code>. This limit
can be raised or lowered using the VM option <code class="inline">+t</code>.</p><p>The maximum atom size is of 255 Unicode code points.</p><p>Inlined by the compiler.</p><h2 id="to_atom/1-examples" class="section-heading"><a href="#to_atom/1-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">to_atom</samp><samp class="p" data-group-id="5577321006-1">(</samp><samp class="s">&quot;my_atom&quot;</samp><samp class="p" data-group-id="5577321006-1">)</samp><samp class="w">
</samp><samp class="ss">:my_atom</samp></code></pre>
  </section>
</section>
<section class="detail" id="to_charlist/1">

  <div class="detail-header">
    <a href="#to_charlist/1" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">to_charlist(string)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/string.ex#L2870" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> to_charlist(<a href="#t:t/0">t</a>()) :: <a href="typespecs.xhtml#built-in-types">charlist</a>()</pre>

      </div>

<p>Converts a string into a charlist.</p><p>Specifically, this function takes a UTF-8 encoded binary and returns a list of its integer
code points. It is similar to <a href="#codepoints/1"><code class="inline">codepoints/1</code></a> except that the latter returns a list of code points as
strings.</p><p>In case you need to work with bytes, take a look at the
<a href="https://www.erlang.org/doc/apps/stdlib/binary.html"><code class="inline">:binary</code> module</a>.</p><h2 id="to_charlist/1-examples" class="section-heading"><a href="#to_charlist/1-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">to_charlist</samp><samp class="p" data-group-id="1063956004-1">(</samp><samp class="s">&quot;foo&quot;</samp><samp class="p" data-group-id="1063956004-1">)</samp><samp class="w">
</samp><samp class="s">~c&quot;foo&quot;</samp></code></pre>
  </section>
</section>
<section class="detail" id="to_existing_atom/1">

  <div class="detail-header">
    <a href="#to_existing_atom/1" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">to_existing_atom(string)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/string.ex#L2938" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> to_existing_atom(<a href="#t:t/0">t</a>()) :: <a href="typespecs.xhtml#basic-types">atom</a>()</pre>

      </div>

<p>Converts a string to an existing atom or raises if
the atom does not exist.</p><p>The maximum atom size is of 255 Unicode code points.
Raises an <a href="ArgumentError.xhtml"><code class="inline">ArgumentError</code></a> if the atom does not exist.</p><p>Inlined by the compiler.</p><section role="note" class="admonition info"><h4 class="admonition-title info">Atoms and modules</h4><p>Since Elixir is a compiled language, the atoms defined in a module
will only exist after said module is loaded, which typically happens
whenever a function in the module is executed. Therefore, it is
generally recommended to call <a href="#to_existing_atom/1"><code class="inline">String.to_existing_atom/1</code></a> only to
convert atoms defined within the module making the function call
to <a href="#to_existing_atom/1"><code class="inline">to_existing_atom/1</code></a>.</p><p>To create a module name itself from a string safely,
it is recommended to use <a href="Module.xhtml#safe_concat/1"><code class="inline">Module.safe_concat/1</code></a>.</p></section><h2 id="to_existing_atom/1-examples" class="section-heading"><a href="#to_existing_atom/1-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="bp">_</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="ss">:my_atom</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">to_existing_atom</samp><samp class="p" data-group-id="5742269528-1">(</samp><samp class="s">&quot;my_atom&quot;</samp><samp class="p" data-group-id="5742269528-1">)</samp><samp class="w">
</samp><samp class="ss">:my_atom</samp></code></pre>
  </section>
</section>
<section class="detail" id="to_float/1">

  <div class="detail-header">
    <a href="#to_float/1" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">to_float(string)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/string.ex#L3009" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> to_float(<a href="#t:t/0">t</a>()) :: <a href="typespecs.xhtml#basic-types">float</a>()</pre>

      </div>

<p>Returns a float whose text representation is <code class="inline">string</code>.</p><p><code class="inline">string</code> must be the string representation of a float including leading digits and a decimal
point. To parse a string without decimal point as a float, refer to <a href="Float.xhtml#parse/1"><code class="inline">Float.parse/1</code></a>. Otherwise,
an <a href="ArgumentError.xhtml"><code class="inline">ArgumentError</code></a> will be raised.</p><p>Inlined by the compiler.</p><h2 id="to_float/1-examples" class="section-heading"><a href="#to_float/1-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">to_float</samp><samp class="p" data-group-id="5279970573-1">(</samp><samp class="s">&quot;2.2017764e+0&quot;</samp><samp class="p" data-group-id="5279970573-1">)</samp><samp class="w">
</samp><samp class="mf">2.2017764</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">to_float</samp><samp class="p" data-group-id="5279970573-2">(</samp><samp class="s">&quot;3.0&quot;</samp><samp class="p" data-group-id="5279970573-2">)</samp><samp class="w">
</samp><samp class="mf">3.0</samp><samp class="w">

</samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">to_float</samp><samp class="p" data-group-id="5279970573-3">(</samp><samp class="s">&quot;3&quot;</samp><samp class="p" data-group-id="5279970573-3">)</samp><samp class="w">
</samp><samp class="gt">** (ArgumentError) argument error</samp><samp class="w">

</samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">to_float</samp><samp class="p" data-group-id="5279970573-4">(</samp><samp class="s">&quot;.3&quot;</samp><samp class="p" data-group-id="5279970573-4">)</samp><samp class="w">
</samp><samp class="gt">** (ArgumentError) argument error</samp></code></pre>
  </section>
</section>
<section class="detail" id="to_integer/1">

  <div class="detail-header">
    <a href="#to_integer/1" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">to_integer(string)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/string.ex#L2964" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> to_integer(<a href="#t:t/0">t</a>()) :: <a href="typespecs.xhtml#basic-types">integer</a>()</pre>

      </div>

<p>Returns an integer whose text representation is <code class="inline">string</code>.</p><p><code class="inline">string</code> must be the string representation of an integer.
Otherwise, an <a href="ArgumentError.xhtml"><code class="inline">ArgumentError</code></a> will be raised. If you want
to parse a string that may contain an ill-formatted integer,
use <a href="Integer.xhtml#parse/1"><code class="inline">Integer.parse/1</code></a>.</p><p>Inlined by the compiler.</p><h2 id="to_integer/1-examples" class="section-heading"><a href="#to_integer/1-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">to_integer</samp><samp class="p" data-group-id="1843799543-1">(</samp><samp class="s">&quot;123&quot;</samp><samp class="p" data-group-id="1843799543-1">)</samp><samp class="w">
</samp><samp class="mi">123</samp></code></pre><p>Passing a string that does not represent an integer leads to an error:</p><pre><code class="makeup elixir" translate="no"><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">to_integer</samp><samp class="p" data-group-id="4532663179-1">(</samp><samp class="s">&quot;invalid data&quot;</samp><samp class="p" data-group-id="4532663179-1">)</samp><samp class="w">
</samp><samp class="gt">** (ArgumentError) argument error</samp></code></pre>
  </section>
</section>
<section class="detail" id="to_integer/2">

  <div class="detail-header">
    <a href="#to_integer/2" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">to_integer(string, base)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/string.ex#L2980" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> to_integer(<a href="#t:t/0">t</a>(), 2..36) :: <a href="typespecs.xhtml#basic-types">integer</a>()</pre>

      </div>

<p>Returns an integer whose text representation is <code class="inline">string</code> in base <code class="inline">base</code>.</p><p>Inlined by the compiler.</p><h2 id="to_integer/2-examples" class="section-heading"><a href="#to_integer/2-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">to_integer</samp><samp class="p" data-group-id="3776650090-1">(</samp><samp class="s">&quot;3FF&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">16</samp><samp class="p" data-group-id="3776650090-1">)</samp><samp class="w">
</samp><samp class="mi">1023</samp></code></pre>
  </section>
</section>
<section class="detail" id="trim/1">

  <div class="detail-header">
    <a href="#trim/1" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">trim(string)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/string.ex#L1321" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> trim(<a href="#t:t/0">t</a>()) :: <a href="#t:t/0">t</a>()</pre>

      </div>

<p>Returns a string where all leading and trailing Unicode whitespaces
have been removed.</p><h2 id="trim/1-examples" class="section-heading"><a href="#trim/1-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">trim</samp><samp class="p" data-group-id="8928775265-1">(</samp><samp class="s">&quot;</samp><samp class="se">\n</samp><samp class="s">  abc</samp><samp class="se">\n</samp><samp class="s">  &quot;</samp><samp class="p" data-group-id="8928775265-1">)</samp><samp class="w">
</samp><samp class="s">&quot;abc&quot;</samp></code></pre>
  </section>
</section>
<section class="detail" id="trim/2">

  <div class="detail-header">
    <a href="#trim/2" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">trim(string, to_trim)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/string.ex#L1338" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> trim(<a href="#t:t/0">t</a>(), <a href="#t:t/0">t</a>()) :: <a href="#t:t/0">t</a>()</pre>

      </div>

<p>Returns a string where all leading and trailing <code class="inline">to_trim</code> characters have been
removed.</p><h2 id="trim/2-examples" class="section-heading"><a href="#trim/2-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">trim</samp><samp class="p" data-group-id="2318281414-1">(</samp><samp class="s">&quot;a  abc  a&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;a&quot;</samp><samp class="p" data-group-id="2318281414-1">)</samp><samp class="w">
</samp><samp class="s">&quot;  abc  &quot;</samp></code></pre>
  </section>
</section>
<section class="detail" id="trim_leading/1">

  <div class="detail-header">
    <a href="#trim_leading/1" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">trim_leading(string)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/string.ex#L1259" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> trim_leading(<a href="#t:t/0">t</a>()) :: <a href="#t:t/0">t</a>()</pre>

      </div>

<p>Returns a string where all leading Unicode whitespaces
have been removed.</p><h2 id="trim_leading/1-examples" class="section-heading"><a href="#trim_leading/1-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">trim_leading</samp><samp class="p" data-group-id="5207725853-1">(</samp><samp class="s">&quot;</samp><samp class="se">\n</samp><samp class="s">  abc   &quot;</samp><samp class="p" data-group-id="5207725853-1">)</samp><samp class="w">
</samp><samp class="s">&quot;abc   &quot;</samp></code></pre>
  </section>
</section>
<section class="detail" id="trim_leading/2">

  <div class="detail-header">
    <a href="#trim_leading/2" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">trim_leading(string, to_trim)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/string.ex#L1274" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> trim_leading(<a href="#t:t/0">t</a>(), <a href="#t:t/0">t</a>()) :: <a href="#t:t/0">t</a>()</pre>

      </div>

<p>Returns a string where all leading <code class="inline">to_trim</code> characters have been removed.</p><h2 id="trim_leading/2-examples" class="section-heading"><a href="#trim_leading/2-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">trim_leading</samp><samp class="p" data-group-id="1007192863-1">(</samp><samp class="s">&quot;__ abc _&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;_&quot;</samp><samp class="p" data-group-id="1007192863-1">)</samp><samp class="w">
</samp><samp class="s">&quot; abc _&quot;</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">trim_leading</samp><samp class="p" data-group-id="1007192863-2">(</samp><samp class="s">&quot;1 abc&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;11&quot;</samp><samp class="p" data-group-id="1007192863-2">)</samp><samp class="w">
</samp><samp class="s">&quot;1 abc&quot;</samp></code></pre>
  </section>
</section>
<section class="detail" id="trim_trailing/1">

  <div class="detail-header">
    <a href="#trim_trailing/1" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">trim_trailing(string)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/string.ex#L1290" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> trim_trailing(<a href="#t:t/0">t</a>()) :: <a href="#t:t/0">t</a>()</pre>

      </div>

<p>Returns a string where all trailing Unicode whitespaces
has been removed.</p><h2 id="trim_trailing/1-examples" class="section-heading"><a href="#trim_trailing/1-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">trim_trailing</samp><samp class="p" data-group-id="2592619180-1">(</samp><samp class="s">&quot;   abc</samp><samp class="se">\n</samp><samp class="s">  &quot;</samp><samp class="p" data-group-id="2592619180-1">)</samp><samp class="w">
</samp><samp class="s">&quot;   abc&quot;</samp></code></pre>
  </section>
</section>
<section class="detail" id="trim_trailing/2">

  <div class="detail-header">
    <a href="#trim_trailing/2" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">trim_trailing(string, to_trim)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/string.ex#L1305" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> trim_trailing(<a href="#t:t/0">t</a>(), <a href="#t:t/0">t</a>()) :: <a href="#t:t/0">t</a>()</pre>

      </div>

<p>Returns a string where all trailing <code class="inline">to_trim</code> characters have been removed.</p><h2 id="trim_trailing/2-examples" class="section-heading"><a href="#trim_trailing/2-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">trim_trailing</samp><samp class="p" data-group-id="4913431745-1">(</samp><samp class="s">&quot;_ abc __&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;_&quot;</samp><samp class="p" data-group-id="4913431745-1">)</samp><samp class="w">
</samp><samp class="s">&quot;_ abc &quot;</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">trim_trailing</samp><samp class="p" data-group-id="4913431745-2">(</samp><samp class="s">&quot;abc 1&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;11&quot;</samp><samp class="p" data-group-id="4913431745-2">)</samp><samp class="w">
</samp><samp class="s">&quot;abc 1&quot;</samp></code></pre>
  </section>
</section>
<section class="detail" id="upcase/2">

    <span id="upcase/1"></span>

  <div class="detail-header">
    <a href="#upcase/2" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">upcase(string, mode \\ :default)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/string.ex#L858" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> upcase(<a href="#t:t/0">t</a>(), :default | :ascii | :greek | :turkic) :: <a href="#t:t/0">t</a>()</pre>

      </div>

<p>Converts all characters in the given string to uppercase according to <code class="inline">mode</code>.</p><p><code class="inline">mode</code> may be <code class="inline">:default</code>, <code class="inline">:ascii</code>, <code class="inline">:greek</code> or <code class="inline">:turkic</code>. The <code class="inline">:default</code> mode considers
all non-conditional transformations outlined in the Unicode standard. <code class="inline">:ascii</code>
uppercases only the letters a to z. <code class="inline">:greek</code> includes the context sensitive
mappings found in Greek. <code class="inline">:turkic</code> properly handles the letter i with the dotless variant.</p><h2 id="upcase/2-examples" class="section-heading"><a href="#upcase/2-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">upcase</samp><samp class="p" data-group-id="2152180923-1">(</samp><samp class="s">&quot;abcd&quot;</samp><samp class="p" data-group-id="2152180923-1">)</samp><samp class="w">
</samp><samp class="s">&quot;ABCD&quot;</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">upcase</samp><samp class="p" data-group-id="2152180923-2">(</samp><samp class="s">&quot;ab 123 xpto&quot;</samp><samp class="p" data-group-id="2152180923-2">)</samp><samp class="w">
</samp><samp class="s">&quot;AB 123 XPTO&quot;</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">upcase</samp><samp class="p" data-group-id="2152180923-3">(</samp><samp class="s">&quot;olá&quot;</samp><samp class="p" data-group-id="2152180923-3">)</samp><samp class="w">
</samp><samp class="s">&quot;OLÁ&quot;</samp></code></pre><p>The <code class="inline">:ascii</code> mode ignores Unicode characters and provides a more
performant implementation when you know the string contains only
ASCII characters:</p><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">upcase</samp><samp class="p" data-group-id="8420018786-1">(</samp><samp class="s">&quot;olá&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:ascii</samp><samp class="p" data-group-id="8420018786-1">)</samp><samp class="w">
</samp><samp class="s">&quot;OLá&quot;</samp></code></pre><p>And <code class="inline">:turkic</code> properly handles the letter i with the dotless variant:</p><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">upcase</samp><samp class="p" data-group-id="6706760968-1">(</samp><samp class="s">&quot;ıi&quot;</samp><samp class="p" data-group-id="6706760968-1">)</samp><samp class="w">
</samp><samp class="s">&quot;II&quot;</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">upcase</samp><samp class="p" data-group-id="6706760968-2">(</samp><samp class="s">&quot;ıi&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:turkic</samp><samp class="p" data-group-id="6706760968-2">)</samp><samp class="w">
</samp><samp class="s">&quot;Iİ&quot;</samp></code></pre><p>Also see <a href="#downcase/2"><code class="inline">downcase/2</code></a> and <a href="#capitalize/2"><code class="inline">capitalize/2</code></a> for other conversions.</p>
  </section>
</section>
<section class="detail" id="valid?/2">

    <span id="valid?/1"></span>

  <div class="detail-header">
    <a href="#valid?/2" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">valid?(string, algorithm \\ :default)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/string.ex#L1876" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> valid?(<a href="#t:t/0">t</a>(), :default | :fast_ascii) :: <a href="typespecs.xhtml#built-in-types">boolean</a>()</pre>

      </div>

<p>Checks whether <code class="inline">string</code> contains only valid characters.</p><p><code class="inline">algorithm</code> may be <code class="inline">:default</code> or <code class="inline">:fast_ascii</code>. Both algorithms are equivalent
from a validation perspective (they will always produce the same output), but
<code class="inline">:fast_ascii</code> can yield significant performance benefits in specific scenarios.</p><p>If all of the following conditions are true, you may want to experiment with
the <code class="inline">:fast_ascii</code> algorithm to see if it yields performance benefits in your
specific scenario:</p><ul><li>You are running Erlang/OTP 26 or newer on a 64 bit platform</li><li>You expect most of your strings to be longer than ~64 bytes</li><li>You expect most of your strings to contain mostly ASCII codepoints</li></ul><p>Note that the <code class="inline">:fast_ascii</code> algorithm does not affect correctness, you can
expect the output of <a href="#valid?/2"><code class="inline">String.valid?/2</code></a> to be the same regardless of algorithm.
The only difference to be expected is one of performance, which can be
expected to improve roughly linearly in string length compared to the
<code class="inline">:default</code> algorithm.</p><h2 id="valid?/2-examples" class="section-heading"><a href="#valid?/2-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">valid?</samp><samp class="p" data-group-id="8252081723-1">(</samp><samp class="s">&quot;a&quot;</samp><samp class="p" data-group-id="8252081723-1">)</samp><samp class="w">
</samp><samp class="no">true</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">valid?</samp><samp class="p" data-group-id="8252081723-2">(</samp><samp class="s">&quot;ø&quot;</samp><samp class="p" data-group-id="8252081723-2">)</samp><samp class="w">
</samp><samp class="no">true</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">valid?</samp><samp class="p" data-group-id="8252081723-3">(</samp><samp class="p" data-group-id="8252081723-4">&lt;&lt;</samp><samp class="mh">0xFFFF</samp><samp class="o">::</samp><samp class="mi">16</samp><samp class="p" data-group-id="8252081723-4">&gt;&gt;</samp><samp class="p" data-group-id="8252081723-3">)</samp><samp class="w">
</samp><samp class="no">false</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">valid?</samp><samp class="p" data-group-id="8252081723-5">(</samp><samp class="p" data-group-id="8252081723-6">&lt;&lt;</samp><samp class="mh">0xEF</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mh">0xB7</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mh">0x90</samp><samp class="p" data-group-id="8252081723-6">&gt;&gt;</samp><samp class="p" data-group-id="8252081723-5">)</samp><samp class="w">
</samp><samp class="no">true</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">valid?</samp><samp class="p" data-group-id="8252081723-7">(</samp><samp class="s">&quot;asd&quot;</samp><samp class="w"> </samp><samp class="o">&lt;&gt;</samp><samp class="w"> </samp><samp class="p" data-group-id="8252081723-8">&lt;&lt;</samp><samp class="mh">0xFFFF</samp><samp class="o">::</samp><samp class="mi">16</samp><samp class="p" data-group-id="8252081723-8">&gt;&gt;</samp><samp class="p" data-group-id="8252081723-7">)</samp><samp class="w">
</samp><samp class="no">false</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">valid?</samp><samp class="p" data-group-id="8252081723-9">(</samp><samp class="s">&quot;a&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:fast_ascii</samp><samp class="p" data-group-id="8252081723-9">)</samp><samp class="w">
</samp><samp class="no">true</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">valid?</samp><samp class="p" data-group-id="8252081723-10">(</samp><samp class="mi">4</samp><samp class="p" data-group-id="8252081723-10">)</samp><samp class="w">
</samp><samp class="gt">** (FunctionClauseError) no function clause matching in String.valid?/2</samp></code></pre>
  </section>
</section>

        </div>
      </section>


  </body>
</html>
