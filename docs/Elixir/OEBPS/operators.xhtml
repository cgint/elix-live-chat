<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"
      xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>Operators reference - Elixir v1.18.4</title>
    <meta name="generator" content="ExDoc v0.38.2" />
    <link type="text/css" rel="stylesheet" href="dist/epub-elixir-FNUUKFP7.css" />
    <script src="dist/epub-4WIP524F.js"></script>

  </head>
  <body class="content-inner">

    <h1 id="content">Operators reference</h1>
<p>This document is a complete reference of operators in Elixir, how they are parsed, how they can be defined, and how they can be overridden.</p><h2 id="operator-precedence-and-associativity">Operator precedence and associativity</h2><p>The following is a list of all operators that Elixir is capable of parsing, ordered from higher to lower precedence, alongside their associativity:</p><table><thead><tr><th style="text-align: left;">Operator</th><th style="text-align: left;">Associativity</th></tr></thead><tbody><tr><td style="text-align: left;"><code class="inline">@</code></td><td style="text-align: left;">Unary</td></tr><tr><td style="text-align: left;"><code class="inline">.</code></td><td style="text-align: left;">Left</td></tr><tr><td style="text-align: left;"><code class="inline">+</code> <code class="inline">-</code> <code class="inline">!</code> <code class="inline">^</code> <code class="inline">not</code></td><td style="text-align: left;">Unary</td></tr><tr><td style="text-align: left;"><code class="inline">**</code></td><td style="text-align: left;">Left</td></tr><tr><td style="text-align: left;"><code class="inline">*</code> <code class="inline">/</code></td><td style="text-align: left;">Left</td></tr><tr><td style="text-align: left;"><code class="inline">+</code> <code class="inline">-</code></td><td style="text-align: left;">Left</td></tr><tr><td style="text-align: left;"><code class="inline">++</code> <code class="inline">--</code> <code class="inline">+++</code> <code class="inline">---</code> <code class="inline">..</code> <code class="inline">&lt;&gt;</code></td><td style="text-align: left;">Right</td></tr><tr><td style="text-align: left;"><code class="inline">in</code> <code class="inline">not in</code></td><td style="text-align: left;">Left</td></tr><tr><td style="text-align: left;"><code class="inline">|&gt;</code> <code class="inline">&lt;&lt;&lt;</code> <code class="inline">&gt;&gt;&gt;</code> <code class="inline">&lt;&lt;~</code> <code class="inline">~&gt;&gt;</code> <code class="inline">&lt;~</code> <code class="inline">~&gt;</code> <code class="inline">&lt;~&gt;</code></td><td style="text-align: left;">Left</td></tr><tr><td style="text-align: left;"><code class="inline">&lt;</code> <code class="inline">&gt;</code> <code class="inline">&lt;=</code> <code class="inline">&gt;=</code></td><td style="text-align: left;">Left</td></tr><tr><td style="text-align: left;"><code class="inline">==</code> <code class="inline">!=</code> <code class="inline">=~</code> <code class="inline">===</code> <code class="inline">!==</code></td><td style="text-align: left;">Left</td></tr><tr><td style="text-align: left;"><code class="inline">&amp;&amp;</code> <code class="inline">&amp;&amp;&amp;</code> <code class="inline">and</code></td><td style="text-align: left;">Left</td></tr><tr><td style="text-align: left;"><code class="inline">||</code> <code class="inline">|||</code> <code class="inline">or</code></td><td style="text-align: left;">Left</td></tr><tr><td style="text-align: left;"><code class="inline">=</code></td><td style="text-align: left;">Right</td></tr><tr><td style="text-align: left;"><code class="inline">&amp;</code>, <code class="inline">...</code></td><td style="text-align: left;">Unary</td></tr><tr><td style="text-align: left;"><code class="inline">=&gt;</code> (valid only inside <code class="inline">%{}</code>)</td><td style="text-align: left;">Right</td></tr><tr><td style="text-align: left;"><code class="inline">|</code></td><td style="text-align: left;">Right</td></tr><tr><td style="text-align: left;"><code class="inline">::</code></td><td style="text-align: left;">Right</td></tr><tr><td style="text-align: left;"><code class="inline">when</code></td><td style="text-align: left;">Right</td></tr><tr><td style="text-align: left;"><code class="inline">&lt;-</code> <code class="inline">\\</code></td><td style="text-align: left;">Left</td></tr></tbody></table><h2 id="general-operators">General operators</h2><p>Elixir provides the following built-in operators:</p><ul><li><a href="Kernel.xhtml#+/1"><code class="inline">+</code></a> and <a href="Kernel.xhtml#-/1"><code class="inline">-</code></a> - unary positive/negative</li><li><a href="Kernel.xhtml#+/2"><code class="inline">+</code></a>, <a href="Kernel.xhtml#-/2"><code class="inline">-</code></a>, <a href="Kernel.xhtml#*/2"><code class="inline">*</code></a>, and <a href="Kernel.xhtml#//2"><code class="inline">/</code></a> - basic arithmetic operations</li><li><a href="Kernel.xhtml#++/2"><code class="inline">++</code></a> and <a href="Kernel.xhtml#--/2"><code class="inline">--</code></a> - list concatenation and subtraction</li><li><a href="Kernel.xhtml#and/2"><code class="inline">and</code></a> and <a href="Kernel.xhtml#&&/2"><code class="inline">&amp;&amp;</code></a> - strict and relaxed boolean &quot;and&quot;</li><li><a href="Kernel.xhtml#or/2"><code class="inline">or</code></a> and <a href="Kernel.xhtml#%7C%7C/2"><code class="inline">||</code></a> - strict and relaxed boolean &quot;or&quot;</li><li><a href="Kernel.xhtml#not/1"><code class="inline">not</code></a> and <a href="Kernel.xhtml#!/1"><code class="inline">!</code></a> - strict and relaxed boolean &quot;not&quot;</li><li><a href="Kernel.xhtml#in/2"><code class="inline">in</code></a> and <a href="Kernel.xhtml#in/2"><code class="inline">not in</code></a> - membership</li><li><a href="Kernel.xhtml#@/1"><code class="inline">@</code></a> - module attribute</li><li><a href="Kernel.xhtml#../0"><code class="inline">..</code></a>, <a href="Kernel.xhtml#../2"><code class="inline">..</code></a>, and <a href="Kernel.xhtml#..///3"><code class="inline">..//</code></a> - range creation</li><li><a href="Kernel.xhtml#%3C%3E/2"><code class="inline">&lt;&gt;</code></a> - binary concatenation</li><li><a href="Kernel.xhtml#%7C%3E/2"><code class="inline">|&gt;</code></a> - pipeline</li><li><a href="Kernel.xhtml#=~/2"><code class="inline">=~</code></a> - text-based match</li></ul><p>Many of those can be used in guards; consult the <a href="patterns-and-guards.xhtml#list-of-allowed-functions-and-operators">list of allowed guard functions and operators</a>.</p><p>Additionally, there are a few other operators that Elixir parses but doesn't actually use.
See <a href="#custom-and-overridden-operators">Custom and overridden operators</a> below for a list and for guidelines about their use.</p><p>Some other operators are special forms and cannot be overridden:</p><ul><li><a href="Kernel.SpecialForms.xhtml#%5E/1"><code class="inline">^</code></a> - pin operator</li><li><a href="Kernel.SpecialForms.xhtml#./2"><code class="inline">.</code></a> - dot operator</li><li><a href="Kernel.SpecialForms.xhtml#=/2"><code class="inline">=</code></a> - match operator</li><li><a href="Kernel.SpecialForms.xhtml#&/1"><code class="inline">&amp;</code></a> - capture operator</li><li><a href="Kernel.SpecialForms.xhtml#::/2"><code class="inline">::</code></a> - type operator</li></ul><p>Finally, these operators appear in the precedence table above but are only meaningful within certain constructs:</p><ul><li><code class="inline">=&gt;</code> - see <a href="Kernel.SpecialForms.xhtml#%25%7B%7D/1"><code class="inline">%{}</code></a></li><li><code class="inline">when</code> - see <a href="patterns-and-guards.xhtml#guards">Guards</a></li><li><code class="inline">&lt;-</code> - see <a href="Kernel.SpecialForms.xhtml#for/1"><code class="inline">for</code></a> and <a href="Kernel.SpecialForms.xhtml#with/1"><code class="inline">with</code></a></li><li><code class="inline">\\</code> - see <a href="Kernel.xhtml#def/2-default-arguments">Default arguments</a></li></ul><h2 id="comparison-operators">Comparison operators</h2><p>Elixir provides the following built-in comparison operators (all of which can be used in guards):</p><ul><li><a href="Kernel.xhtml#==/2"><code class="inline">==</code></a> - equal to</li><li><a href="Kernel.xhtml#===/2"><code class="inline">===</code></a> - strictly equal to</li><li><a href="Kernel.xhtml#!=/2"><code class="inline">!=</code></a> - not equal to</li><li><a href="Kernel.xhtml#!==/2"><code class="inline">!==</code></a> - strictly not equal to</li><li><a href="Kernel.xhtml#%3C/2"><code class="inline">&lt;</code></a> - less-than</li><li><a href="Kernel.xhtml#%3E/2"><code class="inline">&gt;</code></a> - greater-than</li><li><a href="Kernel.xhtml#%3C=/2"><code class="inline">&lt;=</code></a> - less-than or equal to</li><li><a href="Kernel.xhtml#%3E=/2"><code class="inline">&gt;=</code></a> - greater-than or equal to</li></ul><p>The only difference between <a href="Kernel.xhtml#==/2"><code class="inline">==</code></a> and <a href="Kernel.xhtml#===/2"><code class="inline">===</code></a> is that <a href="Kernel.xhtml#===/2"><code class="inline">===</code></a> is strict when it comes to comparing integers and floats:</p><pre><code class="makeup elixir" translate="no"><span class="gp unselectable">iex&gt; </span><span class="mi">1</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="mf">1.0</span><span class="w">
</span><span class="no">true</span><span class="w">
</span><span class="gp unselectable">iex&gt; </span><span class="mi">1</span><span class="w"> </span><span class="o">===</span><span class="w"> </span><span class="mf">1.0</span><span class="w">
</span><span class="no">false</span></code></pre><p><a href="Kernel.xhtml#!=/2"><code class="inline">!=</code></a> and <a href="Kernel.xhtml#!==/2"><code class="inline">!==</code></a> act as the negation of <a href="Kernel.xhtml#==/2"><code class="inline">==</code></a> and <a href="Kernel.xhtml#===/2"><code class="inline">===</code></a>, respectively.</p><h2 id="custom-and-overridden-operators">Custom and overridden operators</h2><h3 id="defining-custom-operators">Defining custom operators</h3><p>Elixir is capable of parsing a predefined set of operators. It's not possible to define new operators (as supported by some languages). However, not all operators that Elixir can parse are <em>used</em> by Elixir: for example, <code class="inline">+</code> and <code class="inline">||</code> are used by Elixir for addition and boolean <em>or</em>, but <code class="inline">&lt;~&gt;</code> is not used (but valid).</p><p>To define an operator, you can use the usual <code class="inline">def*</code> constructs (<code class="inline">def</code>, <code class="inline">defp</code>, <code class="inline">defmacro</code>, and so on) but with a syntax similar to how the operator is used:</p><pre><code class="makeup elixir" translate="no"><span class="kd">defmodule</span><span class="w"> </span><span class="nc">MyOperators</span><span class="w"> </span><span class="k" data-group-id="7490338062-1">do</span><span class="w">
  </span><span class="c1"># We define ~&gt; to return the maximum of the given two numbers,</span><span class="w">
  </span><span class="c1"># and &lt;~ to return the minimum.</span><span class="w">

  </span><span class="kd">def</span><span class="w"> </span><span class="n">a</span><span class="w"> </span><span class="o">~&gt;</span><span class="w"> </span><span class="n">b</span><span class="p">,</span><span class="w"> </span><span class="ss">do</span><span class="p">:</span><span class="w"> </span><span class="n">max</span><span class="p" data-group-id="7490338062-2">(</span><span class="n">a</span><span class="p">,</span><span class="w"> </span><span class="n">b</span><span class="p" data-group-id="7490338062-2">)</span><span class="w">
  </span><span class="kd">def</span><span class="w"> </span><span class="n">a</span><span class="w"> </span><span class="o">&lt;~</span><span class="w"> </span><span class="n">b</span><span class="p">,</span><span class="w"> </span><span class="ss">do</span><span class="p">:</span><span class="w"> </span><span class="n">min</span><span class="p" data-group-id="7490338062-3">(</span><span class="n">a</span><span class="p">,</span><span class="w"> </span><span class="n">b</span><span class="p" data-group-id="7490338062-3">)</span><span class="w">
</span><span class="k" data-group-id="7490338062-1">end</span></code></pre><p>To use the newly defined operators, you <strong>have to</strong> import the module that defines them:</p><pre><code class="makeup elixir" translate="no"><span class="gp unselectable">iex&gt; </span><span class="kn">import</span><span class="w"> </span><span class="nc">MyOperators</span><span class="w">
</span><span class="gp unselectable">iex&gt; </span><span class="mi">1</span><span class="w"> </span><span class="o">~&gt;</span><span class="w"> </span><span class="mi">2</span><span class="w">
</span><span class="mi">2</span><span class="w">
</span><span class="gp unselectable">iex&gt; </span><span class="mi">1</span><span class="w"> </span><span class="o">&lt;~</span><span class="w"> </span><span class="mi">2</span><span class="w">
</span><span class="mi">1</span></code></pre><p>The following is a table of all the operators that Elixir is capable of parsing, but that are not used by default:</p><ul><li><code class="inline">|||</code></li><li><code class="inline">&amp;&amp;&amp;</code></li><li><code class="inline">&lt;&lt;&lt;</code></li><li><code class="inline">&gt;&gt;&gt;</code></li><li><code class="inline">&lt;&lt;~</code></li><li><code class="inline">~&gt;&gt;</code></li><li><code class="inline">&lt;~</code></li><li><code class="inline">~&gt;</code></li><li><code class="inline">&lt;~&gt;</code></li><li><code class="inline">+++</code></li><li><code class="inline">---</code></li><li><code class="inline">...</code></li></ul><p>The following operators are used by the <a href="Bitwise.xhtml"><code class="inline">Bitwise</code></a> module when imported: <a href="Bitwise.xhtml#&&&/2"><code class="inline">&amp;&amp;&amp;</code></a>, <a href="Bitwise.xhtml#%3C%3C%3C/2"><code class="inline">&lt;&lt;&lt;</code></a>, <a href="Bitwise.xhtml#%3E%3E%3E/2"><code class="inline">&gt;&gt;&gt;</code></a>, and <a href="Bitwise.xhtml#%7C%7C%7C/2"><code class="inline">|||</code></a>. See the <a href="Bitwise.xhtml"><code class="inline">Bitwise</code></a> documentation for more information.</p><p>Note that the Elixir community generally discourages custom operators. They can be hard to read and even more to understand, as they don't have a descriptive name like functions do. That said, some specific cases or custom domain specific languages (DSLs) may justify these practices.</p><p>It is also possible to replace predefined operators, such as <code class="inline">+</code>, but doing so is extremely discouraged.</p>

  </body>
</html>
