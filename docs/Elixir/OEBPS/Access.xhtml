<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"
      xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>Access - Elixir v1.18.4</title>
    <meta name="generator" content="ExDoc v0.38.2" />
    <link type="text/css" rel="stylesheet" href="dist/epub-elixir-FNUUKFP7.css" />
    <script src="dist/epub-4WIP524F.js"></script>

  </head>
  <body class="content-inner">

    <h1 id="content">
Access <small>behaviour</small>
    </h1>


      <section id="moduledoc" class="docstring">
<p>Key-based access to data structures.</p><p>The <a href="Access.xhtml"><code class="inline">Access</code></a> module defines a behaviour for dynamically accessing
keys of any type in a data structure via the <code class="inline">data[key]</code> syntax.</p><p><a href="Access.xhtml"><code class="inline">Access</code></a> supports keyword lists (<a href="Keyword.xhtml"><code class="inline">Keyword</code></a>) and maps (<a href="Map.xhtml"><code class="inline">Map</code></a>) out
of the box. Keywords supports only atoms keys, keys for maps can
be of any type. Both return <code class="inline">nil</code> if the key does not exist:</p><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="n">keywords</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="p" data-group-id="3675205550-1">[</samp><samp class="ss">a</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">1</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">b</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">2</samp><samp class="p" data-group-id="3675205550-1">]</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="n">keywords</samp><samp class="p" data-group-id="3675205550-2">[</samp><samp class="ss">:a</samp><samp class="p" data-group-id="3675205550-2">]</samp><samp class="w">
</samp><samp class="mi">1</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="n">keywords</samp><samp class="p" data-group-id="3675205550-3">[</samp><samp class="ss">:c</samp><samp class="p" data-group-id="3675205550-3">]</samp><samp class="w">
</samp><samp class="no">nil</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="n">map</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="p" data-group-id="3675205550-4">%{</samp><samp class="ss">a</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">1</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">b</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">2</samp><samp class="p" data-group-id="3675205550-4">}</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="n">map</samp><samp class="p" data-group-id="3675205550-5">[</samp><samp class="ss">:a</samp><samp class="p" data-group-id="3675205550-5">]</samp><samp class="w">
</samp><samp class="mi">1</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="n">star_ratings</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="p" data-group-id="3675205550-6">%{</samp><samp class="mf">1.0</samp><samp class="w"> </samp><samp class="p">=&gt;</samp><samp class="w"> </samp><samp class="s">&quot;★&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mf">1.5</samp><samp class="w"> </samp><samp class="p">=&gt;</samp><samp class="w"> </samp><samp class="s">&quot;★☆&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mf">2.0</samp><samp class="w"> </samp><samp class="p">=&gt;</samp><samp class="w"> </samp><samp class="s">&quot;★★&quot;</samp><samp class="p" data-group-id="3675205550-6">}</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="n">star_ratings</samp><samp class="p" data-group-id="3675205550-7">[</samp><samp class="mf">1.5</samp><samp class="p" data-group-id="3675205550-7">]</samp><samp class="w">
</samp><samp class="s">&quot;★☆&quot;</samp></code></pre><p>This syntax is very convenient as it can be nested arbitrarily:</p><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="n">keywords</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="p" data-group-id="6615831614-1">[</samp><samp class="ss">a</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">1</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">b</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">2</samp><samp class="p" data-group-id="6615831614-1">]</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="n">keywords</samp><samp class="p" data-group-id="6615831614-2">[</samp><samp class="ss">:c</samp><samp class="p" data-group-id="6615831614-2">]</samp><samp class="p" data-group-id="6615831614-3">[</samp><samp class="ss">:unknown</samp><samp class="p" data-group-id="6615831614-3">]</samp><samp class="w">
</samp><samp class="no">nil</samp></code></pre><p>This works because accessing anything on a <code class="inline">nil</code> value, returns
<code class="inline">nil</code> itself:</p><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="no">nil</samp><samp class="p" data-group-id="2007752019-1">[</samp><samp class="ss">:a</samp><samp class="p" data-group-id="2007752019-1">]</samp><samp class="w">
</samp><samp class="no">nil</samp></code></pre><h2 id="module-maps-and-structs">Maps and structs</h2><p>While the access syntax is allowed in maps via <code class="inline">map[key]</code>,
if your map is made of predefined atom keys, you should prefer
to access those atom keys with <code class="inline">map.key</code> instead of <code class="inline">map[key]</code>,
as <code class="inline">map.key</code> will raise if the key is missing (which is not
supposed to happen if the keys are predefined) or if <code class="inline">map</code> is
<code class="inline">nil</code>.</p><p>Similarly, since structs are maps and structs have predefined
keys, they only allow the <code class="inline">struct.key</code> syntax and they do not
allow the <code class="inline">struct[key]</code> access syntax.</p><p>In other words, the <code class="inline">map[key]</code> syntax is loose, returning <code class="inline">nil</code>
for missing keys, while the <code class="inline">map.key</code> syntax is strict, raising
for both nil values and missing keys.</p><p>To bridge this gap, Elixir provides the <a href="Kernel.xhtml#get_in/1"><code class="inline">get_in/1</code></a> and <a href="Kernel.xhtml#get_in/2"><code class="inline">get_in/2</code></a>
functions, which are capable of traversing nested data structures,
even in the presence of <code class="inline">nil</code>s:</p><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="n">users</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="p" data-group-id="9641807736-1">%{</samp><samp class="s">&quot;john&quot;</samp><samp class="w"> </samp><samp class="p">=&gt;</samp><samp class="w"> </samp><samp class="p" data-group-id="9641807736-2">%{</samp><samp class="ss">age</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">27</samp><samp class="p" data-group-id="9641807736-2">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;meg&quot;</samp><samp class="w"> </samp><samp class="p">=&gt;</samp><samp class="w"> </samp><samp class="p" data-group-id="9641807736-3">%{</samp><samp class="ss">age</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">23</samp><samp class="p" data-group-id="9641807736-3">}</samp><samp class="p" data-group-id="9641807736-1">}</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="n">get_in</samp><samp class="p" data-group-id="9641807736-4">(</samp><samp class="n">users</samp><samp class="p" data-group-id="9641807736-5">[</samp><samp class="s">&quot;john&quot;</samp><samp class="p" data-group-id="9641807736-5">]</samp><samp class="o">.</samp><samp class="n">age</samp><samp class="p" data-group-id="9641807736-4">)</samp><samp class="w">
</samp><samp class="mi">27</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="n">get_in</samp><samp class="p" data-group-id="9641807736-6">(</samp><samp class="n">users</samp><samp class="p" data-group-id="9641807736-7">[</samp><samp class="s">&quot;unknown&quot;</samp><samp class="p" data-group-id="9641807736-7">]</samp><samp class="o">.</samp><samp class="n">age</samp><samp class="p" data-group-id="9641807736-6">)</samp><samp class="w">
</samp><samp class="no">nil</samp></code></pre><p>Notice how, even if no user was found, <a href="Kernel.xhtml#get_in/1"><code class="inline">get_in/1</code></a> returned <code class="inline">nil</code>.
Outside of <a href="Kernel.xhtml#get_in/1"><code class="inline">get_in/1</code></a>, trying to access the field <code class="inline">.age</code> on <code class="inline">nil</code>
would raise.</p><p>The <a href="Kernel.xhtml#get_in/2"><code class="inline">get_in/2</code></a> function takes one step further by allowing
different accessors to be mixed in. For example, given a user
map with the <code class="inline">:name</code> and <code class="inline">:languages</code> keys, here is how to
access the name of all programming languages:</p><pre><code class="makeup elixir" translate="no"><samp class="w">  </samp><samp class="gp unselectable">iex&gt; </samp><samp class="n">languages</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="p" data-group-id="2775454533-1">[</samp><samp class="w">
  </samp><samp class="gp unselectable">...&gt; </samp><samp class="w">  </samp><samp class="p" data-group-id="2775454533-2">%{</samp><samp class="ss">name</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;elixir&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">type</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="ss">:functional</samp><samp class="p" data-group-id="2775454533-2">}</samp><samp class="p">,</samp><samp class="w">
  </samp><samp class="gp unselectable">...&gt; </samp><samp class="w">  </samp><samp class="p" data-group-id="2775454533-3">%{</samp><samp class="ss">name</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;c&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">type</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="ss">:procedural</samp><samp class="p" data-group-id="2775454533-3">}</samp><samp class="w">
  </samp><samp class="gp unselectable">...&gt; </samp><samp class="p" data-group-id="2775454533-1">]</samp><samp class="w">
  </samp><samp class="gp unselectable">iex&gt; </samp><samp class="n">user</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="p" data-group-id="2775454533-4">%{</samp><samp class="ss">name</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;john&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">languages</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="n">languages</samp><samp class="p" data-group-id="2775454533-4">}</samp><samp class="w">
  </samp><samp class="gp unselectable">iex&gt; </samp><samp class="n">get_in</samp><samp class="p" data-group-id="2775454533-5">(</samp><samp class="n">user</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="2775454533-6">[</samp><samp class="ss">:languages</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="nc">Access</samp><samp class="o">.</samp><samp class="n">all</samp><samp class="p" data-group-id="2775454533-7">(</samp><samp class="p" data-group-id="2775454533-7">)</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:name</samp><samp class="p" data-group-id="2775454533-6">]</samp><samp class="p" data-group-id="2775454533-5">)</samp><samp class="w">
  </samp><samp class="p" data-group-id="2775454533-8">[</samp><samp class="s">&quot;elixir&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;c&quot;</samp><samp class="p" data-group-id="2775454533-8">]</samp></code></pre><p>This module provides convenience functions for traversing other
structures, like tuples and lists. As we will see next, they can
even be used to update nested data structures.</p><p>If you want to learn more about the dual nature of maps in Elixir,
as they can be either for structured data or as a key-value store,
see the <a href="Map.xhtml"><code class="inline">Map</code></a> module.</p><h2 id="module-updating-nested-data-structures">Updating nested data structures</h2><p>The access syntax can also be used with the <a href="Kernel.xhtml#put_in/2"><code class="inline">Kernel.put_in/2</code></a>,
<a href="Kernel.xhtml#update_in/2"><code class="inline">Kernel.update_in/2</code></a>, <a href="Kernel.xhtml#get_and_update_in/2"><code class="inline">Kernel.get_and_update_in/2</code></a>, and <a href="Kernel.xhtml#pop_in/1"><code class="inline">Kernel.pop_in/1</code></a>
macros to further manipulate values in nested data structures:</p><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="n">users</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="p" data-group-id="3246835511-1">%{</samp><samp class="s">&quot;john&quot;</samp><samp class="w"> </samp><samp class="p">=&gt;</samp><samp class="w"> </samp><samp class="p" data-group-id="3246835511-2">%{</samp><samp class="ss">age</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">27</samp><samp class="p" data-group-id="3246835511-2">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;meg&quot;</samp><samp class="w"> </samp><samp class="p">=&gt;</samp><samp class="w"> </samp><samp class="p" data-group-id="3246835511-3">%{</samp><samp class="ss">age</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">23</samp><samp class="p" data-group-id="3246835511-3">}</samp><samp class="p" data-group-id="3246835511-1">}</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="n">put_in</samp><samp class="p" data-group-id="3246835511-4">(</samp><samp class="n">users</samp><samp class="p" data-group-id="3246835511-5">[</samp><samp class="s">&quot;john&quot;</samp><samp class="p" data-group-id="3246835511-5">]</samp><samp class="o">.</samp><samp class="n">age</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">28</samp><samp class="p" data-group-id="3246835511-4">)</samp><samp class="w">
</samp><samp class="p" data-group-id="3246835511-6">%{</samp><samp class="s">&quot;john&quot;</samp><samp class="w"> </samp><samp class="p">=&gt;</samp><samp class="w"> </samp><samp class="p" data-group-id="3246835511-7">%{</samp><samp class="ss">age</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">28</samp><samp class="p" data-group-id="3246835511-7">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;meg&quot;</samp><samp class="w"> </samp><samp class="p">=&gt;</samp><samp class="w"> </samp><samp class="p" data-group-id="3246835511-8">%{</samp><samp class="ss">age</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">23</samp><samp class="p" data-group-id="3246835511-8">}</samp><samp class="p" data-group-id="3246835511-6">}</samp></code></pre><p>As shown in the previous section, you can also use the
<a href="Kernel.xhtml#put_in/3"><code class="inline">Kernel.put_in/3</code></a>, <a href="Kernel.xhtml#update_in/3"><code class="inline">Kernel.update_in/3</code></a>, <a href="Kernel.xhtml#pop_in/2"><code class="inline">Kernel.pop_in/2</code></a>, and
<a href="Kernel.xhtml#get_and_update_in/3"><code class="inline">Kernel.get_and_update_in/3</code></a> functions to provide nested
custom accessors. For instance, given a user map with the
<code class="inline">:name</code> and <code class="inline">:languages</code> keys, here is how to deeply traverse
the map and convert all language names to uppercase:</p><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="n">languages</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="p" data-group-id="4662614288-1">[</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="w">  </samp><samp class="p" data-group-id="4662614288-2">%{</samp><samp class="ss">name</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;elixir&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">type</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="ss">:functional</samp><samp class="p" data-group-id="4662614288-2">}</samp><samp class="p">,</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="w">  </samp><samp class="p" data-group-id="4662614288-3">%{</samp><samp class="ss">name</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;c&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">type</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="ss">:procedural</samp><samp class="p" data-group-id="4662614288-3">}</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="p" data-group-id="4662614288-1">]</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="n">user</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="p" data-group-id="4662614288-4">%{</samp><samp class="ss">name</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;john&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">languages</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="n">languages</samp><samp class="p" data-group-id="4662614288-4">}</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="n">update_in</samp><samp class="p" data-group-id="4662614288-5">(</samp><samp class="n">user</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="4662614288-6">[</samp><samp class="ss">:languages</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="nc">Access</samp><samp class="o">.</samp><samp class="n">all</samp><samp class="p" data-group-id="4662614288-7">(</samp><samp class="p" data-group-id="4662614288-7">)</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:name</samp><samp class="p" data-group-id="4662614288-6">]</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="o">&amp;</samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">upcase</samp><samp class="o">/</samp><samp class="mi">1</samp><samp class="p" data-group-id="4662614288-5">)</samp><samp class="w">
</samp><samp class="p" data-group-id="4662614288-8">%{</samp><samp class="w">
  </samp><samp class="ss">name</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;john&quot;</samp><samp class="p">,</samp><samp class="w">
  </samp><samp class="ss">languages</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="4662614288-9">[</samp><samp class="w">
    </samp><samp class="p" data-group-id="4662614288-10">%{</samp><samp class="ss">name</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;ELIXIR&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">type</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="ss">:functional</samp><samp class="p" data-group-id="4662614288-10">}</samp><samp class="p">,</samp><samp class="w">
    </samp><samp class="p" data-group-id="4662614288-11">%{</samp><samp class="ss">name</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;C&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">type</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="ss">:procedural</samp><samp class="p" data-group-id="4662614288-11">}</samp><samp class="w">
  </samp><samp class="p" data-group-id="4662614288-9">]</samp><samp class="w">
</samp><samp class="p" data-group-id="4662614288-8">}</samp></code></pre><p>See the functions <a href="#key/1"><code class="inline">key/1</code></a>, <a href="#key!/1"><code class="inline">key!/1</code></a>, <a href="#elem/1"><code class="inline">elem/1</code></a>, and <a href="#all/0"><code class="inline">all/0</code></a> for
some of the available accessors.</p>
      </section>


      <section id="summary" class="details-list">
        <h1 class="section-heading">Summary</h1>
<div class="summary-types summary">
  <h2>
    <a href="#types">Types</a>
  </h2>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#t:access_fun/2" data-no-tooltip="" translate="no">access_fun(data, current_value)</a>

      </div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#t:container/0" data-no-tooltip="" translate="no">container()</a>

      </div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#t:get_and_update_fun/2" data-no-tooltip="" translate="no">get_and_update_fun(data, current_value)</a>

      </div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#t:get_fun/1" data-no-tooltip="" translate="no">get_fun(data)</a>

      </div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#t:key/0" data-no-tooltip="" translate="no">key()</a>

      </div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#t:nil_container/0" data-no-tooltip="" translate="no">nil_container()</a>

      </div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#t:t/0" data-no-tooltip="" translate="no">t()</a>

      </div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#t:value/0" data-no-tooltip="" translate="no">value()</a>

      </div>

    </div>

</div>
<div class="summary-callbacks summary">
  <h2>
    <a href="#callbacks">Callbacks</a>
  </h2>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#c:fetch/2" data-no-tooltip="" translate="no">fetch(term, key)</a>

      </div>

        <div class="summary-synopsis"><p>Invoked in order to access the value stored under <code class="inline">key</code> in the given term <code class="inline">term</code>.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#c:get_and_update/3" data-no-tooltip="" translate="no">get_and_update(data, key, function)</a>

      </div>

        <div class="summary-synopsis"><p>Invoked in order to access the value under <code class="inline">key</code> and update it at the same time.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#c:pop/2" data-no-tooltip="" translate="no">pop(data, key)</a>

      </div>

        <div class="summary-synopsis"><p>Invoked to &quot;pop&quot; the value under <code class="inline">key</code> out of the given data structure.</p></div>

    </div>

</div>
<div class="summary-functions summary">
  <h2>
    <a href="#functions">Functions</a>
  </h2>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#all/0" data-no-tooltip="" translate="no">all()</a>

      </div>

        <div class="summary-synopsis"><p>Returns a function that accesses all the elements in a list.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#at/1" data-no-tooltip="" translate="no">at(index)</a>

      </div>

        <div class="summary-synopsis"><p>Returns a function that accesses the element at <code class="inline">index</code> (zero based) of a list.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#at!/1" data-no-tooltip="" translate="no">at!(index)</a>

      </div>

        <div class="summary-synopsis"><p>Same as <a><code class="inline">at/1</code></a> except that it raises <a><code class="inline">Enum.OutOfBoundsError</code></a>
if the given index is out of bounds.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#elem/1" data-no-tooltip="" translate="no">elem(index)</a>

      </div>

        <div class="summary-synopsis"><p>Returns a function that accesses the element at the given index in a tuple.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#fetch/2" data-no-tooltip="" translate="no">fetch(container, key)</a>

      </div>

        <div class="summary-synopsis"><p>Fetches the value for the given key in a container (a map, keyword
list, or struct that implements the <a><code class="inline">Access</code></a> behaviour).</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#fetch!/2" data-no-tooltip="" translate="no">fetch!(container, key)</a>

      </div>

        <div class="summary-synopsis"><p>Same as <a><code class="inline">fetch/2</code></a> but returns the value directly,
or raises a <a><code class="inline">KeyError</code></a> exception if <code class="inline">key</code> is not found.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#filter/1" data-no-tooltip="" translate="no">filter(func)</a>

      </div>

        <div class="summary-synopsis"><p>Returns a function that accesses all elements of a list that match the provided predicate.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#find/1" data-no-tooltip="" translate="no">find(predicate)</a>

      </div>

        <div class="summary-synopsis"><p>Returns a function that accesses the first element of a list that matches the provided predicate.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#get/3" data-no-tooltip="" translate="no">get(container, key, default \\ nil)</a>

      </div>

        <div class="summary-synopsis"><p>Gets the value for the given key in a container (a map, keyword
list, or struct that implements the <a><code class="inline">Access</code></a> behaviour).</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#get_and_update/3" data-no-tooltip="" translate="no">get_and_update(container, key, fun)</a>

      </div>

        <div class="summary-synopsis"><p>Gets and updates the given key in a <code class="inline">container</code> (a map, a keyword list,
a struct that implements the <a><code class="inline">Access</code></a> behaviour).</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#key/2" data-no-tooltip="" translate="no">key(key, default \\ nil)</a>

      </div>

        <div class="summary-synopsis"><p>Returns a function that accesses the given key in a map/struct.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#key!/1" data-no-tooltip="" translate="no">key!(key)</a>

      </div>

        <div class="summary-synopsis"><p>Returns a function that accesses the given key in a map/struct.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#pop/2" data-no-tooltip="" translate="no">pop(container, key)</a>

      </div>

        <div class="summary-synopsis"><p>Removes the entry with a given key from a container (a map, keyword
list, or struct that implements the <a><code class="inline">Access</code></a> behaviour).</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#slice/1" data-no-tooltip="" translate="no">slice(range)</a>

      </div>

        <div class="summary-synopsis"><p>Returns a function that accesses all items of a list that are within the provided range.</p></div>

    </div>

</div>

      </section>


      <section id="types" class="details-list">
        <h1 class="section-heading">Types</h1>

        <div class="types-list">
<section class="detail" id="t:access_fun/2">

  <div class="detail-header">
    <a href="#t:access_fun/2" class="detail-link" data-no-tooltip="" aria-label="Link to this type">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">access_fun(data, current_value)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/access.ex#L138" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@type</span> access_fun(data, current_value) ::
  <a href="#t:get_fun/1">get_fun</a>(data) | <a href="#t:get_and_update_fun/2">get_and_update_fun</a>(data, current_value)</pre>

      </div>


  </section>
</section>
<section class="detail" id="t:container/0">

  <div class="detail-header">
    <a href="#t:container/0" class="detail-link" data-no-tooltip="" aria-label="Link to this type">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">container()</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/access.ex#L125" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@type</span> container() :: <a href="typespecs.xhtml#built-in-types">keyword</a>() | <a href="typespecs.xhtml#basic-types">struct</a>() | <a href="typespecs.xhtml#basic-types">map</a>()</pre>

      </div>


  </section>
</section>
<section class="detail" id="t:get_and_update_fun/2">

  <div class="detail-header">
    <a href="#t:get_and_update_fun/2" class="detail-link" data-no-tooltip="" aria-label="Link to this type">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">get_and_update_fun(data, current_value)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/access.ex#L134" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@type</span> get_and_update_fun(data, current_value) :: (:get_and_update,
                                            data,
                                            (<a href="typespecs.xhtml#built-in-types">term</a>() -&gt; <a href="typespecs.xhtml#built-in-types">term</a>()) -&gt;
                                              {current_value,
                                               new_data :: <a href="#t:container/0">container</a>()}
                                              | :pop)</pre>

      </div>


  </section>
</section>
<section class="detail" id="t:get_fun/1">

  <div class="detail-header">
    <a href="#t:get_fun/1" class="detail-link" data-no-tooltip="" aria-label="Link to this type">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">get_fun(data)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/access.ex#L131" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@type</span> get_fun(data) :: (:get, data, (<a href="typespecs.xhtml#built-in-types">term</a>() -&gt; <a href="typespecs.xhtml#built-in-types">term</a>()) -&gt; new_data :: <a href="#t:container/0">container</a>())</pre>

      </div>


  </section>
</section>
<section class="detail" id="t:key/0">

  <div class="detail-header">
    <a href="#t:key/0" class="detail-link" data-no-tooltip="" aria-label="Link to this type">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">key()</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/access.ex#L128" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@type</span> key() :: <a href="typespecs.xhtml#basic-types">any</a>()</pre>

      </div>


  </section>
</section>
<section class="detail" id="t:nil_container/0">

  <div class="detail-header">
    <a href="#t:nil_container/0" class="detail-link" data-no-tooltip="" aria-label="Link to this type">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">nil_container()</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/access.ex#L126" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@type</span> nil_container() :: nil</pre>

      </div>


  </section>
</section>
<section class="detail" id="t:t/0">

  <div class="detail-header">
    <a href="#t:t/0" class="detail-link" data-no-tooltip="" aria-label="Link to this type">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">t()</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/access.ex#L127" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@type</span> t() :: <a href="#t:container/0">container</a>() | <a href="#t:nil_container/0">nil_container</a>() | <a href="typespecs.xhtml#basic-types">any</a>()</pre>

      </div>


  </section>
</section>
<section class="detail" id="t:value/0">

  <div class="detail-header">
    <a href="#t:value/0" class="detail-link" data-no-tooltip="" aria-label="Link to this type">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">value()</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/access.ex#L129" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@type</span> value() :: <a href="typespecs.xhtml#basic-types">any</a>()</pre>

      </div>


  </section>
</section>

        </div>
      </section>

      <section id="callbacks" class="details-list">
        <h1 class="section-heading">Callbacks</h1>

        <div class="callbacks-list">
<section class="detail" id="c:fetch/2">

  <div class="detail-header">
    <a href="#c:fetch/2" class="detail-link" data-no-tooltip="" aria-label="Link to this callback">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">fetch(term, key)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/access.ex#L158" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@callback</span> fetch(term :: <a href="#t:t/0">t</a>(), <a href="#t:key/0">key</a>()) :: {:ok, <a href="#t:value/0">value</a>()} | :error</pre>

      </div>

<p>Invoked in order to access the value stored under <code class="inline">key</code> in the given term <code class="inline">term</code>.</p><p>This function should return <code class="inline">{:ok, value}</code> where <code class="inline">value</code> is the value under
<code class="inline">key</code> if the key exists in the term, or <code class="inline">:error</code> if the key does not exist in
the term.</p><p>Many of the functions defined in the <a href="Access.xhtml"><code class="inline">Access</code></a> module internally call this
function. This function is also used when the square-brackets access syntax
(<code class="inline">structure[key]</code>) is used: the <a href="#fetch/2"><code class="inline">fetch/2</code></a> callback implemented by the module
that defines the <code class="inline">structure</code> struct is invoked and if it returns <code class="inline">{:ok, value}</code> then <code class="inline">value</code> is returned, or if it returns <code class="inline">:error</code> then <code class="inline">nil</code> is
returned.</p><p>See the <a href="Map.xhtml#fetch/2"><code class="inline">Map.fetch/2</code></a> and <a href="Keyword.xhtml#fetch/2"><code class="inline">Keyword.fetch/2</code></a> implementations for examples of
how to implement this callback.</p>
  </section>
</section>
<section class="detail" id="c:get_and_update/3">

  <div class="detail-header">
    <a href="#c:get_and_update/3" class="detail-link" data-no-tooltip="" aria-label="Link to this callback">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">get_and_update(data, key, function)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/access.ex#L183" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@callback</span> get_and_update(data, <a href="#t:key/0">key</a>(), (<a href="#t:value/0">value</a>() | nil -&gt;
                               {current_value, new_value :: <a href="#t:value/0">value</a>()} | :pop)) ::
  {current_value, new_data :: data}
when current_value: <a href="#t:value/0">value</a>(), data: <a href="#t:container/0">container</a>()</pre>

      </div>

<p>Invoked in order to access the value under <code class="inline">key</code> and update it at the same time.</p><p>The implementation of this callback should invoke <code class="inline">fun</code> with the value under
<code class="inline">key</code> in the passed structure <code class="inline">data</code>, or with <code class="inline">nil</code> if <code class="inline">key</code> is not present in it.
This function must return either <code class="inline">{current_value, new_value}</code> or <code class="inline">:pop</code>.</p><p>If the passed function returns <code class="inline">{current_value, new_value}</code>,
the return value of this callback should be <code class="inline">{current_value, new_data}</code>, where:</p><ul><li><p><code class="inline">current_value</code> is the retrieved value (which can be operated on before being returned)</p></li><li><p><code class="inline">new_value</code> is the new value to be stored under <code class="inline">key</code></p></li><li><p><code class="inline">new_data</code> is <code class="inline">data</code> after updating the value of <code class="inline">key</code> with <code class="inline">new_value</code>.</p></li></ul><p>If the passed function returns <code class="inline">:pop</code>, the return value of this callback
must be <code class="inline">{value, new_data}</code> where <code class="inline">value</code> is the value under <code class="inline">key</code>
(or <code class="inline">nil</code> if not present) and <code class="inline">new_data</code> is <code class="inline">data</code> without <code class="inline">key</code>.</p><p>See the implementations of <a href="Map.xhtml#get_and_update/3"><code class="inline">Map.get_and_update/3</code></a> or <a href="Keyword.xhtml#get_and_update/3"><code class="inline">Keyword.get_and_update/3</code></a>
for more examples.</p>
  </section>
</section>
<section class="detail" id="c:pop/2">

  <div class="detail-header">
    <a href="#c:pop/2" class="detail-link" data-no-tooltip="" aria-label="Link to this callback">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">pop(data, key)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/access.ex#L199" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@callback</span> pop(data, <a href="#t:key/0">key</a>()) :: {<a href="#t:value/0">value</a>(), data} when data: <a href="#t:container/0">container</a>()</pre>

      </div>

<p>Invoked to &quot;pop&quot; the value under <code class="inline">key</code> out of the given data structure.</p><p>When <code class="inline">key</code> exists in the given structure <code class="inline">data</code>, the implementation should
return a <code class="inline">{value, new_data}</code> tuple where <code class="inline">value</code> is the value that was under
<code class="inline">key</code> and <code class="inline">new_data</code> is <code class="inline">term</code> without <code class="inline">key</code>.</p><p>When <code class="inline">key</code> is not present in the given structure, a tuple <code class="inline">{value, data}</code>
should be returned, where <code class="inline">value</code> is implementation-defined.</p><p>See the implementations for <a href="Map.xhtml#pop/3"><code class="inline">Map.pop/3</code></a> or <a href="Keyword.xhtml#pop/3"><code class="inline">Keyword.pop/3</code></a> for more examples.</p>
  </section>
</section>

        </div>
      </section>

      <section id="functions" class="details-list">
        <h1 class="section-heading">Functions</h1>

        <div class="functions-list">
<section class="detail" id="all/0">

  <div class="detail-header">
    <a href="#all/0" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">all()</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/access.ex#L681" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> all() :: <a href="#t:access_fun/2">access_fun</a>(data :: <a href="typespecs.xhtml#built-in-types">list</a>(), current_value :: <a href="typespecs.xhtml#built-in-types">list</a>())</pre>

      </div>

<p>Returns a function that accesses all the elements in a list.</p><p>The returned function is typically passed as an accessor to <a href="Kernel.xhtml#get_in/2"><code class="inline">Kernel.get_in/2</code></a>,
<a href="Kernel.xhtml#get_and_update_in/3"><code class="inline">Kernel.get_and_update_in/3</code></a>, and friends.</p><h2 id="all/0-examples" class="section-heading"><a href="#all/0-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="n">list</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="p" data-group-id="5966538537-1">[</samp><samp class="p" data-group-id="5966538537-2">%{</samp><samp class="ss">name</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;john&quot;</samp><samp class="p" data-group-id="5966538537-2">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="5966538537-3">%{</samp><samp class="ss">name</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;mary&quot;</samp><samp class="p" data-group-id="5966538537-3">}</samp><samp class="p" data-group-id="5966538537-1">]</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="n">get_in</samp><samp class="p" data-group-id="5966538537-4">(</samp><samp class="n">list</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="5966538537-5">[</samp><samp class="nc">Access</samp><samp class="o">.</samp><samp class="n">all</samp><samp class="p" data-group-id="5966538537-6">(</samp><samp class="p" data-group-id="5966538537-6">)</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:name</samp><samp class="p" data-group-id="5966538537-5">]</samp><samp class="p" data-group-id="5966538537-4">)</samp><samp class="w">
</samp><samp class="p" data-group-id="5966538537-7">[</samp><samp class="s">&quot;john&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;mary&quot;</samp><samp class="p" data-group-id="5966538537-7">]</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="n">get_and_update_in</samp><samp class="p" data-group-id="5966538537-8">(</samp><samp class="n">list</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="5966538537-9">[</samp><samp class="nc">Access</samp><samp class="o">.</samp><samp class="n">all</samp><samp class="p" data-group-id="5966538537-10">(</samp><samp class="p" data-group-id="5966538537-10">)</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:name</samp><samp class="p" data-group-id="5966538537-9">]</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="k" data-group-id="5966538537-11">fn</samp><samp class="w"> </samp><samp class="n">prev</samp><samp class="w"> </samp><samp class="o">-&gt;</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="w">  </samp><samp class="p" data-group-id="5966538537-12">{</samp><samp class="n">prev</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">upcase</samp><samp class="p" data-group-id="5966538537-13">(</samp><samp class="n">prev</samp><samp class="p" data-group-id="5966538537-13">)</samp><samp class="p" data-group-id="5966538537-12">}</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="k" data-group-id="5966538537-11">end</samp><samp class="p" data-group-id="5966538537-8">)</samp><samp class="w">
</samp><samp class="p" data-group-id="5966538537-14">{</samp><samp class="p" data-group-id="5966538537-15">[</samp><samp class="s">&quot;john&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;mary&quot;</samp><samp class="p" data-group-id="5966538537-15">]</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="5966538537-16">[</samp><samp class="p" data-group-id="5966538537-17">%{</samp><samp class="ss">name</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;JOHN&quot;</samp><samp class="p" data-group-id="5966538537-17">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="5966538537-18">%{</samp><samp class="ss">name</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;MARY&quot;</samp><samp class="p" data-group-id="5966538537-18">}</samp><samp class="p" data-group-id="5966538537-16">]</samp><samp class="p" data-group-id="5966538537-14">}</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="n">pop_in</samp><samp class="p" data-group-id="5966538537-19">(</samp><samp class="n">list</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="5966538537-20">[</samp><samp class="nc">Access</samp><samp class="o">.</samp><samp class="n">all</samp><samp class="p" data-group-id="5966538537-21">(</samp><samp class="p" data-group-id="5966538537-21">)</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:name</samp><samp class="p" data-group-id="5966538537-20">]</samp><samp class="p" data-group-id="5966538537-19">)</samp><samp class="w">
</samp><samp class="p" data-group-id="5966538537-22">{</samp><samp class="p" data-group-id="5966538537-23">[</samp><samp class="s">&quot;john&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;mary&quot;</samp><samp class="p" data-group-id="5966538537-23">]</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="5966538537-24">[</samp><samp class="p" data-group-id="5966538537-25">%{</samp><samp class="p" data-group-id="5966538537-25">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="5966538537-26">%{</samp><samp class="p" data-group-id="5966538537-26">}</samp><samp class="p" data-group-id="5966538537-24">]</samp><samp class="p" data-group-id="5966538537-22">}</samp></code></pre><p>Here is an example that traverses the list dropping even
numbers and multiplying odd numbers by 2:</p><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="kn">require</samp><samp class="w"> </samp><samp class="nc">Integer</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="n">get_and_update_in</samp><samp class="p" data-group-id="9254985440-1">(</samp><samp class="p" data-group-id="9254985440-2">[</samp><samp class="mi">1</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">2</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">3</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">4</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">5</samp><samp class="p" data-group-id="9254985440-2">]</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="9254985440-3">[</samp><samp class="nc">Access</samp><samp class="o">.</samp><samp class="n">all</samp><samp class="p" data-group-id="9254985440-4">(</samp><samp class="p" data-group-id="9254985440-4">)</samp><samp class="p" data-group-id="9254985440-3">]</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="k" data-group-id="9254985440-5">fn</samp><samp class="w"> </samp><samp class="n">num</samp><samp class="w"> </samp><samp class="o">-&gt;</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="w">  </samp><samp class="k">if</samp><samp class="w"> </samp><samp class="nc">Integer</samp><samp class="o">.</samp><samp class="n">is_even</samp><samp class="p" data-group-id="9254985440-6">(</samp><samp class="n">num</samp><samp class="p" data-group-id="9254985440-6">)</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">do</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="ss">:pop</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">else</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="9254985440-7">{</samp><samp class="n">num</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">num</samp><samp class="w"> </samp><samp class="o">*</samp><samp class="w"> </samp><samp class="mi">2</samp><samp class="p" data-group-id="9254985440-7">}</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="k" data-group-id="9254985440-5">end</samp><samp class="p" data-group-id="9254985440-1">)</samp><samp class="w">
</samp><samp class="p" data-group-id="9254985440-8">{</samp><samp class="p" data-group-id="9254985440-9">[</samp><samp class="mi">1</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">2</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">3</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">4</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">5</samp><samp class="p" data-group-id="9254985440-9">]</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="9254985440-10">[</samp><samp class="mi">2</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">6</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">10</samp><samp class="p" data-group-id="9254985440-10">]</samp><samp class="p" data-group-id="9254985440-8">}</samp></code></pre><p>An error is raised if the accessed structure is not a list:</p><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="n">get_in</samp><samp class="p" data-group-id="8496326401-1">(</samp><samp class="p" data-group-id="8496326401-2">%{</samp><samp class="p" data-group-id="8496326401-2">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="8496326401-3">[</samp><samp class="nc">Access</samp><samp class="o">.</samp><samp class="n">all</samp><samp class="p" data-group-id="8496326401-4">(</samp><samp class="p" data-group-id="8496326401-4">)</samp><samp class="p" data-group-id="8496326401-3">]</samp><samp class="p" data-group-id="8496326401-1">)</samp><samp class="w">
</samp><samp class="gt">** (RuntimeError) Access.all/0 expected a list, got: %{}</samp></code></pre>
  </section>
</section>
<section class="detail" id="at/1">

  <div class="detail-header">
    <a href="#at/1" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">at(index)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/access.ex#L760" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> at(<a href="typespecs.xhtml#basic-types">integer</a>()) :: <a href="#t:access_fun/2">access_fun</a>(data :: <a href="typespecs.xhtml#built-in-types">list</a>(), current_value :: <a href="typespecs.xhtml#built-in-types">term</a>())</pre>

      </div>

<p>Returns a function that accesses the element at <code class="inline">index</code> (zero based) of a list.</p><p>Keep in mind that index lookups in lists take linear time: the larger the list,
the longer it will take to access its index. Therefore index-based operations
are generally avoided in favor of other functions in the <a href="Enum.xhtml"><code class="inline">Enum</code></a> module.</p><p>The returned function is typically passed as an accessor to <a href="Kernel.xhtml#get_in/2"><code class="inline">Kernel.get_in/2</code></a>,
<a href="Kernel.xhtml#get_and_update_in/3"><code class="inline">Kernel.get_and_update_in/3</code></a>, and friends.</p><h2 id="at/1-examples" class="section-heading"><a href="#at/1-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="n">list</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="p" data-group-id="7516748397-1">[</samp><samp class="p" data-group-id="7516748397-2">%{</samp><samp class="ss">name</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;john&quot;</samp><samp class="p" data-group-id="7516748397-2">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="7516748397-3">%{</samp><samp class="ss">name</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;mary&quot;</samp><samp class="p" data-group-id="7516748397-3">}</samp><samp class="p" data-group-id="7516748397-1">]</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="n">get_in</samp><samp class="p" data-group-id="7516748397-4">(</samp><samp class="n">list</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="7516748397-5">[</samp><samp class="nc">Access</samp><samp class="o">.</samp><samp class="n">at</samp><samp class="p" data-group-id="7516748397-6">(</samp><samp class="mi">1</samp><samp class="p" data-group-id="7516748397-6">)</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:name</samp><samp class="p" data-group-id="7516748397-5">]</samp><samp class="p" data-group-id="7516748397-4">)</samp><samp class="w">
</samp><samp class="s">&quot;mary&quot;</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="n">get_in</samp><samp class="p" data-group-id="7516748397-7">(</samp><samp class="n">list</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="7516748397-8">[</samp><samp class="nc">Access</samp><samp class="o">.</samp><samp class="n">at</samp><samp class="p" data-group-id="7516748397-9">(</samp><samp class="o">-</samp><samp class="mi">1</samp><samp class="p" data-group-id="7516748397-9">)</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:name</samp><samp class="p" data-group-id="7516748397-8">]</samp><samp class="p" data-group-id="7516748397-7">)</samp><samp class="w">
</samp><samp class="s">&quot;mary&quot;</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="n">get_and_update_in</samp><samp class="p" data-group-id="7516748397-10">(</samp><samp class="n">list</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="7516748397-11">[</samp><samp class="nc">Access</samp><samp class="o">.</samp><samp class="n">at</samp><samp class="p" data-group-id="7516748397-12">(</samp><samp class="mi">0</samp><samp class="p" data-group-id="7516748397-12">)</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:name</samp><samp class="p" data-group-id="7516748397-11">]</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="k" data-group-id="7516748397-13">fn</samp><samp class="w"> </samp><samp class="n">prev</samp><samp class="w"> </samp><samp class="o">-&gt;</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="w">  </samp><samp class="p" data-group-id="7516748397-14">{</samp><samp class="n">prev</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">upcase</samp><samp class="p" data-group-id="7516748397-15">(</samp><samp class="n">prev</samp><samp class="p" data-group-id="7516748397-15">)</samp><samp class="p" data-group-id="7516748397-14">}</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="k" data-group-id="7516748397-13">end</samp><samp class="p" data-group-id="7516748397-10">)</samp><samp class="w">
</samp><samp class="p" data-group-id="7516748397-16">{</samp><samp class="s">&quot;john&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="7516748397-17">[</samp><samp class="p" data-group-id="7516748397-18">%{</samp><samp class="ss">name</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;JOHN&quot;</samp><samp class="p" data-group-id="7516748397-18">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="7516748397-19">%{</samp><samp class="ss">name</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;mary&quot;</samp><samp class="p" data-group-id="7516748397-19">}</samp><samp class="p" data-group-id="7516748397-17">]</samp><samp class="p" data-group-id="7516748397-16">}</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="n">get_and_update_in</samp><samp class="p" data-group-id="7516748397-20">(</samp><samp class="n">list</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="7516748397-21">[</samp><samp class="nc">Access</samp><samp class="o">.</samp><samp class="n">at</samp><samp class="p" data-group-id="7516748397-22">(</samp><samp class="o">-</samp><samp class="mi">1</samp><samp class="p" data-group-id="7516748397-22">)</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:name</samp><samp class="p" data-group-id="7516748397-21">]</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="k" data-group-id="7516748397-23">fn</samp><samp class="w"> </samp><samp class="n">prev</samp><samp class="w"> </samp><samp class="o">-&gt;</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="w">  </samp><samp class="p" data-group-id="7516748397-24">{</samp><samp class="n">prev</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">upcase</samp><samp class="p" data-group-id="7516748397-25">(</samp><samp class="n">prev</samp><samp class="p" data-group-id="7516748397-25">)</samp><samp class="p" data-group-id="7516748397-24">}</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="k" data-group-id="7516748397-23">end</samp><samp class="p" data-group-id="7516748397-20">)</samp><samp class="w">
</samp><samp class="p" data-group-id="7516748397-26">{</samp><samp class="s">&quot;mary&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="7516748397-27">[</samp><samp class="p" data-group-id="7516748397-28">%{</samp><samp class="ss">name</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;john&quot;</samp><samp class="p" data-group-id="7516748397-28">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="7516748397-29">%{</samp><samp class="ss">name</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;MARY&quot;</samp><samp class="p" data-group-id="7516748397-29">}</samp><samp class="p" data-group-id="7516748397-27">]</samp><samp class="p" data-group-id="7516748397-26">}</samp></code></pre><p><a href="#at/1"><code class="inline">at/1</code></a> can also be used to pop elements out of a list or
a key inside of a list:</p><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="n">list</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="p" data-group-id="4625068118-1">[</samp><samp class="p" data-group-id="4625068118-2">%{</samp><samp class="ss">name</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;john&quot;</samp><samp class="p" data-group-id="4625068118-2">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="4625068118-3">%{</samp><samp class="ss">name</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;mary&quot;</samp><samp class="p" data-group-id="4625068118-3">}</samp><samp class="p" data-group-id="4625068118-1">]</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="n">pop_in</samp><samp class="p" data-group-id="4625068118-4">(</samp><samp class="n">list</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="4625068118-5">[</samp><samp class="nc">Access</samp><samp class="o">.</samp><samp class="n">at</samp><samp class="p" data-group-id="4625068118-6">(</samp><samp class="mi">0</samp><samp class="p" data-group-id="4625068118-6">)</samp><samp class="p" data-group-id="4625068118-5">]</samp><samp class="p" data-group-id="4625068118-4">)</samp><samp class="w">
</samp><samp class="p" data-group-id="4625068118-7">{</samp><samp class="p" data-group-id="4625068118-8">%{</samp><samp class="ss">name</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;john&quot;</samp><samp class="p" data-group-id="4625068118-8">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="4625068118-9">[</samp><samp class="p" data-group-id="4625068118-10">%{</samp><samp class="ss">name</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;mary&quot;</samp><samp class="p" data-group-id="4625068118-10">}</samp><samp class="p" data-group-id="4625068118-9">]</samp><samp class="p" data-group-id="4625068118-7">}</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="n">pop_in</samp><samp class="p" data-group-id="4625068118-11">(</samp><samp class="n">list</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="4625068118-12">[</samp><samp class="nc">Access</samp><samp class="o">.</samp><samp class="n">at</samp><samp class="p" data-group-id="4625068118-13">(</samp><samp class="mi">0</samp><samp class="p" data-group-id="4625068118-13">)</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:name</samp><samp class="p" data-group-id="4625068118-12">]</samp><samp class="p" data-group-id="4625068118-11">)</samp><samp class="w">
</samp><samp class="p" data-group-id="4625068118-14">{</samp><samp class="s">&quot;john&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="4625068118-15">[</samp><samp class="p" data-group-id="4625068118-16">%{</samp><samp class="p" data-group-id="4625068118-16">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="4625068118-17">%{</samp><samp class="ss">name</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;mary&quot;</samp><samp class="p" data-group-id="4625068118-17">}</samp><samp class="p" data-group-id="4625068118-15">]</samp><samp class="p" data-group-id="4625068118-14">}</samp></code></pre><p>When the index is out of bounds, <code class="inline">nil</code> is returned and the update function is never called:</p><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="n">list</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="p" data-group-id="7354811579-1">[</samp><samp class="p" data-group-id="7354811579-2">%{</samp><samp class="ss">name</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;john&quot;</samp><samp class="p" data-group-id="7354811579-2">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="7354811579-3">%{</samp><samp class="ss">name</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;mary&quot;</samp><samp class="p" data-group-id="7354811579-3">}</samp><samp class="p" data-group-id="7354811579-1">]</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="n">get_in</samp><samp class="p" data-group-id="7354811579-4">(</samp><samp class="n">list</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="7354811579-5">[</samp><samp class="nc">Access</samp><samp class="o">.</samp><samp class="n">at</samp><samp class="p" data-group-id="7354811579-6">(</samp><samp class="mi">10</samp><samp class="p" data-group-id="7354811579-6">)</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:name</samp><samp class="p" data-group-id="7354811579-5">]</samp><samp class="p" data-group-id="7354811579-4">)</samp><samp class="w">
</samp><samp class="no">nil</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="n">get_and_update_in</samp><samp class="p" data-group-id="7354811579-7">(</samp><samp class="n">list</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="7354811579-8">[</samp><samp class="nc">Access</samp><samp class="o">.</samp><samp class="n">at</samp><samp class="p" data-group-id="7354811579-9">(</samp><samp class="mi">10</samp><samp class="p" data-group-id="7354811579-9">)</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:name</samp><samp class="p" data-group-id="7354811579-8">]</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="k" data-group-id="7354811579-10">fn</samp><samp class="w"> </samp><samp class="n">prev</samp><samp class="w"> </samp><samp class="o">-&gt;</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="w">  </samp><samp class="p" data-group-id="7354811579-11">{</samp><samp class="n">prev</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">upcase</samp><samp class="p" data-group-id="7354811579-12">(</samp><samp class="n">prev</samp><samp class="p" data-group-id="7354811579-12">)</samp><samp class="p" data-group-id="7354811579-11">}</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="k" data-group-id="7354811579-10">end</samp><samp class="p" data-group-id="7354811579-7">)</samp><samp class="w">
</samp><samp class="p" data-group-id="7354811579-13">{</samp><samp class="no">nil</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="7354811579-14">[</samp><samp class="p" data-group-id="7354811579-15">%{</samp><samp class="ss">name</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;john&quot;</samp><samp class="p" data-group-id="7354811579-15">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="7354811579-16">%{</samp><samp class="ss">name</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;mary&quot;</samp><samp class="p" data-group-id="7354811579-16">}</samp><samp class="p" data-group-id="7354811579-14">]</samp><samp class="p" data-group-id="7354811579-13">}</samp></code></pre><p>An error is raised if the accessed structure is not a list:</p><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="n">get_in</samp><samp class="p" data-group-id="3882910486-1">(</samp><samp class="p" data-group-id="3882910486-2">%{</samp><samp class="p" data-group-id="3882910486-2">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="3882910486-3">[</samp><samp class="nc">Access</samp><samp class="o">.</samp><samp class="n">at</samp><samp class="p" data-group-id="3882910486-4">(</samp><samp class="mi">1</samp><samp class="p" data-group-id="3882910486-4">)</samp><samp class="p" data-group-id="3882910486-3">]</samp><samp class="p" data-group-id="3882910486-1">)</samp><samp class="w">
</samp><samp class="gt">** (RuntimeError) Access.at/1 expected a list, got: %{}</samp></code></pre>
  </section>
</section>
<section class="detail" id="at!/1">

  <div class="detail-header">
    <a href="#at!/1" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">at!(index)</h1>

        <span class="note">(since 1.11.0)</span>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/access.ex#L815" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> at!(<a href="typespecs.xhtml#basic-types">integer</a>()) :: <a href="#t:access_fun/2">access_fun</a>(data :: <a href="typespecs.xhtml#built-in-types">list</a>(), current_value :: <a href="typespecs.xhtml#built-in-types">term</a>())</pre>

      </div>

<p>Same as <a href="#at/1"><code class="inline">at/1</code></a> except that it raises <a href="Enum.OutOfBoundsError.xhtml"><code class="inline">Enum.OutOfBoundsError</code></a>
if the given index is out of bounds.</p><h2 id="at!/1-examples" class="section-heading"><a href="#at!/1-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="n">get_in</samp><samp class="p" data-group-id="2274790241-1">(</samp><samp class="p" data-group-id="2274790241-2">[</samp><samp class="ss">:a</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:b</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:c</samp><samp class="p" data-group-id="2274790241-2">]</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="2274790241-3">[</samp><samp class="nc">Access</samp><samp class="o">.</samp><samp class="n">at!</samp><samp class="p" data-group-id="2274790241-4">(</samp><samp class="mi">2</samp><samp class="p" data-group-id="2274790241-4">)</samp><samp class="p" data-group-id="2274790241-3">]</samp><samp class="p" data-group-id="2274790241-1">)</samp><samp class="w">
</samp><samp class="ss">:c</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="n">get_in</samp><samp class="p" data-group-id="2274790241-5">(</samp><samp class="p" data-group-id="2274790241-6">[</samp><samp class="ss">:a</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:b</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:c</samp><samp class="p" data-group-id="2274790241-6">]</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="2274790241-7">[</samp><samp class="nc">Access</samp><samp class="o">.</samp><samp class="n">at!</samp><samp class="p" data-group-id="2274790241-8">(</samp><samp class="mi">3</samp><samp class="p" data-group-id="2274790241-8">)</samp><samp class="p" data-group-id="2274790241-7">]</samp><samp class="p" data-group-id="2274790241-5">)</samp><samp class="w">
</samp><samp class="gt">** (Enum.OutOfBoundsError) out of bounds error</samp></code></pre>
  </section>
</section>
<section class="detail" id="elem/1">

  <div class="detail-header">
    <a href="#elem/1" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">elem(index)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/access.ex#L627" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> elem(<a href="typespecs.xhtml#basic-types">non_neg_integer</a>()) :: <a href="#t:access_fun/2">access_fun</a>(data :: <a href="typespecs.xhtml#basic-types">tuple</a>(), current_value :: <a href="typespecs.xhtml#built-in-types">term</a>())</pre>

      </div>

<p>Returns a function that accesses the element at the given index in a tuple.</p><p>The returned function is typically passed as an accessor to <a href="Kernel.xhtml#get_in/2"><code class="inline">Kernel.get_in/2</code></a>,
<a href="Kernel.xhtml#get_and_update_in/3"><code class="inline">Kernel.get_and_update_in/3</code></a>, and friends.</p><p>The returned function raises if <code class="inline">index</code> is out of bounds.</p><p>Note that popping elements out of tuples is not possible and raises an
error.</p><h2 id="elem/1-examples" class="section-heading"><a href="#elem/1-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="n">map</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="p" data-group-id="0976860675-1">%{</samp><samp class="ss">user</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="0976860675-2">{</samp><samp class="s">&quot;john&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">27</samp><samp class="p" data-group-id="0976860675-2">}</samp><samp class="p" data-group-id="0976860675-1">}</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="n">get_in</samp><samp class="p" data-group-id="0976860675-3">(</samp><samp class="n">map</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="0976860675-4">[</samp><samp class="ss">:user</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="nc">Access</samp><samp class="o">.</samp><samp class="n">elem</samp><samp class="p" data-group-id="0976860675-5">(</samp><samp class="mi">0</samp><samp class="p" data-group-id="0976860675-5">)</samp><samp class="p" data-group-id="0976860675-4">]</samp><samp class="p" data-group-id="0976860675-3">)</samp><samp class="w">
</samp><samp class="s">&quot;john&quot;</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="n">get_and_update_in</samp><samp class="p" data-group-id="0976860675-6">(</samp><samp class="n">map</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="0976860675-7">[</samp><samp class="ss">:user</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="nc">Access</samp><samp class="o">.</samp><samp class="n">elem</samp><samp class="p" data-group-id="0976860675-8">(</samp><samp class="mi">0</samp><samp class="p" data-group-id="0976860675-8">)</samp><samp class="p" data-group-id="0976860675-7">]</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="k" data-group-id="0976860675-9">fn</samp><samp class="w"> </samp><samp class="n">prev</samp><samp class="w"> </samp><samp class="o">-&gt;</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="w">  </samp><samp class="p" data-group-id="0976860675-10">{</samp><samp class="n">prev</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">upcase</samp><samp class="p" data-group-id="0976860675-11">(</samp><samp class="n">prev</samp><samp class="p" data-group-id="0976860675-11">)</samp><samp class="p" data-group-id="0976860675-10">}</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="k" data-group-id="0976860675-9">end</samp><samp class="p" data-group-id="0976860675-6">)</samp><samp class="w">
</samp><samp class="p" data-group-id="0976860675-12">{</samp><samp class="s">&quot;john&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="0976860675-13">%{</samp><samp class="ss">user</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="0976860675-14">{</samp><samp class="s">&quot;JOHN&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">27</samp><samp class="p" data-group-id="0976860675-14">}</samp><samp class="p" data-group-id="0976860675-13">}</samp><samp class="p" data-group-id="0976860675-12">}</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="n">pop_in</samp><samp class="p" data-group-id="0976860675-15">(</samp><samp class="n">map</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="0976860675-16">[</samp><samp class="ss">:user</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="nc">Access</samp><samp class="o">.</samp><samp class="n">elem</samp><samp class="p" data-group-id="0976860675-17">(</samp><samp class="mi">0</samp><samp class="p" data-group-id="0976860675-17">)</samp><samp class="p" data-group-id="0976860675-16">]</samp><samp class="p" data-group-id="0976860675-15">)</samp><samp class="w">
</samp><samp class="gt">** (RuntimeError) cannot pop data from a tuple</samp></code></pre><p>An error is raised if the accessed structure is not a tuple:</p><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="n">get_in</samp><samp class="p" data-group-id="0951119227-1">(</samp><samp class="p" data-group-id="0951119227-2">%{</samp><samp class="p" data-group-id="0951119227-2">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="0951119227-3">[</samp><samp class="nc">Access</samp><samp class="o">.</samp><samp class="n">elem</samp><samp class="p" data-group-id="0951119227-4">(</samp><samp class="mi">0</samp><samp class="p" data-group-id="0951119227-4">)</samp><samp class="p" data-group-id="0951119227-3">]</samp><samp class="p" data-group-id="0951119227-1">)</samp><samp class="w">
</samp><samp class="gt">** (RuntimeError) Access.elem/1 expected a tuple, got: %{}</samp></code></pre>
  </section>
</section>
<section class="detail" id="fetch/2">

  <div class="detail-header">
    <a href="#fetch/2" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">fetch(container, key)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/access.ex#L243" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> fetch(<a href="#t:container/0">container</a>(), <a href="typespecs.xhtml#built-in-types">term</a>()) :: {:ok, <a href="typespecs.xhtml#built-in-types">term</a>()} | :error</pre>

          <pre translate="no"><span class="attribute">@spec</span> fetch(<a href="#t:nil_container/0">nil_container</a>(), <a href="typespecs.xhtml#basic-types">any</a>()) :: :error</pre>

      </div>

<p>Fetches the value for the given key in a container (a map, keyword
list, or struct that implements the <a href="Access.xhtml"><code class="inline">Access</code></a> behaviour).</p><p>Returns <code class="inline">{:ok, value}</code> where <code class="inline">value</code> is the value under <code class="inline">key</code> if there is such
a key, or <code class="inline">:error</code> if <code class="inline">key</code> is not found.</p><h2 id="fetch/2-examples" class="section-heading"><a href="#fetch/2-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Access</samp><samp class="o">.</samp><samp class="n">fetch</samp><samp class="p" data-group-id="8736512337-1">(</samp><samp class="p" data-group-id="8736512337-2">%{</samp><samp class="ss">name</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;meg&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">age</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">26</samp><samp class="p" data-group-id="8736512337-2">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:name</samp><samp class="p" data-group-id="8736512337-1">)</samp><samp class="w">
</samp><samp class="p" data-group-id="8736512337-3">{</samp><samp class="ss">:ok</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;meg&quot;</samp><samp class="p" data-group-id="8736512337-3">}</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Access</samp><samp class="o">.</samp><samp class="n">fetch</samp><samp class="p" data-group-id="8736512337-4">(</samp><samp class="p" data-group-id="8736512337-5">[</samp><samp class="ss">ordered</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">true</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">on_timeout</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="ss">:exit</samp><samp class="p" data-group-id="8736512337-5">]</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:timeout</samp><samp class="p" data-group-id="8736512337-4">)</samp><samp class="w">
</samp><samp class="ss">:error</samp></code></pre>
  </section>
</section>
<section class="detail" id="fetch!/2">

  <div class="detail-header">
    <a href="#fetch!/2" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">fetch!(container, key)</h1>

        <span class="note">(since 1.10.0)</span>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/access.ex#L287" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> fetch!(<a href="#t:container/0">container</a>(), <a href="typespecs.xhtml#built-in-types">term</a>()) :: <a href="typespecs.xhtml#built-in-types">term</a>()</pre>

      </div>

<p>Same as <a href="#fetch/2"><code class="inline">fetch/2</code></a> but returns the value directly,
or raises a <a href="KeyError.xhtml"><code class="inline">KeyError</code></a> exception if <code class="inline">key</code> is not found.</p><h2 id="fetch!/2-examples" class="section-heading"><a href="#fetch!/2-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Access</samp><samp class="o">.</samp><samp class="n">fetch!</samp><samp class="p" data-group-id="7294614056-1">(</samp><samp class="p" data-group-id="7294614056-2">%{</samp><samp class="ss">name</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;meg&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">age</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">26</samp><samp class="p" data-group-id="7294614056-2">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:name</samp><samp class="p" data-group-id="7294614056-1">)</samp><samp class="w">
</samp><samp class="s">&quot;meg&quot;</samp></code></pre>
  </section>
</section>
<section class="detail" id="filter/1">

  <div class="detail-header">
    <a href="#filter/1" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">filter(func)</h1>

        <span class="note">(since 1.6.0)</span>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/access.ex#L882" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> filter((<a href="typespecs.xhtml#built-in-types">term</a>() -&gt; <a href="typespecs.xhtml#built-in-types">boolean</a>())) ::
  <a href="#t:access_fun/2">access_fun</a>(data :: <a href="typespecs.xhtml#built-in-types">list</a>(), current_value :: <a href="typespecs.xhtml#built-in-types">list</a>())</pre>

      </div>

<p>Returns a function that accesses all elements of a list that match the provided predicate.</p><p>The returned function is typically passed as an accessor to <a href="Kernel.xhtml#get_in/2"><code class="inline">Kernel.get_in/2</code></a>,
<a href="Kernel.xhtml#get_and_update_in/3"><code class="inline">Kernel.get_and_update_in/3</code></a>, and friends.</p><h2 id="filter/1-examples" class="section-heading"><a href="#filter/1-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="n">list</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="p" data-group-id="2021023126-1">[</samp><samp class="p" data-group-id="2021023126-2">%{</samp><samp class="ss">name</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;john&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">salary</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">10</samp><samp class="p" data-group-id="2021023126-2">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="2021023126-3">%{</samp><samp class="ss">name</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;francine&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">salary</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">30</samp><samp class="p" data-group-id="2021023126-3">}</samp><samp class="p" data-group-id="2021023126-1">]</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="n">get_in</samp><samp class="p" data-group-id="2021023126-4">(</samp><samp class="n">list</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="2021023126-5">[</samp><samp class="nc">Access</samp><samp class="o">.</samp><samp class="n">filter</samp><samp class="p" data-group-id="2021023126-6">(</samp><samp class="o">&amp;</samp><samp class="p" data-group-id="2021023126-7">(</samp><samp class="ni">&amp;1</samp><samp class="o">.</samp><samp class="n">salary</samp><samp class="w"> </samp><samp class="o">&gt;</samp><samp class="w"> </samp><samp class="mi">20</samp><samp class="p" data-group-id="2021023126-7">)</samp><samp class="p" data-group-id="2021023126-6">)</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:name</samp><samp class="p" data-group-id="2021023126-5">]</samp><samp class="p" data-group-id="2021023126-4">)</samp><samp class="w">
</samp><samp class="p" data-group-id="2021023126-8">[</samp><samp class="s">&quot;francine&quot;</samp><samp class="p" data-group-id="2021023126-8">]</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="n">get_and_update_in</samp><samp class="p" data-group-id="2021023126-9">(</samp><samp class="n">list</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="2021023126-10">[</samp><samp class="nc">Access</samp><samp class="o">.</samp><samp class="n">filter</samp><samp class="p" data-group-id="2021023126-11">(</samp><samp class="o">&amp;</samp><samp class="p" data-group-id="2021023126-12">(</samp><samp class="ni">&amp;1</samp><samp class="o">.</samp><samp class="n">salary</samp><samp class="w"> </samp><samp class="o">&lt;=</samp><samp class="w"> </samp><samp class="mi">20</samp><samp class="p" data-group-id="2021023126-12">)</samp><samp class="p" data-group-id="2021023126-11">)</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:name</samp><samp class="p" data-group-id="2021023126-10">]</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="k" data-group-id="2021023126-13">fn</samp><samp class="w"> </samp><samp class="n">prev</samp><samp class="w"> </samp><samp class="o">-&gt;</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="w">  </samp><samp class="p" data-group-id="2021023126-14">{</samp><samp class="n">prev</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">upcase</samp><samp class="p" data-group-id="2021023126-15">(</samp><samp class="n">prev</samp><samp class="p" data-group-id="2021023126-15">)</samp><samp class="p" data-group-id="2021023126-14">}</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="k" data-group-id="2021023126-13">end</samp><samp class="p" data-group-id="2021023126-9">)</samp><samp class="w">
</samp><samp class="p" data-group-id="2021023126-16">{</samp><samp class="p" data-group-id="2021023126-17">[</samp><samp class="s">&quot;john&quot;</samp><samp class="p" data-group-id="2021023126-17">]</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="2021023126-18">[</samp><samp class="p" data-group-id="2021023126-19">%{</samp><samp class="ss">name</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;JOHN&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">salary</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">10</samp><samp class="p" data-group-id="2021023126-19">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="2021023126-20">%{</samp><samp class="ss">name</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;francine&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">salary</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">30</samp><samp class="p" data-group-id="2021023126-20">}</samp><samp class="p" data-group-id="2021023126-18">]</samp><samp class="p" data-group-id="2021023126-16">}</samp></code></pre><p><a href="#filter/1"><code class="inline">filter/1</code></a> can also be used to pop elements out of a list or
a key inside of a list:</p><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="n">list</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="p" data-group-id="5589294219-1">[</samp><samp class="p" data-group-id="5589294219-2">%{</samp><samp class="ss">name</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;john&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">salary</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">10</samp><samp class="p" data-group-id="5589294219-2">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="5589294219-3">%{</samp><samp class="ss">name</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;francine&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">salary</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">30</samp><samp class="p" data-group-id="5589294219-3">}</samp><samp class="p" data-group-id="5589294219-1">]</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="n">pop_in</samp><samp class="p" data-group-id="5589294219-4">(</samp><samp class="n">list</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="5589294219-5">[</samp><samp class="nc">Access</samp><samp class="o">.</samp><samp class="n">filter</samp><samp class="p" data-group-id="5589294219-6">(</samp><samp class="o">&amp;</samp><samp class="p" data-group-id="5589294219-7">(</samp><samp class="ni">&amp;1</samp><samp class="o">.</samp><samp class="n">salary</samp><samp class="w"> </samp><samp class="o">&gt;=</samp><samp class="w"> </samp><samp class="mi">20</samp><samp class="p" data-group-id="5589294219-7">)</samp><samp class="p" data-group-id="5589294219-6">)</samp><samp class="p" data-group-id="5589294219-5">]</samp><samp class="p" data-group-id="5589294219-4">)</samp><samp class="w">
</samp><samp class="p" data-group-id="5589294219-8">{</samp><samp class="p" data-group-id="5589294219-9">[</samp><samp class="p" data-group-id="5589294219-10">%{</samp><samp class="ss">name</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;francine&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">salary</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">30</samp><samp class="p" data-group-id="5589294219-10">}</samp><samp class="p" data-group-id="5589294219-9">]</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="5589294219-11">[</samp><samp class="p" data-group-id="5589294219-12">%{</samp><samp class="ss">name</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;john&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">salary</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">10</samp><samp class="p" data-group-id="5589294219-12">}</samp><samp class="p" data-group-id="5589294219-11">]</samp><samp class="p" data-group-id="5589294219-8">}</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="n">pop_in</samp><samp class="p" data-group-id="5589294219-13">(</samp><samp class="n">list</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="5589294219-14">[</samp><samp class="nc">Access</samp><samp class="o">.</samp><samp class="n">filter</samp><samp class="p" data-group-id="5589294219-15">(</samp><samp class="o">&amp;</samp><samp class="p" data-group-id="5589294219-16">(</samp><samp class="ni">&amp;1</samp><samp class="o">.</samp><samp class="n">salary</samp><samp class="w"> </samp><samp class="o">&gt;=</samp><samp class="w"> </samp><samp class="mi">20</samp><samp class="p" data-group-id="5589294219-16">)</samp><samp class="p" data-group-id="5589294219-15">)</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:name</samp><samp class="p" data-group-id="5589294219-14">]</samp><samp class="p" data-group-id="5589294219-13">)</samp><samp class="w">
</samp><samp class="p" data-group-id="5589294219-17">{</samp><samp class="p" data-group-id="5589294219-18">[</samp><samp class="s">&quot;francine&quot;</samp><samp class="p" data-group-id="5589294219-18">]</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="5589294219-19">[</samp><samp class="p" data-group-id="5589294219-20">%{</samp><samp class="ss">name</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;john&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">salary</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">10</samp><samp class="p" data-group-id="5589294219-20">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="5589294219-21">%{</samp><samp class="ss">salary</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">30</samp><samp class="p" data-group-id="5589294219-21">}</samp><samp class="p" data-group-id="5589294219-19">]</samp><samp class="p" data-group-id="5589294219-17">}</samp></code></pre><p>When no match is found, an empty list is returned and the update function is never called</p><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="n">list</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="p" data-group-id="5657078471-1">[</samp><samp class="p" data-group-id="5657078471-2">%{</samp><samp class="ss">name</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;john&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">salary</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">10</samp><samp class="p" data-group-id="5657078471-2">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="5657078471-3">%{</samp><samp class="ss">name</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;francine&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">salary</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">30</samp><samp class="p" data-group-id="5657078471-3">}</samp><samp class="p" data-group-id="5657078471-1">]</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="n">get_in</samp><samp class="p" data-group-id="5657078471-4">(</samp><samp class="n">list</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="5657078471-5">[</samp><samp class="nc">Access</samp><samp class="o">.</samp><samp class="n">filter</samp><samp class="p" data-group-id="5657078471-6">(</samp><samp class="o">&amp;</samp><samp class="p" data-group-id="5657078471-7">(</samp><samp class="ni">&amp;1</samp><samp class="o">.</samp><samp class="n">salary</samp><samp class="w"> </samp><samp class="o">&gt;=</samp><samp class="w"> </samp><samp class="mi">50</samp><samp class="p" data-group-id="5657078471-7">)</samp><samp class="p" data-group-id="5657078471-6">)</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:name</samp><samp class="p" data-group-id="5657078471-5">]</samp><samp class="p" data-group-id="5657078471-4">)</samp><samp class="w">
</samp><samp class="p" data-group-id="5657078471-8">[</samp><samp class="p" data-group-id="5657078471-8">]</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="n">get_and_update_in</samp><samp class="p" data-group-id="5657078471-9">(</samp><samp class="n">list</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="5657078471-10">[</samp><samp class="nc">Access</samp><samp class="o">.</samp><samp class="n">filter</samp><samp class="p" data-group-id="5657078471-11">(</samp><samp class="o">&amp;</samp><samp class="p" data-group-id="5657078471-12">(</samp><samp class="ni">&amp;1</samp><samp class="o">.</samp><samp class="n">salary</samp><samp class="w"> </samp><samp class="o">&gt;=</samp><samp class="w"> </samp><samp class="mi">50</samp><samp class="p" data-group-id="5657078471-12">)</samp><samp class="p" data-group-id="5657078471-11">)</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:name</samp><samp class="p" data-group-id="5657078471-10">]</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="k" data-group-id="5657078471-13">fn</samp><samp class="w"> </samp><samp class="n">prev</samp><samp class="w"> </samp><samp class="o">-&gt;</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="w">  </samp><samp class="p" data-group-id="5657078471-14">{</samp><samp class="n">prev</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">upcase</samp><samp class="p" data-group-id="5657078471-15">(</samp><samp class="n">prev</samp><samp class="p" data-group-id="5657078471-15">)</samp><samp class="p" data-group-id="5657078471-14">}</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="k" data-group-id="5657078471-13">end</samp><samp class="p" data-group-id="5657078471-9">)</samp><samp class="w">
</samp><samp class="p" data-group-id="5657078471-16">{</samp><samp class="p" data-group-id="5657078471-17">[</samp><samp class="p" data-group-id="5657078471-17">]</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="5657078471-18">[</samp><samp class="p" data-group-id="5657078471-19">%{</samp><samp class="ss">name</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;john&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">salary</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">10</samp><samp class="p" data-group-id="5657078471-19">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="5657078471-20">%{</samp><samp class="ss">name</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;francine&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">salary</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">30</samp><samp class="p" data-group-id="5657078471-20">}</samp><samp class="p" data-group-id="5657078471-18">]</samp><samp class="p" data-group-id="5657078471-16">}</samp></code></pre><p>An error is raised if the predicate is not a function or is of the incorrect arity:</p><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="n">get_in</samp><samp class="p" data-group-id="4617679657-1">(</samp><samp class="p" data-group-id="4617679657-2">[</samp><samp class="p" data-group-id="4617679657-2">]</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="4617679657-3">[</samp><samp class="nc">Access</samp><samp class="o">.</samp><samp class="n">filter</samp><samp class="p" data-group-id="4617679657-4">(</samp><samp class="mi">5</samp><samp class="p" data-group-id="4617679657-4">)</samp><samp class="p" data-group-id="4617679657-3">]</samp><samp class="p" data-group-id="4617679657-1">)</samp><samp class="w">
</samp><samp class="gt">** (FunctionClauseError) no function clause matching in Access.filter/1</samp></code></pre><p>An error is raised if the accessed structure is not a list:</p><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="n">get_in</samp><samp class="p" data-group-id="4144293361-1">(</samp><samp class="p" data-group-id="4144293361-2">%{</samp><samp class="p" data-group-id="4144293361-2">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="4144293361-3">[</samp><samp class="nc">Access</samp><samp class="o">.</samp><samp class="n">filter</samp><samp class="p" data-group-id="4144293361-4">(</samp><samp class="k" data-group-id="4144293361-5">fn</samp><samp class="w"> </samp><samp class="n">a</samp><samp class="w"> </samp><samp class="o">-&gt;</samp><samp class="w"> </samp><samp class="n">a</samp><samp class="w"> </samp><samp class="o">==</samp><samp class="w"> </samp><samp class="mi">10</samp><samp class="w"> </samp><samp class="k" data-group-id="4144293361-5">end</samp><samp class="p" data-group-id="4144293361-4">)</samp><samp class="p" data-group-id="4144293361-3">]</samp><samp class="p" data-group-id="4144293361-1">)</samp><samp class="w">
</samp><samp class="gt">** (RuntimeError) Access.filter/1 expected a list, got: %{}</samp></code></pre>
  </section>
</section>
<section class="detail" id="find/1">

  <div class="detail-header">
    <a href="#find/1" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">find(predicate)</h1>

        <span class="note">(since 1.17.0)</span>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/access.ex#L1075" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> find((<a href="typespecs.xhtml#built-in-types">term</a>() -&gt; <a href="typespecs.xhtml#built-in-types">as_boolean</a>(<a href="typespecs.xhtml#built-in-types">term</a>()))) ::
  <a href="#t:access_fun/2">access_fun</a>(data :: <a href="typespecs.xhtml#built-in-types">list</a>(), current_value :: <a href="typespecs.xhtml#built-in-types">term</a>())</pre>

      </div>

<p>Returns a function that accesses the first element of a list that matches the provided predicate.</p><p>The returned function is typically passed as an accessor to <a href="Kernel.xhtml#get_in/2"><code class="inline">Kernel.get_in/2</code></a>,
<a href="Kernel.xhtml#get_and_update_in/3"><code class="inline">Kernel.get_and_update_in/3</code></a>, and friends.</p><h2 id="find/1-examples" class="section-heading"><a href="#find/1-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="n">list</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="p" data-group-id="9138456621-1">[</samp><samp class="p" data-group-id="9138456621-2">%{</samp><samp class="ss">name</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;john&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">salary</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">10</samp><samp class="p" data-group-id="9138456621-2">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="9138456621-3">%{</samp><samp class="ss">name</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;francine&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">salary</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">30</samp><samp class="p" data-group-id="9138456621-3">}</samp><samp class="p" data-group-id="9138456621-1">]</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="n">get_in</samp><samp class="p" data-group-id="9138456621-4">(</samp><samp class="n">list</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="9138456621-5">[</samp><samp class="nc">Access</samp><samp class="o">.</samp><samp class="n">find</samp><samp class="p" data-group-id="9138456621-6">(</samp><samp class="o">&amp;</samp><samp class="p" data-group-id="9138456621-7">(</samp><samp class="ni">&amp;1</samp><samp class="o">.</samp><samp class="n">salary</samp><samp class="w"> </samp><samp class="o">&gt;</samp><samp class="w"> </samp><samp class="mi">20</samp><samp class="p" data-group-id="9138456621-7">)</samp><samp class="p" data-group-id="9138456621-6">)</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:name</samp><samp class="p" data-group-id="9138456621-5">]</samp><samp class="p" data-group-id="9138456621-4">)</samp><samp class="w">
</samp><samp class="s">&quot;francine&quot;</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="w"> </samp><samp class="n">get_and_update_in</samp><samp class="p" data-group-id="9138456621-8">(</samp><samp class="n">list</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="9138456621-9">[</samp><samp class="nc">Access</samp><samp class="o">.</samp><samp class="n">find</samp><samp class="p" data-group-id="9138456621-10">(</samp><samp class="o">&amp;</samp><samp class="p" data-group-id="9138456621-11">(</samp><samp class="ni">&amp;1</samp><samp class="o">.</samp><samp class="n">salary</samp><samp class="w"> </samp><samp class="o">&lt;=</samp><samp class="w"> </samp><samp class="mi">40</samp><samp class="p" data-group-id="9138456621-11">)</samp><samp class="p" data-group-id="9138456621-10">)</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:name</samp><samp class="p" data-group-id="9138456621-9">]</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="k" data-group-id="9138456621-12">fn</samp><samp class="w"> </samp><samp class="n">prev</samp><samp class="w"> </samp><samp class="o">-&gt;</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="p" data-group-id="9138456621-13">{</samp><samp class="n">prev</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">upcase</samp><samp class="p" data-group-id="9138456621-14">(</samp><samp class="n">prev</samp><samp class="p" data-group-id="9138456621-14">)</samp><samp class="p" data-group-id="9138456621-13">}</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="w"> </samp><samp class="k" data-group-id="9138456621-12">end</samp><samp class="p" data-group-id="9138456621-8">)</samp><samp class="w">
</samp><samp class="p" data-group-id="9138456621-15">{</samp><samp class="s">&quot;john&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="9138456621-16">[</samp><samp class="p" data-group-id="9138456621-17">%{</samp><samp class="ss">name</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;JOHN&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">salary</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">10</samp><samp class="p" data-group-id="9138456621-17">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="9138456621-18">%{</samp><samp class="ss">name</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;francine&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">salary</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">30</samp><samp class="p" data-group-id="9138456621-18">}</samp><samp class="p" data-group-id="9138456621-16">]</samp><samp class="p" data-group-id="9138456621-15">}</samp></code></pre><p><a href="#find/1"><code class="inline">find/1</code></a> can also be used to pop the first found element out of a list or
a key inside of a list:</p><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="n">list</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="p" data-group-id="2847281252-1">[</samp><samp class="p" data-group-id="2847281252-2">%{</samp><samp class="ss">name</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;john&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">salary</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">10</samp><samp class="p" data-group-id="2847281252-2">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="2847281252-3">%{</samp><samp class="ss">name</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;francine&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">salary</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">30</samp><samp class="p" data-group-id="2847281252-3">}</samp><samp class="p" data-group-id="2847281252-1">]</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="n">pop_in</samp><samp class="p" data-group-id="2847281252-4">(</samp><samp class="n">list</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="2847281252-5">[</samp><samp class="nc">Access</samp><samp class="o">.</samp><samp class="n">find</samp><samp class="p" data-group-id="2847281252-6">(</samp><samp class="o">&amp;</samp><samp class="p" data-group-id="2847281252-7">(</samp><samp class="ni">&amp;1</samp><samp class="o">.</samp><samp class="n">salary</samp><samp class="w"> </samp><samp class="o">&lt;=</samp><samp class="w"> </samp><samp class="mi">40</samp><samp class="p" data-group-id="2847281252-7">)</samp><samp class="p" data-group-id="2847281252-6">)</samp><samp class="p" data-group-id="2847281252-5">]</samp><samp class="p" data-group-id="2847281252-4">)</samp><samp class="w">
</samp><samp class="p" data-group-id="2847281252-8">{</samp><samp class="p" data-group-id="2847281252-9">%{</samp><samp class="ss">name</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;john&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">salary</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">10</samp><samp class="p" data-group-id="2847281252-9">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="2847281252-10">[</samp><samp class="p" data-group-id="2847281252-11">%{</samp><samp class="ss">name</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;francine&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">salary</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">30</samp><samp class="p" data-group-id="2847281252-11">}</samp><samp class="p" data-group-id="2847281252-10">]</samp><samp class="p" data-group-id="2847281252-8">}</samp></code></pre><p>When no match is found, nil is returned and the update function is never called</p><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="n">list</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="p" data-group-id="8418607927-1">[</samp><samp class="p" data-group-id="8418607927-2">%{</samp><samp class="ss">name</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;john&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">salary</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">10</samp><samp class="p" data-group-id="8418607927-2">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="8418607927-3">%{</samp><samp class="ss">name</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;francine&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">salary</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">30</samp><samp class="p" data-group-id="8418607927-3">}</samp><samp class="p" data-group-id="8418607927-1">]</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="n">get_in</samp><samp class="p" data-group-id="8418607927-4">(</samp><samp class="n">list</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="8418607927-5">[</samp><samp class="nc">Access</samp><samp class="o">.</samp><samp class="n">find</samp><samp class="p" data-group-id="8418607927-6">(</samp><samp class="o">&amp;</samp><samp class="p" data-group-id="8418607927-7">(</samp><samp class="ni">&amp;1</samp><samp class="o">.</samp><samp class="n">salary</samp><samp class="w"> </samp><samp class="o">&gt;=</samp><samp class="w"> </samp><samp class="mi">50</samp><samp class="p" data-group-id="8418607927-7">)</samp><samp class="p" data-group-id="8418607927-6">)</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:name</samp><samp class="p" data-group-id="8418607927-5">]</samp><samp class="p" data-group-id="8418607927-4">)</samp><samp class="w">
</samp><samp class="no">nil</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="n">get_and_update_in</samp><samp class="p" data-group-id="8418607927-8">(</samp><samp class="n">list</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="8418607927-9">[</samp><samp class="nc">Access</samp><samp class="o">.</samp><samp class="n">find</samp><samp class="p" data-group-id="8418607927-10">(</samp><samp class="o">&amp;</samp><samp class="p" data-group-id="8418607927-11">(</samp><samp class="ni">&amp;1</samp><samp class="o">.</samp><samp class="n">salary</samp><samp class="w"> </samp><samp class="o">&gt;=</samp><samp class="w"> </samp><samp class="mi">50</samp><samp class="p" data-group-id="8418607927-11">)</samp><samp class="p" data-group-id="8418607927-10">)</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:name</samp><samp class="p" data-group-id="8418607927-9">]</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="k" data-group-id="8418607927-12">fn</samp><samp class="w"> </samp><samp class="n">prev</samp><samp class="w"> </samp><samp class="o">-&gt;</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="w">  </samp><samp class="p" data-group-id="8418607927-13">{</samp><samp class="n">prev</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">upcase</samp><samp class="p" data-group-id="8418607927-14">(</samp><samp class="n">prev</samp><samp class="p" data-group-id="8418607927-14">)</samp><samp class="p" data-group-id="8418607927-13">}</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="k" data-group-id="8418607927-12">end</samp><samp class="p" data-group-id="8418607927-8">)</samp><samp class="w">
</samp><samp class="p" data-group-id="8418607927-15">{</samp><samp class="no">nil</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="8418607927-16">[</samp><samp class="p" data-group-id="8418607927-17">%{</samp><samp class="ss">name</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;john&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">salary</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">10</samp><samp class="p" data-group-id="8418607927-17">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="8418607927-18">%{</samp><samp class="ss">name</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;francine&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">salary</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">30</samp><samp class="p" data-group-id="8418607927-18">}</samp><samp class="p" data-group-id="8418607927-16">]</samp><samp class="p" data-group-id="8418607927-15">}</samp></code></pre><p>An error is raised if the predicate is not a function or is of the incorrect arity:</p><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="n">get_in</samp><samp class="p" data-group-id="6706659810-1">(</samp><samp class="p" data-group-id="6706659810-2">[</samp><samp class="p" data-group-id="6706659810-2">]</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="6706659810-3">[</samp><samp class="nc">Access</samp><samp class="o">.</samp><samp class="n">find</samp><samp class="p" data-group-id="6706659810-4">(</samp><samp class="mi">5</samp><samp class="p" data-group-id="6706659810-4">)</samp><samp class="p" data-group-id="6706659810-3">]</samp><samp class="p" data-group-id="6706659810-1">)</samp><samp class="w">
</samp><samp class="gt">** (FunctionClauseError) no function clause matching in Access.find/1</samp></code></pre><p>An error is raised if the accessed structure is not a list:</p><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="w"> </samp><samp class="n">get_in</samp><samp class="p" data-group-id="3989608019-1">(</samp><samp class="p" data-group-id="3989608019-2">%{</samp><samp class="p" data-group-id="3989608019-2">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="3989608019-3">[</samp><samp class="nc">Access</samp><samp class="o">.</samp><samp class="n">find</samp><samp class="p" data-group-id="3989608019-4">(</samp><samp class="k" data-group-id="3989608019-5">fn</samp><samp class="w"> </samp><samp class="n">a</samp><samp class="w"> </samp><samp class="o">-&gt;</samp><samp class="w"> </samp><samp class="n">a</samp><samp class="w"> </samp><samp class="o">==</samp><samp class="w"> </samp><samp class="mi">10</samp><samp class="w"> </samp><samp class="k" data-group-id="3989608019-5">end</samp><samp class="p" data-group-id="3989608019-4">)</samp><samp class="p" data-group-id="3989608019-3">]</samp><samp class="p" data-group-id="3989608019-1">)</samp><samp class="w">
</samp><samp class="gt">** (RuntimeError) Access.find/1 expected a list, got: %{}</samp></code></pre>
  </section>
</section>
<section class="detail" id="get/3">

    <span id="get/2"></span>

  <div class="detail-header">
    <a href="#get/3" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">get(container, key, default \\ nil)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/access.ex#L314" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> get(<a href="#t:container/0">container</a>(), <a href="typespecs.xhtml#built-in-types">term</a>(), <a href="typespecs.xhtml#built-in-types">term</a>()) :: <a href="typespecs.xhtml#built-in-types">term</a>()</pre>

          <pre translate="no"><span class="attribute">@spec</span> get(<a href="#t:nil_container/0">nil_container</a>(), <a href="typespecs.xhtml#basic-types">any</a>(), default) :: default when default: var</pre>

      </div>

<p>Gets the value for the given key in a container (a map, keyword
list, or struct that implements the <a href="Access.xhtml"><code class="inline">Access</code></a> behaviour).</p><p>Returns the value under <code class="inline">key</code> if there is such a key, or <code class="inline">default</code> if <code class="inline">key</code> is
not found.</p><h2 id="get/3-examples" class="section-heading"><a href="#get/3-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Access</samp><samp class="o">.</samp><samp class="n">get</samp><samp class="p" data-group-id="3377250617-1">(</samp><samp class="p" data-group-id="3377250617-2">%{</samp><samp class="ss">name</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;john&quot;</samp><samp class="p" data-group-id="3377250617-2">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:name</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;default name&quot;</samp><samp class="p" data-group-id="3377250617-1">)</samp><samp class="w">
</samp><samp class="s">&quot;john&quot;</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Access</samp><samp class="o">.</samp><samp class="n">get</samp><samp class="p" data-group-id="3377250617-3">(</samp><samp class="p" data-group-id="3377250617-4">%{</samp><samp class="ss">name</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;john&quot;</samp><samp class="p" data-group-id="3377250617-4">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:age</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">25</samp><samp class="p" data-group-id="3377250617-3">)</samp><samp class="w">
</samp><samp class="mi">25</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Access</samp><samp class="o">.</samp><samp class="n">get</samp><samp class="p" data-group-id="3377250617-5">(</samp><samp class="p" data-group-id="3377250617-6">[</samp><samp class="ss">ordered</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">true</samp><samp class="p" data-group-id="3377250617-6">]</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:timeout</samp><samp class="p" data-group-id="3377250617-5">)</samp><samp class="w">
</samp><samp class="no">nil</samp></code></pre>
  </section>
</section>
<section class="detail" id="get_and_update/3">

  <div class="detail-header">
    <a href="#get_and_update/3" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">get_and_update(container, key, fun)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/access.ex#L394" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> get_and_update(data, <a href="#t:key/0">key</a>(), (<a href="#t:value/0">value</a>() | nil -&gt;
                               {current_value, new_value :: <a href="#t:value/0">value</a>()} | :pop)) ::
  {current_value, new_data :: data}
when data: <a href="#t:container/0">container</a>(), current_value: var</pre>

      </div>

<p>Gets and updates the given key in a <code class="inline">container</code> (a map, a keyword list,
a struct that implements the <a href="Access.xhtml"><code class="inline">Access</code></a> behaviour).</p><p>The <code class="inline">fun</code> argument receives the value of <code class="inline">key</code> (or <code class="inline">nil</code> if <code class="inline">key</code> is not
present in <code class="inline">container</code>) and must return a two-element tuple <code class="inline">{current_value, new_value}</code>:
the &quot;get&quot; value <code class="inline">current_value</code> (the retrieved value, which can be operated on before
being returned) and the new value to be stored under <code class="inline">key</code> (<code class="inline">new_value</code>).
<code class="inline">fun</code> may also return <code class="inline">:pop</code>, which means the current value
should be removed from the container and returned.</p><p>The returned value is a two-element tuple with the &quot;get&quot; value returned by
<code class="inline">fun</code> and a new container with the updated value under <code class="inline">key</code>.</p><h2 id="get_and_update/3-examples" class="section-heading"><a href="#get_and_update/3-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Access</samp><samp class="o">.</samp><samp class="n">get_and_update</samp><samp class="p" data-group-id="8855151135-1">(</samp><samp class="p" data-group-id="8855151135-2">[</samp><samp class="ss">a</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">1</samp><samp class="p" data-group-id="8855151135-2">]</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:a</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="k" data-group-id="8855151135-3">fn</samp><samp class="w"> </samp><samp class="n">current_value</samp><samp class="w"> </samp><samp class="o">-&gt;</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="w">  </samp><samp class="p" data-group-id="8855151135-4">{</samp><samp class="n">current_value</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">current_value</samp><samp class="w"> </samp><samp class="o">+</samp><samp class="w"> </samp><samp class="mi">1</samp><samp class="p" data-group-id="8855151135-4">}</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="k" data-group-id="8855151135-3">end</samp><samp class="p" data-group-id="8855151135-1">)</samp><samp class="w">
</samp><samp class="p" data-group-id="8855151135-5">{</samp><samp class="mi">1</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="8855151135-6">[</samp><samp class="ss">a</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">2</samp><samp class="p" data-group-id="8855151135-6">]</samp><samp class="p" data-group-id="8855151135-5">}</samp></code></pre>
  </section>
</section>
<section class="detail" id="key/2">

    <span id="key/1"></span>

  <div class="detail-header">
    <a href="#key/2" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">key(key, default \\ nil)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/access.ex#L520" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> key(<a href="#t:key/0">key</a>(), <a href="typespecs.xhtml#built-in-types">term</a>()) ::
  <a href="#t:access_fun/2">access_fun</a>(data :: <a href="typespecs.xhtml#basic-types">struct</a>() | <a href="typespecs.xhtml#basic-types">map</a>(), current_value :: <a href="typespecs.xhtml#built-in-types">term</a>())</pre>

      </div>

<p>Returns a function that accesses the given key in a map/struct.</p><p>The returned function is typically passed as an accessor to <a href="Kernel.xhtml#get_in/2"><code class="inline">Kernel.get_in/2</code></a>,
<a href="Kernel.xhtml#get_and_update_in/3"><code class="inline">Kernel.get_and_update_in/3</code></a>, and friends.</p><p>The returned function uses the default value if the key does not exist.
This can be used to specify defaults and safely traverse missing keys:</p><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="n">get_in</samp><samp class="p" data-group-id="9711953496-1">(</samp><samp class="p" data-group-id="9711953496-2">%{</samp><samp class="p" data-group-id="9711953496-2">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="9711953496-3">[</samp><samp class="nc">Access</samp><samp class="o">.</samp><samp class="n">key</samp><samp class="p" data-group-id="9711953496-4">(</samp><samp class="ss">:user</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="9711953496-5">%{</samp><samp class="p" data-group-id="9711953496-5">}</samp><samp class="p" data-group-id="9711953496-4">)</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="nc">Access</samp><samp class="o">.</samp><samp class="n">key</samp><samp class="p" data-group-id="9711953496-6">(</samp><samp class="ss">:name</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;meg&quot;</samp><samp class="p" data-group-id="9711953496-6">)</samp><samp class="p" data-group-id="9711953496-3">]</samp><samp class="p" data-group-id="9711953496-1">)</samp><samp class="w">
</samp><samp class="s">&quot;meg&quot;</samp></code></pre><p>Such is also useful when using update functions, allowing us to introduce
values as we traverse the data structure for updates:</p><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="n">put_in</samp><samp class="p" data-group-id="9256257525-1">(</samp><samp class="p" data-group-id="9256257525-2">%{</samp><samp class="p" data-group-id="9256257525-2">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="9256257525-3">[</samp><samp class="nc">Access</samp><samp class="o">.</samp><samp class="n">key</samp><samp class="p" data-group-id="9256257525-4">(</samp><samp class="ss">:user</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="9256257525-5">%{</samp><samp class="p" data-group-id="9256257525-5">}</samp><samp class="p" data-group-id="9256257525-4">)</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="nc">Access</samp><samp class="o">.</samp><samp class="n">key</samp><samp class="p" data-group-id="9256257525-6">(</samp><samp class="ss">:name</samp><samp class="p" data-group-id="9256257525-6">)</samp><samp class="p" data-group-id="9256257525-3">]</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;Mary&quot;</samp><samp class="p" data-group-id="9256257525-1">)</samp><samp class="w">
</samp><samp class="p" data-group-id="9256257525-7">%{</samp><samp class="ss">user</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="9256257525-8">%{</samp><samp class="ss">name</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;Mary&quot;</samp><samp class="p" data-group-id="9256257525-8">}</samp><samp class="p" data-group-id="9256257525-7">}</samp></code></pre><h2 id="key/2-examples" class="section-heading"><a href="#key/2-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="n">map</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="p" data-group-id="8925744970-1">%{</samp><samp class="ss">user</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="8925744970-2">%{</samp><samp class="ss">name</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;john&quot;</samp><samp class="p" data-group-id="8925744970-2">}</samp><samp class="p" data-group-id="8925744970-1">}</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="n">get_in</samp><samp class="p" data-group-id="8925744970-3">(</samp><samp class="n">map</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="8925744970-4">[</samp><samp class="nc">Access</samp><samp class="o">.</samp><samp class="n">key</samp><samp class="p" data-group-id="8925744970-5">(</samp><samp class="ss">:unknown</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="8925744970-6">%{</samp><samp class="p" data-group-id="8925744970-6">}</samp><samp class="p" data-group-id="8925744970-5">)</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="nc">Access</samp><samp class="o">.</samp><samp class="n">key</samp><samp class="p" data-group-id="8925744970-7">(</samp><samp class="ss">:name</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;john&quot;</samp><samp class="p" data-group-id="8925744970-7">)</samp><samp class="p" data-group-id="8925744970-4">]</samp><samp class="p" data-group-id="8925744970-3">)</samp><samp class="w">
</samp><samp class="s">&quot;john&quot;</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="n">get_and_update_in</samp><samp class="p" data-group-id="8925744970-8">(</samp><samp class="n">map</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="8925744970-9">[</samp><samp class="nc">Access</samp><samp class="o">.</samp><samp class="n">key</samp><samp class="p" data-group-id="8925744970-10">(</samp><samp class="ss">:user</samp><samp class="p" data-group-id="8925744970-10">)</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="nc">Access</samp><samp class="o">.</samp><samp class="n">key</samp><samp class="p" data-group-id="8925744970-11">(</samp><samp class="ss">:name</samp><samp class="p" data-group-id="8925744970-11">)</samp><samp class="p" data-group-id="8925744970-9">]</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="k" data-group-id="8925744970-12">fn</samp><samp class="w"> </samp><samp class="n">prev</samp><samp class="w"> </samp><samp class="o">-&gt;</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="w">  </samp><samp class="p" data-group-id="8925744970-13">{</samp><samp class="n">prev</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">upcase</samp><samp class="p" data-group-id="8925744970-14">(</samp><samp class="n">prev</samp><samp class="p" data-group-id="8925744970-14">)</samp><samp class="p" data-group-id="8925744970-13">}</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="k" data-group-id="8925744970-12">end</samp><samp class="p" data-group-id="8925744970-8">)</samp><samp class="w">
</samp><samp class="p" data-group-id="8925744970-15">{</samp><samp class="s">&quot;john&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="8925744970-16">%{</samp><samp class="ss">user</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="8925744970-17">%{</samp><samp class="ss">name</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;JOHN&quot;</samp><samp class="p" data-group-id="8925744970-17">}</samp><samp class="p" data-group-id="8925744970-16">}</samp><samp class="p" data-group-id="8925744970-15">}</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="n">pop_in</samp><samp class="p" data-group-id="8925744970-18">(</samp><samp class="n">map</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="8925744970-19">[</samp><samp class="nc">Access</samp><samp class="o">.</samp><samp class="n">key</samp><samp class="p" data-group-id="8925744970-20">(</samp><samp class="ss">:user</samp><samp class="p" data-group-id="8925744970-20">)</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="nc">Access</samp><samp class="o">.</samp><samp class="n">key</samp><samp class="p" data-group-id="8925744970-21">(</samp><samp class="ss">:name</samp><samp class="p" data-group-id="8925744970-21">)</samp><samp class="p" data-group-id="8925744970-19">]</samp><samp class="p" data-group-id="8925744970-18">)</samp><samp class="w">
</samp><samp class="p" data-group-id="8925744970-22">{</samp><samp class="s">&quot;john&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="8925744970-23">%{</samp><samp class="ss">user</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="8925744970-24">%{</samp><samp class="p" data-group-id="8925744970-24">}</samp><samp class="p" data-group-id="8925744970-23">}</samp><samp class="p" data-group-id="8925744970-22">}</samp></code></pre><p>An error is raised if the accessed structure is not a map or a struct:</p><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="n">get_in</samp><samp class="p" data-group-id="8798881126-1">(</samp><samp class="p" data-group-id="8798881126-2">[</samp><samp class="p" data-group-id="8798881126-2">]</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="8798881126-3">[</samp><samp class="nc">Access</samp><samp class="o">.</samp><samp class="n">key</samp><samp class="p" data-group-id="8798881126-4">(</samp><samp class="ss">:foo</samp><samp class="p" data-group-id="8798881126-4">)</samp><samp class="p" data-group-id="8798881126-3">]</samp><samp class="p" data-group-id="8798881126-1">)</samp><samp class="w">
</samp><samp class="gt">** (BadMapError) expected a map, got: []</samp></code></pre>
  </section>
</section>
<section class="detail" id="key!/1">

  <div class="detail-header">
    <a href="#key!/1" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">key!(key)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/access.ex#L579" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> key!(<a href="#t:key/0">key</a>()) :: <a href="#t:access_fun/2">access_fun</a>(data :: <a href="typespecs.xhtml#basic-types">struct</a>() | <a href="typespecs.xhtml#basic-types">map</a>(), current_value :: <a href="typespecs.xhtml#built-in-types">term</a>())</pre>

      </div>

<p>Returns a function that accesses the given key in a map/struct.</p><p>The returned function is typically passed as an accessor to <a href="Kernel.xhtml#get_in/2"><code class="inline">Kernel.get_in/2</code></a>,
<a href="Kernel.xhtml#get_and_update_in/3"><code class="inline">Kernel.get_and_update_in/3</code></a>, and friends.</p><p>Similar to <a href="#key/2"><code class="inline">key/2</code></a>, but the returned function raises if the key does not exist.</p><h2 id="key!/1-examples" class="section-heading"><a href="#key!/1-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="n">map</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="p" data-group-id="6109147039-1">%{</samp><samp class="ss">user</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="6109147039-2">%{</samp><samp class="ss">name</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;john&quot;</samp><samp class="p" data-group-id="6109147039-2">}</samp><samp class="p" data-group-id="6109147039-1">}</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="n">get_in</samp><samp class="p" data-group-id="6109147039-3">(</samp><samp class="n">map</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="6109147039-4">[</samp><samp class="nc">Access</samp><samp class="o">.</samp><samp class="n">key!</samp><samp class="p" data-group-id="6109147039-5">(</samp><samp class="ss">:user</samp><samp class="p" data-group-id="6109147039-5">)</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="nc">Access</samp><samp class="o">.</samp><samp class="n">key!</samp><samp class="p" data-group-id="6109147039-6">(</samp><samp class="ss">:name</samp><samp class="p" data-group-id="6109147039-6">)</samp><samp class="p" data-group-id="6109147039-4">]</samp><samp class="p" data-group-id="6109147039-3">)</samp><samp class="w">
</samp><samp class="s">&quot;john&quot;</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="n">get_and_update_in</samp><samp class="p" data-group-id="6109147039-7">(</samp><samp class="n">map</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="6109147039-8">[</samp><samp class="nc">Access</samp><samp class="o">.</samp><samp class="n">key!</samp><samp class="p" data-group-id="6109147039-9">(</samp><samp class="ss">:user</samp><samp class="p" data-group-id="6109147039-9">)</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="nc">Access</samp><samp class="o">.</samp><samp class="n">key!</samp><samp class="p" data-group-id="6109147039-10">(</samp><samp class="ss">:name</samp><samp class="p" data-group-id="6109147039-10">)</samp><samp class="p" data-group-id="6109147039-8">]</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="k" data-group-id="6109147039-11">fn</samp><samp class="w"> </samp><samp class="n">prev</samp><samp class="w"> </samp><samp class="o">-&gt;</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="w">  </samp><samp class="p" data-group-id="6109147039-12">{</samp><samp class="n">prev</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">upcase</samp><samp class="p" data-group-id="6109147039-13">(</samp><samp class="n">prev</samp><samp class="p" data-group-id="6109147039-13">)</samp><samp class="p" data-group-id="6109147039-12">}</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="k" data-group-id="6109147039-11">end</samp><samp class="p" data-group-id="6109147039-7">)</samp><samp class="w">
</samp><samp class="p" data-group-id="6109147039-14">{</samp><samp class="s">&quot;john&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="6109147039-15">%{</samp><samp class="ss">user</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="6109147039-16">%{</samp><samp class="ss">name</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;JOHN&quot;</samp><samp class="p" data-group-id="6109147039-16">}</samp><samp class="p" data-group-id="6109147039-15">}</samp><samp class="p" data-group-id="6109147039-14">}</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="n">pop_in</samp><samp class="p" data-group-id="6109147039-17">(</samp><samp class="n">map</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="6109147039-18">[</samp><samp class="nc">Access</samp><samp class="o">.</samp><samp class="n">key!</samp><samp class="p" data-group-id="6109147039-19">(</samp><samp class="ss">:user</samp><samp class="p" data-group-id="6109147039-19">)</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="nc">Access</samp><samp class="o">.</samp><samp class="n">key!</samp><samp class="p" data-group-id="6109147039-20">(</samp><samp class="ss">:name</samp><samp class="p" data-group-id="6109147039-20">)</samp><samp class="p" data-group-id="6109147039-18">]</samp><samp class="p" data-group-id="6109147039-17">)</samp><samp class="w">
</samp><samp class="p" data-group-id="6109147039-21">{</samp><samp class="s">&quot;john&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="6109147039-22">%{</samp><samp class="ss">user</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="6109147039-23">%{</samp><samp class="p" data-group-id="6109147039-23">}</samp><samp class="p" data-group-id="6109147039-22">}</samp><samp class="p" data-group-id="6109147039-21">}</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="n">get_in</samp><samp class="p" data-group-id="6109147039-24">(</samp><samp class="n">map</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="6109147039-25">[</samp><samp class="nc">Access</samp><samp class="o">.</samp><samp class="n">key!</samp><samp class="p" data-group-id="6109147039-26">(</samp><samp class="ss">:user</samp><samp class="p" data-group-id="6109147039-26">)</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="nc">Access</samp><samp class="o">.</samp><samp class="n">key!</samp><samp class="p" data-group-id="6109147039-27">(</samp><samp class="ss">:unknown</samp><samp class="p" data-group-id="6109147039-27">)</samp><samp class="p" data-group-id="6109147039-25">]</samp><samp class="p" data-group-id="6109147039-24">)</samp><samp class="w">
</samp><samp class="gt">** (KeyError) key :unknown not found in: %{name: &quot;john&quot;}</samp></code></pre><p>The examples above could be partially written as:</p><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="n">map</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="p" data-group-id="0855796690-1">%{</samp><samp class="ss">user</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="0855796690-2">%{</samp><samp class="ss">name</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;john&quot;</samp><samp class="p" data-group-id="0855796690-2">}</samp><samp class="p" data-group-id="0855796690-1">}</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="n">map</samp><samp class="o">.</samp><samp class="n">user</samp><samp class="o">.</samp><samp class="n">name</samp><samp class="w">
</samp><samp class="s">&quot;john&quot;</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="n">get_and_update_in</samp><samp class="p" data-group-id="0855796690-3">(</samp><samp class="n">map</samp><samp class="o">.</samp><samp class="n">user</samp><samp class="o">.</samp><samp class="n">name</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="k" data-group-id="0855796690-4">fn</samp><samp class="w"> </samp><samp class="n">prev</samp><samp class="w"> </samp><samp class="o">-&gt;</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="w">  </samp><samp class="p" data-group-id="0855796690-5">{</samp><samp class="n">prev</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">upcase</samp><samp class="p" data-group-id="0855796690-6">(</samp><samp class="n">prev</samp><samp class="p" data-group-id="0855796690-6">)</samp><samp class="p" data-group-id="0855796690-5">}</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="k" data-group-id="0855796690-4">end</samp><samp class="p" data-group-id="0855796690-3">)</samp><samp class="w">
</samp><samp class="p" data-group-id="0855796690-7">{</samp><samp class="s">&quot;john&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="0855796690-8">%{</samp><samp class="ss">user</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="0855796690-9">%{</samp><samp class="ss">name</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;JOHN&quot;</samp><samp class="p" data-group-id="0855796690-9">}</samp><samp class="p" data-group-id="0855796690-8">}</samp><samp class="p" data-group-id="0855796690-7">}</samp></code></pre><p>However, it is not possible to remove fields using the dot notation,
as it is implied those fields must also be present. In any case,
<a href="#key!/1"><code class="inline">Access.key!/1</code></a> is useful when the key is not known in advance
and must be accessed dynamically.</p><p>An error is raised if the accessed structure is not a map/struct:</p><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="n">get_in</samp><samp class="p" data-group-id="1947134200-1">(</samp><samp class="p" data-group-id="1947134200-2">[</samp><samp class="p" data-group-id="1947134200-2">]</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="1947134200-3">[</samp><samp class="nc">Access</samp><samp class="o">.</samp><samp class="n">key!</samp><samp class="p" data-group-id="1947134200-4">(</samp><samp class="ss">:foo</samp><samp class="p" data-group-id="1947134200-4">)</samp><samp class="p" data-group-id="1947134200-3">]</samp><samp class="p" data-group-id="1947134200-1">)</samp><samp class="w">
</samp><samp class="gt">** (RuntimeError) Access.key!/1 expected a map/struct, got: []</samp></code></pre>
  </section>
</section>
<section class="detail" id="pop/2">

  <div class="detail-header">
    <a href="#pop/2" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">pop(container, key)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/access.ex#L462" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> pop(data, <a href="#t:key/0">key</a>()) :: {<a href="#t:value/0">value</a>(), data} when data: <a href="#t:container/0">container</a>()</pre>

      </div>

<p>Removes the entry with a given key from a container (a map, keyword
list, or struct that implements the <a href="Access.xhtml"><code class="inline">Access</code></a> behaviour).</p><p>Returns a tuple containing the value associated with the key and the
updated container. <code class="inline">nil</code> is returned for the value if the key isn't
in the container.</p><h2 id="pop/2-examples" class="section-heading"><a href="#pop/2-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><p>With a map:</p><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Access</samp><samp class="o">.</samp><samp class="n">pop</samp><samp class="p" data-group-id="7333184884-1">(</samp><samp class="p" data-group-id="7333184884-2">%{</samp><samp class="ss">name</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;Elixir&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">creator</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;Valim&quot;</samp><samp class="p" data-group-id="7333184884-2">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:name</samp><samp class="p" data-group-id="7333184884-1">)</samp><samp class="w">
</samp><samp class="p" data-group-id="7333184884-3">{</samp><samp class="s">&quot;Elixir&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="7333184884-4">%{</samp><samp class="ss">creator</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;Valim&quot;</samp><samp class="p" data-group-id="7333184884-4">}</samp><samp class="p" data-group-id="7333184884-3">}</samp></code></pre><p>A keyword list:</p><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Access</samp><samp class="o">.</samp><samp class="n">pop</samp><samp class="p" data-group-id="9770549007-1">(</samp><samp class="p" data-group-id="9770549007-2">[</samp><samp class="ss">name</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;Elixir&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">creator</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;Valim&quot;</samp><samp class="p" data-group-id="9770549007-2">]</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:name</samp><samp class="p" data-group-id="9770549007-1">)</samp><samp class="w">
</samp><samp class="p" data-group-id="9770549007-3">{</samp><samp class="s">&quot;Elixir&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="9770549007-4">[</samp><samp class="ss">creator</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;Valim&quot;</samp><samp class="p" data-group-id="9770549007-4">]</samp><samp class="p" data-group-id="9770549007-3">}</samp></code></pre><p>An unknown key:</p><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Access</samp><samp class="o">.</samp><samp class="n">pop</samp><samp class="p" data-group-id="6586286426-1">(</samp><samp class="p" data-group-id="6586286426-2">%{</samp><samp class="ss">name</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;Elixir&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">creator</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;Valim&quot;</samp><samp class="p" data-group-id="6586286426-2">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:year</samp><samp class="p" data-group-id="6586286426-1">)</samp><samp class="w">
</samp><samp class="p" data-group-id="6586286426-3">{</samp><samp class="no">nil</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="6586286426-4">%{</samp><samp class="ss">creator</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;Valim&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">name</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;Elixir&quot;</samp><samp class="p" data-group-id="6586286426-4">}</samp><samp class="p" data-group-id="6586286426-3">}</samp></code></pre>
  </section>
</section>
<section class="detail" id="slice/1">

  <div class="detail-header">
    <a href="#slice/1" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">slice(range)</h1>

        <span class="note">(since 1.14)</span>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/access.ex#L966" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> slice(<a href="Range.xhtml#t:t/0">Range.t</a>()) :: <a href="#t:access_fun/2">access_fun</a>(data :: <a href="typespecs.xhtml#built-in-types">list</a>(), current_value :: <a href="typespecs.xhtml#built-in-types">list</a>())</pre>

      </div>

<p>Returns a function that accesses all items of a list that are within the provided range.</p><p>The range will be normalized following the same rules from <a href="Enum.xhtml#slice/2"><code class="inline">Enum.slice/2</code></a>.</p><p>The returned function is typically passed as an accessor to <a href="Kernel.xhtml#get_in/2"><code class="inline">Kernel.get_in/2</code></a>,
<a href="Kernel.xhtml#get_and_update_in/3"><code class="inline">Kernel.get_and_update_in/3</code></a>, and friends.</p><h2 id="slice/1-examples" class="section-heading"><a href="#slice/1-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="n">list</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="p" data-group-id="5212549363-1">[</samp><samp class="p" data-group-id="5212549363-2">%{</samp><samp class="ss">name</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;john&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">salary</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">10</samp><samp class="p" data-group-id="5212549363-2">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="5212549363-3">%{</samp><samp class="ss">name</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;francine&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">salary</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">30</samp><samp class="p" data-group-id="5212549363-3">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="5212549363-4">%{</samp><samp class="ss">name</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;vitor&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">salary</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">25</samp><samp class="p" data-group-id="5212549363-4">}</samp><samp class="p" data-group-id="5212549363-1">]</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="n">get_in</samp><samp class="p" data-group-id="5212549363-5">(</samp><samp class="n">list</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="5212549363-6">[</samp><samp class="nc">Access</samp><samp class="o">.</samp><samp class="n">slice</samp><samp class="p" data-group-id="5212549363-7">(</samp><samp class="mi">1</samp><samp class="o">..</samp><samp class="mi">2</samp><samp class="p" data-group-id="5212549363-7">)</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:name</samp><samp class="p" data-group-id="5212549363-6">]</samp><samp class="p" data-group-id="5212549363-5">)</samp><samp class="w">
</samp><samp class="p" data-group-id="5212549363-8">[</samp><samp class="s">&quot;francine&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;vitor&quot;</samp><samp class="p" data-group-id="5212549363-8">]</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="n">get_and_update_in</samp><samp class="p" data-group-id="5212549363-9">(</samp><samp class="n">list</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="5212549363-10">[</samp><samp class="nc">Access</samp><samp class="o">.</samp><samp class="n">slice</samp><samp class="p" data-group-id="5212549363-11">(</samp><samp class="mi">1</samp><samp class="o">..</samp><samp class="mi">3</samp><samp class="o">//</samp><samp class="mi">2</samp><samp class="p" data-group-id="5212549363-11">)</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:name</samp><samp class="p" data-group-id="5212549363-10">]</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="k" data-group-id="5212549363-12">fn</samp><samp class="w"> </samp><samp class="n">prev</samp><samp class="w"> </samp><samp class="o">-&gt;</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="w">  </samp><samp class="p" data-group-id="5212549363-13">{</samp><samp class="n">prev</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">upcase</samp><samp class="p" data-group-id="5212549363-14">(</samp><samp class="n">prev</samp><samp class="p" data-group-id="5212549363-14">)</samp><samp class="p" data-group-id="5212549363-13">}</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="k" data-group-id="5212549363-12">end</samp><samp class="p" data-group-id="5212549363-9">)</samp><samp class="w">
</samp><samp class="p" data-group-id="5212549363-15">{</samp><samp class="p" data-group-id="5212549363-16">[</samp><samp class="s">&quot;francine&quot;</samp><samp class="p" data-group-id="5212549363-16">]</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="5212549363-17">[</samp><samp class="p" data-group-id="5212549363-18">%{</samp><samp class="ss">name</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;john&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">salary</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">10</samp><samp class="p" data-group-id="5212549363-18">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="5212549363-19">%{</samp><samp class="ss">name</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;FRANCINE&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">salary</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">30</samp><samp class="p" data-group-id="5212549363-19">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="5212549363-20">%{</samp><samp class="ss">name</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;vitor&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">salary</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">25</samp><samp class="p" data-group-id="5212549363-20">}</samp><samp class="p" data-group-id="5212549363-17">]</samp><samp class="p" data-group-id="5212549363-15">}</samp></code></pre><p><a href="#slice/1"><code class="inline">slice/1</code></a> can also be used to pop elements out of a list or
a key inside of a list:</p><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="n">list</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="p" data-group-id="7166935179-1">[</samp><samp class="p" data-group-id="7166935179-2">%{</samp><samp class="ss">name</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;john&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">salary</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">10</samp><samp class="p" data-group-id="7166935179-2">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="7166935179-3">%{</samp><samp class="ss">name</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;francine&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">salary</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">30</samp><samp class="p" data-group-id="7166935179-3">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="7166935179-4">%{</samp><samp class="ss">name</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;vitor&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">salary</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">25</samp><samp class="p" data-group-id="7166935179-4">}</samp><samp class="p" data-group-id="7166935179-1">]</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="n">pop_in</samp><samp class="p" data-group-id="7166935179-5">(</samp><samp class="n">list</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="7166935179-6">[</samp><samp class="nc">Access</samp><samp class="o">.</samp><samp class="n">slice</samp><samp class="p" data-group-id="7166935179-7">(</samp><samp class="o">-</samp><samp class="mi">2</samp><samp class="o">..</samp><samp class="o">-</samp><samp class="mi">1</samp><samp class="p" data-group-id="7166935179-7">)</samp><samp class="p" data-group-id="7166935179-6">]</samp><samp class="p" data-group-id="7166935179-5">)</samp><samp class="w">
</samp><samp class="p" data-group-id="7166935179-8">{</samp><samp class="p" data-group-id="7166935179-9">[</samp><samp class="p" data-group-id="7166935179-10">%{</samp><samp class="ss">name</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;francine&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">salary</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">30</samp><samp class="p" data-group-id="7166935179-10">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="7166935179-11">%{</samp><samp class="ss">name</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;vitor&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">salary</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">25</samp><samp class="p" data-group-id="7166935179-11">}</samp><samp class="p" data-group-id="7166935179-9">]</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="7166935179-12">[</samp><samp class="p" data-group-id="7166935179-13">%{</samp><samp class="ss">name</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;john&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">salary</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">10</samp><samp class="p" data-group-id="7166935179-13">}</samp><samp class="p" data-group-id="7166935179-12">]</samp><samp class="p" data-group-id="7166935179-8">}</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="n">pop_in</samp><samp class="p" data-group-id="7166935179-14">(</samp><samp class="n">list</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="7166935179-15">[</samp><samp class="nc">Access</samp><samp class="o">.</samp><samp class="n">slice</samp><samp class="p" data-group-id="7166935179-16">(</samp><samp class="o">-</samp><samp class="mi">2</samp><samp class="o">..</samp><samp class="o">-</samp><samp class="mi">1</samp><samp class="p" data-group-id="7166935179-16">)</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:name</samp><samp class="p" data-group-id="7166935179-15">]</samp><samp class="p" data-group-id="7166935179-14">)</samp><samp class="w">
</samp><samp class="p" data-group-id="7166935179-17">{</samp><samp class="p" data-group-id="7166935179-18">[</samp><samp class="s">&quot;francine&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;vitor&quot;</samp><samp class="p" data-group-id="7166935179-18">]</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="7166935179-19">[</samp><samp class="p" data-group-id="7166935179-20">%{</samp><samp class="ss">name</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;john&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">salary</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">10</samp><samp class="p" data-group-id="7166935179-20">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="7166935179-21">%{</samp><samp class="ss">salary</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">30</samp><samp class="p" data-group-id="7166935179-21">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="7166935179-22">%{</samp><samp class="ss">salary</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">25</samp><samp class="p" data-group-id="7166935179-22">}</samp><samp class="p" data-group-id="7166935179-19">]</samp><samp class="p" data-group-id="7166935179-17">}</samp></code></pre><p>When no match is found, an empty list is returned and the update function is never called</p><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="n">list</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="p" data-group-id="5213168372-1">[</samp><samp class="p" data-group-id="5213168372-2">%{</samp><samp class="ss">name</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;john&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">salary</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">10</samp><samp class="p" data-group-id="5213168372-2">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="5213168372-3">%{</samp><samp class="ss">name</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;francine&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">salary</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">30</samp><samp class="p" data-group-id="5213168372-3">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="5213168372-4">%{</samp><samp class="ss">name</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;vitor&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">salary</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">25</samp><samp class="p" data-group-id="5213168372-4">}</samp><samp class="p" data-group-id="5213168372-1">]</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="n">get_in</samp><samp class="p" data-group-id="5213168372-5">(</samp><samp class="n">list</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="5213168372-6">[</samp><samp class="nc">Access</samp><samp class="o">.</samp><samp class="n">slice</samp><samp class="p" data-group-id="5213168372-7">(</samp><samp class="mi">5</samp><samp class="o">..</samp><samp class="mi">10</samp><samp class="o">//</samp><samp class="mi">2</samp><samp class="p" data-group-id="5213168372-7">)</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:name</samp><samp class="p" data-group-id="5213168372-6">]</samp><samp class="p" data-group-id="5213168372-5">)</samp><samp class="w">
</samp><samp class="p" data-group-id="5213168372-8">[</samp><samp class="p" data-group-id="5213168372-8">]</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="n">get_and_update_in</samp><samp class="p" data-group-id="5213168372-9">(</samp><samp class="n">list</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="5213168372-10">[</samp><samp class="nc">Access</samp><samp class="o">.</samp><samp class="n">slice</samp><samp class="p" data-group-id="5213168372-11">(</samp><samp class="mi">5</samp><samp class="o">..</samp><samp class="mi">10</samp><samp class="o">//</samp><samp class="mi">2</samp><samp class="p" data-group-id="5213168372-11">)</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:name</samp><samp class="p" data-group-id="5213168372-10">]</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="k" data-group-id="5213168372-12">fn</samp><samp class="w"> </samp><samp class="n">prev</samp><samp class="w"> </samp><samp class="o">-&gt;</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="w">  </samp><samp class="p" data-group-id="5213168372-13">{</samp><samp class="n">prev</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">upcase</samp><samp class="p" data-group-id="5213168372-14">(</samp><samp class="n">prev</samp><samp class="p" data-group-id="5213168372-14">)</samp><samp class="p" data-group-id="5213168372-13">}</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="k" data-group-id="5213168372-12">end</samp><samp class="p" data-group-id="5213168372-9">)</samp><samp class="w">
</samp><samp class="p" data-group-id="5213168372-15">{</samp><samp class="p" data-group-id="5213168372-16">[</samp><samp class="p" data-group-id="5213168372-16">]</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="5213168372-17">[</samp><samp class="p" data-group-id="5213168372-18">%{</samp><samp class="ss">name</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;john&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">salary</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">10</samp><samp class="p" data-group-id="5213168372-18">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="5213168372-19">%{</samp><samp class="ss">name</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;francine&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">salary</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">30</samp><samp class="p" data-group-id="5213168372-19">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="5213168372-20">%{</samp><samp class="ss">name</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;vitor&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">salary</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">25</samp><samp class="p" data-group-id="5213168372-20">}</samp><samp class="p" data-group-id="5213168372-17">]</samp><samp class="p" data-group-id="5213168372-15">}</samp></code></pre><p>An error is raised if the accessed structure is not a list:</p><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="n">get_in</samp><samp class="p" data-group-id="6514161104-1">(</samp><samp class="p" data-group-id="6514161104-2">%{</samp><samp class="p" data-group-id="6514161104-2">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="6514161104-3">[</samp><samp class="nc">Access</samp><samp class="o">.</samp><samp class="n">slice</samp><samp class="p" data-group-id="6514161104-4">(</samp><samp class="mi">2</samp><samp class="o">..</samp><samp class="mi">10</samp><samp class="o">//</samp><samp class="mi">3</samp><samp class="p" data-group-id="6514161104-4">)</samp><samp class="p" data-group-id="6514161104-3">]</samp><samp class="p" data-group-id="6514161104-1">)</samp><samp class="w">
</samp><samp class="gt">** (ArgumentError) Access.slice/1 expected a list, got: %{}</samp></code></pre><p>An error is raised if the step of the range is negative:</p><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="n">get_in</samp><samp class="p" data-group-id="1435241733-1">(</samp><samp class="p" data-group-id="1435241733-2">[</samp><samp class="p" data-group-id="1435241733-2">]</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="1435241733-3">[</samp><samp class="nc">Access</samp><samp class="o">.</samp><samp class="n">slice</samp><samp class="p" data-group-id="1435241733-4">(</samp><samp class="mi">2</samp><samp class="o">..</samp><samp class="mi">10</samp><samp class="o">//</samp><samp class="o">-</samp><samp class="mi">1</samp><samp class="p" data-group-id="1435241733-4">)</samp><samp class="p" data-group-id="1435241733-3">]</samp><samp class="p" data-group-id="1435241733-1">)</samp><samp class="w">
</samp><samp class="gt">** (ArgumentError) Access.slice/1 does not accept ranges with negative steps, got: 2..10//-1</samp></code></pre>
  </section>
</section>

        </div>
      </section>


  </body>
</html>
