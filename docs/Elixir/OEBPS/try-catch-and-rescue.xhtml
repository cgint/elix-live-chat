<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"
      xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>try, catch, and rescue - Elixir v1.18.4</title>
    <meta name="generator" content="ExDoc v0.38.2" />
    <link type="text/css" rel="stylesheet" href="dist/epub-elixir-FNUUKFP7.css" />
    <script src="dist/epub-4WIP524F.js"></script>

  </head>
  <body class="content-inner">

    <h1 id="content">try, catch, and rescue</h1>
<p>Elixir has three error mechanisms: errors, throws, and exits. In this chapter, we will explore each of them and include remarks about when each should be used.</p><h2 id="errors">Errors</h2><p>Errors (or <em>exceptions</em>) are used when exceptional things happen in the code. A sample error can be retrieved by trying to add a number to an atom:</p><pre><code class="makeup elixir" translate="no"><span class="gp unselectable">iex&gt; </span><span class="ss">:foo</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="mi">1</span><span class="w">
</span><span class="gt">** (ArithmeticError) bad argument in arithmetic expression
     :erlang.+(:foo, 1)</span></code></pre><p>A runtime error can be raised any time by using <a href="Kernel.xhtml#raise/1"><code class="inline">raise/1</code></a>:</p><pre><code class="makeup elixir" translate="no"><span class="gp unselectable">iex&gt; </span><span class="k">raise</span><span class="w"> </span><span class="s">&quot;oops&quot;</span><span class="w">
</span><span class="gt">** (RuntimeError) oops</span></code></pre><p>Other errors can be raised with <a href="Kernel.xhtml#raise/2"><code class="inline">raise/2</code></a> passing the error name and a list of keyword arguments:</p><pre><code class="makeup elixir" translate="no"><span class="gp unselectable">iex&gt; </span><span class="k">raise</span><span class="w"> </span><span class="nc">ArgumentError</span><span class="p">,</span><span class="w"> </span><span class="ss">message</span><span class="p">:</span><span class="w"> </span><span class="s">&quot;invalid argument foo&quot;</span><span class="w">
</span><span class="gt">** (ArgumentError) invalid argument foo</span></code></pre><p>You can also define your own errors by creating a module and using the <a href="Kernel.xhtml#defexception/1"><code class="inline">defexception/1</code></a> construct inside it. This way, you'll create an error with the same name as the module it's defined in. The most common case is to define a custom exception with a message field:</p><pre><code class="makeup elixir" translate="no"><span class="gp unselectable">iex&gt; </span><span class="kd">defmodule</span><span class="w"> </span><span class="nc">MyError</span><span class="w"> </span><span class="k" data-group-id="5779412272-1">do</span><span class="w">
</span><span class="gp unselectable">iex&gt; </span><span class="w">  </span><span class="kd">defexception</span><span class="w"> </span><span class="ss">message</span><span class="p">:</span><span class="w"> </span><span class="s">&quot;default message&quot;</span><span class="w">
</span><span class="gp unselectable">iex&gt; </span><span class="k" data-group-id="5779412272-1">end</span><span class="w">
</span><span class="gp unselectable">iex&gt; </span><span class="k">raise</span><span class="w"> </span><span class="nc">MyError</span><span class="w">
</span><span class="gt">** (MyError) default message</span><span class="w">
</span><span class="gp unselectable">iex&gt; </span><span class="k">raise</span><span class="w"> </span><span class="nc">MyError</span><span class="p">,</span><span class="w"> </span><span class="ss">message</span><span class="p">:</span><span class="w"> </span><span class="s">&quot;custom message&quot;</span><span class="w">
</span><span class="gt">** (MyError) custom message</span></code></pre><p>Errors can be <strong>rescued</strong> using the <code class="inline">try/rescue</code> construct:</p><pre><code class="makeup elixir" translate="no"><span class="gp unselectable">iex&gt; </span><span class="k">try</span><span class="w"> </span><span class="k" data-group-id="5138529643-1">do</span><span class="w">
</span><span class="gp unselectable">...&gt; </span><span class="w">  </span><span class="k">raise</span><span class="w"> </span><span class="s">&quot;oops&quot;</span><span class="w">
</span><span class="gp unselectable">...&gt; </span><span class="k" data-group-id="5138529643-1">rescue</span><span class="w">
</span><span class="gp unselectable">...&gt; </span><span class="w">  </span><span class="n">e</span><span class="w"> </span><span class="ow">in</span><span class="w"> </span><span class="nc">RuntimeError</span><span class="w"> </span><span class="o">-&gt;</span><span class="w"> </span><span class="n">e</span><span class="w">
</span><span class="gp unselectable">...&gt; </span><span class="k" data-group-id="5138529643-1">end</span><span class="w">
</span><span class="p" data-group-id="5138529643-2">%</span><span class="nc" data-group-id="5138529643-2">RuntimeError</span><span class="p" data-group-id="5138529643-2">{</span><span class="ss">message</span><span class="p">:</span><span class="w"> </span><span class="s">&quot;oops&quot;</span><span class="p" data-group-id="5138529643-2">}</span></code></pre><p>The example above rescues the runtime error and returns the exception itself, which is then printed in the <code class="inline">iex</code> session.</p><p>If you don't have any use for the exception, you don't have to pass a variable to <code class="inline">rescue</code>:</p><pre><code class="makeup elixir" translate="no"><span class="gp unselectable">iex&gt; </span><span class="k">try</span><span class="w"> </span><span class="k" data-group-id="3163875855-1">do</span><span class="w">
</span><span class="gp unselectable">...&gt; </span><span class="w">  </span><span class="k">raise</span><span class="w"> </span><span class="s">&quot;oops&quot;</span><span class="w">
</span><span class="gp unselectable">...&gt; </span><span class="k" data-group-id="3163875855-1">rescue</span><span class="w">
</span><span class="gp unselectable">...&gt; </span><span class="w">  </span><span class="nc">RuntimeError</span><span class="w"> </span><span class="o">-&gt;</span><span class="w"> </span><span class="s">&quot;Error!&quot;</span><span class="w">
</span><span class="gp unselectable">...&gt; </span><span class="k" data-group-id="3163875855-1">end</span><span class="w">
</span><span class="s">&quot;Error!&quot;</span></code></pre><p>In practice, Elixir developers rarely use the <code class="inline">try/rescue</code> construct. For example, many languages would force you to rescue an error when a file cannot be opened successfully. Elixir instead provides a <a href="File.xhtml#read/1"><code class="inline">File.read/1</code></a> function which returns a tuple containing information about whether the file was opened successfully:</p><pre><code class="makeup elixir" translate="no"><span class="gp unselectable">iex&gt; </span><span class="nc">File</span><span class="o">.</span><span class="n">read</span><span class="p" data-group-id="9680201087-1">(</span><span class="s">&quot;hello&quot;</span><span class="p" data-group-id="9680201087-1">)</span><span class="w">
</span><span class="p" data-group-id="9680201087-2">{</span><span class="ss">:error</span><span class="p">,</span><span class="w"> </span><span class="ss">:enoent</span><span class="p" data-group-id="9680201087-2">}</span><span class="w">
</span><span class="gp unselectable">iex&gt; </span><span class="nc">File</span><span class="o">.</span><span class="n">write</span><span class="p" data-group-id="9680201087-3">(</span><span class="s">&quot;hello&quot;</span><span class="p">,</span><span class="w"> </span><span class="s">&quot;world&quot;</span><span class="p" data-group-id="9680201087-3">)</span><span class="w">
</span><span class="ss">:ok</span><span class="w">
</span><span class="gp unselectable">iex&gt; </span><span class="nc">File</span><span class="o">.</span><span class="n">read</span><span class="p" data-group-id="9680201087-4">(</span><span class="s">&quot;hello&quot;</span><span class="p" data-group-id="9680201087-4">)</span><span class="w">
</span><span class="p" data-group-id="9680201087-5">{</span><span class="ss">:ok</span><span class="p">,</span><span class="w"> </span><span class="s">&quot;world&quot;</span><span class="p" data-group-id="9680201087-5">}</span></code></pre><p>There is no <code class="inline">try/rescue</code> here. In case you want to handle multiple outcomes of opening a file, you can use pattern matching using the <code class="inline">case</code> construct:</p><pre><code class="makeup elixir" translate="no"><span class="gp unselectable">iex&gt; </span><span class="k">case</span><span class="w"> </span><span class="nc">File</span><span class="o">.</span><span class="n">read</span><span class="p" data-group-id="2711789055-1">(</span><span class="s">&quot;hello&quot;</span><span class="p" data-group-id="2711789055-1">)</span><span class="w"> </span><span class="k" data-group-id="2711789055-2">do</span><span class="w">
</span><span class="gp unselectable">...&gt; </span><span class="w">  </span><span class="p" data-group-id="2711789055-3">{</span><span class="ss">:ok</span><span class="p">,</span><span class="w"> </span><span class="n">body</span><span class="p" data-group-id="2711789055-3">}</span><span class="w"> </span><span class="o">-&gt;</span><span class="w"> </span><span class="nc">IO</span><span class="o">.</span><span class="n">puts</span><span class="p" data-group-id="2711789055-4">(</span><span class="s">&quot;Success: </span><span class="si" data-group-id="2711789055-5">#{</span><span class="n">body</span><span class="si" data-group-id="2711789055-5">}</span><span class="s">&quot;</span><span class="p" data-group-id="2711789055-4">)</span><span class="w">
</span><span class="gp unselectable">...&gt; </span><span class="w">  </span><span class="p" data-group-id="2711789055-6">{</span><span class="ss">:error</span><span class="p">,</span><span class="w"> </span><span class="n">reason</span><span class="p" data-group-id="2711789055-6">}</span><span class="w"> </span><span class="o">-&gt;</span><span class="w"> </span><span class="nc">IO</span><span class="o">.</span><span class="n">puts</span><span class="p" data-group-id="2711789055-7">(</span><span class="s">&quot;Error: </span><span class="si" data-group-id="2711789055-8">#{</span><span class="n">reason</span><span class="si" data-group-id="2711789055-8">}</span><span class="s">&quot;</span><span class="p" data-group-id="2711789055-7">)</span><span class="w">
</span><span class="gp unselectable">...&gt; </span><span class="k" data-group-id="2711789055-2">end</span></code></pre><p>For the cases where you do expect a file to exist (and the lack of that file is truly an <em>error</em>) you may use <a href="File.xhtml#read!/1"><code class="inline">File.read!/1</code></a>:</p><pre><code class="makeup elixir" translate="no"><span class="gp unselectable">iex&gt; </span><span class="nc">File</span><span class="o">.</span><span class="n">read!</span><span class="p" data-group-id="4670201653-1">(</span><span class="s">&quot;unknown&quot;</span><span class="p" data-group-id="4670201653-1">)</span><span class="w">
</span><span class="gt">** (File.Error) could not read file &quot;unknown&quot;: no such file or directory
    (elixir) lib/file.ex:272: File.read!/1</span></code></pre><p>At the end of the day, it's up to your application to decide if an error while opening a file is exceptional or not. That's why Elixir doesn't impose exceptions on <a href="File.xhtml#read/1"><code class="inline">File.read/1</code></a> and many other functions. Instead, it leaves it up to the developer to choose the best way to proceed.</p><p>Many functions in the standard library follow the pattern of having a counterpart that raises an exception instead of returning tuples to match against. The convention is to create a function (<code class="inline">foo</code>) which returns <code class="inline">{:ok, result}</code> or <code class="inline">{:error, reason}</code> tuples and another function (<code class="inline">foo!</code>, same name but with a trailing <code class="inline">!</code>) that takes the same arguments as <code class="inline">foo</code> but which raises an exception if there's an error. <code class="inline">foo!</code> should return the result (not wrapped in a tuple) if everything goes fine. The <a href="File.xhtml"><code class="inline">File</code></a> module is a good example of this convention.</p><h3 id="fail-fast-let-it-crash">Fail fast / Let it crash</h3><p>One saying that is common in the Erlang community, as well as Elixir's, is &quot;fail fast&quot; / &quot;let it crash&quot;. The idea behind let it crash is that, in case something <em>unexpected</em> happens, it is best to let the exception happen, without rescuing it.</p><p>It is important to emphasize the word <em>unexpected</em>. For example, imagine you are building a script to process files. Your script receives filenames as inputs. It is expected that users may make mistakes and provide unknown filenames. In this scenario, while you could use <a href="File.xhtml#read!/1"><code class="inline">File.read!/1</code></a> to read files and let it crash in case of invalid filenames, it probably makes more sense to use <a href="File.xhtml#read/1"><code class="inline">File.read/1</code></a> and provide users of your script with a clear and precise feedback of what went wrong.</p><p>Other times, you may fully expect a certain file to exist, and in case it does not, it means something terribly wrong has happened elsewhere. In such cases, <a href="File.xhtml#read!/1"><code class="inline">File.read!/1</code></a> is all you need.</p><p>The second approach also works because, as discussed in the <a href="processes.xhtml">Processes</a> chapter, all Elixir code runs inside processes that are isolated and don't share anything by default. Therefore, an unhandled exception in a process will never crash or corrupt the state of another process. This allows us to define supervisor processes, which are meant to observe when a process terminates unexpectedly, and start a new one in its place.</p><p>At the end of the day, &quot;fail fast&quot; / &quot;let it crash&quot; is a way of saying that, when <em>something unexpected</em> happens, it is best to start from scratch within a new process, freshly started by a supervisor, rather than blindly trying to rescue all possible error cases without the full context of when and how they can happen.</p><h3 id="reraise">Reraise</h3><p>While we generally avoid using <code class="inline">try/rescue</code> in Elixir, one situation where we may want to use such constructs is for observability/monitoring. Imagine you want to log that something went wrong, you could do:</p><pre><code class="makeup elixir" translate="no"><span class="k">try</span><span class="w"> </span><span class="k" data-group-id="3144077178-1">do</span><span class="w">
  </span><span class="n">...</span><span class="w"> </span><span class="n">some</span><span class="w"> </span><span class="n">code</span><span class="w"> </span><span class="n">...</span><span class="w">
</span><span class="k" data-group-id="3144077178-1">rescue</span><span class="w">
  </span><span class="n">e</span><span class="w"> </span><span class="o">-&gt;</span><span class="w">
    </span><span class="nc">Logger</span><span class="o">.</span><span class="n">error</span><span class="p" data-group-id="3144077178-2">(</span><span class="nc">Exception</span><span class="o">.</span><span class="n">format</span><span class="p" data-group-id="3144077178-3">(</span><span class="ss">:error</span><span class="p">,</span><span class="w"> </span><span class="n">e</span><span class="p">,</span><span class="w"> </span><span class="c">__STACKTRACE__</span><span class="p" data-group-id="3144077178-3">)</span><span class="p" data-group-id="3144077178-2">)</span><span class="w">
    </span><span class="n">reraise</span><span class="w"> </span><span class="n">e</span><span class="p">,</span><span class="w"> </span><span class="c">__STACKTRACE__</span><span class="w">
</span><span class="k" data-group-id="3144077178-1">end</span></code></pre><p>In the example above, we rescued the exception, logged it, and then re-raised it. We use the <code class="inline">__STACKTRACE__</code> construct both when formatting the exception and when re-raising. This ensures we reraise the exception as is, without changing value or its origin.</p><p>Generally speaking, we take errors in Elixir literally: they are reserved for unexpected and/or exceptional situations, never for controlling the flow of our code. In case you actually need flow control constructs, <em>throws</em> should be used. That's what we are going to see next.</p><h2 id="throws">Throws</h2><p>In Elixir, a value can be thrown and later be caught. <code class="inline">throw</code> and <code class="inline">catch</code> are reserved for situations where it is not possible to retrieve a value unless by using <code class="inline">throw</code> and <code class="inline">catch</code>.</p><p>Those situations are quite uncommon in practice except when interfacing with libraries that do not provide a proper API. For example, let's imagine the <a href="Enum.xhtml"><code class="inline">Enum</code></a> module did not provide any API for finding a value and that we needed to find the first multiple of 13 in a list of numbers:</p><pre><code class="makeup elixir" translate="no"><span class="gp unselectable">iex&gt; </span><span class="k">try</span><span class="w"> </span><span class="k" data-group-id="0392156212-1">do</span><span class="w">
</span><span class="gp unselectable">...&gt; </span><span class="w">  </span><span class="nc">Enum</span><span class="o">.</span><span class="n">each</span><span class="p" data-group-id="0392156212-2">(</span><span class="o">-</span><span class="mi">50</span><span class="o">..</span><span class="mi">50</span><span class="p">,</span><span class="w"> </span><span class="k" data-group-id="0392156212-3">fn</span><span class="w"> </span><span class="n">x</span><span class="w"> </span><span class="o">-&gt;</span><span class="w">
</span><span class="gp unselectable">...&gt; </span><span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="n">rem</span><span class="p" data-group-id="0392156212-4">(</span><span class="n">x</span><span class="p">,</span><span class="w"> </span><span class="mi">13</span><span class="p" data-group-id="0392156212-4">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="ss">do</span><span class="p">:</span><span class="w"> </span><span class="k">throw</span><span class="p" data-group-id="0392156212-5">(</span><span class="n">x</span><span class="p" data-group-id="0392156212-5">)</span><span class="w">
</span><span class="gp unselectable">...&gt; </span><span class="w">  </span><span class="k" data-group-id="0392156212-3">end</span><span class="p" data-group-id="0392156212-2">)</span><span class="w">
</span><span class="gp unselectable">...&gt; </span><span class="w">  </span><span class="s">&quot;Got nothing&quot;</span><span class="w">
</span><span class="gp unselectable">...&gt; </span><span class="k" data-group-id="0392156212-1">catch</span><span class="w">
</span><span class="gp unselectable">...&gt; </span><span class="w">  </span><span class="n">x</span><span class="w"> </span><span class="o">-&gt;</span><span class="w"> </span><span class="s">&quot;Got </span><span class="si" data-group-id="0392156212-6">#{</span><span class="n">x</span><span class="si" data-group-id="0392156212-6">}</span><span class="s">&quot;</span><span class="w">
</span><span class="gp unselectable">...&gt; </span><span class="k" data-group-id="0392156212-1">end</span><span class="w">
</span><span class="s">&quot;Got -39&quot;</span></code></pre><p>Since <a href="Enum.xhtml"><code class="inline">Enum</code></a> <em>does</em> provide a proper API, in practice <a href="Enum.xhtml#find/2"><code class="inline">Enum.find/2</code></a> is the way to go:</p><pre><code class="makeup elixir" translate="no"><span class="gp unselectable">iex&gt; </span><span class="nc">Enum</span><span class="o">.</span><span class="n">find</span><span class="p" data-group-id="0845107736-1">(</span><span class="o">-</span><span class="mi">50</span><span class="o">..</span><span class="mi">50</span><span class="p">,</span><span class="w"> </span><span class="o">&amp;</span><span class="p" data-group-id="0845107736-2">(</span><span class="n">rem</span><span class="p" data-group-id="0845107736-3">(</span><span class="ni">&amp;1</span><span class="p">,</span><span class="w"> </span><span class="mi">13</span><span class="p" data-group-id="0845107736-3">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="mi">0</span><span class="p" data-group-id="0845107736-2">)</span><span class="p" data-group-id="0845107736-1">)</span><span class="w">
</span><span class="o">-</span><span class="mi">39</span></code></pre><h2 id="exits">Exits</h2><p>All Elixir code runs inside processes that communicate with each other. When a process dies of &quot;natural causes&quot; (e.g., unhandled exceptions), it sends an <code class="inline">exit</code> signal. A process can also die by explicitly sending an <code class="inline">exit</code> signal:</p><pre><code class="makeup elixir" translate="no"><span class="gp unselectable">iex&gt; </span><span class="n">spawn_link</span><span class="p" data-group-id="5507505106-1">(</span><span class="k" data-group-id="5507505106-2">fn</span><span class="w"> </span><span class="o">-&gt;</span><span class="w"> </span><span class="n">exit</span><span class="p" data-group-id="5507505106-3">(</span><span class="mi">1</span><span class="p" data-group-id="5507505106-3">)</span><span class="w"> </span><span class="k" data-group-id="5507505106-2">end</span><span class="p" data-group-id="5507505106-1">)</span><span class="w">
</span><span class="gt">** (EXIT from #PID&lt;0.56.0&gt;) shell process exited with reason: 1</span></code></pre><p>In the example above, the linked process died by sending an <code class="inline">exit</code> signal with a value of 1. The Elixir shell automatically handles those messages and prints them to the terminal.</p><p><code class="inline">exit</code> can also be &quot;caught&quot; using <code class="inline">try/catch</code>:</p><pre><code class="makeup elixir" translate="no"><span class="gp unselectable">iex&gt; </span><span class="k">try</span><span class="w"> </span><span class="k" data-group-id="3153335044-1">do</span><span class="w">
</span><span class="gp unselectable">...&gt; </span><span class="w">  </span><span class="n">exit</span><span class="p" data-group-id="3153335044-2">(</span><span class="s">&quot;I am exiting&quot;</span><span class="p" data-group-id="3153335044-2">)</span><span class="w">
</span><span class="gp unselectable">...&gt; </span><span class="k" data-group-id="3153335044-1">catch</span><span class="w">
</span><span class="gp unselectable">...&gt; </span><span class="w">  </span><span class="ss">:exit</span><span class="p">,</span><span class="w"> </span><span class="bp">_</span><span class="w"> </span><span class="o">-&gt;</span><span class="w"> </span><span class="s">&quot;not really&quot;</span><span class="w">
</span><span class="gp unselectable">...&gt; </span><span class="k" data-group-id="3153335044-1">end</span><span class="w">
</span><span class="s">&quot;not really&quot;</span></code></pre><p><code class="inline">catch</code> can also be used within a function body without a matching <code class="inline">try</code>.</p><pre><code class="makeup elixir" translate="no"><span class="kd">defmodule</span><span class="w"> </span><span class="nc">Example</span><span class="w"> </span><span class="k" data-group-id="6185997444-1">do</span><span class="w">
  </span><span class="kd">def</span><span class="w"> </span><span class="nf">matched_catch</span><span class="w"> </span><span class="k" data-group-id="6185997444-2">do</span><span class="w">
    </span><span class="n">exit</span><span class="p" data-group-id="6185997444-3">(</span><span class="ss">:timeout</span><span class="p" data-group-id="6185997444-3">)</span><span class="w">
  </span><span class="k" data-group-id="6185997444-2">catch</span><span class="w">
    </span><span class="ss">:exit</span><span class="p">,</span><span class="w"> </span><span class="ss">:timeout</span><span class="w"> </span><span class="o">-&gt;</span><span class="w">
      </span><span class="p" data-group-id="6185997444-4">{</span><span class="ss">:error</span><span class="p">,</span><span class="w"> </span><span class="ss">:timeout</span><span class="p" data-group-id="6185997444-4">}</span><span class="w">
  </span><span class="k" data-group-id="6185997444-2">end</span><span class="w">

  </span><span class="kd">def</span><span class="w"> </span><span class="nf">mismatched_catch</span><span class="w"> </span><span class="k" data-group-id="6185997444-5">do</span><span class="w">
    </span><span class="n">exit</span><span class="p" data-group-id="6185997444-6">(</span><span class="ss">:timeout</span><span class="p" data-group-id="6185997444-6">)</span><span class="w">
  </span><span class="k" data-group-id="6185997444-5">catch</span><span class="w">
    </span><span class="c1"># Since no clause matches, this catch will have no effect</span><span class="w">
    </span><span class="ss">:exit</span><span class="p">,</span><span class="w"> </span><span class="ss">:explosion</span><span class="w"> </span><span class="o">-&gt;</span><span class="w">
      </span><span class="p" data-group-id="6185997444-7">{</span><span class="ss">:error</span><span class="p">,</span><span class="w"> </span><span class="ss">:explosion</span><span class="p" data-group-id="6185997444-7">}</span><span class="w">
  </span><span class="k" data-group-id="6185997444-5">end</span><span class="w">
</span><span class="k" data-group-id="6185997444-1">end</span></code></pre><p>However, using <code class="inline">try/catch</code> is already uncommon and using it to catch exits is even rarer.</p><p><code class="inline">exit</code> signals are an important part of the fault tolerant system provided by the Erlang VM. Processes usually run under supervision trees which are themselves processes that listen to <code class="inline">exit</code> signals from the supervised processes. Once an <code class="inline">exit</code> signal is received, the supervision strategy kicks in and the supervised process is restarted.</p><p>It is exactly this supervision system that makes constructs like <code class="inline">try/catch</code> and <code class="inline">try/rescue</code> so uncommon in Elixir. Instead of rescuing an error, we'd rather &quot;fail fast&quot; since the supervision tree will guarantee our application will go back to a known initial state after the error.</p><h2 id="after">After</h2><p>Sometimes it's necessary to ensure that a resource is cleaned up after some action that could potentially raise an error. The <code class="inline">try/after</code> construct allows you to do that. For example, we can open a file and use an <code class="inline">after</code> clause to close it—even if something goes wrong:</p><pre><code class="makeup elixir" translate="no"><span class="gp unselectable">iex&gt; </span><span class="p" data-group-id="8671707461-1">{</span><span class="ss">:ok</span><span class="p">,</span><span class="w"> </span><span class="n">file</span><span class="p" data-group-id="8671707461-1">}</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nc">File</span><span class="o">.</span><span class="n">open</span><span class="p" data-group-id="8671707461-2">(</span><span class="s">&quot;sample&quot;</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="8671707461-3">[</span><span class="ss">:utf8</span><span class="p">,</span><span class="w"> </span><span class="ss">:write</span><span class="p" data-group-id="8671707461-3">]</span><span class="p" data-group-id="8671707461-2">)</span><span class="w">
</span><span class="gp unselectable">iex&gt; </span><span class="k">try</span><span class="w"> </span><span class="k" data-group-id="8671707461-4">do</span><span class="w">
</span><span class="gp unselectable">...&gt; </span><span class="w">  </span><span class="nc">IO</span><span class="o">.</span><span class="n">write</span><span class="p" data-group-id="8671707461-5">(</span><span class="n">file</span><span class="p">,</span><span class="w"> </span><span class="s">&quot;olá&quot;</span><span class="p" data-group-id="8671707461-5">)</span><span class="w">
</span><span class="gp unselectable">...&gt; </span><span class="w">  </span><span class="k">raise</span><span class="w"> </span><span class="s">&quot;oops, something went wrong&quot;</span><span class="w">
</span><span class="gp unselectable">...&gt; </span><span class="k" data-group-id="8671707461-4">after</span><span class="w">
</span><span class="gp unselectable">...&gt; </span><span class="w">  </span><span class="nc">File</span><span class="o">.</span><span class="n">close</span><span class="p" data-group-id="8671707461-6">(</span><span class="n">file</span><span class="p" data-group-id="8671707461-6">)</span><span class="w">
</span><span class="gp unselectable">...&gt; </span><span class="k" data-group-id="8671707461-4">end</span><span class="w">
</span><span class="gt">** (RuntimeError) oops, something went wrong</span></code></pre><p>The <code class="inline">after</code> clause will be executed regardless of whether or not the tried block succeeds. Note, however, that if a linked process exits,
this process will exit and the <code class="inline">after</code> clause will not get run. Thus <code class="inline">after</code> provides only a soft guarantee. Luckily, files in Elixir are also linked to the current processes and therefore they will always get closed if the current process crashes, independent of the
<code class="inline">after</code> clause. You will find the same to be true for other resources like ETS tables, sockets, ports and more.</p><p>Sometimes you may want to wrap the entire body of a function in a <code class="inline">try</code> construct, often to guarantee some code will be executed afterwards. In such cases, Elixir allows you to omit the <code class="inline">try</code> line:</p><pre><code class="makeup elixir" translate="no"><span class="gp unselectable">iex&gt; </span><span class="kd">defmodule</span><span class="w"> </span><span class="nc">RunAfter</span><span class="w"> </span><span class="k" data-group-id="5834576581-1">do</span><span class="w">
</span><span class="gp unselectable">...&gt; </span><span class="w">  </span><span class="kd">def</span><span class="w"> </span><span class="nf">without_even_trying</span><span class="w"> </span><span class="k" data-group-id="5834576581-2">do</span><span class="w">
</span><span class="gp unselectable">...&gt; </span><span class="w">    </span><span class="k">raise</span><span class="w"> </span><span class="s">&quot;oops&quot;</span><span class="w">
</span><span class="gp unselectable">...&gt; </span><span class="w">  </span><span class="k" data-group-id="5834576581-2">after</span><span class="w">
</span><span class="gp unselectable">...&gt; </span><span class="w">    </span><span class="nc">IO</span><span class="o">.</span><span class="n">puts</span><span class="p" data-group-id="5834576581-3">(</span><span class="s">&quot;cleaning up!&quot;</span><span class="p" data-group-id="5834576581-3">)</span><span class="w">
</span><span class="gp unselectable">...&gt; </span><span class="w">  </span><span class="k" data-group-id="5834576581-2">end</span><span class="w">
</span><span class="gp unselectable">...&gt; </span><span class="k" data-group-id="5834576581-1">end</span><span class="w">
</span><span class="gp unselectable">iex&gt; </span><span class="nc">RunAfter</span><span class="o">.</span><span class="n">without_even_trying</span><span class="w">
</span><span class="n">cleaning</span><span class="w"> </span><span class="n">up!</span><span class="w">
</span><span class="gt">** (RuntimeError) oops</span></code></pre><p>Elixir will automatically wrap the function body in a <code class="inline">try</code> whenever one of <code class="inline">after</code>, <code class="inline">rescue</code> or <code class="inline">catch</code> is specified. The <code class="inline">after</code> block handles side effects and does not change the return value from the clauses above it.</p><h2 id="else">Else</h2><p>If an <code class="inline">else</code> block is present, it will match on the results of the <code class="inline">try</code> block whenever the <code class="inline">try</code> block finishes without a throw or an error.</p><pre><code class="makeup elixir" translate="no"><span class="gp unselectable">iex&gt; </span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">2</span><span class="w">
</span><span class="mi">2</span><span class="w">
</span><span class="gp unselectable">iex&gt; </span><span class="k">try</span><span class="w"> </span><span class="k" data-group-id="1545266587-1">do</span><span class="w">
</span><span class="gp unselectable">...&gt; </span><span class="w">  </span><span class="mi">1</span><span class="w"> </span><span class="o">/</span><span class="w"> </span><span class="n">x</span><span class="w">
</span><span class="gp unselectable">...&gt; </span><span class="k" data-group-id="1545266587-1">rescue</span><span class="w">
</span><span class="gp unselectable">...&gt; </span><span class="w">  </span><span class="nc">ArithmeticError</span><span class="w"> </span><span class="o">-&gt;</span><span class="w">
</span><span class="gp unselectable">...&gt; </span><span class="w">    </span><span class="ss">:infinity</span><span class="w">
</span><span class="gp unselectable">...&gt; </span><span class="k" data-group-id="1545266587-1">else</span><span class="w">
</span><span class="gp unselectable">...&gt; </span><span class="w">  </span><span class="n">y</span><span class="w"> </span><span class="ow">when</span><span class="w"> </span><span class="n">y</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="mi">1</span><span class="w"> </span><span class="ow">and</span><span class="w"> </span><span class="n">y</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="o">-</span><span class="mi">1</span><span class="w"> </span><span class="o">-&gt;</span><span class="w">
</span><span class="gp unselectable">...&gt; </span><span class="w">    </span><span class="ss">:small</span><span class="w">
</span><span class="gp unselectable">...&gt; </span><span class="w">  </span><span class="bp">_</span><span class="w"> </span><span class="o">-&gt;</span><span class="w">
</span><span class="gp unselectable">...&gt; </span><span class="w">    </span><span class="ss">:large</span><span class="w">
</span><span class="gp unselectable">...&gt; </span><span class="k" data-group-id="1545266587-1">end</span><span class="w">
</span><span class="ss">:small</span></code></pre><p>Exceptions in the <code class="inline">else</code> block are not caught. If no pattern inside the <code class="inline">else</code> block matches, an exception will be raised; this exception is not caught by the current <code class="inline">try/catch/rescue/after</code> block.</p><h2 id="variables-scope">Variables scope</h2><p>Similar to <code class="inline">case</code>, <code class="inline">cond</code>, <code class="inline">if</code> and other constructs in Elixir, variables defined inside <code class="inline">try/catch/rescue/after</code> blocks do not leak to the outer context. In other words, this code is invalid:</p><pre><code class="makeup elixir" translate="no"><span class="gp unselectable">iex&gt; </span><span class="k">try</span><span class="w"> </span><span class="k" data-group-id="3138502368-1">do</span><span class="w">
</span><span class="gp unselectable">...&gt; </span><span class="w">  </span><span class="k">raise</span><span class="w"> </span><span class="s">&quot;fail&quot;</span><span class="w">
</span><span class="gp unselectable">...&gt; </span><span class="w">  </span><span class="n">what_happened</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="ss">:did_not_raise</span><span class="w">
</span><span class="gp unselectable">...&gt; </span><span class="k" data-group-id="3138502368-1">rescue</span><span class="w">
</span><span class="gp unselectable">...&gt; </span><span class="w">  </span><span class="bp">_</span><span class="w"> </span><span class="o">-&gt;</span><span class="w"> </span><span class="n">what_happened</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="ss">:rescued</span><span class="w">
</span><span class="gp unselectable">...&gt; </span><span class="k" data-group-id="3138502368-1">end</span><span class="w">
</span><span class="gp unselectable">iex&gt; </span><span class="n">what_happened</span><span class="w">
</span><span class="gt">** (CompileError) undefined variable &quot;what_happened&quot;</span></code></pre><p>Instead, you should return the value of the <code class="inline">try</code> expression:</p><pre><code class="makeup elixir" translate="no"><span class="gp unselectable">iex&gt; </span><span class="n">what_happened</span><span class="w"> </span><span class="o">=</span><span class="w">
</span><span class="gp unselectable">...&gt; </span><span class="w">  </span><span class="k">try</span><span class="w"> </span><span class="k" data-group-id="6060772658-1">do</span><span class="w">
</span><span class="gp unselectable">...&gt; </span><span class="w">    </span><span class="k">raise</span><span class="w"> </span><span class="s">&quot;fail&quot;</span><span class="w">
</span><span class="gp unselectable">...&gt; </span><span class="w">    </span><span class="ss">:did_not_raise</span><span class="w">
</span><span class="gp unselectable">...&gt; </span><span class="w">  </span><span class="k" data-group-id="6060772658-1">rescue</span><span class="w">
</span><span class="gp unselectable">...&gt; </span><span class="w">    </span><span class="bp">_</span><span class="w"> </span><span class="o">-&gt;</span><span class="w"> </span><span class="ss">:rescued</span><span class="w">
</span><span class="gp unselectable">...&gt; </span><span class="w">  </span><span class="k" data-group-id="6060772658-1">end</span><span class="w">
</span><span class="gp unselectable">iex&gt; </span><span class="n">what_happened</span><span class="w">
</span><span class="ss">:rescued</span></code></pre><p>Furthermore, variables defined in the do-block of <code class="inline">try</code> are not available inside <code class="inline">rescue/after/else</code> either. This is because the <code class="inline">try</code> block may fail at any moment and therefore the variables may have never been bound in the first place. So this also isn't valid:</p><pre><code class="makeup elixir" translate="no"><span class="gp unselectable">iex&gt; </span><span class="k">try</span><span class="w"> </span><span class="k" data-group-id="0304275932-1">do</span><span class="w">
</span><span class="gp unselectable">...&gt; </span><span class="w">  </span><span class="k">raise</span><span class="w"> </span><span class="s">&quot;fail&quot;</span><span class="w">
</span><span class="gp unselectable">...&gt; </span><span class="w">  </span><span class="n">another_what_happened</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="ss">:did_not_raise</span><span class="w">
</span><span class="gp unselectable">...&gt; </span><span class="k" data-group-id="0304275932-1">rescue</span><span class="w">
</span><span class="gp unselectable">...&gt; </span><span class="w">  </span><span class="bp">_</span><span class="w"> </span><span class="o">-&gt;</span><span class="w"> </span><span class="n">another_what_happened</span><span class="w">
</span><span class="gp unselectable">...&gt; </span><span class="k" data-group-id="0304275932-1">end</span><span class="w">
</span><span class="gt">** (CompileError) undefined variable &quot;another_what_happened&quot;</span></code></pre><p>This finishes our introduction on <code class="inline">try</code>, <code class="inline">catch</code>, and <code class="inline">rescue</code>. You will find they are used less frequently in Elixir than in other languages. Next we will talk about a very important subject to Elixir developers: writing documentation.</p>

  </body>
</html>
