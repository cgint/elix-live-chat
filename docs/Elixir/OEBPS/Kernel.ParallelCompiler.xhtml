<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"
      xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>Kernel.ParallelCompiler - Elixir v1.18.4</title>
    <meta name="generator" content="ExDoc v0.38.2" />
    <link type="text/css" rel="stylesheet" href="dist/epub-elixir-FNUUKFP7.css" />
    <script src="dist/epub-4WIP524F.js"></script>

  </head>
  <body class="content-inner">

    <h1 id="content">
Kernel.ParallelCompiler 
    </h1>


      <section id="moduledoc" class="docstring">
<p>A module responsible for compiling and requiring files in parallel.</p>
      </section>


      <section id="summary" class="details-list">
        <h1 class="section-heading">Summary</h1>
<div class="summary-types summary">
  <h2>
    <a href="#types">Types</a>
  </h2>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#t:error/0" data-no-tooltip="" translate="no">error()</a>

      </div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#t:info/0" data-no-tooltip="" translate="no">info()</a>

      </div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#t:warning/0" data-no-tooltip="" translate="no">warning()</a>

      </div>

    </div>

</div>
<div class="summary-functions summary">
  <h2>
    <a href="#functions">Functions</a>
  </h2>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#async/1" data-no-tooltip="" translate="no">async(fun)</a>

          <span class="deprecated" title="Use `pmap/2` instead">deprecated</span>

      </div>

        <div class="summary-synopsis"><p>Starts a task for parallel compilation.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#compile/2" data-no-tooltip="" translate="no">compile(files, options \\ [])</a>

      </div>

        <div class="summary-synopsis"><p>Compiles the given files.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#compile_to_path/3" data-no-tooltip="" translate="no">compile_to_path(files, path, options \\ [])</a>

      </div>

        <div class="summary-synopsis"><p>Compiles the given files and writes resulting BEAM files into path.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#pmap/2" data-no-tooltip="" translate="no">pmap(collection, fun)</a>

      </div>

        <div class="summary-synopsis"><p>Perform parallel compilation of <code class="inline">collection</code> with <code class="inline">fun</code>.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#require/2" data-no-tooltip="" translate="no">require(files, options \\ [])</a>

      </div>

        <div class="summary-synopsis"><p>Requires the given files in parallel.</p></div>

    </div>

</div>

      </section>


      <section id="types" class="details-list">
        <h1 class="section-heading">Types</h1>

        <div class="types-list">
<section class="detail" id="t:error/0">

  <div class="detail-header">
    <a href="#t:error/0" class="detail-link" data-no-tooltip="" aria-label="Link to this type">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">error()</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/kernel/parallel_compiler.ex#L13" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@type</span> error() :: {file :: <a href="Path.xhtml#t:t/0">Path.t</a>(), <a href="Code.xhtml#t:position/0">Code.position</a>(), message :: <a href="String.xhtml#t:t/0">String.t</a>()}</pre>

      </div>


  </section>
</section>
<section class="detail" id="t:info/0">

  <div class="detail-header">
    <a href="#t:info/0" class="detail-link" data-no-tooltip="" aria-label="Link to this type">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">info()</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/kernel/parallel_compiler.ex#L6" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@type</span> info() :: %{
  runtime_warnings: [<a href="Code.xhtml#t:diagnostic/1">Code.diagnostic</a>(:warning)],
  compile_warnings: [<a href="Code.xhtml#t:diagnostic/1">Code.diagnostic</a>(:warning)]
}</pre>

      </div>


  </section>
</section>
<section class="detail" id="t:warning/0">

  <div class="detail-header">
    <a href="#t:warning/0" class="detail-link" data-no-tooltip="" aria-label="Link to this type">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">warning()</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/kernel/parallel_compiler.ex#L12" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@type</span> warning() :: {file :: <a href="Path.xhtml#t:t/0">Path.t</a>(), <a href="Code.xhtml#t:position/0">Code.position</a>(), message :: <a href="String.xhtml#t:t/0">String.t</a>()}</pre>

      </div>


  </section>
</section>

        </div>
      </section>

      <section id="functions" class="details-list">
        <h1 class="section-heading">Functions</h1>

        <div class="functions-list">
<section class="detail" id="async/1">

  <div class="detail-header">
    <a href="#async/1" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">async(fun)</h1>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/kernel/parallel_compiler.ex#L20" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

    <div class="deprecated">
      This function is deprecated. Use `pmap/2` instead.
    </div>

  <section class="docstring">

<p>Starts a task for parallel compilation.</p>
  </section>
</section>
<section class="detail" id="compile/2">

    <span id="compile/1"></span>

  <div class="detail-header">
    <a href="#compile/2" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">compile(files, options \\ [])</h1>

        <span class="note">(since 1.6.0)</span>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/kernel/parallel_compiler.ex#L170" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> compile(
  [<a href="Path.xhtml#t:t/0">Path.t</a>()],
  <a href="typespecs.xhtml#built-in-types">keyword</a>()
) ::
  {:ok, [<a href="typespecs.xhtml#basic-types">atom</a>()], [<a href="#t:warning/0">warning</a>()] | <a href="#t:info/0">info</a>()}
  | {:error, [<a href="#t:error/0">error</a>()] | [<a href="Code.xhtml#t:diagnostic/1">Code.diagnostic</a>(:error)], [<a href="#t:warning/0">warning</a>()] | <a href="#t:info/0">info</a>()}</pre>

      </div>

<p>Compiles the given files.</p><p>Those files are compiled in parallel and can automatically
detect dependencies between them. Once a dependency is found,
the current file stops being compiled until the dependency is
resolved.</p><p>It returns <code class="inline">{:ok, modules, warnings}</code> or <code class="inline">{:error, errors, warnings}</code>
by default but we recommend using <code class="inline">return_diagnostics: true</code> so it returns
diagnostics as maps as well as a map of compilation information.
The map has the shape of:</p><pre><code class="makeup elixir" translate="no"><samp class="p" data-group-id="8125908188-1">%{</samp><samp class="w">
  </samp><samp class="ss">runtime_warnings</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="8125908188-2">[</samp><samp class="n">warning</samp><samp class="p" data-group-id="8125908188-2">]</samp><samp class="p">,</samp><samp class="w">
  </samp><samp class="ss">compile_warnings</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="8125908188-3">[</samp><samp class="n">warning</samp><samp class="p" data-group-id="8125908188-3">]</samp><samp class="w">
</samp><samp class="p" data-group-id="8125908188-1">}</samp></code></pre><h2 id="compile/2-options" class="section-heading"><a href="#compile/2-options" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Options</span></h2><ul><li><p><code class="inline">:each_file</code> - for each file compiled, invokes the callback passing the
file</p></li><li><p><code class="inline">:each_long_compilation</code> - for each file that takes more than a given
timeout (see the <code class="inline">:long_compilation_threshold</code> option) to compile, invoke
this callback passing the file as its argument</p></li><li><p><code class="inline">:each_module</code> - for each module compiled, invokes the callback passing
the file, module and the module bytecode</p></li><li><p><code class="inline">:each_cycle</code> - after the given files are compiled, invokes this function
that should return the following values:</p><ul><li><code class="inline">{:compile, modules, warnings}</code> - to continue compilation with a list of
further modules to compile</li><li><code class="inline">{:runtime, modules, warnings}</code> - to stop compilation and verify the list
of modules because dependent modules have changed</li></ul></li><li><p><code class="inline">:long_compilation_threshold</code> - the timeout (in seconds) to check for modules
taking too long to compile. For each file that exceeds the threshold, the
<code class="inline">:each_long_compilation</code> callback is invoked. From Elixir v1.11, only the time
spent compiling the actual module is taken into account by the threshold, the
time spent waiting is not considered. Defaults to <code class="inline">10</code> seconds.</p></li><li><p><code class="inline">:profile</code> - if set to <code class="inline">:time</code> measure the compilation time of each compilation cycle
 and group pass checker</p></li><li><p><code class="inline">:dest</code> - the destination directory for the BEAM files. When using <a href="#compile/2"><code class="inline">compile/2</code></a>,
this information is only used to properly annotate the BEAM files before
they are loaded into memory. If you want a file to actually be written to
<code class="inline">dest</code>, use <a href="#compile_to_path/3"><code class="inline">compile_to_path/3</code></a> instead.</p></li><li><p><code class="inline">:beam_timestamp</code> - the modification timestamp to give all BEAM files</p></li><li><p><code class="inline">:return_diagnostics</code> (since v1.15.0) - returns maps with information instead of
a list of warnings and returns diagnostics as maps instead of tuples</p></li><li><p><code class="inline">:max_concurrency</code> - the maximum number of files to compile in parallel.
Setting this option to 1 will compile files sequentially.
Defaults to the number of schedulers online, or at least 2.</p></li></ul>
  </section>
</section>
<section class="detail" id="compile_to_path/3">

    <span id="compile_to_path/2"></span>

  <div class="detail-header">
    <a href="#compile_to_path/3" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">compile_to_path(files, path, options \\ [])</h1>

        <span class="note">(since 1.6.0)</span>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/kernel/parallel_compiler.ex#L183" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> compile_to_path([<a href="Path.xhtml#t:t/0">Path.t</a>()], <a href="Path.xhtml#t:t/0">Path.t</a>(), <a href="typespecs.xhtml#built-in-types">keyword</a>()) ::
  {:ok, [<a href="typespecs.xhtml#basic-types">atom</a>()], [<a href="#t:warning/0">warning</a>()] | <a href="#t:info/0">info</a>()}
  | {:error, [<a href="#t:error/0">error</a>()] | [<a href="Code.xhtml#t:diagnostic/1">Code.diagnostic</a>(:error)], [<a href="#t:warning/0">warning</a>()] | <a href="#t:info/0">info</a>()}</pre>

      </div>

<p>Compiles the given files and writes resulting BEAM files into path.</p><p>See <a href="#compile/2"><code class="inline">compile/2</code></a> for more information.</p>
  </section>
</section>
<section class="detail" id="pmap/2">

  <div class="detail-header">
    <a href="#pmap/2" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">pmap(collection, fun)</h1>

        <span class="note">(since 1.16.0)</span>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/kernel/parallel_compiler.ex#L67" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

<p>Perform parallel compilation of <code class="inline">collection</code> with <code class="inline">fun</code>.</p><p>If you have a file that needs to compile other modules in parallel,
the spawned processes need to be aware of the compiler environment.
This function allows a developer to perform such tasks.</p>
  </section>
</section>
<section class="detail" id="require/2">

    <span id="require/1"></span>

  <div class="detail-header">
    <a href="#require/2" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">require(files, options \\ [])</h1>

        <span class="note">(since 1.6.0)</span>


        <a href="https://github.com/elixir-lang/elixir/blob/v1.18.4/lib/elixir/lib/kernel/parallel_compiler.ex#L220" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> require(
  [<a href="Path.xhtml#t:t/0">Path.t</a>()],
  <a href="typespecs.xhtml#built-in-types">keyword</a>()
) ::
  {:ok, [<a href="typespecs.xhtml#basic-types">atom</a>()], [<a href="#t:warning/0">warning</a>()] | <a href="#t:info/0">info</a>()}
  | {:error, [<a href="#t:error/0">error</a>()] | [<a href="Code.xhtml#t:diagnostic/1">Code.diagnostic</a>(:error)], [<a href="#t:warning/0">warning</a>()] | <a href="#t:info/0">info</a>()}</pre>

      </div>

<p>Requires the given files in parallel.</p><p>Opposite to compile, dependencies are not attempted to be
automatically solved between files.</p><p>It returns <code class="inline">{:ok, modules, warnings}</code> or <code class="inline">{:error, errors, warnings}</code>
by default but we recommend using <code class="inline">return_diagnostics: true</code> so it returns
diagnostics as maps as well as a map of compilation information.
The map has the shape of:</p><pre><code class="makeup elixir" translate="no"><samp class="p" data-group-id="3044651425-1">%{</samp><samp class="w">
  </samp><samp class="ss">runtime_warnings</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="3044651425-2">[</samp><samp class="n">warning</samp><samp class="p" data-group-id="3044651425-2">]</samp><samp class="p">,</samp><samp class="w">
  </samp><samp class="ss">compile_warnings</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="3044651425-3">[</samp><samp class="n">warning</samp><samp class="p" data-group-id="3044651425-3">]</samp><samp class="w">
</samp><samp class="p" data-group-id="3044651425-1">}</samp></code></pre><h2 id="require/2-options" class="section-heading"><a href="#require/2-options" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Options</span></h2><ul><li><p><code class="inline">:each_file</code> - for each file compiled, invokes the callback passing the
file</p></li><li><p><code class="inline">:each_module</code> - for each module compiled, invokes the callback passing
the file, module and the module bytecode</p></li><li><p><code class="inline">:max_concurrency</code> - the maximum number of files to compile in parallel.
Setting this option to 1 will compile files sequentially.
Defaults to the number of schedulers online, or at least 2.</p></li></ul>
  </section>
</section>

        </div>
      </section>


  </body>
</html>
