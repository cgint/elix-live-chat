<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"
      xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>Quote and unquote - Elixir v1.18.4</title>
    <meta name="generator" content="ExDoc v0.38.2" />
    <link type="text/css" rel="stylesheet" href="dist/epub-elixir-FNUUKFP7.css" />
    <script src="dist/epub-4WIP524F.js"></script>

  </head>
  <body class="content-inner">

    <h1 id="content">Quote and unquote</h1>
<p>This guide aims to introduce the meta-programming techniques available in Elixir. The ability to represent an Elixir program by its own data structures is at the heart of meta-programming. This chapter starts by exploring those structures and the associated <a href="Kernel.SpecialForms.xhtml#quote/2"><code class="inline">quote/2</code></a> and <a href="Kernel.SpecialForms.xhtml#unquote/1"><code class="inline">unquote/1</code></a> constructs, so we can take a look at macros in the next guide, and finally build our own domain specific language.</p><h2 id="quoting">Quoting</h2><p>The building block of an Elixir program is a tuple with three elements. For example, the function call <code class="inline">sum(1, 2, 3)</code> is represented internally as:</p><pre><code class="makeup elixir" translate="no"><span class="p" data-group-id="2568691103-1">{</span><span class="ss">:sum</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="2568691103-2">[</span><span class="p" data-group-id="2568691103-2">]</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="2568691103-3">[</span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="mi">2</span><span class="p">,</span><span class="w"> </span><span class="mi">3</span><span class="p" data-group-id="2568691103-3">]</span><span class="p" data-group-id="2568691103-1">}</span></code></pre><p>You can get the representation of any expression by using the <a href="Kernel.SpecialForms.xhtml#quote/2"><code class="inline">quote/2</code></a> macro:</p><pre><code class="makeup elixir" translate="no"><span class="gp unselectable">iex&gt; </span><span class="k">quote</span><span class="w"> </span><span class="ss">do</span><span class="p">:</span><span class="w"> </span><span class="n">sum</span><span class="p" data-group-id="7260452540-1">(</span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="mi">2</span><span class="p">,</span><span class="w"> </span><span class="mi">3</span><span class="p" data-group-id="7260452540-1">)</span><span class="w">
</span><span class="p" data-group-id="7260452540-2">{</span><span class="ss">:sum</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="7260452540-3">[</span><span class="p" data-group-id="7260452540-3">]</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="7260452540-4">[</span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="mi">2</span><span class="p">,</span><span class="w"> </span><span class="mi">3</span><span class="p" data-group-id="7260452540-4">]</span><span class="p" data-group-id="7260452540-2">}</span></code></pre><p>The first element is the function name, the second is a keyword list containing metadata, and the third is the arguments list.</p><p>Operators are also represented as such tuples:</p><pre><code class="makeup elixir" translate="no"><span class="gp unselectable">iex&gt; </span><span class="k">quote</span><span class="w"> </span><span class="ss">do</span><span class="p">:</span><span class="w"> </span><span class="mi">1</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="mi">2</span><span class="w">
</span><span class="p" data-group-id="8626067488-1">{</span><span class="ss">:+</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="8626067488-2">[</span><span class="ss">context</span><span class="p">:</span><span class="w"> </span><span class="nc">Elixir</span><span class="p">,</span><span class="w"> </span><span class="ss">import</span><span class="p">:</span><span class="w"> </span><span class="nc">Kernel</span><span class="p" data-group-id="8626067488-2">]</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="8626067488-3">[</span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="mi">2</span><span class="p" data-group-id="8626067488-3">]</span><span class="p" data-group-id="8626067488-1">}</span></code></pre><p>Even a map is represented as a call to <code class="inline">%{}</code>:</p><pre><code class="makeup elixir" translate="no"><span class="gp unselectable">iex&gt; </span><span class="k">quote</span><span class="w"> </span><span class="ss">do</span><span class="p">:</span><span class="w"> </span><span class="p" data-group-id="7227978013-1">%{</span><span class="mi">1</span><span class="w"> </span><span class="p">=&gt;</span><span class="w"> </span><span class="mi">2</span><span class="p" data-group-id="7227978013-1">}</span><span class="w">
</span><span class="p" data-group-id="7227978013-2">{</span><span class="ss">:%{}</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="7227978013-3">[</span><span class="p" data-group-id="7227978013-3">]</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="7227978013-4">[</span><span class="p" data-group-id="7227978013-5">{</span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="mi">2</span><span class="p" data-group-id="7227978013-5">}</span><span class="p" data-group-id="7227978013-4">]</span><span class="p" data-group-id="7227978013-2">}</span></code></pre><p>Variables are represented using such triplets, with the difference that the last element is an atom, instead of a list:</p><pre><code class="makeup elixir" translate="no"><span class="gp unselectable">iex&gt; </span><span class="k">quote</span><span class="w"> </span><span class="ss">do</span><span class="p">:</span><span class="w"> </span><span class="n">x</span><span class="w">
</span><span class="p" data-group-id="2973735652-1">{</span><span class="ss">:x</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="2973735652-2">[</span><span class="p" data-group-id="2973735652-2">]</span><span class="p">,</span><span class="w"> </span><span class="nc">Elixir</span><span class="p" data-group-id="2973735652-1">}</span></code></pre><p>When quoting more complex expressions, we can see that the code is represented in such tuples, which are often nested inside each other in a structure resembling a tree. Many languages would call such representations an <a href="https://en.wikipedia.org/wiki/Abstract_syntax_tree"><em>Abstract Syntax Tree</em></a> (AST). Elixir calls them <em>quoted expressions</em>:</p><pre><code class="makeup elixir" translate="no"><span class="gp unselectable">iex&gt; </span><span class="k">quote</span><span class="w"> </span><span class="ss">do</span><span class="p">:</span><span class="w"> </span><span class="n">sum</span><span class="p" data-group-id="0546614154-1">(</span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="mi">2</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="mi">3</span><span class="p">,</span><span class="w"> </span><span class="mi">4</span><span class="p" data-group-id="0546614154-1">)</span><span class="w">
</span><span class="p" data-group-id="0546614154-2">{</span><span class="ss">:sum</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="0546614154-3">[</span><span class="p" data-group-id="0546614154-3">]</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="0546614154-4">[</span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="0546614154-5">{</span><span class="ss">:+</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="0546614154-6">[</span><span class="ss">context</span><span class="p">:</span><span class="w"> </span><span class="nc">Elixir</span><span class="p">,</span><span class="w"> </span><span class="ss">import</span><span class="p">:</span><span class="w"> </span><span class="nc">Kernel</span><span class="p" data-group-id="0546614154-6">]</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="0546614154-7">[</span><span class="mi">2</span><span class="p">,</span><span class="w"> </span><span class="mi">3</span><span class="p" data-group-id="0546614154-7">]</span><span class="p" data-group-id="0546614154-5">}</span><span class="p">,</span><span class="w"> </span><span class="mi">4</span><span class="p" data-group-id="0546614154-4">]</span><span class="p" data-group-id="0546614154-2">}</span></code></pre><p>Sometimes, when working with quoted expressions, it may be useful to get the textual code representation back. This can be done with <a href="Macro.xhtml#to_string/1"><code class="inline">Macro.to_string/1</code></a>:</p><pre><code class="makeup elixir" translate="no"><span class="gp unselectable">iex&gt; </span><span class="nc">Macro</span><span class="o">.</span><span class="n">to_string</span><span class="p" data-group-id="5760974517-1">(</span><span class="k">quote</span><span class="w"> </span><span class="ss">do</span><span class="p">:</span><span class="w"> </span><span class="n">sum</span><span class="p" data-group-id="5760974517-2">(</span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="mi">2</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="mi">3</span><span class="p">,</span><span class="w"> </span><span class="mi">4</span><span class="p" data-group-id="5760974517-2">)</span><span class="p" data-group-id="5760974517-1">)</span><span class="w">
</span><span class="s">&quot;sum(1, 2 + 3, 4)&quot;</span></code></pre><p>In general, the tuples above are structured according to the following format:</p><pre><code class="makeup elixir" translate="no"><span class="p" data-group-id="1297323319-1">{</span><span class="n">atom</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">tuple</span><span class="p">,</span><span class="w"> </span><span class="n">list</span><span class="p">,</span><span class="w"> </span><span class="n">list</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">atom</span><span class="p" data-group-id="1297323319-1">}</span></code></pre><ul><li>The first element is an atom or another tuple in the same representation;</li><li>The second element is a keyword list containing metadata, like numbers and contexts;</li><li>The third element is either a list of arguments for the function call or an atom. When this element is an atom, it means the tuple represents a variable.</li></ul><p>Besides the tuple defined above, there are five Elixir literals that, when quoted, return themselves (and not a tuple). They are:</p><pre><code class="makeup elixir" translate="no"><span class="ss">:sum</span><span class="w">         </span><span class="c1">#=&gt; Atoms</span><span class="w">
</span><span class="mf">1.0</span><span class="w">          </span><span class="c1">#=&gt; Numbers</span><span class="w">
</span><span class="p" data-group-id="9727224221-1">[</span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="mi">2</span><span class="p" data-group-id="9727224221-1">]</span><span class="w">       </span><span class="c1">#=&gt; Lists</span><span class="w">
</span><span class="s">&quot;strings&quot;</span><span class="w">    </span><span class="c1">#=&gt; Strings</span><span class="w">
</span><span class="p" data-group-id="9727224221-2">{</span><span class="n">key</span><span class="p">,</span><span class="w"> </span><span class="n">value</span><span class="p" data-group-id="9727224221-2">}</span><span class="w"> </span><span class="c1">#=&gt; Tuples with two elements</span></code></pre><p>Most Elixir code has a straight-forward translation to its underlying quoted expression. We recommend you try out different code samples and see what the results are. For example, what does <code class="inline">String.upcase(&quot;foo&quot;)</code> expand to? We have also learned that <code class="inline">if(true, do: :this, else: :that)</code> is the same as <code class="inline">if true do :this else :that end</code>. How does this affirmation hold with quoted expressions?</p><h2 id="unquoting">Unquoting</h2><p>Quoting is about retrieving the inner representation of some particular chunk of code. However, sometimes it may be necessary to inject some other particular chunk of code inside the representation we want to retrieve.</p><p>For example, imagine you have a variable called <code class="inline">number</code> which contains the number you want to inject inside a quoted expression.</p><pre><code class="makeup elixir" translate="no"><span class="gp unselectable">iex&gt; </span><span class="n">number</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">13</span><span class="w">
</span><span class="gp unselectable">iex&gt; </span><span class="nc">Macro</span><span class="o">.</span><span class="n">to_string</span><span class="p" data-group-id="4997099697-1">(</span><span class="k">quote</span><span class="w"> </span><span class="ss">do</span><span class="p">:</span><span class="w"> </span><span class="mi">11</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">number</span><span class="p" data-group-id="4997099697-1">)</span><span class="w">
</span><span class="s">&quot;11 + number&quot;</span></code></pre><p>That's not what we wanted, since the value of the <code class="inline">number</code> variable has not been injected and <code class="inline">number</code> has been quoted in the expression. In order to inject the <em>value</em> of the <code class="inline">number</code> variable, <a href="Kernel.SpecialForms.xhtml#unquote/1"><code class="inline">unquote/1</code></a> has to be used inside the quoted representation:</p><pre><code class="makeup elixir" translate="no"><span class="gp unselectable">iex&gt; </span><span class="n">number</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">13</span><span class="w">
</span><span class="gp unselectable">iex&gt; </span><span class="nc">Macro</span><span class="o">.</span><span class="n">to_string</span><span class="p" data-group-id="2241573254-1">(</span><span class="k">quote</span><span class="w"> </span><span class="ss">do</span><span class="p">:</span><span class="w"> </span><span class="mi">11</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="k">unquote</span><span class="p" data-group-id="2241573254-2">(</span><span class="n">number</span><span class="p" data-group-id="2241573254-2">)</span><span class="p" data-group-id="2241573254-1">)</span><span class="w">
</span><span class="s">&quot;11 + 13&quot;</span></code></pre><p><a href="Kernel.SpecialForms.xhtml#unquote/1"><code class="inline">unquote/1</code></a> can even be used to inject function names:</p><pre><code class="makeup elixir" translate="no"><span class="gp unselectable">iex&gt; </span><span class="n">fun</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="ss">:hello</span><span class="w">
</span><span class="gp unselectable">iex&gt; </span><span class="nc">Macro</span><span class="o">.</span><span class="n">to_string</span><span class="p" data-group-id="5556369324-1">(</span><span class="k">quote</span><span class="w"> </span><span class="ss">do</span><span class="p">:</span><span class="w"> </span><span class="k">unquote</span><span class="p" data-group-id="5556369324-2">(</span><span class="n">fun</span><span class="p" data-group-id="5556369324-2">)</span><span class="p" data-group-id="5556369324-3">(</span><span class="ss">:world</span><span class="p" data-group-id="5556369324-3">)</span><span class="p" data-group-id="5556369324-1">)</span><span class="w">
</span><span class="s">&quot;hello(:world)&quot;</span></code></pre><p>In some cases, it may be necessary to inject many values inside a list. For example, imagine you have a list containing <code class="inline">[1, 2, 6]</code>, and we want to inject <code class="inline">[3, 4, 5]</code> into it. Using <a href="Kernel.SpecialForms.xhtml#unquote/1"><code class="inline">unquote/1</code></a> won't yield the desired result:</p><pre><code class="makeup elixir" translate="no"><span class="gp unselectable">iex&gt; </span><span class="n">inner</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p" data-group-id="2743868750-1">[</span><span class="mi">3</span><span class="p">,</span><span class="w"> </span><span class="mi">4</span><span class="p">,</span><span class="w"> </span><span class="mi">5</span><span class="p" data-group-id="2743868750-1">]</span><span class="w">
</span><span class="gp unselectable">iex&gt; </span><span class="nc">Macro</span><span class="o">.</span><span class="n">to_string</span><span class="p" data-group-id="2743868750-2">(</span><span class="k">quote</span><span class="w"> </span><span class="ss">do</span><span class="p">:</span><span class="w"> </span><span class="p" data-group-id="2743868750-3">[</span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="mi">2</span><span class="p">,</span><span class="w"> </span><span class="k">unquote</span><span class="p" data-group-id="2743868750-4">(</span><span class="n">inner</span><span class="p" data-group-id="2743868750-4">)</span><span class="p">,</span><span class="w"> </span><span class="mi">6</span><span class="p" data-group-id="2743868750-3">]</span><span class="p" data-group-id="2743868750-2">)</span><span class="w">
</span><span class="s">&quot;[1, 2, [3, 4, 5], 6]&quot;</span></code></pre><p>That's when <a href="Kernel.SpecialForms.xhtml#unquote_splicing/1"><code class="inline">unquote_splicing/1</code></a> comes in handy:</p><pre><code class="makeup elixir" translate="no"><span class="gp unselectable">iex&gt; </span><span class="n">inner</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p" data-group-id="7835726680-1">[</span><span class="mi">3</span><span class="p">,</span><span class="w"> </span><span class="mi">4</span><span class="p">,</span><span class="w"> </span><span class="mi">5</span><span class="p" data-group-id="7835726680-1">]</span><span class="w">
</span><span class="gp unselectable">iex&gt; </span><span class="nc">Macro</span><span class="o">.</span><span class="n">to_string</span><span class="p" data-group-id="7835726680-2">(</span><span class="k">quote</span><span class="w"> </span><span class="ss">do</span><span class="p">:</span><span class="w"> </span><span class="p" data-group-id="7835726680-3">[</span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="mi">2</span><span class="p">,</span><span class="w"> </span><span class="k">unquote_splicing</span><span class="p" data-group-id="7835726680-4">(</span><span class="n">inner</span><span class="p" data-group-id="7835726680-4">)</span><span class="p">,</span><span class="w"> </span><span class="mi">6</span><span class="p" data-group-id="7835726680-3">]</span><span class="p" data-group-id="7835726680-2">)</span><span class="w">
</span><span class="s">&quot;[1, 2, 3, 4, 5, 6]&quot;</span></code></pre><p>Unquoting is very useful when working with macros. When writing macros, developers are able to receive code chunks and inject them inside other code chunks, which can be used to transform code or write code that generates code during compilation.</p><h2 id="escaping">Escaping</h2><p>As we saw at the beginning of this chapter, only some values are valid quoted expressions in Elixir. For example, a map is not a valid quoted expression. Neither is a tuple with four elements. However, such values <em>can</em> be expressed as a quoted expression:</p><pre><code class="makeup elixir" translate="no"><span class="gp unselectable">iex&gt; </span><span class="k">quote</span><span class="w"> </span><span class="ss">do</span><span class="p">:</span><span class="w"> </span><span class="p" data-group-id="0083943122-1">%{</span><span class="mi">1</span><span class="w"> </span><span class="p">=&gt;</span><span class="w"> </span><span class="mi">2</span><span class="p" data-group-id="0083943122-1">}</span><span class="w">
</span><span class="p" data-group-id="0083943122-2">{</span><span class="ss">:%{}</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="0083943122-3">[</span><span class="p" data-group-id="0083943122-3">]</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="0083943122-4">[</span><span class="p" data-group-id="0083943122-5">{</span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="mi">2</span><span class="p" data-group-id="0083943122-5">}</span><span class="p" data-group-id="0083943122-4">]</span><span class="p" data-group-id="0083943122-2">}</span></code></pre><p>In some cases, you may need to inject such <em>values</em> into <em>quoted expressions</em>. To do that, we need to first escape those values into quoted expressions with the help of <a href="Macro.xhtml#escape/1"><code class="inline">Macro.escape/1</code></a>:</p><pre><code class="makeup elixir" translate="no"><span class="gp unselectable">iex&gt; </span><span class="n">map</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p" data-group-id="6457777667-1">%{</span><span class="ss">hello</span><span class="p">:</span><span class="w"> </span><span class="ss">:world</span><span class="p" data-group-id="6457777667-1">}</span><span class="w">
</span><span class="gp unselectable">iex&gt; </span><span class="nc">Macro</span><span class="o">.</span><span class="n">escape</span><span class="p" data-group-id="6457777667-2">(</span><span class="n">map</span><span class="p" data-group-id="6457777667-2">)</span><span class="w">
</span><span class="p" data-group-id="6457777667-3">{</span><span class="ss">:%{}</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="6457777667-4">[</span><span class="p" data-group-id="6457777667-4">]</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="6457777667-5">[</span><span class="ss">hello</span><span class="p">:</span><span class="w"> </span><span class="ss">:world</span><span class="p" data-group-id="6457777667-5">]</span><span class="p" data-group-id="6457777667-3">}</span></code></pre><p>Macros receive quoted expressions and must return quoted expressions. However, sometimes during the execution of a macro, you may need to work with values and making a distinction between values and quoted expressions will be required.</p><p>In other words, it is important to make a distinction between a regular Elixir value (like a list, a map, a process, a reference, and so on) and a quoted expression. Some values, such as integers, atoms, and strings, have a quoted expression equal to the value itself. Other values, like maps, need to be explicitly converted. Finally, values like functions and references cannot be converted to a quoted expression at all.</p><p>When working with macros and code that generates code, check out the documentation for the <a href="Macro.xhtml"><code class="inline">Macro</code></a> module, which contains many functions to work with Elixir's AST.</p><p>In this introduction, we have laid the groundwork to finally write our first macro. You can check that out in the <a href="macros.xhtml">next guide</a>.</p>

  </body>
</html>
