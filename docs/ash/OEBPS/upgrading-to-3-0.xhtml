<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"
      xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>Upgrade - ash v3.5.33</title>
    <meta name="generator" content="ExDoc v0.38.2" />
    <link type="text/css" rel="stylesheet" href="dist/epub-elixir-FNUUKFP7.css" />
    <script src="dist/epub-4WIP524F.js"></script>

  </head>
  <body class="content-inner">

    <h1 id="content">Upgrade</h1>
<h2 id="other-packages">Other Packages</h2><p>Other packages have had a major version bump in addition to Ash core. While <em>all packages</em> have been changed to refer to <code class="inline">domain</code> instead of <code class="inline">api</code>, they did not receive a major version bump because there were no special breaking changes to account for when using that package. You will also need to factor in the following upgrade guides, if you use those packages.</p><ul><li><a href="https://hexdocs.pm/ash_postgres/upgrading-to-2-0.html">AshPostgres</a></li><li><a href="https://hexdocs.pm/ash_json_api/upgrade.html">AshJsonApi</a></li><li><a href="https://hexdocs.pm/ash_graphql/upgrade.html">AshGraphql</a></li></ul><h2 id="upgrading-to-3-0">Upgrading to 3.0</h2><p>This section contains each breaking change, and the steps required to address it in your application</p><h3 id="dependency-changes">Dependency Changes</h3><h4>Ash.Flow</h4><p>If you use <code class="inline">Ash.Flow</code>, include <code class="inline">{:ash_flow, &quot;~&gt; 0.1.0&quot;}</code> in your application.</p><h4>Picosat Elixir</h4><p>In 2.0, Ash had a dependency on <code class="inline">picosat_elixir</code>. In 3.0, this is an optional dependency, to help folks handle certain compatibility issues. To upgrade, add <code class="inline">{:picosat_elixir, &quot;~&gt; 0.2&quot;}</code> to your <code class="inline">mix.exs</code>.</p><h3 id="ash-api-is-now-ash-domain">Ash.Api is now Ash.Domain</h3><p>The previous name was often confusing as this is an overloaded term for many. To that end, <code class="inline">Ash.Api</code> has been renamed to <a href="Ash.Domain.xhtml"><code class="inline">Ash.Domain</code></a>, which better fits our usage and concepts.</p><h4>What you'll need to change</h4><p>To make this change you will need to do two things:</p><ol><li>replace <code class="inline">Ash.Api</code> with <a href="Ash.Domain.xhtml"><code class="inline">Ash.Domain</code></a> in your application</li><li>replace places where an <code class="inline">:api</code> option is passed to a function with the <code class="inline">:domain</code> option. For example, <code class="inline">AshPhoenix.Form.for_create(..., api: MyApp.SomeApi)</code> should now be <code class="inline">AshPhoenix.Form.for_create(..., domain: MyApp.SomeDomain)</code></li><li>Update your application config to define <code class="inline">ash_domains</code> instead of <code class="inline">ash_apis</code>, eg. <code class="inline">config :my_app, ash_domains: [MyApp.MyDomain]</code></li></ol><h3 id="dsl-changes">DSL Changes</h3><ul><li><p><code class="inline">code_interface.define_for</code> is now <code class="inline">code_interface.domain</code>. Additionally, it is set automatically if the <code class="inline">domain</code> option is specified on <code class="inline">use Ash.Resource</code>.</p></li><li><p><code class="inline">domain.execution.timeout</code> used to default to 30 seconds, but now it defaults to <code class="inline">:infinity</code>. This is because a timeout requires copying memory across process boundaries, and is an unnecessary expense a <em>vast</em> majority of the time. We recommend putting timeouts on specific actions that may need them.</p></li><li><p><code class="inline">actions.create.reject</code>, <code class="inline">actions.update.reject</code> and <code class="inline">actions.destroy.reject</code> have been removed. Blacklisting inputs makes it too easy to make mistakes. Instead, specify an explicit <code class="inline">accept</code> list.</p></li><li><p><code class="inline">relationships.belongs_to.attribute_writable?</code> no longer makes the underlying attribute both public and writable. It defaults to the value of <code class="inline">writable?</code> on the relationship (which itself defaults to <code class="inline">true</code>), and only controls the generated attributes <code class="inline">writable? true</code> property. So now, by default, it will be <code class="inline">true</code>, which is safe when coupled with changes to the <code class="inline">default_accept</code>, discussed below. Generally, this means you should be safe to remove any occurrences of <code class="inline">attribute_writable? true</code>.</p></li><li><p><code class="inline">relationships.belongs_to.attribute_public?</code> has been added, which controls the underlying attribute's <code class="inline">public?</code> value. This, similar to <code class="inline">attribute_writable?</code> defaults to the <code class="inline">public?</code> attribute of the relationship.</p></li><li><p><code class="inline">resource.simple_notifiers</code> has been removed, in favor of specifying non-DSL notifiers in the <code class="inline">simple_notifiers</code> option to <code class="inline">use Ash.Resource</code>.</p></li><li><p><code class="inline">resource.actions.read.filter</code> can now be specified multiple times. Multiple filters will be combined with <code class="inline">and</code>.</p></li></ul><h3 id="ash-registry-has-been-removed"><code class="inline">Ash.Registry</code> has been removed</h3><p><code class="inline">Ash.Registry</code> is no longer needed. Place each resource in the domain instead.</p><pre><code class="makeup elixir" translate="no"><span class="n">resources</span><span class="w"> </span><span class="k" data-group-id="0798580413-1">do</span><span class="w">
  </span><span class="n">resource</span><span class="w"> </span><span class="nc">Resource1</span><span class="w">
  </span><span class="n">resource</span><span class="w"> </span><span class="nc">Resource2</span><span class="w">
</span><span class="k" data-group-id="0798580413-1">end</span></code></pre><h3 id="expression-changes">Expression changes</h3><p>When calling a calculation with arguments, this is done via passing a keyword list to the calculation, for example: <code class="inline">full_name(separator: &quot;&quot;)</code>. In 2.0, keyword lists were not evaluated as part of the expression in the same way as other values, meaning two things:</p><ol><li><p>You did not have to pin usage of template functions, i.e <code class="inline">full_name(separator: arg(:separator))</code>. Now, you will need to do so: <code class="inline">full_name(separator: ^arg(:separator))</code></p></li><li><p>You had to use <code class="inline">expr</code> to pass an expression to a calculation argument (this only works if <code class="inline">allow_expr? true</code> is configured on the calculation argument). For example: <code class="inline">full_name(separator: expr(sep_1 &lt;&gt; sep_2))</code> would now be <code class="inline">full_name(separator: sep_1 &lt;&gt; sep_2)</code></p></li></ol><p>If you do not have any expression calculations that accept arguments, you likely need to do nothing. To make these changes, you will need to look at each place you build an expression that you may be calling a calculation w/ arguments, i.e <code class="inline">Ash.Query.filter</code>, and the <code class="inline">expression</code> callback in <code class="inline">Ash.Calculation</code>, and see if they must be modified as described above.</p><h3 id="module-function-changes">Module/function changes</h3><h4>Ash.Policy.FilterCheck and Ash.Policy.FilterCheckWithContext are combined</h4><p><a href="Ash.Policy.FilterCheck.xhtml"><code class="inline">Ash.Policy.FilterCheck</code></a> and <code class="inline">Ash.Policy.FilterCheckWithContext</code> have been combined into <a href="Ash.Policy.FilterCheck.xhtml"><code class="inline">Ash.Policy.FilterCheck</code></a>. If you have any usages of <code class="inline">FilterCheckWithContext</code>, you'll need to change that to <code class="inline">FilterCheck</code>. If you have usages of <code class="inline">FilterCheck</code>, you will need to add the <code class="inline">context</code> arguments to the callbacks. Compiler warnings will show you what callbacks mismatch.</p><h4>Ash.Filter</h4><p><code class="inline">Ash.Filter.parse/5</code> is now <a href="Ash.Filter.xhtml#parse/3"><code class="inline">Ash.Filter.parse/3</code></a>. <code class="inline">Ash.Filter.parse_input/5</code> is now <a href="Ash.Filter.xhtml#parse_input/2"><code class="inline">Ash.Filter.parse_input/2</code></a> The third and fourth optional arguments are unnecessary and were previously ignored, and the fifth argument is not necessary for <code class="inline">parse_input</code>.</p><p><a href="Ash.Filter.xhtml#used_aggregates/3"><code class="inline">Ash.Filter.used_aggregates/3</code></a> no longer accepts <code class="inline">:all</code> as a relationship path, instead using <code class="inline">:*</code>. Its very unlikely that this is used in your application.</p><h4>Ash.Filter.TemplateHelpers</h4><p>Tools for templating expressions were previously in <code class="inline">Ash.Filter.TemplateHelpers</code>. This often led to confusion because it was a hard to remember module name, and didn't really make sense to be separate from the rest of our utilities. Now, all the functions/macros you need for expressions are in <a href="Ash.Expr.xhtml"><code class="inline">Ash.Expr</code></a>. This means that in any given file where you want to work with expressions, you only need to do <code class="inline">import Ash.Expr</code>. Additionally, this <code class="inline">import Ash.Expr</code> has been added to changes, preparations, validations and calculations automatically.</p><h4>Ash.CiString</h4><ul><li><code class="inline">Ash.CiString.new(nil)</code> now returns <code class="inline">nil</code> instead of <code class="inline">%Ash.CiString{value: nil}</code></li></ul><h4>Ash.Resource.Validation</h4><p><code class="inline">validate/2</code> is now <code class="inline">validate/3</code>, with the third argument being the context of the validation.</p><h4>Ash.Query.Calculation</h4><p>The function signature of <code class="inline">Ash.Query.Calculation.new</code> has been changed. We use an options list over optional arguments, and now require constraints to be provided. You will need to adjust your calls to this function.</p><h4>Ash.Calculation</h4><p>This module has been renamed to <a href="Ash.Resource.Calculation.xhtml"><code class="inline">Ash.Resource.Calculation</code></a>. You will need to rename your references to it.</p><h4>Ash.Query</h4><p>Ash.Query.to_query has been removed. Use <code class="inline">Ash.Query.new</code> instead.</p><p>Ash.Query.expr has been removed. Use <code class="inline">Ash.Expr.expr</code> instead.</p><h4>Aggregates</h4><p><code class="inline">first</code> and <code class="inline">list</code> aggregates have a new option called <code class="inline">include_nil?</code>, which <em>defaults to false</em>. You may need to add <code class="inline">include_nil?: true</code> to your resource aggregates if you wish to retain the old behavior.</p><h5>New format for sorting on calculations with arguments</h5><p>The format for sorting on calculations that take input has been swapped. Previously, you would use <code class="inline">sort(calculation: {:desc, %{arg: :value}})</code>, but for the sake of consistency, you now use <code class="inline">sort(calculation: {%{arg: :value}, :desc})</code>.</p><h4>Ash.Changeset</h4><p><code class="inline">Ash.Changeset.new/2</code> has been removed. <a href="Ash.Changeset.xhtml#new/1"><code class="inline">Ash.Changeset.new/1</code></a> is still available for creating a new changeset, but attributes and arguments should, with few exceptions, be passed to the relevant <code class="inline">Ash.Changeset.for_&lt;action_type&gt;</code> functions, <em>not</em> to <code class="inline">Ash.Changeset.new/2</code>. Removing the second argument helps clarify the purpose of <a href="Ash.Changeset.xhtml#new/1"><code class="inline">Ash.Changeset.new/1</code></a>.</p><p><a href="Ash.Changeset.xhtml#after_transaction/2"><code class="inline">Ash.Changeset.after_transaction/2</code></a> can no longer be called from within other lifecycle hooks. We need to know whether or not an after action hook, before we start processing any hooks.</p><p><a href="Ash.Changeset.xhtml#manage_relationship/4"><code class="inline">Ash.Changeset.manage_relationship/4</code></a> no longer uses <code class="inline">:all</code> to signal that all changes will be sent to the join relationship. Instead, use <code class="inline">:*</code>.</p><p><code class="inline">Ash.Changeset.filter</code> now accepts expressions. The value of the filter is no longer a simple equality map, but rather a regular Ash expression. We add to it on successive calls to <code class="inline">Ash.Changeset.filter</code>. Additionally, this value is stored in <code class="inline">changeset.filter</code> instead of <code class="inline">changeset.filters</code>.</p><h4>Ash.Policy.FilterCheckWithContext</h4><p><a href="Ash.Policy.FilterCheck.xhtml"><code class="inline">Ash.Policy.FilterCheck</code></a> and <code class="inline">Ash.Policy.FilterCheckWithContext</code> have been combined. The name is <a href="Ash.Policy.FilterCheck.xhtml"><code class="inline">Ash.Policy.FilterCheck</code></a>, but the callbacks take the extra arguments present in <code class="inline">Ash.Policy.FilterCheckWithContext</code>.</p><h4>Builtin Changes &amp; Preparations</h4><p>The functions provided to <code class="inline">after_action/1</code>, <code class="inline">after_transaction/1</code>, <code class="inline">before_transaction/1</code> and <code class="inline">before_action/1</code> must all now take an additional argument, which is the change context.</p><p>For example,</p><pre><code class="makeup elixir" translate="no"><span class="n">change</span><span class="w"> </span><span class="n">after_action</span><span class="p" data-group-id="9219618601-1">(</span><span class="k" data-group-id="9219618601-2">fn</span><span class="w"> </span><span class="n">changeset</span><span class="p">,</span><span class="w"> </span><span class="n">result</span><span class="w"> </span><span class="o">-&gt;</span><span class="w"> </span><span class="n">...</span><span class="w"> </span><span class="k" data-group-id="9219618601-2">end</span><span class="p" data-group-id="9219618601-1">)</span></code></pre><p>is now</p><pre><code class="makeup elixir" translate="no"><span class="n">change</span><span class="w"> </span><span class="n">after_action</span><span class="p" data-group-id="7575734030-1">(</span><span class="k" data-group-id="7575734030-2">fn</span><span class="w"> </span><span class="n">changeset</span><span class="p">,</span><span class="w"> </span><span class="n">result</span><span class="p">,</span><span class="w"> </span><span class="n">context</span><span class="w"> </span><span class="o">-&gt;</span><span class="w"> </span><span class="n">...</span><span class="w"> </span><span class="k" data-group-id="7575734030-2">end</span><span class="p" data-group-id="7575734030-1">)</span></code></pre><p>This is true for both preparations and changes.</p><h4>Expressions</h4><p>Previously, in expressions, you could say <code class="inline">expr(ref(^some_atom))</code>. This is a tool for building dynamic references, but it was an exception to the standard pattern of prefixing &quot;external&quot; things in an expression, i.e <code class="inline">arg</code> with <code class="inline">^</code>. Now, you must do the same with <code class="inline">ref/1</code> and <code class="inline">ref/2</code>. You will need to search for <code class="inline">ref(</code> in your application, and ensure that if it is inside of an expression you have prefixed it with <code class="inline">^</code>. The original example becomes: <code class="inline">expr(^ref(some_atom))</code>.</p><h4>Exception changes</h4><h5>Ash exceptions have been simplified and are now backed by <a href="https://hexdocs.pm/splode/0.2.9/Splode.html"><code class="inline">Splode</code></a></h5><p>Usage of <code class="inline">def_ash_error/2</code> will show you what to change in its warnings.</p><p>Instead of combining <code class="inline">def_ash_error</code> with <code class="inline">defimpl Ash.ErrorKind</code>, you create a custom error like so:</p><pre><code class="makeup elixir" translate="no"><span class="kd">defmodule</span><span class="w"> </span><span class="nc">MyCustomError</span><span class="w"> </span><span class="k" data-group-id="9904646414-1">do</span><span class="w">
  </span><span class="kn">use</span><span class="w"> </span><span class="nc">Splode.Error</span><span class="p">,</span><span class="w"> </span><span class="ss">class</span><span class="p">:</span><span class="w"> </span><span class="ss">:invalid</span><span class="p">,</span><span class="w"> </span><span class="ss">fields</span><span class="p">:</span><span class="w"> </span><span class="p" data-group-id="9904646414-2">[</span><span class="ss">:foo</span><span class="p">,</span><span class="w"> </span><span class="ss">:bar</span><span class="p" data-group-id="9904646414-2">]</span><span class="w">

  </span><span class="kd">def</span><span class="w"> </span><span class="nf">message</span><span class="p" data-group-id="9904646414-3">(</span><span class="n">error</span><span class="p" data-group-id="9904646414-3">)</span><span class="w"> </span><span class="k" data-group-id="9904646414-4">do</span><span class="w">
    </span><span class="s">&quot;Message: </span><span class="si" data-group-id="9904646414-5">#{</span><span class="n">error</span><span class="o">.</span><span class="n">foo</span><span class="si" data-group-id="9904646414-5">}</span><span class="s"> - </span><span class="si" data-group-id="9904646414-6">#{</span><span class="n">error</span><span class="o">.</span><span class="n">bar</span><span class="si" data-group-id="9904646414-6">}</span><span class="s">&quot;</span><span class="w">
  </span><span class="k" data-group-id="9904646414-4">end</span><span class="w">
</span><span class="k" data-group-id="9904646414-1">end</span></code></pre><h5>Ash exception changes</h5><p>When sorting or filtering, if a field is not found, an <code class="inline">Ash.Query.Error.NoSuchField</code> is used, where it would have previously been an <code class="inline">Ash.Query.Error.NoSuchAttribute</code>. This was wrong as sometimes the field reference was not an attribute. Places that would previously return <code class="inline">Ash.Query.Error.NoSuchAttributeOrRelationship</code> now return <code class="inline">Ash.Query.Error.NoSuchField</code> as well.</p><p>Additionally, the following exceptions have had keys remapped:</p><p><code class="inline">NoSuchAttribute</code>: <code class="inline">name</code> -&gt; <code class="inline">attribute</code>
<code class="inline">NoSuchRelationship</code>: <code class="inline">name</code> -&gt; <code class="inline">relationship</code>
<code class="inline">NoSuchFunction</code>: <code class="inline">name</code> -&gt; <code class="inline">function</code>
<code class="inline">NoSuchOperator</code>: <code class="inline">name</code> -&gt; <code class="inline">operator</code></p><hr class="thin"/><h2 id="significant-changes">Significant Changes</h2><h3 id="ash-set_-functions-have-been-removed"><code class="inline">Ash.set_*</code> functions have been removed</h3><p>In 2.0, a set of features allowed storing the actor, tenant and context in the process dictionary. There were fundamental issues with this pattern that manifested in subtle bugs. We suggest making this change <em>before</em> you upgrade, as this change can be made and verified without upgrading to 3.0.</p><h4>What you'll need to change</h4><p>You need to manually thread through your tenant, actor, and context values wherever you were using <code class="inline">Ash.set_*</code>. For example:</p><pre><code class="makeup elixir" translate="no"><span class="nc">Ash</span><span class="o">.</span><span class="n">set_actor</span><span class="p" data-group-id="4166350838-1">(</span><span class="n">current_user</span><span class="p" data-group-id="4166350838-1">)</span><span class="w">
</span><span class="nc">Ash</span><span class="o">.</span><span class="n">set_tenant</span><span class="p" data-group-id="4166350838-2">(</span><span class="n">current_tenant</span><span class="p" data-group-id="4166350838-2">)</span><span class="w">

</span><span class="nc">Ash.Changeset</span><span class="o">.</span><span class="n">for_create!</span><span class="p" data-group-id="4166350838-3">(</span><span class="o">..</span><span class="p" data-group-id="4166350838-3">)</span><span class="w">
</span><span class="nc">Ash.Query</span><span class="o">.</span><span class="n">for_read</span><span class="p" data-group-id="4166350838-4">(</span><span class="o">..</span><span class="p" data-group-id="4166350838-4">)</span></code></pre><p>would become</p><pre><code class="makeup elixir" translate="no"><span class="nc">Ash.Changeset</span><span class="o">.</span><span class="n">for_create!</span><span class="p" data-group-id="8251050503-1">(</span><span class="o">..</span><span class="p">,</span><span class="w"> </span><span class="ss">tenant</span><span class="p">:</span><span class="w"> </span><span class="n">current_tenant</span><span class="p">,</span><span class="w"> </span><span class="ss">actor</span><span class="p">:</span><span class="w"> </span><span class="n">current_user</span><span class="p" data-group-id="8251050503-1">)</span><span class="w">
</span><span class="nc">Ash.Query</span><span class="o">.</span><span class="n">for_read</span><span class="p" data-group-id="8251050503-2">(</span><span class="o">..</span><span class="p">,</span><span class="w"> </span><span class="ss">tenant</span><span class="p">:</span><span class="w"> </span><span class="n">current_tenant</span><span class="p">,</span><span class="w"> </span><span class="ss">actor</span><span class="p">:</span><span class="w"> </span><span class="n">current_user</span><span class="p" data-group-id="8251050503-2">)</span></code></pre><h3 id="the-domain-of-a-resource-must-now-be-known-when-constructing-a-changeset-query-or-action-input">The <code class="inline">Domain</code> of a resource must now be known when constructing a changeset, query or action input</h3><p>In order to honor rules on the <code class="inline">Domain</code> module about authorization and timeouts, we have to know the <code class="inline">Domain</code> when building the changeset.</p><h4>What you'll need to change</h4><h5>Embedded Resources</h5><p>The domain for the calls to embedded resources is gotten from the parent changeset. No need to change them at all. a <code class="inline">domain</code> constraint has been added in case you wish to make a given embedded resource use a specific domain always.</p><p>For example:</p><pre><code class="makeup elixir" translate="no"><span class="n">attribute</span><span class="w"> </span><span class="ss">:bio</span><span class="p">,</span><span class="w"> </span><span class="nc">MyApp.Bio</span><span class="w"> </span><span class="k" data-group-id="2203802728-1">do</span><span class="w">
  </span><span class="n">constraints</span><span class="w"> </span><span class="ss">domain</span><span class="p">:</span><span class="w"> </span><span class="nc">MyApp.SomeDomain</span><span class="w">
</span><span class="k" data-group-id="2203802728-1">end</span></code></pre><h5>Single Domain resources</h5><p>While it is possible for resources to be used with multiple domains, it almost never happens in practice. Any resources that are only used from a single domain only (<em>not</em> including embedded resources) should be modified to have a <code class="inline">domain</code> option specified in their call to <code class="inline">use Ash.Resource</code>. For example:</p><pre><code class="makeup elixir" translate="no"><span class="kn">use</span><span class="w"> </span><span class="nc">Ash.Resource</span><span class="p">,</span><span class="w">
  </span><span class="ss">domain</span><span class="p">:</span><span class="w"> </span><span class="nc">MyApp.MyDomain</span></code></pre><h6>Using <code class="inline">Ash.*</code> to interact with your resources</h6><p>Calling functions on the domain has been deprecated. You must now use the functions defined in the <a href="Ash.xhtml"><code class="inline">Ash</code></a> module to interact with your resources. They are the same as what was previously available in your domain module. For example:</p><pre><code class="makeup elixir" translate="no"><span class="nc">MyDomain1</span><span class="o">.</span><span class="n">create!</span><span class="p" data-group-id="0215641377-1">(</span><span class="n">changeset</span><span class="p" data-group-id="0215641377-1">)</span><span class="w">
</span><span class="nc">MyDomain2</span><span class="o">.</span><span class="n">read!</span><span class="p" data-group-id="0215641377-2">(</span><span class="n">query</span><span class="p" data-group-id="0215641377-2">)</span><span class="w">
</span><span class="nc">MyDomain3</span><span class="o">.</span><span class="n">calculate!</span><span class="p" data-group-id="0215641377-3">(</span><span class="n">...</span><span class="p" data-group-id="0215641377-3">)</span></code></pre><p>can now be written as</p><pre><code class="makeup elixir" translate="no"><span class="nc">Ash</span><span class="o">.</span><span class="n">create!</span><span class="p" data-group-id="0240072491-1">(</span><span class="n">changeset</span><span class="p" data-group-id="0240072491-1">)</span><span class="w">
</span><span class="nc">Ash</span><span class="o">.</span><span class="n">read!</span><span class="p" data-group-id="0240072491-2">(</span><span class="n">query</span><span class="p" data-group-id="0240072491-2">)</span><span class="w">
</span><span class="nc">Ash</span><span class="o">.</span><span class="n">calculate!</span><span class="p" data-group-id="0240072491-3">(</span><span class="n">query</span><span class="p" data-group-id="0240072491-3">)</span></code></pre><p>This makes refactoring resources easier, as you no longer need to change the call site, it remains the same regardless of what Domain a resource is in.</p><h5>Multi Domain resources</h5><p>For these, you will need to include the <code class="inline">domain</code> option when you construct a changeset.</p><p>For example:</p><pre><code class="makeup elixir" translate="no"><span class="nc">MyResource</span><span class="w">
</span><span class="o">|&gt;</span><span class="w"> </span><span class="nc">Ash.Changeset</span><span class="o">.</span><span class="n">for_create</span><span class="p" data-group-id="2568324900-1">(</span><span class="ss">:create</span><span class="p">,</span><span class="w"> </span><span class="n">input</span><span class="p">,</span><span class="w"> </span><span class="ss">domain</span><span class="p">:</span><span class="w"> </span><span class="nc">MyApp.MyDomain</span><span class="p" data-group-id="2568324900-1">)</span></code></pre><hr class="thin"/><h3 id="actions-no-longer-default-to-accepting-all-public-writable-attributes">Actions no longer default to accepting all public writable attributes</h3><p>For more context, see the original discussion: <a href="https://github.com/ash-project/ash/issues/512">https://github.com/ash-project/ash/issues/512</a></p><p>In 2.0, all public, writable attributes were accepted by each action by default. This made it very easy to accidentally expose writing to an attribute in an action where that was not the intent. Additionally, new attributes added were automatically writable across a wide array of actions, which was error prone for the same reason.</p><p>In 2.0, as well as 3.0, there is an option called <code class="inline">default_accept</code>, which modifies all actions that do not have an <code class="inline">accept</code> list. In 2.0, the default value for <code class="inline">default_accept</code> was &quot;all public, writable attributes&quot;. In 3.0, the default value for <code class="inline">default_accept</code> is <code class="inline">[]</code>. This encourages a pattern of explicitly listing inputs to actions, and is safer and less error prone.</p><h4>What you'll need to change</h4><p>For those who want to upgrade, you would use the new <code class="inline">:*</code> option to <code class="inline">default_accept</code> (also usable in an action's <code class="inline">accept</code> option) to accept all public attributes. Go to each resource and, inside the actions block, add:</p><pre><code class="makeup elixir" translate="no"><span class="n">actions</span><span class="w"> </span><span class="k" data-group-id="5619827971-1">do</span><span class="w">
  </span><span class="n">default_accept</span><span class="w"> </span><span class="ss">:*</span><span class="w">
  </span><span class="n">...</span><span class="w">
</span><span class="k" data-group-id="5619827971-1">end</span></code></pre><p>Then mark the attributes and relationships you want to accept as <code class="inline">public?: true</code> (see <a href="#private-true-public-true">this section</a> for more information on this change).</p><p>For those who want to be more explicit, or after your upgrade has complete if you wish to refactor existing resources and actions, the general best path forward is to copy the <code class="inline">default_accept</code> into each action (or put it in a module attribute and reference it) as the <code class="inline">accept</code> option. This way when a new action is added, it does not &quot;inherit&quot; some list of accepted attributes.</p><section role="note" class="admonition info"><h3 id="private-attributes-can-now-be-accepted" class="admonition-title info">:* private attributes can now be accepted</h3><p>In 2.0, accepting a private attribute as a change required adding an argument with the same name, and using <code class="inline">change set_attribute(...)</code>. Now that we require explicit accept lists, you can place private attributes in that list, which will allow them to be written to (but not read back).</p></section><section role="note" class="admonition warning"><h3 id="includes-belongs_to-attributes" class="admonition-title warning">:* includes belongs_to attributes!</h3><p>The change to explicit accepts also included a change that defaults belongs_to attributes to <code class="inline">writable?: true</code> and <code class="inline">public?: false</code>. You may want to add <code class="inline">attribute_writable?: false</code> to your belongs_to relationships if you are adding <code class="inline">default_accept :*</code> and don't currently have <code class="inline">attribute_writable?: true</code> on them currently.</p></section><hr class="thin"/><h3 id="default-actions-create-and-update-can-now-have-an-accept-list">Default actions <code class="inline">:create</code> and <code class="inline">:update</code> can now have an accept list</h3><p>For example:</p><pre><code class="makeup elixir" translate="no"><span class="n">defaults</span><span class="w"> </span><span class="p" data-group-id="3081181837-1">[</span><span class="ss">:read</span><span class="p">,</span><span class="w"> </span><span class="ss">:destroy</span><span class="p">,</span><span class="w"> </span><span class="ss">create</span><span class="p">:</span><span class="w"> </span><span class="ss">:*</span><span class="p">,</span><span class="w"> </span><span class="ss">update</span><span class="p">:</span><span class="w"> </span><span class="ss">:*</span><span class="p" data-group-id="3081181837-1">]</span></code></pre><h3 id="default-read-actions-are-now-paginatable">Default read actions are now paginatable</h3><p>In 2.0, if you have <code class="inline">:read</code> in your default actions list, it would generate an action like this:</p><pre><code class="makeup elixir" translate="no"><span class="n">read</span><span class="w"> </span><span class="ss">:read</span><span class="w"> </span><span class="k" data-group-id="1161800279-1">do</span><span class="w">
  </span><span class="n">primary?</span><span class="w"> </span><span class="no">true</span><span class="w">
</span><span class="k" data-group-id="1161800279-1">end</span></code></pre><p>Now, it generates an action like this:</p><pre><code class="makeup elixir" translate="no"><span class="n">read</span><span class="w"> </span><span class="ss">:read</span><span class="w"> </span><span class="k" data-group-id="7817515174-1">do</span><span class="w">
  </span><span class="n">primary?</span><span class="w"> </span><span class="no">true</span><span class="w">
  </span><span class="n">pagination</span><span class="w"> </span><span class="p" data-group-id="7817515174-2">[</span><span class="ss">keyset?</span><span class="p">:</span><span class="w"> </span><span class="no">true</span><span class="p">,</span><span class="w"> </span><span class="ss">offset?</span><span class="p">:</span><span class="w"> </span><span class="no">true</span><span class="p">,</span><span class="w"> </span><span class="ss">countable</span><span class="p">:</span><span class="w"> </span><span class="no">true</span><span class="p">,</span><span class="w"> </span><span class="ss">required?</span><span class="p">:</span><span class="w"> </span><span class="no">false</span><span class="p" data-group-id="7817515174-2">]</span><span class="w">
</span><span class="k" data-group-id="7817515174-1">end</span></code></pre><hr class="thin"/><h3 id="what-you-will-need-to-change">What you will need to change</h3><p>For most cases, this won't affect you. However, if you are using <code class="inline">AshGraphql</code>, and have any queries connected to a default <code class="inline">:read</code> action, it will default to making those queries paginatable with keyset pagination. To keep the old behavior, you will need to add <code class="inline">paginate_with nil</code> to the query, for example:</p><pre><code class="makeup elixir" translate="no"><span class="n">graphql</span><span class="w"> </span><span class="k" data-group-id="2000023385-1">do</span><span class="w">
  </span><span class="n">queries</span><span class="w"> </span><span class="k" data-group-id="2000023385-2">do</span><span class="w">
    </span><span class="n">list</span><span class="w"> </span><span class="ss">:list_things</span><span class="p">,</span><span class="w"> </span><span class="ss">:read</span><span class="p">,</span><span class="w"> </span><span class="ss">paginate_with</span><span class="p">:</span><span class="w"> </span><span class="no">nil</span><span class="w">
  </span><span class="k" data-group-id="2000023385-2">end</span><span class="w">
</span><span class="k" data-group-id="2000023385-1">end</span></code></pre><hr class="thin"/><h3 id="before-action-and-before-transaction-hooks-order-has-been-reversed">Before action and before transaction hooks order has been reversed</h3><p>In Ash 2.0, <code class="inline">before_action</code> and <code class="inline">before_transaction</code> hooks that were added to a changeset were prepended to the list of hooks by default. These hooks were then run in order. What this meant is that, given an action like the following:</p><pre><code class="makeup elixir" translate="no"><span class="n">create</span><span class="w"> </span><span class="ss">:foo</span><span class="w"> </span><span class="k" data-group-id="8604475753-1">do</span><span class="w">
  </span><span class="n">change</span><span class="w"> </span><span class="n">before_action</span><span class="p" data-group-id="8604475753-2">(</span><span class="k" data-group-id="8604475753-3">fn</span><span class="w"> </span><span class="n">changeset</span><span class="p">,</span><span class="w"> </span><span class="c">_context</span><span class="w"> </span><span class="o">-&gt;</span><span class="w">
    </span><span class="nc">IO</span><span class="o">.</span><span class="n">puts</span><span class="p" data-group-id="8604475753-4">(</span><span class="s">&quot;first&quot;</span><span class="p" data-group-id="8604475753-4">)</span><span class="w">
    </span><span class="n">changeset</span><span class="w">
  </span><span class="k" data-group-id="8604475753-3">end</span><span class="p" data-group-id="8604475753-2">)</span><span class="w">

  </span><span class="n">change</span><span class="w"> </span><span class="n">before_action</span><span class="p" data-group-id="8604475753-5">(</span><span class="k" data-group-id="8604475753-6">fn</span><span class="w"> </span><span class="n">changeset</span><span class="p">,</span><span class="w"> </span><span class="c">_context</span><span class="w"> </span><span class="o">-&gt;</span><span class="w">
    </span><span class="nc">IO</span><span class="o">.</span><span class="n">puts</span><span class="p" data-group-id="8604475753-7">(</span><span class="s">&quot;second&quot;</span><span class="p" data-group-id="8604475753-7">)</span><span class="w">
    </span><span class="n">changeset</span><span class="w">
  </span><span class="k" data-group-id="8604475753-6">end</span><span class="p" data-group-id="8604475753-5">)</span><span class="w">
</span><span class="k" data-group-id="8604475753-1">end</span></code></pre><p>You would see <code class="inline">second</code> printed <em>before</em> <code class="inline">first</code>.</p><h4>What you'll need to change</h4><p>In many cases, this won't matter to you. However, if you have a situation where the order of your before action/transaction hooks matters, you can do one of two things:</p><ol><li>reorder the changes that add those before action/transaction hooks</li><li>use the <code class="inline">:prepend</code> option to <a href="Ash.Changeset.xhtml#before_action/2"><code class="inline">Ash.Changeset.before_action/2</code></a> and <a href="Ash.Changeset.xhtml#before_transaction/2"><code class="inline">Ash.Changeset.before_transaction/2</code></a> to explicitly prepend the hook to the list of hooks</li></ol><hr class="thin"/><h3 id="context-in-changes-preparations-validations-calculations-are-now-structs">Context in changes, preparations, validations, calculations are now structs</h3><p>To help make it clear what keys are available in the context provided to callbacks on these modules, they have been adjusted to provide a <em>struct</em> instead of a <code class="inline">map</code>. This helps avoid potential ambiguity, and
acts as documentation.</p><h4>What you'll need to change</h4><p>If you are using something like <code class="inline">Keyword.new(context)</code> to generate options to pass into an action, change that to <code class="inline">Ash.Context.to_opts(context)</code>.</p><hr class="thin"/><h3 id="calculation-arguments-are-now-in-context-arguments">Calculation arguments are now in <code class="inline">context.arguments</code></h3><p>Per the above change, we have specified the values available in the context of a calculation, with <a href="Ash.Resource.Calculation.Context.xhtml"><code class="inline">Ash.Resource.Calculation.Context</code></a>. In Ash 2.0, context was merged with arguments, which was problematic in various ways. Now, arguments are in <code class="inline">context.arguments</code>.</p><h4>What you'll need to change</h4><p>You will need to update your module-backed calculations to account for this.</p><pre><code class="makeup elixir" translate="no"><span class="kd">def</span><span class="w"> </span><span class="nf">calculate</span><span class="p" data-group-id="2194269354-1">(</span><span class="n">records</span><span class="p">,</span><span class="w"> </span><span class="c">_opts</span><span class="p">,</span><span class="w"> </span><span class="n">context</span><span class="p" data-group-id="2194269354-1">)</span><span class="w"> </span><span class="k" data-group-id="2194269354-2">do</span><span class="w">
  </span><span class="nc">Enum</span><span class="o">.</span><span class="n">map</span><span class="p" data-group-id="2194269354-3">(</span><span class="n">records</span><span class="p">,</span><span class="w"> </span><span class="k" data-group-id="2194269354-4">fn</span><span class="w"> </span><span class="n">record</span><span class="w"> </span><span class="o">-&gt;</span><span class="w">
    </span><span class="n">record</span><span class="o">.</span><span class="n">first_name</span><span class="w"> </span><span class="o">&lt;&gt;</span><span class="w"> </span><span class="n">context</span><span class="o">.</span><span class="n">delimiter</span><span class="w"> </span><span class="o">&lt;&gt;</span><span class="w"> </span><span class="n">record</span><span class="o">.</span><span class="n">last_name</span><span class="w">
  </span><span class="k" data-group-id="2194269354-4">end</span><span class="p" data-group-id="2194269354-3">)</span><span class="w">
</span><span class="k" data-group-id="2194269354-2">end</span></code></pre><p>would need to be adjusted to access arguments in the context:</p><pre><code class="makeup elixir" translate="no"><span class="kd">def</span><span class="w"> </span><span class="nf">calculate</span><span class="p" data-group-id="8620930963-1">(</span><span class="n">records</span><span class="p">,</span><span class="w"> </span><span class="c">_opts</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="8620930963-2">%{</span><span class="ss">arguments</span><span class="p">:</span><span class="w"> </span><span class="n">arguments</span><span class="p" data-group-id="8620930963-2">}</span><span class="p" data-group-id="8620930963-1">)</span><span class="w"> </span><span class="k" data-group-id="8620930963-3">do</span><span class="w">
  </span><span class="nc">Enum</span><span class="o">.</span><span class="n">map</span><span class="p" data-group-id="8620930963-4">(</span><span class="n">records</span><span class="p">,</span><span class="w"> </span><span class="k" data-group-id="8620930963-5">fn</span><span class="w"> </span><span class="n">record</span><span class="w"> </span><span class="o">-&gt;</span><span class="w">
    </span><span class="n">record</span><span class="o">.</span><span class="n">first_name</span><span class="w"> </span><span class="o">&lt;&gt;</span><span class="w"> </span><span class="n">arguments</span><span class="o">.</span><span class="n">delimiter</span><span class="w"> </span><span class="o">&lt;&gt;</span><span class="w"> </span><span class="n">record</span><span class="o">.</span><span class="n">last_name</span><span class="w">
  </span><span class="k" data-group-id="8620930963-5">end</span><span class="p" data-group-id="8620930963-4">)</span><span class="w">
</span><span class="k" data-group-id="8620930963-3">end</span></code></pre><hr class="thin"/><h3 id="private-true-public-true"><code class="inline">private?: true</code> -&gt; <code class="inline">public?: true</code></h3><p>There is no longer a <code class="inline">private?</code> option for attributes, relationships, calculations and aggregates. Instead of attributes defaulting to <code class="inline">private?: false</code>, they now default to <code class="inline">public?: false</code>. It was too easy to add an attribute and not realize that you had exposed it over your api.</p><h4>What you'll need to change</h4><p>If you are using api extensions (i.e <code class="inline">AshGraphql</code> and <code class="inline">AshJsonApi</code>), you will need to go to your resources and &quot;invert&quot; the definitions. i.e <em>remove</em> <code class="inline">private?: true</code> and <em>add</em> <code class="inline">public?: true</code> to <em>every other</em> attribute, <em>relationship</em> and <em>calculation</em>. Don't forget the relationships and calculations!</p><blockquote><h3 id="embedded-resources-too" class="WARNING">Embedded resources too!</h3><p>The above includes embedded resources as well! Don't forget to make sure that all fields on your embedded resources are also marked as <code class="inline">public?: true</code> (if applicable). The goal here is to have a clear visual indicator of what in your application can be shown publicly.</p></blockquote><hr class="thin"/><h3 id="anonymous-calculations-now-operate-on-a-list-just-like-module-calculations">Anonymous calculations now operate on a list, just like module calculations</h3><p>Previously, anonymous function calculations were special cased to operate on a single record. For consistency, these anonymous functions now take the list of records.</p><h4>What you'll need to change</h4><p>Update any anonymous function calculations to take and return a list, for example:</p><pre><code class="makeup elixir" translate="no"><span class="n">calculate</span><span class="w"> </span><span class="ss">:full_name</span><span class="p">,</span><span class="w"> </span><span class="ss">:string</span><span class="p">,</span><span class="w"> </span><span class="k" data-group-id="8350608697-1">fn</span><span class="w"> </span><span class="n">record</span><span class="p">,</span><span class="w"> </span><span class="c">_context</span><span class="w"> </span><span class="o">-&gt;</span><span class="w">
  </span><span class="n">record</span><span class="o">.</span><span class="n">first_name</span><span class="w"> </span><span class="o">&lt;&gt;</span><span class="w"> </span><span class="s">&quot; &quot;</span><span class="w"> </span><span class="o">&lt;&gt;</span><span class="w"> </span><span class="n">record</span><span class="o">.</span><span class="n">last_name</span><span class="w">
</span><span class="k" data-group-id="8350608697-1">end</span></code></pre><p>would become</p><pre><code class="makeup elixir" translate="no"><span class="n">calculate</span><span class="w"> </span><span class="ss">:full_name</span><span class="p">,</span><span class="w"> </span><span class="ss">:string</span><span class="p">,</span><span class="w"> </span><span class="k" data-group-id="3522499428-1">fn</span><span class="w"> </span><span class="n">records</span><span class="p">,</span><span class="w"> </span><span class="c">_context</span><span class="w"> </span><span class="o">-&gt;</span><span class="w">
  </span><span class="c1"># note, you can also return `{:ok, list}` or `{:error, error}`</span><span class="w">
  </span><span class="nc">Enum</span><span class="o">.</span><span class="n">map</span><span class="p" data-group-id="3522499428-2">(</span><span class="n">records</span><span class="p">,</span><span class="w"> </span><span class="k" data-group-id="3522499428-3">fn</span><span class="w"> </span><span class="n">record</span><span class="w"> </span><span class="o">-&gt;</span><span class="w">
    </span><span class="n">record</span><span class="o">.</span><span class="n">first_name</span><span class="w"> </span><span class="o">&lt;&gt;</span><span class="w"> </span><span class="s">&quot; &quot;</span><span class="w"> </span><span class="o">&lt;&gt;</span><span class="w"> </span><span class="n">record</span><span class="o">.</span><span class="n">last_name</span><span class="w">
  </span><span class="k" data-group-id="3522499428-3">end</span><span class="p" data-group-id="3522499428-2">)</span><span class="w">
</span><span class="k" data-group-id="3522499428-1">end</span></code></pre><hr class="thin"/><h3 id="calculation-loads-do-not-select-all-related-fields-by-default">Calculation loads do not select all related fields by default</h3><p>In 2.0 relationship loads from the <code class="inline">load/3</code> callback in a calculation will select <em>all</em> fields of that relationship and make them available to the calculation.</p><p>For example, the following calculation <code class="inline">load/3</code> callback expresses a dependency on <em>all</em> fields of the relationship <code class="inline">:relationship</code>.</p><pre><code class="makeup elixir" translate="no"><span class="kd">def</span><span class="w"> </span><span class="nf">load</span><span class="p" data-group-id="1589711334-1">(</span><span class="bp">_</span><span class="p">,</span><span class="w"> </span><span class="bp">_</span><span class="p">,</span><span class="w"> </span><span class="bp">_</span><span class="p" data-group-id="1589711334-1">)</span><span class="w"> </span><span class="k" data-group-id="1589711334-2">do</span><span class="w">
  </span><span class="p" data-group-id="1589711334-3">[</span><span class="ss">:relationship</span><span class="p" data-group-id="1589711334-3">]</span><span class="w">
</span><span class="k" data-group-id="1589711334-2">end</span></code></pre><h4>What you'll need to change</h4><h5>Refactor</h5><p>In 3.0, relationship dependencies alone will only make the related primary keys available. You now need to select explicit fields that you want to use in your calculation, for example:</p><pre><code class="makeup elixir" translate="no"><span class="kd">def</span><span class="w"> </span><span class="nf">load</span><span class="p" data-group-id="2204454017-1">(</span><span class="bp">_</span><span class="p">,</span><span class="w"> </span><span class="bp">_</span><span class="p">,</span><span class="w"> </span><span class="bp">_</span><span class="p" data-group-id="2204454017-1">)</span><span class="w"> </span><span class="k" data-group-id="2204454017-2">do</span><span class="w">
  </span><span class="p" data-group-id="2204454017-3">[</span><span class="ss">relationship</span><span class="p">:</span><span class="w"> </span><span class="p" data-group-id="2204454017-4">[</span><span class="ss">:field1</span><span class="p">,</span><span class="w"> </span><span class="ss">:field2</span><span class="p" data-group-id="2204454017-4">]</span><span class="p" data-group-id="2204454017-3">]</span><span class="w">
</span><span class="k" data-group-id="2204454017-2">end</span></code></pre><h4>Keep the old behavior</h4><p>Each calculation can still opt into the old behavior by adding the callback <code class="inline">strict_loads/0</code> and returning <code class="inline">false</code>.</p><pre><code class="makeup elixir" translate="no"><span class="kd">def</span><span class="w"> </span><span class="nf">load</span><span class="p" data-group-id="0633428246-1">(</span><span class="bp">_</span><span class="p">,</span><span class="w"> </span><span class="bp">_</span><span class="p">,</span><span class="w"> </span><span class="bp">_</span><span class="p" data-group-id="0633428246-1">)</span><span class="w"> </span><span class="k" data-group-id="0633428246-2">do</span><span class="w">
  </span><span class="p" data-group-id="0633428246-3">[</span><span class="ss">:relationship</span><span class="p" data-group-id="0633428246-3">]</span><span class="w">
</span><span class="k" data-group-id="0633428246-2">end</span><span class="w">

</span><span class="kd">def</span><span class="w"> </span><span class="nf">strict_loads</span><span class="p">,</span><span class="w"> </span><span class="ss">do</span><span class="p">:</span><span class="w"> </span><span class="no">false</span></code></pre><hr class="thin"/><h3 id="calculations-do-not-have-a-select-3-callback-any-more">Calculations do not have a <code class="inline">select/3</code> callback any more</h3><p>In 2.0 calculations had a <code class="inline">select/3</code> callback, but <code class="inline">load/3</code> is now a superset of <code class="inline">select/3</code> and so the former is no longer needed.</p><h4>What you'll need to change</h4><p>If you have a <code class="inline">select/3</code> callback in your calculations, you will need to remove the <code class="inline">select/3</code> callback. You must then add those fields to the <code class="inline">load/3</code> callback.</p><p>For example:</p><pre><code class="makeup elixir" translate="no"><span class="kd">def</span><span class="w"> </span><span class="nf">select</span><span class="p" data-group-id="1140245575-1">(</span><span class="bp">_</span><span class="p">,</span><span class="w"> </span><span class="bp">_</span><span class="p">,</span><span class="w"> </span><span class="bp">_</span><span class="p" data-group-id="1140245575-1">)</span><span class="p">,</span><span class="w"> </span><span class="ss">do</span><span class="p">:</span><span class="w"> </span><span class="p" data-group-id="1140245575-2">[</span><span class="ss">:some_attribute</span><span class="p" data-group-id="1140245575-2">]</span><span class="w">
</span><span class="kd">def</span><span class="w"> </span><span class="nf">load</span><span class="p" data-group-id="1140245575-3">(</span><span class="bp">_</span><span class="p">,</span><span class="w"> </span><span class="bp">_</span><span class="p">,</span><span class="w"> </span><span class="bp">_</span><span class="p" data-group-id="1140245575-3">)</span><span class="p">,</span><span class="w"> </span><span class="ss">do</span><span class="p">:</span><span class="w"> </span><span class="p" data-group-id="1140245575-4">[</span><span class="ss">:some_calculation</span><span class="p">,</span><span class="w"> </span><span class="ss">some_relationship</span><span class="p">:</span><span class="w"> </span><span class="p" data-group-id="1140245575-5">[</span><span class="ss">:some_field1</span><span class="p">,</span><span class="w"> </span><span class="ss">:some_field2</span><span class="p" data-group-id="1140245575-5">]</span><span class="p" data-group-id="1140245575-4">]</span></code></pre><p>can now be written more simply as:</p><pre><code class="makeup elixir" translate="no"><span class="kd">def</span><span class="w"> </span><span class="nf">load</span><span class="p" data-group-id="9676288098-1">(</span><span class="bp">_</span><span class="p">,</span><span class="w"> </span><span class="bp">_</span><span class="p">,</span><span class="w"> </span><span class="bp">_</span><span class="p" data-group-id="9676288098-1">)</span><span class="p">,</span><span class="w"> </span><span class="ss">do</span><span class="p">:</span><span class="w"> </span><span class="p" data-group-id="9676288098-2">[</span><span class="ss">:some_attribute</span><span class="p">,</span><span class="w"> </span><span class="ss">:some_calculation</span><span class="p">,</span><span class="w"> </span><span class="ss">some_relationship</span><span class="p">:</span><span class="w"> </span><span class="p" data-group-id="9676288098-3">[</span><span class="ss">:some_field1</span><span class="p">,</span><span class="w"> </span><span class="ss">:some_field2</span><span class="p" data-group-id="9676288098-3">]</span><span class="p" data-group-id="9676288098-2">]</span></code></pre><hr class="thin"/><h3 id="embedded-resources-no-longer-have-autogenerated_id">Embedded resources no longer have <code class="inline">autogenerated_id</code></h3><p>A private primary key called <code class="inline">autogenerated_id</code> was added to embedded resources if no primary key was added manually.</p><p>This should have no real effect on your application, except for the fact that your embedded attributes will have <code class="inline">autogenerated_id</code> in the database which won't be reflected by an attribute any more. If it is updated, then the <code class="inline">autogenerated_id</code> field will go away.</p><p>This is listed as a breaking change in case someone is depending on this feature, but that should be very uncommon/unlikely.</p><hr class="thin"/><h3 id="pubsub-notifier-no-longer-publishes-events-for-previous-values-by-default">PubSub notifier no longer publishes events for previous values by default</h3><p>Previously, the Ash notifier would publish a message containing both the old <em>and</em> new values for changing attributes. Typically, we use
things like IDs in notification topics, that do not change, so for most this will not have an impact.</p><p>If you wish to send a notification for the old value and the new value, then an action cannot be done atomically. Bulk actions must update each record in turn, and atomic updates can't be leveraged.</p><p>If you're comfortable with the performance implications, you can restore the previous behavior by adding <code class="inline">previous_values?: true</code> to your publications in your pub_sub notifier</p><pre><code class="makeup elixir" translate="no"><span class="n">publish</span><span class="w"> </span><span class="ss">:update</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="4458926775-1">[</span><span class="s">&quot;user:updated&quot;</span><span class="p">,</span><span class="w"> </span><span class="ss">:email</span><span class="p" data-group-id="4458926775-1">]</span><span class="p">,</span><span class="w"> </span><span class="ss">previous_values?</span><span class="p">:</span><span class="w"> </span><span class="no">true</span></code></pre><hr class="thin"/><h3 id="custom-checks-and-notifiers-will-not-have-access-to-the-original-data-by-default">Custom checks and notifiers will not have access to the original data by default</h3><p>In your notifiers and policy checks, when you get a changeset you currently have access to the <code class="inline">data</code> field,
which is the original record prior to being updated or destroyed. However, this is not compatible with atomic/bulk
updates/destroys, where we may be given a query and told to destroy it. In those cases, <code class="inline">changeset.data</code> will be
<code class="inline">%Ash.Changeset.OriginalDataNotAvailable{}</code>. When you write a custom check or a custom notifier, if you need access to the original data, you must add the following function:</p><pre><code class="makeup elixir" translate="no"><span class="c1"># in custom checks</span><span class="w">
</span><span class="kd">def</span><span class="w"> </span><span class="nf">requires_original_data?</span><span class="p" data-group-id="1956745483-1">(</span><span class="c">_authorizer</span><span class="p">,</span><span class="w"> </span><span class="c">_opts</span><span class="p" data-group-id="1956745483-1">)</span><span class="p">,</span><span class="w"> </span><span class="ss">do</span><span class="p">:</span><span class="w"> </span><span class="no">true</span><span class="w">

</span><span class="c1"># in notifiers</span><span class="w">
</span><span class="kd">def</span><span class="w"> </span><span class="nf">requires_original_data?</span><span class="p" data-group-id="1956745483-2">(</span><span class="c">_resource</span><span class="p">,</span><span class="w"> </span><span class="c">_action</span><span class="p" data-group-id="1956745483-2">)</span><span class="p">,</span><span class="w"> </span><span class="ss">do</span><span class="p">:</span><span class="w"> </span><span class="no">true</span></code></pre><p>Keep in mind, this will prevent the usage of these checks/notifiers with atomic actions.</p><hr class="thin"/><h3 id="domain-authorization-authorize-now-defaults-to-by_default"><code class="inline">Domain.authorization.authorize</code> now defaults to <code class="inline">:by_default</code></h3><p>Previously, the default was <code class="inline">:when_requested</code>. This meant that, unless you said <code class="inline">actor: some_actor</code> or <code class="inline">authorize?: true</code>, authorization was skipped. This has the obvious drawback of making it easy to accidentally bypass authorization unintentionally. In 3.0, this now defaults to <code class="inline">:by_default</code>.</p><h4>What you'll need to change</h4><h5>Keep old behavior</h5><p>To avoid making a significant refactor, and to keep your current behavior, you can go to your domain and set the configuration below. Otherwise skip to the refactor steps below. We advise that you take this route to start, but we <em>highly suggest</em> that you change your domains to <code class="inline">authorize :by_default</code> in the future. <code class="inline">authorize :when_requested</code> will not be deprecated, so there is no time constraint.</p><pre><code class="makeup elixir" translate="no"><span class="n">authorization</span><span class="w"> </span><span class="k" data-group-id="5142226028-1">do</span><span class="w">
  </span><span class="n">authorize</span><span class="w"> </span><span class="ss">:when_requested</span><span class="w">
</span><span class="k" data-group-id="5142226028-1">end</span></code></pre><h5>Refactor</h5><p>For each domain that has the old configuration, after setting it to the new config, you'll need to revisit each call to that domain that doesn't set an actor or the <code class="inline">authorize?</code> option, and add <code class="inline">authorize?: false</code>.</p><p>This may be a good time to do the refactor from <code class="inline">YourDomain.func</code> to <code class="inline">Ash.func</code>, if you want to. See the section about domains being required when building changesets.</p><hr class="thin"/><h3 id="require_atomic-defaults-to-true"><code class="inline">require_atomic?</code> defaults to <code class="inline">true</code></h3><p>On <code class="inline">:update</code> actions, and <code class="inline">:destroy</code> actions, they now default to <code class="inline">require_atomic? true</code>. This means that the following things will cause errors when attempting to run the action:</p><ol><li>changes or validations exist that do not have the <code class="inline">atomic</code> callback. <em>This includes anonymous function changes/validations</em>.</li><li>attributes are being changed that do not support atomic updates. This most notably includes (for now) embedded resources.</li><li>the action has a manual implementation</li><li>the action has applicable notifiers that require the original data.</li></ol><p>Updates and destroys that can be made fully atomic are always safe to do concurrently, and as such we now require that actions meet this criteria, or that it is explicitly stated that they do not have to. See the <a href="update-actions.xhtml#fully-atomic-updates">update actions guide</a> for more.</p><h4>Upgrade config</h4><p>You can set the following configuration, which <em>will be removed in Ash 3.1</em>. This configuration will retain the 2.0 default behavior of <code class="inline">require_atomic?</code> defaulting to <code class="inline">false</code>. You can then safely do the rest of the upgrade. Then, you can perform this one change after confirming that your system works as expected.</p><pre><code class="makeup elixir" translate="no"><span class="n">config</span><span class="w"> </span><span class="ss">:ash</span><span class="p">,</span><span class="w"> </span><span class="ss">:require_atomic_by_default?</span><span class="p">,</span><span class="w"> </span><span class="no">false</span></code></pre><h4>What you'll need to change</h4><p>The vast majority of cases will be caught by warnings emitted at compile time.</p><h5>Anonymous function changes</h5><p>Anonymous function changes can never be made atomic, because we don't know what they contain. You will either need to transfer it to a module change and then follow the next section, or set <code class="inline">require_atomic? false</code></p><h5>Module changes</h5><p>If you have a module change, you can make it atomic by defining the <code class="inline">atomic/3</code> callback. This callback can replace the <code class="inline">change/3</code> callback, but it is very important to keep in mind that <em>later changes</em> will no longer have access to the value. For example, if you have</p><pre><code class="makeup elixir" translate="no"><span class="kd">def</span><span class="w"> </span><span class="nf">change</span><span class="p" data-group-id="1521193556-1">(</span><span class="n">changeset</span><span class="p">,</span><span class="w"> </span><span class="bp">_</span><span class="p">,</span><span class="w"> </span><span class="bp">_</span><span class="p" data-group-id="1521193556-1">)</span><span class="w"> </span><span class="k" data-group-id="1521193556-2">do</span><span class="w">
  </span><span class="c1"># this is not concurrency safe</span><span class="w">
  </span><span class="nc">Ash.Changeset</span><span class="o">.</span><span class="n">change_attribute</span><span class="p" data-group-id="1521193556-3">(</span><span class="n">changeset</span><span class="p">,</span><span class="w"> </span><span class="ss">:value</span><span class="p">,</span><span class="w"> </span><span class="n">changeset</span><span class="o">.</span><span class="n">data</span><span class="o">.</span><span class="n">value</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="mi">1</span><span class="p" data-group-id="1521193556-3">)</span><span class="w">
</span><span class="k" data-group-id="1521193556-2">end</span></code></pre><p>If you have a subsequent change that does something like <code class="inline">Ash.Changeset.get_attribute(changeset, :value)</code> it will get the new value (i.e old value + 1). With atomics, <code class="inline">Ash.Changeset.get_attribute(changeset, :value)</code> would return the <em>old value</em>. This is because atomics are scheduling an update that happens when call the data layer. For example:</p><pre><code class="makeup elixir" translate="no"><span class="kd">def</span><span class="w"> </span><span class="nf">atomic</span><span class="p" data-group-id="9368396503-1">(</span><span class="n">changeset</span><span class="p">,</span><span class="w"> </span><span class="bp">_</span><span class="p">,</span><span class="w"> </span><span class="bp">_</span><span class="p" data-group-id="9368396503-1">)</span><span class="w"> </span><span class="k" data-group-id="9368396503-2">do</span><span class="w">
  </span><span class="p" data-group-id="9368396503-3">{</span><span class="ss">:atomic</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="9368396503-4">%{</span><span class="ss">value</span><span class="p">:</span><span class="w"> </span><span class="n">expr</span><span class="p" data-group-id="9368396503-5">(</span><span class="n">value</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="mi">1</span><span class="p" data-group-id="9368396503-5">)</span><span class="p" data-group-id="9368396503-4">}</span><span class="p" data-group-id="9368396503-3">}</span><span class="w">
</span><span class="k" data-group-id="9368396503-2">end</span></code></pre><p>This should not typically matter unless you have complex actions w/ multiple changes where subsequent changes need to know the results of previous steps. In those cases, if you can't make them all atomic, then its best just not to worry about it and set <code class="inline">require_atomic? false</code></p><h5>Non-atomic castable types</h5><p>If you are using <code class="inline">change atomic_update/2</code> or <a href="Ash.Changeset.xhtml#atomic_update/2"><code class="inline">Ash.Changeset.atomic_update/2</code></a> or <a href="Ash.Changeset.xhtml#atomic_update/3"><code class="inline">Ash.Changeset.atomic_update/3</code></a>, and the type does not support atomic updates, you will get an error unless you do one of the following:</p><ol><li>for <code class="inline">change atomic_update/2</code> add the <code class="inline">cast_atomic?: false</code> option.</li><li>for <code class="inline">Ash.Changeset.atomic_update</code>, pass the value as <code class="inline">{:atomic, expr}</code>, i.e <code class="inline">Ash.Changeset.atomic_update(changeset, :value, {:atomic, expr(value + 1)})</code></li></ol><p>For builtin types, the above applies to <code class="inline">:union</code>, <code class="inline">:map</code>, <code class="inline">:keyword</code>, embedded types. It also applies to <code class="inline">:string</code>, but only if the <code class="inline">match?</code> constraint is present.</p><hr class="thin"/><h3 id="ash-error-invalid-nosuchinput-errors-on-unknown-action-inputs"><a href="Ash.Error.Invalid.NoSuchInput.xhtml"><code class="inline">Ash.Error.Invalid.NoSuchInput</code></a> errors on unknown action inputs</h3><p>In 2.0, inputs to actions that don't match an accepted attribute or argument were silently ignored. This made it very easy to make certain kinds of mistakes, like assuming that an input is being used by an action when it actually is not. Now, unknown action inputs will cause an <a href="Ash.Error.Invalid.NoSuchInput.xhtml"><code class="inline">Ash.Error.Invalid.NoSuchInput</code></a>.</p><h4>What you'll need to change</h4><p>If you have action calls that are erroneously passing in extra values, you will need to do remove them.</p><p>A logic error was fixed in this behavior for embedded resources. If you are using embedded resources in <code class="inline">{:array, _}</code> types, and are relying on including the primary key of that embedded resource to match records up for updating/destroy behavior, you will need to make sure that you do one of the following</p><ol><li>add the <code class="inline">writable?: true</code> flag to the uuid of the embedded resource (probably what you want)</li><li>modify the actions to accept an <code class="inline">id</code> argument and set the argument to the provided value</li></ol><hr class="thin"/><h3 id="ash-notloaded-for-attributes"><code class="inline">%Ash.NotLoaded{}</code> for attributes</h3><p>In 2.0, attributes that were not selected were replaced with <code class="inline">nil</code> values. This could lead to confusion when dealing with records that didn't have all attributes selected. If you passed these records to a function it might see that an attribute is <code class="inline">nil</code> when actually it just wasn't selected. To find out if it was selected, you could look into <code class="inline">record.__metadata__.selected</code>, but you'd have to know to do that. To alleviate these issues, attributes that are not selected are now filled in with <code class="inline">%Ash.NotLoaded{}</code>, just like calculations and aggregates.</p><h4>What you'll need to change</h4><p>If you have logic that was looking at attribute values that may not be selected, you may have been accidentally working with non selected values. For example:</p><pre><code class="makeup elixir" translate="no"><span class="k">if</span><span class="w"> </span><span class="n">record</span><span class="o">.</span><span class="n">attribute</span><span class="w"> </span><span class="k" data-group-id="7011905838-1">do</span><span class="w">
  </span><span class="n">handle_present_attribute</span><span class="p" data-group-id="7011905838-2">(</span><span class="n">...</span><span class="p" data-group-id="7011905838-2">)</span><span class="w">
</span><span class="k" data-group-id="7011905838-1">else</span><span class="w">
  </span><span class="c1"># unselected attributes would have ended up in this branch</span><span class="w">
  </span><span class="n">handle_not_present_attribute</span><span class="p" data-group-id="7011905838-3">(</span><span class="n">...</span><span class="p" data-group-id="7011905838-3">)</span><span class="w">
</span><span class="k" data-group-id="7011905838-1">end</span></code></pre><p>Now, if it is possible for that attribute to have not been selected, you'll want to do something like this instead:</p><pre><code class="makeup elixir" translate="no"><span class="k">case</span><span class="w"> </span><span class="n">record</span><span class="o">.</span><span class="n">attribute</span><span class="w"> </span><span class="k" data-group-id="8686651061-1">do</span><span class="w">
  </span><span class="p" data-group-id="8686651061-2">%</span><span class="nc" data-group-id="8686651061-2">Ash.NotLoaded</span><span class="p" data-group-id="8686651061-2">{</span><span class="p" data-group-id="8686651061-2">}</span><span class="w"> </span><span class="o">-&gt;</span><span class="w">
    </span><span class="n">handle_not_selected</span><span class="p" data-group-id="8686651061-3">(</span><span class="n">...</span><span class="p" data-group-id="8686651061-3">)</span><span class="w">
  </span><span class="no">nil</span><span class="w"> </span><span class="o">-&gt;</span><span class="w">
    </span><span class="n">handle_not_present_attribute</span><span class="p" data-group-id="8686651061-4">(</span><span class="n">...</span><span class="p" data-group-id="8686651061-4">)</span><span class="w">
  </span><span class="n">value</span><span class="w"> </span><span class="o">-&gt;</span><span class="w">
    </span><span class="n">handle_present_attribute</span><span class="p" data-group-id="8686651061-5">(</span><span class="n">...</span><span class="p" data-group-id="8686651061-5">)</span><span class="w">
</span><span class="k" data-group-id="8686651061-1">end</span></code></pre><hr class="thin"/><h3 id="calculations-do-not-reuse-values-by-default">Calculations do not reuse values by default</h3><p>When loading data in 2.0 the option <code class="inline">reselect_all?</code> defaulted to <code class="inline">false</code>. What this would mean is that existing values for attributes would be reused, instead of visiting the data layer, by default. This can be an extremely valuable piece of behavior, but <em>defaulting</em> to it often means accidentally using data as a cache that you did not intent to use as a cache. Take the following example:</p><pre><code class="makeup elixir" translate="no"><span class="n">user</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p" data-group-id="3939854597-1">%</span><span class="nc" data-group-id="3939854597-1">User</span><span class="p" data-group-id="3939854597-1">{</span><span class="ss">first_name</span><span class="p">:</span><span class="w"> </span><span class="s">&quot;fred&quot;</span><span class="p">,</span><span class="w"> </span><span class="ss">last_name</span><span class="p">:</span><span class="w"> </span><span class="s">&quot;weasley&quot;</span><span class="p" data-group-id="3939854597-1">}</span><span class="w">

</span><span class="nc">Ash</span><span class="o">.</span><span class="n">update!</span><span class="p" data-group-id="3939854597-2">(</span><span class="n">user</span><span class="p">,</span><span class="w"> </span><span class="ss">first_name</span><span class="p">:</span><span class="w"> </span><span class="s">&quot;george&quot;</span><span class="p" data-group-id="3939854597-2">)</span><span class="w">

</span><span class="n">user</span><span class="w"> </span><span class="o">|&gt;</span><span class="w"> </span><span class="nc">Ash</span><span class="o">.</span><span class="n">load!</span><span class="p" data-group-id="3939854597-3">(</span><span class="ss">:full_name</span><span class="p" data-group-id="3939854597-3">)</span><span class="w">
</span><span class="c1"># in 2.0 -&gt; fred weasley</span><span class="w">
</span><span class="c1"># in 3.0 -&gt; george weasley</span></code></pre><p>To opt into the old behavior, which we recommend doing on a case-by-case basis, you can pass <code class="inline">reuse_values?: true</code>. For example:</p><pre><code class="makeup elixir" translate="no"><span class="n">user</span><span class="w"> </span><span class="o">|&gt;</span><span class="w"> </span><span class="nc">Ash</span><span class="o">.</span><span class="n">load!</span><span class="p" data-group-id="9868816436-1">(</span><span class="ss">:full_name</span><span class="p">,</span><span class="w"> </span><span class="ss">reuse_values?</span><span class="p">:</span><span class="w"> </span><span class="no">true</span><span class="p" data-group-id="9868816436-1">)</span></code></pre><hr class="thin"/><h3 id="resources-are-not-interchangeable-with-ash-type-anymore">Resources are not interchangeable with <a href="Ash.Type.xhtml"><code class="inline">Ash.Type</code></a> anymore</h3><p>In 2.0 it was possible to pass an Ash resource in all places where some instance of <a href="Ash.Type.xhtml"><code class="inline">Ash.Type</code></a> was supported. In 3.0 resources (except for embedded resources) don't implement the <a href="Ash.Type.xhtml"><code class="inline">Ash.Type</code></a> behaviour anymore.</p><h4>What you'll need to change</h4><p>If you were using a resource in one of the places that accept an <a href="Ash.Type.xhtml"><code class="inline">Ash.Type</code></a> (arguments, calculation return values or fields of a union) you have to refactor your code to use the <code class="inline">:struct</code> type together with an <code class="inline">instance_of</code> constraint</p><pre><code class="makeup elixir" translate="no"><span class="n">calculation</span><span class="w"> </span><span class="ss">:random_post</span><span class="p">,</span><span class="w"> </span><span class="ss">:struct</span><span class="w"> </span><span class="k" data-group-id="1357976905-1">do</span><span class="w">
  </span><span class="n">constraints</span><span class="w"> </span><span class="ss">instance_of</span><span class="p">:</span><span class="w"> </span><span class="nc">Post</span><span class="w">
  </span><span class="n">calculate</span><span class="w"> </span><span class="nc">Calculations.RandomPost</span><span class="w">
</span><span class="k" data-group-id="1357976905-1">end</span></code></pre>

  </body>
</html>
