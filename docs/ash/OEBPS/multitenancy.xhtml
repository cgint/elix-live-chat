<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"
      xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>Multitenancy - ash v3.5.33</title>
    <meta name="generator" content="ExDoc v0.38.2" />
    <link type="text/css" rel="stylesheet" href="dist/epub-elixir-FNUUKFP7.css" />
    <script src="dist/epub-4WIP524F.js"></script>

  </head>
  <body class="content-inner">

    <h1 id="content">Multitenancy</h1>
<p>Multitenancy is the splitting up your data into discrete areas, typically by customer. One of the most common examples of this, is the idea of splitting up a postgres database into &quot;schemas&quot; one for each customer that you have. Then, when making any queries, you ensure to always specify the &quot;schema&quot; you are querying, and you never need to worry about data crossing over between customers. The biggest benefits of this kind of strategy are the simplification of authorization logic, and better performance. Instead of all queries from all customers needing to use the same large table, they are each instead all using their own smaller tables. Another benefit is that it is much easier to delete a single customer's data on request.</p><p>In Ash, there are two primary strategies for implementing multitenancy. The first (and simplest) works for any data layer that supports filtering, and requires very little maintenance/mental overhead. It is done via expecting a given attribute to line up with the <code class="inline">tenant</code>, and is called <code class="inline">:attribute</code>. The second, is based on the data layer backing your resource, and is called <code class="inline">:context</code>. For information on context based multitenancy, see the documentation of your data layer. For example, <code class="inline">AshPostgres</code> uses postgres schemas. While the <code class="inline">:attribute</code> strategy is simple to implement, it also offers fewer advantages, primarily acting as another way to ensure your data is filtered to the correct tenant.</p><h2 id="attribute-multitenancy">Attribute Multitenancy</h2><pre><code class="makeup elixir" translate="no"><span class="kd">defmodule</span><span class="w"> </span><span class="nc">MyApp.Users</span><span class="w"> </span><span class="k" data-group-id="0942141397-1">do</span><span class="w">
  </span><span class="kn">use</span><span class="w"> </span><span class="nc">Ash.Resource</span><span class="p">,</span><span class="w"> </span><span class="n">...</span><span class="w">

  </span><span class="n">multitenancy</span><span class="w"> </span><span class="k" data-group-id="0942141397-2">do</span><span class="w">
    </span><span class="n">strategy</span><span class="w"> </span><span class="ss">:attribute</span><span class="w">
    </span><span class="n">attribute</span><span class="w"> </span><span class="ss">:organization_id</span><span class="w">
  </span><span class="k" data-group-id="0942141397-2">end</span><span class="w">

  </span><span class="n">...</span><span class="w">

  </span><span class="n">relationships</span><span class="w"> </span><span class="k" data-group-id="0942141397-3">do</span><span class="w">
    </span><span class="n">belongs_to</span><span class="w"> </span><span class="ss">:organization</span><span class="p">,</span><span class="w"> </span><span class="nc">MyApp.Organization</span><span class="w">
  </span><span class="k" data-group-id="0942141397-3">end</span><span class="w">
</span><span class="k" data-group-id="0942141397-1">end</span></code></pre><p>In this case, if you were to try to run a query without specifying a tenant, you would get an error telling you that the tenant is required.</p><p>Setting the tenant is done via <a href="Ash.Query.xhtml#set_tenant/2"><code class="inline">Ash.Query.set_tenant/2</code></a> and <a href="Ash.Changeset.xhtml#set_tenant/2"><code class="inline">Ash.Changeset.set_tenant/2</code></a>. If you are using a <a href="code-interfaces.xhtml">code interface</a>, you can pass <code class="inline">tenant:</code> in the options list (the final parameter). If you are using an extension, such as <code class="inline">AshJsonApi</code> or <code class="inline">AshGraphql</code> the method of setting tenant context is explained in that extension's documentation.</p><p>Example usage of the above:</p><pre><code class="makeup elixir" translate="no"><span class="c1"># Error when not setting a tenant</span><span class="w">
</span><span class="nc">MyApp.Users</span><span class="w">
</span><span class="o">|&gt;</span><span class="w"> </span><span class="nc">Ash.Query</span><span class="o">.</span><span class="n">filter</span><span class="p" data-group-id="6112230385-1">(</span><span class="n">name</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s">&quot;fred&quot;</span><span class="p" data-group-id="6112230385-1">)</span><span class="w">
</span><span class="o">|&gt;</span><span class="w"> </span><span class="nc">Ash</span><span class="o">.</span><span class="n">read!</span><span class="p" data-group-id="6112230385-2">(</span><span class="p" data-group-id="6112230385-2">)</span><span class="w">
</span><span class="gt">** (Ash.Error.Invalid)</span><span class="w">

</span><span class="o">*</span><span class="w"> </span><span class="s">&quot;Queries against the Helpdesk.Accounts.User resource require a tenant to be specified&quot;</span><span class="w">
    </span><span class="p" data-group-id="6112230385-3">(</span><span class="n">ash</span><span class="w"> </span><span class="mf">1.22</span><span class="o">.</span><span class="mi">0</span><span class="p" data-group-id="6112230385-3">)</span><span class="w"> </span><span class="n">lib</span><span class="o">/</span><span class="n">ash</span><span class="o">/</span><span class="n">domain</span><span class="o">/</span><span class="n">domain</span><span class="o">.</span><span class="n">ex</span><span class="p">:</span><span class="mi">944</span><span class="p">:</span><span class="w"> </span><span class="nc">Ash.Domain</span><span class="o">.</span><span class="n">unwrap_or_raise!</span><span class="o">/</span><span class="mi">2</span><span class="w">

</span><span class="c1"># Automatically filtering by `organization_id == 1`</span><span class="w">
</span><span class="nc">MyApp.Users</span><span class="w">
</span><span class="o">|&gt;</span><span class="w"> </span><span class="nc">Ash.Query</span><span class="o">.</span><span class="n">filter</span><span class="p" data-group-id="6112230385-4">(</span><span class="n">name</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s">&quot;fred&quot;</span><span class="p" data-group-id="6112230385-4">)</span><span class="w">
</span><span class="o">|&gt;</span><span class="w"> </span><span class="nc">Ash.Query</span><span class="o">.</span><span class="n">set_tenant</span><span class="p" data-group-id="6112230385-5">(</span><span class="mi">1</span><span class="p" data-group-id="6112230385-5">)</span><span class="w">
</span><span class="o">|&gt;</span><span class="w"> </span><span class="nc">Ash</span><span class="o">.</span><span class="n">read!</span><span class="p" data-group-id="6112230385-6">(</span><span class="p" data-group-id="6112230385-6">)</span><span class="w">

</span><span class="p" data-group-id="6112230385-7">[</span><span class="n">...</span><span class="p" data-group-id="6112230385-7">]</span><span class="w">

</span><span class="c1"># Automatically setting `organization_id` to `1`</span><span class="w">
</span><span class="nc">MyApp.Users</span><span class="w">
</span><span class="o">|&gt;</span><span class="w"> </span><span class="nc">Ash.Changeset</span><span class="o">.</span><span class="n">for_create</span><span class="p" data-group-id="6112230385-8">(</span><span class="ss">:create</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="6112230385-9">%{</span><span class="ss">name</span><span class="p">:</span><span class="w"> </span><span class="s">&quot;fred&quot;</span><span class="p" data-group-id="6112230385-9">}</span><span class="p" data-group-id="6112230385-8">)</span><span class="w">
</span><span class="o">|&gt;</span><span class="w"> </span><span class="nc">Ash.Changeset</span><span class="o">.</span><span class="n">set_tenant</span><span class="p" data-group-id="6112230385-10">(</span><span class="mi">1</span><span class="p" data-group-id="6112230385-10">)</span><span class="w">
</span><span class="o">|&gt;</span><span class="w"> </span><span class="nc">Ash</span><span class="o">.</span><span class="n">create!</span><span class="p" data-group-id="6112230385-11">(</span><span class="p" data-group-id="6112230385-11">)</span><span class="w">

</span><span class="p" data-group-id="6112230385-12">%</span><span class="nc" data-group-id="6112230385-12">MyApp.User</span><span class="p" data-group-id="6112230385-12">{</span><span class="ss">organization_id</span><span class="p">:</span><span class="w"> </span><span class="mi">1</span><span class="p" data-group-id="6112230385-12">}</span><span class="w">

</span><span class="c1"># Setting tenant with a code interface that exposes `list_all` as a read action</span><span class="w">
</span><span class="nc">MyApp.Users</span><span class="o">.</span><span class="n">list_all</span><span class="p" data-group-id="6112230385-13">(</span><span class="ss">tenant</span><span class="p">:</span><span class="w"> </span><span class="mi">1</span><span class="p" data-group-id="6112230385-13">)</span></code></pre><p>If you want to enable running queries <em>without</em> a tenant as well as queries with a tenant, the <code class="inline">global?</code> option supports this. You will likely need to incorporate this ability into any authorization rules though, to ensure that users from one tenant can't access other tenant's data.</p><pre><code class="makeup elixir" translate="no"><span class="n">multitenancy</span><span class="w"> </span><span class="k" data-group-id="3743224246-1">do</span><span class="w">
  </span><span class="n">strategy</span><span class="w"> </span><span class="ss">:attribute</span><span class="w">
  </span><span class="n">attribute</span><span class="w"> </span><span class="ss">:organization_id</span><span class="w">
  </span><span class="n">global?</span><span class="w"> </span><span class="no">true</span><span class="w">
</span><span class="k" data-group-id="3743224246-1">end</span></code></pre><p>You can also provide the <code class="inline">parse_attribute?</code> option if the tenant being set doesn't exactly match the attribute value, e.g the tenant is <code class="inline">org_10</code> and the attribute is <code class="inline">organization_id</code>, which requires just <code class="inline">10</code>.</p><h2 id="tenant-aware-identities">Tenant-Aware Identities</h2><p>When using identities in a multitenant resource, the tenant attribute is automatically included in the uniqueness constraints. This means that the same identity value can exist across different tenants, but must be unique within a single tenant. For example, if you have a <code class="inline">User</code> resource with an email identity, users in different organizations could have the same email address.</p><p>If you need an identity to be globally unique across all tenants (like a global user email system), you can set <code class="inline">all_tenants?: true</code> on the identity.</p><pre><code class="makeup elixir" translate="no"><span class="kd">defmodule</span><span class="w"> </span><span class="nc">MyApp.User</span><span class="w"> </span><span class="k" data-group-id="4021684191-1">do</span><span class="w">
  </span><span class="kn">use</span><span class="w"> </span><span class="nc">Ash.Resource</span><span class="p">,</span><span class="w"> </span><span class="n">...</span><span class="w">

  </span><span class="n">multitenancy</span><span class="w"> </span><span class="k" data-group-id="4021684191-2">do</span><span class="w">
    </span><span class="n">strategy</span><span class="w"> </span><span class="ss">:attribute</span><span class="w">
    </span><span class="n">attribute</span><span class="w"> </span><span class="ss">:organization_id</span><span class="w">
  </span><span class="k" data-group-id="4021684191-2">end</span><span class="w">

  </span><span class="n">identities</span><span class="w"> </span><span class="k" data-group-id="4021684191-3">do</span><span class="w">
    </span><span class="c1"># This email must be unique within a tenant</span><span class="w">
    </span><span class="n">identity</span><span class="w"> </span><span class="ss">:tenant_scoped_email</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="4021684191-4">[</span><span class="ss">:email</span><span class="p" data-group-id="4021684191-4">]</span><span class="w">

    </span><span class="c1"># This username must be unique across all tenants</span><span class="w">
    </span><span class="n">identity</span><span class="w"> </span><span class="ss">:global_username</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="4021684191-5">[</span><span class="ss">:username</span><span class="p" data-group-id="4021684191-5">]</span><span class="p">,</span><span class="w"> </span><span class="ss">all_tenants?</span><span class="p">:</span><span class="w"> </span><span class="no">true</span><span class="w">
  </span><span class="k" data-group-id="4021684191-3">end</span><span class="w">
</span><span class="k" data-group-id="4021684191-1">end</span></code></pre><p>Example implications:</p><pre><code class="makeup elixir" translate="no"><span class="c1"># These are valid because they&#39;re in different tenants</span><span class="w">
</span><span class="nc">User</span><span class="w">
</span><span class="o">|&gt;</span><span class="w"> </span><span class="nc">Ash.Changeset</span><span class="o">.</span><span class="n">for_create</span><span class="p" data-group-id="4337490363-1">(</span><span class="ss">:create</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="4337490363-2">%{</span><span class="ss">email</span><span class="p">:</span><span class="w"> </span><span class="s">&quot;fred@example.com&quot;</span><span class="p" data-group-id="4337490363-2">}</span><span class="p" data-group-id="4337490363-1">)</span><span class="w">
</span><span class="o">|&gt;</span><span class="w"> </span><span class="nc">Ash.Changeset</span><span class="o">.</span><span class="n">set_tenant</span><span class="p" data-group-id="4337490363-3">(</span><span class="mi">1</span><span class="p" data-group-id="4337490363-3">)</span><span class="w">
</span><span class="o">|&gt;</span><span class="w"> </span><span class="nc">Ash</span><span class="o">.</span><span class="n">create!</span><span class="p" data-group-id="4337490363-4">(</span><span class="p" data-group-id="4337490363-4">)</span><span class="w">

</span><span class="nc">User</span><span class="w">
</span><span class="o">|&gt;</span><span class="w"> </span><span class="nc">Ash.Changeset</span><span class="o">.</span><span class="n">for_create</span><span class="p" data-group-id="4337490363-5">(</span><span class="ss">:create</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="4337490363-6">%{</span><span class="ss">email</span><span class="p">:</span><span class="w"> </span><span class="s">&quot;fred@example.com&quot;</span><span class="p" data-group-id="4337490363-6">}</span><span class="p" data-group-id="4337490363-5">)</span><span class="w">
</span><span class="o">|&gt;</span><span class="w"> </span><span class="nc">Ash.Changeset</span><span class="o">.</span><span class="n">set_tenant</span><span class="p" data-group-id="4337490363-7">(</span><span class="mi">2</span><span class="p" data-group-id="4337490363-7">)</span><span class="w">
</span><span class="o">|&gt;</span><span class="w"> </span><span class="nc">Ash</span><span class="o">.</span><span class="n">create!</span><span class="p" data-group-id="4337490363-8">(</span><span class="p" data-group-id="4337490363-8">)</span><span class="w">

</span><span class="c1"># This would fail because usernames are global</span><span class="w">
</span><span class="nc">User</span><span class="w">
</span><span class="o">|&gt;</span><span class="w"> </span><span class="nc">Ash.Changeset</span><span class="o">.</span><span class="n">for_create</span><span class="p" data-group-id="4337490363-9">(</span><span class="ss">:create</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="4337490363-10">%{</span><span class="ss">username</span><span class="p">:</span><span class="w"> </span><span class="s">&quot;fred&quot;</span><span class="p" data-group-id="4337490363-10">}</span><span class="p" data-group-id="4337490363-9">)</span><span class="w">
</span><span class="o">|&gt;</span><span class="w"> </span><span class="nc">Ash.Changeset</span><span class="o">.</span><span class="n">set_tenant</span><span class="p" data-group-id="4337490363-11">(</span><span class="mi">1</span><span class="p" data-group-id="4337490363-11">)</span><span class="w">
</span><span class="o">|&gt;</span><span class="w"> </span><span class="nc">Ash</span><span class="o">.</span><span class="n">create!</span><span class="p" data-group-id="4337490363-12">(</span><span class="p" data-group-id="4337490363-12">)</span><span class="w">

</span><span class="nc">User</span><span class="w">
</span><span class="o">|&gt;</span><span class="w"> </span><span class="nc">Ash.Changeset</span><span class="o">.</span><span class="n">for_create</span><span class="p" data-group-id="4337490363-13">(</span><span class="ss">:create</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="4337490363-14">%{</span><span class="ss">username</span><span class="p">:</span><span class="w"> </span><span class="s">&quot;fred&quot;</span><span class="p" data-group-id="4337490363-14">}</span><span class="p" data-group-id="4337490363-13">)</span><span class="w">
</span><span class="o">|&gt;</span><span class="w"> </span><span class="nc">Ash.Changeset</span><span class="o">.</span><span class="n">set_tenant</span><span class="p" data-group-id="4337490363-15">(</span><span class="mi">2</span><span class="p" data-group-id="4337490363-15">)</span><span class="w">
</span><span class="o">|&gt;</span><span class="w"> </span><span class="nc">Ash</span><span class="o">.</span><span class="n">create!</span><span class="p" data-group-id="4337490363-16">(</span><span class="p" data-group-id="4337490363-16">)</span><span class="w"> </span><span class="c1"># Error: username already taken</span></code></pre><h2 id="context-multitenancy">Context Multitenancy</h2><p>Context multitenancy allows for the data layer to dictate how multitenancy works. For example, a csv data layer might implement multitenancy via saving the file with different suffixes, or an API wrapping data layer might use different subdomains for the tenant.</p><p>For <code class="inline">AshPostgres</code> context multitenancy, which uses postgres schemas and is referred to ash &quot;Schema Based Multitenancy&quot;, see the <a href="https://hexdocs.pm/ash_postgres/schema-based-multitenancy.html">guide</a></p><h2 id="possible-values-for-tenant">Possible Values for tenant</h2><p>By default, the tenant value is passed directly to the relevant implementation. For example, if you are using schema multitenancy with <code class="inline">ash_postgres</code>, you might provide a schema like <code class="inline">organization.subdomain</code>. In Ash, a tenant should be identifiable by a single value, like an integer or a string.</p><p>You can use the <a href="Ash.ToTenant.xhtml"><code class="inline">Ash.ToTenant</code></a> protocol to automatically convert values into this simple value. The example below will allow you to use the same organization everywhere, and have it automatically converted into the correct schema for postgres, and the correct id for attribute-based multitenant resources. You can use this without looking up the relevant record as well, as long as the required fields used in your protocol are present.</p><pre><code class="makeup elixir" translate="no"><span class="nc">Ash.Changeset</span><span class="o">.</span><span class="n">for_create</span><span class="p" data-group-id="4588206732-1">(</span><span class="n">...</span><span class="p">,</span><span class="w"> </span><span class="ss">tenant</span><span class="p">:</span><span class="w"> </span><span class="p" data-group-id="4588206732-2">%</span><span class="nc" data-group-id="4588206732-2">MyApp.Organization</span><span class="p" data-group-id="4588206732-2">{</span><span class="ss">id</span><span class="p">:</span><span class="w"> </span><span class="n">id</span><span class="p" data-group-id="4588206732-2">}</span><span class="p" data-group-id="4588206732-1">)</span></code></pre><pre><code class="makeup elixir" translate="no"><span class="c1"># in Organization resource</span><span class="w">

</span><span class="kd">defimpl</span><span class="w"> </span><span class="nc">Ash.ToTenant</span><span class="w"> </span><span class="k" data-group-id="3358447801-1">do</span><span class="w">
  </span><span class="kd">def</span><span class="w"> </span><span class="nf">to_tenant</span><span class="p" data-group-id="3358447801-2">(</span><span class="p" data-group-id="3358447801-3">%{</span><span class="ss">id</span><span class="p">:</span><span class="w"> </span><span class="n">id</span><span class="p" data-group-id="3358447801-3">}</span><span class="p">,</span><span class="w"> </span><span class="n">resource</span><span class="p" data-group-id="3358447801-2">)</span><span class="w"> </span><span class="k" data-group-id="3358447801-4">do</span><span class="w">
    </span><span class="k">if</span><span class="w"> </span><span class="nc">Ash.Resource.Info</span><span class="o">.</span><span class="n">data_layer</span><span class="p" data-group-id="3358447801-5">(</span><span class="n">resource</span><span class="p" data-group-id="3358447801-5">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="nc">AshPostgres.DataLayer</span><span class="w">
      </span><span class="o">&amp;&amp;</span><span class="w"> </span><span class="nc">Ash.Resource.Info</span><span class="o">.</span><span class="n">multitenancy_strategy</span><span class="p" data-group-id="3358447801-6">(</span><span class="n">resource</span><span class="p" data-group-id="3358447801-6">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="ss">:context</span><span class="w"> </span><span class="k" data-group-id="3358447801-7">do</span><span class="w">
      </span><span class="s">&quot;org_</span><span class="si" data-group-id="3358447801-8">#{</span><span class="n">id</span><span class="si" data-group-id="3358447801-8">}</span><span class="s">&quot;</span><span class="w">
    </span><span class="k" data-group-id="3358447801-7">else</span><span class="w">
      </span><span class="n">id</span><span class="w">
    </span><span class="k" data-group-id="3358447801-7">end</span><span class="w">
  </span><span class="k" data-group-id="3358447801-4">end</span><span class="w">
</span><span class="k" data-group-id="3358447801-1">end</span></code></pre><p>This allows you to pass an <code class="inline">%Organization{}</code> or an organization_id around, and have that <code class="inline">organization_id</code> properly used with attribute and context-based multitenancy.</p>

  </body>
</html>
