<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"
      xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>Actors & Authorization - ash v3.5.33</title>
    <meta name="generator" content="ExDoc v0.38.2" />
    <link type="text/css" rel="stylesheet" href="dist/epub-elixir-FNUUKFP7.css" />
    <script src="dist/epub-4WIP524F.js"></script>

  </head>
  <body class="content-inner">

    <h1 id="content">Actors &amp; Authorization</h1>
<p>Authorization in Ash involves three things:</p><ul><li>actor - the entity (i.e user, organization, device) performing a given action. See <a href="glossary.xhtml#actor">the glossary</a> for more.</li><li>authorize? - a flag that tells Ash to run authorization.</li><li>authorizers - the extensions on a resource that can modify or forbid the action.</li></ul><h2 id="setting-actor-and-authorize">Setting <code class="inline">actor</code> and <code class="inline">authorize?</code></h2><p>All functions in Ash that may perform authorization and/or wish to use the actor accept an <code class="inline">actor</code> and an <code class="inline">authorize?</code> option. For example:</p><p>Building a changeset/query/input is the best time to provide the actor option</p><pre><code class="makeup elixir" translate="no"><span class="nc">Ash.Changeset</span><span class="o">.</span><span class="n">for_create</span><span class="p" data-group-id="1300142877-1">(</span><span class="nc">Post</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="1300142877-2">%{</span><span class="ss">title</span><span class="p">:</span><span class="w"> </span><span class="s">&quot;Post Title&quot;</span><span class="p" data-group-id="1300142877-2">}</span><span class="p">,</span><span class="w"> </span><span class="ss">actor</span><span class="p">:</span><span class="w"> </span><span class="n">current_user</span><span class="p">,</span><span class="w"> </span><span class="ss">authorize?</span><span class="p">:</span><span class="w"> </span><span class="no">true</span><span class="p" data-group-id="1300142877-1">)</span></code></pre><p>If calling a function without changeset/query/input, you can provide the <code class="inline">actor</code> option at that point.</p><pre><code class="makeup elixir" translate="no"><span class="nc">Ash</span><span class="o">.</span><span class="n">count!</span><span class="p" data-group-id="6802451840-1">(</span><span class="nc">Post</span><span class="p">,</span><span class="w"> </span><span class="ss">actor</span><span class="p">:</span><span class="w"> </span><span class="n">current_user</span><span class="p">,</span><span class="w"> </span><span class="ss">authorize?</span><span class="p">:</span><span class="w"> </span><span class="no">true</span><span class="p" data-group-id="6802451840-1">)</span></code></pre><p>Functions created with the code interface also accept an <code class="inline">actor</code> option.</p><pre><code class="makeup elixir" translate="no"><span class="nc">MyDomain</span><span class="o">.</span><span class="n">create_post!</span><span class="p" data-group-id="6935196393-1">(</span><span class="nc">Post</span><span class="p">,</span><span class="w"> </span><span class="ss">authorize?</span><span class="p">:</span><span class="w"> </span><span class="no">true</span><span class="p" data-group-id="6935196393-1">)</span></code></pre><section role="note" class="admonition warning"><h3 id="set-the-actor-on-the-query-changeset-input" class="admonition-title warning">Set the actor on the query/changeset/input</h3><p>The hooks on a query/changeset/input to an action may need to know the actor, so you
need to set the actor when building them, not when calling the action.</p><pre><code class="makeup elixir" translate="no"><span class="c1"># DO THIS</span><span class="w">

</span><span class="nc">Post</span><span class="w">
</span><span class="o">|&gt;</span><span class="w"> </span><span class="nc">Ash.Query</span><span class="o">.</span><span class="n">for_read</span><span class="p" data-group-id="5072203852-1">(</span><span class="ss">:read</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="5072203852-2">%{</span><span class="p" data-group-id="5072203852-2">}</span><span class="p">,</span><span class="w"> </span><span class="ss">actor</span><span class="p">:</span><span class="w"> </span><span class="n">current_user</span><span class="p" data-group-id="5072203852-1">)</span><span class="w">
</span><span class="o">|&gt;</span><span class="w"> </span><span class="nc">Ash</span><span class="o">.</span><span class="n">read!</span><span class="p" data-group-id="5072203852-3">(</span><span class="p" data-group-id="5072203852-3">)</span><span class="w">

</span><span class="c1"># DON&#39;T DO THIS</span><span class="w">

</span><span class="nc">Post</span><span class="w">
</span><span class="o">|&gt;</span><span class="w"> </span><span class="nc">Ash.Query</span><span class="o">.</span><span class="n">for_read!</span><span class="p" data-group-id="5072203852-4">(</span><span class="ss">:read</span><span class="p" data-group-id="5072203852-4">)</span><span class="w">
</span><span class="o">|&gt;</span><span class="w"> </span><span class="nc">Ash</span><span class="o">.</span><span class="n">read!</span><span class="p" data-group-id="5072203852-5">(</span><span class="ss">actor</span><span class="p">:</span><span class="w"> </span><span class="n">current_user</span><span class="p" data-group-id="5072203852-5">)</span></code></pre></section><h2 id="default-value-of-authorize">Default value of <code class="inline">authorize?</code></h2><p>The default value of <code class="inline">authorize?</code> is determined by the <code class="inline">authorization</code> configuration of the relevant domain. By default, <code class="inline">authorize?</code> is set to <code class="inline">true</code> (and so can be omitted in all of the examples above). If a resource has no authorizers, then all requests will be allowed.</p><h2 id="authorizers">Authorizers</h2><p>Authorizers are in control of what happens during authorization. Generally, you won't need to create your own authorizer, as the builtin policy authorizer <a href="Ash.Policy.Authorizer.xhtml"><code class="inline">Ash.Policy.Authorizer</code></a> works well for any use case. See the <a href="policies.xhtml">Policies guide</a> for more.</p><h2 id="domain-authorization-configuration">Domain Authorization Configuration</h2><h3 id="d-ash-domain-dsl-authorization-require_actor"><code class="inline">d:Ash.Domain.Dsl.authorization|require_actor?</code></h3><p>Requires that an actor is set for all requests.</p><p>Important: <code class="inline">nil</code> is still a valid actor, so this won't prevent providing <code class="inline">actor: nil</code>. It only requires that the option itself is provided.</p><h3 id="d-ash-domain-dsl-authorization-authorize"><code class="inline">d:Ash.Domain.Dsl.authorization|authorize</code></h3><p>When to run authorization for a given request.</p><ul><li><code class="inline">:by_default</code> sets <code class="inline">authorize?: true</code> if the <code class="inline">authorize?</code> option was not set (so it can be set to <code class="inline">false</code>). This is the default.</li><li><code class="inline">:always</code> forces <code class="inline">authorize?: true</code> on all requests to the domain.</li><li><code class="inline">:when_requested</code> sets <code class="inline">authorize?: true</code> whenever an actor is set or <code class="inline">authorize?: true</code> is explicitly passed.</li></ul>

  </body>
</html>
