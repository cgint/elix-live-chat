<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"
      xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>Code Interface - ash v3.5.33</title>
    <meta name="generator" content="ExDoc v0.38.2" />
    <link type="text/css" rel="stylesheet" href="dist/epub-elixir-FNUUKFP7.css" />
    <script src="dist/epub-4WIP524F.js"></script>

  </head>
  <body class="content-inner">

    <h1 id="content">Code Interface</h1>
<p>One of the ways that we interact with our resources is via hand-written code. The general pattern for that looks like building a query or a changeset for a given action, and calling it via functions like <a href="Ash.xhtml#read/2"><code class="inline">Ash.read/2</code></a> and <a href="Ash.xhtml#create/2"><code class="inline">Ash.create/2</code></a>. This, however, is just one way to use Ash, and is designed to help you build tools that work with resources, and to power things like <code class="inline">AshPhoenix.Form</code>, <code class="inline">AshGraphql.Resource</code> and <code class="inline">AshJsonApi.Resource</code>. When working with your resources in code, we generally want something more idiomatic and simple. For example, on a domain called <code class="inline">Helpdesk.Support</code>.</p><pre><code class="makeup elixir" translate="no"><span class="n">resources</span><span class="w"> </span><span class="k" data-group-id="6900027269-1">do</span><span class="w">
  </span><span class="n">resource</span><span class="w"> </span><span class="nc">Ticket</span><span class="w"> </span><span class="k" data-group-id="6900027269-2">do</span><span class="w">
    </span><span class="n">define</span><span class="w"> </span><span class="ss">:open_ticket</span><span class="p">,</span><span class="w"> </span><span class="ss">args</span><span class="p">:</span><span class="w"> </span><span class="p" data-group-id="6900027269-3">[</span><span class="ss">:subject</span><span class="p" data-group-id="6900027269-3">]</span><span class="p">,</span><span class="w"> </span><span class="ss">action</span><span class="p">:</span><span class="w"> </span><span class="ss">:open</span><span class="w">
  </span><span class="k" data-group-id="6900027269-2">end</span><span class="w">
</span><span class="k" data-group-id="6900027269-1">end</span></code></pre><p>This simple setup now allows you to open a ticket with <code class="inline">Helpdesk.Support.open_ticket(subject)</code>. You can cause it to raise errors instead of return them with <code class="inline">Helpdesk.Support.open_ticket!(subject)</code>. For information on the options and additional inputs these defined functions take, look at the generated function documentation, which you can do in iex with <code class="inline">h Helpdesk.Support.open_ticket</code>. For more information on the code interface, read the DSL documentation: <code class="inline">d:Ash.Domain.Dsl.resources.resource.define</code>.</p><h2 id="code-interfaces-on-the-resource">Code interfaces on the resource</h2><p>You can define a code interface on individual resources as well, using the <code class="inline">code_interface</code> block. The DSL is the same as the DSL for defining it in the <code class="inline">domain</code>. For example:</p><pre><code class="makeup elixir" translate="no"><span class="n">code_interface</span><span class="w"> </span><span class="k" data-group-id="0375340193-1">do</span><span class="w">
  </span><span class="c1"># the action open can be omitted because it matches the function name</span><span class="w">
  </span><span class="n">define</span><span class="w"> </span><span class="ss">:open</span><span class="p">,</span><span class="w"> </span><span class="ss">args</span><span class="p">:</span><span class="w"> </span><span class="p" data-group-id="0375340193-2">[</span><span class="ss">:subject</span><span class="p" data-group-id="0375340193-2">]</span><span class="w">
</span><span class="k" data-group-id="0375340193-1">end</span></code></pre><p>These will then be called on the resource itself, i.e <code class="inline">Helpdesk.Support.Ticket.open(subject)</code>.</p><h2 id="using-the-code-interface">Using the code interface</h2><p>If the action is an update or destroy, it will take a record or a changeset as its <em>first</em> argument.
If the action is a read action, it will take a starting query as an <em>opt in the last</em> argument.</p><p>All functions will have an optional last argument that accepts options. See <a href="Ash.Resource.Interface.xhtml"><code class="inline">Ash.Resource.Interface</code></a> for valid options.</p><p>For reads:</p><ul><li><code class="inline">:query</code> - a query to start the action with, can be used to filter/sort the results of the action. This can be a keyword list of any of the options that <a href="Ash.Query.xhtml#build/3"><code class="inline">Ash.Query.build/3</code></a> supports.</li></ul><p>For creates:</p><ul><li><code class="inline">:changeset</code> - a changeset to start the action with</li></ul><p>They will also have an optional second to last argument that is a freeform map to provide action input. It <em>must be a map</em>.
If it is a keyword list, it will be assumed that it is actually <code class="inline">options</code> (for convenience).
This allows for the following behaviour:</p><pre><code class="makeup elixir" translate="no"><span class="c1"># Because the 3rd argument is a keyword list, we use it as options</span><span class="w">
</span><span class="nc">Accounts</span><span class="o">.</span><span class="n">register_user</span><span class="p" data-group-id="6207795571-1">(</span><span class="n">username</span><span class="p">,</span><span class="w"> </span><span class="n">password</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="6207795571-2">[</span><span class="ss">tenant</span><span class="p">:</span><span class="w"> </span><span class="s">&quot;organization_22&quot;</span><span class="p" data-group-id="6207795571-2">]</span><span class="p" data-group-id="6207795571-1">)</span><span class="w">
</span><span class="c1"># Because the 3rd argument is a map, we use it as action input</span><span class="w">
</span><span class="nc">Accounts</span><span class="o">.</span><span class="n">register_user</span><span class="p" data-group-id="6207795571-3">(</span><span class="n">username</span><span class="p">,</span><span class="w"> </span><span class="n">password</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="6207795571-4">%{</span><span class="ss">key</span><span class="p">:</span><span class="w"> </span><span class="s">&quot;val&quot;</span><span class="p" data-group-id="6207795571-4">}</span><span class="p" data-group-id="6207795571-3">)</span><span class="w">
</span><span class="c1"># When all arguments are provided it is unambiguous</span><span class="w">
</span><span class="nc">Accounts</span><span class="o">.</span><span class="n">register_user</span><span class="p" data-group-id="6207795571-5">(</span><span class="n">username</span><span class="p">,</span><span class="w"> </span><span class="n">password</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="6207795571-6">%{</span><span class="ss">key</span><span class="p">:</span><span class="w"> </span><span class="s">&quot;val&quot;</span><span class="p" data-group-id="6207795571-6">}</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="6207795571-7">[</span><span class="ss">tenant</span><span class="p">:</span><span class="w"> </span><span class="s">&quot;organization_22&quot;</span><span class="p" data-group-id="6207795571-7">]</span><span class="p" data-group-id="6207795571-5">)</span></code></pre><p>For a full list of options, see the functions in <a href="Ash.Resource.Interface.xhtml"><code class="inline">Ash.Resource.Interface</code></a>, or use iex help on your generated
functions, i.e</p><pre><code class="makeup elixir" translate="no"><span class="gp unselectable">iex&gt; </span><span class="n">h</span><span class="w"> </span><span class="nc">Accounts</span><span class="o">.</span><span class="n">register_user</span><span class="o">/</span><span class="mi">3</span></code></pre><h3 id="get_by-functions">get_by functions</h3><p>A common pattern in Ash applications is the &quot;get by&quot; function for retrieving individual records. This pattern provides a clean alternative to using <a href="Ash.xhtml#get!/2"><code class="inline">Ash.get!/2</code></a> directly in your web modules.</p><p><strong>Avoid this pattern:</strong></p><pre><code class="makeup elixir" translate="no"><span class="c1"># In a LiveView or Controller - DON&#39;T DO THIS</span><span class="w">
</span><span class="n">group</span><span class="w"> </span><span class="o">=</span><span class="w">
  </span><span class="nc">MyApp.Ash.Dashboards.DashboardGroup</span><span class="w">
  </span><span class="o">|&gt;</span><span class="w"> </span><span class="nc">Ash</span><span class="o">.</span><span class="n">get!</span><span class="p" data-group-id="6842107304-1">(</span><span class="n">group_id</span><span class="p" data-group-id="6842107304-1">)</span><span class="w">
  </span><span class="o">|&gt;</span><span class="w"> </span><span class="nc">Ash</span><span class="o">.</span><span class="n">load!</span><span class="p" data-group-id="6842107304-2">(</span><span class="ss">students</span><span class="p">:</span><span class="w"> </span><span class="p" data-group-id="6842107304-3">[</span><span class="ss">:user</span><span class="p" data-group-id="6842107304-3">]</span><span class="p" data-group-id="6842107304-2">)</span></code></pre><p>This is similar to using <code class="inline">Repo.get/2</code> and <code class="inline">Repo.preload/2</code> directly outside of context modules, which is generally considered a bad practice.</p><p><strong>Use this pattern instead:</strong></p><pre><code class="makeup elixir" translate="no"><span class="c1"># In your domain</span><span class="w">
</span><span class="n">resource</span><span class="w"> </span><span class="nc">DashboardGroup</span><span class="w"> </span><span class="k" data-group-id="8555883406-1">do</span><span class="w">
  </span><span class="n">define</span><span class="w"> </span><span class="ss">:get_dashboard_group_by_id</span><span class="p">,</span><span class="w"> </span><span class="ss">action</span><span class="p">:</span><span class="w"> </span><span class="ss">:read</span><span class="p">,</span><span class="w"> </span><span class="ss">get_by</span><span class="p">:</span><span class="w"> </span><span class="p" data-group-id="8555883406-2">[</span><span class="ss">:id</span><span class="p" data-group-id="8555883406-2">]</span><span class="w">
</span><span class="k" data-group-id="8555883406-1">end</span><span class="w">

</span><span class="c1"># In your LiveView or Controller</span><span class="w">
</span><span class="n">group</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nc">MyApp.Dashboards</span><span class="o">.</span><span class="n">get_dashboard_group_by_id!</span><span class="p" data-group-id="8555883406-3">(</span><span class="n">group_id</span><span class="p" data-group-id="8555883406-3">)</span></code></pre><p>The <code class="inline">get_by</code> option automatically creates a function that:</p><ul><li>Uses the primary read action with an applied filter</li><li>Supports dynamic loading and filtering through the standard options</li><li>Provides both raising (<code class="inline">!</code>) and non-raising versions</li></ul><p><strong>Dynamic loading and filtering:</strong></p><p>Code interfaces automatically support loading and filtering options:</p><pre><code class="makeup elixir" translate="no"><span class="c1"># Load relationships</span><span class="w">
</span><span class="nc">MyApp.Dashboards</span><span class="o">.</span><span class="n">get_dashboard_group_by_id!</span><span class="p" data-group-id="0961666348-1">(</span><span class="n">id</span><span class="p">,</span><span class="w"> </span><span class="ss">load</span><span class="p">:</span><span class="w"> </span><span class="p" data-group-id="0961666348-2">[</span><span class="ss">students</span><span class="p">:</span><span class="w"> </span><span class="p" data-group-id="0961666348-3">[</span><span class="ss">:user</span><span class="p" data-group-id="0961666348-3">]</span><span class="p" data-group-id="0961666348-2">]</span><span class="p" data-group-id="0961666348-1">)</span><span class="w">

</span><span class="c1"># Apply additional filters</span><span class="w">
</span><span class="nc">MyApp.Dashboards</span><span class="o">.</span><span class="n">get_dashboard_group_by_id!</span><span class="p" data-group-id="0961666348-4">(</span><span class="n">id</span><span class="p">,</span><span class="w"> </span><span class="ss">query</span><span class="p">:</span><span class="w"> </span><span class="p" data-group-id="0961666348-5">[</span><span class="ss">filter</span><span class="p">:</span><span class="w"> </span><span class="p" data-group-id="0961666348-6">[</span><span class="ss">status</span><span class="p">:</span><span class="w"> </span><span class="ss">:active</span><span class="p" data-group-id="0961666348-6">]</span><span class="p" data-group-id="0961666348-5">]</span><span class="p" data-group-id="0961666348-4">)</span><span class="w">

</span><span class="c1"># Combine both</span><span class="w">
</span><span class="nc">MyApp.Dashboards</span><span class="o">.</span><span class="n">get_dashboard_group_by_id!</span><span class="p" data-group-id="0961666348-7">(</span><span class="n">id</span><span class="p">,</span><span class="w">
  </span><span class="ss">load</span><span class="p">:</span><span class="w"> </span><span class="p" data-group-id="0961666348-8">[</span><span class="ss">students</span><span class="p">:</span><span class="w"> </span><span class="p" data-group-id="0961666348-9">[</span><span class="ss">:user</span><span class="p" data-group-id="0961666348-9">]</span><span class="p" data-group-id="0961666348-8">]</span><span class="p">,</span><span class="w">
  </span><span class="ss">query</span><span class="p">:</span><span class="w"> </span><span class="p" data-group-id="0961666348-10">[</span><span class="ss">filter</span><span class="p">:</span><span class="w"> </span><span class="p" data-group-id="0961666348-11">[</span><span class="ss">status</span><span class="p">:</span><span class="w"> </span><span class="ss">:active</span><span class="p" data-group-id="0961666348-11">]</span><span class="p" data-group-id="0961666348-10">]</span><span class="w">
</span><span class="p" data-group-id="0961666348-7">)</span></code></pre><p>The <code class="inline">query</code> option accepts either an <a href="Ash.Query.xhtml"><code class="inline">Ash.Query</code></a> struct or a keyword list that gets passed to <a href="Ash.Query.xhtml#build/2"><code class="inline">Ash.Query.build/2</code></a>.</p><p><strong>When to use actions vs code interfaces:</strong></p><ul><li><strong>Actions</strong> define what operations are possible on your resource</li><li><strong>Code interfaces</strong> provide function-based access to those actions</li><li>Actions don't require code interfaces and can be used by extensions like <code class="inline">AshJsonApi</code></li><li>Code interfaces make actions callable as functions (e.g., <code class="inline">DashboardGroup.get_by_id/1</code>)</li></ul><p>This pattern encourages proper separation of concerns by keeping domain logic in your resources and providing clean interfaces for your web layer.</p><h2 id="calculations">Calculations</h2><p>Resource calculations can be run dynamically using <a href="Ash.xhtml#calculate/3"><code class="inline">Ash.calculate/3</code></a>, but
you can also expose them using the code_interface with <code class="inline">define_calculation</code>.</p><p>For example:</p><pre><code class="makeup elixir" translate="no"><span class="n">calculations</span><span class="w"> </span><span class="k" data-group-id="0608376874-1">do</span><span class="w">
  </span><span class="n">calculate</span><span class="w"> </span><span class="ss">:full_name</span><span class="p">,</span><span class="w"> </span><span class="ss">:string</span><span class="p">,</span><span class="w"> </span><span class="n">expr</span><span class="p" data-group-id="0608376874-2">(</span><span class="n">first_name</span><span class="w"> </span><span class="o">&lt;&gt;</span><span class="w"> </span><span class="o">^</span><span class="n">arg</span><span class="p" data-group-id="0608376874-3">(</span><span class="ss">:separator</span><span class="p" data-group-id="0608376874-3">)</span><span class="w"> </span><span class="o">&lt;&gt;</span><span class="w"> </span><span class="n">last_name</span><span class="p" data-group-id="0608376874-2">)</span><span class="w"> </span><span class="k" data-group-id="0608376874-4">do</span><span class="w">
    </span><span class="n">argument</span><span class="w"> </span><span class="ss">:separator</span><span class="p">,</span><span class="w"> </span><span class="ss">:string</span><span class="w"> </span><span class="k" data-group-id="0608376874-5">do</span><span class="w">
      </span><span class="n">allow_nil?</span><span class="w"> </span><span class="no">false</span><span class="w">
      </span><span class="n">default</span><span class="w"> </span><span class="s">&quot; &quot;</span><span class="w">
    </span><span class="k" data-group-id="0608376874-5">end</span><span class="w">
  </span><span class="k" data-group-id="0608376874-4">end</span><span class="w">
</span><span class="k" data-group-id="0608376874-1">end</span><span class="w">

</span><span class="c1"># in your domain</span><span class="w">
</span><span class="n">resource</span><span class="w"> </span><span class="nc">User</span><span class="w"> </span><span class="k" data-group-id="0608376874-6">do</span><span class="w">
  </span><span class="n">define_calculation</span><span class="w"> </span><span class="ss">:full_name</span><span class="p">,</span><span class="w"> </span><span class="ss">args</span><span class="p">:</span><span class="w"> </span><span class="p" data-group-id="0608376874-7">[</span><span class="ss">:first_name</span><span class="p">,</span><span class="w"> </span><span class="ss">:last_name</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="0608376874-8">{</span><span class="ss">:optional</span><span class="p">,</span><span class="w"> </span><span class="ss">:separator</span><span class="p" data-group-id="0608376874-8">}</span><span class="p" data-group-id="0608376874-7">]</span><span class="w">
  </span><span class="c1"># or if you want to take a record as an argument</span><span class="w">
  </span><span class="n">define_calculation</span><span class="w"> </span><span class="ss">:full_name</span><span class="p">,</span><span class="w"> </span><span class="ss">args</span><span class="p">:</span><span class="w"> </span><span class="p" data-group-id="0608376874-9">[</span><span class="ss">:_record</span><span class="p" data-group-id="0608376874-9">]</span><span class="w">
</span><span class="k" data-group-id="0608376874-6">end</span></code></pre><p>This could now be used like so:</p><pre><code class="makeup elixir" translate="no"><span class="nc">Accounts</span><span class="o">.</span><span class="n">full_name</span><span class="p" data-group-id="8778252238-1">(</span><span class="s">&quot;Jessie&quot;</span><span class="p">,</span><span class="w"> </span><span class="s">&quot;James&quot;</span><span class="p">,</span><span class="w"> </span><span class="s">&quot;-&quot;</span><span class="p" data-group-id="8778252238-1">)</span><span class="w">
</span><span class="c1"># or with a record as an argument</span><span class="w">
</span><span class="nc">Accounts</span><span class="o">.</span><span class="n">full_name</span><span class="p" data-group-id="8778252238-2">(</span><span class="n">user</span><span class="p" data-group-id="8778252238-2">)</span></code></pre><p>This allows for running calculations without an instance of a resource, normally done via <code class="inline">Ash.load(user, :full_name)</code></p><p>By default, configured args will be provided for any matching named reference <em>or</em> argument. This is normally fine, but in the case that you have an argument and a reference with the same name, you can specify it by supplying <code class="inline">{:arg, :name}</code> and <code class="inline">{:ref, :name}</code>. For example:</p><pre><code class="makeup elixir" translate="no"><span class="n">define_calculation</span><span class="w"> </span><span class="ss">:id_matches</span><span class="p">,</span><span class="w"> </span><span class="ss">args</span><span class="p">:</span><span class="w"> </span><span class="p" data-group-id="9904457773-1">[</span><span class="p" data-group-id="9904457773-2">{</span><span class="ss">:arg</span><span class="p">,</span><span class="w"> </span><span class="ss">:id</span><span class="p" data-group-id="9904457773-2">}</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="9904457773-3">{</span><span class="ss">:ref</span><span class="p">,</span><span class="w"> </span><span class="ss">:id</span><span class="p" data-group-id="9904457773-3">}</span><span class="p" data-group-id="9904457773-1">]</span></code></pre><p>To make arguments optional, wrap them in <code class="inline">{:optional, ..}</code>, for example:</p><pre><code class="makeup elixir" translate="no"><span class="n">define_calculation</span><span class="w"> </span><span class="ss">:id_matches</span><span class="p">,</span><span class="w"> </span><span class="ss">args</span><span class="p">:</span><span class="w"> </span><span class="p" data-group-id="3877835385-1">[</span><span class="p" data-group-id="3877835385-2">{</span><span class="ss">:arg</span><span class="p">,</span><span class="w"> </span><span class="ss">:id</span><span class="p" data-group-id="3877835385-2">}</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="3877835385-3">{</span><span class="ss">:optional</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="3877835385-4">{</span><span class="ss">:ref</span><span class="p">,</span><span class="w"> </span><span class="ss">:id</span><span class="p" data-group-id="3877835385-4">}</span><span class="p" data-group-id="3877835385-3">}</span><span class="p" data-group-id="3877835385-1">]</span></code></pre><h2 id="bulk-atomic-actions">Bulk &amp; atomic actions</h2><h3 id="bulk-updates-destroys">Bulk Updates &amp; Destroys</h3><p>Updates support a list, stream, or query as the first argument. This allows for bulk updates. In this mode, an <code class="inline">%Ash.BulkResult{}</code> is returned.</p><section role="note" class="admonition warning"><h3 id="valid-inputs" class="admonition-title warning">Valid inputs</h3><p>You cannot provide &quot;any enumerable&quot;, only lists, streams (a function or a %Stream{}), and queries. We have to be able to distinguish the input as a bulk input and not input to the action itself.</p></section><p>For example:</p><pre><code class="makeup elixir" translate="no"><span class="nc">Post</span><span class="w">
</span><span class="o">|&gt;</span><span class="w"> </span><span class="nc">Ash.Query</span><span class="o">.</span><span class="n">filter</span><span class="p" data-group-id="1588973720-1">(</span><span class="n">author_id</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="o">^</span><span class="n">author_id</span><span class="p" data-group-id="1588973720-1">)</span><span class="w">
</span><span class="o">|&gt;</span><span class="w"> </span><span class="nc">MyApp.Blog</span><span class="o">.</span><span class="n">archive_post!</span><span class="p" data-group-id="1588973720-2">(</span><span class="p" data-group-id="1588973720-2">)</span><span class="w">
</span><span class="c1"># =&gt; %Ash.BulkResult{}</span><span class="w">

</span><span class="p" data-group-id="1588973720-3">[</span><span class="p" data-group-id="1588973720-4">%</span><span class="nc" data-group-id="1588973720-4">Post</span><span class="p" data-group-id="1588973720-4">{</span><span class="p" data-group-id="1588973720-4">}</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="1588973720-5">%</span><span class="nc" data-group-id="1588973720-5">Post</span><span class="p" data-group-id="1588973720-5">{</span><span class="p" data-group-id="1588973720-5">}</span><span class="p" data-group-id="1588973720-3">]</span><span class="w">
</span><span class="o">|&gt;</span><span class="w"> </span><span class="nc">MyApp.Blog</span><span class="o">.</span><span class="n">destroy_post!</span><span class="p" data-group-id="1588973720-6">(</span><span class="p" data-group-id="1588973720-6">)</span><span class="w">
</span><span class="c1"># =&gt; %Ash.BulkResult{}</span><span class="w">
</span><span class="k">end</span></code></pre><p>You can pass options to the bulk operation with the <code class="inline">bulk_options</code> option to your code interface function.</p><h3 id="bulk-creates">Bulk Creates</h3><p>For bulk creates, you can provide a list or stream of inputs. In this mode also, an <code class="inline">%Ash.BulkResult{}</code> is returned.</p><section role="note" class="admonition warning"><h3 id="valid-inputs-1" class="admonition-title warning">Valid inputs</h3><p>You cannot provide &quot;any enumerable&quot;, only lists, streams (a function or a %Stream{}). We have to be able to distinguish the input as a bulk input and not input to the action itself.</p></section><p>Any arguments on the code interface will be applied to <em>all</em> inputs given as a list, and the arguments will come first.</p><pre><code class="makeup elixir" translate="no"><span class="p" data-group-id="9013868141-1">[</span><span class="p" data-group-id="9013868141-2">%{</span><span class="ss">title</span><span class="p">:</span><span class="w"> </span><span class="s">&quot;Post 1&quot;</span><span class="p" data-group-id="9013868141-2">}</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="9013868141-3">%{</span><span class="ss">title</span><span class="p">:</span><span class="w"> </span><span class="s">&quot;Post 2&quot;</span><span class="p" data-group-id="9013868141-3">}</span><span class="p">,</span><span class="w"> </span><span class="n">...</span><span class="p" data-group-id="9013868141-1">]</span><span class="w">
</span><span class="c1"># if `:special` is an action argument, it will be applied to all inputs</span><span class="w">
</span><span class="o">|&gt;</span><span class="w"> </span><span class="nc">MyApp.Blog</span><span class="o">.</span><span class="n">create_post!</span><span class="p" data-group-id="9013868141-4">(</span><span class="ss">:special</span><span class="p">,</span><span class="w"> </span><span class="ss">bulk_options</span><span class="p">:</span><span class="w"> </span><span class="p" data-group-id="9013868141-5">[</span><span class="ss">batch_size</span><span class="p">:</span><span class="w"> </span><span class="mi">10</span><span class="p" data-group-id="9013868141-5">]</span><span class="p" data-group-id="9013868141-4">)</span></code></pre><h3 id="returning-streams-from-read-actions">Returning streams from read actions</h3><p>The <code class="inline">:stream?</code> option allows you to return a stream to be enumerated later.</p><p>For example:</p><pre><code class="makeup elixir" translate="no"><span class="nc">MyApp.Blog</span><span class="o">.</span><span class="n">my_posts</span><span class="p" data-group-id="3654157790-1">(</span><span class="ss">stream?</span><span class="p">:</span><span class="w"> </span><span class="no">true</span><span class="p">,</span><span class="w"> </span><span class="ss">actor</span><span class="p">:</span><span class="w"> </span><span class="n">me</span><span class="p" data-group-id="3654157790-1">)</span><span class="w">
</span><span class="c1"># =&gt; #Stream&lt;...&gt;</span></code></pre><h3 id="customizing-the-generated-function">Customizing the generated function</h3><p>Often we want to have a slightly different interface when calling actions with functions,
or we want to maintain backwards compatibility for callers of our code interface while
changing the underlying action implementation.</p><p>You can define <code class="inline">custom_input</code>s on your code interfaces to massage arguments from the function
into a shape expected by the action.</p><p>For example, lets say we have an action that accepts an <code class="inline">artist_id</code> as an argument. We want
it to use <code class="inline">artist_id</code> for two reasons: it is the only part of the artist required to perform
the action, and accepting ids is better for an action supporting usage over an API. However,
we want the function itself to accept either an artist <em>or</em> an artist_id.</p><pre><code class="makeup elixir" translate="no"><span class="n">define</span><span class="w"> </span><span class="ss">:follow_artist</span><span class="w"> </span><span class="k" data-group-id="4183012435-1">do</span><span class="w">
  </span><span class="n">action</span><span class="w"> </span><span class="ss">:follow</span><span class="w">

  </span><span class="c1"># `artist` (from the custom input below) is a positional argument to the function</span><span class="w">
  </span><span class="n">args</span><span class="w"> </span><span class="p" data-group-id="4183012435-2">[</span><span class="ss">:artist</span><span class="p" data-group-id="4183012435-2">]</span><span class="w">

  </span><span class="c1"># make a custom input called `artist`, that is a union type</span><span class="w">
  </span><span class="n">custom_input</span><span class="w"> </span><span class="ss">:artist</span><span class="p">,</span><span class="w"> </span><span class="ss">:union</span><span class="w"> </span><span class="k" data-group-id="4183012435-3">do</span><span class="w">
    </span><span class="c1"># allow passing either an artist or an artist_id</span><span class="w">
    </span><span class="n">constraints</span><span class="w"> </span><span class="ss">types</span><span class="p">:</span><span class="w"> </span><span class="p" data-group-id="4183012435-4">[</span><span class="w">
      </span><span class="ss">artist</span><span class="p">:</span><span class="w"> </span><span class="p" data-group-id="4183012435-5">[</span><span class="ss">type</span><span class="p">:</span><span class="w"> </span><span class="ss">:struct</span><span class="p">,</span><span class="w"> </span><span class="ss">constraints</span><span class="p">:</span><span class="w"> </span><span class="p" data-group-id="4183012435-6">[</span><span class="ss">instance_of</span><span class="p">:</span><span class="w"> </span><span class="nc">Artist</span><span class="p" data-group-id="4183012435-6">]</span><span class="p" data-group-id="4183012435-5">]</span><span class="p">,</span><span class="w">
      </span><span class="ss">artist_id</span><span class="p">:</span><span class="w"> </span><span class="p" data-group-id="4183012435-7">[</span><span class="ss">type</span><span class="p">:</span><span class="w"> </span><span class="ss">:uuid</span><span class="p" data-group-id="4183012435-7">]</span><span class="w">
    </span><span class="p" data-group-id="4183012435-4">]</span><span class="w">

    </span><span class="n">transform</span><span class="w"> </span><span class="k" data-group-id="4183012435-8">do</span><span class="w">
      </span><span class="c1"># Pass it to the action as `artist_id`</span><span class="w">
      </span><span class="n">to</span><span class="w"> </span><span class="ss">:artist_id</span><span class="w">

      </span><span class="c1"># Extracting the value using this function</span><span class="w">
      </span><span class="n">using</span><span class="w"> </span><span class="k" data-group-id="4183012435-9">fn</span><span class="w">
        </span><span class="p" data-group-id="4183012435-10">%</span><span class="nc" data-group-id="4183012435-10">Ash.Union</span><span class="p" data-group-id="4183012435-10">{</span><span class="ss">type</span><span class="p">:</span><span class="w"> </span><span class="ss">:artist</span><span class="p">,</span><span class="w"> </span><span class="ss">value</span><span class="p">:</span><span class="w"> </span><span class="n">value</span><span class="p" data-group-id="4183012435-10">}</span><span class="w"> </span><span class="o">-&gt;</span><span class="w">
          </span><span class="n">value</span><span class="o">.</span><span class="n">id</span><span class="w">
        </span><span class="p" data-group-id="4183012435-11">%</span><span class="nc" data-group-id="4183012435-11">Ash.Union</span><span class="p" data-group-id="4183012435-11">{</span><span class="ss">type</span><span class="p">:</span><span class="w"> </span><span class="ss">:artist_id</span><span class="p">,</span><span class="w"> </span><span class="ss">value</span><span class="p">:</span><span class="w"> </span><span class="n">value</span><span class="p" data-group-id="4183012435-11">}</span><span class="w"> </span><span class="o">-&gt;</span><span class="w">
          </span><span class="n">value</span><span class="w">
      </span><span class="k" data-group-id="4183012435-9">end</span><span class="w">
    </span><span class="k" data-group-id="4183012435-8">end</span><span class="w">
  </span><span class="k" data-group-id="4183012435-3">end</span><span class="w">
</span><span class="k" data-group-id="4183012435-1">end</span></code></pre><p>The example above is a bit verbose. In practice we might create a type, called <code class="inline">ArtistOrId</code>,
for example, and extract that logic like so:</p><pre><code class="makeup elixir" translate="no"><span class="kd">defmodule</span><span class="w"> </span><span class="nc">MyApp.Types.ArtistOrId</span><span class="w"> </span><span class="k" data-group-id="9584469616-1">do</span><span class="w">
  </span><span class="kn">use</span><span class="w"> </span><span class="nc">Ash.Type.NewType</span><span class="p">,</span><span class="w"> </span><span class="ss">subtype_of</span><span class="p">:</span><span class="w"> </span><span class="ss">:union</span><span class="p">,</span><span class="w"> </span><span class="ss">constraints</span><span class="p">:</span><span class="w"> </span><span class="p" data-group-id="9584469616-2">[</span><span class="w">
    </span><span class="ss">types</span><span class="p">:</span><span class="w"> </span><span class="p" data-group-id="9584469616-3">[</span><span class="w">
      </span><span class="ss">artist</span><span class="p">:</span><span class="w"> </span><span class="p" data-group-id="9584469616-4">[</span><span class="ss">type</span><span class="p">:</span><span class="w"> </span><span class="ss">:struct</span><span class="p">,</span><span class="w"> </span><span class="ss">constraints</span><span class="p">:</span><span class="w"> </span><span class="p" data-group-id="9584469616-5">[</span><span class="ss">instance_of</span><span class="p">:</span><span class="w"> </span><span class="nc">Artist</span><span class="p" data-group-id="9584469616-5">]</span><span class="p" data-group-id="9584469616-4">]</span><span class="p">,</span><span class="w">
      </span><span class="ss">artist_id</span><span class="p">:</span><span class="w"> </span><span class="p" data-group-id="9584469616-6">[</span><span class="ss">type</span><span class="p">:</span><span class="w"> </span><span class="ss">:uuid</span><span class="p" data-group-id="9584469616-6">]</span><span class="w">
    </span><span class="p" data-group-id="9584469616-3">]</span><span class="w">
  </span><span class="p" data-group-id="9584469616-2">]</span><span class="w">

  </span><span class="kd">def</span><span class="w"> </span><span class="nf">to_artist_id</span><span class="p" data-group-id="9584469616-7">(</span><span class="p" data-group-id="9584469616-8">%</span><span class="nc" data-group-id="9584469616-8">Ash.Union</span><span class="p" data-group-id="9584469616-8">{</span><span class="ss">type</span><span class="p">:</span><span class="w"> </span><span class="ss">:artist</span><span class="p">,</span><span class="w"> </span><span class="ss">value</span><span class="p">:</span><span class="w"> </span><span class="n">artist</span><span class="p" data-group-id="9584469616-8">}</span><span class="p" data-group-id="9584469616-7">)</span><span class="p">,</span><span class="w"> </span><span class="ss">do</span><span class="p">:</span><span class="w"> </span><span class="n">artist</span><span class="o">.</span><span class="n">id</span><span class="w">
  </span><span class="kd">def</span><span class="w"> </span><span class="nf">to_artist_id</span><span class="p" data-group-id="9584469616-9">(</span><span class="p" data-group-id="9584469616-10">%</span><span class="nc" data-group-id="9584469616-10">Ash.Union</span><span class="p" data-group-id="9584469616-10">{</span><span class="ss">type</span><span class="p">:</span><span class="w"> </span><span class="ss">:artist_id</span><span class="p">,</span><span class="w"> </span><span class="ss">value</span><span class="p">:</span><span class="w"> </span><span class="n">artist_id</span><span class="p" data-group-id="9584469616-10">}</span><span class="p" data-group-id="9584469616-9">)</span><span class="p">,</span><span class="w"> </span><span class="ss">do</span><span class="p">:</span><span class="w"> </span><span class="n">artist_id</span><span class="w">
</span><span class="k" data-group-id="9584469616-1">end</span></code></pre><p>And then we can refactor the above example like so:</p><pre><code class="makeup elixir" translate="no"><span class="n">define</span><span class="w"> </span><span class="ss">:follow_artist</span><span class="w"> </span><span class="k" data-group-id="9653592022-1">do</span><span class="w">
  </span><span class="n">action</span><span class="w"> </span><span class="ss">:follow</span><span class="w">
  </span><span class="n">args</span><span class="w"> </span><span class="p" data-group-id="9653592022-2">[</span><span class="ss">:artist</span><span class="p" data-group-id="9653592022-2">]</span><span class="w">

  </span><span class="n">custom_input</span><span class="w"> </span><span class="ss">:artist</span><span class="p">,</span><span class="w"> </span><span class="nc">MyApp.Types.ArtistOrId</span><span class="w"> </span><span class="k" data-group-id="9653592022-3">do</span><span class="w">
    </span><span class="n">transform</span><span class="w"> </span><span class="k" data-group-id="9653592022-4">do</span><span class="w">
      </span><span class="n">to</span><span class="w"> </span><span class="ss">:artist_id</span><span class="w">
      </span><span class="n">using</span><span class="w"> </span><span class="o">&amp;</span><span class="nc">MyApp.Types.ArtistOrId</span><span class="o">.</span><span class="n">to_artist_id</span><span class="o">/</span><span class="mi">1</span><span class="w">
    </span><span class="k" data-group-id="9653592022-4">end</span><span class="w">
  </span><span class="k" data-group-id="9653592022-3">end</span><span class="w">
</span><span class="k" data-group-id="9653592022-1">end</span></code></pre><h3 id="default-options">Default Options</h3><p>You can provide default options that will be merged with client-provided options using the <code class="inline">default_options</code> configuration. This is useful for setting common options that should be applied to all calls of a particular interface function.</p><p><code class="inline">default_options</code> accepts either:</p><ul><li>A keyword list of static options</li><li>A zero-arity function that returns a keyword list of dynamic options</li></ul><h4>Static Default Options</h4><pre><code class="makeup elixir" translate="no"><span class="n">code_interface</span><span class="w"> </span><span class="k" data-group-id="4085563711-1">do</span><span class="w">
  </span><span class="n">define</span><span class="w"> </span><span class="ss">:get_user</span><span class="p">,</span><span class="w"> </span><span class="ss">action</span><span class="p">:</span><span class="w"> </span><span class="ss">:read</span><span class="p">,</span><span class="w"> </span><span class="ss">get_by</span><span class="p">:</span><span class="w"> </span><span class="p" data-group-id="4085563711-2">[</span><span class="ss">:id</span><span class="p" data-group-id="4085563711-2">]</span><span class="p">,</span><span class="w">
    </span><span class="ss">default_options</span><span class="p">:</span><span class="w"> </span><span class="p" data-group-id="4085563711-3">[</span><span class="w">
      </span><span class="ss">load</span><span class="p">:</span><span class="w"> </span><span class="p" data-group-id="4085563711-4">[</span><span class="ss">:profile</span><span class="p">,</span><span class="w"> </span><span class="ss">:posts</span><span class="p" data-group-id="4085563711-4">]</span><span class="w">
    </span><span class="p" data-group-id="4085563711-3">]</span><span class="w">
</span><span class="k" data-group-id="4085563711-1">end</span></code></pre><p>With this configuration, calling <code class="inline">MyApp.get_user(123)</code> will automatically load the profile and posts relationships and enable authorization.</p><h4>Dynamic Default Options</h4><p>For options that need to be computed at runtime, you can provide a function:</p><pre><code class="makeup elixir" translate="no"><span class="n">code_interface</span><span class="w"> </span><span class="k" data-group-id="5259537860-1">do</span><span class="w">
  </span><span class="n">define</span><span class="w"> </span><span class="ss">:get_user_with_timestamp</span><span class="p">,</span><span class="w"> </span><span class="ss">action</span><span class="p">:</span><span class="w"> </span><span class="ss">:read</span><span class="p">,</span><span class="w"> </span><span class="ss">get_by</span><span class="p">:</span><span class="w"> </span><span class="p" data-group-id="5259537860-2">[</span><span class="ss">:id</span><span class="p" data-group-id="5259537860-2">]</span><span class="p">,</span><span class="w">
    </span><span class="ss">default_options</span><span class="p">:</span><span class="w"> </span><span class="k" data-group-id="5259537860-3">fn</span><span class="w"> </span><span class="o">-&gt;</span><span class="w">
      </span><span class="p" data-group-id="5259537860-4">[</span><span class="w">
        </span><span class="ss">load</span><span class="p">:</span><span class="w"> </span><span class="p" data-group-id="5259537860-5">[</span><span class="ss">:profile</span><span class="p" data-group-id="5259537860-5">]</span><span class="p">,</span><span class="w">
        </span><span class="ss">context</span><span class="p">:</span><span class="w"> </span><span class="p" data-group-id="5259537860-6">%{</span><span class="w">
          </span><span class="ss">requested_at</span><span class="p">:</span><span class="w"> </span><span class="nc">DateTime</span><span class="o">.</span><span class="n">utc_now</span><span class="p" data-group-id="5259537860-7">(</span><span class="p" data-group-id="5259537860-7">)</span><span class="p">,</span><span class="w">
          </span><span class="ss">request_id</span><span class="p">:</span><span class="w"> </span><span class="nc">System</span><span class="o">.</span><span class="n">unique_integer</span><span class="p" data-group-id="5259537860-8">(</span><span class="p" data-group-id="5259537860-8">)</span><span class="w">
        </span><span class="p" data-group-id="5259537860-6">}</span><span class="w">
      </span><span class="p" data-group-id="5259537860-4">]</span><span class="w">
    </span><span class="k" data-group-id="5259537860-3">end</span><span class="w">
</span><span class="k" data-group-id="5259537860-1">end</span></code></pre><p>The function is called each time the interface function is invoked, allowing for dynamic values like timestamps or request IDs.</p><h4>Option Merging Behavior</h4><p>Default options are merged with client-provided options using the following rules:</p><ul><li>Most options: Client options override defaults</li><li><code class="inline">:load</code> options: Combined (both default and client loads are applied)</li><li><code class="inline">:bulk_options</code> and <code class="inline">:page</code> options: Deep merged (keyword lists are merged together)</li></ul><p>Example:</p><pre><code class="makeup elixir" translate="no"><span class="c1"># With default_options: [load: [:profile], authorize?: true]</span><span class="w">
</span><span class="nc">MyApp</span><span class="o">.</span><span class="n">get_user</span><span class="p" data-group-id="2396652226-1">(</span><span class="mi">123</span><span class="p">,</span><span class="w"> </span><span class="ss">load</span><span class="p">:</span><span class="w"> </span><span class="p" data-group-id="2396652226-2">[</span><span class="ss">:posts</span><span class="p" data-group-id="2396652226-2">]</span><span class="p">,</span><span class="w"> </span><span class="ss">authorize?</span><span class="p">:</span><span class="w"> </span><span class="no">false</span><span class="p" data-group-id="2396652226-1">)</span><span class="w">
</span><span class="c1"># Results in: [load: [:profile, :posts], authorize?: false]</span></code></pre><h3 id="authorization-functions">Authorization Functions</h3><p>For each action defined in a code interface, Ash automatically generates corresponding authorization check functions:</p><ul><li><code class="inline">can_action_name?(actor, params \\ %{}, opts \\ [])</code> - Returns <code class="inline">true</code>/<code class="inline">false</code> for authorization checks</li><li><code class="inline">can_action_name(actor, params \\ %{}, opts \\ [])</code> - Returns <code class="inline">{:ok, true/false}</code> or <code class="inline">{:error, reason}</code></li></ul><p>Example usage:</p><pre><code class="makeup elixir" translate="no"><span class="c1"># Check if user can create a post</span><span class="w">
</span><span class="k">if</span><span class="w"> </span><span class="nc">MyApp.Blog</span><span class="o">.</span><span class="n">can_create_post?</span><span class="p" data-group-id="8469898817-1">(</span><span class="n">current_user</span><span class="p" data-group-id="8469898817-1">)</span><span class="w"> </span><span class="k" data-group-id="8469898817-2">do</span><span class="w">
  </span><span class="c1"># Show create button</span><span class="w">
</span><span class="k" data-group-id="8469898817-2">end</span><span class="w">

</span><span class="c1"># Check if user can update a specific post</span><span class="w">
</span><span class="k">if</span><span class="w"> </span><span class="nc">MyApp.Blog</span><span class="o">.</span><span class="n">can_update_post?</span><span class="p" data-group-id="8469898817-3">(</span><span class="n">current_user</span><span class="p">,</span><span class="w"> </span><span class="n">post</span><span class="p" data-group-id="8469898817-3">)</span><span class="w"> </span><span class="k" data-group-id="8469898817-4">do</span><span class="w">
  </span><span class="c1"># Show edit button</span><span class="w">
</span><span class="k" data-group-id="8469898817-4">end</span><span class="w">

</span><span class="c1"># Check if user can destroy a specific comment</span><span class="w">
</span><span class="k">if</span><span class="w"> </span><span class="nc">MyApp.Blog</span><span class="o">.</span><span class="n">can_destroy_comment?</span><span class="p" data-group-id="8469898817-5">(</span><span class="n">current_user</span><span class="p">,</span><span class="w"> </span><span class="n">comment</span><span class="p" data-group-id="8469898817-5">)</span><span class="w"> </span><span class="k" data-group-id="8469898817-6">do</span><span class="w">
  </span><span class="c1"># Show delete button</span><span class="w">
</span><span class="k" data-group-id="8469898817-6">end</span></code></pre><p>These functions are particularly useful for conditional rendering of UI elements based on user permissions.</p><h4>Authorization Function Options</h4><p>The authorization functions accept the same options as <a href="Ash.xhtml#can/3"><code class="inline">Ash.can/3</code></a> and <a href="Ash.xhtml#can?/3"><code class="inline">Ash.can?/3</code></a>, including:</p><ul><li><code class="inline">log?</code> - Whether to log the authorization result at <code class="inline">:info</code> level for debugging purposes</li></ul><pre><code class="makeup elixir" translate="no"><span class="c1"># Enable logging for this specific authorization check</span><span class="w">
</span><span class="k">if</span><span class="w"> </span><span class="nc">MyApp.Blog</span><span class="o">.</span><span class="n">can_update_post?</span><span class="p" data-group-id="2534063643-1">(</span><span class="n">current_user</span><span class="p">,</span><span class="w"> </span><span class="n">post</span><span class="p">,</span><span class="w"> </span><span class="ss">log?</span><span class="p">:</span><span class="w"> </span><span class="no">true</span><span class="p" data-group-id="2534063643-1">)</span><span class="w"> </span><span class="k" data-group-id="2534063643-2">do</span><span class="w">
  </span><span class="c1"># Show edit button</span><span class="w">
</span><span class="k" data-group-id="2534063643-2">end</span><span class="w">

</span><span class="c1"># This will log authorization details to help with debugging</span><span class="w">
</span><span class="nc">MyApp.Blog</span><span class="o">.</span><span class="n">can_create_post</span><span class="p" data-group-id="2534063643-3">(</span><span class="n">current_user</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="2534063643-4">%{</span><span class="ss">title</span><span class="p">:</span><span class="w"> </span><span class="s">&quot;New Post&quot;</span><span class="p" data-group-id="2534063643-4">}</span><span class="p">,</span><span class="w"> </span><span class="ss">log?</span><span class="p">:</span><span class="w"> </span><span class="no">true</span><span class="p" data-group-id="2534063643-3">)</span></code></pre>

  </body>
</html>
