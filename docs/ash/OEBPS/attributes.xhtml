<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"
      xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>Attributes - ash v3.5.33</title>
    <meta name="generator" content="ExDoc v0.38.2" />
    <link type="text/css" rel="stylesheet" href="dist/epub-elixir-FNUUKFP7.css" />
    <script src="dist/epub-4WIP524F.js"></script>

  </head>
  <body class="content-inner">

    <h1 id="content">Attributes</h1>
<p>Attributes specify the <code class="inline">name</code>, <code class="inline">type</code> and additional configuration of a simple property of a record. When using SQL data layers, for example, an attribute would correspond to a column in a database table. For information on types, see <a href="Ash.Type.xhtml"><code class="inline">Ash.Type</code></a>.</p><p>To see all of the options available when building attributes, see <code class="inline">d:Ash.Resource.Dsl.attributes.attribute</code></p><p>If you are looking to compute values on demand, see the <a href="calculations.xhtml">Calculations guide</a> and the <a href="aggregates.xhtml">aggregates guide</a>.</p><h2 id="special-attributes">Special attributes</h2><p>In Ash there are 4 special attributes these are:</p><ul><li><code class="inline">create_timestamp</code></li><li><code class="inline">update_timestamp</code></li><li><code class="inline">integer_primary_key</code></li><li><code class="inline">uuid_primary_key</code></li></ul><p>These are really just shorthand for an attribute with specific options set. They're outlined below.</p><h3 id="create_timestamp"><code class="inline">create_timestamp</code></h3><p>You may recognise this if you have used Ecto before. This attribute will record the time at which each row is created, by default it uses <a href="https://hexdocs.pm/elixir/DateTime.html#utc_now/1"><code class="inline">DateTime.utc_now/1</code></a>.</p><p><code class="inline">create_timestamp :inserted_at</code> is equivalent to an attribute with these options:</p><pre><code class="makeup elixir" translate="no"><span class="n">attribute</span><span class="w"> </span><span class="ss">:inserted_at</span><span class="p">,</span><span class="w"> </span><span class="ss">:utc_datetime_usec</span><span class="w"> </span><span class="k" data-group-id="7764832832-1">do</span><span class="w">
  </span><span class="n">writable?</span><span class="w"> </span><span class="no">false</span><span class="w">
  </span><span class="n">default</span><span class="w"> </span><span class="o">&amp;</span><span class="nc">DateTime</span><span class="o">.</span><span class="n">utc_now</span><span class="o">/</span><span class="mi">0</span><span class="w">
  </span><span class="n">match_other_defaults?</span><span class="w"> </span><span class="no">true</span><span class="w">
  </span><span class="n">allow_nil?</span><span class="w"> </span><span class="no">false</span><span class="w">
</span><span class="k" data-group-id="7764832832-1">end</span></code></pre><h3 id="update_timestamp"><code class="inline">update_timestamp</code></h3><p>This is also similar in Ecto. This attribute records the last time a row was updated, also using <a href="https://hexdocs.pm/elixir/DateTime.html#utc_now/1"><code class="inline">DateTime.utc_now/1</code></a> by default.</p><p><code class="inline">update_timestamp :updated_at</code> is equivalent to:</p><pre><code class="makeup elixir" translate="no"><span class="n">attribute</span><span class="w"> </span><span class="ss">:updated_at</span><span class="p">,</span><span class="w"> </span><span class="ss">:utc_datetime_usec</span><span class="w"> </span><span class="k" data-group-id="5580785600-1">do</span><span class="w">
  </span><span class="n">writable?</span><span class="w"> </span><span class="no">false</span><span class="w">
  </span><span class="n">default</span><span class="w"> </span><span class="o">&amp;</span><span class="nc">DateTime</span><span class="o">.</span><span class="n">utc_now</span><span class="o">/</span><span class="mi">0</span><span class="w">
  </span><span class="n">update_default</span><span class="w"> </span><span class="o">&amp;</span><span class="nc">DateTime</span><span class="o">.</span><span class="n">utc_now</span><span class="o">/</span><span class="mi">0</span><span class="w">
  </span><span class="n">match_other_defaults?</span><span class="w"> </span><span class="no">true</span><span class="w">
  </span><span class="n">allow_nil?</span><span class="w"> </span><span class="no">false</span><span class="w">
</span><span class="k" data-group-id="5580785600-1">end</span></code></pre><h3 id="uuid_primary_key"><code class="inline">uuid_primary_key</code></h3><p>This attribute is used in almost every resource. It generates a UUID every time a new record is made.
<code class="inline">uuid_primary_key :id</code> is equivalent to:</p><pre><code class="makeup elixir" translate="no"><span class="n">attribute</span><span class="w"> </span><span class="ss">:id</span><span class="p">,</span><span class="w"> </span><span class="ss">:uuid</span><span class="w"> </span><span class="k" data-group-id="1819724339-1">do</span><span class="w">
  </span><span class="n">writable?</span><span class="w"> </span><span class="no">false</span><span class="w">
  </span><span class="n">default</span><span class="w"> </span><span class="o">&amp;</span><span class="nc">Ash.UUID</span><span class="o">.</span><span class="n">generate</span><span class="o">/</span><span class="mi">0</span><span class="w">
  </span><span class="n">primary_key?</span><span class="w"> </span><span class="no">true</span><span class="w">
  </span><span class="n">allow_nil?</span><span class="w"> </span><span class="no">false</span><span class="w">
</span><span class="k" data-group-id="1819724339-1">end</span></code></pre><h3 id="integer_primary_key"><code class="inline">integer_primary_key</code></h3><p>Creates a generated integer primary key. Keep in mind that not all data layers support auto incrementing ids, but for SQL data layers this is a very common practice. For those that don't, it is your own job to provide values for the primary key. We generally suggest using UUIDs over integers, as there are <a href="https://www.clever-cloud.com/blog/engineering/2015/05/20/why-auto-increment-is-a-terrible-idea/">a lot of good reasons to not use autoincrementing integer ids</a>.</p><p><code class="inline">integer_primary_key :id</code> is equivalent to:</p><pre><code class="makeup elixir" translate="no"><span class="n">attribute</span><span class="w"> </span><span class="ss">:id</span><span class="p">,</span><span class="w"> </span><span class="ss">:integer</span><span class="w"> </span><span class="k" data-group-id="8140991177-1">do</span><span class="w">
  </span><span class="n">writable?</span><span class="w"> </span><span class="no">false</span><span class="w">
  </span><span class="n">generated?</span><span class="w"> </span><span class="no">true</span><span class="w">
  </span><span class="n">primary_key?</span><span class="w"> </span><span class="no">true</span><span class="w">
  </span><span class="n">allow_nil?</span><span class="w"> </span><span class="no">false</span><span class="w">
</span><span class="k" data-group-id="8140991177-1">end</span></code></pre>

  </body>
</html>
