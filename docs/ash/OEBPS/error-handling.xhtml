<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"
      xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>Error Handling - ash v3.5.33</title>
    <meta name="generator" content="ExDoc v0.38.2" />
    <link type="text/css" rel="stylesheet" href="dist/epub-elixir-FNUUKFP7.css" />
    <script src="dist/epub-4WIP524F.js"></script>

  </head>
  <body class="content-inner">

    <h1 id="content">Error Handling</h1>
<p>As of 3.0, Ash uses <a href="https://hexdocs.pm/splode/0.2.9/Splode.html"><code class="inline">Splode</code></a> to as our basis for errors. The documentation below still applies, but it is powered by <a href="https://hexdocs.pm/splode/0.2.9/Splode.html"><code class="inline">Splode</code></a> under the hood.</p><p>There is a difficult balance to cut between informative errors and enabling simple reactions to those errors. Since many extensions may need to work with and/or adapt their behavior based on errors coming from Ash, we need rich error messages. However, when you have a hundred different exceptions to represent the various kinds of errors a system can produce, it becomes difficult to say something like &quot;try this code, and if it is invalid, do x, if it is forbidden, do y. To this effect, exceptions in Ash have one of four classes mapping to the top level exceptions.</p><h2 id="error-classes">Error Classes</h2><ul><li>forbidden - <a href="Ash.Error.Forbidden.xhtml"><code class="inline">Ash.Error.Forbidden</code></a></li><li>invalid - <a href="Ash.Error.Invalid.xhtml"><code class="inline">Ash.Error.Invalid</code></a></li><li>framework - <a href="Ash.Error.Framework.xhtml"><code class="inline">Ash.Error.Framework</code></a></li><li>unknown - <a href="Ash.Error.Unknown.xhtml"><code class="inline">Ash.Error.Unknown</code></a></li></ul><p>Since many actions can be happening at once, we want to support the presence of multiple errors as a result of a request to Ash. We do this by grouping up the errors into one before returning or raising.
We choose an exception based on the order of the exceptions listed above. If there is a single forbidden, we choose <a href="Ash.Error.Forbidden.xhtml"><code class="inline">Ash.Error.Forbidden</code></a>, if there is a single invalid, we choose <a href="Ash.Error.Invalid.xhtml"><code class="inline">Ash.Error.Invalid</code></a> and so on. The actual errors will be included in the <code class="inline">errors</code> key on the exception. The exception's message will contain a bulleted list of all the underlying exceptions that occurred. This makes it easy to react to specific kinds of errors, as well as to react to <em>any/all</em> of the errors present.</p><p>An example of a single error being raised, representing multiple underlying errors:</p><pre><code class="makeup elixir" translate="no"><span class="nc">AshExample.Representative</span><span class="w">
</span><span class="o">|&gt;</span><span class="w"> </span><span class="nc">Ash.Changeset</span><span class="o">.</span><span class="n">for_create</span><span class="p" data-group-id="6547435646-1">(</span><span class="ss">:create</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="6547435646-2">%{</span><span class="ss">employee_id</span><span class="p">:</span><span class="w"> </span><span class="s">&quot;the best&quot;</span><span class="p" data-group-id="6547435646-2">}</span><span class="p" data-group-id="6547435646-1">)</span><span class="w">
</span><span class="o">|&gt;</span><span class="w"> </span><span class="nc">Ash</span><span class="o">.</span><span class="n">create!</span><span class="p" data-group-id="6547435646-3">(</span><span class="p" data-group-id="6547435646-3">)</span><span class="w">
 </span><span class="gt">** (Ash.Error.Invalid) Invalid Error</span><span class="w">
 </span><span class="o">*</span><span class="w"> </span><span class="ss">employee_id</span><span class="p">:</span><span class="w"> </span><span class="n">must</span><span class="w"> </span><span class="n">be</span><span class="w"> </span><span class="n">absent</span><span class="o">.</span><span class="w">
 </span><span class="o">*</span><span class="w"> </span><span class="n">first_name</span><span class="p">,</span><span class="w"> </span><span class="ss">last_name</span><span class="p">:</span><span class="w"> </span><span class="n">at</span><span class="w"> </span><span class="n">least</span><span class="w"> </span><span class="mi">1</span><span class="w"> </span><span class="n">must</span><span class="w"> </span><span class="n">be</span><span class="w"> </span><span class="n">present</span><span class="o">.</span></code></pre><p>This allows easy rescuing of the major error classes, as well as inspection of the underlying cases</p><pre><code class="makeup elixir" translate="no"><span class="k">try</span><span class="w"> </span><span class="k" data-group-id="8994876651-1">do</span><span class="w">
  </span><span class="nc">AshExample.Representative</span><span class="w">
  </span><span class="o">|&gt;</span><span class="w"> </span><span class="nc">Ash.Changeset</span><span class="o">.</span><span class="n">for_create</span><span class="p" data-group-id="8994876651-2">(</span><span class="ss">:create</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="8994876651-3">%{</span><span class="ss">employee_id</span><span class="p">:</span><span class="w"> </span><span class="s">&quot;dabes&quot;</span><span class="p" data-group-id="8994876651-3">}</span><span class="p" data-group-id="8994876651-2">)</span><span class="w">
  </span><span class="o">|&gt;</span><span class="w"> </span><span class="nc">Ash</span><span class="o">.</span><span class="n">create!</span><span class="p" data-group-id="8994876651-4">(</span><span class="p" data-group-id="8994876651-4">)</span><span class="w">
</span><span class="k" data-group-id="8994876651-1">rescue</span><span class="w">
  </span><span class="n">e</span><span class="w"> </span><span class="ow">in</span><span class="w"> </span><span class="nc">Ash.Error.Invalid</span><span class="w"> </span><span class="o">-&gt;</span><span class="w">
    </span><span class="s">&quot;Encountered </span><span class="si" data-group-id="8994876651-5">#{</span><span class="nc">Enum</span><span class="o">.</span><span class="n">count</span><span class="p" data-group-id="8994876651-6">(</span><span class="n">e</span><span class="o">.</span><span class="n">errors</span><span class="p" data-group-id="8994876651-6">)</span><span class="si" data-group-id="8994876651-5">}</span><span class="s"> errors&quot;</span><span class="w">
</span><span class="k" data-group-id="8994876651-1">end</span><span class="w">

</span><span class="s">&quot;Encountered 2 errors&quot;</span></code></pre><p>This pattern does add some additional overhead when you want to rescue specific kinds of errors. For example, you may need to do something like this:</p><pre><code class="makeup elixir" translate="no"><span class="k">try</span><span class="w"> </span><span class="k" data-group-id="4329202179-1">do</span><span class="w">
  </span><span class="nc">AshExample.Representative</span><span class="w">
  </span><span class="o">|&gt;</span><span class="w"> </span><span class="nc">Ash.Changeset</span><span class="o">.</span><span class="n">for_create</span><span class="p" data-group-id="4329202179-2">(</span><span class="ss">:create</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="4329202179-3">%{</span><span class="ss">employee_id</span><span class="p">:</span><span class="w"> </span><span class="s">&quot;dabes&quot;</span><span class="p" data-group-id="4329202179-3">}</span><span class="p" data-group-id="4329202179-2">)</span><span class="w">
  </span><span class="o">|&gt;</span><span class="w"> </span><span class="nc">Ash</span><span class="o">.</span><span class="n">create!</span><span class="p" data-group-id="4329202179-4">(</span><span class="p" data-group-id="4329202179-4">)</span><span class="w">
</span><span class="k" data-group-id="4329202179-1">rescue</span><span class="w">
  </span><span class="n">e</span><span class="w"> </span><span class="ow">in</span><span class="w"> </span><span class="nc">Ash.Error.Invalid</span><span class="w"> </span><span class="o">-&gt;</span><span class="w">
    </span><span class="k">case</span><span class="w"> </span><span class="nc">Enum</span><span class="o">.</span><span class="n">find</span><span class="p" data-group-id="4329202179-5">(</span><span class="n">e</span><span class="o">.</span><span class="n">errors</span><span class="p">,</span><span class="w"> </span><span class="o">&amp;</span><span class="p" data-group-id="4329202179-6">(</span><span class="ni">&amp;1</span><span class="o">.</span><span class="c">__struct__</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="nc">A.Specific.Error</span><span class="p" data-group-id="4329202179-6">)</span><span class="p" data-group-id="4329202179-5">)</span><span class="w"> </span><span class="k" data-group-id="4329202179-7">do</span><span class="w">
      </span><span class="no">nil</span><span class="w"> </span><span class="o">-&gt;</span><span class="w">
        </span><span class="n">...</span><span class="n">handle</span><span class="w"> </span><span class="n">errors</span><span class="w">
      </span><span class="n">error</span><span class="w"> </span><span class="o">-&gt;</span><span class="w">
        </span><span class="n">...</span><span class="n">handle</span><span class="w"> </span><span class="n">specific</span><span class="w"> </span><span class="n">error</span><span class="w"> </span><span class="n">you</span><span class="w"> </span><span class="n">found</span><span class="w">
    </span><span class="k" data-group-id="4329202179-7">end</span><span class="w">
</span><span class="k" data-group-id="4329202179-1">end</span></code></pre><h2 id="error-handlers">Error Handlers</h2><p>Create, update and destroy actions can be provided with an <code class="inline">error_handler</code>, which can be used to modify the errors
before they are returned. This is not an error <em>recovery</em> mechanism, rather a way to control the shape of
errors that are returned. For more information on the callback itself, see <a href="Ash.Changeset.xhtml#handle_errors/2"><code class="inline">Ash.Changeset.handle_errors/2</code></a>.</p><p>Example usage:</p><pre><code class="makeup elixir" translate="no"><span class="n">create</span><span class="w"> </span><span class="ss">:upsert_article_by_slug</span><span class="w"> </span><span class="k" data-group-id="0318969028-1">do</span><span class="w">
  </span><span class="n">upsert?</span><span class="w"> </span><span class="no">true</span><span class="w">
  </span><span class="n">accept</span><span class="w"> </span><span class="p" data-group-id="0318969028-2">[</span><span class="ss">:slug</span><span class="p">,</span><span class="w"> </span><span class="ss">:title</span><span class="p">,</span><span class="w"> </span><span class="ss">:body</span><span class="p" data-group-id="0318969028-2">]</span><span class="w">
  </span><span class="n">upsert_identity</span><span class="w"> </span><span class="ss">:unique_slug</span><span class="w">
  </span><span class="n">upsert_condition</span><span class="w"> </span><span class="n">expr</span><span class="p" data-group-id="0318969028-3">(</span><span class="n">user_id</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="o">^</span><span class="n">actor</span><span class="p" data-group-id="0318969028-4">(</span><span class="ss">:id</span><span class="p" data-group-id="0318969028-4">)</span><span class="p" data-group-id="0318969028-3">)</span><span class="w">
  </span><span class="n">error_handler</span><span class="w"> </span><span class="k" data-group-id="0318969028-5">fn</span><span class="w"> 
    </span><span class="c">_changeset</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="0318969028-6">%</span><span class="nc" data-group-id="0318969028-6">Ash.Error.Changes.StaleRecord</span><span class="p" data-group-id="0318969028-6">{</span><span class="p" data-group-id="0318969028-6">}</span><span class="w"> </span><span class="o">-&gt;</span><span class="w">
      </span><span class="nc">Ash.Error.Changes.InvalidChanges</span><span class="o">.</span><span class="n">exception</span><span class="p" data-group-id="0318969028-7">(</span><span class="ss">field</span><span class="p">:</span><span class="w"> </span><span class="ss">:slug</span><span class="p">,</span><span class="w"> </span><span class="ss">message</span><span class="p">:</span><span class="w"> </span><span class="s">&quot;has already been taken&quot;</span><span class="p" data-group-id="0318969028-7">)</span><span class="w">

    </span><span class="bp">_</span><span class="w"> </span><span class="n">changeset</span><span class="p">,</span><span class="w"> </span><span class="n">other</span><span class="w"> </span><span class="o">-&gt;</span><span class="w">
      </span><span class="c1"># leave other errors untouched</span><span class="w">
      </span><span class="n">other</span><span class="w">
  </span><span class="k" data-group-id="0318969028-5">end</span><span class="w">
</span><span class="k" data-group-id="0318969028-1">end</span></code></pre><h2 id="generating-errors">Generating Errors</h2><p>When returning errors from behaviors or adding errors to a
changeset/query/action input, multiple formats are supported. You can return a
simple String, which will be converted into an <a href="Ash.Error.Unknown.xhtml"><code class="inline">Ash.Error.Unknown</code></a> exception.
You can also return a keyword list containing <code class="inline">field</code> or <code class="inline">fields</code> and <code class="inline">message</code>,
which will be used to construct an <code class="inline">Ash.Error.Invalid.InvalidChanges</code> error.
Finally, you can pass an exception directly, which will be used as is if it is
an Ash error, or wrapped in an <a href="Ash.Error.Unknown.xhtml"><code class="inline">Ash.Error.Unknown</code></a> if it is not.</p><p>Technically <em>any</em> value can be used as an error, but will be wrapped in an
<a href="Ash.Error.Unknown.xhtml"><code class="inline">Ash.Error.Unknown</code></a> accordingly.</p><section role="note" class="admonition info"><h3 id="use-exception-modules" class="admonition-title info">Use exception modules</h3><p>You should prefer to use the exception modules provided by Ash, or ones
that you have defined manually. This allows you to document your error
types, and to show those errors over API interfaces. See the section
on APIs below for more.</p></section><h2 id="examples-of-using-non-standard-errors">Examples of using non standard errors</h2><h3 id="keyword-list-ash-error-changes-invalidchanges">Keyword list (<a href="Ash.Error.Changes.InvalidChanges.xhtml"><code class="inline">Ash.Error.Changes.InvalidChanges</code></a>)</h3><pre><code class="makeup elixir" translate="no"><span class="kd">def</span><span class="w"> </span><span class="nf">change</span><span class="p" data-group-id="4690390277-1">(</span><span class="n">changeset</span><span class="p">,</span><span class="w"> </span><span class="bp">_</span><span class="p">,</span><span class="w"> </span><span class="bp">_</span><span class="p" data-group-id="4690390277-1">)</span><span class="w"> </span><span class="k" data-group-id="4690390277-2">do</span><span class="w">
  </span><span class="k">if</span><span class="w"> </span><span class="n">under_21?</span><span class="p" data-group-id="4690390277-3">(</span><span class="n">changeset</span><span class="p" data-group-id="4690390277-3">)</span><span class="w"> </span><span class="k" data-group-id="4690390277-4">do</span><span class="w">
    </span><span class="nc">Ash.Changeset</span><span class="o">.</span><span class="n">add_error</span><span class="p" data-group-id="4690390277-5">(</span><span class="n">changeset</span><span class="p">,</span><span class="w"> </span><span class="ss">field</span><span class="p">:</span><span class="w"> </span><span class="ss">:age</span><span class="p">,</span><span class="w"> </span><span class="ss">message</span><span class="p">:</span><span class="w"> </span><span class="s">&quot;must be 21 or older&quot;</span><span class="p" data-group-id="4690390277-5">)</span><span class="w">
  </span><span class="k" data-group-id="4690390277-4">else</span><span class="w">
    </span><span class="n">changeset</span><span class="w">
  </span><span class="k" data-group-id="4690390277-4">end</span><span class="w">
</span><span class="k" data-group-id="4690390277-2">end</span></code></pre><h3 id="string-ash-error-unknown-unknownerror">String (<a href="Ash.Error.Unknown.UnknownError.xhtml"><code class="inline">Ash.Error.Unknown.UnknownError</code></a>)</h3><pre><code class="makeup elixir" translate="no"><span class="kd">def</span><span class="w"> </span><span class="nf">change</span><span class="p" data-group-id="6735346264-1">(</span><span class="n">changeset</span><span class="p">,</span><span class="w"> </span><span class="bp">_</span><span class="p">,</span><span class="w"> </span><span class="bp">_</span><span class="p" data-group-id="6735346264-1">)</span><span class="w"> </span><span class="k" data-group-id="6735346264-2">do</span><span class="w">
  </span><span class="k">if</span><span class="w"> </span><span class="n">under_21?</span><span class="p" data-group-id="6735346264-3">(</span><span class="n">changeset</span><span class="p" data-group-id="6735346264-3">)</span><span class="w"> </span><span class="k" data-group-id="6735346264-4">do</span><span class="w">
    </span><span class="nc">Ash.Changeset</span><span class="o">.</span><span class="n">add_error</span><span class="p" data-group-id="6735346264-5">(</span><span class="n">changeset</span><span class="p">,</span><span class="w"> </span><span class="s">&quot;must be 21 or older&quot;</span><span class="p" data-group-id="6735346264-5">)</span><span class="w">
  </span><span class="k" data-group-id="6735346264-4">else</span><span class="w">
    </span><span class="n">changeset</span><span class="w">
  </span><span class="k" data-group-id="6735346264-4">end</span><span class="w">
</span><span class="k" data-group-id="6735346264-2">end</span></code></pre><h2 id="using-an-exception-module">Using an exception module</h2><p>These are all modules under <code class="inline">Ash.Error.*</code>. You can create a new one with <code class="inline">error.exception(options)</code>, and the options are documented in each exception. This documentation is missing in some cases. Go to the source code of the exception to see its special options. All of them support the <code class="inline">vars</code> option, which are values to be interpolated into the message, useful for things like translation.</p><p>For example:</p><pre><code class="makeup elixir" translate="no"><span class="kd">def</span><span class="w"> </span><span class="nf">change</span><span class="p" data-group-id="9529607436-1">(</span><span class="n">changeset</span><span class="p">,</span><span class="w"> </span><span class="bp">_</span><span class="p">,</span><span class="w"> </span><span class="bp">_</span><span class="p" data-group-id="9529607436-1">)</span><span class="w"> </span><span class="k" data-group-id="9529607436-2">do</span><span class="w">
  </span><span class="k">if</span><span class="w"> </span><span class="n">under_21?</span><span class="p" data-group-id="9529607436-3">(</span><span class="n">changeset</span><span class="p" data-group-id="9529607436-3">)</span><span class="w"> </span><span class="k" data-group-id="9529607436-4">do</span><span class="w">
    </span><span class="n">error</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nc">Ash.Error.Changes.Required</span><span class="o">.</span><span class="n">exception</span><span class="p" data-group-id="9529607436-5">(</span><span class="w">
      </span><span class="ss">field</span><span class="p">:</span><span class="w"> </span><span class="ss">:foo</span><span class="p">,</span><span class="w">
      </span><span class="ss">type</span><span class="p">:</span><span class="w"> </span><span class="ss">:attribute</span><span class="p">,</span><span class="w">
      </span><span class="ss">resource</span><span class="p">:</span><span class="w"> </span><span class="n">changeset</span><span class="o">.</span><span class="n">resource</span><span class="w">
    </span><span class="p" data-group-id="9529607436-5">)</span><span class="w">

    </span><span class="nc">Ash.Changeset</span><span class="o">.</span><span class="n">add_error</span><span class="p" data-group-id="9529607436-6">(</span><span class="n">changeset</span><span class="p">,</span><span class="w"> </span><span class="n">error</span><span class="p" data-group-id="9529607436-6">)</span><span class="w">
  </span><span class="k" data-group-id="9529607436-4">else</span><span class="w">
    </span><span class="n">changeset</span><span class="w">
  </span><span class="k" data-group-id="9529607436-4">end</span><span class="w">
</span><span class="k" data-group-id="9529607436-2">end</span></code></pre><h3 id="using-a-custom-exception">Using a Custom Exception</h3><p>You can create a custom exception like so. This is an example of a builtin exception that you could mirror to build your own</p><pre><code class="makeup elixir" translate="no"><span class="kd">defmodule</span><span class="w"> </span><span class="nc">MyApp.Errors.Invalid.TooYoung</span><span class="w"> </span><span class="k" data-group-id="7079806942-1">do</span><span class="w">
  </span><span class="na">@moduledoc</span><span class="w"> </span><span class="s">&quot;Used when a user who is too young is attempted to be created&quot;</span><span class="w">
  </span><span class="kn">use</span><span class="w"> </span><span class="nc">Splode.Error</span><span class="p">,</span><span class="w"> </span><span class="ss">fields</span><span class="p">:</span><span class="w"> </span><span class="p" data-group-id="7079806942-2">[</span><span class="ss">:age</span><span class="p" data-group-id="7079806942-2">]</span><span class="p">,</span><span class="w"> </span><span class="ss">class</span><span class="p">:</span><span class="w"> </span><span class="ss">:invalid</span><span class="w">

  </span><span class="kd">def</span><span class="w"> </span><span class="nf">message</span><span class="p" data-group-id="7079806942-3">(</span><span class="n">error</span><span class="p" data-group-id="7079806942-3">)</span><span class="w"> </span><span class="k" data-group-id="7079806942-4">do</span><span class="w">
    </span><span class="s">&quot;&quot;&quot;
    Must be 21 or older, got: </span><span class="si" data-group-id="7079806942-5">#{</span><span class="n">error</span><span class="o">.</span><span class="n">age</span><span class="si" data-group-id="7079806942-5">}</span><span class="s">.
    &quot;&quot;&quot;</span><span class="w">
  </span><span class="k" data-group-id="7079806942-4">end</span><span class="w">
</span><span class="k" data-group-id="7079806942-1">end</span><span class="w">

</span><span class="kd">def</span><span class="w"> </span><span class="nf">change</span><span class="p" data-group-id="7079806942-6">(</span><span class="n">changeset</span><span class="p">,</span><span class="w"> </span><span class="bp">_</span><span class="p">,</span><span class="w"> </span><span class="bp">_</span><span class="p" data-group-id="7079806942-6">)</span><span class="w"> </span><span class="k" data-group-id="7079806942-7">do</span><span class="w">
  </span><span class="k">if</span><span class="w"> </span><span class="n">under_21?</span><span class="p" data-group-id="7079806942-8">(</span><span class="n">changeset</span><span class="p" data-group-id="7079806942-8">)</span><span class="w"> </span><span class="k" data-group-id="7079806942-9">do</span><span class="w">
    </span><span class="n">error</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nc">MyApp.Errors.Invalid.TooYoung</span><span class="o">.</span><span class="n">exception</span><span class="p" data-group-id="7079806942-10">(</span><span class="w">
      </span><span class="ss">age</span><span class="p">:</span><span class="w"> </span><span class="nc">Ash.Changeset</span><span class="o">.</span><span class="n">get_attribute</span><span class="p" data-group-id="7079806942-11">(</span><span class="n">changeset</span><span class="p">,</span><span class="w"> </span><span class="ss">:age</span><span class="p" data-group-id="7079806942-11">)</span><span class="w">
    </span><span class="p" data-group-id="7079806942-10">)</span><span class="w">

    </span><span class="nc">Ash.Changeset</span><span class="o">.</span><span class="n">add_error</span><span class="p" data-group-id="7079806942-12">(</span><span class="n">changeset</span><span class="p">,</span><span class="w"> </span><span class="n">error</span><span class="p" data-group-id="7079806942-12">)</span><span class="w">
  </span><span class="k" data-group-id="7079806942-9">else</span><span class="w">
    </span><span class="n">changeset</span><span class="w">
  </span><span class="k" data-group-id="7079806942-9">end</span><span class="w">
</span><span class="k" data-group-id="7079806942-7">end</span></code></pre><h2 id="showing-errors-over-apis">Showing errors over APIs</h2><p>AshJsonApi and AshGraphql both use a special protocol to determine how (and if) a raised or returned error should be displayed.</p><p>See the relevant docs:</p><ul><li><a href="https://hexdocs.pm/ash_graphql/handle-errors.html">handling errors in AshGraphql</a></li><li><a href="https://hexdocs.pm/ash_json_api/AshJsonApi.ToJsonApiError.html">AshJsonApi.ToJsonApiError</a></li></ul>

  </body>
</html>
