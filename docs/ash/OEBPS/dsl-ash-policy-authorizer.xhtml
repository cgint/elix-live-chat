<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"
      xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>Ash.Policy.Authorizer - ash v3.5.33</title>
    <meta name="generator" content="ExDoc v0.38.2" />
    <link type="text/css" rel="stylesheet" href="dist/epub-elixir-FNUUKFP7.css" />
    <script src="dist/epub-4WIP524F.js"></script>

  </head>
  <body class="content-inner">

    <h1 id="content">Ash.Policy.Authorizer</h1>
<p>An authorization extension for ash resources.</p><p>To add this extension to a resource, add it to the list of <code class="inline">authorizers</code> like so:</p><pre><code class="makeup elixir" translate="no"><span class="kn">use</span><span class="w"> </span><span class="nc">Ash.Resource</span><span class="p">,</span><span class="w">
  </span><span class="n">...</span><span class="p">,</span><span class="w">
  </span><span class="ss">authorizers</span><span class="p">:</span><span class="w"> </span><span class="p" data-group-id="8334523197-1">[</span><span class="w">
    </span><span class="nc">Ash.Policy.Authorizer</span><span class="w">
  </span><span class="p" data-group-id="8334523197-1">]</span></code></pre><p>A resource can be given a set of policies, which are enforced on each call to a resource action.</p><p>For reads, policies can be configured to filter out data that the actor shouldn't see, as opposed to
resulting in a forbidden error.</p><p>See the <a href="policies.xhtml">policies guide</a> for practical examples.</p><p>Policies are solved/managed via a boolean satisfiability solver. To read more about boolean satisfiability,
see this page: <a href="https://en.wikipedia.org/wiki/Boolean_satisfiability_problem">https://en.wikipedia.org/wiki/Boolean_satisfiability_problem</a>. At the end of
the day, however, it is not necessary to understand exactly how Ash takes your
authorization requirements and determines if a request is allowed. The
important thing to understand is that Ash may or may not run any/all of your
authorization rules as they may be deemed unnecessary. As such, authorization
checks should have no side effects. Ideally, the checks built-in to ash should
cover the bulk of your needs.</p><h2 id="policies">policies</h2><p>A section for declaring authorization policies.</p><p>Each policy that applies must pass independently in order for the
request to be authorized.</p><p>See the <a href="policies.xhtml">policies guide</a> for more.</p><h3 id="nested-dsls">Nested DSLs</h3><ul><li><a href="#policies-policy">policy</a><ul><li>authorize_if</li><li>forbid_if</li><li>authorize_unless</li><li>forbid_unless</li></ul></li><li><a href="#policies-policy_group">policy_group</a><ul><li>policy<ul><li>authorize_if</li><li>forbid_if</li><li>authorize_unless</li><li>forbid_unless</li></ul></li></ul></li><li><a href="#policies-bypass">bypass</a><ul><li>authorize_if</li><li>forbid_if</li><li>authorize_unless</li><li>forbid_unless</li></ul></li></ul><h3 id="examples">Examples</h3><pre><code class="makeup elixir" translate="no"><span class="n">policies</span><span class="w"> </span><span class="k" data-group-id="5683228693-1">do</span><span class="w">
  </span><span class="c1"># Anything you can use in a condition, you can use in a check, and vice-versa</span><span class="w">
  </span><span class="c1"># This policy applies if the actor is a super_user</span><span class="w">
  </span><span class="c1"># Additionally, this policy is declared as a `bypass`. That means that this check is allowed to fail without</span><span class="w">
  </span><span class="c1"># failing the whole request, and that if this check *passes*, the entire request passes.</span><span class="w">
  </span><span class="n">bypass</span><span class="w"> </span><span class="n">actor_attribute_equals</span><span class="p" data-group-id="5683228693-2">(</span><span class="ss">:super_user</span><span class="p">,</span><span class="w"> </span><span class="no">true</span><span class="p" data-group-id="5683228693-2">)</span><span class="w"> </span><span class="k" data-group-id="5683228693-3">do</span><span class="w">
    </span><span class="n">authorize_if</span><span class="w"> </span><span class="n">always</span><span class="p" data-group-id="5683228693-4">(</span><span class="p" data-group-id="5683228693-4">)</span><span class="w">
  </span><span class="k" data-group-id="5683228693-3">end</span><span class="w">

  </span><span class="c1"># This will likely be a common occurrence. Specifically, policies that apply to all read actions</span><span class="w">
  </span><span class="n">policy</span><span class="w"> </span><span class="n">action_type</span><span class="p" data-group-id="5683228693-5">(</span><span class="ss">:read</span><span class="p" data-group-id="5683228693-5">)</span><span class="w"> </span><span class="k" data-group-id="5683228693-6">do</span><span class="w">
    </span><span class="c1"># unless the actor is an active user, forbid their request</span><span class="w">
    </span><span class="n">forbid_unless</span><span class="w"> </span><span class="n">actor_attribute_equals</span><span class="p" data-group-id="5683228693-7">(</span><span class="ss">:active</span><span class="p">,</span><span class="w"> </span><span class="no">true</span><span class="p" data-group-id="5683228693-7">)</span><span class="w">
    </span><span class="c1"># if the record is marked as public, authorize the request</span><span class="w">
    </span><span class="n">authorize_if</span><span class="w"> </span><span class="n">attribute</span><span class="p" data-group-id="5683228693-8">(</span><span class="ss">:public</span><span class="p">,</span><span class="w"> </span><span class="no">true</span><span class="p" data-group-id="5683228693-8">)</span><span class="w">
    </span><span class="c1"># if the actor is related to the data via that data&#39;s `owner` relationship, authorize the request</span><span class="w">
    </span><span class="n">authorize_if</span><span class="w"> </span><span class="n">relates_to_actor_via</span><span class="p" data-group-id="5683228693-9">(</span><span class="ss">:owner</span><span class="p" data-group-id="5683228693-9">)</span><span class="w">
  </span><span class="k" data-group-id="5683228693-6">end</span><span class="w">
</span><span class="k" data-group-id="5683228693-1">end</span><span class="w">
</span></code></pre><h3 id="options">Options</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a href="#policies-default_access_type" id="policies-default_access_type"><code class="inline">default_access_type</code></a></td><td style="text-align: left;"><code class="inline">:strict | :filter | :runtime</code></td><td style="text-align: left;"><code class="inline">:filter</code></td><td style="text-align: left;">The default access type of policies for this resource.</td></tr></tbody></table><h3 id="policies-policy">policies.policy</h3><pre><code class="makeup elixir" translate="no"><span class="n">policy</span><span class="w"> </span><span class="n">condition</span><span class="w"> </span><span class="o">\\</span><span class="w"> </span><span class="no">nil</span></code></pre><p>A policy has a name, a condition, and a list of checks.</p><p>Checks apply logically in the order they are specified, from top to bottom.
If no check explicitly authorizes the request, then the request is forbidden.
This means that, if you want to &quot;blacklist&quot; instead of &quot;whitelist&quot;, you likely
want to add an <code class="inline">authorize_if always()</code> at the bottom of your policy, like so:</p><pre><code class="makeup elixir" translate="no"><span class="n">policy</span><span class="w"> </span><span class="n">action_type</span><span class="p" data-group-id="6171247141-1">(</span><span class="ss">:read</span><span class="p" data-group-id="6171247141-1">)</span><span class="w"> </span><span class="k" data-group-id="6171247141-2">do</span><span class="w">
</span><span class="n">forbid_if</span><span class="w"> </span><span class="n">not_logged_in</span><span class="p" data-group-id="6171247141-3">(</span><span class="p" data-group-id="6171247141-3">)</span><span class="w">
</span><span class="n">forbid_if</span><span class="w"> </span><span class="n">user_is_denylisted</span><span class="p" data-group-id="6171247141-4">(</span><span class="p" data-group-id="6171247141-4">)</span><span class="w">
</span><span class="n">forbid_if</span><span class="w"> </span><span class="n">user_is_in_denylisted_group</span><span class="p" data-group-id="6171247141-5">(</span><span class="p" data-group-id="6171247141-5">)</span><span class="w">

</span><span class="n">authorize_if</span><span class="w"> </span><span class="n">always</span><span class="p" data-group-id="6171247141-6">(</span><span class="p" data-group-id="6171247141-6">)</span><span class="w">
</span><span class="k" data-group-id="6171247141-2">end</span></code></pre><p>If the policy should always run, use the <code class="inline">always()</code> check, like so:</p><pre><code class="makeup elixir" translate="no"><span class="n">policy</span><span class="w"> </span><span class="n">always</span><span class="p" data-group-id="7303282389-1">(</span><span class="p" data-group-id="7303282389-1">)</span><span class="w"> </span><span class="k" data-group-id="7303282389-2">do</span><span class="w">
</span><span class="n">...</span><span class="w">
</span><span class="k" data-group-id="7303282389-2">end</span></code></pre><p>See the <a href="policies.xhtml">policies guide</a> for more.</p><h3 id="nested-dsls-1">Nested DSLs</h3><ul><li><a href="#policies-policy-authorize_if">authorize_if</a></li><li><a href="#policies-policy-forbid_if">forbid_if</a></li><li><a href="#policies-policy-authorize_unless">authorize_unless</a></li><li><a href="#policies-policy-forbid_unless">forbid_unless</a></li></ul><h3 id="arguments">Arguments</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a href="#policies-policy-condition" id="policies-policy-condition"><code class="inline">condition</code></a></td><td style="text-align: left;"><code class="inline">any</code></td><td style="text-align: left;"></td><td style="text-align: left;">A check or list of checks that must be true in order for this policy to apply.</td></tr></tbody></table><h3 id="options-1">Options</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a href="#policies-policy-description" id="policies-policy-description"><code class="inline">description</code></a></td><td style="text-align: left;"><code class="inline">String.t</code></td><td style="text-align: left;"></td><td style="text-align: left;">A description for the policy, used when explaining authorization results</td></tr><tr><td style="text-align: left;"><a href="#policies-policy-access_type" id="policies-policy-access_type"><code class="inline">access_type</code></a></td><td style="text-align: left;"><code class="inline">:strict | :filter | :runtime</code></td><td style="text-align: left;"></td><td style="text-align: left;">Determines how the policy is applied. See the guide for more.</td></tr></tbody></table><h3 id="policies-policy-authorize_if">policies.policy.authorize_if</h3><pre><code class="makeup elixir" translate="no"><span class="n">authorize_if</span><span class="w"> </span><span class="n">check</span></code></pre><p>If the check is true, the request is authorized, otherwise run remaining checks.</p><h3 id="examples-1">Examples</h3><pre><code class="makeup elixir" translate="no"><span class="n">authorize_if</span><span class="w"> </span><span class="n">logged_in</span><span class="p" data-group-id="5494449805-1">(</span><span class="p" data-group-id="5494449805-1">)</span></code></pre><pre><code class="makeup elixir" translate="no"><span class="n">authorize_if</span><span class="w"> </span><span class="n">actor_attribute_matches_record</span><span class="p" data-group-id="9944187015-1">(</span><span class="ss">:group</span><span class="p">,</span><span class="w"> </span><span class="ss">:group</span><span class="p" data-group-id="9944187015-1">)</span></code></pre><h3 id="arguments-1">Arguments</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a class="spark-required" href="#policies-policy-authorize_if-check" id="policies-policy-authorize_if-check"><code class="inline">check</code></a></td><td style="text-align: left;"><code class="inline">any | module</code></td><td style="text-align: left;"></td><td style="text-align: left;">The check to run. See <a href="Ash.Policy.Check.xhtml"><code class="inline">Ash.Policy.Check</code></a> for more.</td></tr></tbody></table><h3 id="options-2">Options</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a href="#policies-policy-authorize_if-name" id="policies-policy-authorize_if-name"><code class="inline">name</code></a></td><td style="text-align: left;"><code class="inline">String.t</code></td><td style="text-align: left;"></td><td style="text-align: left;">A short name or description for the check, used when explaining authorization results</td></tr></tbody></table><h3 id="introspection">Introspection</h3><p>Target: <a href="Ash.Policy.Check.xhtml"><code class="inline">Ash.Policy.Check</code></a></p><h3 id="policies-policy-forbid_if">policies.policy.forbid_if</h3><pre><code class="makeup elixir" translate="no"><span class="n">forbid_if</span><span class="w"> </span><span class="n">check</span></code></pre><p>If the check is true, the request is forbidden, otherwise run remaining checks.</p><h3 id="examples-2">Examples</h3><pre><code class="makeup elixir" translate="no"><span class="n">forbid_if</span><span class="w"> </span><span class="n">not_logged_in</span><span class="p" data-group-id="9907225161-1">(</span><span class="p" data-group-id="9907225161-1">)</span></code></pre><pre><code class="makeup elixir" translate="no"><span class="n">forbid_if</span><span class="w"> </span><span class="n">actor_attribute_matches_record</span><span class="p" data-group-id="1204834816-1">(</span><span class="ss">:group</span><span class="p">,</span><span class="w"> </span><span class="ss">:blacklisted_groups</span><span class="p" data-group-id="1204834816-1">)</span></code></pre><h3 id="arguments-2">Arguments</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a class="spark-required" href="#policies-policy-forbid_if-check" id="policies-policy-forbid_if-check"><code class="inline">check</code></a></td><td style="text-align: left;"><code class="inline">any | module</code></td><td style="text-align: left;"></td><td style="text-align: left;">The check to run. See <a href="Ash.Policy.Check.xhtml"><code class="inline">Ash.Policy.Check</code></a> for more.</td></tr></tbody></table><h3 id="options-3">Options</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a href="#policies-policy-forbid_if-name" id="policies-policy-forbid_if-name"><code class="inline">name</code></a></td><td style="text-align: left;"><code class="inline">String.t</code></td><td style="text-align: left;"></td><td style="text-align: left;">A short name or description for the check, used when explaining authorization results</td></tr></tbody></table><h3 id="introspection-1">Introspection</h3><p>Target: <a href="Ash.Policy.Check.xhtml"><code class="inline">Ash.Policy.Check</code></a></p><h3 id="policies-policy-authorize_unless">policies.policy.authorize_unless</h3><pre><code class="makeup elixir" translate="no"><span class="n">authorize_unless</span><span class="w"> </span><span class="n">check</span></code></pre><p>If the check is true, run remaining checks, otherwise the request is authorized.</p><h3 id="examples-3">Examples</h3><pre><code class="makeup elixir" translate="no"><span class="n">authorize_unless</span><span class="w"> </span><span class="n">not_logged_in</span><span class="p" data-group-id="7215826638-1">(</span><span class="p" data-group-id="7215826638-1">)</span></code></pre><pre><code class="makeup elixir" translate="no"><span class="n">authorize_unless</span><span class="w"> </span><span class="n">actor_attribute_matches_record</span><span class="p" data-group-id="2565996159-1">(</span><span class="ss">:group</span><span class="p">,</span><span class="w"> </span><span class="ss">:blacklisted_groups</span><span class="p" data-group-id="2565996159-1">)</span></code></pre><h3 id="arguments-3">Arguments</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a class="spark-required" href="#policies-policy-authorize_unless-check" id="policies-policy-authorize_unless-check"><code class="inline">check</code></a></td><td style="text-align: left;"><code class="inline">any | module</code></td><td style="text-align: left;"></td><td style="text-align: left;">The check to run. See <a href="Ash.Policy.Check.xhtml"><code class="inline">Ash.Policy.Check</code></a> for more.</td></tr></tbody></table><h3 id="options-4">Options</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a href="#policies-policy-authorize_unless-name" id="policies-policy-authorize_unless-name"><code class="inline">name</code></a></td><td style="text-align: left;"><code class="inline">String.t</code></td><td style="text-align: left;"></td><td style="text-align: left;">A short name or description for the check, used when explaining authorization results</td></tr></tbody></table><h3 id="introspection-2">Introspection</h3><p>Target: <a href="Ash.Policy.Check.xhtml"><code class="inline">Ash.Policy.Check</code></a></p><h3 id="policies-policy-forbid_unless">policies.policy.forbid_unless</h3><pre><code class="makeup elixir" translate="no"><span class="n">forbid_unless</span><span class="w"> </span><span class="n">check</span></code></pre><p>If the check is true, run remaining checks, otherwise the request is forbidden.</p><h3 id="examples-4">Examples</h3><pre><code class="makeup elixir" translate="no"><span class="n">forbid_unless</span><span class="w"> </span><span class="n">logged_in</span><span class="p" data-group-id="2644702069-1">(</span><span class="p" data-group-id="2644702069-1">)</span></code></pre><pre><code class="makeup elixir" translate="no"><span class="n">forbid_unless</span><span class="w"> </span><span class="n">actor_attribute_matches_record</span><span class="p" data-group-id="7676474159-1">(</span><span class="ss">:group</span><span class="p">,</span><span class="w"> </span><span class="ss">:group</span><span class="p" data-group-id="7676474159-1">)</span></code></pre><h3 id="arguments-4">Arguments</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a class="spark-required" href="#policies-policy-forbid_unless-check" id="policies-policy-forbid_unless-check"><code class="inline">check</code></a></td><td style="text-align: left;"><code class="inline">any | module</code></td><td style="text-align: left;"></td><td style="text-align: left;">The check to run. See <a href="Ash.Policy.Check.xhtml"><code class="inline">Ash.Policy.Check</code></a> for more.</td></tr></tbody></table><h3 id="options-5">Options</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a href="#policies-policy-forbid_unless-name" id="policies-policy-forbid_unless-name"><code class="inline">name</code></a></td><td style="text-align: left;"><code class="inline">String.t</code></td><td style="text-align: left;"></td><td style="text-align: left;">A short name or description for the check, used when explaining authorization results</td></tr></tbody></table><h3 id="introspection-3">Introspection</h3><p>Target: <a href="Ash.Policy.Check.xhtml"><code class="inline">Ash.Policy.Check</code></a></p><h3 id="introspection-4">Introspection</h3><p>Target: <a href="Ash.Policy.Policy.xhtml"><code class="inline">Ash.Policy.Policy</code></a></p><h3 id="policies-policy_group">policies.policy_group</h3><pre><code class="makeup elixir" translate="no"><span class="n">policy_group</span><span class="w"> </span><span class="n">condition</span></code></pre><p>Groups a set of policies together by some condition.</p><p>If the condition on the policy group does not apply, then none of the policies within it apply.</p><p>This is primarily syntactic sugar. At compile time, the conditions from the policy group are
added to each policy it contains, and the list is flattened out. This exists primarily to make it
easier to reason about and write policies.</p><p>The following are equivalent:</p><pre><code class="makeup elixir" translate="no"><span class="n">policy_group</span><span class="w"> </span><span class="n">condition1</span><span class="w"> </span><span class="k" data-group-id="0315620097-1">do</span><span class="w">
</span><span class="n">policy</span><span class="w"> </span><span class="n">condition2</span><span class="w"> </span><span class="k" data-group-id="0315620097-2">do</span><span class="w">
</span><span class="n">...</span><span class="w">
</span><span class="k" data-group-id="0315620097-2">end</span><span class="w">

</span><span class="n">policy</span><span class="w"> </span><span class="n">condition3</span><span class="w"> </span><span class="k" data-group-id="0315620097-3">do</span><span class="w">
</span><span class="n">...</span><span class="w">
</span><span class="k" data-group-id="0315620097-3">end</span><span class="w">
</span><span class="k" data-group-id="0315620097-1">end</span></code></pre><p>and</p><pre><code class="makeup elixir" translate="no"><span class="n">policy</span><span class="w"> </span><span class="p" data-group-id="6658459313-1">[</span><span class="n">condition1</span><span class="p">,</span><span class="w"> </span><span class="n">condition2</span><span class="p" data-group-id="6658459313-1">]</span><span class="w"> </span><span class="k" data-group-id="6658459313-2">do</span><span class="w">
</span><span class="n">...</span><span class="w">
</span><span class="k" data-group-id="6658459313-2">end</span><span class="w">

</span><span class="n">policy</span><span class="w"> </span><span class="p" data-group-id="6658459313-3">[</span><span class="n">condition1</span><span class="p">,</span><span class="w"> </span><span class="n">condition3</span><span class="p" data-group-id="6658459313-3">]</span><span class="w"> </span><span class="k" data-group-id="6658459313-4">do</span><span class="w">
</span><span class="n">...</span><span class="w">
</span><span class="k" data-group-id="6658459313-4">end</span></code></pre><h3 id="nested-dsls-2">Nested DSLs</h3><ul><li><a href="#policies-policy_group-policy">policy</a><ul><li>authorize_if</li><li>forbid_if</li><li>authorize_unless</li><li>forbid_unless</li></ul></li></ul><h3 id="arguments-5">Arguments</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a href="#policies-policy_group-condition" id="policies-policy_group-condition"><code class="inline">condition</code></a></td><td style="text-align: left;"><code class="inline">any</code></td><td style="text-align: left;"></td><td style="text-align: left;">A check or list of checks that must be true in order for this policy to apply.</td></tr></tbody></table><h3 id="policies-policy_group-policy">policies.policy_group.policy</h3><pre><code class="makeup elixir" translate="no"><span class="n">policy</span><span class="w"> </span><span class="n">condition</span><span class="w"> </span><span class="o">\\</span><span class="w"> </span><span class="no">nil</span></code></pre><p>A policy has a name, a condition, and a list of checks.</p><p>Checks apply logically in the order they are specified, from top to bottom.
If no check explicitly authorizes the request, then the request is forbidden.
This means that, if you want to &quot;blacklist&quot; instead of &quot;whitelist&quot;, you likely
want to add an <code class="inline">authorize_if always()</code> at the bottom of your policy, like so:</p><pre><code class="makeup elixir" translate="no"><span class="n">policy</span><span class="w"> </span><span class="n">action_type</span><span class="p" data-group-id="0280871184-1">(</span><span class="ss">:read</span><span class="p" data-group-id="0280871184-1">)</span><span class="w"> </span><span class="k" data-group-id="0280871184-2">do</span><span class="w">
</span><span class="n">forbid_if</span><span class="w"> </span><span class="n">not_logged_in</span><span class="p" data-group-id="0280871184-3">(</span><span class="p" data-group-id="0280871184-3">)</span><span class="w">
</span><span class="n">forbid_if</span><span class="w"> </span><span class="n">user_is_denylisted</span><span class="p" data-group-id="0280871184-4">(</span><span class="p" data-group-id="0280871184-4">)</span><span class="w">
</span><span class="n">forbid_if</span><span class="w"> </span><span class="n">user_is_in_denylisted_group</span><span class="p" data-group-id="0280871184-5">(</span><span class="p" data-group-id="0280871184-5">)</span><span class="w">

</span><span class="n">authorize_if</span><span class="w"> </span><span class="n">always</span><span class="p" data-group-id="0280871184-6">(</span><span class="p" data-group-id="0280871184-6">)</span><span class="w">
</span><span class="k" data-group-id="0280871184-2">end</span></code></pre><p>If the policy should always run, use the <code class="inline">always()</code> check, like so:</p><pre><code class="makeup elixir" translate="no"><span class="n">policy</span><span class="w"> </span><span class="n">always</span><span class="p" data-group-id="2417903884-1">(</span><span class="p" data-group-id="2417903884-1">)</span><span class="w"> </span><span class="k" data-group-id="2417903884-2">do</span><span class="w">
</span><span class="n">...</span><span class="w">
</span><span class="k" data-group-id="2417903884-2">end</span></code></pre><p>See the <a href="policies.xhtml">policies guide</a> for more.</p><h3 id="nested-dsls-3">Nested DSLs</h3><ul><li><a href="#policies-policy_group-policy-authorize_if">authorize_if</a></li><li><a href="#policies-policy_group-policy-forbid_if">forbid_if</a></li><li><a href="#policies-policy_group-policy-authorize_unless">authorize_unless</a></li><li><a href="#policies-policy_group-policy-forbid_unless">forbid_unless</a></li></ul><h3 id="arguments-6">Arguments</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a href="#policies-policy_group-policy-condition" id="policies-policy_group-policy-condition"><code class="inline">condition</code></a></td><td style="text-align: left;"><code class="inline">any</code></td><td style="text-align: left;"></td><td style="text-align: left;">A check or list of checks that must be true in order for this policy to apply.</td></tr></tbody></table><h3 id="options-6">Options</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a href="#policies-policy_group-policy-description" id="policies-policy_group-policy-description"><code class="inline">description</code></a></td><td style="text-align: left;"><code class="inline">String.t</code></td><td style="text-align: left;"></td><td style="text-align: left;">A description for the policy, used when explaining authorization results</td></tr><tr><td style="text-align: left;"><a href="#policies-policy_group-policy-access_type" id="policies-policy_group-policy-access_type"><code class="inline">access_type</code></a></td><td style="text-align: left;"><code class="inline">:strict | :filter | :runtime</code></td><td style="text-align: left;"></td><td style="text-align: left;">Determines how the policy is applied. See the guide for more.</td></tr></tbody></table><h3 id="policies-policy_group-policy-authorize_if">policies.policy_group.policy.authorize_if</h3><pre><code class="makeup elixir" translate="no"><span class="n">authorize_if</span><span class="w"> </span><span class="n">check</span></code></pre><p>If the check is true, the request is authorized, otherwise run remaining checks.</p><h3 id="examples-5">Examples</h3><pre><code class="makeup elixir" translate="no"><span class="n">authorize_if</span><span class="w"> </span><span class="n">logged_in</span><span class="p" data-group-id="9632570109-1">(</span><span class="p" data-group-id="9632570109-1">)</span></code></pre><pre><code class="makeup elixir" translate="no"><span class="n">authorize_if</span><span class="w"> </span><span class="n">actor_attribute_matches_record</span><span class="p" data-group-id="7481843564-1">(</span><span class="ss">:group</span><span class="p">,</span><span class="w"> </span><span class="ss">:group</span><span class="p" data-group-id="7481843564-1">)</span></code></pre><h3 id="arguments-7">Arguments</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a class="spark-required" href="#policies-policy_group-policy-authorize_if-check" id="policies-policy_group-policy-authorize_if-check"><code class="inline">check</code></a></td><td style="text-align: left;"><code class="inline">any | module</code></td><td style="text-align: left;"></td><td style="text-align: left;">The check to run. See <a href="Ash.Policy.Check.xhtml"><code class="inline">Ash.Policy.Check</code></a> for more.</td></tr></tbody></table><h3 id="options-7">Options</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a href="#policies-policy_group-policy-authorize_if-name" id="policies-policy_group-policy-authorize_if-name"><code class="inline">name</code></a></td><td style="text-align: left;"><code class="inline">String.t</code></td><td style="text-align: left;"></td><td style="text-align: left;">A short name or description for the check, used when explaining authorization results</td></tr></tbody></table><h3 id="introspection-5">Introspection</h3><p>Target: <a href="Ash.Policy.Check.xhtml"><code class="inline">Ash.Policy.Check</code></a></p><h3 id="policies-policy_group-policy-forbid_if">policies.policy_group.policy.forbid_if</h3><pre><code class="makeup elixir" translate="no"><span class="n">forbid_if</span><span class="w"> </span><span class="n">check</span></code></pre><p>If the check is true, the request is forbidden, otherwise run remaining checks.</p><h3 id="examples-6">Examples</h3><pre><code class="makeup elixir" translate="no"><span class="n">forbid_if</span><span class="w"> </span><span class="n">not_logged_in</span><span class="p" data-group-id="7841563138-1">(</span><span class="p" data-group-id="7841563138-1">)</span></code></pre><pre><code class="makeup elixir" translate="no"><span class="n">forbid_if</span><span class="w"> </span><span class="n">actor_attribute_matches_record</span><span class="p" data-group-id="2544585877-1">(</span><span class="ss">:group</span><span class="p">,</span><span class="w"> </span><span class="ss">:blacklisted_groups</span><span class="p" data-group-id="2544585877-1">)</span></code></pre><h3 id="arguments-8">Arguments</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a class="spark-required" href="#policies-policy_group-policy-forbid_if-check" id="policies-policy_group-policy-forbid_if-check"><code class="inline">check</code></a></td><td style="text-align: left;"><code class="inline">any | module</code></td><td style="text-align: left;"></td><td style="text-align: left;">The check to run. See <a href="Ash.Policy.Check.xhtml"><code class="inline">Ash.Policy.Check</code></a> for more.</td></tr></tbody></table><h3 id="options-8">Options</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a href="#policies-policy_group-policy-forbid_if-name" id="policies-policy_group-policy-forbid_if-name"><code class="inline">name</code></a></td><td style="text-align: left;"><code class="inline">String.t</code></td><td style="text-align: left;"></td><td style="text-align: left;">A short name or description for the check, used when explaining authorization results</td></tr></tbody></table><h3 id="introspection-6">Introspection</h3><p>Target: <a href="Ash.Policy.Check.xhtml"><code class="inline">Ash.Policy.Check</code></a></p><h3 id="policies-policy_group-policy-authorize_unless">policies.policy_group.policy.authorize_unless</h3><pre><code class="makeup elixir" translate="no"><span class="n">authorize_unless</span><span class="w"> </span><span class="n">check</span></code></pre><p>If the check is true, run remaining checks, otherwise the request is authorized.</p><h3 id="examples-7">Examples</h3><pre><code class="makeup elixir" translate="no"><span class="n">authorize_unless</span><span class="w"> </span><span class="n">not_logged_in</span><span class="p" data-group-id="0388170690-1">(</span><span class="p" data-group-id="0388170690-1">)</span></code></pre><pre><code class="makeup elixir" translate="no"><span class="n">authorize_unless</span><span class="w"> </span><span class="n">actor_attribute_matches_record</span><span class="p" data-group-id="2451368461-1">(</span><span class="ss">:group</span><span class="p">,</span><span class="w"> </span><span class="ss">:blacklisted_groups</span><span class="p" data-group-id="2451368461-1">)</span></code></pre><h3 id="arguments-9">Arguments</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a class="spark-required" href="#policies-policy_group-policy-authorize_unless-check" id="policies-policy_group-policy-authorize_unless-check"><code class="inline">check</code></a></td><td style="text-align: left;"><code class="inline">any | module</code></td><td style="text-align: left;"></td><td style="text-align: left;">The check to run. See <a href="Ash.Policy.Check.xhtml"><code class="inline">Ash.Policy.Check</code></a> for more.</td></tr></tbody></table><h3 id="options-9">Options</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a href="#policies-policy_group-policy-authorize_unless-name" id="policies-policy_group-policy-authorize_unless-name"><code class="inline">name</code></a></td><td style="text-align: left;"><code class="inline">String.t</code></td><td style="text-align: left;"></td><td style="text-align: left;">A short name or description for the check, used when explaining authorization results</td></tr></tbody></table><h3 id="introspection-7">Introspection</h3><p>Target: <a href="Ash.Policy.Check.xhtml"><code class="inline">Ash.Policy.Check</code></a></p><h3 id="policies-policy_group-policy-forbid_unless">policies.policy_group.policy.forbid_unless</h3><pre><code class="makeup elixir" translate="no"><span class="n">forbid_unless</span><span class="w"> </span><span class="n">check</span></code></pre><p>If the check is true, run remaining checks, otherwise the request is forbidden.</p><h3 id="examples-8">Examples</h3><pre><code class="makeup elixir" translate="no"><span class="n">forbid_unless</span><span class="w"> </span><span class="n">logged_in</span><span class="p" data-group-id="8933321750-1">(</span><span class="p" data-group-id="8933321750-1">)</span></code></pre><pre><code class="makeup elixir" translate="no"><span class="n">forbid_unless</span><span class="w"> </span><span class="n">actor_attribute_matches_record</span><span class="p" data-group-id="8669840262-1">(</span><span class="ss">:group</span><span class="p">,</span><span class="w"> </span><span class="ss">:group</span><span class="p" data-group-id="8669840262-1">)</span></code></pre><h3 id="arguments-10">Arguments</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a class="spark-required" href="#policies-policy_group-policy-forbid_unless-check" id="policies-policy_group-policy-forbid_unless-check"><code class="inline">check</code></a></td><td style="text-align: left;"><code class="inline">any | module</code></td><td style="text-align: left;"></td><td style="text-align: left;">The check to run. See <a href="Ash.Policy.Check.xhtml"><code class="inline">Ash.Policy.Check</code></a> for more.</td></tr></tbody></table><h3 id="options-10">Options</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a href="#policies-policy_group-policy-forbid_unless-name" id="policies-policy_group-policy-forbid_unless-name"><code class="inline">name</code></a></td><td style="text-align: left;"><code class="inline">String.t</code></td><td style="text-align: left;"></td><td style="text-align: left;">A short name or description for the check, used when explaining authorization results</td></tr></tbody></table><h3 id="introspection-8">Introspection</h3><p>Target: <a href="Ash.Policy.Check.xhtml"><code class="inline">Ash.Policy.Check</code></a></p><h3 id="introspection-9">Introspection</h3><p>Target: <a href="Ash.Policy.Policy.xhtml"><code class="inline">Ash.Policy.Policy</code></a></p><h3 id="introspection-10">Introspection</h3><p>Target: <a href="Ash.Policy.PolicyGroup.xhtml"><code class="inline">Ash.Policy.PolicyGroup</code></a></p><h3 id="policies-bypass">policies.bypass</h3><pre><code class="makeup elixir" translate="no"><span class="n">bypass</span><span class="w"> </span><span class="n">condition</span><span class="w"> </span><span class="o">\\</span><span class="w"> </span><span class="no">nil</span></code></pre><p>A policy that, if passed, will skip all following policies. If failed, authorization moves on to the next policy</p><h3 id="nested-dsls-4">Nested DSLs</h3><ul><li><a href="#policies-bypass-authorize_if">authorize_if</a></li><li><a href="#policies-bypass-forbid_if">forbid_if</a></li><li><a href="#policies-bypass-authorize_unless">authorize_unless</a></li><li><a href="#policies-bypass-forbid_unless">forbid_unless</a></li></ul><h3 id="arguments-11">Arguments</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a href="#policies-bypass-condition" id="policies-bypass-condition"><code class="inline">condition</code></a></td><td style="text-align: left;"><code class="inline">any</code></td><td style="text-align: left;"></td><td style="text-align: left;">A check or list of checks that must be true in order for this policy to apply.</td></tr></tbody></table><h3 id="options-11">Options</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a href="#policies-bypass-description" id="policies-bypass-description"><code class="inline">description</code></a></td><td style="text-align: left;"><code class="inline">String.t</code></td><td style="text-align: left;"></td><td style="text-align: left;">A description for the policy, used when explaining authorization results</td></tr><tr><td style="text-align: left;"><a href="#policies-bypass-access_type" id="policies-bypass-access_type"><code class="inline">access_type</code></a></td><td style="text-align: left;"><code class="inline">:strict | :filter | :runtime</code></td><td style="text-align: left;"></td><td style="text-align: left;">Determines how the policy is applied. See the guide for more.</td></tr></tbody></table><h3 id="policies-bypass-authorize_if">policies.bypass.authorize_if</h3><pre><code class="makeup elixir" translate="no"><span class="n">authorize_if</span><span class="w"> </span><span class="n">check</span></code></pre><p>If the check is true, the request is authorized, otherwise run remaining checks.</p><h3 id="examples-9">Examples</h3><pre><code class="makeup elixir" translate="no"><span class="n">authorize_if</span><span class="w"> </span><span class="n">logged_in</span><span class="p" data-group-id="9007252534-1">(</span><span class="p" data-group-id="9007252534-1">)</span></code></pre><pre><code class="makeup elixir" translate="no"><span class="n">authorize_if</span><span class="w"> </span><span class="n">actor_attribute_matches_record</span><span class="p" data-group-id="4700873040-1">(</span><span class="ss">:group</span><span class="p">,</span><span class="w"> </span><span class="ss">:group</span><span class="p" data-group-id="4700873040-1">)</span></code></pre><h3 id="arguments-12">Arguments</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a class="spark-required" href="#policies-bypass-authorize_if-check" id="policies-bypass-authorize_if-check"><code class="inline">check</code></a></td><td style="text-align: left;"><code class="inline">any | module</code></td><td style="text-align: left;"></td><td style="text-align: left;">The check to run. See <a href="Ash.Policy.Check.xhtml"><code class="inline">Ash.Policy.Check</code></a> for more.</td></tr></tbody></table><h3 id="options-12">Options</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a href="#policies-bypass-authorize_if-name" id="policies-bypass-authorize_if-name"><code class="inline">name</code></a></td><td style="text-align: left;"><code class="inline">String.t</code></td><td style="text-align: left;"></td><td style="text-align: left;">A short name or description for the check, used when explaining authorization results</td></tr></tbody></table><h3 id="introspection-11">Introspection</h3><p>Target: <a href="Ash.Policy.Check.xhtml"><code class="inline">Ash.Policy.Check</code></a></p><h3 id="policies-bypass-forbid_if">policies.bypass.forbid_if</h3><pre><code class="makeup elixir" translate="no"><span class="n">forbid_if</span><span class="w"> </span><span class="n">check</span></code></pre><p>If the check is true, the request is forbidden, otherwise run remaining checks.</p><h3 id="examples-10">Examples</h3><pre><code class="makeup elixir" translate="no"><span class="n">forbid_if</span><span class="w"> </span><span class="n">not_logged_in</span><span class="p" data-group-id="6166211307-1">(</span><span class="p" data-group-id="6166211307-1">)</span></code></pre><pre><code class="makeup elixir" translate="no"><span class="n">forbid_if</span><span class="w"> </span><span class="n">actor_attribute_matches_record</span><span class="p" data-group-id="2627229107-1">(</span><span class="ss">:group</span><span class="p">,</span><span class="w"> </span><span class="ss">:blacklisted_groups</span><span class="p" data-group-id="2627229107-1">)</span></code></pre><h3 id="arguments-13">Arguments</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a class="spark-required" href="#policies-bypass-forbid_if-check" id="policies-bypass-forbid_if-check"><code class="inline">check</code></a></td><td style="text-align: left;"><code class="inline">any | module</code></td><td style="text-align: left;"></td><td style="text-align: left;">The check to run. See <a href="Ash.Policy.Check.xhtml"><code class="inline">Ash.Policy.Check</code></a> for more.</td></tr></tbody></table><h3 id="options-13">Options</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a href="#policies-bypass-forbid_if-name" id="policies-bypass-forbid_if-name"><code class="inline">name</code></a></td><td style="text-align: left;"><code class="inline">String.t</code></td><td style="text-align: left;"></td><td style="text-align: left;">A short name or description for the check, used when explaining authorization results</td></tr></tbody></table><h3 id="introspection-12">Introspection</h3><p>Target: <a href="Ash.Policy.Check.xhtml"><code class="inline">Ash.Policy.Check</code></a></p><h3 id="policies-bypass-authorize_unless">policies.bypass.authorize_unless</h3><pre><code class="makeup elixir" translate="no"><span class="n">authorize_unless</span><span class="w"> </span><span class="n">check</span></code></pre><p>If the check is true, run remaining checks, otherwise the request is authorized.</p><h3 id="examples-11">Examples</h3><pre><code class="makeup elixir" translate="no"><span class="n">authorize_unless</span><span class="w"> </span><span class="n">not_logged_in</span><span class="p" data-group-id="1576622156-1">(</span><span class="p" data-group-id="1576622156-1">)</span></code></pre><pre><code class="makeup elixir" translate="no"><span class="n">authorize_unless</span><span class="w"> </span><span class="n">actor_attribute_matches_record</span><span class="p" data-group-id="3925870935-1">(</span><span class="ss">:group</span><span class="p">,</span><span class="w"> </span><span class="ss">:blacklisted_groups</span><span class="p" data-group-id="3925870935-1">)</span></code></pre><h3 id="arguments-14">Arguments</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a class="spark-required" href="#policies-bypass-authorize_unless-check" id="policies-bypass-authorize_unless-check"><code class="inline">check</code></a></td><td style="text-align: left;"><code class="inline">any | module</code></td><td style="text-align: left;"></td><td style="text-align: left;">The check to run. See <a href="Ash.Policy.Check.xhtml"><code class="inline">Ash.Policy.Check</code></a> for more.</td></tr></tbody></table><h3 id="options-14">Options</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a href="#policies-bypass-authorize_unless-name" id="policies-bypass-authorize_unless-name"><code class="inline">name</code></a></td><td style="text-align: left;"><code class="inline">String.t</code></td><td style="text-align: left;"></td><td style="text-align: left;">A short name or description for the check, used when explaining authorization results</td></tr></tbody></table><h3 id="introspection-13">Introspection</h3><p>Target: <a href="Ash.Policy.Check.xhtml"><code class="inline">Ash.Policy.Check</code></a></p><h3 id="policies-bypass-forbid_unless">policies.bypass.forbid_unless</h3><pre><code class="makeup elixir" translate="no"><span class="n">forbid_unless</span><span class="w"> </span><span class="n">check</span></code></pre><p>If the check is true, run remaining checks, otherwise the request is forbidden.</p><h3 id="examples-12">Examples</h3><pre><code class="makeup elixir" translate="no"><span class="n">forbid_unless</span><span class="w"> </span><span class="n">logged_in</span><span class="p" data-group-id="3520692815-1">(</span><span class="p" data-group-id="3520692815-1">)</span></code></pre><pre><code class="makeup elixir" translate="no"><span class="n">forbid_unless</span><span class="w"> </span><span class="n">actor_attribute_matches_record</span><span class="p" data-group-id="8170548042-1">(</span><span class="ss">:group</span><span class="p">,</span><span class="w"> </span><span class="ss">:group</span><span class="p" data-group-id="8170548042-1">)</span></code></pre><h3 id="arguments-15">Arguments</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a class="spark-required" href="#policies-bypass-forbid_unless-check" id="policies-bypass-forbid_unless-check"><code class="inline">check</code></a></td><td style="text-align: left;"><code class="inline">any | module</code></td><td style="text-align: left;"></td><td style="text-align: left;">The check to run. See <a href="Ash.Policy.Check.xhtml"><code class="inline">Ash.Policy.Check</code></a> for more.</td></tr></tbody></table><h3 id="options-15">Options</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a href="#policies-bypass-forbid_unless-name" id="policies-bypass-forbid_unless-name"><code class="inline">name</code></a></td><td style="text-align: left;"><code class="inline">String.t</code></td><td style="text-align: left;"></td><td style="text-align: left;">A short name or description for the check, used when explaining authorization results</td></tr></tbody></table><h3 id="introspection-14">Introspection</h3><p>Target: <a href="Ash.Policy.Check.xhtml"><code class="inline">Ash.Policy.Check</code></a></p><h3 id="introspection-15">Introspection</h3><p>Target: <a href="Ash.Policy.Policy.xhtml"><code class="inline">Ash.Policy.Policy</code></a></p><h2 id="field_policies">field_policies</h2><p>Authorize access to specific fields via policies scoped to fields.</p><p>If <em>any</em> field policies exist then <em>all</em> fields must be authorized by a field policy.
If you want a &quot;deny-list&quot; style, then you can add policies for specific fields
and add a catch-all policy using the special field name <code class="inline">:*</code>. All policies that apply
to a field must be authorized.</p><p>The only exception to the above behavior is primary keys, which can always be read by everyone.</p><p>Additionally, keep in mind that adding <a href="Ash.Policy.Authorizer.xhtml"><code class="inline">Ash.Policy.Authorizer</code></a> will require that all actions
pass policies. If you want to just add field policies, you will need to add a policy that allows
all access explicitly, i.e</p><pre><code class="makeup elixir" translate="no"><span class="n">policies</span><span class="w"> </span><span class="k" data-group-id="6656624511-1">do</span><span class="w">
</span><span class="n">policy</span><span class="w"> </span><span class="n">always</span><span class="p" data-group-id="6656624511-2">(</span><span class="p" data-group-id="6656624511-2">)</span><span class="w"> </span><span class="k" data-group-id="6656624511-3">do</span><span class="w">
</span><span class="n">authorize_if</span><span class="w"> </span><span class="n">always</span><span class="p" data-group-id="6656624511-4">(</span><span class="p" data-group-id="6656624511-4">)</span><span class="w">
</span><span class="k" data-group-id="6656624511-3">end</span><span class="w">
</span><span class="k" data-group-id="6656624511-1">end</span></code></pre><p>Using expressions: unlike in regular policies, expressions in field policies cannot refer
to related entities currently. Instead, you will need to create aggregates or expression calculations
that return the results you want to reference.</p><p>In results, forbidden fields will be replaced with a special value: <code class="inline">%Ash.ForbiddenField{}</code>.</p><p>When these fields are referred to in filters, they will be replaced with an expression that evaluates
to <code class="inline">nil</code>. To support this behavior, only expression/filter checks are allowed in field policies.</p><h3 id="nested-dsls-5">Nested DSLs</h3><ul><li><a href="#field_policies-field_policy_bypass">field_policy_bypass</a><ul><li>authorize_if</li><li>forbid_if</li><li>authorize_unless</li><li>forbid_unless</li></ul></li><li><a href="#field_policies-field_policy">field_policy</a><ul><li>authorize_if</li><li>forbid_if</li><li>authorize_unless</li><li>forbid_unless</li></ul></li></ul><h3 id="examples-13">Examples</h3><pre><code class="makeup elixir" translate="no"><span class="n">field_policies</span><span class="w"> </span><span class="k" data-group-id="2545810715-1">do</span><span class="w">
  </span><span class="n">field_policy</span><span class="w"> </span><span class="ss">:admin_only_field</span><span class="w"> </span><span class="k" data-group-id="2545810715-2">do</span><span class="w">
    </span><span class="n">authorize_if</span><span class="w"> </span><span class="n">actor_attribute_equals</span><span class="p" data-group-id="2545810715-3">(</span><span class="ss">:admin</span><span class="p">,</span><span class="w"> </span><span class="no">true</span><span class="p" data-group-id="2545810715-3">)</span><span class="w">
  </span><span class="k" data-group-id="2545810715-2">end</span><span class="w">
</span><span class="k" data-group-id="2545810715-1">end</span><span class="w">
</span></code></pre><pre><code class="makeup elixir" translate="no"><span class="c1"># Example of denylist style</span><span class="w">
</span><span class="n">field_policies</span><span class="w"> </span><span class="k" data-group-id="4012741670-1">do</span><span class="w">
  </span><span class="n">field_policy</span><span class="w"> </span><span class="p" data-group-id="4012741670-2">[</span><span class="ss">:sensitive</span><span class="p">,</span><span class="w"> </span><span class="ss">:fields</span><span class="p" data-group-id="4012741670-2">]</span><span class="w"> </span><span class="k" data-group-id="4012741670-3">do</span><span class="w">
    </span><span class="n">authorize_if</span><span class="w"> </span><span class="n">actor_attribute_equals</span><span class="p" data-group-id="4012741670-4">(</span><span class="ss">:admin</span><span class="p">,</span><span class="w"> </span><span class="no">true</span><span class="p" data-group-id="4012741670-4">)</span><span class="w">
  </span><span class="k" data-group-id="4012741670-3">end</span><span class="w">

  </span><span class="n">field_policy</span><span class="w"> </span><span class="ss">:*</span><span class="w"> </span><span class="k" data-group-id="4012741670-5">do</span><span class="w">
    </span><span class="n">authorize_if</span><span class="w"> </span><span class="n">always</span><span class="p" data-group-id="4012741670-6">(</span><span class="p" data-group-id="4012741670-6">)</span><span class="w">
  </span><span class="k" data-group-id="4012741670-5">end</span><span class="w">
</span><span class="k" data-group-id="4012741670-1">end</span><span class="w">
</span></code></pre><h3 id="options-16">Options</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a href="#field_policies-private_fields" id="field_policies-private_fields"><code class="inline">private_fields</code></a></td><td style="text-align: left;"><code class="inline">:show | :hide | :include</code></td><td style="text-align: left;"><code class="inline">:show</code></td><td style="text-align: left;">How private fields should be handled by field policies in internal functions. See the <a href="policies.xhtml#field-policies">Policies guide</a> for more.</td></tr></tbody></table><h3 id="field_policies-field_policy_bypass">field_policies.field_policy_bypass</h3><pre><code class="makeup elixir" translate="no"><span class="n">field_policy_bypass</span><span class="w"> </span><span class="n">fields</span><span class="p">,</span><span class="w"> </span><span class="n">condition</span><span class="w"> </span><span class="o">\\</span><span class="w"> </span><span class="no">nil</span></code></pre><p>A field policy that, if passed, will skip all following field policies for that field or fields. If failed, field authorization moves on to the next policy</p><h3 id="nested-dsls-6">Nested DSLs</h3><ul><li><a href="#field_policies-field_policy_bypass-authorize_if">authorize_if</a></li><li><a href="#field_policies-field_policy_bypass-forbid_if">forbid_if</a></li><li><a href="#field_policies-field_policy_bypass-authorize_unless">authorize_unless</a></li><li><a href="#field_policies-field_policy_bypass-forbid_unless">forbid_unless</a></li></ul><h3 id="arguments-16">Arguments</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a href="#field_policies-field_policy_bypass-fields" id="field_policies-field_policy_bypass-fields"><code class="inline">fields</code></a></td><td style="text-align: left;"><code class="inline">atom | list(atom)</code></td><td style="text-align: left;"></td><td style="text-align: left;">The field or fields that the policy applies to.</td></tr><tr><td style="text-align: left;"><a href="#field_policies-field_policy_bypass-condition" id="field_policies-field_policy_bypass-condition"><code class="inline">condition</code></a></td><td style="text-align: left;"><code class="inline">any</code></td><td style="text-align: left;"></td><td style="text-align: left;">A check or list of checks that must be true in order for this field policy to apply. If not specified, it always applies.</td></tr></tbody></table><h3 id="options-17">Options</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a href="#field_policies-field_policy_bypass-description" id="field_policies-field_policy_bypass-description"><code class="inline">description</code></a></td><td style="text-align: left;"><code class="inline">String.t</code></td><td style="text-align: left;"></td><td style="text-align: left;">A description for the policy, used when explaining authorization results</td></tr></tbody></table><h3 id="field_policies-field_policy_bypass-authorize_if">field_policies.field_policy_bypass.authorize_if</h3><pre><code class="makeup elixir" translate="no"><span class="n">authorize_if</span><span class="w"> </span><span class="n">check</span></code></pre><p>If the check is true, the request is authorized, otherwise run remaining checks.</p><h3 id="examples-14">Examples</h3><pre><code class="makeup elixir" translate="no"><span class="n">authorize_if</span><span class="w"> </span><span class="n">logged_in</span><span class="p" data-group-id="7876563335-1">(</span><span class="p" data-group-id="7876563335-1">)</span></code></pre><pre><code class="makeup elixir" translate="no"><span class="n">authorize_if</span><span class="w"> </span><span class="n">actor_attribute_matches_record</span><span class="p" data-group-id="8088252232-1">(</span><span class="ss">:group</span><span class="p">,</span><span class="w"> </span><span class="ss">:group</span><span class="p" data-group-id="8088252232-1">)</span></code></pre><h3 id="arguments-17">Arguments</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a class="spark-required" href="#field_policies-field_policy_bypass-authorize_if-check" id="field_policies-field_policy_bypass-authorize_if-check"><code class="inline">check</code></a></td><td style="text-align: left;"><code class="inline">any | module</code></td><td style="text-align: left;"></td><td style="text-align: left;">The check to run. See <a href="Ash.Policy.Check.xhtml"><code class="inline">Ash.Policy.Check</code></a> for more.</td></tr></tbody></table><h3 id="options-18">Options</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a href="#field_policies-field_policy_bypass-authorize_if-name" id="field_policies-field_policy_bypass-authorize_if-name"><code class="inline">name</code></a></td><td style="text-align: left;"><code class="inline">String.t</code></td><td style="text-align: left;"></td><td style="text-align: left;">A short name or description for the check, used when explaining authorization results</td></tr></tbody></table><h3 id="introspection-16">Introspection</h3><p>Target: <a href="Ash.Policy.Check.xhtml"><code class="inline">Ash.Policy.Check</code></a></p><h3 id="field_policies-field_policy_bypass-forbid_if">field_policies.field_policy_bypass.forbid_if</h3><pre><code class="makeup elixir" translate="no"><span class="n">forbid_if</span><span class="w"> </span><span class="n">check</span></code></pre><p>If the check is true, the request is forbidden, otherwise run remaining checks.</p><h3 id="examples-15">Examples</h3><pre><code class="makeup elixir" translate="no"><span class="n">forbid_if</span><span class="w"> </span><span class="n">not_logged_in</span><span class="p" data-group-id="9946379204-1">(</span><span class="p" data-group-id="9946379204-1">)</span></code></pre><pre><code class="makeup elixir" translate="no"><span class="n">forbid_if</span><span class="w"> </span><span class="n">actor_attribute_matches_record</span><span class="p" data-group-id="6273243098-1">(</span><span class="ss">:group</span><span class="p">,</span><span class="w"> </span><span class="ss">:blacklisted_groups</span><span class="p" data-group-id="6273243098-1">)</span></code></pre><h3 id="arguments-18">Arguments</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a class="spark-required" href="#field_policies-field_policy_bypass-forbid_if-check" id="field_policies-field_policy_bypass-forbid_if-check"><code class="inline">check</code></a></td><td style="text-align: left;"><code class="inline">any | module</code></td><td style="text-align: left;"></td><td style="text-align: left;">The check to run. See <a href="Ash.Policy.Check.xhtml"><code class="inline">Ash.Policy.Check</code></a> for more.</td></tr></tbody></table><h3 id="options-19">Options</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a href="#field_policies-field_policy_bypass-forbid_if-name" id="field_policies-field_policy_bypass-forbid_if-name"><code class="inline">name</code></a></td><td style="text-align: left;"><code class="inline">String.t</code></td><td style="text-align: left;"></td><td style="text-align: left;">A short name or description for the check, used when explaining authorization results</td></tr></tbody></table><h3 id="introspection-17">Introspection</h3><p>Target: <a href="Ash.Policy.Check.xhtml"><code class="inline">Ash.Policy.Check</code></a></p><h3 id="field_policies-field_policy_bypass-authorize_unless">field_policies.field_policy_bypass.authorize_unless</h3><pre><code class="makeup elixir" translate="no"><span class="n">authorize_unless</span><span class="w"> </span><span class="n">check</span></code></pre><p>If the check is true, run remaining checks, otherwise the request is authorized.</p><h3 id="examples-16">Examples</h3><pre><code class="makeup elixir" translate="no"><span class="n">authorize_unless</span><span class="w"> </span><span class="n">not_logged_in</span><span class="p" data-group-id="9938190222-1">(</span><span class="p" data-group-id="9938190222-1">)</span></code></pre><pre><code class="makeup elixir" translate="no"><span class="n">authorize_unless</span><span class="w"> </span><span class="n">actor_attribute_matches_record</span><span class="p" data-group-id="4275849324-1">(</span><span class="ss">:group</span><span class="p">,</span><span class="w"> </span><span class="ss">:blacklisted_groups</span><span class="p" data-group-id="4275849324-1">)</span></code></pre><h3 id="arguments-19">Arguments</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a class="spark-required" href="#field_policies-field_policy_bypass-authorize_unless-check" id="field_policies-field_policy_bypass-authorize_unless-check"><code class="inline">check</code></a></td><td style="text-align: left;"><code class="inline">any | module</code></td><td style="text-align: left;"></td><td style="text-align: left;">The check to run. See <a href="Ash.Policy.Check.xhtml"><code class="inline">Ash.Policy.Check</code></a> for more.</td></tr></tbody></table><h3 id="options-20">Options</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a href="#field_policies-field_policy_bypass-authorize_unless-name" id="field_policies-field_policy_bypass-authorize_unless-name"><code class="inline">name</code></a></td><td style="text-align: left;"><code class="inline">String.t</code></td><td style="text-align: left;"></td><td style="text-align: left;">A short name or description for the check, used when explaining authorization results</td></tr></tbody></table><h3 id="introspection-18">Introspection</h3><p>Target: <a href="Ash.Policy.Check.xhtml"><code class="inline">Ash.Policy.Check</code></a></p><h3 id="field_policies-field_policy_bypass-forbid_unless">field_policies.field_policy_bypass.forbid_unless</h3><pre><code class="makeup elixir" translate="no"><span class="n">forbid_unless</span><span class="w"> </span><span class="n">check</span></code></pre><p>If the check is true, run remaining checks, otherwise the request is forbidden.</p><h3 id="examples-17">Examples</h3><pre><code class="makeup elixir" translate="no"><span class="n">forbid_unless</span><span class="w"> </span><span class="n">logged_in</span><span class="p" data-group-id="3109431781-1">(</span><span class="p" data-group-id="3109431781-1">)</span></code></pre><pre><code class="makeup elixir" translate="no"><span class="n">forbid_unless</span><span class="w"> </span><span class="n">actor_attribute_matches_record</span><span class="p" data-group-id="1348528342-1">(</span><span class="ss">:group</span><span class="p">,</span><span class="w"> </span><span class="ss">:group</span><span class="p" data-group-id="1348528342-1">)</span></code></pre><h3 id="arguments-20">Arguments</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a class="spark-required" href="#field_policies-field_policy_bypass-forbid_unless-check" id="field_policies-field_policy_bypass-forbid_unless-check"><code class="inline">check</code></a></td><td style="text-align: left;"><code class="inline">any | module</code></td><td style="text-align: left;"></td><td style="text-align: left;">The check to run. See <a href="Ash.Policy.Check.xhtml"><code class="inline">Ash.Policy.Check</code></a> for more.</td></tr></tbody></table><h3 id="options-21">Options</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a href="#field_policies-field_policy_bypass-forbid_unless-name" id="field_policies-field_policy_bypass-forbid_unless-name"><code class="inline">name</code></a></td><td style="text-align: left;"><code class="inline">String.t</code></td><td style="text-align: left;"></td><td style="text-align: left;">A short name or description for the check, used when explaining authorization results</td></tr></tbody></table><h3 id="introspection-19">Introspection</h3><p>Target: <a href="Ash.Policy.Check.xhtml"><code class="inline">Ash.Policy.Check</code></a></p><h3 id="introspection-20">Introspection</h3><p>Target: <a href="Ash.Policy.FieldPolicy.xhtml"><code class="inline">Ash.Policy.FieldPolicy</code></a></p><h3 id="field_policies-field_policy">field_policies.field_policy</h3><pre><code class="makeup elixir" translate="no"><span class="n">field_policy</span><span class="w"> </span><span class="n">fields</span><span class="p">,</span><span class="w"> </span><span class="n">condition</span><span class="w"> </span><span class="o">\\</span><span class="w"> </span><span class="no">nil</span></code></pre><p>Field policies behave similarly to policies. See <code class="inline">d:Ash.Policy.Authorizer.field_policies</code>
for more.</p><h3 id="nested-dsls-7">Nested DSLs</h3><ul><li><a href="#field_policies-field_policy-authorize_if">authorize_if</a></li><li><a href="#field_policies-field_policy-forbid_if">forbid_if</a></li><li><a href="#field_policies-field_policy-authorize_unless">authorize_unless</a></li><li><a href="#field_policies-field_policy-forbid_unless">forbid_unless</a></li></ul><h3 id="arguments-21">Arguments</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a href="#field_policies-field_policy-fields" id="field_policies-field_policy-fields"><code class="inline">fields</code></a></td><td style="text-align: left;"><code class="inline">atom | list(atom)</code></td><td style="text-align: left;"></td><td style="text-align: left;">The field or fields that the policy applies to.</td></tr><tr><td style="text-align: left;"><a href="#field_policies-field_policy-condition" id="field_policies-field_policy-condition"><code class="inline">condition</code></a></td><td style="text-align: left;"><code class="inline">any</code></td><td style="text-align: left;"></td><td style="text-align: left;">A check or list of checks that must be true in order for this field policy to apply. If not specified, it always applies.</td></tr></tbody></table><h3 id="options-22">Options</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a href="#field_policies-field_policy-description" id="field_policies-field_policy-description"><code class="inline">description</code></a></td><td style="text-align: left;"><code class="inline">String.t</code></td><td style="text-align: left;"></td><td style="text-align: left;">A description for the policy, used when explaining authorization results</td></tr></tbody></table><h3 id="field_policies-field_policy-authorize_if">field_policies.field_policy.authorize_if</h3><pre><code class="makeup elixir" translate="no"><span class="n">authorize_if</span><span class="w"> </span><span class="n">check</span></code></pre><p>If the check is true, the request is authorized, otherwise run remaining checks.</p><h3 id="examples-18">Examples</h3><pre><code class="makeup elixir" translate="no"><span class="n">authorize_if</span><span class="w"> </span><span class="n">logged_in</span><span class="p" data-group-id="6156980547-1">(</span><span class="p" data-group-id="6156980547-1">)</span></code></pre><pre><code class="makeup elixir" translate="no"><span class="n">authorize_if</span><span class="w"> </span><span class="n">actor_attribute_matches_record</span><span class="p" data-group-id="9173708849-1">(</span><span class="ss">:group</span><span class="p">,</span><span class="w"> </span><span class="ss">:group</span><span class="p" data-group-id="9173708849-1">)</span></code></pre><h3 id="arguments-22">Arguments</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a class="spark-required" href="#field_policies-field_policy-authorize_if-check" id="field_policies-field_policy-authorize_if-check"><code class="inline">check</code></a></td><td style="text-align: left;"><code class="inline">any | module</code></td><td style="text-align: left;"></td><td style="text-align: left;">The check to run. See <a href="Ash.Policy.Check.xhtml"><code class="inline">Ash.Policy.Check</code></a> for more.</td></tr></tbody></table><h3 id="options-23">Options</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a href="#field_policies-field_policy-authorize_if-name" id="field_policies-field_policy-authorize_if-name"><code class="inline">name</code></a></td><td style="text-align: left;"><code class="inline">String.t</code></td><td style="text-align: left;"></td><td style="text-align: left;">A short name or description for the check, used when explaining authorization results</td></tr></tbody></table><h3 id="introspection-21">Introspection</h3><p>Target: <a href="Ash.Policy.Check.xhtml"><code class="inline">Ash.Policy.Check</code></a></p><h3 id="field_policies-field_policy-forbid_if">field_policies.field_policy.forbid_if</h3><pre><code class="makeup elixir" translate="no"><span class="n">forbid_if</span><span class="w"> </span><span class="n">check</span></code></pre><p>If the check is true, the request is forbidden, otherwise run remaining checks.</p><h3 id="examples-19">Examples</h3><pre><code class="makeup elixir" translate="no"><span class="n">forbid_if</span><span class="w"> </span><span class="n">not_logged_in</span><span class="p" data-group-id="4518894625-1">(</span><span class="p" data-group-id="4518894625-1">)</span></code></pre><pre><code class="makeup elixir" translate="no"><span class="n">forbid_if</span><span class="w"> </span><span class="n">actor_attribute_matches_record</span><span class="p" data-group-id="7594052703-1">(</span><span class="ss">:group</span><span class="p">,</span><span class="w"> </span><span class="ss">:blacklisted_groups</span><span class="p" data-group-id="7594052703-1">)</span></code></pre><h3 id="arguments-23">Arguments</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a class="spark-required" href="#field_policies-field_policy-forbid_if-check" id="field_policies-field_policy-forbid_if-check"><code class="inline">check</code></a></td><td style="text-align: left;"><code class="inline">any | module</code></td><td style="text-align: left;"></td><td style="text-align: left;">The check to run. See <a href="Ash.Policy.Check.xhtml"><code class="inline">Ash.Policy.Check</code></a> for more.</td></tr></tbody></table><h3 id="options-24">Options</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a href="#field_policies-field_policy-forbid_if-name" id="field_policies-field_policy-forbid_if-name"><code class="inline">name</code></a></td><td style="text-align: left;"><code class="inline">String.t</code></td><td style="text-align: left;"></td><td style="text-align: left;">A short name or description for the check, used when explaining authorization results</td></tr></tbody></table><h3 id="introspection-22">Introspection</h3><p>Target: <a href="Ash.Policy.Check.xhtml"><code class="inline">Ash.Policy.Check</code></a></p><h3 id="field_policies-field_policy-authorize_unless">field_policies.field_policy.authorize_unless</h3><pre><code class="makeup elixir" translate="no"><span class="n">authorize_unless</span><span class="w"> </span><span class="n">check</span></code></pre><p>If the check is true, run remaining checks, otherwise the request is authorized.</p><h3 id="examples-20">Examples</h3><pre><code class="makeup elixir" translate="no"><span class="n">authorize_unless</span><span class="w"> </span><span class="n">not_logged_in</span><span class="p" data-group-id="1772504192-1">(</span><span class="p" data-group-id="1772504192-1">)</span></code></pre><pre><code class="makeup elixir" translate="no"><span class="n">authorize_unless</span><span class="w"> </span><span class="n">actor_attribute_matches_record</span><span class="p" data-group-id="8469039350-1">(</span><span class="ss">:group</span><span class="p">,</span><span class="w"> </span><span class="ss">:blacklisted_groups</span><span class="p" data-group-id="8469039350-1">)</span></code></pre><h3 id="arguments-24">Arguments</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a class="spark-required" href="#field_policies-field_policy-authorize_unless-check" id="field_policies-field_policy-authorize_unless-check"><code class="inline">check</code></a></td><td style="text-align: left;"><code class="inline">any | module</code></td><td style="text-align: left;"></td><td style="text-align: left;">The check to run. See <a href="Ash.Policy.Check.xhtml"><code class="inline">Ash.Policy.Check</code></a> for more.</td></tr></tbody></table><h3 id="options-25">Options</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a href="#field_policies-field_policy-authorize_unless-name" id="field_policies-field_policy-authorize_unless-name"><code class="inline">name</code></a></td><td style="text-align: left;"><code class="inline">String.t</code></td><td style="text-align: left;"></td><td style="text-align: left;">A short name or description for the check, used when explaining authorization results</td></tr></tbody></table><h3 id="introspection-23">Introspection</h3><p>Target: <a href="Ash.Policy.Check.xhtml"><code class="inline">Ash.Policy.Check</code></a></p><h3 id="field_policies-field_policy-forbid_unless">field_policies.field_policy.forbid_unless</h3><pre><code class="makeup elixir" translate="no"><span class="n">forbid_unless</span><span class="w"> </span><span class="n">check</span></code></pre><p>If the check is true, run remaining checks, otherwise the request is forbidden.</p><h3 id="examples-21">Examples</h3><pre><code class="makeup elixir" translate="no"><span class="n">forbid_unless</span><span class="w"> </span><span class="n">logged_in</span><span class="p" data-group-id="1280436283-1">(</span><span class="p" data-group-id="1280436283-1">)</span></code></pre><pre><code class="makeup elixir" translate="no"><span class="n">forbid_unless</span><span class="w"> </span><span class="n">actor_attribute_matches_record</span><span class="p" data-group-id="5826033780-1">(</span><span class="ss">:group</span><span class="p">,</span><span class="w"> </span><span class="ss">:group</span><span class="p" data-group-id="5826033780-1">)</span></code></pre><h3 id="arguments-25">Arguments</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a class="spark-required" href="#field_policies-field_policy-forbid_unless-check" id="field_policies-field_policy-forbid_unless-check"><code class="inline">check</code></a></td><td style="text-align: left;"><code class="inline">any | module</code></td><td style="text-align: left;"></td><td style="text-align: left;">The check to run. See <a href="Ash.Policy.Check.xhtml"><code class="inline">Ash.Policy.Check</code></a> for more.</td></tr></tbody></table><h3 id="options-26">Options</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a href="#field_policies-field_policy-forbid_unless-name" id="field_policies-field_policy-forbid_unless-name"><code class="inline">name</code></a></td><td style="text-align: left;"><code class="inline">String.t</code></td><td style="text-align: left;"></td><td style="text-align: left;">A short name or description for the check, used when explaining authorization results</td></tr></tbody></table><h3 id="introspection-24">Introspection</h3><p>Target: <a href="Ash.Policy.Check.xhtml"><code class="inline">Ash.Policy.Check</code></a></p><h3 id="introspection-25">Introspection</h3><p>Target: <a href="Ash.Policy.FieldPolicy.xhtml"><code class="inline">Ash.Policy.FieldPolicy</code></a></p><style type="text/css">.spark-required::after { content: "*"; color: red !important; }</style>

  </body>
</html>
