<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"
      xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>Ash.Notifier.PubSub - ash v3.5.33</title>
    <meta name="generator" content="ExDoc v0.38.2" />
    <link type="text/css" rel="stylesheet" href="dist/epub-elixir-FNUUKFP7.css" />
    <script src="dist/epub-4WIP524F.js"></script>

  </head>
  <body class="content-inner">

    <h1 id="content">Ash.Notifier.PubSub</h1>
<p>A builtin notifier to help you publish events over any kind of pub-sub tooling.</p><p>This is plug and play with <code class="inline">Phoenix.PubSub</code>, but could be used with any pubsub system.</p><p>You configure a module that defines a <code class="inline">broadcast/3</code> function, and then add some &quot;publications&quot;
which configure under what conditions an event should be sent and what the topic should be.</p><h2 id="example">Example</h2><pre><code class="makeup elixir" translate="no"><span class="kd">defmodule</span><span class="w"> </span><span class="nc">MyApp.User</span><span class="w"> </span><span class="k" data-group-id="1293463693-1">do</span><span class="w">
  </span><span class="kn">use</span><span class="w"> </span><span class="nc">Ash.Resource</span><span class="p">,</span><span class="w">
    </span><span class="c1"># ...</span><span class="w">
    </span><span class="ss">notifiers</span><span class="p">:</span><span class="w"> </span><span class="p" data-group-id="1293463693-2">[</span><span class="nc">Ash.Notifier.PubSub</span><span class="p" data-group-id="1293463693-2">]</span><span class="w">

  </span><span class="c1"># ...</span><span class="w">

  </span><span class="n">pub_sub</span><span class="w"> </span><span class="k" data-group-id="1293463693-3">do</span><span class="w">
    </span><span class="n">module</span><span class="w"> </span><span class="nc">MyAppWeb.Endpoint</span><span class="w">

    </span><span class="n">prefix</span><span class="w"> </span><span class="s">&quot;user&quot;</span><span class="w">
    </span><span class="n">publish</span><span class="w"> </span><span class="ss">:update</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="1293463693-4">[</span><span class="s">&quot;updated&quot;</span><span class="p">,</span><span class="w"> </span><span class="ss">:_pkey</span><span class="p" data-group-id="1293463693-4">]</span><span class="w">
  </span><span class="k" data-group-id="1293463693-3">end</span><span class="w">
</span><span class="k" data-group-id="1293463693-1">end</span></code></pre><h2 id="debugging-pubsub">Debugging PubSub</h2><p>It can be quite frustrating when setting up pub_sub when everything appears to be set up properly, but
you aren't receiving events. This usually means some kind of mismatch between the event names produced
by the resource/config of your publications, and you can use the following flag to display debug
information about all pub sub events.</p><pre><code class="makeup elixir" translate="no"><span class="n">config</span><span class="w"> </span><span class="ss">:ash</span><span class="p">,</span><span class="w"> </span><span class="ss">:pub_sub</span><span class="p">,</span><span class="w"> </span><span class="ss">debug?</span><span class="p">:</span><span class="w"> </span><span class="no">true</span></code></pre><h2 id="topic-templates">Topic Templates</h2><p>Often you want to include some piece of data in the thing being changed, like the <code class="inline">:id</code> attribute. This
is done by providing a list as the topic, and using atoms which will be replaced by their corresponding
values. They will ultimately be joined with <code class="inline">:</code>.</p><p>For example:</p><pre><code class="makeup elixir" translate="no"><span class="n">prefix</span><span class="w"> </span><span class="s">&quot;user&quot;</span><span class="w">

</span><span class="n">publish</span><span class="w"> </span><span class="ss">:create</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="4170494445-1">[</span><span class="s">&quot;created&quot;</span><span class="p">,</span><span class="w"> </span><span class="ss">:user_id</span><span class="p" data-group-id="4170494445-1">]</span></code></pre><p>This might publish a message to &quot;user:created:1&quot; for example.</p><p>For updates, if the field in the template is being changed, a message is sent
to <em>both</em> values. So if you change <code class="inline">user 1</code> to <code class="inline">user 2</code>, the same message would
be published to <code class="inline">user:updated:1</code> and <code class="inline">user:updated:2</code>. If there are multiple
attributes in the template, and they are all being changed, a message is sent for
every combination of substitutions.</p><h2 id="important">Important</h2><p>If the previous value was <code class="inline">nil</code> or the field was not selected on the data passed into the action, then a
notification is not sent for the previous value.</p><p>If the new value is <code class="inline">nil</code> then a notification is not sent for the new value.</p><h2 id="template-parts">Template parts</h2><p>Templates may contain lists, in which case all combinations of values in the list will be used. Add
<code class="inline">nil</code> to the list if you want to produce a pattern where that entry is omitted.</p><p>The atom <code class="inline">:_tenant</code> may be used. If the changeset has a tenant set on it, that
value will be used, otherwise that combination of values is ignored.</p><p>The atom <code class="inline">:_pkey</code> may be used. It will be a stringified, concatenation of the primary key fields,
or just the primary key if there is only one primary key field.</p><p>The atom <code class="inline">nil</code> may be used. It only makes sense to use it in the context of a list of alternatives,
and adds a pattern where that part is skipped.</p><pre><code class="makeup elixir" translate="no"><span class="n">publish</span><span class="w"> </span><span class="ss">:updated</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="7176985791-1">[</span><span class="p" data-group-id="7176985791-2">[</span><span class="ss">:team_id</span><span class="p">,</span><span class="w"> </span><span class="ss">:_tenant</span><span class="p" data-group-id="7176985791-2">]</span><span class="p">,</span><span class="w"> </span><span class="s">&quot;updated&quot;</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="7176985791-3">[</span><span class="ss">:id</span><span class="p">,</span><span class="w"> </span><span class="no">nil</span><span class="p" data-group-id="7176985791-3">]</span><span class="p" data-group-id="7176985791-1">]</span></code></pre><p>Would produce the following messages, given a <code class="inline">team_id</code> of 1, a <code class="inline">tenant</code> of <code class="inline">org_1</code>, and an <code class="inline">id</code> of <code class="inline">50</code>:</p><pre><code class="makeup elixir" translate="no"><span class="s">&quot;1:updated:50&quot;</span><span class="w">
</span><span class="s">&quot;1:updated&quot;</span><span class="w">
</span><span class="s">&quot;org_1:updated:50&quot;</span><span class="w">
</span><span class="s">&quot;org_1:updated&quot;</span></code></pre><h2 id="custom-delimiters">Custom Delimiters</h2><p>It's possible to change the default delimiter used when generating topics. This is useful when working with message brokers
like RabbitMQ, which rely on a different set of delimiters for routing.</p><pre><code class="makeup elixir" translate="no"><span class="n">pub_sub</span><span class="w"> </span><span class="k" data-group-id="3682170113-1">do</span><span class="w">
  </span><span class="n">delimiter</span><span class="w"> </span><span class="s">&quot;.&quot;</span><span class="w">
</span><span class="k" data-group-id="3682170113-1">end</span></code></pre><h2 id="named-pubsub-modules">Named Pubsub modules</h2><p>If you are using a phoenix <code class="inline">Endpoint</code> module for pubsub then this is unnecessary. If you want to use a custom pub sub started
with something like <code class="inline">{Phoenix.PubSub, name: MyName}</code>, then you can provide <code class="inline">MyName</code> to here.</p><h2 id="broadcast-types">Broadcast Types</h2><p>Configured with <code class="inline">broadcast_type</code>.</p><ul><li><code class="inline">:notification</code> just sends the notification</li><li><code class="inline">:phoenix_broadcast</code> sends a <code class="inline">%Phoenix.Socket.Broadcast{}</code> (see above)</li><li><code class="inline">:broadcast</code> sends <code class="inline">%{topic: (topic), event: (event), payload: (notification)}</code></li></ul><h2 id="pub_sub">pub_sub</h2><p>A section for configuring how resource actions are published over pubsub</p><h3 id="nested-dsls">Nested DSLs</h3><ul><li><a href="#pub_sub-publish">publish</a></li><li><a href="#pub_sub-publish_all">publish_all</a></li></ul><h3 id="examples">Examples</h3><pre><code class="makeup elixir" translate="no"><span class="n">pub_sub</span><span class="w"> </span><span class="k" data-group-id="7205211094-1">do</span><span class="w">
  </span><span class="n">module</span><span class="w"> </span><span class="nc">MyEndpoint</span><span class="w">
  </span><span class="n">prefix</span><span class="w"> </span><span class="s">&quot;post&quot;</span><span class="w">

  </span><span class="n">publish</span><span class="w"> </span><span class="ss">:destroy</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="7205211094-2">[</span><span class="s">&quot;destroyed&quot;</span><span class="p">,</span><span class="w"> </span><span class="ss">:id</span><span class="p" data-group-id="7205211094-2">]</span><span class="w">
  </span><span class="n">publish</span><span class="w"> </span><span class="ss">:update</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="7205211094-3">[</span><span class="s">&quot;updated&quot;</span><span class="p">,</span><span class="w"> </span><span class="ss">:name</span><span class="p" data-group-id="7205211094-3">]</span><span class="p">,</span><span class="w"> </span><span class="ss">event</span><span class="p">:</span><span class="w"> </span><span class="s">&quot;name_change&quot;</span><span class="w">
  </span><span class="n">publish_all</span><span class="w"> </span><span class="ss">:create</span><span class="p">,</span><span class="w"> </span><span class="s">&quot;created&quot;</span><span class="w">
</span><span class="k" data-group-id="7205211094-1">end</span><span class="w">
</span></code></pre><h3 id="options">Options</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a class="spark-required" href="#pub_sub-module" id="pub_sub-module"><code class="inline">module</code></a></td><td style="text-align: left;"><code class="inline">atom</code></td><td style="text-align: left;"></td><td style="text-align: left;">The module to call <code class="inline">broadcast/3</code> on e.g module.broadcast(topic, event, message).</td></tr><tr><td style="text-align: left;"><a href="#pub_sub-prefix" id="pub_sub-prefix"><code class="inline">prefix</code></a></td><td style="text-align: left;"><code class="inline">String.t</code></td><td style="text-align: left;"></td><td style="text-align: left;">A prefix for all pubsub messages, e.g <code class="inline">users</code>. A message with <code class="inline">created</code> would be published as <code class="inline">users:created</code></td></tr><tr><td style="text-align: left;"><a href="#pub_sub-delimiter" id="pub_sub-delimiter"><code class="inline">delimiter</code></a></td><td style="text-align: left;"><code class="inline">String.t</code></td><td style="text-align: left;"></td><td style="text-align: left;">A delimiter for building topics. Default is a colon (:)</td></tr><tr><td style="text-align: left;"><a href="#pub_sub-filter" id="pub_sub-filter"><code class="inline">filter</code></a></td><td style="text-align: left;"><code class="inline">(any -&gt; any)</code></td><td style="text-align: left;"></td><td style="text-align: left;">A filter for notifications. Receives a notification, and ignores it if the function returns a falsy value. Both this and filters on specific publications must return a truthy value for a notification to be emitted.</td></tr><tr><td style="text-align: left;"><a href="#pub_sub-transform" id="pub_sub-transform"><code class="inline">transform</code></a></td><td style="text-align: left;"><code class="inline">(any -&gt; any)</code></td><td style="text-align: left;"></td><td style="text-align: left;">A transformer for notifications. Specific transformers on each publication <em>override</em> this option</td></tr><tr><td style="text-align: left;"><a href="#pub_sub-broadcast_type" id="pub_sub-broadcast_type"><code class="inline">broadcast_type</code></a></td><td style="text-align: left;"><code class="inline">:notification | :phoenix_broadcast | :broadcast</code></td><td style="text-align: left;"><code class="inline">:notification</code></td><td style="text-align: left;">What shape the event payloads will be in. See</td></tr><tr><td style="text-align: left;"><a href="#pub_sub-name" id="pub_sub-name"><code class="inline">name</code></a></td><td style="text-align: left;"><code class="inline">atom</code></td><td style="text-align: left;"></td><td style="text-align: left;">A named pub sub to pass as the first argument to broadcast.</td></tr></tbody></table><h3 id="pub_sub-publish">pub_sub.publish</h3><pre><code class="makeup elixir" translate="no"><span class="n">publish</span><span class="w"> </span><span class="n">action</span><span class="p">,</span><span class="w"> </span><span class="n">topic</span></code></pre><p>Configure a given action to publish its results over a given topic.</p><h3 id="examples-1">Examples</h3><pre><code class="makeup elixir" translate="no"><span class="n">publish</span><span class="w"> </span><span class="ss">:create</span><span class="p">,</span><span class="w"> </span><span class="s">&quot;created&quot;</span></code></pre><pre><code class="makeup elixir" translate="no"><span class="n">publish</span><span class="w"> </span><span class="ss">:assign</span><span class="p">,</span><span class="w"> </span><span class="s">&quot;assigned&quot;</span><span class="w">
</span></code></pre><h3 id="arguments">Arguments</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a class="spark-required" href="#pub_sub-publish-action" id="pub_sub-publish-action"><code class="inline">action</code></a></td><td style="text-align: left;"><code class="inline">atom</code></td><td style="text-align: left;"></td><td style="text-align: left;">The name of the action that should be published</td></tr><tr><td style="text-align: left;"><a class="spark-required" href="#pub_sub-publish-topic" id="pub_sub-publish-topic"><code class="inline">topic</code></a></td><td style="text-align: left;"><code class="inline">any</code></td><td style="text-align: left;"></td><td style="text-align: left;">The topic to publish</td></tr></tbody></table><h3 id="options-1">Options</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a href="#pub_sub-publish-previous_values?" id="pub_sub-publish-previous_values?"><code class="inline">previous_values?</code></a></td><td style="text-align: left;"><code class="inline">boolean</code></td><td style="text-align: left;"><code class="inline">false</code></td><td style="text-align: left;">Whether or not to publish messages with both the new values and the old values for referencing changed attributes</td></tr><tr><td style="text-align: left;"><a href="#pub_sub-publish-filter" id="pub_sub-publish-filter"><code class="inline">filter</code></a></td><td style="text-align: left;"><code class="inline">(any -&gt; any)</code></td><td style="text-align: left;"></td><td style="text-align: left;">A filter for notifications. Receives a notification, and ignores it if the function returns a falsy value.</td></tr><tr><td style="text-align: left;"><a href="#pub_sub-publish-transform" id="pub_sub-publish-transform"><code class="inline">transform</code></a></td><td style="text-align: left;"><code class="inline">(any -&gt; any)</code></td><td style="text-align: left;"></td><td style="text-align: left;">A transformer for notifications. Receives a notification, and returns a new value to be broadcasted.</td></tr><tr><td style="text-align: left;"><a href="#pub_sub-publish-event" id="pub_sub-publish-event"><code class="inline">event</code></a></td><td style="text-align: left;"><code class="inline">String.t</code></td><td style="text-align: left;"></td><td style="text-align: left;">The name of the event to publish. Defaults to the action name</td></tr><tr><td style="text-align: left;"><a href="#pub_sub-publish-dispatcher" id="pub_sub-publish-dispatcher"><code class="inline">dispatcher</code></a></td><td style="text-align: left;"><code class="inline">atom</code></td><td style="text-align: left;"></td><td style="text-align: left;">The module to use as a dispatcher. If none is set, the pubsub module provided is used.</td></tr></tbody></table><h3 id="introspection">Introspection</h3><p>Target: <a href="Ash.Notifier.PubSub.Publication.xhtml"><code class="inline">Ash.Notifier.PubSub.Publication</code></a></p><h3 id="pub_sub-publish_all">pub_sub.publish_all</h3><pre><code class="makeup elixir" translate="no"><span class="n">publish_all</span><span class="w"> </span><span class="n">type</span><span class="p">,</span><span class="w"> </span><span class="n">topic</span></code></pre><p>Works the same as <code class="inline">publish</code>, except that it takes a type and publishes all actions of that type.</p><h3 id="examples-2">Examples</h3><pre><code class="makeup elixir" translate="no"><span class="n">publish_all</span><span class="w"> </span><span class="ss">:create</span><span class="p">,</span><span class="w"> </span><span class="s">&quot;created&quot;</span></code></pre><h3 id="arguments-1">Arguments</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a href="#pub_sub-publish_all-type" id="pub_sub-publish_all-type"><code class="inline">type</code></a></td><td style="text-align: left;"><code class="inline">:create | :update | :destroy</code></td><td style="text-align: left;"></td><td style="text-align: left;">Publish on all actions of a given type</td></tr><tr><td style="text-align: left;"><a class="spark-required" href="#pub_sub-publish_all-topic" id="pub_sub-publish_all-topic"><code class="inline">topic</code></a></td><td style="text-align: left;"><code class="inline">any</code></td><td style="text-align: left;"></td><td style="text-align: left;">The topic to publish</td></tr></tbody></table><h3 id="options-2">Options</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a href="#pub_sub-publish_all-except" id="pub_sub-publish_all-except"><code class="inline">except</code></a></td><td style="text-align: left;"><code class="inline">list(atom)</code></td><td style="text-align: left;"><code class="inline">[]</code></td><td style="text-align: left;">Exclude these actions from notifications</td></tr><tr><td style="text-align: left;"><a href="#pub_sub-publish_all-action" id="pub_sub-publish_all-action"><code class="inline">action</code></a></td><td style="text-align: left;"><code class="inline">atom</code></td><td style="text-align: left;"></td><td style="text-align: left;">The name of the action that should be published</td></tr><tr><td style="text-align: left;"><a href="#pub_sub-publish_all-previous_values?" id="pub_sub-publish_all-previous_values?"><code class="inline">previous_values?</code></a></td><td style="text-align: left;"><code class="inline">boolean</code></td><td style="text-align: left;"><code class="inline">false</code></td><td style="text-align: left;">Whether or not to publish messages with both the new values and the old values for referencing changed attributes</td></tr><tr><td style="text-align: left;"><a href="#pub_sub-publish_all-filter" id="pub_sub-publish_all-filter"><code class="inline">filter</code></a></td><td style="text-align: left;"><code class="inline">(any -&gt; any)</code></td><td style="text-align: left;"></td><td style="text-align: left;">A filter for notifications. Receives a notification, and ignores it if the function returns a falsy value.</td></tr><tr><td style="text-align: left;"><a href="#pub_sub-publish_all-transform" id="pub_sub-publish_all-transform"><code class="inline">transform</code></a></td><td style="text-align: left;"><code class="inline">(any -&gt; any)</code></td><td style="text-align: left;"></td><td style="text-align: left;">A transformer for notifications. Receives a notification, and returns a new value to be broadcasted.</td></tr><tr><td style="text-align: left;"><a href="#pub_sub-publish_all-event" id="pub_sub-publish_all-event"><code class="inline">event</code></a></td><td style="text-align: left;"><code class="inline">String.t</code></td><td style="text-align: left;"></td><td style="text-align: left;">The name of the event to publish. Defaults to the action name</td></tr><tr><td style="text-align: left;"><a href="#pub_sub-publish_all-dispatcher" id="pub_sub-publish_all-dispatcher"><code class="inline">dispatcher</code></a></td><td style="text-align: left;"><code class="inline">atom</code></td><td style="text-align: left;"></td><td style="text-align: left;">The module to use as a dispatcher. If none is set, the pubsub module provided is used.</td></tr></tbody></table><h3 id="introspection-1">Introspection</h3><p>Target: <a href="Ash.Notifier.PubSub.Publication.xhtml"><code class="inline">Ash.Notifier.PubSub.Publication</code></a></p><style type="text/css">.spark-required::after { content: "*"; color: red !important; }</style>

  </body>
</html>
