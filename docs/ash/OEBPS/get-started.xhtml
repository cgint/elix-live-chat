<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"
      xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>Get Started - ash v3.5.33</title>
    <meta name="generator" content="ExDoc v0.38.2" />
    <link type="text/css" rel="stylesheet" href="dist/epub-elixir-FNUUKFP7.css" />
    <script src="dist/epub-4WIP524F.js"></script>

  </head>
  <body class="content-inner">

    <h1 id="content">Get Started</h1>
<section role="note" class="admonition tip"><h3 id="learn-with-livebook" class="admonition-title tip">Learn with Livebook</h3><p>We have a basic step by step tutorial in Livebook that introduces you to Ash. No prior Ash knowledge is required.
The Livebook tutorial is self contained and separate from the documentation below.
<a href="https://livebook.dev/run?url=https%3A%2F%2Fgithub.com%2Fash-project%2Fash_tutorial%2Fblob%2Fmaster%2Foverview.livemd"><img src="https://livebook.dev/badge/v1/pink.svg" alt="Run in Livebook"/></a></p></section><h2 id="goals">Goals</h2><p>In this guide we will:</p><ol><li>Create a new Elixir application and add Ash as a dependency</li><li>Create a simple set of resources and see how they can be used</li><li>Go over some core concepts of Ash</li><li>Find out what material might be good to visit next</li></ol><h2 id="requirements">Requirements</h2><p>If you want to follow along yourself, you will need the following things:</p><ol><li><a href="https://elixir-lang.org/install.html">Elixir and Erlang installed</a></li><li>A text editor to make the changes that we make</li><li>A terminal to run the examples using <code class="inline">iex</code></li></ol><h2 id="steps">Steps</h2><p>For this tutorial, we'll use examples based around creating a Help Desk system.</p><p>We will make the following resources:</p><ul><li><code class="inline">Helpdesk.Support.Ticket</code></li><li><code class="inline">Helpdesk.Support.Representative</code></li></ul><p>The actions we will be able to take on these resources include:</p><ul><li>Opening a new Ticket</li><li>Closing a Ticket</li><li>Assigning a Ticket to a representative</li></ul><h3 id="create-a-new-project">Create a new project</h3><p>This guide focuses on getting you introduced to Ash quickly. For that reason, we recommend starting a fresh
project to explore the concepts. You can, however, add Ash to your existing project if desired.
See the options below for more.</p><section role="note" class="admonition tip"><h3 id="what-is-igniter" class="admonition-title tip">What is igniter?</h3><p>Igniter is a code generation and project setup tool that automates the installation and configuration of Elixir packages. Instead of manually adding dependencies and writing boilerplate code, Igniter handles this for you. When you run <code class="inline">mix igniter.install ash</code>, it automatically adds Ash to your project and sets up the necessary configuration files.</p></section><!-- tabs-open --><h3 id="new-project">New project</h3><p>First, to use <code class="inline">mix igniter.new</code>, the archive must be installed.</p><pre><code class="makeup bash" translate="no"><span class=""># install igniter.new
</span><span class="">mix archive.install hex igniter_new
</span><span class="">
</span><span class=""># create a new application with Ash in it
</span><span class="">mix igniter.new helpdesk --install ash &amp;&amp; cd helpdesk
</span></code></pre><h3 id="new-phoenix-project">New Phoenix project</h3><p>If you already know that you want to use Phoenix and Ash together, you can use</p><pre><code class="makeup bash" translate="no"><span class=""># install the archive
</span><span class="">mix archive.install hex phx_new
</span><span class="">mix archive.install hex igniter_new
</span><span class="">
</span><span class=""># use the `--with` flag to generate the project with phx.new and add Ash
</span><span class="">mix igniter.new helpdesk --install ash,ash_phoenix --with phx.new &amp;&amp; cd helpdesk
</span></code></pre><h3 id="existing-project">Existing Project</h3><p>You can use igniter to add Ash to your existing project as well.</p><pre><code class="makeup bash" translate="no"><span class="">mix archive.install hex igniter_new
</span><span class="">mix igniter.install ash
</span></code></pre><h3 id="manual-installation-instructions">Manual Installation Instructions</h3><p>Finally, if you want to install Ash manually, step by step, follow the <a href="manual-installation.xhtml">manual installation guide</a>.</p><!-- tabs-close --><section role="note" class="admonition warning"><h3 id="picosat-installation-issues" class="admonition-title warning">Picosat installation issues?</h3><p>If you have trouble compiling <code class="inline">picosat_elixir</code>, then alter your <code class="inline">mix.exs</code> file to replace <code class="inline">{:picosat_elixir, &quot;~&gt; 0.2&quot;}</code> with <code class="inline">{:simple_sat, &quot;~&gt; 0.1&quot;}</code> to use a simpler (but mildly slower) solver. You can always switch back to <code class="inline">picosat_elixir</code> later once you're done with the tutorial.
Then, run <code class="inline">mix deps.get &amp;&amp; mix deps.compile ash --force</code></p></section><h3 id="building-your-first-ash-domain">Building your first Ash Domain</h3><p>The basic building blocks of an Ash application are Ash resources. They are tied together by a domain module, which will allow you to interact with those resources.</p><h3 id="creating-our-first-resource">Creating our first resource</h3><section role="note" class="admonition info"><h3 id="generators" class="admonition-title info">Generators</h3><p>We have CLI commands that will do this for you, for example <a href="Mix.Tasks.Ash.Gen.Resource.xhtml"><code class="inline">mix ash.gen.resource</code></a>.
In this getting started guide, we will create the resources by hand. This is primarily
because there are not actually very many steps, and we want you to be familiar with
each moving piece. For more on the generators, run <a href="Mix.Tasks.Ash.Gen.Resource.xhtml"><code class="inline">mix help ash.gen.resource</code></a>.</p></section><p>Let's start by creating our first resource along with our first domain. We will create the following files:</p><ul><li>The domain <code class="inline">Helpdesk.Support</code>, in <code class="inline">lib/helpdesk/support.ex</code></li><li>Our Ticket resource <code class="inline">Helpdesk.Support.Ticket</code>, in <code class="inline">lib/helpdesk/support/ticket.ex</code>.</li></ul><p>To create the required folders and files, you can use the following command in your terminal:</p><pre><code class="makeup bash" translate="no"><span class="">mkdir -p lib/helpdesk/support &amp;&amp; \
</span><span class="">  touch $_/ticket.ex &amp;&amp; \
</span><span class="">  touch lib/helpdesk/support.ex
</span></code></pre><p>Your project structure should now include the following files:</p><pre><code class="makeup elixir" translate="no"><span class="n">lib</span><span class="o">/</span><span class="w">
</span><span class="err">├</span><span class="err">─</span><span class="w"> </span><span class="n">helpdesk</span><span class="o">/</span><span class="w">
</span><span class="err">│</span><span class="w">  </span><span class="err">├</span><span class="err">─</span><span class="w"> </span><span class="n">support</span><span class="o">/</span><span class="w">
</span><span class="err">│</span><span class="w">  </span><span class="err">│</span><span class="w">  </span><span class="err">├</span><span class="err">─</span><span class="w"> </span><span class="n">ticket</span><span class="o">.</span><span class="n">ex</span><span class="w">
</span><span class="err">│</span><span class="w">  </span><span class="err">├</span><span class="err">─</span><span class="w"> </span><span class="n">support</span><span class="o">.</span><span class="n">ex</span></code></pre><p>Add the following contents to the files we created:</p><pre><code class="makeup elixir" translate="no"><span class="c1"># lib/helpdesk/support.ex</span><span class="w">

</span><span class="kd">defmodule</span><span class="w"> </span><span class="nc">Helpdesk.Support</span><span class="w"> </span><span class="k" data-group-id="4374053033-1">do</span><span class="w">
  </span><span class="kn">use</span><span class="w"> </span><span class="nc">Ash.Domain</span><span class="w">

  </span><span class="n">resources</span><span class="w"> </span><span class="k" data-group-id="4374053033-2">do</span><span class="w">
    </span><span class="n">resource</span><span class="w"> </span><span class="nc">Helpdesk.Support.Ticket</span><span class="w">
  </span><span class="k" data-group-id="4374053033-2">end</span><span class="w">
</span><span class="k" data-group-id="4374053033-1">end</span></code></pre><pre><code class="makeup elixir" translate="no"><span class="c1"># lib/helpdesk/support/ticket.ex</span><span class="w">

</span><span class="kd">defmodule</span><span class="w"> </span><span class="nc">Helpdesk.Support.Ticket</span><span class="w"> </span><span class="k" data-group-id="7913973505-1">do</span><span class="w">
  </span><span class="c1"># This turns this module into a resource</span><span class="w">
  </span><span class="kn">use</span><span class="w"> </span><span class="nc">Ash.Resource</span><span class="p">,</span><span class="w"> </span><span class="ss">domain</span><span class="p">:</span><span class="w"> </span><span class="nc">Helpdesk.Support</span><span class="w">

  </span><span class="n">actions</span><span class="w"> </span><span class="k" data-group-id="7913973505-2">do</span><span class="w">
    </span><span class="c1"># Use the default implementation of the :read action</span><span class="w">
    </span><span class="n">defaults</span><span class="w"> </span><span class="p" data-group-id="7913973505-3">[</span><span class="ss">:read</span><span class="p" data-group-id="7913973505-3">]</span><span class="w">

    </span><span class="c1"># and a create action, which we&#39;ll customize later</span><span class="w">
    </span><span class="n">create</span><span class="w"> </span><span class="ss">:create</span><span class="w">
  </span><span class="k" data-group-id="7913973505-2">end</span><span class="w">

  </span><span class="c1"># Attributes are the simple pieces of data that exist on your resource</span><span class="w">
  </span><span class="n">attributes</span><span class="w"> </span><span class="k" data-group-id="7913973505-4">do</span><span class="w">
    </span><span class="c1"># Add an autogenerated UUID primary key called `:id`.</span><span class="w">
    </span><span class="n">uuid_primary_key</span><span class="w"> </span><span class="ss">:id</span><span class="w">

    </span><span class="c1"># Add a string type attribute called `:subject`</span><span class="w">
    </span><span class="n">attribute</span><span class="w"> </span><span class="ss">:subject</span><span class="p">,</span><span class="w"> </span><span class="ss">:string</span><span class="w">
  </span><span class="k" data-group-id="7913973505-4">end</span><span class="w">
</span><span class="k" data-group-id="7913973505-1">end</span></code></pre><p>Next, add your domain to your <code class="inline">config.exs</code>, and configure some backwards compatibility configuration.</p><p>Run the following commands to create your <code class="inline">config.exs</code> if it doesn't already exist:</p><pre><code class="makeup elixir" translate="no"><span class="n">mkdir</span><span class="w"> </span><span class="o">-</span><span class="n">p</span><span class="w"> </span><span class="n">config</span><span class="w">
</span><span class="n">touch</span><span class="w"> </span><span class="n">config</span><span class="o">/</span><span class="n">config</span><span class="o">.</span><span class="n">exs</span></code></pre><p>And add the following contents to it.</p><pre><code class="makeup elixir" translate="no"><span class="c1"># in config/config.exs</span><span class="w">
</span><span class="kn">import</span><span class="w"> </span><span class="nc">Config</span><span class="w">

</span><span class="c1"># This tells Ash about your domain, which is used to find</span><span class="w">
</span><span class="c1"># available resource and actions</span><span class="w">
</span><span class="n">config</span><span class="w"> </span><span class="ss">:helpdesk</span><span class="p">,</span><span class="w"> </span><span class="ss">:ash_domains</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="0453298523-1">[</span><span class="nc">Helpdesk.Support</span><span class="p" data-group-id="0453298523-1">]</span></code></pre><h3 id="try-our-first-resource-out">Try our first resource out</h3><p>Run <code class="inline">iex -S mix</code> in your project's root directory and try out the following.</p><p>To create a ticket, we first make an <a href="Ash.Changeset.xhtml"><code class="inline">Ash.Changeset</code></a> for the <code class="inline">:create</code> action of the <code class="inline">Helpdesk.Support.Ticket</code> resource. Then we pass it to the <a href="Ash.xhtml#create!/1"><code class="inline">Ash.create!/1</code></a> function.</p><pre><code class="makeup elixir" translate="no"><span class="nc">Helpdesk.Support.Ticket</span><span class="w">
</span><span class="o">|&gt;</span><span class="w"> </span><span class="nc">Ash.Changeset</span><span class="o">.</span><span class="n">for_create</span><span class="p" data-group-id="6200477662-1">(</span><span class="ss">:create</span><span class="p" data-group-id="6200477662-1">)</span><span class="w">
</span><span class="o">|&gt;</span><span class="w"> </span><span class="nc">Ash</span><span class="o">.</span><span class="n">create!</span><span class="p" data-group-id="6200477662-2">(</span><span class="p" data-group-id="6200477662-2">)</span></code></pre><p>This returns what we call a <code class="inline">record</code> which is an instance of a resource.</p><pre><code class="makeup elixir" translate="no"><span class="p" data-group-id="1243436228-1">#</span><span class="nc" data-group-id="1243436228-1">Helpdesk.Support.Ticket</span><span class="p" data-group-id="1243436228-1">&lt;</span><span class="w">
  </span><span class="n">...</span><span class="p">,</span><span class="w">
  </span><span class="ss">id</span><span class="p">:</span><span class="w"> </span><span class="s">&quot;c0f8dc32-a018-4eb4-8656-d5810118f4ea&quot;</span><span class="p">,</span><span class="w">
  </span><span class="ss">subject</span><span class="p">:</span><span class="w"> </span><span class="no">nil</span><span class="p">,</span><span class="w">
  </span><span class="n">...</span><span class="w">
</span><span class="p" data-group-id="1243436228-1">&gt;</span></code></pre><p>Notice we are not persisting the record. The resource is simple returning the record back to us.</p><h3 id="customizing-our-actions">Customizing our Actions</h3><p>One thing you may have noticed earlier is that we created a ticket without providing any input, and as a result our ticket had a <code class="inline">subject</code> of <code class="inline">nil</code>. Additionally, we don't have any other data on the ticket. Lets add a <code class="inline">status</code> attribute, ensure that <code class="inline">subject</code> can't be <code class="inline">nil</code>, and provide a better interface by giving the <code class="inline">:create</code> action a better name, and accepting <code class="inline">:subject</code> as part of the action.</p><p>We'll start with the attribute changes:</p><pre><code class="makeup elixir" translate="no"><span class="c1"># lib/helpdesk/support/ticket.ex</span><span class="w">

</span><span class="n">attributes</span><span class="w"> </span><span class="k" data-group-id="5820616395-1">do</span><span class="w">
  </span><span class="n">...</span><span class="w">
  </span><span class="n">attribute</span><span class="w"> </span><span class="ss">:subject</span><span class="p">,</span><span class="w"> </span><span class="ss">:string</span><span class="w"> </span><span class="k" data-group-id="5820616395-2">do</span><span class="w">
    </span><span class="c1"># Don&#39;t allow `nil` values</span><span class="w">
    </span><span class="n">allow_nil?</span><span class="w"> </span><span class="no">false</span><span class="w">

    </span><span class="c1"># Allow this attribute to be public. By default, all attributes are private.</span><span class="w">
    </span><span class="n">public?</span><span class="w"> </span><span class="no">true</span><span class="w">
  </span><span class="k" data-group-id="5820616395-2">end</span><span class="w">

  </span><span class="c1"># status is either `open` or `closed`. We can add more statuses later</span><span class="w">
  </span><span class="n">attribute</span><span class="w"> </span><span class="ss">:status</span><span class="p">,</span><span class="w"> </span><span class="ss">:atom</span><span class="w"> </span><span class="k" data-group-id="5820616395-3">do</span><span class="w">
    </span><span class="c1"># Constraints allow you to provide extra rules for the value.</span><span class="w">
    </span><span class="c1"># The available constraints depend on the type</span><span class="w">
    </span><span class="c1"># See the documentation for each type to know what constraints are available</span><span class="w">
    </span><span class="c1"># Since atoms are generally only used when we know all of the values</span><span class="w">
    </span><span class="c1"># it provides a `one_of` constraint, that only allows those values</span><span class="w">
    </span><span class="n">constraints</span><span class="w"> </span><span class="p" data-group-id="5820616395-4">[</span><span class="ss">one_of</span><span class="p">:</span><span class="w"> </span><span class="p" data-group-id="5820616395-5">[</span><span class="ss">:open</span><span class="p">,</span><span class="w"> </span><span class="ss">:closed</span><span class="p" data-group-id="5820616395-5">]</span><span class="p" data-group-id="5820616395-4">]</span><span class="w">

    </span><span class="c1"># The status defaulting to open makes sense</span><span class="w">
    </span><span class="n">default</span><span class="w"> </span><span class="ss">:open</span><span class="w">

    </span><span class="c1"># We also don&#39;t want status to ever be `nil`</span><span class="w">
    </span><span class="n">allow_nil?</span><span class="w"> </span><span class="no">false</span><span class="w">
  </span><span class="k" data-group-id="5820616395-3">end</span><span class="w">
</span><span class="k" data-group-id="5820616395-1">end</span></code></pre><p>And then replace the <code class="inline">:create</code> action with <code class="inline">:open</code>, and accept <code class="inline">:subject</code> as input.</p><pre><code class="makeup elixir" translate="no"><span class="c1"># lib/helpdesk/support/ticket.ex</span><span class="w">

</span><span class="n">actions</span><span class="w"> </span><span class="k" data-group-id="6036224043-1">do</span><span class="w">
  </span><span class="n">...</span><span class="w">
  </span><span class="n">create</span><span class="w"> </span><span class="ss">:open</span><span class="w"> </span><span class="k" data-group-id="6036224043-2">do</span><span class="w">
    </span><span class="n">accept</span><span class="w"> </span><span class="p" data-group-id="6036224043-3">[</span><span class="ss">:subject</span><span class="p" data-group-id="6036224043-3">]</span><span class="w">
  </span><span class="k" data-group-id="6036224043-2">end</span><span class="w">
</span><span class="k" data-group-id="6036224043-1">end</span></code></pre><p>Let's try these changes in <code class="inline">iex</code>:</p><p>We use <code class="inline">create!</code> with an exclamation point here because that will raise the error which gives a nicer view of the error in <code class="inline">iex</code></p><pre><code class="makeup elixir" translate="no"><span class="c1"># Use this to pick up changes you&#39;ve made to your code, or restart your session</span><span class="w">
</span><span class="n">recompile</span><span class="p" data-group-id="0655853825-1">(</span><span class="p" data-group-id="0655853825-1">)</span><span class="w">

</span><span class="nc">Helpdesk.Support.Ticket</span><span class="w">
</span><span class="o">|&gt;</span><span class="w"> </span><span class="nc">Ash.Changeset</span><span class="o">.</span><span class="n">for_create</span><span class="p" data-group-id="0655853825-2">(</span><span class="ss">:open</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="0655853825-3">%{</span><span class="ss">subject</span><span class="p">:</span><span class="w"> </span><span class="s">&quot;My mouse won&#39;t click!&quot;</span><span class="p" data-group-id="0655853825-3">}</span><span class="p" data-group-id="0655853825-2">)</span><span class="w">
</span><span class="o">|&gt;</span><span class="w"> </span><span class="nc">Ash</span><span class="o">.</span><span class="n">create!</span><span class="p" data-group-id="0655853825-4">(</span><span class="p" data-group-id="0655853825-4">)</span></code></pre><p>And we can see our newly created ticket with a subject and a status.</p><pre><code class="makeup elixir" translate="no"><span class="p" data-group-id="0295143959-1">#</span><span class="nc" data-group-id="0295143959-1">Helpdesk.Support.Ticket</span><span class="p" data-group-id="0295143959-1">&lt;</span><span class="w">
  </span><span class="n">...</span><span class="w">
  </span><span class="ss">id</span><span class="p">:</span><span class="w"> </span><span class="s">&quot;3c94d310-7b5e-41f0-9104-5b193b831a5d&quot;</span><span class="p">,</span><span class="w">
  </span><span class="ss">status</span><span class="p">:</span><span class="w"> </span><span class="ss">:open</span><span class="p">,</span><span class="w">
  </span><span class="ss">subject</span><span class="p">:</span><span class="w"> </span><span class="s">&quot;My mouse won&#39;t click!&quot;</span><span class="p">,</span><span class="w">
  </span><span class="n">...</span><span class="w">
</span><span class="p" data-group-id="0295143959-1">&gt;</span></code></pre><p>If we didn't include a subject, or left off the arguments completely, we would see an error instead</p><pre><code class="text">** (Ash.Error.Invalid) Invalid Error

* attribute subject is required</code></pre><h3 id="updates-and-validations">Updates and validations</h3><p>Now let's add some logic to close a ticket. This time we'll add an <code class="inline">update</code> action.</p><p>Here we will use a <code class="inline">change</code>. Changes allow you to customize how an action executes with very fine-grained control. There are built-in changes that are automatically available as functions, but you can define your own and pass it in as shown below. You can add multiple, and they will be run in order. See the <a href="Ash.Changeset.xhtml"><code class="inline">Ash.Changeset</code></a> module documentation for more.</p><pre><code class="makeup elixir" translate="no"><span class="c1"># lib/helpdesk/support/ticket.ex</span><span class="w">

</span><span class="n">actions</span><span class="w"> </span><span class="k" data-group-id="9383061587-1">do</span><span class="w">
  </span><span class="n">...</span><span class="w">
  </span><span class="n">update</span><span class="w"> </span><span class="ss">:close</span><span class="w"> </span><span class="k" data-group-id="9383061587-2">do</span><span class="w">
    </span><span class="c1"># We don&#39;t want to accept any input here</span><span class="w">
    </span><span class="n">accept</span><span class="w"> </span><span class="p" data-group-id="9383061587-3">[</span><span class="p" data-group-id="9383061587-3">]</span><span class="w">

    </span><span class="n">validate</span><span class="w"> </span><span class="n">attribute_does_not_equal</span><span class="p" data-group-id="9383061587-4">(</span><span class="ss">:status</span><span class="p">,</span><span class="w"> </span><span class="ss">:closed</span><span class="p" data-group-id="9383061587-4">)</span><span class="w"> </span><span class="k" data-group-id="9383061587-5">do</span><span class="w">
      </span><span class="n">message</span><span class="w"> </span><span class="s">&quot;Ticket is already closed&quot;</span><span class="w">
    </span><span class="k" data-group-id="9383061587-5">end</span><span class="w">

    </span><span class="n">change</span><span class="w"> </span><span class="n">set_attribute</span><span class="p" data-group-id="9383061587-6">(</span><span class="ss">:status</span><span class="p">,</span><span class="w"> </span><span class="ss">:closed</span><span class="p" data-group-id="9383061587-6">)</span><span class="w">
    </span><span class="c1"># A custom change could be added like so:</span><span class="w">
    </span><span class="c1">#</span><span class="w">
    </span><span class="c1"># change MyCustomChange</span><span class="w">
    </span><span class="c1"># change {MyCustomChange, opt: :val}</span><span class="w">
  </span><span class="k" data-group-id="9383061587-2">end</span><span class="w">
</span><span class="k" data-group-id="9383061587-1">end</span></code></pre><p>Try out opening and closing a ticket in <code class="inline">iex</code>:</p><pre><code class="makeup elixir" translate="no"><span class="c1"># Use this to pick up changes you&#39;ve made to your code, or restart your session</span><span class="w">
</span><span class="n">recompile</span><span class="p" data-group-id="3653091368-1">(</span><span class="p" data-group-id="3653091368-1">)</span><span class="w">

</span><span class="c1"># parenthesis so you can paste into iex</span><span class="w">
</span><span class="n">ticket</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p" data-group-id="3653091368-2">(</span><span class="w">
  </span><span class="nc">Helpdesk.Support.Ticket</span><span class="w">
  </span><span class="o">|&gt;</span><span class="w"> </span><span class="nc">Ash.Changeset</span><span class="o">.</span><span class="n">for_create</span><span class="p" data-group-id="3653091368-3">(</span><span class="ss">:open</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="3653091368-4">%{</span><span class="ss">subject</span><span class="p">:</span><span class="w"> </span><span class="s">&quot;My mouse won&#39;t click!&quot;</span><span class="p" data-group-id="3653091368-4">}</span><span class="p" data-group-id="3653091368-3">)</span><span class="w">
  </span><span class="o">|&gt;</span><span class="w"> </span><span class="nc">Ash</span><span class="o">.</span><span class="n">create!</span><span class="p" data-group-id="3653091368-5">(</span><span class="p" data-group-id="3653091368-5">)</span><span class="w">
</span><span class="p" data-group-id="3653091368-2">)</span><span class="w">

</span><span class="n">ticket</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p" data-group-id="3653091368-6">(</span><span class="w">
  </span><span class="n">ticket</span><span class="w">
  </span><span class="o">|&gt;</span><span class="w"> </span><span class="nc">Ash.Changeset</span><span class="o">.</span><span class="n">for_update</span><span class="p" data-group-id="3653091368-7">(</span><span class="ss">:close</span><span class="p" data-group-id="3653091368-7">)</span><span class="w">
  </span><span class="o">|&gt;</span><span class="w"> </span><span class="nc">Ash</span><span class="o">.</span><span class="n">update!</span><span class="p" data-group-id="3653091368-8">(</span><span class="p" data-group-id="3653091368-8">)</span><span class="w">
</span><span class="p" data-group-id="3653091368-6">)</span><span class="w">

</span><span class="p" data-group-id="3653091368-9">#</span><span class="nc" data-group-id="3653091368-9">Helpdesk.Support.Ticket</span><span class="p" data-group-id="3653091368-9">&lt;</span><span class="w">
  </span><span class="n">...</span><span class="w">
  </span><span class="ss">status</span><span class="p">:</span><span class="w"> </span><span class="ss">:closed</span><span class="p">,</span><span class="w">
  </span><span class="ss">subject</span><span class="p">:</span><span class="w"> </span><span class="s">&quot;My mouse won&#39;t click!&quot;</span><span class="p">,</span><span class="w">
  </span><span class="n">...</span><span class="w">
</span><span class="p" data-group-id="3653091368-9">&gt;</span></code></pre><p>What if we would try to close the ticket again?</p><pre><code class="makeup elixir" translate="no"><span class="n">ticket</span><span class="w">
</span><span class="o">|&gt;</span><span class="w"> </span><span class="nc">Ash.Changeset</span><span class="o">.</span><span class="n">for_update</span><span class="p" data-group-id="1718992973-1">(</span><span class="ss">:close</span><span class="p" data-group-id="1718992973-1">)</span><span class="w">
</span><span class="o">|&gt;</span><span class="w"> </span><span class="nc">Ash</span><span class="o">.</span><span class="n">update!</span><span class="p" data-group-id="1718992973-2">(</span><span class="p" data-group-id="1718992973-2">)</span></code></pre><p>The application would halt with an error:</p><pre><code class="text">...
** (Ash.Error.Invalid)
Bread Crumbs:
  &gt; Returned from bulk query update: Helpdesk.Support.Ticket.close

Invalid Error

* Invalid value provided for status: Ticket is already closed.
...</code></pre><p>Note the 'Ticket is already closed' message that we have defined in the <code class="inline">attribute_does_not_equal</code> validation.</p><p>And if we'd use the non-bang version:</p><pre><code class="makeup elixir" translate="no"><span class="n">ticket</span><span class="w">
</span><span class="o">|&gt;</span><span class="w"> </span><span class="nc">Ash.Changeset</span><span class="o">.</span><span class="n">for_update</span><span class="p" data-group-id="6526881461-1">(</span><span class="ss">:close</span><span class="p" data-group-id="6526881461-1">)</span><span class="w">
</span><span class="o">|&gt;</span><span class="w"> </span><span class="nc">Ash</span><span class="o">.</span><span class="n">update</span><span class="p" data-group-id="6526881461-2">(</span><span class="p" data-group-id="6526881461-2">)</span></code></pre><p>we get an error tuple with a %Ash.Error.Invalid struct that contains the message:</p><pre><code class="text">{:error,
 %Ash.Error.Invalid{
...
       message: &quot;Ticket is already closed&quot;,
...</code></pre><h3 id="querying-without-persistence">Querying without persistence</h3><p>So far we haven't used a data layer that does any persistence, like storing records in a database. All that this simple resource does is return the record back to us. You can see this lack of persistence by attempting to use a <code class="inline">read</code> action:</p><pre><code class="makeup elixir" translate="no"><span class="nc">Ash</span><span class="o">.</span><span class="n">read!</span><span class="p" data-group-id="9758763639-1">(</span><span class="nc">Helpdesk.Support.Ticket</span><span class="p" data-group-id="9758763639-1">)</span></code></pre><p>Which will raise an error explaining that there is no data to be read for that resource.</p><p>In order to save our data somewhere, we need to add a data layer to our resources. Before we do that, however, let's go over how Ash allows us to work against many different data layers (or even no data layer at all).</p><p>Resources without a data layer will implicitly be using <a href="Ash.DataLayer.Simple.xhtml"><code class="inline">Ash.DataLayer.Simple</code></a>. This data is not persisted anywhere, and must be provided when running queries. It provides a utility for just this purpose, <a href="Ash.DataLayer.Simple.xhtml#set_data/2"><code class="inline">Ash.DataLayer.Simple.set_data/2</code></a>.</p><p>Try the following in <code class="inline">iex</code>. We will open some tickets, and close some of them, and then use <a href="Ash.DataLayer.Simple.xhtml#set_data/2"><code class="inline">Ash.DataLayer.Simple.set_data/2</code></a> to use those tickets.</p><pre><code class="makeup elixir" translate="no"><span class="c1"># Ash.Query is a macro, so it must be required</span><span class="w">
</span><span class="kn">require</span><span class="w"> </span><span class="nc">Ash.Query</span><span class="w">

</span><span class="n">tickets</span><span class="w"> </span><span class="o">=</span><span class="w">
  </span><span class="k">for</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="mi">0</span><span class="o">..</span><span class="mi">5</span><span class="w"> </span><span class="k" data-group-id="3419010153-1">do</span><span class="w">
    </span><span class="n">ticket</span><span class="w"> </span><span class="o">=</span><span class="w">
      </span><span class="nc">Helpdesk.Support.Ticket</span><span class="w">
      </span><span class="o">|&gt;</span><span class="w"> </span><span class="nc">Ash.Changeset</span><span class="o">.</span><span class="n">for_create</span><span class="p" data-group-id="3419010153-2">(</span><span class="ss">:open</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="3419010153-3">%{</span><span class="ss">subject</span><span class="p">:</span><span class="w"> </span><span class="s">&quot;Issue </span><span class="si" data-group-id="3419010153-4">#{</span><span class="n">i</span><span class="si" data-group-id="3419010153-4">}</span><span class="s">&quot;</span><span class="p" data-group-id="3419010153-3">}</span><span class="p" data-group-id="3419010153-2">)</span><span class="w">
      </span><span class="o">|&gt;</span><span class="w"> </span><span class="nc">Ash</span><span class="o">.</span><span class="n">create!</span><span class="p" data-group-id="3419010153-5">(</span><span class="p" data-group-id="3419010153-5">)</span><span class="w">

    </span><span class="k">if</span><span class="w"> </span><span class="n">rem</span><span class="p" data-group-id="3419010153-6">(</span><span class="n">i</span><span class="p">,</span><span class="w"> </span><span class="mi">2</span><span class="p" data-group-id="3419010153-6">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="mi">0</span><span class="w"> </span><span class="k" data-group-id="3419010153-7">do</span><span class="w">
      </span><span class="n">ticket</span><span class="w">
      </span><span class="o">|&gt;</span><span class="w"> </span><span class="nc">Ash.Changeset</span><span class="o">.</span><span class="n">for_update</span><span class="p" data-group-id="3419010153-8">(</span><span class="ss">:close</span><span class="p" data-group-id="3419010153-8">)</span><span class="w">
      </span><span class="o">|&gt;</span><span class="w"> </span><span class="nc">Ash</span><span class="o">.</span><span class="n">update!</span><span class="p" data-group-id="3419010153-9">(</span><span class="p" data-group-id="3419010153-9">)</span><span class="w">
    </span><span class="k" data-group-id="3419010153-7">else</span><span class="w">
      </span><span class="n">ticket</span><span class="w">
    </span><span class="k" data-group-id="3419010153-7">end</span><span class="w">
  </span><span class="k" data-group-id="3419010153-1">end</span></code></pre><p>Find the tickets where the subject contains <code class="inline">&quot;2&quot;</code>. Note that the we're setting the ticket data that we're querying using <code class="inline">set_data</code>.</p><pre><code class="makeup elixir" translate="no"><span class="nc">Helpdesk.Support.Ticket</span><span class="w">
</span><span class="o">|&gt;</span><span class="w"> </span><span class="nc">Ash.Query</span><span class="o">.</span><span class="n">filter</span><span class="p" data-group-id="1662126857-1">(</span><span class="n">contains</span><span class="p" data-group-id="1662126857-2">(</span><span class="n">subject</span><span class="p">,</span><span class="w"> </span><span class="s">&quot;2&quot;</span><span class="p" data-group-id="1662126857-2">)</span><span class="p" data-group-id="1662126857-1">)</span><span class="w">
</span><span class="o">|&gt;</span><span class="w"> </span><span class="nc">Ash.DataLayer.Simple</span><span class="o">.</span><span class="n">set_data</span><span class="p" data-group-id="1662126857-3">(</span><span class="n">tickets</span><span class="p" data-group-id="1662126857-3">)</span><span class="w">
</span><span class="o">|&gt;</span><span class="w"> </span><span class="nc">Ash</span><span class="o">.</span><span class="n">read!</span><span class="p" data-group-id="1662126857-4">(</span><span class="p" data-group-id="1662126857-4">)</span></code></pre><p>Find the tickets that are <em>closed</em> and their subject does <em>not</em> contain <code class="inline">&quot;4&quot;</code></p><pre><code class="makeup elixir" translate="no"><span class="nc">Helpdesk.Support.Ticket</span><span class="w">
</span><span class="o">|&gt;</span><span class="w"> </span><span class="nc">Ash.Query</span><span class="o">.</span><span class="n">filter</span><span class="p" data-group-id="9255129634-1">(</span><span class="n">status</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="ss">:closed</span><span class="w"> </span><span class="ow">and</span><span class="w"> </span><span class="ow">not</span><span class="p" data-group-id="9255129634-2">(</span><span class="n">contains</span><span class="p" data-group-id="9255129634-3">(</span><span class="n">subject</span><span class="p">,</span><span class="w"> </span><span class="s">&quot;4&quot;</span><span class="p" data-group-id="9255129634-3">)</span><span class="p" data-group-id="9255129634-2">)</span><span class="p" data-group-id="9255129634-1">)</span><span class="w">
</span><span class="o">|&gt;</span><span class="w"> </span><span class="nc">Ash.DataLayer.Simple</span><span class="o">.</span><span class="n">set_data</span><span class="p" data-group-id="9255129634-4">(</span><span class="n">tickets</span><span class="p" data-group-id="9255129634-4">)</span><span class="w">
</span><span class="o">|&gt;</span><span class="w"> </span><span class="nc">Ash</span><span class="o">.</span><span class="n">read!</span><span class="p" data-group-id="9255129634-5">(</span><span class="p" data-group-id="9255129634-5">)</span></code></pre><p>The examples above could be easily implemented with <code class="inline">Enum.filter</code>, but the real power here is to allow you to use the same tools when working with any data layer.</p><p>Even though it doesn't persist data in any way, <a href="Ash.DataLayer.Simple.xhtml"><code class="inline">Ash.DataLayer.Simple</code></a> can be useful to model static data, or be used for resources where all the actions are manual and inject data from other sources.</p><h3 id="adding-basic-persistence">Adding basic persistence</h3><p>Before we get into working with relationships, let's add some real persistence to our resource. This will let us add relationships and try out querying data.</p><p>There is a built in data layer that is useful for testing and prototyping, that uses <a href="https://elixir-lang.org/getting-started/mix-otp/ets.html">ETS</a>. ETS (Erlang Term Storage) is OTP's in-memory database, so the data won't actually stick around beyond the lifespan of your program, but it's a simple way to try things out.</p><p>To add it to your resource, modify it like so:</p><pre><code class="makeup elixir" translate="no"><span class="c1"># lib/helpdesk/support/ticket.ex</span><span class="w">

</span><span class="kn">use</span><span class="w"> </span><span class="nc">Ash.Resource</span><span class="p">,</span><span class="w">
  </span><span class="ss">domain</span><span class="p">:</span><span class="w"> </span><span class="nc">Helpdesk.Support</span><span class="p">,</span><span class="w">
  </span><span class="ss">data_layer</span><span class="p">:</span><span class="w"> </span><span class="nc">Ash.DataLayer.Ets</span></code></pre><p>Now we can slightly modify our code above, by removing the <a href="Ash.DataLayer.Simple.xhtml#set_data/2"><code class="inline">Ash.DataLayer.Simple.set_data/2</code></a> calls, and we can see our persistence in action. Remember, ETS is in-memory, meaning restarting your application/iex session will remove all of the data.</p><pre><code class="makeup elixir" translate="no"><span class="c1"># Use this to pick up changes you&#39;ve made to your code, or restart your session</span><span class="w">
</span><span class="n">recompile</span><span class="p" data-group-id="1897339455-1">(</span><span class="p" data-group-id="1897339455-1">)</span><span class="w">

</span><span class="kn">require</span><span class="w"> </span><span class="nc">Ash.Query</span><span class="w">

</span><span class="k">for</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="mi">0</span><span class="o">..</span><span class="mi">5</span><span class="w"> </span><span class="k" data-group-id="1897339455-2">do</span><span class="w">
  </span><span class="n">ticket</span><span class="w"> </span><span class="o">=</span><span class="w">
    </span><span class="nc">Helpdesk.Support.Ticket</span><span class="w">
    </span><span class="o">|&gt;</span><span class="w"> </span><span class="nc">Ash.Changeset</span><span class="o">.</span><span class="n">for_create</span><span class="p" data-group-id="1897339455-3">(</span><span class="ss">:open</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="1897339455-4">%{</span><span class="ss">subject</span><span class="p">:</span><span class="w"> </span><span class="s">&quot;Issue </span><span class="si" data-group-id="1897339455-5">#{</span><span class="n">i</span><span class="si" data-group-id="1897339455-5">}</span><span class="s">&quot;</span><span class="p" data-group-id="1897339455-4">}</span><span class="p" data-group-id="1897339455-3">)</span><span class="w">
    </span><span class="o">|&gt;</span><span class="w"> </span><span class="nc">Ash</span><span class="o">.</span><span class="n">create!</span><span class="p" data-group-id="1897339455-6">(</span><span class="p" data-group-id="1897339455-6">)</span><span class="w">

  </span><span class="k">if</span><span class="w"> </span><span class="n">rem</span><span class="p" data-group-id="1897339455-7">(</span><span class="n">i</span><span class="p">,</span><span class="w"> </span><span class="mi">2</span><span class="p" data-group-id="1897339455-7">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="mi">0</span><span class="w"> </span><span class="k" data-group-id="1897339455-8">do</span><span class="w">
    </span><span class="n">ticket</span><span class="w">
    </span><span class="o">|&gt;</span><span class="w"> </span><span class="nc">Ash.Changeset</span><span class="o">.</span><span class="n">for_update</span><span class="p" data-group-id="1897339455-9">(</span><span class="ss">:close</span><span class="p" data-group-id="1897339455-9">)</span><span class="w">
    </span><span class="o">|&gt;</span><span class="w"> </span><span class="nc">Ash</span><span class="o">.</span><span class="n">update!</span><span class="p" data-group-id="1897339455-10">(</span><span class="p" data-group-id="1897339455-10">)</span><span class="w">
  </span><span class="k" data-group-id="1897339455-8">end</span><span class="w">
</span><span class="k" data-group-id="1897339455-2">end</span><span class="w">

</span><span class="c1"># Show the tickets where the subject contains &quot;2&quot;</span><span class="w">
</span><span class="nc">Helpdesk.Support.Ticket</span><span class="w">
</span><span class="o">|&gt;</span><span class="w"> </span><span class="nc">Ash.Query</span><span class="o">.</span><span class="n">filter</span><span class="p" data-group-id="1897339455-11">(</span><span class="n">contains</span><span class="p" data-group-id="1897339455-12">(</span><span class="n">subject</span><span class="p">,</span><span class="w"> </span><span class="s">&quot;2&quot;</span><span class="p" data-group-id="1897339455-12">)</span><span class="p" data-group-id="1897339455-11">)</span><span class="w">
</span><span class="o">|&gt;</span><span class="w"> </span><span class="nc">Ash</span><span class="o">.</span><span class="n">read!</span><span class="p" data-group-id="1897339455-13">(</span><span class="p" data-group-id="1897339455-13">)</span><span class="w">

</span><span class="c1"># Show the tickets that are closed and their subject does not contain &quot;4&quot;</span><span class="w">
</span><span class="nc">Helpdesk.Support.Ticket</span><span class="w">
</span><span class="o">|&gt;</span><span class="w"> </span><span class="nc">Ash.Query</span><span class="o">.</span><span class="n">filter</span><span class="p" data-group-id="1897339455-14">(</span><span class="n">status</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="ss">:closed</span><span class="w"> </span><span class="ow">and</span><span class="w"> </span><span class="ow">not</span><span class="p" data-group-id="1897339455-15">(</span><span class="n">contains</span><span class="p" data-group-id="1897339455-16">(</span><span class="n">subject</span><span class="p">,</span><span class="w"> </span><span class="s">&quot;4&quot;</span><span class="p" data-group-id="1897339455-16">)</span><span class="p" data-group-id="1897339455-15">)</span><span class="p" data-group-id="1897339455-14">)</span><span class="w">
</span><span class="o">|&gt;</span><span class="w"> </span><span class="nc">Ash</span><span class="o">.</span><span class="n">read!</span><span class="p" data-group-id="1897339455-17">(</span><span class="p" data-group-id="1897339455-17">)</span></code></pre><h3 id="adding-relationships">Adding relationships</h3><p>Now we want to be able to assign a Ticket to a Representative. First, let's create the Representative resource:</p><pre><code class="makeup elixir" translate="no"><span class="c1"># lib/helpdesk/support/representative.ex</span><span class="w">

</span><span class="kd">defmodule</span><span class="w"> </span><span class="nc">Helpdesk.Support.Representative</span><span class="w"> </span><span class="k" data-group-id="4486304537-1">do</span><span class="w">
  </span><span class="c1"># This turns this module into a resource using the in memory ETS data layer</span><span class="w">
  </span><span class="kn">use</span><span class="w"> </span><span class="nc">Ash.Resource</span><span class="p">,</span><span class="w">
    </span><span class="ss">domain</span><span class="p">:</span><span class="w"> </span><span class="nc">Helpdesk.Support</span><span class="p">,</span><span class="w">
    </span><span class="ss">data_layer</span><span class="p">:</span><span class="w"> </span><span class="nc">Ash.DataLayer.Ets</span><span class="w">

  </span><span class="n">actions</span><span class="w"> </span><span class="k" data-group-id="4486304537-2">do</span><span class="w">
    </span><span class="c1"># Add the default simple actions</span><span class="w">
    </span><span class="n">defaults</span><span class="w"> </span><span class="p" data-group-id="4486304537-3">[</span><span class="ss">:read</span><span class="p" data-group-id="4486304537-3">]</span><span class="w">

    </span><span class="n">create</span><span class="w"> </span><span class="ss">:create</span><span class="w"> </span><span class="k" data-group-id="4486304537-4">do</span><span class="w">
      </span><span class="n">accept</span><span class="w"> </span><span class="p" data-group-id="4486304537-5">[</span><span class="ss">:name</span><span class="p" data-group-id="4486304537-5">]</span><span class="w">
    </span><span class="k" data-group-id="4486304537-4">end</span><span class="w">
  </span><span class="k" data-group-id="4486304537-2">end</span><span class="w">

  </span><span class="c1"># Attributes are the simple pieces of data that exist on your resource</span><span class="w">
  </span><span class="n">attributes</span><span class="w"> </span><span class="k" data-group-id="4486304537-6">do</span><span class="w">
    </span><span class="c1"># Add an autogenerated UUID primary key called `:id`.</span><span class="w">
    </span><span class="n">uuid_primary_key</span><span class="w"> </span><span class="ss">:id</span><span class="w">

    </span><span class="c1"># Add a string type attribute called `:name`</span><span class="w">
    </span><span class="n">attribute</span><span class="w"> </span><span class="ss">:name</span><span class="p">,</span><span class="w"> </span><span class="ss">:string</span><span class="w"> </span><span class="k" data-group-id="4486304537-7">do</span><span class="w">
      </span><span class="c1"># Make the attribute public in order to give a name when calling functions from `Ash.Changeset`.</span><span class="w">
      </span><span class="n">public?</span><span class="w"> </span><span class="no">true</span><span class="w">
    </span><span class="k" data-group-id="4486304537-7">end</span><span class="w">
  </span><span class="k" data-group-id="4486304537-6">end</span><span class="w">

  </span><span class="n">relationships</span><span class="w"> </span><span class="k" data-group-id="4486304537-8">do</span><span class="w">
    </span><span class="c1"># `has_many` means that the destination attribute is not unique, therefore many related records could exist.</span><span class="w">
    </span><span class="c1"># We assume that the destination attribute is `representative_id` based</span><span class="w">
    </span><span class="c1"># on the module name of this resource and that the source attribute is `id`.</span><span class="w">
    </span><span class="n">has_many</span><span class="w"> </span><span class="ss">:tickets</span><span class="p">,</span><span class="w"> </span><span class="nc">Helpdesk.Support.Ticket</span><span class="w">
  </span><span class="k" data-group-id="4486304537-8">end</span><span class="w">
</span><span class="k" data-group-id="4486304537-1">end</span></code></pre><p>Now let's modify our Ticket resource to have the inverse relationship to the Representative.</p><pre><code class="makeup elixir" translate="no"><span class="c1"># lib/helpdesk/support/ticket.ex</span><span class="w">

</span><span class="n">relationships</span><span class="w"> </span><span class="k" data-group-id="5858060836-1">do</span><span class="w">
  </span><span class="c1"># belongs_to means that the destination attribute is unique, meaning only one related record could exist.</span><span class="w">
  </span><span class="c1"># We assume that the destination attribute is `representative_id` based</span><span class="w">
  </span><span class="c1"># on the name of this relationship and that the source attribute is `representative_id`.</span><span class="w">
  </span><span class="c1"># We create `representative_id` automatically.</span><span class="w">
  </span><span class="n">belongs_to</span><span class="w"> </span><span class="ss">:representative</span><span class="p">,</span><span class="w"> </span><span class="nc">Helpdesk.Support.Representative</span><span class="w">
</span><span class="k" data-group-id="5858060836-1">end</span></code></pre><p>Finally, let's add our new Representative resource to our domain module</p><pre><code class="makeup elixir" translate="no"><span class="c1"># lib/helpdesk/support.ex</span><span class="w">

</span><span class="n">resources</span><span class="w"> </span><span class="k" data-group-id="0607192279-1">do</span><span class="w">
 </span><span class="n">...</span><span class="w">
 </span><span class="n">resource</span><span class="w"> </span><span class="nc">Helpdesk.Support.Representative</span><span class="w">
</span><span class="k" data-group-id="0607192279-1">end</span></code></pre><p>You may notice that if you don't add the resource to your domain, or if you don't add the <code class="inline">belongs_to</code> relationship, that you'll get helpful errors at compile time. Helpful compile time validations are a core concept of Ash as we really want to ensure that your application is valid.</p><h2 id="working-with-relationships">Working with relationships</h2><p>The simplest way to work with belongs to relationships is to allow directly editing the underlying id field.</p><section role="note" class="admonition tip"><h3 id="managing-relationships" class="admonition-title tip">managing relationships</h3><p>There are a wide array of options when managing relationships, and we won't cover all of them here. See the <a href="relationships.xhtml#managing-relationships">Managing Relationships guide</a> for more.</p></section><p>Add the <code class="inline">assign</code> action to allow us to assign a Ticket to a Representative.</p><pre><code class="makeup elixir" translate="no"><span class="c1"># lib/helpdesk/support/ticket.ex</span><span class="w">

</span><span class="n">update</span><span class="w"> </span><span class="ss">:assign</span><span class="w"> </span><span class="k" data-group-id="9186540205-1">do</span><span class="w">
  </span><span class="n">accept</span><span class="w"> </span><span class="p" data-group-id="9186540205-2">[</span><span class="ss">:representative_id</span><span class="p" data-group-id="9186540205-2">]</span><span class="w">
</span><span class="k" data-group-id="9186540205-1">end</span></code></pre><p>Let's try it out in our <code class="inline">iex</code> console!</p><p>Use <code class="inline">recompile</code> to pick up changes you've made to your code, or just restart your session.</p><pre><code class="makeup elixir" translate="no"><span class="n">recompile</span><span class="p" data-group-id="8661209690-1">(</span><span class="p" data-group-id="8661209690-1">)</span></code></pre><h3 id="open-a-ticket">Open a Ticket</h3><pre><code class="makeup elixir" translate="no"><span class="n">ticket</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p" data-group-id="6223378285-1">(</span><span class="w">
  </span><span class="nc">Helpdesk.Support.Ticket</span><span class="w">
  </span><span class="o">|&gt;</span><span class="w"> </span><span class="nc">Ash.Changeset</span><span class="o">.</span><span class="n">for_create</span><span class="p" data-group-id="6223378285-2">(</span><span class="ss">:open</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="6223378285-3">%{</span><span class="ss">subject</span><span class="p">:</span><span class="w"> </span><span class="s">&quot;I can&#39;t find my hand!&quot;</span><span class="p" data-group-id="6223378285-3">}</span><span class="p" data-group-id="6223378285-2">)</span><span class="w">
  </span><span class="o">|&gt;</span><span class="w"> </span><span class="nc">Ash</span><span class="o">.</span><span class="n">create!</span><span class="p" data-group-id="6223378285-4">(</span><span class="p" data-group-id="6223378285-4">)</span><span class="w">
</span><span class="p" data-group-id="6223378285-1">)</span></code></pre><h3 id="create-a-representative">Create a Representative</h3><pre><code class="makeup elixir" translate="no"><span class="n">representative</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p" data-group-id="5206599882-1">(</span><span class="w">
  </span><span class="nc">Helpdesk.Support.Representative</span><span class="w">
  </span><span class="o">|&gt;</span><span class="w"> </span><span class="nc">Ash.Changeset</span><span class="o">.</span><span class="n">for_create</span><span class="p" data-group-id="5206599882-2">(</span><span class="ss">:create</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="5206599882-3">%{</span><span class="ss">name</span><span class="p">:</span><span class="w"> </span><span class="s">&quot;Joe Armstrong&quot;</span><span class="p" data-group-id="5206599882-3">}</span><span class="p" data-group-id="5206599882-2">)</span><span class="w">
  </span><span class="o">|&gt;</span><span class="w"> </span><span class="nc">Ash</span><span class="o">.</span><span class="n">create!</span><span class="p" data-group-id="5206599882-4">(</span><span class="p" data-group-id="5206599882-4">)</span><span class="w">
</span><span class="p" data-group-id="5206599882-1">)</span></code></pre><h3 id="assign-that-representative-to-the-ticket">Assign that Representative to the Ticket</h3><pre><code class="makeup elixir" translate="no"><span class="n">ticket</span><span class="w">
</span><span class="o">|&gt;</span><span class="w"> </span><span class="nc">Ash.Changeset</span><span class="o">.</span><span class="n">for_update</span><span class="p" data-group-id="2717759963-1">(</span><span class="ss">:assign</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="2717759963-2">%{</span><span class="ss">representative_id</span><span class="p">:</span><span class="w"> </span><span class="n">representative</span><span class="o">.</span><span class="n">id</span><span class="p" data-group-id="2717759963-2">}</span><span class="p" data-group-id="2717759963-1">)</span><span class="w">
</span><span class="o">|&gt;</span><span class="w"> </span><span class="nc">Ash</span><span class="o">.</span><span class="n">update!</span><span class="p" data-group-id="2717759963-3">(</span><span class="p" data-group-id="2717759963-3">)</span></code></pre><h3 id="what-next">What next?</h3><p>What you've seen above barely scratches the surface of what Ash can do. In a lot of ways, it will look very similar to other tools that you've seen. If all that you ever used was the above, then realistically you won't see much benefit to using Ash.</p><p>Where Ash shines however, is all of the tools that can work <em>with</em> your resources. You have the ability to extend the framework yourself, and apply consistent design patterns that enable unparalleled efficiency, power and flexibility as your application grows.</p><h4>Get Help</h4><ul><li>Check out <a href="https://elixirforum.com/c/ash-framework-forum">ElixirForum</a></li><li>Join our <a href="https://discord.gg/D7FNG2q">Discord server</a></li><li>Open a <a href="https://github.com/ash-project/ash/issues/new/choose">GitHub issue</a></li></ul><h4>Persist your data</h4><p>See <a href="https://hexdocs.pm/ash_postgres">The AshPostgres getting started guide</a> to see how to back your resources with Postgres.
This is highly recommended, as the Postgres data layer provides tons of advanced capabilities.</p><h4>Add a web API</h4><p>Check out <a href="https://hexdocs.pm/ash_json_api">AshJsonApi</a> and <a href="https://hexdocs.pm/ash_graphql">AshGraphql</a> extensions to build APIs around your resource</p><h4>Authorize access and work with users</h4><p>See <a href="https://hexdocs.pm/ash_authentication">AshAuthentication</a> for setting up users and allowing them to
log in. It supports password, magic link, oauth (google, github, apple etc.) out of the box!</p><p>See the <a href="policies.xhtml">Policies guide</a> for information on how to authorize access to your resources using actors and policies.</p><h4>Clean up your code that uses Ash?</h4><p>Creating and using changesets manually can be verbose, and they all look very similar. Luckily, Ash has your back and can help you build high quality interfaces for you!</p><p>Check out the <a href="code-interfaces.xhtml">Code Interface Guide</a> to derive things like <code class="inline">Helpdesk.Support.Ticket.assign!(representative.id)</code></p>

  </body>
</html>
