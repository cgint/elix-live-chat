<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"
      xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>Generic Actions - ash v3.5.33</title>
    <meta name="generator" content="ExDoc v0.38.2" />
    <link type="text/css" rel="stylesheet" href="dist/epub-elixir-FNUUKFP7.css" />
    <script src="dist/epub-4WIP524F.js"></script>

  </head>
  <body class="content-inner">

    <h1 id="content">Generic Actions</h1>
<p>Generic actions are so named because there are no special rules about how they work. A generic action takes arguments and returns a value. The struct used for building input for a generic action is <a href="Ash.ActionInput.xhtml"><code class="inline">Ash.ActionInput</code></a>.</p><pre><code class="makeup elixir" translate="no"><span class="n">action</span><span class="w"> </span><span class="ss">:say_hello</span><span class="p">,</span><span class="w"> </span><span class="ss">:string</span><span class="w"> </span><span class="k" data-group-id="9968345629-1">do</span><span class="w">
  </span><span class="n">argument</span><span class="w"> </span><span class="ss">:name</span><span class="p">,</span><span class="w"> </span><span class="ss">:string</span><span class="p">,</span><span class="w"> </span><span class="ss">allow_nil?</span><span class="p">:</span><span class="w"> </span><span class="no">false</span><span class="w">

  </span><span class="n">run</span><span class="w"> </span><span class="k" data-group-id="9968345629-2">fn</span><span class="w"> </span><span class="n">input</span><span class="p">,</span><span class="w"> </span><span class="bp">_</span><span class="w"> </span><span class="o">-&gt;</span><span class="w">
    </span><span class="p" data-group-id="9968345629-3">{</span><span class="ss">:ok</span><span class="p">,</span><span class="w"> </span><span class="s">&quot;Hello: </span><span class="si" data-group-id="9968345629-4">#{</span><span class="n">input</span><span class="o">.</span><span class="n">arguments</span><span class="o">.</span><span class="n">name</span><span class="si" data-group-id="9968345629-4">}</span><span class="s">&quot;</span><span class="p" data-group-id="9968345629-3">}</span><span class="w">
  </span><span class="k" data-group-id="9968345629-2">end</span><span class="w">
</span><span class="k" data-group-id="9968345629-1">end</span></code></pre><p>A generic action declares its arguments, return type, and implementation, as illustrated above.</p><section role="note" class="admonition tip"><h3 id="no-return-no-problem" class="admonition-title tip">No return? No problem!</h3><p>Generic actions can omit a return type, in which case running them returns <code class="inline">:ok</code> if successful.</p><pre><code class="makeup elixir" translate="no"><span class="n">action</span><span class="w"> </span><span class="ss">:schedule_job</span><span class="w"> </span><span class="k" data-group-id="8332633948-1">do</span><span class="w">
  </span><span class="n">argument</span><span class="w"> </span><span class="ss">:job_name</span><span class="p">,</span><span class="w"> </span><span class="ss">:string</span><span class="p">,</span><span class="w"> </span><span class="ss">allow_nil?</span><span class="p">:</span><span class="w"> </span><span class="no">false</span><span class="w">
  </span><span class="n">run</span><span class="w"> </span><span class="k" data-group-id="8332633948-2">fn</span><span class="w"> </span><span class="n">input</span><span class="p">,</span><span class="w"> </span><span class="bp">_</span><span class="w"> </span><span class="o">-&gt;</span><span class="w">
    </span><span class="c1"># Schedule the job</span><span class="w">
    </span><span class="ss">:ok</span><span class="w">
  </span><span class="k" data-group-id="8332633948-2">end</span><span class="w">
</span><span class="k" data-group-id="8332633948-1">end</span></code></pre></section><p>For a full list of all of the available options for configuring generic actions, see <a href="dsl-ash-resource.html#actions-action">the Ash.Resource.Dsl documentation</a>.</p><h2 id="calling-generic-actions">Calling Generic Actions</h2><p>The basic formula for calling a generic action looks like this:</p><pre><code class="makeup elixir" translate="no"><span class="nc">Resource</span><span class="w">
</span><span class="o">|&gt;</span><span class="w"> </span><span class="nc">Ash.ActionInput</span><span class="o">.</span><span class="n">for_action</span><span class="p" data-group-id="4888893761-1">(</span><span class="ss">:action_name</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="4888893761-2">%{</span><span class="ss">argument</span><span class="p">:</span><span class="w"> </span><span class="ss">:value</span><span class="p" data-group-id="4888893761-2">}</span><span class="p">,</span><span class="w"> </span><span class="n">...</span><span class="n">opts</span><span class="p" data-group-id="4888893761-1">)</span><span class="w">
</span><span class="o">|&gt;</span><span class="w"> </span><span class="nc">Ash</span><span class="o">.</span><span class="n">run_action!</span><span class="p" data-group-id="4888893761-3">(</span><span class="p" data-group-id="4888893761-3">)</span></code></pre><p>See the <a href="code-interfaces.xhtml">code interface guide</a> guide for how to
define idiomatic and convenient functions that call your actions.</p><h2 id="why-use-generic-actions">Why use generic actions?</h2><p>The example above could be written as a normal function in elixir, i.e</p><pre><code class="makeup elixir" translate="no"><span class="kd">def</span><span class="w"> </span><span class="nf">say_hello</span><span class="p" data-group-id="1540428120-1">(</span><span class="n">name</span><span class="p" data-group-id="1540428120-1">)</span><span class="p">,</span><span class="w"> </span><span class="ss">do</span><span class="p">:</span><span class="w"> </span><span class="s">&quot;Hello: </span><span class="si" data-group-id="1540428120-2">#{</span><span class="n">name</span><span class="si" data-group-id="1540428120-2">}</span><span class="s">&quot;</span></code></pre><p>The benefit of using generic actions instead of defining normal functions:</p><ul><li>They can be used with api extensions like <code class="inline">ash_json_api</code> and <code class="inline">ash_graphql</code></li><li>Their inputs are type checked and casted</li><li>They support Ash authorization patterns (i.e policies)</li><li>They can be included in the code interface of a resource</li><li>They can be made transactional with a single option (<code class="inline">transaction? true</code>)</li></ul><p>If you don't need any of the above, then there is no problem with writing regular Elixir functions!</p><h2 id="return-types-and-constraints">Return types and constraints</h2><p>Generic actions do not cast their return types. It is expected that the action return a valid value for the type that they declare. However, declaring additional constraints can inform API usage, and make the action more clear. For example:</p><pre><code class="makeup elixir" translate="no"><span class="n">action</span><span class="w"> </span><span class="ss">:priority</span><span class="p">,</span><span class="w"> </span><span class="ss">:integer</span><span class="w"> </span><span class="k" data-group-id="9839478335-1">do</span><span class="w">
  </span><span class="n">constraints</span><span class="w"> </span><span class="p" data-group-id="9839478335-2">[</span><span class="ss">min</span><span class="p">:</span><span class="w"> </span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="ss">max</span><span class="p">:</span><span class="w"> </span><span class="mi">3</span><span class="p" data-group-id="9839478335-2">]</span><span class="w">
  </span><span class="n">argument</span><span class="w"> </span><span class="ss">:status</span><span class="p">,</span><span class="w"> </span><span class="ss">:atom</span><span class="p">,</span><span class="w"> </span><span class="ss">constraints</span><span class="p">:</span><span class="w"> </span><span class="p" data-group-id="9839478335-3">[</span><span class="ss">one_of</span><span class="p">:</span><span class="w"> </span><span class="p" data-group-id="9839478335-4">[</span><span class="ss">:high</span><span class="p">,</span><span class="w"> </span><span class="ss">:medium</span><span class="p">,</span><span class="w"> </span><span class="ss">:low</span><span class="p" data-group-id="9839478335-4">]</span><span class="p" data-group-id="9839478335-3">]</span><span class="w">

  </span><span class="n">run</span><span class="w"> </span><span class="k" data-group-id="9839478335-5">fn</span><span class="w"> </span><span class="n">input</span><span class="p">,</span><span class="w"> </span><span class="bp">_</span><span class="w"> </span><span class="o">-&gt;</span><span class="w">
    </span><span class="k">case</span><span class="w"> </span><span class="n">input</span><span class="o">.</span><span class="n">arguments</span><span class="o">.</span><span class="n">status</span><span class="w"> </span><span class="k" data-group-id="9839478335-6">do</span><span class="w">
      </span><span class="ss">:high</span><span class="w"> </span><span class="o">-&gt;</span><span class="w"> </span><span class="p" data-group-id="9839478335-7">{</span><span class="ss">:ok</span><span class="p">,</span><span class="w"> </span><span class="mi">3</span><span class="p" data-group-id="9839478335-7">}</span><span class="w">
      </span><span class="ss">:medium</span><span class="w"> </span><span class="o">-&gt;</span><span class="w"> </span><span class="p" data-group-id="9839478335-8">{</span><span class="ss">:ok</span><span class="p">,</span><span class="w"> </span><span class="mi">2</span><span class="p" data-group-id="9839478335-8">}</span><span class="w">
      </span><span class="ss">:low</span><span class="w"> </span><span class="o">-&gt;</span><span class="w"> </span><span class="p" data-group-id="9839478335-9">{</span><span class="ss">:ok</span><span class="p">,</span><span class="w"> </span><span class="mi">1</span><span class="p" data-group-id="9839478335-9">}</span><span class="w">
    </span><span class="k" data-group-id="9839478335-6">end</span><span class="w">
  </span><span class="k" data-group-id="9839478335-5">end</span><span class="w">
</span><span class="k" data-group-id="9839478335-1">end</span></code></pre><section role="note" class="admonition info"><h4 class="admonition-title info">Returning resource instances</h4><p>It sometimes happens that you want to make a generic action which returns an
instance or instances of the resource. It's natural to assume that you can
set your action's return type to the name of your resource. This won't work
as resources do not define a type, unless they are embedded. In embedded resources, this won't work because the module is still being compiled, so referencing yourself as a type causes a compile error. Instead, use the <code class="inline">:struct</code> type and the <code class="inline">instance_of</code> constraint, like so:</p><pre><code class="makeup elixir" translate="no"><span class="n">action</span><span class="w"> </span><span class="ss">:get</span><span class="p">,</span><span class="w"> </span><span class="ss">:struct</span><span class="w"> </span><span class="k" data-group-id="5177931811-1">do</span><span class="w">
  </span><span class="n">constraints</span><span class="w"> </span><span class="ss">instance_of</span><span class="p">:</span><span class="w"> </span><span class="bp">__MODULE__</span><span class="w">

  </span><span class="n">run</span><span class="w"> </span><span class="c1"># ...</span><span class="w">
</span><span class="k" data-group-id="5177931811-1">end</span></code></pre><p>For returning many instances of the resource, you can set your action's return type to
<code class="inline">{:array, :struct}</code> and set the <code class="inline">items</code> constraint to the name of your resource.</p><pre><code class="makeup elixir" translate="no"><span class="w"> </span><span class="n">action</span><span class="w"> </span><span class="ss">:list_resources</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="6523055166-1">{</span><span class="ss">:array</span><span class="p">,</span><span class="w"> </span><span class="ss">:struct</span><span class="p" data-group-id="6523055166-1">}</span><span class="w"> </span><span class="k" data-group-id="6523055166-2">do</span><span class="w">
   </span><span class="n">constraints</span><span class="w"> </span><span class="ss">items</span><span class="p">:</span><span class="w"> </span><span class="p" data-group-id="6523055166-3">[</span><span class="ss">instance_of</span><span class="p">:</span><span class="w"> </span><span class="bp">__MODULE__</span><span class="p" data-group-id="6523055166-3">]</span><span class="w">

   </span><span class="n">run</span><span class="w"> </span><span class="c1"># ...</span><span class="w">
 </span><span class="k" data-group-id="6523055166-2">end</span></code></pre></section><h2 id="calling-generic-actions-1">Calling Generic Actions</h2><p>To execute a generic action in Ash, follow these steps:</p><ol><li><strong>Prepare the action input:</strong> Use <a href="Ash.ActionInput.xhtml#for_action/4"><code class="inline">Ash.ActionInput.for_action/4</code></a> to specify the resource, the action and its arguments.</li><li><strong>Run the action:</strong> Use <a href="Ash.xhtml#run_action/2"><code class="inline">Ash.run_action/2</code></a> to execute the action with the prepared input.</li></ol><h3 id="example-usage">Example Usage</h3><p>Consider an <a href="Ash.Resource.xhtml"><code class="inline">Ash.Resource</code></a> with the action <code class="inline">:say_hello</code>:</p><pre><code class="makeup elixir" translate="no"><span class="n">action</span><span class="w"> </span><span class="ss">:say_hello</span><span class="p">,</span><span class="w"> </span><span class="ss">:string</span><span class="w"> </span><span class="k" data-group-id="5860738145-1">do</span><span class="w">
  </span><span class="n">argument</span><span class="w"> </span><span class="ss">:name</span><span class="p">,</span><span class="w"> </span><span class="ss">:string</span><span class="p">,</span><span class="w"> </span><span class="ss">allow_nil?</span><span class="p">:</span><span class="w"> </span><span class="no">false</span><span class="w">

  </span><span class="n">run</span><span class="w"> </span><span class="k" data-group-id="5860738145-2">fn</span><span class="w"> </span><span class="n">input</span><span class="p">,</span><span class="w"> </span><span class="bp">_</span><span class="w"> </span><span class="o">-&gt;</span><span class="w">
    </span><span class="p" data-group-id="5860738145-3">{</span><span class="ss">:ok</span><span class="p">,</span><span class="w"> </span><span class="s">&quot;Hello: </span><span class="si" data-group-id="5860738145-4">#{</span><span class="n">input</span><span class="o">.</span><span class="n">arguments</span><span class="o">.</span><span class="n">name</span><span class="si" data-group-id="5860738145-4">}</span><span class="s">&quot;</span><span class="p" data-group-id="5860738145-3">}</span><span class="w">
  </span><span class="k" data-group-id="5860738145-2">end</span><span class="w">
</span><span class="k" data-group-id="5860738145-1">end</span></code></pre><p>Call this action:</p><pre><code class="makeup elixir" translate="no"><span class="p" data-group-id="0754651866-1">{</span><span class="ss">:ok</span><span class="p">,</span><span class="w"> </span><span class="n">greeting</span><span class="p" data-group-id="0754651866-1">}</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nc">Resource</span><span class="w">
</span><span class="o">|&gt;</span><span class="w"> </span><span class="nc">Ash.ActionInput</span><span class="o">.</span><span class="n">for_action</span><span class="p" data-group-id="0754651866-2">(</span><span class="ss">:say_hello</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="0754651866-3">%{</span><span class="ss">name</span><span class="p">:</span><span class="w"> </span><span class="s">&quot;Alice&quot;</span><span class="p" data-group-id="0754651866-3">}</span><span class="p" data-group-id="0754651866-2">)</span><span class="w">
</span><span class="o">|&gt;</span><span class="w"> </span><span class="nc">Ash</span><span class="o">.</span><span class="n">run_action</span><span class="p" data-group-id="0754651866-4">(</span><span class="p" data-group-id="0754651866-4">)</span><span class="w">

</span><span class="nc">IO</span><span class="o">.</span><span class="n">puts</span><span class="p" data-group-id="0754651866-5">(</span><span class="n">greeting</span><span class="p" data-group-id="0754651866-5">)</span><span class="w">  </span><span class="c1"># Output: Hello: Alice</span></code></pre><h3 id="using-code-interface">Using Code Interface</h3><p>You can also use <a href="code-interfaces.xhtml">Code Interfaces</a> to call actions:</p><p>Given a definition like:</p><pre><code class="makeup elixir" translate="no"><span class="n">define</span><span class="w"> </span><span class="ss">:say_hello</span><span class="p">,</span><span class="w"> </span><span class="ss">args</span><span class="p">:</span><span class="w"> </span><span class="p" data-group-id="2573113306-1">[</span><span class="ss">:name</span><span class="p" data-group-id="2573113306-1">]</span></code></pre><pre><code class="makeup elixir" translate="no"><span class="p" data-group-id="7458204418-1">{</span><span class="ss">:ok</span><span class="p">,</span><span class="w"> </span><span class="n">greeting</span><span class="p" data-group-id="7458204418-1">}</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nc">Resource</span><span class="o">.</span><span class="n">say_hello</span><span class="p" data-group-id="7458204418-2">(</span><span class="s">&quot;Alice&quot;</span><span class="p" data-group-id="7458204418-2">)</span><span class="w">
</span><span class="n">greeting</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nc">Resource</span><span class="o">.</span><span class="n">say_hello!</span><span class="p" data-group-id="7458204418-3">(</span><span class="s">&quot;Alice&quot;</span><span class="p" data-group-id="7458204418-3">)</span></code></pre><h2 id="validations-and-preparations">Validations and Preparations</h2><p>Generic actions support validations and preparations, allowing you to add business logic and input validation to your actions.</p><h3 id="validations">Validations</h3><p>Validations in generic actions work similarly to those in other action types. They validate the action input before the action logic runs.</p><pre><code class="makeup elixir" translate="no"><span class="n">action</span><span class="w"> </span><span class="ss">:create_user</span><span class="p">,</span><span class="w"> </span><span class="ss">:struct</span><span class="w"> </span><span class="k" data-group-id="8572676319-1">do</span><span class="w">
  </span><span class="n">constraints</span><span class="w"> </span><span class="ss">instance_of</span><span class="p">:</span><span class="w"> </span><span class="bp">__MODULE__</span><span class="w">
  
  </span><span class="n">argument</span><span class="w"> </span><span class="ss">:name</span><span class="p">,</span><span class="w"> </span><span class="ss">:string</span><span class="p">,</span><span class="w"> </span><span class="ss">allow_nil?</span><span class="p">:</span><span class="w"> </span><span class="no">false</span><span class="w">
  </span><span class="n">argument</span><span class="w"> </span><span class="ss">:email</span><span class="p">,</span><span class="w"> </span><span class="ss">:string</span><span class="p">,</span><span class="w"> </span><span class="ss">allow_nil?</span><span class="p">:</span><span class="w"> </span><span class="no">false</span><span class="w">
  </span><span class="n">argument</span><span class="w"> </span><span class="ss">:age</span><span class="p">,</span><span class="w"> </span><span class="ss">:integer</span><span class="w">

  </span><span class="n">validate</span><span class="w"> </span><span class="n">present</span><span class="p" data-group-id="8572676319-2">(</span><span class="p" data-group-id="8572676319-3">[</span><span class="ss">:name</span><span class="p">,</span><span class="w"> </span><span class="ss">:email</span><span class="p" data-group-id="8572676319-3">]</span><span class="p" data-group-id="8572676319-2">)</span><span class="w">
  </span><span class="n">validate</span><span class="w"> </span><span class="n">match</span><span class="p" data-group-id="8572676319-4">(</span><span class="ss">:email</span><span class="p">,</span><span class="w"> </span><span class="sr">~r/@/</span><span class="p" data-group-id="8572676319-4">)</span><span class="w">
  </span><span class="n">validate</span><span class="w"> </span><span class="n">compare</span><span class="p" data-group-id="8572676319-5">(</span><span class="ss">:age</span><span class="p">,</span><span class="w"> </span><span class="ss">greater_than</span><span class="p">:</span><span class="w"> </span><span class="mi">13</span><span class="p" data-group-id="8572676319-5">)</span><span class="w"> </span><span class="k" data-group-id="8572676319-6">do</span><span class="w">
    </span><span class="n">message</span><span class="w"> </span><span class="s">&quot;Must be at least 13 years old&quot;</span><span class="w">
  </span><span class="k" data-group-id="8572676319-6">end</span><span class="w">

  </span><span class="n">run</span><span class="w"> </span><span class="k" data-group-id="8572676319-7">fn</span><span class="w"> </span><span class="n">input</span><span class="p">,</span><span class="w"> </span><span class="bp">_</span><span class="w"> </span><span class="o">-&gt;</span><span class="w">
    </span><span class="c1"># Create user logic here</span><span class="w">
    </span><span class="p" data-group-id="8572676319-8">{</span><span class="ss">:ok</span><span class="p">,</span><span class="w"> </span><span class="p">%</span><span class="bp">__MODULE__</span><span class="p" data-group-id="8572676319-9">{</span><span class="w">
      </span><span class="ss">name</span><span class="p">:</span><span class="w"> </span><span class="n">input</span><span class="o">.</span><span class="n">arguments</span><span class="o">.</span><span class="n">name</span><span class="p">,</span><span class="w">
      </span><span class="ss">email</span><span class="p">:</span><span class="w"> </span><span class="n">input</span><span class="o">.</span><span class="n">arguments</span><span class="o">.</span><span class="n">email</span><span class="p">,</span><span class="w">
      </span><span class="ss">age</span><span class="p">:</span><span class="w"> </span><span class="n">input</span><span class="o">.</span><span class="n">arguments</span><span class="o">.</span><span class="n">age</span><span class="w">
    </span><span class="p" data-group-id="8572676319-9">}</span><span class="p" data-group-id="8572676319-8">}</span><span class="w">
  </span><span class="k" data-group-id="8572676319-7">end</span><span class="w">
</span><span class="k" data-group-id="8572676319-1">end</span></code></pre><p>You can also use custom validation modules:</p><pre><code class="makeup elixir" translate="no"><span class="n">action</span><span class="w"> </span><span class="ss">:transfer_funds</span><span class="p">,</span><span class="w"> </span><span class="ss">:boolean</span><span class="w"> </span><span class="k" data-group-id="4848319505-1">do</span><span class="w">
  </span><span class="n">argument</span><span class="w"> </span><span class="ss">:from_account</span><span class="p">,</span><span class="w"> </span><span class="ss">:string</span><span class="p">,</span><span class="w"> </span><span class="ss">allow_nil?</span><span class="p">:</span><span class="w"> </span><span class="no">false</span><span class="w">
  </span><span class="n">argument</span><span class="w"> </span><span class="ss">:to_account</span><span class="p">,</span><span class="w"> </span><span class="ss">:string</span><span class="p">,</span><span class="w"> </span><span class="ss">allow_nil?</span><span class="p">:</span><span class="w"> </span><span class="no">false</span><span class="w">
  </span><span class="n">argument</span><span class="w"> </span><span class="ss">:amount</span><span class="p">,</span><span class="w"> </span><span class="ss">:decimal</span><span class="p">,</span><span class="w"> </span><span class="ss">allow_nil?</span><span class="p">:</span><span class="w"> </span><span class="no">false</span><span class="w">

  </span><span class="n">validate</span><span class="w"> </span><span class="p" data-group-id="4848319505-2">{</span><span class="nc">MyApp.Validations.SufficientFunds</span><span class="p">,</span><span class="w"> </span><span class="ss">field</span><span class="p">:</span><span class="w"> </span><span class="ss">:amount</span><span class="p" data-group-id="4848319505-2">}</span><span class="w">

  </span><span class="n">run</span><span class="w"> </span><span class="k" data-group-id="4848319505-3">fn</span><span class="w"> </span><span class="n">input</span><span class="p">,</span><span class="w"> </span><span class="bp">_</span><span class="w"> </span><span class="o">-&gt;</span><span class="w">
    </span><span class="c1"># Transfer logic here</span><span class="w">
    </span><span class="p" data-group-id="4848319505-4">{</span><span class="ss">:ok</span><span class="p">,</span><span class="w"> </span><span class="no">true</span><span class="p" data-group-id="4848319505-4">}</span><span class="w">
  </span><span class="k" data-group-id="4848319505-3">end</span><span class="w">
</span><span class="k" data-group-id="4848319505-1">end</span></code></pre><h3 id="preparations">Preparations</h3><p>Preparations allow you to modify the action input before the action runs. This is useful for setting computed values or applying business logic.</p><pre><code class="makeup elixir" translate="no"><span class="n">action</span><span class="w"> </span><span class="ss">:audit_log</span><span class="p">,</span><span class="w"> </span><span class="ss">:string</span><span class="w"> </span><span class="k" data-group-id="3555507291-1">do</span><span class="w">
  </span><span class="n">argument</span><span class="w"> </span><span class="ss">:action</span><span class="p">,</span><span class="w"> </span><span class="ss">:string</span><span class="p">,</span><span class="w"> </span><span class="ss">allow_nil?</span><span class="p">:</span><span class="w"> </span><span class="no">false</span><span class="w">
  </span><span class="n">argument</span><span class="w"> </span><span class="ss">:details</span><span class="p">,</span><span class="w"> </span><span class="ss">:map</span><span class="p">,</span><span class="w"> </span><span class="ss">default</span><span class="p">:</span><span class="w"> </span><span class="p" data-group-id="3555507291-2">%{</span><span class="p" data-group-id="3555507291-2">}</span><span class="w">

  </span><span class="n">prepare</span><span class="w"> </span><span class="k" data-group-id="3555507291-3">fn</span><span class="w"> </span><span class="n">input</span><span class="p">,</span><span class="w"> </span><span class="c">_context</span><span class="w"> </span><span class="o">-&gt;</span><span class="w">
    </span><span class="c1"># Add timestamp and actor information</span><span class="w">
    </span><span class="n">updated_details</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nc">Map</span><span class="o">.</span><span class="n">merge</span><span class="p" data-group-id="3555507291-4">(</span><span class="n">input</span><span class="o">.</span><span class="n">arguments</span><span class="o">.</span><span class="n">details</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="3555507291-5">%{</span><span class="w">
      </span><span class="ss">timestamp</span><span class="p">:</span><span class="w"> </span><span class="nc">DateTime</span><span class="o">.</span><span class="n">utc_now</span><span class="p" data-group-id="3555507291-6">(</span><span class="p" data-group-id="3555507291-6">)</span><span class="p">,</span><span class="w">
      </span><span class="ss">actor_id</span><span class="p">:</span><span class="w"> </span><span class="n">input</span><span class="o">.</span><span class="n">context</span><span class="p" data-group-id="3555507291-7">[</span><span class="ss">:actor</span><span class="p" data-group-id="3555507291-7">]</span><span class="o">&amp;</span><span class="o">.</span><span class="n">id</span><span class="w">
    </span><span class="p" data-group-id="3555507291-5">}</span><span class="p" data-group-id="3555507291-4">)</span><span class="w">
    
    </span><span class="nc">Ash.ActionInput</span><span class="o">.</span><span class="n">set_argument</span><span class="p" data-group-id="3555507291-8">(</span><span class="n">input</span><span class="p">,</span><span class="w"> </span><span class="ss">:details</span><span class="p">,</span><span class="w"> </span><span class="n">updated_details</span><span class="p" data-group-id="3555507291-8">)</span><span class="w">
  </span><span class="k" data-group-id="3555507291-3">end</span><span class="w">

  </span><span class="n">run</span><span class="w"> </span><span class="k" data-group-id="3555507291-9">fn</span><span class="w"> </span><span class="n">input</span><span class="p">,</span><span class="w"> </span><span class="bp">_</span><span class="w"> </span><span class="o">-&gt;</span><span class="w">
    </span><span class="c1"># Log the action</span><span class="w">
    </span><span class="n">log_entry</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s">&quot;</span><span class="si" data-group-id="3555507291-10">#{</span><span class="n">input</span><span class="o">.</span><span class="n">arguments</span><span class="o">.</span><span class="n">action</span><span class="si" data-group-id="3555507291-10">}</span><span class="s">: </span><span class="si" data-group-id="3555507291-11">#{</span><span class="n">inspect</span><span class="p" data-group-id="3555507291-12">(</span><span class="n">input</span><span class="o">.</span><span class="n">arguments</span><span class="o">.</span><span class="n">details</span><span class="p" data-group-id="3555507291-12">)</span><span class="si" data-group-id="3555507291-11">}</span><span class="s">&quot;</span><span class="w">
    </span><span class="p" data-group-id="3555507291-13">{</span><span class="ss">:ok</span><span class="p">,</span><span class="w"> </span><span class="n">log_entry</span><span class="p" data-group-id="3555507291-13">}</span><span class="w">
  </span><span class="k" data-group-id="3555507291-9">end</span><span class="w">
</span><span class="k" data-group-id="3555507291-1">end</span></code></pre><p>You can also use the built-in <code class="inline">build</code> preparation:</p><pre><code class="makeup elixir" translate="no"><span class="n">action</span><span class="w"> </span><span class="ss">:search_with_defaults</span><span class="w"> </span><span class="k" data-group-id="7667232023-1">do</span><span class="w">
  </span><span class="n">argument</span><span class="w"> </span><span class="ss">:query</span><span class="p">,</span><span class="w"> </span><span class="ss">:string</span><span class="w">
  </span><span class="n">argument</span><span class="w"> </span><span class="ss">:filters</span><span class="p">,</span><span class="w"> </span><span class="ss">:map</span><span class="p">,</span><span class="w"> </span><span class="ss">default</span><span class="p">:</span><span class="w"> </span><span class="p" data-group-id="7667232023-2">%{</span><span class="p" data-group-id="7667232023-2">}</span><span class="w">

  </span><span class="n">prepare</span><span class="w"> </span><span class="n">build</span><span class="p" data-group-id="7667232023-3">(</span><span class="w">
    </span><span class="ss">arguments</span><span class="p">:</span><span class="w"> </span><span class="p" data-group-id="7667232023-4">%{</span><span class="w">
      </span><span class="ss">filters</span><span class="p">:</span><span class="w"> </span><span class="n">expr</span><span class="p" data-group-id="7667232023-5">(</span><span class="nc">Map</span><span class="o">.</span><span class="n">merge</span><span class="p" data-group-id="7667232023-6">(</span><span class="o">^</span><span class="n">arg</span><span class="p" data-group-id="7667232023-7">(</span><span class="ss">:filters</span><span class="p" data-group-id="7667232023-7">)</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="7667232023-8">%{</span><span class="ss">active</span><span class="p">:</span><span class="w"> </span><span class="no">true</span><span class="p" data-group-id="7667232023-8">}</span><span class="p" data-group-id="7667232023-6">)</span><span class="p" data-group-id="7667232023-5">)</span><span class="w">
    </span><span class="p" data-group-id="7667232023-4">}</span><span class="w">
  </span><span class="p" data-group-id="7667232023-3">)</span><span class="w">

  </span><span class="n">run</span><span class="w"> </span><span class="k" data-group-id="7667232023-9">fn</span><span class="w"> </span><span class="n">input</span><span class="p">,</span><span class="w"> </span><span class="bp">_</span><span class="w"> </span><span class="o">-&gt;</span><span class="w">
    </span><span class="c1"># Search logic with default filters applied</span><span class="w">
    </span><span class="p" data-group-id="7667232023-10">{</span><span class="ss">:ok</span><span class="p">,</span><span class="w"> </span><span class="n">perform_search</span><span class="p" data-group-id="7667232023-11">(</span><span class="n">input</span><span class="o">.</span><span class="n">arguments</span><span class="o">.</span><span class="n">query</span><span class="p">,</span><span class="w"> </span><span class="n">input</span><span class="o">.</span><span class="n">arguments</span><span class="o">.</span><span class="n">filters</span><span class="p" data-group-id="7667232023-11">)</span><span class="p" data-group-id="7667232023-10">}</span><span class="w">
  </span><span class="k" data-group-id="7667232023-9">end</span><span class="w">
</span><span class="k" data-group-id="7667232023-1">end</span></code></pre><h2 id="action-hooks">Action Hooks</h2><p>Generic actions support action-level hooks that run before and after the action execution.</p><h3 id="before-action-hooks">Before Action Hooks</h3><p>Before action hooks run immediately before the action logic executes:</p><pre><code class="makeup elixir" translate="no"><span class="n">action</span><span class="w"> </span><span class="ss">:process_payment</span><span class="p">,</span><span class="w"> </span><span class="ss">:boolean</span><span class="w"> </span><span class="k" data-group-id="6955635099-1">do</span><span class="w">
  </span><span class="n">argument</span><span class="w"> </span><span class="ss">:amount</span><span class="p">,</span><span class="w"> </span><span class="ss">:decimal</span><span class="p">,</span><span class="w"> </span><span class="ss">allow_nil?</span><span class="p">:</span><span class="w"> </span><span class="no">false</span><span class="w">
  </span><span class="n">argument</span><span class="w"> </span><span class="ss">:payment_method</span><span class="p">,</span><span class="w"> </span><span class="ss">:string</span><span class="p">,</span><span class="w"> </span><span class="ss">allow_nil?</span><span class="p">:</span><span class="w"> </span><span class="no">false</span><span class="w">

  </span><span class="n">validate</span><span class="w"> </span><span class="n">present</span><span class="p" data-group-id="6955635099-2">(</span><span class="p" data-group-id="6955635099-3">[</span><span class="ss">:amount</span><span class="p">,</span><span class="w"> </span><span class="ss">:payment_method</span><span class="p" data-group-id="6955635099-3">]</span><span class="p" data-group-id="6955635099-2">)</span><span class="w">

  </span><span class="c1"># Using a function</span><span class="w">
  </span><span class="n">change</span><span class="w"> </span><span class="n">before_action</span><span class="p" data-group-id="6955635099-4">(</span><span class="k" data-group-id="6955635099-5">fn</span><span class="w"> </span><span class="n">input</span><span class="p">,</span><span class="w"> </span><span class="c">_context</span><span class="w"> </span><span class="o">-&gt;</span><span class="w">
    </span><span class="c1"># Log the payment attempt</span><span class="w">
    </span><span class="nc">Logger</span><span class="o">.</span><span class="n">info</span><span class="p" data-group-id="6955635099-6">(</span><span class="s">&quot;Processing payment of </span><span class="si" data-group-id="6955635099-7">#{</span><span class="n">input</span><span class="o">.</span><span class="n">arguments</span><span class="o">.</span><span class="n">amount</span><span class="si" data-group-id="6955635099-7">}</span><span class="s">&quot;</span><span class="p" data-group-id="6955635099-6">)</span><span class="w">
    
    </span><span class="c1"># Validate payment method</span><span class="w">
    </span><span class="k">if</span><span class="w"> </span><span class="n">input</span><span class="o">.</span><span class="n">arguments</span><span class="o">.</span><span class="n">payment_method</span><span class="w"> </span><span class="ow">not</span><span class="w"> </span><span class="ow">in</span><span class="w"> </span><span class="p" data-group-id="6955635099-8">[</span><span class="s">&quot;credit_card&quot;</span><span class="p">,</span><span class="w"> </span><span class="s">&quot;bank_transfer&quot;</span><span class="p" data-group-id="6955635099-8">]</span><span class="w"> </span><span class="k" data-group-id="6955635099-9">do</span><span class="w">
      </span><span class="nc">Ash.ActionInput</span><span class="o">.</span><span class="n">add_error</span><span class="p" data-group-id="6955635099-10">(</span><span class="n">input</span><span class="p">,</span><span class="w"> </span><span class="s">&quot;Invalid payment method&quot;</span><span class="p" data-group-id="6955635099-10">)</span><span class="w">
    </span><span class="k" data-group-id="6955635099-9">else</span><span class="w">
      </span><span class="n">input</span><span class="w">
    </span><span class="k" data-group-id="6955635099-9">end</span><span class="w">
  </span><span class="k" data-group-id="6955635099-5">end</span><span class="p" data-group-id="6955635099-4">)</span><span class="w">

  </span><span class="n">run</span><span class="w"> </span><span class="k" data-group-id="6955635099-11">fn</span><span class="w"> </span><span class="n">input</span><span class="p">,</span><span class="w"> </span><span class="bp">_</span><span class="w"> </span><span class="o">-&gt;</span><span class="w">
    </span><span class="c1"># Process payment logic</span><span class="w">
    </span><span class="p" data-group-id="6955635099-12">{</span><span class="ss">:ok</span><span class="p">,</span><span class="w"> </span><span class="no">true</span><span class="p" data-group-id="6955635099-12">}</span><span class="w">
  </span><span class="k" data-group-id="6955635099-11">end</span><span class="w">
</span><span class="k" data-group-id="6955635099-1">end</span></code></pre><h3 id="after-action-hooks">After Action Hooks</h3><p>After action hooks run after successful action execution:</p><pre><code class="makeup elixir" translate="no"><span class="n">action</span><span class="w"> </span><span class="ss">:send_notification</span><span class="p">,</span><span class="w"> </span><span class="ss">:boolean</span><span class="w"> </span><span class="k" data-group-id="9342672349-1">do</span><span class="w">
  </span><span class="n">argument</span><span class="w"> </span><span class="ss">:message</span><span class="p">,</span><span class="w"> </span><span class="ss">:string</span><span class="p">,</span><span class="w"> </span><span class="ss">allow_nil?</span><span class="p">:</span><span class="w"> </span><span class="no">false</span><span class="w">
  </span><span class="n">argument</span><span class="w"> </span><span class="ss">:recipient</span><span class="p">,</span><span class="w"> </span><span class="ss">:string</span><span class="p">,</span><span class="w"> </span><span class="ss">allow_nil?</span><span class="p">:</span><span class="w"> </span><span class="no">false</span><span class="w">

  </span><span class="n">change</span><span class="w"> </span><span class="n">after_action</span><span class="p" data-group-id="9342672349-2">(</span><span class="k" data-group-id="9342672349-3">fn</span><span class="w"> </span><span class="n">input</span><span class="p">,</span><span class="w"> </span><span class="n">result</span><span class="p">,</span><span class="w"> </span><span class="c">_context</span><span class="w"> </span><span class="o">-&gt;</span><span class="w">
    </span><span class="c1"># Log successful notification</span><span class="w">
    </span><span class="nc">Logger</span><span class="o">.</span><span class="n">info</span><span class="p" data-group-id="9342672349-4">(</span><span class="s">&quot;Notification sent to </span><span class="si" data-group-id="9342672349-5">#{</span><span class="n">input</span><span class="o">.</span><span class="n">arguments</span><span class="o">.</span><span class="n">recipient</span><span class="si" data-group-id="9342672349-5">}</span><span class="s">&quot;</span><span class="p" data-group-id="9342672349-4">)</span><span class="w">
    
    </span><span class="c1"># Could perform additional side effects here</span><span class="w">
    </span><span class="p" data-group-id="9342672349-6">{</span><span class="ss">:ok</span><span class="p">,</span><span class="w"> </span><span class="n">result</span><span class="p" data-group-id="9342672349-6">}</span><span class="w">
  </span><span class="k" data-group-id="9342672349-3">end</span><span class="p" data-group-id="9342672349-2">)</span><span class="w">

  </span><span class="n">run</span><span class="w"> </span><span class="k" data-group-id="9342672349-7">fn</span><span class="w"> </span><span class="n">input</span><span class="p">,</span><span class="w"> </span><span class="bp">_</span><span class="w"> </span><span class="o">-&gt;</span><span class="w">
    </span><span class="c1"># Send notification logic</span><span class="w">
    </span><span class="n">send_notification</span><span class="p" data-group-id="9342672349-8">(</span><span class="n">input</span><span class="o">.</span><span class="n">arguments</span><span class="o">.</span><span class="n">recipient</span><span class="p">,</span><span class="w"> </span><span class="n">input</span><span class="o">.</span><span class="n">arguments</span><span class="o">.</span><span class="n">message</span><span class="p" data-group-id="9342672349-8">)</span><span class="w">
    </span><span class="p" data-group-id="9342672349-9">{</span><span class="ss">:ok</span><span class="p">,</span><span class="w"> </span><span class="no">true</span><span class="p" data-group-id="9342672349-9">}</span><span class="w">
  </span><span class="k" data-group-id="9342672349-7">end</span><span class="w">
</span><span class="k" data-group-id="9342672349-1">end</span></code></pre><h3 id="using-custom-change-modules">Using Custom Change Modules</h3><p>You can also create reusable change modules for generic actions:</p><pre><code class="makeup elixir" translate="no"><span class="kd">defmodule</span><span class="w"> </span><span class="nc">MyApp.Changes.AuditAction</span><span class="w"> </span><span class="k" data-group-id="3136892127-1">do</span><span class="w">
  </span><span class="kn">use</span><span class="w"> </span><span class="nc">Ash.Resource.Change</span><span class="w">

  </span><span class="kd">def</span><span class="w"> </span><span class="nf">change</span><span class="p" data-group-id="3136892127-2">(</span><span class="n">input</span><span class="p">,</span><span class="w"> </span><span class="c">_opts</span><span class="p">,</span><span class="w"> </span><span class="n">context</span><span class="p" data-group-id="3136892127-2">)</span><span class="w"> </span><span class="k" data-group-id="3136892127-3">do</span><span class="w">
    </span><span class="nc">Ash.ActionInput</span><span class="o">.</span><span class="n">before_action</span><span class="p" data-group-id="3136892127-4">(</span><span class="n">input</span><span class="p">,</span><span class="w"> </span><span class="k" data-group-id="3136892127-5">fn</span><span class="w"> </span><span class="n">input</span><span class="w"> </span><span class="o">-&gt;</span><span class="w">
      </span><span class="c1"># Log the action attempt</span><span class="w">
      </span><span class="nc">MyApp.AuditLog</span><span class="o">.</span><span class="n">log_action</span><span class="p" data-group-id="3136892127-6">(</span><span class="n">input</span><span class="o">.</span><span class="n">action</span><span class="o">.</span><span class="n">name</span><span class="p">,</span><span class="w"> </span><span class="n">input</span><span class="o">.</span><span class="n">arguments</span><span class="p">,</span><span class="w"> </span><span class="n">context</span><span class="o">.</span><span class="n">actor</span><span class="p" data-group-id="3136892127-6">)</span><span class="w">
      </span><span class="n">input</span><span class="w">
    </span><span class="k" data-group-id="3136892127-5">end</span><span class="p" data-group-id="3136892127-4">)</span><span class="w">
    </span><span class="o">|&gt;</span><span class="w"> </span><span class="nc">Ash.ActionInput</span><span class="o">.</span><span class="n">after_action</span><span class="p" data-group-id="3136892127-7">(</span><span class="k" data-group-id="3136892127-8">fn</span><span class="w"> </span><span class="n">input</span><span class="p">,</span><span class="w"> </span><span class="n">result</span><span class="w"> </span><span class="o">-&gt;</span><span class="w">
      </span><span class="c1"># Log successful completion</span><span class="w">
      </span><span class="nc">MyApp.AuditLog</span><span class="o">.</span><span class="n">log_success</span><span class="p" data-group-id="3136892127-9">(</span><span class="n">input</span><span class="o">.</span><span class="n">action</span><span class="o">.</span><span class="n">name</span><span class="p">,</span><span class="w"> </span><span class="n">result</span><span class="p">,</span><span class="w"> </span><span class="n">context</span><span class="o">.</span><span class="n">actor</span><span class="p" data-group-id="3136892127-9">)</span><span class="w">
      </span><span class="p" data-group-id="3136892127-10">{</span><span class="ss">:ok</span><span class="p">,</span><span class="w"> </span><span class="n">result</span><span class="p" data-group-id="3136892127-10">}</span><span class="w">
    </span><span class="k" data-group-id="3136892127-8">end</span><span class="p" data-group-id="3136892127-7">)</span><span class="w">
  </span><span class="k" data-group-id="3136892127-3">end</span><span class="w">
</span><span class="k" data-group-id="3136892127-1">end</span></code></pre><p>Then use it in your action:</p><pre><code class="makeup elixir" translate="no"><span class="n">action</span><span class="w"> </span><span class="ss">:sensitive_operation</span><span class="p">,</span><span class="w"> </span><span class="ss">:boolean</span><span class="w"> </span><span class="k" data-group-id="9040556696-1">do</span><span class="w">
  </span><span class="n">argument</span><span class="w"> </span><span class="ss">:data</span><span class="p">,</span><span class="w"> </span><span class="ss">:map</span><span class="p">,</span><span class="w"> </span><span class="ss">allow_nil?</span><span class="p">:</span><span class="w"> </span><span class="no">false</span><span class="w">

  </span><span class="n">change</span><span class="w"> </span><span class="nc">MyApp.Changes.AuditAction</span><span class="w">

  </span><span class="n">run</span><span class="w"> </span><span class="k" data-group-id="9040556696-2">fn</span><span class="w"> </span><span class="n">input</span><span class="p">,</span><span class="w"> </span><span class="bp">_</span><span class="w"> </span><span class="o">-&gt;</span><span class="w">
    </span><span class="c1"># Sensitive operation logic</span><span class="w">
    </span><span class="p" data-group-id="9040556696-3">{</span><span class="ss">:ok</span><span class="p">,</span><span class="w"> </span><span class="no">true</span><span class="p" data-group-id="9040556696-3">}</span><span class="w">
  </span><span class="k" data-group-id="9040556696-2">end</span><span class="w">
</span><span class="k" data-group-id="9040556696-1">end</span></code></pre><h2 id="global-validations-and-preparations">Global Validations and Preparations</h2><p>Generic actions also support global validations and preparations defined at the resource level:</p><pre><code class="makeup elixir" translate="no"><span class="kd">defmodule</span><span class="w"> </span><span class="nc">MyApp.MyResource</span><span class="w"> </span><span class="k" data-group-id="5351731877-1">do</span><span class="w">
  </span><span class="kn">use</span><span class="w"> </span><span class="nc">Ash.Resource</span><span class="w">

  </span><span class="c1"># Global preparations that apply to all actions</span><span class="w">
  </span><span class="n">preparations</span><span class="w"> </span><span class="k" data-group-id="5351731877-2">do</span><span class="w">
    </span><span class="n">prepare</span><span class="w"> </span><span class="k" data-group-id="5351731877-3">fn</span><span class="w"> </span><span class="n">input</span><span class="p">,</span><span class="w"> </span><span class="c">_context</span><span class="w"> </span><span class="o">-&gt;</span><span class="w">
      </span><span class="c1"># Add tenant information to all actions</span><span class="w">
      </span><span class="nc">Ash.ActionInput</span><span class="o">.</span><span class="n">set_context</span><span class="p" data-group-id="5351731877-4">(</span><span class="n">input</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="5351731877-5">%{</span><span class="ss">tenant</span><span class="p">:</span><span class="w"> </span><span class="s">&quot;default&quot;</span><span class="p" data-group-id="5351731877-5">}</span><span class="p" data-group-id="5351731877-4">)</span><span class="w">
    </span><span class="k" data-group-id="5351731877-3">end</span><span class="w"> </span><span class="k" data-group-id="5351731877-6">do</span><span class="w">
      </span><span class="c1"># Only apply to generic actions</span><span class="w">
      </span><span class="ss">on</span><span class="p">:</span><span class="w"> </span><span class="p" data-group-id="5351731877-7">[</span><span class="ss">:action</span><span class="p" data-group-id="5351731877-7">]</span><span class="w">
    </span><span class="k" data-group-id="5351731877-6">end</span><span class="w">
  </span><span class="k" data-group-id="5351731877-2">end</span><span class="w">

  </span><span class="c1"># Global validations that apply to all actions</span><span class="w">
  </span><span class="n">validations</span><span class="w"> </span><span class="k" data-group-id="5351731877-8">do</span><span class="w">
    </span><span class="n">validate</span><span class="w"> </span><span class="n">present</span><span class="p" data-group-id="5351731877-9">(</span><span class="ss">:actor</span><span class="p" data-group-id="5351731877-9">)</span><span class="w"> </span><span class="k" data-group-id="5351731877-10">do</span><span class="w">
      </span><span class="n">message</span><span class="w"> </span><span class="s">&quot;Authentication required&quot;</span><span class="w">
      </span><span class="ss">on</span><span class="p">:</span><span class="w"> </span><span class="p" data-group-id="5351731877-11">[</span><span class="ss">:action</span><span class="p" data-group-id="5351731877-11">]</span><span class="w">  </span><span class="c1"># Only apply to generic actions</span><span class="w">
    </span><span class="k" data-group-id="5351731877-10">end</span><span class="w">
  </span><span class="k" data-group-id="5351731877-8">end</span><span class="w">

  </span><span class="n">actions</span><span class="w"> </span><span class="k" data-group-id="5351731877-12">do</span><span class="w">
    </span><span class="n">action</span><span class="w"> </span><span class="ss">:my_action</span><span class="w"> </span><span class="k" data-group-id="5351731877-13">do</span><span class="w">
      </span><span class="c1"># Action-specific logic</span><span class="w">
    </span><span class="k" data-group-id="5351731877-13">end</span><span class="w">
  </span><span class="k" data-group-id="5351731877-12">end</span><span class="w">
</span><span class="k" data-group-id="5351731877-1">end</span></code></pre><h2 id="execution-order">Execution Order</h2><p>For generic actions, the execution order is:</p><ol><li>Global preparations/validations (in order of definition)</li><li>Action preparations/validations (in order of definition)</li><li><code class="inline">before_action</code> hooks</li><li>Action logic execution</li><li><code class="inline">after_action</code> hooks (success only)</li></ol><p>This order ensures that global business logic runs first, followed by action-specific logic, and finally the action hooks.</p>

  </body>
</html>
