<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"
      xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>Ash.Query - ash v3.5.33</title>
    <meta name="generator" content="ExDoc v0.38.2" />
    <link type="text/css" rel="stylesheet" href="dist/epub-elixir-FNUUKFP7.css" />
    <script src="dist/epub-4WIP524F.js"></script>

  </head>
  <body class="content-inner">

    <h1 id="content">
Ash.Query 
    </h1>


      <section id="moduledoc" class="docstring">
<p>A data structure for reading data from a resource.</p><p>Queries are run by calling <a href="Ash.xhtml#read/2"><code class="inline">Ash.read/2</code></a>.</p><p>Examples:</p><pre><code class="makeup elixir" translate="no"><samp class="kn">require</samp><samp class="w"> </samp><samp class="nc">Ash.Query</samp><samp class="w">

</samp><samp class="nc">MyApp.Post</samp><samp class="w">
</samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">filter</samp><samp class="p" data-group-id="1476918524-1">(</samp><samp class="n">likes</samp><samp class="w"> </samp><samp class="o">&gt;</samp><samp class="w"> </samp><samp class="mi">10</samp><samp class="p" data-group-id="1476918524-1">)</samp><samp class="w">
</samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">sort</samp><samp class="p" data-group-id="1476918524-2">(</samp><samp class="p" data-group-id="1476918524-3">[</samp><samp class="ss">:title</samp><samp class="p" data-group-id="1476918524-3">]</samp><samp class="p" data-group-id="1476918524-2">)</samp><samp class="w">
</samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Ash</samp><samp class="o">.</samp><samp class="n">read!</samp><samp class="p" data-group-id="1476918524-4">(</samp><samp class="p" data-group-id="1476918524-4">)</samp><samp class="w">

</samp><samp class="nc">MyApp.Author</samp><samp class="w">
</samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">aggregate</samp><samp class="p" data-group-id="1476918524-5">(</samp><samp class="ss">:published_post_count</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:posts</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">query</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="1476918524-6">[</samp><samp class="ss">filter</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="1476918524-7">[</samp><samp class="ss">published</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">true</samp><samp class="p" data-group-id="1476918524-7">]</samp><samp class="p" data-group-id="1476918524-6">]</samp><samp class="p" data-group-id="1476918524-5">)</samp><samp class="w">
</samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">sort</samp><samp class="p" data-group-id="1476918524-8">(</samp><samp class="ss">published_post_count</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="ss">:desc</samp><samp class="p" data-group-id="1476918524-8">)</samp><samp class="w">
</samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">limit</samp><samp class="p" data-group-id="1476918524-9">(</samp><samp class="mi">10</samp><samp class="p" data-group-id="1476918524-9">)</samp><samp class="w">
</samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Ash</samp><samp class="o">.</samp><samp class="n">read!</samp><samp class="p" data-group-id="1476918524-10">(</samp><samp class="p" data-group-id="1476918524-10">)</samp><samp class="w">

</samp><samp class="nc">MyApp.Author</samp><samp class="w">
</samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">load</samp><samp class="p" data-group-id="1476918524-11">(</samp><samp class="p" data-group-id="1476918524-12">[</samp><samp class="ss">:post_count</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:comment_count</samp><samp class="p" data-group-id="1476918524-12">]</samp><samp class="p" data-group-id="1476918524-11">)</samp><samp class="w">
</samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">load</samp><samp class="p" data-group-id="1476918524-13">(</samp><samp class="ss">posts</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="1476918524-14">[</samp><samp class="ss">:comments</samp><samp class="p" data-group-id="1476918524-14">]</samp><samp class="p" data-group-id="1476918524-13">)</samp><samp class="w">
</samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Ash</samp><samp class="o">.</samp><samp class="n">read!</samp><samp class="p" data-group-id="1476918524-15">(</samp><samp class="p" data-group-id="1476918524-15">)</samp></code></pre><p>To see more examples of what you can do with <a href="Ash.Query.xhtml"><code class="inline">Ash.Query</code></a> and read actions in general,
see the <a href="write-queries.xhtml">writing queries how-to guide</a>.</p><h2 id="module-capabilities-limitations">Capabilities &amp; Limitations</h2><p>Ash Framework provides a comprehensive suite of querying tools designed to address common application development needs. While powerful and flexible, these tools are focused on domain-driven design rather than serving as a general-purpose ORM.</p><p>Ash's query tools support:</p><ul><li>Filtering records based on complex conditions</li><li>Sorting results using single or multiple criteria</li><li>Setting result limits and offsets</li><li>Pagination, with offset/limit and keysets</li><li>Selecting distinct records to eliminate duplicates</li><li>Computing dynamic properties at query time</li><li>Aggregating data from related resources</li></ul><p>While Ash's query tools often eliminate the need for direct database queries, Ash is not itself designed to be a comprehensive ORM or database query builder.</p><p>For specialized querying needs that fall outside Ash's standard capabilities, the framework provides escape hatches. These mechanisms allow developers to implement custom query logic when necessary.</p><h3 id="module-important-considerations">Important Considerations</h3><ol><li>Ash is primarily a domain modeling framework, not a database abstraction layer</li><li>While comprehensive, the tooling is intentionally constrained to resource-oriented access</li><li>Escape hatches exist for cases that require custom query logic</li></ol><p>For complex queries that fall outside these tools, consider whether they represent domain concepts that could be modeled differently, or if they truly require custom implementation through escape hatches.</p><h2 id="module-escape-hatches">Escape Hatches</h2><p>Many of the tools in <a href="Ash.Query.xhtml"><code class="inline">Ash.Query</code></a> are surprisingly deep and capable, covering everything you
need to build your domain logic. With that said, these tools are <em>not</em>
designed to encompass <em>every kind of query</em> that you could possibly want to
write over your data. <a href="Ash.xhtml"><code class="inline">Ash</code></a> is <em>not</em> an ORM or a database query tool, despite
the fact that its query building tools often make those kinds of tools
unnecessary in all but the rarest of cases. Not every kind of query that you
could ever wish to write can be expressed with Ash.Query. Elixir has a
best-in-class library for working directly with databases, called
<a href="https://hexdocs.pm/ecto/Ecto.html">Ecto</a>, and if you end up building a
certain type of feature like analytics or reporting dashboards, you may find
yourself working directly with Ecto. Data layers like AshPostgres are built
on top of Ecto. In fact, every <a href="Ash.Resource.xhtml"><code class="inline">Ash.Resource</code></a> is an <a href="https://hexdocs.pm/ecto/3.13.2/Ecto.Schema.html"><code class="inline">Ecto.Schema</code></a>!</p><section role="note" class="admonition warning"><h3 id="module-choose-escape-hatches-wisely" class="admonition-title warning">Choose escape hatches wisely</h3><p>You should choose to use Ash builtin functionality wherever possible.
Barring that, you should choose the <em>least powerful</em> escape hatch that
can solve your problem. The options below are presented in the order
that you should prefer them, but you should only use <em>any of them</em>
if no builtin tooling will suffice.</p></section><h3 id="module-fragments">Fragments</h3><p>Fragments only barely count as an escape hatch. You will often find yourself
wanting to use a function or operator specific to your data layer, and fragments
are purpose built to this end. You can use data-layer-specific expressions in your
expressions for filters, calculations, etc. For example:</p><pre><code class="makeup elixir" translate="no"><samp class="nc">Resource</samp><samp class="w">
</samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">filter</samp><samp class="p" data-group-id="8668880443-1">(</samp><samp class="n">expr</samp><samp class="p" data-group-id="8668880443-2">(</samp><samp class="n">fragment</samp><samp class="p" data-group-id="8668880443-3">(</samp><samp class="s">&quot;lower(?)&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">name</samp><samp class="p" data-group-id="8668880443-3">)</samp><samp class="w"> </samp><samp class="o">==</samp><samp class="w"> </samp><samp class="s">&quot;fred&quot;</samp><samp class="p" data-group-id="8668880443-2">)</samp><samp class="p" data-group-id="8668880443-1">)</samp><samp class="w">
</samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">filter</samp><samp class="p" data-group-id="8668880443-4">(</samp><samp class="n">expr</samp><samp class="p" data-group-id="8668880443-5">(</samp><samp class="n">fragment</samp><samp class="p" data-group-id="8668880443-6">(</samp><samp class="s">&quot;? @&gt; ?&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">tags</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="8668880443-7">[</samp><samp class="s">&quot;important&quot;</samp><samp class="p" data-group-id="8668880443-7">]</samp><samp class="p" data-group-id="8668880443-6">)</samp><samp class="p" data-group-id="8668880443-5">)</samp><samp class="p" data-group-id="8668880443-4">)</samp></code></pre><h3 id="module-manual-read-actions">Manual Read Actions</h3><p>See <a href="manual-actions.xhtml">the manual read actions guide</a>.</p><h3 id="module-d-ash-resource-dsl-actions-read-modify_query"><code class="inline">d:Ash.Resource.Dsl|actions.read.modify_query</code></h3><p>When running read actions, you can modify the underlying data layer query directly,
which can solve for cases when you cannot express your query using the standard Ash query interface.</p><pre><code class="makeup elixir" translate="no"><samp class="n">actions</samp><samp class="w"> </samp><samp class="k" data-group-id="3580976393-1">do</samp><samp class="w">
  </samp><samp class="n">read</samp><samp class="w"> </samp><samp class="ss">:complex_search</samp><samp class="w"> </samp><samp class="k" data-group-id="3580976393-2">do</samp><samp class="w">
    </samp><samp class="n">argument</samp><samp class="w">
    </samp><samp class="n">modify_query</samp><samp class="w"> </samp><samp class="p" data-group-id="3580976393-3">{</samp><samp class="nc">SearchMod</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:modify</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="3580976393-4">[</samp><samp class="p" data-group-id="3580976393-4">]</samp><samp class="p" data-group-id="3580976393-3">}</samp><samp class="w">
  </samp><samp class="k" data-group-id="3580976393-2">end</samp><samp class="w">
</samp><samp class="k" data-group-id="3580976393-1">end</samp></code></pre><pre><code class="makeup elixir" translate="no"><samp class="kd">defmodule</samp><samp class="w"> </samp><samp class="nc">SearchMod</samp><samp class="w"> </samp><samp class="k" data-group-id="3277235107-1">do</samp><samp class="w">
  </samp><samp class="kd">def</samp><samp class="w"> </samp><samp class="nf">modify</samp><samp class="p" data-group-id="3277235107-2">(</samp><samp class="n">ash_query</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">data_layer_query</samp><samp class="p" data-group-id="3277235107-2">)</samp><samp class="w"> </samp><samp class="k" data-group-id="3277235107-3">do</samp><samp class="w">
    </samp><samp class="c1"># Here you can modify the underlying data layer query directly</samp><samp class="w">
    </samp><samp class="c1"># For example, with AshPostgres you get access to the Ecto query</samp><samp class="w">
    </samp><samp class="p" data-group-id="3277235107-4">{</samp><samp class="ss">:ok</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="nc">Ecto.Query</samp><samp class="o">.</samp><samp class="n">where</samp><samp class="p" data-group-id="3277235107-5">(</samp><samp class="n">data_layer_query</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="3277235107-6">[</samp><samp class="n">p</samp><samp class="p" data-group-id="3277235107-6">]</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">fragment</samp><samp class="p" data-group-id="3277235107-7">(</samp><samp class="s">&quot;? @@ plainto_tsquery(?)&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">p</samp><samp class="o">.</samp><samp class="n">search_vector</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="o">^</samp><samp class="n">ash_query</samp><samp class="o">.</samp><samp class="n">arguments</samp><samp class="o">.</samp><samp class="n">search_text</samp><samp class="p" data-group-id="3277235107-7">)</samp><samp class="p" data-group-id="3277235107-5">)</samp><samp class="p" data-group-id="3277235107-4">}</samp><samp class="w">
  </samp><samp class="k" data-group-id="3277235107-3">end</samp><samp class="w">
</samp><samp class="k" data-group-id="3277235107-1">end</samp></code></pre><h3 id="module-using-ecto-directly">Using Ecto directly</h3><p>For data layers like <code class="inline">AshPostgres</code>, you can interact directly with <a href="https://hexdocs.pm/ecto/3.13.2/Ecto.html"><code class="inline">Ecto</code></a>. You can do this
by using the <a href="Ash.Resource.xhtml"><code class="inline">Ash.Resource</code></a> as its corresponding <a href="https://hexdocs.pm/ecto/3.13.2/Ecto.Schema.html"><code class="inline">Ecto.Schema</code></a>, like so:</p><pre><code class="makeup elixir" translate="no"><samp class="kn">import</samp><samp class="w"> </samp><samp class="nc">Ecto.Query</samp><samp class="w">

</samp><samp class="n">query</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w">
  </samp><samp class="n">from</samp><samp class="w"> </samp><samp class="n">p</samp><samp class="w"> </samp><samp class="ow">in</samp><samp class="w"> </samp><samp class="nc">MyApp.Post</samp><samp class="p">,</samp><samp class="w">
    </samp><samp class="ss">where</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="n">p</samp><samp class="o">.</samp><samp class="n">likes</samp><samp class="w"> </samp><samp class="o">&gt;</samp><samp class="w"> </samp><samp class="mi">100</samp><samp class="p">,</samp><samp class="w">
    </samp><samp class="ss">select</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="n">p</samp><samp class="w">

 </samp><samp class="nc">MyApp.Repo</samp><samp class="o">.</samp><samp class="n">all</samp><samp class="p" data-group-id="5348514476-1">(</samp><samp class="n">query</samp><samp class="p" data-group-id="5348514476-1">)</samp></code></pre><p>Or you can build an <a href="Ash.Query.xhtml"><code class="inline">Ash.Query</code></a>, and get the corresponding ecto query:</p><pre><code class="makeup elixir" translate="no"><samp class="nc">MyApp.Post</samp><samp class="w">
</samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">for_read</samp><samp class="p" data-group-id="7254854384-1">(</samp><samp class="ss">:read</samp><samp class="p" data-group-id="7254854384-1">)</samp><samp class="w">
</samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Ash</samp><samp class="o">.</samp><samp class="n">data_layer_query</samp><samp class="p" data-group-id="7254854384-2">(</samp><samp class="p" data-group-id="7254854384-2">)</samp><samp class="w">
</samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="k">case</samp><samp class="w"> </samp><samp class="k" data-group-id="7254854384-3">do</samp><samp class="w">
  </samp><samp class="p" data-group-id="7254854384-4">{</samp><samp class="ss">:ok</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="7254854384-5">%{</samp><samp class="ss">query</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="n">ecto_query</samp><samp class="p" data-group-id="7254854384-5">}</samp><samp class="p" data-group-id="7254854384-4">}</samp><samp class="w"> </samp><samp class="o">-&gt;</samp><samp class="w">
    </samp><samp class="n">ecto_query</samp><samp class="w">
    </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Ecto.Query</samp><samp class="o">.</samp><samp class="n">where</samp><samp class="p" data-group-id="7254854384-6">(</samp><samp class="p" data-group-id="7254854384-7">[</samp><samp class="n">p</samp><samp class="p" data-group-id="7254854384-7">]</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">p</samp><samp class="o">.</samp><samp class="n">likes</samp><samp class="w"> </samp><samp class="o">&gt;</samp><samp class="w"> </samp><samp class="mi">100</samp><samp class="p" data-group-id="7254854384-6">)</samp><samp class="w">
    </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">MyApp.Repo</samp><samp class="o">.</samp><samp class="n">all</samp><samp class="p" data-group-id="7254854384-8">(</samp><samp class="p" data-group-id="7254854384-8">)</samp><samp class="w">

  </samp><samp class="p" data-group-id="7254854384-9">{</samp><samp class="ss">:error</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">error</samp><samp class="p" data-group-id="7254854384-9">}</samp><samp class="w"> </samp><samp class="o">-&gt;</samp><samp class="w">
    </samp><samp class="p" data-group-id="7254854384-10">{</samp><samp class="ss">:error</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">error</samp><samp class="p" data-group-id="7254854384-10">}</samp><samp class="w">
</samp><samp class="k" data-group-id="7254854384-3">end</samp></code></pre>
      </section>


      <section id="summary" class="details-list">
        <h1 class="section-heading">Summary</h1>
<div class="summary-types summary">
  <h2>
    <a href="#types">Types</a>
  </h2>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#t:after_transaction_fun/0" data-no-tooltip="" translate="no">after_transaction_fun()</a>

      </div>

        <div class="summary-synopsis"><p>Function type for after_transaction hooks that run after query execution.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#t:around_result/0" data-no-tooltip="" translate="no">around_result()</a>

      </div>

        <div class="summary-synopsis"><p>Result type for around_transaction hooks, containing either successful records or an error.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#t:around_transaction_fun/0" data-no-tooltip="" translate="no">around_transaction_fun()</a>

      </div>

        <div class="summary-synopsis"><p>Function type for around_transaction hooks that wrap query execution in a transaction.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#t:before_transaction_fun/0" data-no-tooltip="" translate="no">before_transaction_fun()</a>

      </div>

        <div class="summary-synopsis"><p>Function type for before_transaction hooks that run before query execution.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#t:t/0" data-no-tooltip="" translate="no">t()</a>

      </div>

        <div class="summary-synopsis"><p>A query struct for reading data from a resource.</p></div>

    </div>

</div>
<div class="summary-functions summary">
  <h2>
    <a href="#functions">Functions</a>
  </h2>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#accessing/3" data-no-tooltip="" translate="no">accessing(query, types \\ [:attributes, :relationships, :calculations, :aggregates], only_public? \\ true)</a>

      </div>

        <div class="summary-synopsis"><p>Returns a list of attributes, aggregates, relationships, and calculations that are being loaded</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#add_error/3" data-no-tooltip="" translate="no">add_error(query, path \\ [], error)</a>

      </div>

        <div class="summary-synopsis"><p>Add an error to the errors list and mark the query as invalid.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#after_action/2" data-no-tooltip="" translate="no">after_action(query, func)</a>

      </div>

        <div class="summary-synopsis"><p>Adds an after_action hook to the query.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#after_transaction/3" data-no-tooltip="" translate="no">after_transaction(query, func, opts \\ [])</a>

      </div>

        <div class="summary-synopsis"><p>Adds an after_transaction hook to the query.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#aggregate/4" data-no-tooltip="" translate="no">aggregate(query, name, kind, relationship)</a>

      </div>

        <div class="summary-synopsis"><p>Adds an aggregation to the query.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#aggregate/5" data-no-tooltip="" translate="no">aggregate(query, name, kind, relationship, opts)</a>

      </div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#apply_to/3" data-no-tooltip="" translate="no">apply_to(query, records, opts \\ [])</a>

      </div>

        <div class="summary-synopsis"><p>Applies a query to a list of records in memory.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#around_transaction/3" data-no-tooltip="" translate="no">around_transaction(query, func, opts \\ [])</a>

      </div>

        <div class="summary-synopsis"><p>Adds an around_transaction hook to the query.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#before_action/3" data-no-tooltip="" translate="no">before_action(query, func, opts \\ [])</a>

      </div>

        <div class="summary-synopsis"><p>Adds a before_action hook to the query.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#before_transaction/3" data-no-tooltip="" translate="no">before_transaction(query, func, opts \\ [])</a>

      </div>

        <div class="summary-synopsis"><p>Adds a before_transaction hook to the query.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#build/3" data-no-tooltip="" translate="no">build(resource, domain \\ nil, keyword)</a>

      </div>

        <div class="summary-synopsis"><p>Builds a query from a keyword list.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#calculate/8" data-no-tooltip="" translate="no">calculate(query, name, type, module_and_opts, arguments \\ %{}, constraints \\ [], extra_context \\ %{}, new_calculation_opts \\ [])</a>

      </div>

        <div class="summary-synopsis"><p>Adds a calculation to the query.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#clear_result/1" data-no-tooltip="" translate="no">clear_result(query)</a>

      </div>

        <div class="summary-synopsis"><p>Removes a result set previously with <a><code class="inline">set_result/2</code></a></p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#combination_of/2" data-no-tooltip="" translate="no">combination_of(query, combinations)</a>

      </div>

        <div class="summary-synopsis"><p>Produces a query that is the combination of multiple queries.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#data_layer_query/2" data-no-tooltip="" translate="no">data_layer_query(ash_query, opts \\ [])</a>

      </div>

        <div class="summary-synopsis"><p>Return the underlying data layer query for an ash query</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#default_sort/3" data-no-tooltip="" translate="no">default_sort(query, sorts, opts \\ [])</a>

      </div>

        <div class="summary-synopsis"><p>Apply a sort only if no sort has been specified yet.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#delete_argument/2" data-no-tooltip="" translate="no">delete_argument(query, argument_or_arguments)</a>

      </div>

        <div class="summary-synopsis"><p>Remove an argument from the query</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#deselect/2" data-no-tooltip="" translate="no">deselect(query, fields)</a>

      </div>

        <div class="summary-synopsis"><p>Ensures that the specified attributes are <code class="inline">nil</code> in the query results.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#distinct/2" data-no-tooltip="" translate="no">distinct(query, distincts)</a>

      </div>

        <div class="summary-synopsis"><p>Get results distinct on the provided fields.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#distinct_sort/3" data-no-tooltip="" translate="no">distinct_sort(query, sorts, opts \\ [])</a>

      </div>

        <div class="summary-synopsis"><p>Set a sort to determine how distinct records are selected.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#ensure_selected/2" data-no-tooltip="" translate="no">ensure_selected(query, fields)</a>

      </div>

        <div class="summary-synopsis"><p>Ensures that the given attributes are selected.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#equivalent_to/2" data-no-tooltip="" translate="no">equivalent_to(query, expr)</a>

      </div>

        <div class="summary-synopsis"><p>Determines if the filter statement of a query is equivalent to the provided expression.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#equivalent_to?/2" data-no-tooltip="" translate="no">equivalent_to?(query, expr)</a>

      </div>

        <div class="summary-synopsis"><p>Same as <a><code class="inline">equivalent_to/2</code></a> but always returns a boolean. <code class="inline">:maybe</code> returns <code class="inline">false</code>.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#fetch_argument/2" data-no-tooltip="" translate="no">fetch_argument(query, argument)</a>

      </div>

        <div class="summary-synopsis"><p>Fetches the value of an argument provided to the query.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#filter/2" data-no-tooltip="" translate="no">filter(query, filter)</a>

      </div>

        <div class="summary-synopsis"><p>Attach a filter statement to the query.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#filter_input/2" data-no-tooltip="" translate="no">filter_input(query, filter)</a>

      </div>

        <div class="summary-synopsis"><p>Attach a filter statement to the query labelled as user input.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#for_read/4" data-no-tooltip="" translate="no">for_read(query, action_name, args \\ %{}, opts \\ [])</a>

      </div>

        <div class="summary-synopsis"><p>Creates a query for a given read action and prepares it.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#get_argument/2" data-no-tooltip="" translate="no">get_argument(query, argument)</a>

      </div>

        <div class="summary-synopsis"><p>Gets the value of an argument provided to the query.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#limit/2" data-no-tooltip="" translate="no">limit(query, limit)</a>

      </div>

        <div class="summary-synopsis"><p>Limits the number of results returned from the query.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#load/3" data-no-tooltip="" translate="no">load(query, load_statement, opts \\ [])</a>

      </div>

        <div class="summary-synopsis"><p>Loads relationships, calculations, or aggregates on the resource.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#load_calculation_as/5" data-no-tooltip="" translate="no">load_calculation_as(query, calc_name, as_name, opts_or_args \\ %{}, opts \\ [])</a>

      </div>

        <div class="summary-synopsis"><p>Adds a resource calculation to the query as a custom calculation with the provided name.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#load_through/4" data-no-tooltip="" translate="no">load_through(query, type, name, load)</a>

      </div>

        <div class="summary-synopsis"><p>Adds a load statement to the result of an attribute or calculation.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#loading?/2" data-no-tooltip="" translate="no">loading?(query, item)</a>

      </div>

        <div class="summary-synopsis"><p>Returns true if the field/relationship or path to field/relationship is being loaded.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#lock/2" data-no-tooltip="" translate="no">lock(query, lock_type)</a>

      </div>

        <div class="summary-synopsis"><p>Lock the query results.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#merge_query_load/3" data-no-tooltip="" translate="no">merge_query_load(left, right, context)</a>

      </div>

        <div class="summary-synopsis"><p>Merges two query's load statements, for the purpose of handling calculation requirements.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#new/2" data-no-tooltip="" translate="no">new(resource, opts \\ [])</a>

      </div>

        <div class="summary-synopsis"><p>Creates a new query for the given resource.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#offset/2" data-no-tooltip="" translate="no">offset(query, offset)</a>

      </div>

        <div class="summary-synopsis"><p>Skips the first n records in the query results.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#page/2" data-no-tooltip="" translate="no">page(query, page_opts)</a>

      </div>

        <div class="summary-synopsis"><p>Sets the pagination options of the query.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#put_context/3" data-no-tooltip="" translate="no">put_context(query, key, value)</a>

      </div>

        <div class="summary-synopsis"><p>Sets a specific context key to a specific value.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#select/3" data-no-tooltip="" translate="no">select(query, fields, opts \\ [])</a>

      </div>

        <div class="summary-synopsis"><p>Ensure that only the specified <em>attributes</em> are present in the results.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#selecting?/2" data-no-tooltip="" translate="no">selecting?(query, field)</a>

      </div>

        <div class="summary-synopsis"><p>Checks if a specific field is currently selected in the query.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#set_argument/3" data-no-tooltip="" translate="no">set_argument(query, argument, value)</a>

      </div>

        <div class="summary-synopsis"><p>Adds an argument to the query.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#set_arguments/2" data-no-tooltip="" translate="no">set_arguments(query, map)</a>

      </div>

        <div class="summary-synopsis"><p>Merge a map of arguments to the arguments list</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#set_context/2" data-no-tooltip="" translate="no">set_context(query, map)</a>

      </div>

        <div class="summary-synopsis"><p>Merge a map of values into the query context</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#set_domain/2" data-no-tooltip="" translate="no">set_domain(query, domain)</a>

      </div>

        <div class="summary-synopsis"><p>Set the query's domain, and any loaded query's domain</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#set_result/2" data-no-tooltip="" translate="no">set_result(query, result)</a>

      </div>

        <div class="summary-synopsis"><p>Set the result of the action. This will prevent running the underlying datalayer behavior</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#set_tenant/2" data-no-tooltip="" translate="no">set_tenant(query, tenant)</a>

      </div>

        <div class="summary-synopsis"><p>Sets the tenant for the query.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#sort/3" data-no-tooltip="" translate="no">sort(query, sorts, opts \\ [])</a>

      </div>

        <div class="summary-synopsis"><p>Sort the results based on attributes, aggregates or calculations.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#sort_input/3" data-no-tooltip="" translate="no">sort_input(query, sorts, opts \\ [])</a>

      </div>

        <div class="summary-synopsis"><p>Attach a sort statement to the query labelled as user input.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#subset_of/2" data-no-tooltip="" translate="no">subset_of(query, expr)</a>

      </div>

        <div class="summary-synopsis"><p>Determines if the provided expression would return data that is a subset of the data returned by the filter on the query.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#subset_of?/2" data-no-tooltip="" translate="no">subset_of?(query, expr)</a>

      </div>

        <div class="summary-synopsis"><p>Same as <a><code class="inline">subset_of/2</code></a> but always returns a boolean. <code class="inline">:maybe</code> returns <code class="inline">false</code>.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#superset_of/2" data-no-tooltip="" translate="no">superset_of(query, expr)</a>

      </div>

        <div class="summary-synopsis"><p>Determines if the provided expression would return data that is a subset of the data returned by the filter on the query.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#superset_of?/2" data-no-tooltip="" translate="no">superset_of?(query, expr)</a>

      </div>

        <div class="summary-synopsis"><p>Same as <a><code class="inline">superset_of/2</code></a> but always returns a boolean. <code class="inline">:maybe</code> returns <code class="inline">false</code>.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#timeout/2" data-no-tooltip="" translate="no">timeout(query, timeout)</a>

      </div>

        <div class="summary-synopsis"><p>Set a timeout for the query.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#unload/2" data-no-tooltip="" translate="no">unload(query, fields)</a>

      </div>

        <div class="summary-synopsis"><p>Removes a field from the list of fields to load</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#unset/2" data-no-tooltip="" translate="no">unset(query, keys)</a>

      </div>

        <div class="summary-synopsis"><p>Removes specified keys from the query, resetting them to their default values.</p></div>

    </div>

</div>

      </section>


      <section id="types" class="details-list">
        <h1 class="section-heading">Types</h1>
        <div class="types-list">
<section class="detail" id="t:after_transaction_fun/0">

  <div class="detail-header">
    <a href="#t:after_transaction_fun/0" class="detail-link" data-no-tooltip="" aria-label="Link to this type">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">after_transaction_fun()</h1>


        <a href="https://github.com/ash-project/ash/blob/v3.5.33/lib/ash/query/query.ex#L259" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@type</span> after_transaction_fun() :: (<a href="#t:t/0">t</a>(),
                            {:ok, [<a href="Ash.Resource.xhtml#t:record/0">Ash.Resource.record</a>()]}
                            | {:error, <a href="https://hexdocs.pm/elixir/typespecs.html#basic-types">any</a>()} -&gt;
                              {:ok, [<a href="Ash.Resource.xhtml#t:record/0">Ash.Resource.record</a>()]} | {:error, <a href="https://hexdocs.pm/elixir/typespecs.html#basic-types">any</a>()})</pre>

      </div>

<p>Function type for after_transaction hooks that run after query execution.</p>
  </section>
</section>
<section class="detail" id="t:around_result/0">

  <div class="detail-header">
    <a href="#t:around_result/0" class="detail-link" data-no-tooltip="" aria-label="Link to this type">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">around_result()</h1>


        <a href="https://github.com/ash-project/ash/blob/v3.5.33/lib/ash/query/query.ex#L251" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@type</span> around_result() :: {:ok, [<a href="Ash.Resource.xhtml#t:record/0">Ash.Resource.record</a>()]} | {:error, <a href="Ash.Error.xhtml#t:t/0">Ash.Error.t</a>()}</pre>

      </div>

<p>Result type for around_transaction hooks, containing either successful records or an error.</p>
  </section>
</section>
<section class="detail" id="t:around_transaction_fun/0">

  <div class="detail-header">
    <a href="#t:around_transaction_fun/0" class="detail-link" data-no-tooltip="" aria-label="Link to this type">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">around_transaction_fun()</h1>


        <a href="https://github.com/ash-project/ash/blob/v3.5.33/lib/ash/query/query.ex#L264" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@type</span> around_transaction_fun() :: (<a href="#t:t/0">t</a>() -&gt;
                               {:ok, <a href="Ash.Resource.xhtml#t:record/0">Ash.Resource.record</a>()} | {:error, <a href="https://hexdocs.pm/elixir/typespecs.html#basic-types">any</a>()})</pre>

      </div>

<p>Function type for around_transaction hooks that wrap query execution in a transaction.</p>
  </section>
</section>
<section class="detail" id="t:before_transaction_fun/0">

  <div class="detail-header">
    <a href="#t:before_transaction_fun/0" class="detail-link" data-no-tooltip="" aria-label="Link to this type">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">before_transaction_fun()</h1>


        <a href="https://github.com/ash-project/ash/blob/v3.5.33/lib/ash/query/query.ex#L256" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@type</span> before_transaction_fun() :: (<a href="#t:t/0">t</a>() -&gt; <a href="#t:t/0">t</a>() | {:error, <a href="https://hexdocs.pm/elixir/typespecs.html#basic-types">any</a>()})</pre>

      </div>

<p>Function type for before_transaction hooks that run before query execution.</p>
  </section>
</section>
<section class="detail" id="t:t/0">

  <div class="detail-header">
    <a href="#t:t/0" class="detail-link" data-no-tooltip="" aria-label="Link to this type">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">t()</h1>


        <a href="https://github.com/ash-project/ash/blob/v3.5.33/lib/ash/query/query.ex#L202" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@type</span> t() :: %Ash.Query{
  __validated_for_action__: <a href="https://hexdocs.pm/elixir/typespecs.html#basic-types">atom</a>() | nil,
  action: <a href="Ash.Resource.Actions.Read.xhtml#t:t/0">Ash.Resource.Actions.Read.t</a>() | nil,
  action_failed?: <a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types">boolean</a>(),
  after_action: [
    (<a href="#t:t/0">t</a>(), [<a href="Ash.Resource.xhtml#t:record/0">Ash.Resource.record</a>()] -&gt;
       {:ok, [<a href="Ash.Resource.xhtml#t:record/0">Ash.Resource.record</a>()]}
       | {:ok, [<a href="Ash.Resource.xhtml#t:record/0">Ash.Resource.record</a>()], [<a href="Ash.Notifier.Notification.xhtml#t:t/0">Ash.Notifier.Notification.t</a>()]}
       | {:error, <a href="https://hexdocs.pm/elixir/typespecs.html#basic-types">any</a>()})
  ],
  after_transaction: [<a href="#t:after_transaction_fun/0">after_transaction_fun</a>()],
  aggregates: %{optional(<a href="https://hexdocs.pm/elixir/typespecs.html#basic-types">atom</a>()) =&gt; <a href="Ash.Filter.xhtml#t:t/0">Ash.Filter.t</a>()},
  arguments: %{optional(<a href="https://hexdocs.pm/elixir/typespecs.html#basic-types">atom</a>()) =&gt; <a href="https://hexdocs.pm/elixir/typespecs.html#basic-types">any</a>()},
  around_transaction: [<a href="#t:around_transaction_fun/0">around_transaction_fun</a>()],
  authorize_results: [
    (<a href="#t:t/0">t</a>(), [<a href="Ash.Resource.xhtml#t:record/0">Ash.Resource.record</a>()] -&gt;
       {:ok, [<a href="Ash.Resource.xhtml#t:record/0">Ash.Resource.record</a>()]} | {:error, <a href="https://hexdocs.pm/elixir/typespecs.html#basic-types">any</a>()})
  ],
  before_action: [(<a href="#t:t/0">t</a>() -&gt; <a href="#t:t/0">t</a>())],
  before_transaction: [<a href="#t:before_transaction_fun/0">before_transaction_fun</a>()],
  calculations: %{optional(<a href="https://hexdocs.pm/elixir/typespecs.html#basic-types">atom</a>()) =&gt; :wat},
  combination_of: [<a href="Ash.Query.Combination.xhtml#t:t/0">Ash.Query.Combination.t</a>()],
  context: <a href="https://hexdocs.pm/elixir/typespecs.html#basic-types">map</a>(),
  distinct: [<a href="https://hexdocs.pm/elixir/typespecs.html#basic-types">atom</a>()],
  distinct_sort: <a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types">term</a>(),
  domain: <a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types">module</a>() | nil,
  errors: [<a href="Ash.Error.xhtml#t:t/0">Ash.Error.t</a>()],
  filter: <a href="Ash.Filter.xhtml#t:t/0">Ash.Filter.t</a>() | nil,
  invalid_keys: <a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types">term</a>(),
  limit: nil | <a href="https://hexdocs.pm/elixir/typespecs.html#basic-types">non_neg_integer</a>(),
  load: <a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types">keyword</a>(<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types">keyword</a>()),
  load_through: <a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types">term</a>(),
  lock: <a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types">term</a>(),
  offset: <a href="https://hexdocs.pm/elixir/typespecs.html#basic-types">non_neg_integer</a>(),
  page: <a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types">keyword</a>() | nil | false,
  params: %{optional(<a href="https://hexdocs.pm/elixir/typespecs.html#basic-types">atom</a>() | <a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types">binary</a>()) =&gt; <a href="https://hexdocs.pm/elixir/typespecs.html#basic-types">any</a>()},
  phase: :preparing | :before_action | :after_action | :executing,
  resource: <a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types">module</a>(),
  select: nil | [<a href="https://hexdocs.pm/elixir/typespecs.html#basic-types">atom</a>()],
  sort: [<a href="https://hexdocs.pm/elixir/typespecs.html#basic-types">atom</a>() | {<a href="https://hexdocs.pm/elixir/typespecs.html#basic-types">atom</a>(), :asc | :desc}],
  sort_input_indices: <a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types">term</a>(),
  tenant: <a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types">term</a>(),
  timeout: <a href="https://hexdocs.pm/elixir/typespecs.html#basic-types">pos_integer</a>() | nil,
  to_tenant: <a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types">term</a>(),
  valid?: <a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types">boolean</a>()
}</pre>

      </div>

<p>A query struct for reading data from a resource.</p><p>Contains all the configuration needed to read data including filters, sorting,
pagination, field selection, and relationship loading. Built incrementally
through functions like <a href="#filter/2"><code class="inline">filter/2</code></a>, <a href="#sort/2"><code class="inline">sort/2</code></a>, <a href="#load/2"><code class="inline">load/2</code></a>, etc.</p>
  </section>
</section>

        </div>
      </section>

      <section id="functions" class="details-list">
        <h1 class="section-heading">Functions</h1>
        <div class="functions-list">
<section class="detail" id="accessing/3">

    <span id="accessing/1"></span>

    <span id="accessing/2"></span>

  <div class="detail-header">
    <a href="#accessing/3" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">accessing(query, types \\ [:attributes, :relationships, :calculations, :aggregates], only_public? \\ true)</h1>


        <a href="https://github.com/ash-project/ash/blob/v3.5.33/lib/ash/query/query.ex#L1858" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

<p>Returns a list of attributes, aggregates, relationships, and calculations that are being loaded</p><p>Provide a list of field types to narrow down the returned results.</p>
  </section>
</section>
<section class="detail" id="add_error/3">

    <span id="add_error/2"></span>

  <div class="detail-header">
    <a href="#add_error/3" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">add_error(query, path \\ [], error)</h1>


        <a href="https://github.com/ash-project/ash/blob/v3.5.33/lib/ash/query/query.ex#L4596" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> add_error(<a href="#t:t/0">t</a>(), path :: <a href="Ash.Error.xhtml#t:path_input/0">Ash.Error.path_input</a>(), <a href="Ash.Error.xhtml#t:error_input/0">Ash.Error.error_input</a>()) :: <a href="#t:t/0">t</a>()</pre>

      </div>

<p>Add an error to the errors list and mark the query as invalid.</p><p>See <a href="Ash.Error.xhtml#to_ash_error/3"><code class="inline">Ash.Error.to_ash_error/3</code></a> for more on supported values for <code class="inline">error</code></p><h2 id="add_error/3-inconsistencies" class="section-heading"><a href="#add_error/3-inconsistencies" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Inconsistencies</span></h2><p>The <code class="inline">path</code> argument is the second argument here, but the third argument
in <a href="Ash.ActionInput.xhtml#add_error/2"><code class="inline">Ash.ActionInput.add_error/2</code></a> and <a href="Ash.Changeset.xhtml#add_error/2"><code class="inline">Ash.Changeset.add_error/2</code></a>.
This will be fixed in 4.0.</p>
  </section>
</section>
<section class="detail" id="after_action/2">

  <div class="detail-header">
    <a href="#after_action/2" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">after_action(query, func)</h1>


        <a href="https://github.com/ash-project/ash/blob/v3.5.33/lib/ash/query/query.ex#L1566" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> after_action(
  query :: <a href="#t:t/0">t</a>(),
  fun :: (<a href="#t:t/0">t</a>(), [<a href="Ash.Resource.xhtml#t:record/0">Ash.Resource.record</a>()] -&gt;
            {:ok, [<a href="Ash.Resource.xhtml#t:record/0">Ash.Resource.record</a>()]}
            | {:ok, [<a href="Ash.Resource.xhtml#t:record/0">Ash.Resource.record</a>()], [<a href="Ash.Notifier.Notification.xhtml#t:t/0">Ash.Notifier.Notification.t</a>()]}
            | {:error, <a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types">term</a>()})
) :: <a href="#t:t/0">t</a>()</pre>

      </div>

<p>Adds an after_action hook to the query.</p><p>After action hooks are called with the query and the list of records returned
from the action. They can modify the records, perform side effects, or return
errors to halt processing. The hook can return notifications alongside the records.</p><h2 id="after_action/2-examples" class="section-heading"><a href="#after_action/2-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="c1"># Transform records after loading</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="n">query</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="nc">MyApp.Post</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">after_action</samp><samp class="p" data-group-id="6125753420-1">(</samp><samp class="k" data-group-id="6125753420-2">fn</samp><samp class="w"> </samp><samp class="n">query</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">records</samp><samp class="w"> </samp><samp class="o">-&gt;</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="w">  </samp><samp class="n">enriched_records</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="nc">Enum</samp><samp class="o">.</samp><samp class="n">map</samp><samp class="p" data-group-id="6125753420-3">(</samp><samp class="n">records</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="o">&amp;</samp><samp class="n">add_computed_field</samp><samp class="o">/</samp><samp class="mi">1</samp><samp class="p" data-group-id="6125753420-3">)</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="w">  </samp><samp class="p" data-group-id="6125753420-4">{</samp><samp class="ss">:ok</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">enriched_records</samp><samp class="p" data-group-id="6125753420-4">}</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="k" data-group-id="6125753420-2">end</samp><samp class="p" data-group-id="6125753420-1">)</samp><samp class="w">

</samp><samp class="c1"># Log successful reads</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="n">query</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="nc">MyApp.Post</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">after_action</samp><samp class="p" data-group-id="6125753420-5">(</samp><samp class="k" data-group-id="6125753420-6">fn</samp><samp class="w"> </samp><samp class="n">query</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">records</samp><samp class="w"> </samp><samp class="o">-&gt;</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="w">  </samp><samp class="nc">IO</samp><samp class="o">.</samp><samp class="n">puts</samp><samp class="p" data-group-id="6125753420-7">(</samp><samp class="s">&quot;Successfully loaded </samp><samp class="si" data-group-id="6125753420-8">#{</samp><samp class="n">length</samp><samp class="p" data-group-id="6125753420-9">(</samp><samp class="n">records</samp><samp class="p" data-group-id="6125753420-9">)</samp><samp class="si" data-group-id="6125753420-8">}</samp><samp class="s"> posts&quot;</samp><samp class="p" data-group-id="6125753420-7">)</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="w">  </samp><samp class="p" data-group-id="6125753420-10">{</samp><samp class="ss">:ok</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">records</samp><samp class="p" data-group-id="6125753420-10">}</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="k" data-group-id="6125753420-6">end</samp><samp class="p" data-group-id="6125753420-5">)</samp><samp class="w">

</samp><samp class="c1"># Add notifications after the action</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="n">query</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="nc">MyApp.Post</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">after_action</samp><samp class="p" data-group-id="6125753420-11">(</samp><samp class="k" data-group-id="6125753420-12">fn</samp><samp class="w"> </samp><samp class="n">query</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">records</samp><samp class="w"> </samp><samp class="o">-&gt;</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="w">  </samp><samp class="n">notifications</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="n">create_read_notifications</samp><samp class="p" data-group-id="6125753420-13">(</samp><samp class="n">records</samp><samp class="p" data-group-id="6125753420-13">)</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="w">  </samp><samp class="p" data-group-id="6125753420-14">{</samp><samp class="ss">:ok</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">records</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">notifications</samp><samp class="p" data-group-id="6125753420-14">}</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="k" data-group-id="6125753420-12">end</samp><samp class="p" data-group-id="6125753420-11">)</samp><samp class="w">

</samp><samp class="c1"># Validate results and potentially error</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="n">query</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="nc">MyApp.Post</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">after_action</samp><samp class="p" data-group-id="6125753420-15">(</samp><samp class="k" data-group-id="6125753420-16">fn</samp><samp class="w"> </samp><samp class="n">query</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">records</samp><samp class="w"> </samp><samp class="o">-&gt;</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="w">  </samp><samp class="k">if</samp><samp class="w"> </samp><samp class="nc">Enum</samp><samp class="o">.</samp><samp class="n">any?</samp><samp class="p" data-group-id="6125753420-17">(</samp><samp class="n">records</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="o">&amp;</samp><samp class="n">restricted?</samp><samp class="o">/</samp><samp class="mi">1</samp><samp class="p" data-group-id="6125753420-17">)</samp><samp class="w"> </samp><samp class="k" data-group-id="6125753420-18">do</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="w">    </samp><samp class="p" data-group-id="6125753420-19">{</samp><samp class="ss">:error</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;Access denied to restricted posts&quot;</samp><samp class="p" data-group-id="6125753420-19">}</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="w">  </samp><samp class="k" data-group-id="6125753420-18">else</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="w">    </samp><samp class="p" data-group-id="6125753420-20">{</samp><samp class="ss">:ok</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">records</samp><samp class="p" data-group-id="6125753420-20">}</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="w">  </samp><samp class="k" data-group-id="6125753420-18">end</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="k" data-group-id="6125753420-16">end</samp><samp class="p" data-group-id="6125753420-15">)</samp></code></pre><h2 id="after_action/2-see-also" class="section-heading"><a href="#after_action/2-see-also" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">See also</span></h2><ul><li><a href="#before_action/3"><code class="inline">before_action/3</code></a> for hooks that run before the action executes</li><li><a href="#around_transaction/2"><code class="inline">around_transaction/2</code></a> for hooks that wrap the entire transaction</li><li><a href="Ash.xhtml#read/2"><code class="inline">Ash.read/2</code></a> for executing queries with hooks</li></ul>
  </section>
</section>
<section class="detail" id="after_transaction/3">

    <span id="after_transaction/2"></span>

  <div class="detail-header">
    <a href="#after_transaction/3" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">after_transaction(query, func, opts \\ [])</h1>


        <a href="https://github.com/ash-project/ash/blob/v3.5.33/lib/ash/query/query.ex#L1369" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> after_transaction(
  query :: <a href="#t:t/0">t</a>(),
  fun :: <a href="#t:after_transaction_fun/0">after_transaction_fun</a>(),
  opts :: <a href="https://hexdocs.pm/elixir/Keyword.html#t:t/0">Keyword.t</a>()
) :: <a href="#t:t/0">t</a>()</pre>

      </div>

<p>Adds an after_transaction hook to the query.</p><p>The after_transaction hook runs after the database transaction completes,
regardless of success or failure. It receives the query and the result,
and can modify the result or perform cleanup operations.</p><h2 id="after_transaction/3-examples" class="section-heading"><a href="#after_transaction/3-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="c1"># Add cleanup after transaction</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="n">query</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="nc">MyApp.Post</samp><samp class="w"> </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">after_transaction</samp><samp class="p" data-group-id="0001812455-1">(</samp><samp class="k" data-group-id="0001812455-2">fn</samp><samp class="w"> </samp><samp class="n">query</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">result</samp><samp class="w"> </samp><samp class="o">-&gt;</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="w">  </samp><samp class="n">cleanup_resources</samp><samp class="p" data-group-id="0001812455-3">(</samp><samp class="p" data-group-id="0001812455-3">)</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="w">  </samp><samp class="n">result</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="k" data-group-id="0001812455-2">end</samp><samp class="p" data-group-id="0001812455-1">)</samp></code></pre><h2 id="after_transaction/3-see-also" class="section-heading"><a href="#after_transaction/3-see-also" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">See also</span></h2><ul><li><a href="#before_transaction/2"><code class="inline">before_transaction/2</code></a> for hooks that run before the transaction</li><li><a href="#around_transaction/2"><code class="inline">around_transaction/2</code></a> for hooks that wrap the entire transaction</li><li><a href="#after_action/2"><code class="inline">after_action/2</code></a> for hooks that run after the action (inside transaction)</li></ul>
  </section>
</section>
<section class="detail" id="aggregate/4">

  <div class="detail-header">
    <a href="#aggregate/4" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">aggregate(query, name, kind, relationship)</h1>


        <a href="https://github.com/ash-project/ash/blob/v3.5.33/lib/ash/query/query.ex#L3389" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> aggregate(<a href="#t:t/0">t</a>() | <a href="Ash.Resource.xhtml#t:t/0">Ash.Resource.t</a>(), <a href="https://hexdocs.pm/elixir/typespecs.html#basic-types">atom</a>() | <a href="https://hexdocs.pm/elixir/String.html#t:t/0">String.t</a>(), <a href="https://hexdocs.pm/elixir/typespecs.html#basic-types">atom</a>(), <a href="https://hexdocs.pm/elixir/typespecs.html#basic-types">atom</a>()) :: <a href="#t:t/0">t</a>()</pre>

      </div>

<p>Adds an aggregation to the query.</p><p>Aggregations are made available on the <code class="inline">aggregates</code> field of the records returned.
They allow you to compute values from related data without loading entire relationships,
making them very efficient for statistical operations.</p><h2 id="aggregate/4-examples" class="section-heading"><a href="#aggregate/4-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="c1"># Count related records</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">aggregate</samp><samp class="p" data-group-id="5159837682-1">(</samp><samp class="nc">MyApp.Author</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:post_count</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:count</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:posts</samp><samp class="p" data-group-id="5159837682-1">)</samp><samp class="w">
</samp><samp class="p" data-group-id="5159837682-2">%</samp><samp class="nc" data-group-id="5159837682-2">Ash.Query</samp><samp class="p" data-group-id="5159837682-2">{</samp><samp class="ss">aggregates</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="5159837682-3">%{</samp><samp class="ss">post_count</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="5159837682-4">%</samp><samp class="nc" data-group-id="5159837682-4">Ash.Query.Aggregate</samp><samp class="p" data-group-id="5159837682-4">{</samp><samp class="n">...</samp><samp class="p" data-group-id="5159837682-4">}</samp><samp class="p" data-group-id="5159837682-3">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">...</samp><samp class="p" data-group-id="5159837682-2">}</samp><samp class="w">

</samp><samp class="c1"># Sum values from related records</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">aggregate</samp><samp class="p" data-group-id="5159837682-5">(</samp><samp class="nc">MyApp.Author</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:total_likes</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:sum</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:posts</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">field</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="ss">:like_count</samp><samp class="p" data-group-id="5159837682-5">)</samp><samp class="w">
</samp><samp class="p" data-group-id="5159837682-6">%</samp><samp class="nc" data-group-id="5159837682-6">Ash.Query</samp><samp class="p" data-group-id="5159837682-6">{</samp><samp class="ss">aggregates</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="5159837682-7">%{</samp><samp class="ss">total_likes</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="5159837682-8">%</samp><samp class="nc" data-group-id="5159837682-8">Ash.Query.Aggregate</samp><samp class="p" data-group-id="5159837682-8">{</samp><samp class="n">...</samp><samp class="p" data-group-id="5159837682-8">}</samp><samp class="p" data-group-id="5159837682-7">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">...</samp><samp class="p" data-group-id="5159837682-6">}</samp><samp class="w">

</samp><samp class="c1"># Average with filtered aggregation</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="n">published_query</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">filter</samp><samp class="p" data-group-id="5159837682-9">(</samp><samp class="nc">MyApp.Post</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">published</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">true</samp><samp class="p" data-group-id="5159837682-9">)</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">aggregate</samp><samp class="p" data-group-id="5159837682-10">(</samp><samp class="nc">MyApp.Author</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:avg_published_likes</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:avg</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:posts</samp><samp class="p">,</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="w">  </samp><samp class="ss">field</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="ss">:like_count</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">query</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="n">published_query</samp><samp class="p" data-group-id="5159837682-10">)</samp><samp class="w">
</samp><samp class="p" data-group-id="5159837682-11">%</samp><samp class="nc" data-group-id="5159837682-11">Ash.Query</samp><samp class="p" data-group-id="5159837682-11">{</samp><samp class="ss">aggregates</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="5159837682-12">%{</samp><samp class="ss">avg_published_likes</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="5159837682-13">%</samp><samp class="nc" data-group-id="5159837682-13">Ash.Query.Aggregate</samp><samp class="p" data-group-id="5159837682-13">{</samp><samp class="n">...</samp><samp class="p" data-group-id="5159837682-13">}</samp><samp class="p" data-group-id="5159837682-12">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">...</samp><samp class="p" data-group-id="5159837682-11">}</samp><samp class="w">

</samp><samp class="c1"># Count with default value</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">aggregate</samp><samp class="p" data-group-id="5159837682-14">(</samp><samp class="nc">MyApp.Author</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:post_count</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:count</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:posts</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">default</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">0</samp><samp class="p" data-group-id="5159837682-14">)</samp><samp class="w">
</samp><samp class="p" data-group-id="5159837682-15">%</samp><samp class="nc" data-group-id="5159837682-15">Ash.Query</samp><samp class="p" data-group-id="5159837682-15">{</samp><samp class="ss">aggregates</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="5159837682-16">%{</samp><samp class="ss">post_count</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="5159837682-17">%</samp><samp class="nc" data-group-id="5159837682-17">Ash.Query.Aggregate</samp><samp class="p" data-group-id="5159837682-17">{</samp><samp class="n">...</samp><samp class="p" data-group-id="5159837682-17">}</samp><samp class="p" data-group-id="5159837682-16">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">...</samp><samp class="p" data-group-id="5159837682-15">}</samp></code></pre><h2 id="aggregate/4-options" class="section-heading"><a href="#aggregate/4-options" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Options</span></h2><ul><li><code class="inline">query</code> - The query over the destination resource to use as a base for aggregation</li><li><code class="inline">field</code> - The field to use for the aggregate. Not necessary for all aggregate types</li><li><code class="inline">default</code> - The default value to use if the aggregate returns nil</li><li><code class="inline">filterable?</code> - Whether or not this aggregate may be referenced in filters</li><li><code class="inline">type</code> - The type of the aggregate</li><li><code class="inline">constraints</code> - Type constraints for the aggregate's type</li><li><code class="inline">implementation</code> - An implementation used when the aggregate kind is custom</li><li><code class="inline">read_action</code> - The read action to use on the destination resource</li><li><code class="inline">authorize?</code> - Whether or not to authorize access to this aggregate</li><li><code class="inline">join_filters</code> - A map of relationship paths to filter expressions</li></ul><h2 id="aggregate/4-see-also" class="section-heading"><a href="#aggregate/4-see-also" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">See also</span></h2><ul><li><a href="dsl-ash-resource.html#aggregates">Resource DSL aggregates documentation</a> for more information</li><li><a href="#load/3"><code class="inline">load/3</code></a> for loading relationships instead of aggregating</li><li><a href="#calculate/8"><code class="inline">calculate/8</code></a> for custom calculations</li><li><a href="Ash.xhtml#read/2"><code class="inline">Ash.read/2</code></a> for executing queries with aggregates</li></ul>
  </section>
</section>
<section class="detail" id="aggregate/5">

  <div class="detail-header">
    <a href="#aggregate/5" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">aggregate(query, name, kind, relationship, opts)</h1>


        <a href="https://github.com/ash-project/ash/blob/v3.5.33/lib/ash/query/query.ex#L3395" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> aggregate(
  <a href="#t:t/0">t</a>() | <a href="Ash.Resource.xhtml#t:t/0">Ash.Resource.t</a>(),
  <a href="https://hexdocs.pm/elixir/typespecs.html#basic-types">atom</a>() | <a href="https://hexdocs.pm/elixir/String.html#t:t/0">String.t</a>(),
  <a href="https://hexdocs.pm/elixir/typespecs.html#basic-types">atom</a>(),
  <a href="https://hexdocs.pm/elixir/typespecs.html#basic-types">atom</a>(),
  <a href="https://hexdocs.pm/elixir/Keyword.html#t:t/0">Keyword.t</a>()
) :: <a href="#t:t/0">t</a>()</pre>

      </div>


  </section>
</section>
<section class="detail" id="apply_to/3">

    <span id="apply_to/2"></span>

  <div class="detail-header">
    <a href="#apply_to/3" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">apply_to(query, records, opts \\ [])</h1>


        <a href="https://github.com/ash-project/ash/blob/v3.5.33/lib/ash/query/query.ex#L4293" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> apply_to(<a href="#t:t/0">t</a>(), records :: [<a href="Ash.Resource.xhtml#t:record/0">Ash.Resource.record</a>()], opts :: <a href="https://hexdocs.pm/elixir/Keyword.html#t:t/0">Keyword.t</a>()) ::
  {:ok, [<a href="Ash.Resource.xhtml#t:record/0">Ash.Resource.record</a>()]}</pre>

      </div>

<p>Applies a query to a list of records in memory.</p><p>This function takes a query and applies its filters, sorting, pagination,
and loading operations to an existing list of records in memory rather than
querying the data layer. Useful for post-processing records or applying
query logic to data from multiple sources.</p><h2 id="apply_to/3-examples" class="section-heading"><a href="#apply_to/3-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="c1"># Apply filtering to records in memory</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="n">records</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="p" data-group-id="0639561938-1">[</samp><samp class="p" data-group-id="0639561938-2">%</samp><samp class="nc" data-group-id="0639561938-2">MyApp.Post</samp><samp class="p" data-group-id="0639561938-2">{</samp><samp class="ss">title</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;A&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">published</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">true</samp><samp class="p" data-group-id="0639561938-2">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="0639561938-3">%</samp><samp class="nc" data-group-id="0639561938-3">MyApp.Post</samp><samp class="p" data-group-id="0639561938-3">{</samp><samp class="ss">title</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;B&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">published</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">false</samp><samp class="p" data-group-id="0639561938-3">}</samp><samp class="p" data-group-id="0639561938-1">]</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="n">query</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="nc">MyApp.Post</samp><samp class="w"> </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">filter</samp><samp class="p" data-group-id="0639561938-4">(</samp><samp class="ss">published</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">true</samp><samp class="p" data-group-id="0639561938-4">)</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">apply_to</samp><samp class="p" data-group-id="0639561938-5">(</samp><samp class="n">query</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">records</samp><samp class="p" data-group-id="0639561938-5">)</samp><samp class="w">
</samp><samp class="p" data-group-id="0639561938-6">{</samp><samp class="ss">:ok</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="0639561938-7">[</samp><samp class="p" data-group-id="0639561938-8">%</samp><samp class="nc" data-group-id="0639561938-8">MyApp.Post</samp><samp class="p" data-group-id="0639561938-8">{</samp><samp class="ss">title</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;A&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">published</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">true</samp><samp class="p" data-group-id="0639561938-8">}</samp><samp class="p" data-group-id="0639561938-7">]</samp><samp class="p" data-group-id="0639561938-6">}</samp><samp class="w">

</samp><samp class="c1"># Apply sorting and limiting</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="n">records</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="p" data-group-id="0639561938-9">[</samp><samp class="p" data-group-id="0639561938-10">%</samp><samp class="nc" data-group-id="0639561938-10">MyApp.Post</samp><samp class="p" data-group-id="0639561938-10">{</samp><samp class="ss">title</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;C&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">likes</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">5</samp><samp class="p" data-group-id="0639561938-10">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="0639561938-11">%</samp><samp class="nc" data-group-id="0639561938-11">MyApp.Post</samp><samp class="p" data-group-id="0639561938-11">{</samp><samp class="ss">title</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;A&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">likes</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">10</samp><samp class="p" data-group-id="0639561938-11">}</samp><samp class="p" data-group-id="0639561938-9">]</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="n">query</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="nc">MyApp.Post</samp><samp class="w"> </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">sort</samp><samp class="p" data-group-id="0639561938-12">(</samp><samp class="ss">likes</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="ss">:desc</samp><samp class="p" data-group-id="0639561938-12">)</samp><samp class="w"> </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">limit</samp><samp class="p" data-group-id="0639561938-13">(</samp><samp class="mi">1</samp><samp class="p" data-group-id="0639561938-13">)</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">apply_to</samp><samp class="p" data-group-id="0639561938-14">(</samp><samp class="n">query</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">records</samp><samp class="p" data-group-id="0639561938-14">)</samp><samp class="w">
</samp><samp class="p" data-group-id="0639561938-15">{</samp><samp class="ss">:ok</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="0639561938-16">[</samp><samp class="p" data-group-id="0639561938-17">%</samp><samp class="nc" data-group-id="0639561938-17">MyApp.Post</samp><samp class="p" data-group-id="0639561938-17">{</samp><samp class="ss">title</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;A&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">likes</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">10</samp><samp class="p" data-group-id="0639561938-17">}</samp><samp class="p" data-group-id="0639561938-16">]</samp><samp class="p" data-group-id="0639561938-15">}</samp><samp class="w">

</samp><samp class="c1"># Apply with loading relationships</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="n">records</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="p" data-group-id="0639561938-18">[</samp><samp class="p" data-group-id="0639561938-19">%</samp><samp class="nc" data-group-id="0639561938-19">MyApp.Post</samp><samp class="p" data-group-id="0639561938-19">{</samp><samp class="ss">id</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">1</samp><samp class="p" data-group-id="0639561938-19">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="0639561938-20">%</samp><samp class="nc" data-group-id="0639561938-20">MyApp.Post</samp><samp class="p" data-group-id="0639561938-20">{</samp><samp class="ss">id</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">2</samp><samp class="p" data-group-id="0639561938-20">}</samp><samp class="p" data-group-id="0639561938-18">]</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="n">query</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="nc">MyApp.Post</samp><samp class="w"> </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">load</samp><samp class="p" data-group-id="0639561938-21">(</samp><samp class="ss">:author</samp><samp class="p" data-group-id="0639561938-21">)</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">apply_to</samp><samp class="p" data-group-id="0639561938-22">(</samp><samp class="n">query</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">records</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">domain</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="nc">MyApp.Blog</samp><samp class="p" data-group-id="0639561938-22">)</samp><samp class="w">
</samp><samp class="p" data-group-id="0639561938-23">{</samp><samp class="ss">:ok</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="0639561938-24">[</samp><samp class="p" data-group-id="0639561938-25">%</samp><samp class="nc" data-group-id="0639561938-25">MyApp.Post</samp><samp class="p" data-group-id="0639561938-25">{</samp><samp class="ss">id</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">1</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">author</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="0639561938-26">%</samp><samp class="nc" data-group-id="0639561938-26">MyApp.User</samp><samp class="p" data-group-id="0639561938-26">{</samp><samp class="n">...</samp><samp class="p" data-group-id="0639561938-26">}</samp><samp class="p" data-group-id="0639561938-25">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">...</samp><samp class="p" data-group-id="0639561938-24">]</samp><samp class="p" data-group-id="0639561938-23">}</samp></code></pre><h2 id="apply_to/3-options" class="section-heading"><a href="#apply_to/3-options" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Options</span></h2><ul><li><code class="inline">domain</code> - The domain to use for loading relationships</li><li><code class="inline">actor</code> - The actor for authorization during loading</li><li><code class="inline">tenant</code> - The tenant for multitenant operations</li><li><code class="inline">parent</code> - Parent context for nested operations</li></ul><h2 id="apply_to/3-see-also" class="section-heading"><a href="#apply_to/3-see-also" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">See also</span></h2><ul><li><a href="Ash.xhtml#read/2"><code class="inline">Ash.read/2</code></a> for querying the data layer directly</li><li><a href="#load/3"><code class="inline">load/3</code></a> for configuring relationship loading</li><li><a href="#filter/2"><code class="inline">filter/2</code></a> for adding filter conditions</li></ul>
  </section>
</section>
<section class="detail" id="around_transaction/3">

    <span id="around_transaction/2"></span>

  <div class="detail-header">
    <a href="#around_transaction/3" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">around_transaction(query, func, opts \\ [])</h1>


        <a href="https://github.com/ash-project/ash/blob/v3.5.33/lib/ash/query/query.ex#L1429" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> around_transaction(
  query :: <a href="#t:t/0">t</a>(),
  fun :: <a href="#t:around_transaction_fun/0">around_transaction_fun</a>(),
  opts :: <a href="https://hexdocs.pm/elixir/Keyword.html#t:t/0">Keyword.t</a>()
) :: <a href="#t:t/0">t</a>()</pre>

      </div>

<p>Adds an around_transaction hook to the query.</p><p>Your function will get the query, and a callback that must be called with a query (that may be modified).
The callback will return <code class="inline">{:ok, results}</code> or <code class="inline">{:error, error}</code>. You can modify these values, but the return value
must be one of those types.</p><p>The around_transaction calls happen first, and then (after they each resolve their callbacks) the <code class="inline">before_action</code>
hooks are called, followed by the <code class="inline">after_action</code> hooks being run. Then, the code that appeared <em>after</em> the callbacks were called is then run.</p><h2 id="around_transaction/3-examples" class="section-heading"><a href="#around_transaction/3-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="c1"># Add logging around the transaction</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="n">query</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="nc">MyApp.Post</samp><samp class="w"> </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">around_transaction</samp><samp class="p" data-group-id="1014527962-1">(</samp><samp class="k" data-group-id="1014527962-2">fn</samp><samp class="w"> </samp><samp class="n">query</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">callback</samp><samp class="w"> </samp><samp class="o">-&gt;</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="w">  </samp><samp class="nc">IO</samp><samp class="o">.</samp><samp class="n">puts</samp><samp class="p" data-group-id="1014527962-3">(</samp><samp class="s">&quot;Starting transaction for </samp><samp class="si" data-group-id="1014527962-4">#{</samp><samp class="n">inspect</samp><samp class="p" data-group-id="1014527962-5">(</samp><samp class="n">query</samp><samp class="o">.</samp><samp class="n">resource</samp><samp class="p" data-group-id="1014527962-5">)</samp><samp class="si" data-group-id="1014527962-4">}</samp><samp class="s">&quot;</samp><samp class="p" data-group-id="1014527962-3">)</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="w">  </samp><samp class="n">result</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="n">callback</samp><samp class="o">.</samp><samp class="p" data-group-id="1014527962-6">(</samp><samp class="n">query</samp><samp class="p" data-group-id="1014527962-6">)</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="w">  </samp><samp class="nc">IO</samp><samp class="o">.</samp><samp class="n">puts</samp><samp class="p" data-group-id="1014527962-7">(</samp><samp class="s">&quot;Transaction completed: </samp><samp class="si" data-group-id="1014527962-8">#{</samp><samp class="n">inspect</samp><samp class="p" data-group-id="1014527962-9">(</samp><samp class="n">result</samp><samp class="p" data-group-id="1014527962-9">)</samp><samp class="si" data-group-id="1014527962-8">}</samp><samp class="s">&quot;</samp><samp class="p" data-group-id="1014527962-7">)</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="w">  </samp><samp class="n">result</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="k" data-group-id="1014527962-2">end</samp><samp class="p" data-group-id="1014527962-1">)</samp><samp class="w">

</samp><samp class="c1"># Add error handling and retry logic</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="n">query</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="nc">MyApp.Post</samp><samp class="w"> </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">around_transaction</samp><samp class="p" data-group-id="1014527962-10">(</samp><samp class="k" data-group-id="1014527962-11">fn</samp><samp class="w"> </samp><samp class="n">query</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">callback</samp><samp class="w"> </samp><samp class="o">-&gt;</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="w">  </samp><samp class="k">case</samp><samp class="w"> </samp><samp class="n">callback</samp><samp class="o">.</samp><samp class="p" data-group-id="1014527962-12">(</samp><samp class="n">query</samp><samp class="p" data-group-id="1014527962-12">)</samp><samp class="w"> </samp><samp class="k" data-group-id="1014527962-13">do</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="w">    </samp><samp class="p" data-group-id="1014527962-14">{</samp><samp class="ss">:ok</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">results</samp><samp class="p" data-group-id="1014527962-14">}</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="n">success</samp><samp class="w"> </samp><samp class="o">-&gt;</samp><samp class="w"> </samp><samp class="n">success</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="w">    </samp><samp class="p" data-group-id="1014527962-15">{</samp><samp class="ss">:error</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="1014527962-16">%{</samp><samp class="ss">retryable?</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">true</samp><samp class="p" data-group-id="1014527962-16">}</samp><samp class="p" data-group-id="1014527962-15">}</samp><samp class="w"> </samp><samp class="o">-&gt;</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="w">      </samp><samp class="n">callback</samp><samp class="o">.</samp><samp class="p" data-group-id="1014527962-17">(</samp><samp class="n">query</samp><samp class="p" data-group-id="1014527962-17">)</samp><samp class="w">  </samp><samp class="c1"># Retry once</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="w">    </samp><samp class="n">error</samp><samp class="w"> </samp><samp class="o">-&gt;</samp><samp class="w"> </samp><samp class="n">error</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="w">  </samp><samp class="k" data-group-id="1014527962-13">end</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="k" data-group-id="1014527962-11">end</samp><samp class="p" data-group-id="1014527962-10">)</samp></code></pre><h2 id="around_transaction/3-warning" class="section-heading"><a href="#around_transaction/3-warning" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Warning</span></h2><p>Using this without understanding how it works can cause big problems.
You <em>must</em> call the callback function that is provided to your hook, and the return value must
contain the same structure that was given to you, i.e <code class="inline">{:ok, result_of_action}</code>.</p><h2 id="around_transaction/3-see-also" class="section-heading"><a href="#around_transaction/3-see-also" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">See also</span></h2><ul><li><a href="#before_transaction/2"><code class="inline">before_transaction/2</code></a> for hooks that run before the transaction</li><li><a href="#after_transaction/2"><code class="inline">after_transaction/2</code></a> for hooks that run after the transaction</li><li><a href="#before_action/3"><code class="inline">before_action/3</code></a> for hooks that run before the action executes</li><li><a href="#after_action/2"><code class="inline">after_action/2</code></a> for hooks that run after the action completes</li><li><a href="Ash.xhtml#read/2"><code class="inline">Ash.read/2</code></a> for executing queries with hooks</li></ul>
  </section>
</section>
<section class="detail" id="before_action/3">

    <span id="before_action/2"></span>

  <div class="detail-header">
    <a href="#before_action/3" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">before_action(query, func, opts \\ [])</h1>


        <a href="https://github.com/ash-project/ash/blob/v3.5.33/lib/ash/query/query.ex#L1486" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> before_action(
  query :: <a href="#t:t/0">t</a>(),
  fun :: (<a href="#t:t/0">t</a>() -&gt; <a href="#t:t/0">t</a>() | {<a href="#t:t/0">t</a>(), [<a href="Ash.Notifier.Notification.xhtml#t:t/0">Ash.Notifier.Notification.t</a>()]}),
  opts :: <a href="https://hexdocs.pm/elixir/Keyword.html#t:t/0">Keyword.t</a>()
) :: <a href="#t:t/0">t</a>()</pre>

      </div>

<p>Adds a before_action hook to the query.</p><p>Before action hooks are called after preparations but before the actual
data layer query is executed. They receive the prepared query and can
modify it or perform side effects before the action runs.</p><h2 id="before_action/3-examples" class="section-heading"><a href="#before_action/3-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="c1"># Add validation before the query runs</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="n">query</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="nc">MyApp.Post</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">before_action</samp><samp class="p" data-group-id="1472439799-1">(</samp><samp class="k" data-group-id="1472439799-2">fn</samp><samp class="w"> </samp><samp class="n">query</samp><samp class="w"> </samp><samp class="o">-&gt;</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="w">  </samp><samp class="k">if</samp><samp class="w"> </samp><samp class="nc">Enum</samp><samp class="o">.</samp><samp class="n">empty?</samp><samp class="p" data-group-id="1472439799-3">(</samp><samp class="n">query</samp><samp class="o">.</samp><samp class="n">sort</samp><samp class="p" data-group-id="1472439799-3">)</samp><samp class="w"> </samp><samp class="k" data-group-id="1472439799-4">do</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="w">    </samp><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">sort</samp><samp class="p" data-group-id="1472439799-5">(</samp><samp class="n">query</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:created_at</samp><samp class="p" data-group-id="1472439799-5">)</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="w">  </samp><samp class="k" data-group-id="1472439799-4">else</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="w">    </samp><samp class="n">query</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="w">  </samp><samp class="k" data-group-id="1472439799-4">end</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="k" data-group-id="1472439799-2">end</samp><samp class="p" data-group-id="1472439799-1">)</samp><samp class="w">

</samp><samp class="c1"># Add logging before the action</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="n">query</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="nc">MyApp.Post</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">before_action</samp><samp class="p" data-group-id="1472439799-6">(</samp><samp class="k" data-group-id="1472439799-7">fn</samp><samp class="w"> </samp><samp class="n">query</samp><samp class="w"> </samp><samp class="o">-&gt;</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="w">  </samp><samp class="nc">IO</samp><samp class="o">.</samp><samp class="n">puts</samp><samp class="p" data-group-id="1472439799-8">(</samp><samp class="s">&quot;Executing query for </samp><samp class="si" data-group-id="1472439799-9">#{</samp><samp class="n">length</samp><samp class="p" data-group-id="1472439799-10">(</samp><samp class="n">query</samp><samp class="o">.</samp><samp class="n">filter</samp><samp class="w"> </samp><samp class="o">||</samp><samp class="w"> </samp><samp class="p" data-group-id="1472439799-11">[</samp><samp class="p" data-group-id="1472439799-11">]</samp><samp class="p" data-group-id="1472439799-10">)</samp><samp class="si" data-group-id="1472439799-9">}</samp><samp class="s"> filters&quot;</samp><samp class="p" data-group-id="1472439799-8">)</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="w">  </samp><samp class="n">query</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="k" data-group-id="1472439799-7">end</samp><samp class="p" data-group-id="1472439799-6">)</samp><samp class="w">

</samp><samp class="c1"># Prepend a hook to run first</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="n">query</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="nc">MyApp.Post</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">before_action</samp><samp class="p" data-group-id="1472439799-12">(</samp><samp class="o">&amp;</samp><samp class="n">setup_query</samp><samp class="o">/</samp><samp class="mi">1</samp><samp class="p" data-group-id="1472439799-12">)</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">before_action</samp><samp class="p" data-group-id="1472439799-13">(</samp><samp class="o">&amp;</samp><samp class="n">early_validation</samp><samp class="o">/</samp><samp class="mi">1</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">prepend?</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">true</samp><samp class="p" data-group-id="1472439799-13">)</samp></code></pre><h2 id="before_action/3-options" class="section-heading"><a href="#before_action/3-options" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Options</span></h2><ul><li><code class="inline">prepend?</code> - when <code class="inline">true</code>, places the hook before all other hooks instead of after</li></ul><h2 id="before_action/3-see-also" class="section-heading"><a href="#before_action/3-see-also" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">See also</span></h2><ul><li><a href="#after_action/2"><code class="inline">after_action/2</code></a> for hooks that run after the action completes</li><li><a href="#around_transaction/2"><code class="inline">around_transaction/2</code></a> for hooks that wrap the entire transaction</li><li><a href="Ash.xhtml#read/2"><code class="inline">Ash.read/2</code></a> for executing queries with hooks</li></ul>
  </section>
</section>
<section class="detail" id="before_transaction/3">

    <span id="before_transaction/2"></span>

  <div class="detail-header">
    <a href="#before_transaction/3" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">before_transaction(query, func, opts \\ [])</h1>


        <a href="https://github.com/ash-project/ash/blob/v3.5.33/lib/ash/query/query.ex#L1333" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> before_transaction(
  query :: <a href="#t:t/0">t</a>(),
  fun :: <a href="#t:before_transaction_fun/0">before_transaction_fun</a>(),
  opts :: <a href="https://hexdocs.pm/elixir/Keyword.html#t:t/0">Keyword.t</a>()
) :: <a href="#t:t/0">t</a>()</pre>

      </div>

<p>Adds a before_transaction hook to the query.</p><p>The before_transaction hook runs before the database transaction begins.
It receives the query and must return either a modified query or an error.</p><h2 id="before_transaction/3-examples" class="section-heading"><a href="#before_transaction/3-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="c1"># Add logging before transaction</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="n">query</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="nc">MyApp.Post</samp><samp class="w"> </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">before_transaction</samp><samp class="p" data-group-id="5163044107-1">(</samp><samp class="k" data-group-id="5163044107-2">fn</samp><samp class="w"> </samp><samp class="n">query</samp><samp class="w"> </samp><samp class="o">-&gt;</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="w">  </samp><samp class="nc">IO</samp><samp class="o">.</samp><samp class="n">puts</samp><samp class="p" data-group-id="5163044107-3">(</samp><samp class="s">&quot;Starting transaction for </samp><samp class="si" data-group-id="5163044107-4">#{</samp><samp class="n">inspect</samp><samp class="p" data-group-id="5163044107-5">(</samp><samp class="n">query</samp><samp class="o">.</samp><samp class="n">resource</samp><samp class="p" data-group-id="5163044107-5">)</samp><samp class="si" data-group-id="5163044107-4">}</samp><samp class="s">&quot;</samp><samp class="p" data-group-id="5163044107-3">)</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="w">  </samp><samp class="n">query</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="k" data-group-id="5163044107-2">end</samp><samp class="p" data-group-id="5163044107-1">)</samp></code></pre><h2 id="before_transaction/3-see-also" class="section-heading"><a href="#before_transaction/3-see-also" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">See also</span></h2><ul><li><a href="#after_transaction/2"><code class="inline">after_transaction/2</code></a> for hooks that run after the transaction</li><li><a href="#around_transaction/2"><code class="inline">around_transaction/2</code></a> for hooks that wrap the entire transaction</li><li><a href="#before_action/3"><code class="inline">before_action/3</code></a> for hooks that run before the action (inside transaction)</li></ul>
  </section>
</section>
<section class="detail" id="build/3">

    <span id="build/2"></span>

  <div class="detail-header">
    <a href="#build/3" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">build(resource, domain \\ nil, keyword)</h1>


        <a href="https://github.com/ash-project/ash/blob/v3.5.33/lib/ash/query/query.ex#L3260" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> build(<a href="Ash.Resource.xhtml#t:t/0">Ash.Resource.t</a>() | <a href="#t:t/0">t</a>(), <a href="Ash.Domain.xhtml#t:t/0">Ash.Domain.t</a>() | nil, <a href="https://hexdocs.pm/elixir/Keyword.html#t:t/0">Keyword.t</a>()) :: <a href="#t:t/0">t</a>()</pre>

      </div>

<p>Builds a query from a keyword list.</p><p>This is used by certain query constructs like aggregates. It can also be used to manipulate a data structure
before passing it to an ash query. It allows for building an entire query struct using only a keyword list.</p><p>For example:</p><pre><code class="makeup elixir" translate="no"><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">build</samp><samp class="p" data-group-id="8911429695-1">(</samp><samp class="nc">MyResource</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">filter</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="8911429695-2">[</samp><samp class="ss">name</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;fred&quot;</samp><samp class="p" data-group-id="8911429695-2">]</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">sort</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="8911429695-3">[</samp><samp class="ss">name</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="ss">:asc</samp><samp class="p" data-group-id="8911429695-3">]</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">load</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="8911429695-4">[</samp><samp class="ss">:foo</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:bar</samp><samp class="p" data-group-id="8911429695-4">]</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">offset</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">10</samp><samp class="p" data-group-id="8911429695-1">)</samp></code></pre><p>If you want to use the expression style filters, you can use <code class="inline">expr/1</code>.</p><p>For example:</p><pre><code class="makeup elixir" translate="no"><samp class="kn">import</samp><samp class="w"> </samp><samp class="nc">Ash.Expr</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">only</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="0851717095-1">[</samp><samp class="ss">expr</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">1</samp><samp class="p" data-group-id="0851717095-1">]</samp><samp class="w">

</samp><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">build</samp><samp class="p" data-group-id="0851717095-2">(</samp><samp class="nc">Myresource</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">filter</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="n">expr</samp><samp class="p" data-group-id="0851717095-3">(</samp><samp class="n">name</samp><samp class="w"> </samp><samp class="o">==</samp><samp class="w"> </samp><samp class="s">&quot;marge&quot;</samp><samp class="p" data-group-id="0851717095-3">)</samp><samp class="p" data-group-id="0851717095-2">)</samp></code></pre><h2 id="build/3-options" class="section-heading"><a href="#build/3-options" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Options</span></h2><ul><li><p><code class="inline">:filter</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">term/0</code></a>) - A filter keyword, map or expression</p></li><li><p><code class="inline">:filter_input</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">term/0</code></a>) - A filter keyword or map, provided as input from an external source</p></li><li><p><code class="inline">:sort</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">term/0</code></a>) - A sort list or keyword</p></li><li><p><code class="inline">:sort_input</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">term/0</code></a>) - A sort list or keyword, provided as input from an external source</p></li><li><p><code class="inline">:default_sort</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">term/0</code></a>) - A sort list or keyword to apply only if no other sort is specified, So if you apply any <code class="inline">sort</code>, this will be ignored.</p></li><li><p><code class="inline">:distinct_sort</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">term/0</code></a>) - A distinct_sort list or keyword</p></li><li><p><code class="inline">:limit</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#basic-types"><code class="inline">integer/0</code></a>) - A limit to apply</p></li><li><p><code class="inline">:offset</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#basic-types"><code class="inline">integer/0</code></a>) - An offset to apply</p></li><li><p><code class="inline">:load</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">term/0</code></a>) - A load statement to add to the query</p></li><li><p><code class="inline">:strict_load</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">term/0</code></a>) - A load statement to add to the query with the <code class="inline">strict?</code> option set to <code class="inline">true</code></p></li><li><p><code class="inline">:select</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">term/0</code></a>) - A select statement to add to the query</p></li><li><p><code class="inline">:ensure_selected</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">term/0</code></a>) - An ensure_selected statement to add to the query</p></li><li><p><code class="inline">:aggregate</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">term/0</code></a>) - A custom aggregate to add to the query. Can be <code class="inline">{name, type, relationship}</code> or <code class="inline">{name, type, relationship, build_opts}</code></p></li><li><p><code class="inline">:calculate</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">term/0</code></a>) - A custom calculation to add to the query. Can be <code class="inline">{name, module_and_opts}</code> or <code class="inline">{name, module_and_opts, context}</code></p></li><li><p><code class="inline">:distinct</code> (list of <a href="https://hexdocs.pm/elixir/typespecs.html#basic-types"><code class="inline">atom/0</code></a>) - A distinct clause to add to the query</p></li><li><p><code class="inline">:context</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#basic-types"><code class="inline">map/0</code></a>) - A map to merge into the query context</p></li></ul>
  </section>
</section>
<section class="detail" id="calculate/8">

    <span id="calculate/4"></span>

    <span id="calculate/5"></span>

    <span id="calculate/6"></span>

    <span id="calculate/7"></span>

  <div class="detail-header">
    <a href="#calculate/8" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">calculate(query, name, type, module_and_opts, arguments \\ %{}, constraints \\ [], extra_context \\ %{}, new_calculation_opts \\ [])</h1>


        <a href="https://github.com/ash-project/ash/blob/v3.5.33/lib/ash/query/query.ex#L3526" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> calculate(
  <a href="#t:t/0">t</a>() | <a href="Ash.Resource.xhtml#t:t/0">Ash.Resource.t</a>(),
  <a href="https://hexdocs.pm/elixir/typespecs.html#basic-types">atom</a>(),
  <a href="Ash.Type.xhtml#t:t/0">Ash.Type.t</a>(),
  <a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types">module</a>() | {<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types">module</a>(), <a href="https://hexdocs.pm/elixir/Keyword.html#t:t/0">Keyword.t</a>()},
  <a href="https://hexdocs.pm/elixir/typespecs.html#basic-types">map</a>(),
  <a href="https://hexdocs.pm/elixir/Keyword.html#t:t/0">Keyword.t</a>(),
  <a href="https://hexdocs.pm/elixir/typespecs.html#basic-types">map</a>(),
  <a href="https://hexdocs.pm/elixir/Keyword.html#t:t/0">Keyword.t</a>()
) :: <a href="#t:t/0">t</a>()</pre>

      </div>

<p>Adds a calculation to the query.</p><p>Calculations are made available on the <code class="inline">calculations</code> field of the records returned.
They allow you to compute dynamic values based on record data, other fields, or
external information at query time.</p><p>The <code class="inline">module_and_opts</code> argument accepts either a <code class="inline">module</code> or a <code class="inline">{module, opts}</code>. For more information
on what that module should look like, see <a href="Ash.Resource.Calculation.xhtml"><code class="inline">Ash.Resource.Calculation</code></a>.</p><h2 id="calculate/8-examples" class="section-heading"><a href="#calculate/8-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="c1"># Add a simple calculation</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">calculate</samp><samp class="p" data-group-id="4720164861-1">(</samp><samp class="nc">MyApp.User</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:display_name</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:string</samp><samp class="p">,</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="w">  </samp><samp class="p" data-group-id="4720164861-2">{</samp><samp class="nc">MyApp.Calculations.DisplayName</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="4720164861-3">[</samp><samp class="p" data-group-id="4720164861-3">]</samp><samp class="p" data-group-id="4720164861-2">}</samp><samp class="p" data-group-id="4720164861-1">)</samp><samp class="w">
</samp><samp class="p" data-group-id="4720164861-4">%</samp><samp class="nc" data-group-id="4720164861-4">Ash.Query</samp><samp class="p" data-group-id="4720164861-4">{</samp><samp class="ss">calculations</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="4720164861-5">%{</samp><samp class="ss">display_name</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="4720164861-6">%{</samp><samp class="n">...</samp><samp class="p" data-group-id="4720164861-6">}</samp><samp class="p" data-group-id="4720164861-5">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">...</samp><samp class="p" data-group-id="4720164861-4">}</samp><samp class="w">

</samp><samp class="c1"># Add calculation with arguments</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">calculate</samp><samp class="p" data-group-id="4720164861-7">(</samp><samp class="nc">MyApp.Post</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:word_count</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:integer</samp><samp class="p">,</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="w">  </samp><samp class="p" data-group-id="4720164861-8">{</samp><samp class="nc">MyApp.Calculations.WordCount</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="4720164861-9">[</samp><samp class="p" data-group-id="4720164861-9">]</samp><samp class="p" data-group-id="4720164861-8">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="4720164861-10">%{</samp><samp class="ss">field</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="ss">:content</samp><samp class="p" data-group-id="4720164861-10">}</samp><samp class="p" data-group-id="4720164861-7">)</samp><samp class="w">
</samp><samp class="p" data-group-id="4720164861-11">%</samp><samp class="nc" data-group-id="4720164861-11">Ash.Query</samp><samp class="p" data-group-id="4720164861-11">{</samp><samp class="ss">calculations</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="4720164861-12">%{</samp><samp class="ss">word_count</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="4720164861-13">%{</samp><samp class="n">...</samp><samp class="p" data-group-id="4720164861-13">}</samp><samp class="p" data-group-id="4720164861-12">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">...</samp><samp class="p" data-group-id="4720164861-11">}</samp><samp class="w">

</samp><samp class="c1"># Add calculation with constraints and context</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">calculate</samp><samp class="p" data-group-id="4720164861-14">(</samp><samp class="nc">MyApp.Product</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:discounted_price</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:decimal</samp><samp class="p">,</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="w">  </samp><samp class="p" data-group-id="4720164861-15">{</samp><samp class="nc">MyApp.Calculations.Discount</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="4720164861-16">[</samp><samp class="p" data-group-id="4720164861-16">]</samp><samp class="p" data-group-id="4720164861-15">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="4720164861-17">%{</samp><samp class="ss">rate</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mf">0.1</samp><samp class="p" data-group-id="4720164861-17">}</samp><samp class="p">,</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="w">  </samp><samp class="p" data-group-id="4720164861-18">[</samp><samp class="ss">precision</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">2</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">scale</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">2</samp><samp class="p" data-group-id="4720164861-18">]</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="4720164861-19">%{</samp><samp class="ss">currency</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;USD&quot;</samp><samp class="p" data-group-id="4720164861-19">}</samp><samp class="p" data-group-id="4720164861-14">)</samp><samp class="w">
</samp><samp class="p" data-group-id="4720164861-20">%</samp><samp class="nc" data-group-id="4720164861-20">Ash.Query</samp><samp class="p" data-group-id="4720164861-20">{</samp><samp class="ss">calculations</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="4720164861-21">%{</samp><samp class="ss">discounted_price</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="4720164861-22">%{</samp><samp class="n">...</samp><samp class="p" data-group-id="4720164861-22">}</samp><samp class="p" data-group-id="4720164861-21">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">...</samp><samp class="p" data-group-id="4720164861-20">}</samp></code></pre><h2 id="calculate/8-see-also" class="section-heading"><a href="#calculate/8-see-also" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">See also</span></h2><ul><li><a href="Ash.Resource.Calculation.xhtml"><code class="inline">Ash.Resource.Calculation</code></a> for implementing custom calculations</li><li><a href="#aggregate/5"><code class="inline">aggregate/5</code></a> for computing values from related records</li><li><a href="#load/3"><code class="inline">load/3</code></a> for loading predefined calculations from the resource</li><li><a href="#select/3"><code class="inline">select/3</code></a> for controlling which fields are returned alongside calculations</li></ul>
  </section>
</section>
<section class="detail" id="clear_result/1">

  <div class="detail-header">
    <a href="#clear_result/1" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">clear_result(query)</h1>


        <a href="https://github.com/ash-project/ash/blob/v3.5.33/lib/ash/query/query.ex#L2744" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> clear_result(<a href="#t:t/0">t</a>()) :: <a href="#t:t/0">t</a>()</pre>

      </div>

<p>Removes a result set previously with <a href="#set_result/2"><code class="inline">set_result/2</code></a></p>
  </section>
</section>
<section class="detail" id="combination_of/2">

  <div class="detail-header">
    <a href="#combination_of/2" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">combination_of(query, combinations)</h1>


        <a href="https://github.com/ash-project/ash/blob/v3.5.33/lib/ash/query/query.ex#L536" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> combination_of(<a href="#t:t/0">t</a>(), <a href="Ash.Query.Combination.xhtml#t:t/0">Ash.Query.Combination.t</a>() | [<a href="Ash.Query.Combination.xhtml#t:t/0">Ash.Query.Combination.t</a>()]) ::
  <a href="#t:t/0">t</a>()</pre>

      </div>

<p>Produces a query that is the combination of multiple queries.</p><p>All aspects of the parent query are applied to the combination in total.</p><p>See <a href="Ash.Query.Combination.xhtml"><code class="inline">Ash.Query.Combination</code></a> for more on creating combination queries.</p><h3 id="combination_of/2-example" class="section-heading"><a href="#combination_of/2-example" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Example</span></h3><pre><code class="makeup elixir" translate="no"><samp class="c1"># Top ten users not on a losing streak and top ten users who are not on a winning streak</samp><samp class="w">
</samp><samp class="nc">User</samp><samp class="w">
</samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">filter</samp><samp class="p" data-group-id="9025031483-1">(</samp><samp class="n">active</samp><samp class="w"> </samp><samp class="o">==</samp><samp class="w"> </samp><samp class="no">true</samp><samp class="p" data-group-id="9025031483-1">)</samp><samp class="w">
</samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">combination_of</samp><samp class="p" data-group-id="9025031483-2">(</samp><samp class="p" data-group-id="9025031483-3">[</samp><samp class="w">
  </samp><samp class="c1"># must always begin with a base combination</samp><samp class="w">
  </samp><samp class="nc">Ash.Query.Combination</samp><samp class="o">.</samp><samp class="n">base</samp><samp class="p" data-group-id="9025031483-4">(</samp><samp class="w">
    </samp><samp class="ss">sort</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="9025031483-5">[</samp><samp class="ss">score</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="ss">:desc</samp><samp class="p" data-group-id="9025031483-5">]</samp><samp class="p">,</samp><samp class="w">
    </samp><samp class="ss">filter</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="n">expr</samp><samp class="p" data-group-id="9025031483-6">(</samp><samp class="ow">not</samp><samp class="p" data-group-id="9025031483-7">(</samp><samp class="n">on_a_losing_streak</samp><samp class="p" data-group-id="9025031483-7">)</samp><samp class="p" data-group-id="9025031483-6">)</samp><samp class="p">,</samp><samp class="w">
    </samp><samp class="ss">limit</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">10</samp><samp class="w">
  </samp><samp class="p" data-group-id="9025031483-4">)</samp><samp class="p">,</samp><samp class="w">
  </samp><samp class="nc">Ash.Query.Combination</samp><samp class="o">.</samp><samp class="n">union</samp><samp class="p" data-group-id="9025031483-8">(</samp><samp class="w">
    </samp><samp class="ss">sort</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="9025031483-9">[</samp><samp class="ss">score</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="ss">:asc</samp><samp class="p" data-group-id="9025031483-9">]</samp><samp class="p">,</samp><samp class="w">
    </samp><samp class="ss">filter</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="n">expr</samp><samp class="p" data-group-id="9025031483-10">(</samp><samp class="ow">not</samp><samp class="p" data-group-id="9025031483-11">(</samp><samp class="n">on_a_winning_streak</samp><samp class="p" data-group-id="9025031483-11">)</samp><samp class="p" data-group-id="9025031483-10">)</samp><samp class="p">,</samp><samp class="w">
    </samp><samp class="ss">limit</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">10</samp><samp class="w">
  </samp><samp class="p" data-group-id="9025031483-8">)</samp><samp class="w">
</samp><samp class="p" data-group-id="9025031483-3">]</samp><samp class="p" data-group-id="9025031483-2">)</samp><samp class="w">
</samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Ash</samp><samp class="o">.</samp><samp class="n">read!</samp><samp class="p" data-group-id="9025031483-12">(</samp><samp class="p" data-group-id="9025031483-12">)</samp></code></pre><h3 id="combination_of/2-select-and-calculations" class="section-heading"><a href="#combination_of/2-select-and-calculations" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Select and calculations</span></h3><p>There is no <code class="inline">select</code> available for combinations, instead the select of the outer query
is used for each combination. However, you can use the <code class="inline">calculations</code> field in
<a href="Ash.Query.Combination.xhtml"><code class="inline">Ash.Query.Combination</code></a> to add expression calculations. Those calculations can &quot;overwrite&quot;
a selected attribute, or can introduce a new field. Note that, for SQL data layers, all
combinations will be required to have the same number of fields in their SELECT statement,
which means that if one combination adds a calculation, all of the others must also add
that calculation.</p><p>In this example, we compute separate match scores</p><pre><code class="makeup elixir" translate="no"><samp class="n">query</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="s">&quot;fred&quot;</samp><samp class="w">

</samp><samp class="nc">User</samp><samp class="w">
</samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">filter</samp><samp class="p" data-group-id="4468454068-1">(</samp><samp class="n">active</samp><samp class="w"> </samp><samp class="o">==</samp><samp class="w"> </samp><samp class="no">true</samp><samp class="p" data-group-id="4468454068-1">)</samp><samp class="w">
</samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">combination_of</samp><samp class="p" data-group-id="4468454068-2">(</samp><samp class="p" data-group-id="4468454068-3">[</samp><samp class="w">
  </samp><samp class="c1"># must always begin with a base combination</samp><samp class="w">
  </samp><samp class="nc">Ash.Query.Combination</samp><samp class="o">.</samp><samp class="n">base</samp><samp class="p" data-group-id="4468454068-4">(</samp><samp class="w">
    </samp><samp class="ss">filter</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="n">expr</samp><samp class="p" data-group-id="4468454068-5">(</samp><samp class="n">trigram_similarity</samp><samp class="p" data-group-id="4468454068-6">(</samp><samp class="n">user_name</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="o">^</samp><samp class="n">query</samp><samp class="p" data-group-id="4468454068-6">)</samp><samp class="w"> </samp><samp class="o">&gt;=</samp><samp class="w"> </samp><samp class="mf">0.5</samp><samp class="p" data-group-id="4468454068-5">)</samp><samp class="p">,</samp><samp class="w">
    </samp><samp class="ss">calculate</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="4468454068-7">%{</samp><samp class="w">
      </samp><samp class="ss">match_score</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="n">trigram_similarity</samp><samp class="p" data-group-id="4468454068-8">(</samp><samp class="n">user_name</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="o">^</samp><samp class="n">query</samp><samp class="p" data-group-id="4468454068-8">)</samp><samp class="w">
    </samp><samp class="p" data-group-id="4468454068-7">}</samp><samp class="p">,</samp><samp class="w">
    </samp><samp class="ss">sort</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="4468454068-9">[</samp><samp class="w">
      </samp><samp class="n">calc</samp><samp class="p" data-group-id="4468454068-10">(</samp><samp class="n">trigram_similarity</samp><samp class="p" data-group-id="4468454068-11">(</samp><samp class="n">user_name</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="o">^</samp><samp class="n">query</samp><samp class="p" data-group-id="4468454068-11">)</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:desc</samp><samp class="p" data-group-id="4468454068-10">)</samp><samp class="w">
    </samp><samp class="p" data-group-id="4468454068-9">]</samp><samp class="p">,</samp><samp class="w">
    </samp><samp class="ss">limit</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">10</samp><samp class="w">
  </samp><samp class="p" data-group-id="4468454068-4">)</samp><samp class="p">,</samp><samp class="w">
  </samp><samp class="nc">Ash.Query.Combination</samp><samp class="o">.</samp><samp class="n">union</samp><samp class="p" data-group-id="4468454068-12">(</samp><samp class="w">
    </samp><samp class="ss">filter</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="n">expr</samp><samp class="p" data-group-id="4468454068-13">(</samp><samp class="n">trigram_similarity</samp><samp class="p" data-group-id="4468454068-14">(</samp><samp class="n">email</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="o">^</samp><samp class="n">query</samp><samp class="p" data-group-id="4468454068-14">)</samp><samp class="w"> </samp><samp class="o">&gt;=</samp><samp class="w"> </samp><samp class="mf">0.5</samp><samp class="p" data-group-id="4468454068-13">)</samp><samp class="p">,</samp><samp class="w">
    </samp><samp class="ss">calculate</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="4468454068-15">%{</samp><samp class="w">
      </samp><samp class="ss">match_score</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="n">trigram_similarity</samp><samp class="p" data-group-id="4468454068-16">(</samp><samp class="n">email</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="o">^</samp><samp class="n">query</samp><samp class="p" data-group-id="4468454068-16">)</samp><samp class="w">
    </samp><samp class="p" data-group-id="4468454068-15">}</samp><samp class="p">,</samp><samp class="w">
    </samp><samp class="ss">sort</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="4468454068-17">[</samp><samp class="w">
      </samp><samp class="n">calc</samp><samp class="p" data-group-id="4468454068-18">(</samp><samp class="n">trigram_similarity</samp><samp class="p" data-group-id="4468454068-19">(</samp><samp class="n">email</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="o">^</samp><samp class="n">query</samp><samp class="p" data-group-id="4468454068-19">)</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:desc</samp><samp class="p" data-group-id="4468454068-18">)</samp><samp class="w">
    </samp><samp class="p" data-group-id="4468454068-17">]</samp><samp class="p">,</samp><samp class="w">
    </samp><samp class="ss">limit</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">10</samp><samp class="w">
  </samp><samp class="p" data-group-id="4468454068-12">)</samp><samp class="w">
</samp><samp class="p" data-group-id="4468454068-3">]</samp><samp class="p" data-group-id="4468454068-2">)</samp><samp class="w">
</samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Ash</samp><samp class="o">.</samp><samp class="n">read!</samp><samp class="p" data-group-id="4468454068-20">(</samp><samp class="p" data-group-id="4468454068-20">)</samp></code></pre>
  </section>
</section>
<section class="detail" id="data_layer_query/2">

    <span id="data_layer_query/1"></span>

  <div class="detail-header">
    <a href="#data_layer_query/2" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">data_layer_query(ash_query, opts \\ [])</h1>


        <a href="https://github.com/ash-project/ash/blob/v3.5.33/lib/ash/query/query.ex#L4399" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

<p>Return the underlying data layer query for an ash query</p>
  </section>
</section>
<section class="detail" id="default_sort/3">

    <span id="default_sort/2"></span>

  <div class="detail-header">
    <a href="#default_sort/3" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">default_sort(query, sorts, opts \\ [])</h1>


        <a href="https://github.com/ash-project/ash/blob/v3.5.33/lib/ash/query/query.ex#L3609" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> default_sort(<a href="#t:t/0">t</a>() | <a href="Ash.Resource.xhtml#t:t/0">Ash.Resource.t</a>(), <a href="Ash.Sort.xhtml#t:t/0">Ash.Sort.t</a>(), opts :: <a href="https://hexdocs.pm/elixir/Keyword.html#t:t/0">Keyword.t</a>()) :: <a href="#t:t/0">t</a>()</pre>

      </div>

<p>Apply a sort only if no sort has been specified yet.</p><p>This is useful for providing default sorts that can be overridden.</p><h2 id="default_sort/3-examples" class="section-heading"><a href="#default_sort/3-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="c1"># This will sort by name if no sort has been specified</samp><samp class="w">
</samp><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">default_sort</samp><samp class="p" data-group-id="7349939713-1">(</samp><samp class="n">query</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:name</samp><samp class="p" data-group-id="7349939713-1">)</samp><samp class="w">

</samp><samp class="c1"># This will sort by name descending if no sort has been specified</samp><samp class="w">
</samp><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">default_sort</samp><samp class="p" data-group-id="7349939713-2">(</samp><samp class="n">query</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">name</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="ss">:desc</samp><samp class="p" data-group-id="7349939713-2">)</samp></code></pre>
  </section>
</section>
<section class="detail" id="delete_argument/2">

  <div class="detail-header">
    <a href="#delete_argument/2" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">delete_argument(query, argument_or_arguments)</h1>


        <a href="https://github.com/ash-project/ash/blob/v3.5.33/lib/ash/query/query.ex#L2967" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

<p>Remove an argument from the query</p>
  </section>
</section>
<section class="detail" id="deselect/2">

  <div class="detail-header">
    <a href="#deselect/2" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">deselect(query, fields)</h1>


        <a href="https://github.com/ash-project/ash/blob/v3.5.33/lib/ash/query/query.ex#L1911" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> deselect(<a href="#t:t/0">t</a>() | <a href="Ash.Resource.xhtml#t:t/0">Ash.Resource.t</a>(), [<a href="https://hexdocs.pm/elixir/typespecs.html#basic-types">atom</a>()]) :: <a href="#t:t/0">t</a>()</pre>

      </div>

<p>Ensures that the specified attributes are <code class="inline">nil</code> in the query results.</p><p>This function removes specified fields from the selection, causing them to be
excluded from the query results. If no fields are currently selected (meaning
all fields would be returned by default), this will first select all default
fields and then remove the specified ones.</p><h2 id="deselect/2-examples" class="section-heading"><a href="#deselect/2-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="c1"># Remove specific fields from results</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">MyApp.Post</samp><samp class="w"> </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">deselect</samp><samp class="p" data-group-id="6494348257-1">(</samp><samp class="p" data-group-id="6494348257-2">[</samp><samp class="ss">:content</samp><samp class="p" data-group-id="6494348257-2">]</samp><samp class="p" data-group-id="6494348257-1">)</samp><samp class="w">
</samp><samp class="p" data-group-id="6494348257-3">%</samp><samp class="nc" data-group-id="6494348257-3">Ash.Query</samp><samp class="p" data-group-id="6494348257-3">{</samp><samp class="ss">select</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="6494348257-4">[</samp><samp class="ss">:id</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:title</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:created_at</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">...</samp><samp class="p" data-group-id="6494348257-4">]</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">...</samp><samp class="p" data-group-id="6494348257-3">}</samp><samp class="w">

</samp><samp class="c1"># Remove multiple fields</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">MyApp.Post</samp><samp class="w"> </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">deselect</samp><samp class="p" data-group-id="6494348257-5">(</samp><samp class="p" data-group-id="6494348257-6">[</samp><samp class="ss">:content</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:metadata</samp><samp class="p" data-group-id="6494348257-6">]</samp><samp class="p" data-group-id="6494348257-5">)</samp><samp class="w">
</samp><samp class="p" data-group-id="6494348257-7">%</samp><samp class="nc" data-group-id="6494348257-7">Ash.Query</samp><samp class="p" data-group-id="6494348257-7">{</samp><samp class="ss">select</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="6494348257-8">[</samp><samp class="ss">:id</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:title</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:created_at</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">...</samp><samp class="p" data-group-id="6494348257-8">]</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">...</samp><samp class="p" data-group-id="6494348257-7">}</samp><samp class="w">

</samp><samp class="c1"># Deselect from existing selection</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">MyApp.Post</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">select</samp><samp class="p" data-group-id="6494348257-9">(</samp><samp class="p" data-group-id="6494348257-10">[</samp><samp class="ss">:title</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:content</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:author_id</samp><samp class="p" data-group-id="6494348257-10">]</samp><samp class="p" data-group-id="6494348257-9">)</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">deselect</samp><samp class="p" data-group-id="6494348257-11">(</samp><samp class="p" data-group-id="6494348257-12">[</samp><samp class="ss">:content</samp><samp class="p" data-group-id="6494348257-12">]</samp><samp class="p" data-group-id="6494348257-11">)</samp><samp class="w">
</samp><samp class="p" data-group-id="6494348257-13">%</samp><samp class="nc" data-group-id="6494348257-13">Ash.Query</samp><samp class="p" data-group-id="6494348257-13">{</samp><samp class="ss">select</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="6494348257-14">[</samp><samp class="ss">:id</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:title</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:author_id</samp><samp class="p" data-group-id="6494348257-14">]</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">...</samp><samp class="p" data-group-id="6494348257-13">}</samp><samp class="w">

</samp><samp class="c1"># Deselect empty list (no-op)</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">MyApp.Post</samp><samp class="w"> </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">deselect</samp><samp class="p" data-group-id="6494348257-15">(</samp><samp class="p" data-group-id="6494348257-16">[</samp><samp class="p" data-group-id="6494348257-16">]</samp><samp class="p" data-group-id="6494348257-15">)</samp><samp class="w">
</samp><samp class="p" data-group-id="6494348257-17">%</samp><samp class="nc" data-group-id="6494348257-17">Ash.Query</samp><samp class="p" data-group-id="6494348257-17">{</samp><samp class="n">...</samp><samp class="p" data-group-id="6494348257-17">}</samp></code></pre><h2 id="deselect/2-see-also" class="section-heading"><a href="#deselect/2-see-also" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">See also</span></h2><ul><li><a href="#select/3"><code class="inline">select/3</code></a> for explicitly controlling field selection</li><li><a href="#ensure_selected/2"><code class="inline">ensure_selected/2</code></a> for adding fields without removing others</li><li>Primary key fields cannot be deselected and will always be included</li></ul>
  </section>
</section>
<section class="detail" id="distinct/2">

  <div class="detail-header">
    <a href="#distinct/2" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">distinct(query, distincts)</h1>


        <a href="https://github.com/ash-project/ash/blob/v3.5.33/lib/ash/query/query.ex#L4192" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> distinct(<a href="#t:t/0">t</a>() | <a href="Ash.Resource.xhtml#t:t/0">Ash.Resource.t</a>(), <a href="Ash.Sort.xhtml#t:t/0">Ash.Sort.t</a>()) :: <a href="#t:t/0">t</a>()</pre>

      </div>

<p>Get results distinct on the provided fields.</p><p>Takes a list of fields to distinct on. Each call is additive, so to remove the <code class="inline">distinct</code> use
<a href="#unset/2"><code class="inline">unset/2</code></a>.</p><p>Examples:</p><pre><code class="makeup elixir" translate="no"><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">distinct</samp><samp class="p" data-group-id="1458173657-1">(</samp><samp class="n">query</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="1458173657-2">[</samp><samp class="ss">:first_name</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:last_name</samp><samp class="p" data-group-id="1458173657-2">]</samp><samp class="p" data-group-id="1458173657-1">)</samp><samp class="w">

</samp><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">distinct</samp><samp class="p" data-group-id="1458173657-3">(</samp><samp class="n">query</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:email</samp><samp class="p" data-group-id="1458173657-3">)</samp></code></pre>
  </section>
</section>
<section class="detail" id="distinct_sort/3">

    <span id="distinct_sort/2"></span>

  <div class="detail-header">
    <a href="#distinct_sort/3" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">distinct_sort(query, sorts, opts \\ [])</h1>


        <a href="https://github.com/ash-project/ash/blob/v3.5.33/lib/ash/query/query.ex#L4219" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

<p>Set a sort to determine how distinct records are selected.</p><p>If none is set, any sort applied to the query will be used.</p><p>This is useful if you want to control how the <code class="inline">distinct</code> records
are selected without affecting (necessarily, it may affect it if
there is no sort applied) the overall sort of the query</p>
  </section>
</section>
<section class="detail" id="ensure_selected/2">

  <div class="detail-header">
    <a href="#ensure_selected/2" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">ensure_selected(query, fields)</h1>


        <a href="https://github.com/ash-project/ash/blob/v3.5.33/lib/ash/query/query.ex#L1839" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> ensure_selected(<a href="#t:t/0">t</a>() | <a href="Ash.Resource.xhtml#t:t/0">Ash.Resource.t</a>(), [<a href="https://hexdocs.pm/elixir/typespecs.html#basic-types">atom</a>()] | <a href="https://hexdocs.pm/elixir/typespecs.html#basic-types">atom</a>()) :: <a href="#t:t/0">t</a>()</pre>

      </div>

<p>Ensures that the given attributes are selected.</p><p>The first call to <a href="#select/2"><code class="inline">select/2</code></a> will <em>limit</em> the fields to only the provided fields.
Use <a href="#ensure_selected/2"><code class="inline">ensure_selected/2</code></a> to say &quot;select this field (or these fields) without deselecting anything else&quot;.
This function is additive - it will not remove any fields that are already selected.</p><h2 id="ensure_selected/2-examples" class="section-heading"><a href="#ensure_selected/2-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="c1"># Ensure specific fields are selected (additive)</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">MyApp.Post</samp><samp class="w"> </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">ensure_selected</samp><samp class="p" data-group-id="8563891529-1">(</samp><samp class="p" data-group-id="8563891529-2">[</samp><samp class="ss">:title</samp><samp class="p" data-group-id="8563891529-2">]</samp><samp class="p" data-group-id="8563891529-1">)</samp><samp class="w">
</samp><samp class="p" data-group-id="8563891529-3">%</samp><samp class="nc" data-group-id="8563891529-3">Ash.Query</samp><samp class="p" data-group-id="8563891529-3">{</samp><samp class="ss">select</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="8563891529-4">[</samp><samp class="ss">:id</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:title</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:content</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:created_at</samp><samp class="p" data-group-id="8563891529-4">]</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">...</samp><samp class="p" data-group-id="8563891529-3">}</samp><samp class="w">

</samp><samp class="c1"># Add to existing selection</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">MyApp.Post</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">select</samp><samp class="p" data-group-id="8563891529-5">(</samp><samp class="p" data-group-id="8563891529-6">[</samp><samp class="ss">:title</samp><samp class="p" data-group-id="8563891529-6">]</samp><samp class="p" data-group-id="8563891529-5">)</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">ensure_selected</samp><samp class="p" data-group-id="8563891529-7">(</samp><samp class="p" data-group-id="8563891529-8">[</samp><samp class="ss">:content</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:author_id</samp><samp class="p" data-group-id="8563891529-8">]</samp><samp class="p" data-group-id="8563891529-7">)</samp><samp class="w">
</samp><samp class="p" data-group-id="8563891529-9">%</samp><samp class="nc" data-group-id="8563891529-9">Ash.Query</samp><samp class="p" data-group-id="8563891529-9">{</samp><samp class="ss">select</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="8563891529-10">[</samp><samp class="ss">:id</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:title</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:content</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:author_id</samp><samp class="p" data-group-id="8563891529-10">]</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">...</samp><samp class="p" data-group-id="8563891529-9">}</samp><samp class="w">

</samp><samp class="c1"># Ensure fields for relationship loading</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">MyApp.Post</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">ensure_selected</samp><samp class="p" data-group-id="8563891529-11">(</samp><samp class="p" data-group-id="8563891529-12">[</samp><samp class="ss">:author_id</samp><samp class="p" data-group-id="8563891529-12">]</samp><samp class="p" data-group-id="8563891529-11">)</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">load</samp><samp class="p" data-group-id="8563891529-13">(</samp><samp class="ss">:author</samp><samp class="p" data-group-id="8563891529-13">)</samp><samp class="w">
</samp><samp class="p" data-group-id="8563891529-14">%</samp><samp class="nc" data-group-id="8563891529-14">Ash.Query</samp><samp class="p" data-group-id="8563891529-14">{</samp><samp class="ss">select</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="8563891529-15">[</samp><samp class="n">...</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:author_id</samp><samp class="p" data-group-id="8563891529-15">]</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">load</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="8563891529-16">[</samp><samp class="ss">author</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="8563891529-17">[</samp><samp class="p" data-group-id="8563891529-17">]</samp><samp class="p" data-group-id="8563891529-16">]</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">...</samp><samp class="p" data-group-id="8563891529-14">}</samp></code></pre><h2 id="ensure_selected/2-see-also" class="section-heading"><a href="#ensure_selected/2-see-also" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">See also</span></h2><ul><li><a href="#select/3"><code class="inline">select/3</code></a> for explicitly controlling field selection</li><li><a href="#deselect/2"><code class="inline">deselect/2</code></a> for removing specific fields from selection</li><li><a href="#load/3"><code class="inline">load/3</code></a> for loading relationships that may require specific fields</li></ul>
  </section>
</section>
<section class="detail" id="equivalent_to/2">

  <div class="detail-header">
    <a href="#equivalent_to/2" class="detail-link" data-no-tooltip="" aria-label="Link to this macro">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">equivalent_to(query, expr)</h1>

        <span class="note">(macro)</span>


        <a href="https://github.com/ash-project/ash/blob/v3.5.33/lib/ash/query/query.ex#L1685" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

<p>Determines if the filter statement of a query is equivalent to the provided expression.</p><p>This uses the satisfiability solver that is used when solving for policy authorizations. In complex scenarios, or when using
custom database expressions, (like fragments in ash_postgres), this function may return <code class="inline">:maybe</code>. Use <code class="inline">supserset_of?</code> to always return
a boolean.</p>
  </section>
</section>
<section class="detail" id="equivalent_to?/2">

  <div class="detail-header">
    <a href="#equivalent_to?/2" class="detail-link" data-no-tooltip="" aria-label="Link to this macro">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">equivalent_to?(query, expr)</h1>

        <span class="note">(macro)</span>


        <a href="https://github.com/ash-project/ash/blob/v3.5.33/lib/ash/query/query.ex#L1708" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

<p>Same as <a href="#equivalent_to/2"><code class="inline">equivalent_to/2</code></a> but always returns a boolean. <code class="inline">:maybe</code> returns <code class="inline">false</code>.</p>
  </section>
</section>
<section class="detail" id="fetch_argument/2">

  <div class="detail-header">
    <a href="#fetch_argument/2" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">fetch_argument(query, argument)</h1>


        <a href="https://github.com/ash-project/ash/blob/v3.5.33/lib/ash/query/query.ex#L2838" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> fetch_argument(<a href="#t:t/0">t</a>(), <a href="https://hexdocs.pm/elixir/typespecs.html#basic-types">atom</a>() | <a href="https://hexdocs.pm/elixir/String.html#t:t/0">String.t</a>()) :: {:ok, <a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types">term</a>()} | :error</pre>

      </div>

<p>Fetches the value of an argument provided to the query.</p><p>Returns <code class="inline">{:ok, value}</code> if the argument exists, or <code class="inline">:error</code> if not found.
This is the safer alternative to <a href="#get_argument/2"><code class="inline">get_argument/2</code></a> when you need to distinguish
between a <code class="inline">nil</code> value and a missing argument.</p><h2 id="fetch_argument/2-examples" class="section-heading"><a href="#fetch_argument/2-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="c1"># Fetch an argument that exists</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="n">query</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">for_read</samp><samp class="p" data-group-id="7246815046-1">(</samp><samp class="nc">MyApp.Post</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:published</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="7246815046-2">%{</samp><samp class="ss">since</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="ld">~D[2023-01-01]</samp><samp class="p" data-group-id="7246815046-2">}</samp><samp class="p" data-group-id="7246815046-1">)</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">fetch_argument</samp><samp class="p" data-group-id="7246815046-3">(</samp><samp class="n">query</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:since</samp><samp class="p" data-group-id="7246815046-3">)</samp><samp class="w">
</samp><samp class="p" data-group-id="7246815046-4">{</samp><samp class="ss">:ok</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ld">~D[2023-01-01]</samp><samp class="p" data-group-id="7246815046-4">}</samp><samp class="w">

</samp><samp class="c1"># Fetch an argument that doesn&#39;t exist</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="n">query</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">for_read</samp><samp class="p" data-group-id="7246815046-5">(</samp><samp class="nc">MyApp.Post</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:published</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="7246815046-6">%{</samp><samp class="p" data-group-id="7246815046-6">}</samp><samp class="p" data-group-id="7246815046-5">)</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">fetch_argument</samp><samp class="p" data-group-id="7246815046-7">(</samp><samp class="n">query</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:since</samp><samp class="p" data-group-id="7246815046-7">)</samp><samp class="w">
</samp><samp class="ss">:error</samp><samp class="w">

</samp><samp class="c1"># Distinguish between nil and missing arguments</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="n">query</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">for_read</samp><samp class="p" data-group-id="7246815046-8">(</samp><samp class="nc">MyApp.Post</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:search</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="7246815046-9">%{</samp><samp class="ss">query</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">nil</samp><samp class="p" data-group-id="7246815046-9">}</samp><samp class="p" data-group-id="7246815046-8">)</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">fetch_argument</samp><samp class="p" data-group-id="7246815046-10">(</samp><samp class="n">query</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:query</samp><samp class="p" data-group-id="7246815046-10">)</samp><samp class="w">
</samp><samp class="p" data-group-id="7246815046-11">{</samp><samp class="ss">:ok</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="no">nil</samp><samp class="p" data-group-id="7246815046-11">}</samp></code></pre><h2 id="fetch_argument/2-see-also" class="section-heading"><a href="#fetch_argument/2-see-also" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">See also</span></h2><ul><li><a href="#get_argument/2"><code class="inline">get_argument/2</code></a> for simpler argument access</li><li><a href="#set_argument/3"><code class="inline">set_argument/3</code></a> for adding arguments to queries</li><li><a href="#for_read/4"><code class="inline">for_read/4</code></a> for creating queries with arguments</li></ul>
  </section>
</section>
<section class="detail" id="filter/2">

  <div class="detail-header">
    <a href="#filter/2" class="detail-link" data-no-tooltip="" aria-label="Link to this macro">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">filter(query, filter)</h1>

        <span class="note">(macro)</span>


        <a href="https://github.com/ash-project/ash/blob/v3.5.33/lib/ash/query/query.ex#L658" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

<p>Attach a filter statement to the query.</p><p>The filter is applied as an &quot;and&quot; to any filters currently on the query.
Filters allow you to specify conditions that records must meet to be included
in the query results. Multiple filters on the same query are combined with &quot;and&quot; logic.</p><h2 id="filter/2-examples" class="section-heading"><a href="#filter/2-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="c1"># Filter with simple equality</samp><samp class="w">
</samp><samp class="nc">MyApp.Post</samp><samp class="w">
</samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">filter</samp><samp class="p" data-group-id="6534657960-1">(</samp><samp class="ss">published</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">true</samp><samp class="p" data-group-id="6534657960-1">)</samp><samp class="w">

</samp><samp class="c1"># Filter with comparison operators</samp><samp class="w">
</samp><samp class="nc">MyApp.Post</samp><samp class="w">
</samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">filter</samp><samp class="p" data-group-id="6534657960-2">(</samp><samp class="n">view_count</samp><samp class="w"> </samp><samp class="o">&gt;</samp><samp class="w"> </samp><samp class="mi">100</samp><samp class="p" data-group-id="6534657960-2">)</samp><samp class="w">

</samp><samp class="c1"># Filter with complex expressions using do block</samp><samp class="w">
</samp><samp class="nc">MyApp.Post</samp><samp class="w">
</samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">filter</samp><samp class="w"> </samp><samp class="k" data-group-id="6534657960-3">do</samp><samp class="w">
  </samp><samp class="n">published</samp><samp class="w"> </samp><samp class="o">==</samp><samp class="w"> </samp><samp class="no">true</samp><samp class="w"> </samp><samp class="ow">and</samp><samp class="w"> </samp><samp class="n">view_count</samp><samp class="w"> </samp><samp class="o">&gt;</samp><samp class="w"> </samp><samp class="mi">100</samp><samp class="w">
</samp><samp class="k" data-group-id="6534657960-3">end</samp></code></pre><h2 id="filter/2-see-also" class="section-heading"><a href="#filter/2-see-also" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">See also</span></h2><ul><li><a href="Ash.Filter.xhtml"><code class="inline">Ash.Filter</code></a> for comprehensive filter documentation</li><li><a href="#sort/3"><code class="inline">sort/3</code></a> for ordering query results</li><li><a href="Ash.xhtml#read/2"><code class="inline">Ash.read/2</code></a> for executing filtered queries</li></ul>
  </section>
</section>
<section class="detail" id="filter_input/2">

  <div class="detail-header">
    <a href="#filter_input/2" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">filter_input(query, filter)</h1>


        <a href="https://github.com/ash-project/ash/blob/v3.5.33/lib/ash/query/query.ex#L451" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

<p>Attach a filter statement to the query labelled as user input.</p><p>Filters added as user input (or filters constructed with <code class="inline">Ash.Filter.parse_input</code>)
will honor any field policies on resources by replacing any references to the field
with <code class="inline">nil</code> in cases where the actor should not be able to see the given field.</p><p>This function does not expect the expression style filter (because an external source
could never reasonably provide that). Instead, use the keyword/map style syntax. For
example:</p><p><code class="inline">expr(name == &quot;fred&quot;)</code></p><p>could be any of</p><ul><li>map syntax: <code class="inline">%{&quot;name&quot; =&gt; %{&quot;eq&quot; =&gt; &quot;fred&quot;}}</code></li><li>keyword syntax: <code class="inline">[name: [eq: &quot;fred&quot;]]</code></li></ul><p>See <a href="Ash.Filter.xhtml"><code class="inline">Ash.Filter</code></a> for more.</p>
  </section>
</section>
<section class="detail" id="for_read/4">

    <span id="for_read/2"></span>

    <span id="for_read/3"></span>

  <div class="detail-header">
    <a href="#for_read/4" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">for_read(query, action_name, args \\ %{}, opts \\ [])</h1>


        <a href="https://github.com/ash-project/ash/blob/v3.5.33/lib/ash/query/query.ex#L859" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> for_read(<a href="#t:t/0">t</a>() | <a href="Ash.Resource.xhtml#t:t/0">Ash.Resource.t</a>(), <a href="https://hexdocs.pm/elixir/typespecs.html#basic-types">atom</a>(), <a href="https://hexdocs.pm/elixir/typespecs.html#basic-types">map</a>() | <a href="https://hexdocs.pm/elixir/Keyword.html#t:t/0">Keyword.t</a>(), <a href="https://hexdocs.pm/elixir/Keyword.html#t:t/0">Keyword.t</a>()) ::
  <a href="#t:t/0">t</a>()</pre>

      </div>

<p>Creates a query for a given read action and prepares it.</p><p>This function configures the query to use a specific read action with the provided
arguments and options. The query will be validated and prepared according to the
action's configuration, including applying preparations and action filters.</p><p>Multitenancy is <em>not</em> validated until an action is called. This allows you to avoid
specifying a tenant until just before calling the domain action.</p><h2 id="for_read/4-examples" class="section-heading"><a href="#for_read/4-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="c1"># Create a query for a simple read action</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">for_read</samp><samp class="p" data-group-id="6635655072-1">(</samp><samp class="nc">MyApp.Post</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:read</samp><samp class="p" data-group-id="6635655072-1">)</samp><samp class="w">
</samp><samp class="p" data-group-id="6635655072-2">%</samp><samp class="nc" data-group-id="6635655072-2">Ash.Query</samp><samp class="p" data-group-id="6635655072-2">{</samp><samp class="ss">action</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="6635655072-3">%{</samp><samp class="ss">name</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="ss">:read</samp><samp class="p" data-group-id="6635655072-3">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">...</samp><samp class="p" data-group-id="6635655072-2">}</samp><samp class="w">

</samp><samp class="c1"># Create a query with arguments for a parameterized action</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">for_read</samp><samp class="p" data-group-id="6635655072-4">(</samp><samp class="nc">MyApp.Post</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:published</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="6635655072-5">%{</samp><samp class="ss">since</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="ld">~D[2023-01-01]</samp><samp class="p" data-group-id="6635655072-5">}</samp><samp class="p" data-group-id="6635655072-4">)</samp><samp class="w">
</samp><samp class="p" data-group-id="6635655072-6">%</samp><samp class="nc" data-group-id="6635655072-6">Ash.Query</samp><samp class="p" data-group-id="6635655072-6">{</samp><samp class="ss">action</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="6635655072-7">%{</samp><samp class="ss">name</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="ss">:published</samp><samp class="p" data-group-id="6635655072-7">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">arguments</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="6635655072-8">%{</samp><samp class="ss">since</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="ld">~D[2023-01-01]</samp><samp class="p" data-group-id="6635655072-8">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">...</samp><samp class="p" data-group-id="6635655072-6">}</samp><samp class="w">

</samp><samp class="c1"># Create a query with options</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">for_read</samp><samp class="p" data-group-id="6635655072-9">(</samp><samp class="nc">MyApp.Post</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:read</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="6635655072-10">%{</samp><samp class="p" data-group-id="6635655072-10">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">actor</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="n">current_user</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">authorize?</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">true</samp><samp class="p" data-group-id="6635655072-9">)</samp><samp class="w">
</samp><samp class="p" data-group-id="6635655072-11">%</samp><samp class="nc" data-group-id="6635655072-11">Ash.Query</samp><samp class="p" data-group-id="6635655072-11">{</samp><samp class="ss">action</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="6635655072-12">%{</samp><samp class="ss">name</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="ss">:read</samp><samp class="p" data-group-id="6635655072-12">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">...</samp><samp class="p" data-group-id="6635655072-11">}</samp></code></pre><h2 id="for_read/4-options" class="section-heading"><a href="#for_read/4-options" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Options</span></h2><ul><li><p><code class="inline">:actor</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">term/0</code></a>) - set the actor, which can be used in any <a href="Ash.Resource.Change.xhtml"><code class="inline">Ash.Resource.Change</code></a>s configured on the action. (in the <code class="inline">context</code> argument)</p></li><li><p><code class="inline">:scope</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">term/0</code></a>) - A value that implements the <a href="Ash.Scope.ToOpts.xhtml"><code class="inline">Ash.Scope.ToOpts</code></a> protocol, for passing around actor/tenant/context in a single value. See <a href="Ash.Scope.ToOpts.xhtml"><code class="inline">Ash.Scope.ToOpts</code></a> for more.</p></li><li><p><code class="inline">:authorize?</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">boolean/0</code></a>) - set authorize?, which can be used in any <a href="Ash.Resource.Change.xhtml"><code class="inline">Ash.Resource.Change</code></a>s configured on the action. (in the <code class="inline">context</code> argument)</p></li><li><p><code class="inline">:tracer</code> (one or a list of module that adopts <a href="Ash.Tracer.xhtml"><code class="inline">Ash.Tracer</code></a>) - A tracer to use. Will be carried over to the action. For more information see <a href="Ash.Tracer.xhtml"><code class="inline">Ash.Tracer</code></a>.</p></li><li><p><code class="inline">:tenant</code> (value that implements the <a href="Ash.ToTenant.xhtml"><code class="inline">Ash.ToTenant</code></a> protocol) - set the tenant on the query</p></li><li><p><code class="inline">:load</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">term/0</code></a>) - A load statement to apply to the query</p></li><li><p><code class="inline">:skip_unknown_inputs</code> - A list of inputs that, if provided, will be ignored if they are not recognized by the action. Use <code class="inline">:*</code> to indicate all unknown keys.</p></li><li><p><code class="inline">:context</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#basic-types"><code class="inline">map/0</code></a>) - A map of context to set on the query. This will be merged with any context set on the query itself.</p></li></ul><h2 id="for_read/4-see-also" class="section-heading"><a href="#for_read/4-see-also" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">See also</span></h2><ul><li><a href="Ash.xhtml#read/2"><code class="inline">Ash.read/2</code></a> for executing the prepared query</li><li><a href="#new/2"><code class="inline">new/2</code></a> for creating basic queries without specific actions</li><li><a href="#load/3"><code class="inline">load/3</code></a> for adding relationship loading to queries</li><li><code class="inline">d:Ash.Resource.Dsl.actions.read</code> for defining read actions</li><li><a href="read-actions.xhtml">Read Actions Guide</a> for understanding read operations</li><li><a href="actions.xhtml">Actions Guide</a> for general action concepts</li></ul>
  </section>
</section>
<section class="detail" id="get_argument/2">

  <div class="detail-header">
    <a href="#get_argument/2" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">get_argument(query, argument)</h1>


        <a href="https://github.com/ash-project/ash/blob/v3.5.33/lib/ash/query/query.ex#L2800" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> get_argument(<a href="#t:t/0">t</a>(), <a href="https://hexdocs.pm/elixir/typespecs.html#basic-types">atom</a>() | <a href="https://hexdocs.pm/elixir/String.html#t:t/0">String.t</a>()) :: <a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types">term</a>()</pre>

      </div>

<p>Gets the value of an argument provided to the query.</p><p>Returns the argument value if found, or <code class="inline">nil</code> if not found. Arguments can be
provided when creating queries with <a href="#for_read/4"><code class="inline">for_read/4</code></a> and are used by action logic
such as preparations and filters.</p><h2 id="get_argument/2-examples" class="section-heading"><a href="#get_argument/2-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="c1"># Get an argument that exists</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="n">query</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">for_read</samp><samp class="p" data-group-id="0747793816-1">(</samp><samp class="nc">MyApp.Post</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:published</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="0747793816-2">%{</samp><samp class="ss">since</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="ld">~D[2023-01-01]</samp><samp class="p" data-group-id="0747793816-2">}</samp><samp class="p" data-group-id="0747793816-1">)</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">get_argument</samp><samp class="p" data-group-id="0747793816-3">(</samp><samp class="n">query</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:since</samp><samp class="p" data-group-id="0747793816-3">)</samp><samp class="w">
</samp><samp class="ld">~D[2023-01-01]</samp><samp class="w">

</samp><samp class="c1"># Get an argument that doesn&#39;t exist</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="n">query</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">for_read</samp><samp class="p" data-group-id="0747793816-4">(</samp><samp class="nc">MyApp.Post</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:published</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="0747793816-5">%{</samp><samp class="p" data-group-id="0747793816-5">}</samp><samp class="p" data-group-id="0747793816-4">)</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">get_argument</samp><samp class="p" data-group-id="0747793816-6">(</samp><samp class="n">query</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:since</samp><samp class="p" data-group-id="0747793816-6">)</samp><samp class="w">
</samp><samp class="no">nil</samp><samp class="w">

</samp><samp class="c1"># Arguments can be accessed by string or atom key</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="n">query</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">for_read</samp><samp class="p" data-group-id="0747793816-7">(</samp><samp class="nc">MyApp.Post</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:search</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="0747793816-8">%{</samp><samp class="s">&quot;query&quot;</samp><samp class="w"> </samp><samp class="p">=&gt;</samp><samp class="w"> </samp><samp class="s">&quot;elixir&quot;</samp><samp class="p" data-group-id="0747793816-8">}</samp><samp class="p" data-group-id="0747793816-7">)</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">get_argument</samp><samp class="p" data-group-id="0747793816-9">(</samp><samp class="n">query</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:query</samp><samp class="p" data-group-id="0747793816-9">)</samp><samp class="w">
</samp><samp class="s">&quot;elixir&quot;</samp></code></pre><h2 id="get_argument/2-see-also" class="section-heading"><a href="#get_argument/2-see-also" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">See also</span></h2><ul><li><a href="#fetch_argument/2"><code class="inline">fetch_argument/2</code></a> for safer argument access with explicit error handling</li><li><a href="#set_argument/3"><code class="inline">set_argument/3</code></a> for adding arguments to queries</li><li><a href="#for_read/4"><code class="inline">for_read/4</code></a> for creating queries with arguments</li></ul>
  </section>
</section>
<section class="detail" id="limit/2">

  <div class="detail-header">
    <a href="#limit/2" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">limit(query, limit)</h1>


        <a href="https://github.com/ash-project/ash/blob/v3.5.33/lib/ash/query/query.ex#L3680" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> limit(<a href="#t:t/0">t</a>() | <a href="Ash.Resource.xhtml#t:t/0">Ash.Resource.t</a>(), nil | <a href="https://hexdocs.pm/elixir/typespecs.html#basic-types">integer</a>()) :: <a href="#t:t/0">t</a>()</pre>

      </div>

<p>Limits the number of results returned from the query.</p><p>This function sets the maximum number of records that will be returned
when the query is executed. Useful for pagination and preventing
large result sets from consuming too much memory.</p><h2 id="limit/2-examples" class="section-heading"><a href="#limit/2-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="c1"># Limit to 10 results</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">MyApp.Post</samp><samp class="w"> </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">limit</samp><samp class="p" data-group-id="2711120853-1">(</samp><samp class="mi">10</samp><samp class="p" data-group-id="2711120853-1">)</samp><samp class="w">
</samp><samp class="p" data-group-id="2711120853-2">%</samp><samp class="nc" data-group-id="2711120853-2">Ash.Query</samp><samp class="p" data-group-id="2711120853-2">{</samp><samp class="ss">limit</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">10</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">...</samp><samp class="p" data-group-id="2711120853-2">}</samp><samp class="w">

</samp><samp class="c1"># Remove existing limit</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="n">query</samp><samp class="w"> </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">limit</samp><samp class="p" data-group-id="2711120853-3">(</samp><samp class="no">nil</samp><samp class="p" data-group-id="2711120853-3">)</samp><samp class="w">
</samp><samp class="p" data-group-id="2711120853-4">%</samp><samp class="nc" data-group-id="2711120853-4">Ash.Query</samp><samp class="p" data-group-id="2711120853-4">{</samp><samp class="ss">limit</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">nil</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">...</samp><samp class="p" data-group-id="2711120853-4">}</samp><samp class="w">

</samp><samp class="c1"># Use with other query functions</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">MyApp.Post</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">filter</samp><samp class="p" data-group-id="2711120853-5">(</samp><samp class="ss">published</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">true</samp><samp class="p" data-group-id="2711120853-5">)</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">sort</samp><samp class="p" data-group-id="2711120853-6">(</samp><samp class="ss">:created_at</samp><samp class="p" data-group-id="2711120853-6">)</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">limit</samp><samp class="p" data-group-id="2711120853-7">(</samp><samp class="mi">5</samp><samp class="p" data-group-id="2711120853-7">)</samp><samp class="w">
</samp><samp class="p" data-group-id="2711120853-8">%</samp><samp class="nc" data-group-id="2711120853-8">Ash.Query</samp><samp class="p" data-group-id="2711120853-8">{</samp><samp class="ss">limit</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">5</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">...</samp><samp class="p" data-group-id="2711120853-8">}</samp></code></pre><h2 id="limit/2-see-also" class="section-heading"><a href="#limit/2-see-also" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">See also</span></h2><ul><li><a href="#offset/2"><code class="inline">offset/2</code></a> for skipping records (pagination)</li><li><a href="#page/2"><code class="inline">page/2</code></a> for keyset pagination</li><li><a href="#sort/3"><code class="inline">sort/3</code></a> for ordering results before limiting</li></ul>
  </section>
</section>
<section class="detail" id="load/3">

    <span id="load/2"></span>

  <div class="detail-header">
    <a href="#load/3" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">load(query, load_statement, opts \\ [])</h1>


        <a href="https://github.com/ash-project/ash/blob/v3.5.33/lib/ash/query/query.ex#L2187" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> load(
  <a href="#t:t/0">t</a>() | <a href="Ash.Resource.xhtml#t:t/0">Ash.Resource.t</a>(),
  <a href="https://hexdocs.pm/elixir/typespecs.html#basic-types">atom</a>()
  | <a href="Ash.Query.Calculation.xhtml#t:t/0">Ash.Query.Calculation.t</a>()
  | <a href="Ash.Query.Aggregate.xhtml#t:t/0">Ash.Query.Aggregate.t</a>()
  | [<a href="https://hexdocs.pm/elixir/typespecs.html#basic-types">atom</a>() | <a href="Ash.Query.Calculation.xhtml#t:t/0">Ash.Query.Calculation.t</a>() | <a href="Ash.Query.Aggregate.xhtml#t:t/0">Ash.Query.Aggregate.t</a>()]
  | [{<a href="https://hexdocs.pm/elixir/typespecs.html#basic-types">atom</a>() | <a href="Ash.Query.Calculation.xhtml#t:t/0">Ash.Query.Calculation.t</a>() | <a href="Ash.Query.Aggregate.xhtml#t:t/0">Ash.Query.Aggregate.t</a>(), <a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types">term</a>()}],
  <a href="https://hexdocs.pm/elixir/Keyword.html#t:t/0">Keyword.t</a>()
) :: <a href="#t:t/0">t</a>()</pre>

      </div>

<p>Loads relationships, calculations, or aggregates on the resource.</p><p>By default, loading attributes has no effect, as all attributes are returned.
See the section below on &quot;Strict Loading&quot; for more.</p><h2 id="load/3-examples" class="section-heading"><a href="#load/3-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="c1"># Load simple relationships</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">load</samp><samp class="p" data-group-id="4169898157-1">(</samp><samp class="nc">MyApp.Post</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:author</samp><samp class="p" data-group-id="4169898157-1">)</samp><samp class="w">
</samp><samp class="p" data-group-id="4169898157-2">%</samp><samp class="nc" data-group-id="4169898157-2">Ash.Query</samp><samp class="p" data-group-id="4169898157-2">{</samp><samp class="ss">load</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="4169898157-3">[</samp><samp class="ss">author</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="4169898157-4">[</samp><samp class="p" data-group-id="4169898157-4">]</samp><samp class="p" data-group-id="4169898157-3">]</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">...</samp><samp class="p" data-group-id="4169898157-2">}</samp><samp class="w">

</samp><samp class="c1"># Load nested relationships</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">load</samp><samp class="p" data-group-id="4169898157-5">(</samp><samp class="nc">MyApp.Post</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="4169898157-6">[</samp><samp class="ss">comments</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="4169898157-7">[</samp><samp class="ss">:author</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:ratings</samp><samp class="p" data-group-id="4169898157-7">]</samp><samp class="p" data-group-id="4169898157-6">]</samp><samp class="p" data-group-id="4169898157-5">)</samp><samp class="w">
</samp><samp class="p" data-group-id="4169898157-8">%</samp><samp class="nc" data-group-id="4169898157-8">Ash.Query</samp><samp class="p" data-group-id="4169898157-8">{</samp><samp class="ss">load</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="4169898157-9">[</samp><samp class="ss">comments</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="4169898157-10">[</samp><samp class="ss">author</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="4169898157-11">[</samp><samp class="p" data-group-id="4169898157-11">]</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">ratings</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="4169898157-12">[</samp><samp class="p" data-group-id="4169898157-12">]</samp><samp class="p" data-group-id="4169898157-10">]</samp><samp class="p" data-group-id="4169898157-9">]</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">...</samp><samp class="p" data-group-id="4169898157-8">}</samp><samp class="w">

</samp><samp class="c1"># Load relationships with custom queries</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="n">author_query</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">filter</samp><samp class="p" data-group-id="4169898157-13">(</samp><samp class="nc">MyApp.User</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">active</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">true</samp><samp class="p" data-group-id="4169898157-13">)</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">load</samp><samp class="p" data-group-id="4169898157-14">(</samp><samp class="nc">MyApp.Post</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="4169898157-15">[</samp><samp class="ss">comments</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="4169898157-16">[</samp><samp class="ss">author</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="n">author_query</samp><samp class="p" data-group-id="4169898157-16">]</samp><samp class="p" data-group-id="4169898157-15">]</samp><samp class="p" data-group-id="4169898157-14">)</samp><samp class="w">
</samp><samp class="p" data-group-id="4169898157-17">%</samp><samp class="nc" data-group-id="4169898157-17">Ash.Query</samp><samp class="p" data-group-id="4169898157-17">{</samp><samp class="ss">load</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="4169898157-18">[</samp><samp class="ss">comments</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="4169898157-19">[</samp><samp class="ss">author</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="4169898157-20">%</samp><samp class="nc" data-group-id="4169898157-20">Ash.Query</samp><samp class="p" data-group-id="4169898157-20">{</samp><samp class="n">...</samp><samp class="p" data-group-id="4169898157-20">}</samp><samp class="p" data-group-id="4169898157-19">]</samp><samp class="p" data-group-id="4169898157-18">]</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">...</samp><samp class="p" data-group-id="4169898157-17">}</samp><samp class="w">

</samp><samp class="c1"># Load calculations with arguments</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">load</samp><samp class="p" data-group-id="4169898157-21">(</samp><samp class="nc">MyApp.User</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">full_name</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="4169898157-22">%{</samp><samp class="ss">format</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="ss">:last_first</samp><samp class="p" data-group-id="4169898157-22">}</samp><samp class="p" data-group-id="4169898157-21">)</samp><samp class="w">
</samp><samp class="p" data-group-id="4169898157-23">%</samp><samp class="nc" data-group-id="4169898157-23">Ash.Query</samp><samp class="p" data-group-id="4169898157-23">{</samp><samp class="ss">calculations</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="4169898157-24">%{</samp><samp class="ss">full_name</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="4169898157-25">%</samp><samp class="nc" data-group-id="4169898157-25">Ash.Query.Calculation</samp><samp class="p" data-group-id="4169898157-25">{</samp><samp class="n">...</samp><samp class="p" data-group-id="4169898157-25">}</samp><samp class="p" data-group-id="4169898157-24">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">...</samp><samp class="p" data-group-id="4169898157-23">}</samp></code></pre><h2 id="load/3-strict-loading" class="section-heading"><a href="#load/3-strict-loading" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Strict Loading</span></h2><p>By passing <code class="inline">strict?: true</code>, only specified attributes will be loaded when passing
a list of fields to fetch on a relationship, which allows for more optimized data-fetching.</p><pre><code class="makeup elixir" translate="no"><samp class="c1"># Only load specific fields on relationships</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">load</samp><samp class="p" data-group-id="7311970737-1">(</samp><samp class="nc">MyApp.Category</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="7311970737-2">[</samp><samp class="ss">:name</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">posts</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="7311970737-3">[</samp><samp class="ss">:title</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:published_at</samp><samp class="p" data-group-id="7311970737-3">]</samp><samp class="p" data-group-id="7311970737-2">]</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">strict?</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">true</samp><samp class="p" data-group-id="7311970737-1">)</samp><samp class="w">
</samp><samp class="p" data-group-id="7311970737-4">%</samp><samp class="nc" data-group-id="7311970737-4">Ash.Query</samp><samp class="p" data-group-id="7311970737-4">{</samp><samp class="ss">load</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="7311970737-5">[</samp><samp class="ss">posts</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="7311970737-6">[</samp><samp class="ss">:title</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:published_at</samp><samp class="p" data-group-id="7311970737-6">]</samp><samp class="p" data-group-id="7311970737-5">]</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">...</samp><samp class="p" data-group-id="7311970737-4">}</samp></code></pre><p>When using <code class="inline">strict?: true</code> and loading nested relationships, you must specify all the
attributes you want to load alongside the nested relationships:</p><pre><code class="makeup elixir" translate="no"><samp class="c1"># Must include needed attributes when loading nested relationships strictly</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">load</samp><samp class="p" data-group-id="7397394905-1">(</samp><samp class="nc">MyApp.Post</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="7397394905-2">[</samp><samp class="ss">:title</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:published_at</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">category</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="7397394905-3">[</samp><samp class="ss">:name</samp><samp class="p" data-group-id="7397394905-3">]</samp><samp class="p" data-group-id="7397394905-2">]</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">strict?</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">true</samp><samp class="p" data-group-id="7397394905-1">)</samp><samp class="w">
</samp><samp class="p" data-group-id="7397394905-4">%</samp><samp class="nc" data-group-id="7397394905-4">Ash.Query</samp><samp class="p" data-group-id="7397394905-4">{</samp><samp class="n">...</samp><samp class="p" data-group-id="7397394905-4">}</samp></code></pre><h2 id="load/3-see-also" class="section-heading"><a href="#load/3-see-also" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">See also</span></h2><ul><li><a href="#select/3"><code class="inline">select/3</code></a> for controlling which attributes are returned</li><li><a href="#ensure_selected/2"><code class="inline">ensure_selected/2</code></a> for ensuring specific fields are selected</li><li><a href="Ash.xhtml#read/2"><code class="inline">Ash.read/2</code></a> for executing queries with loaded data</li><li><a href="relationships.xhtml">Relationships Guide</a> for understanding relationships</li><li><a href="calculations.xhtml">Calculations Guide</a> for understanding calculations</li></ul>
  </section>
</section>
<section class="detail" id="load_calculation_as/5">

    <span id="load_calculation_as/3"></span>

    <span id="load_calculation_as/4"></span>

  <div class="detail-header">
    <a href="#load_calculation_as/5" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">load_calculation_as(query, calc_name, as_name, opts_or_args \\ %{}, opts \\ [])</h1>


        <a href="https://github.com/ash-project/ash/blob/v3.5.33/lib/ash/query/query.ex#L3626" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

<p>Adds a resource calculation to the query as a custom calculation with the provided name.</p><p>Example:</p><pre><code class="makeup elixir" translate="no"><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">load_calculation_as</samp><samp class="p" data-group-id="3349813899-1">(</samp><samp class="n">query</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:calculation</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:some_name</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">args</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="3349813899-2">%{</samp><samp class="p" data-group-id="3349813899-2">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">load_through</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="3349813899-3">[</samp><samp class="ss">:foo</samp><samp class="p" data-group-id="3349813899-3">]</samp><samp class="p" data-group-id="3349813899-1">)</samp></code></pre>
  </section>
</section>
<section class="detail" id="load_through/4">

  <div class="detail-header">
    <a href="#load_through/4" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">load_through(query, type, name, load)</h1>


        <a href="https://github.com/ash-project/ash/blob/v3.5.33/lib/ash/query/query.ex#L2065" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

<p>Adds a load statement to the result of an attribute or calculation.</p><p>Uses <a href="Ash.Type.xhtml#load/5"><code class="inline">Ash.Type.load/5</code></a> to request that the type load nested data.</p>
  </section>
</section>
<section class="detail" id="loading?/2">

  <div class="detail-header">
    <a href="#loading?/2" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">loading?(query, item)</h1>


        <a href="https://github.com/ash-project/ash/blob/v3.5.33/lib/ash/query/query.ex#L1997" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

<p>Returns true if the field/relationship or path to field/relationship is being loaded.</p><p>It accepts an atom or a list of atoms, which is treated for as a &quot;path&quot;, i.e:</p><pre><code class="makeup elixir" translate="no"><samp class="nc">Resource</samp><samp class="w"> </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">load</samp><samp class="p" data-group-id="5973067535-1">(</samp><samp class="ss">friends</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="5973067535-2">[</samp><samp class="ss">enemies</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="5973067535-3">[</samp><samp class="ss">:score</samp><samp class="p" data-group-id="5973067535-3">]</samp><samp class="p" data-group-id="5973067535-2">]</samp><samp class="p" data-group-id="5973067535-1">)</samp><samp class="w"> </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">loading?</samp><samp class="p" data-group-id="5973067535-4">(</samp><samp class="p" data-group-id="5973067535-5">[</samp><samp class="ss">:friends</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:enemies</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:score</samp><samp class="p" data-group-id="5973067535-5">]</samp><samp class="p" data-group-id="5973067535-4">)</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="no">true</samp><samp class="w">

</samp><samp class="nc">Resource</samp><samp class="w"> </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">load</samp><samp class="p" data-group-id="5973067535-6">(</samp><samp class="ss">friends</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="5973067535-7">[</samp><samp class="ss">enemies</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="5973067535-8">[</samp><samp class="ss">:score</samp><samp class="p" data-group-id="5973067535-8">]</samp><samp class="p" data-group-id="5973067535-7">]</samp><samp class="p" data-group-id="5973067535-6">)</samp><samp class="w"> </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">loading?</samp><samp class="p" data-group-id="5973067535-9">(</samp><samp class="p" data-group-id="5973067535-10">[</samp><samp class="ss">:friends</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:score</samp><samp class="p" data-group-id="5973067535-10">]</samp><samp class="p" data-group-id="5973067535-9">)</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="no">false</samp><samp class="w">

</samp><samp class="nc">Resource</samp><samp class="w"> </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">load</samp><samp class="p" data-group-id="5973067535-11">(</samp><samp class="ss">friends</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="5973067535-12">[</samp><samp class="ss">enemies</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="5973067535-13">[</samp><samp class="ss">:score</samp><samp class="p" data-group-id="5973067535-13">]</samp><samp class="p" data-group-id="5973067535-12">]</samp><samp class="p" data-group-id="5973067535-11">)</samp><samp class="w"> </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">loading?</samp><samp class="p" data-group-id="5973067535-14">(</samp><samp class="ss">:friends</samp><samp class="p" data-group-id="5973067535-14">)</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="no">true</samp></code></pre>
  </section>
</section>
<section class="detail" id="lock/2">

  <div class="detail-header">
    <a href="#lock/2" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">lock(query, lock_type)</h1>


        <a href="https://github.com/ash-project/ash/blob/v3.5.33/lib/ash/query/query.ex#L4002" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> lock(<a href="#t:t/0">t</a>() | <a href="Ash.Resource.xhtml#t:t/0">Ash.Resource.t</a>(), <a href="Ash.DataLayer.xhtml#t:lock_type/0">Ash.DataLayer.lock_type</a>()) :: <a href="#t:t/0">t</a>()</pre>

      </div>

<p>Lock the query results.</p><p>This must be run while in a transaction, and is not supported by all data layers.</p>
  </section>
</section>
<section class="detail" id="merge_query_load/3">

  <div class="detail-header">
    <a href="#merge_query_load/3" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">merge_query_load(left, right, context)</h1>


        <a href="https://github.com/ash-project/ash/blob/v3.5.33/lib/ash/query/query.ex#L2107" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

<p>Merges two query's load statements, for the purpose of handling calculation requirements.</p><p>This should only be used if you are writing a custom type that is loadable.
See the callback documentation for <a href="Ash.Type.xhtml#c:merge_load/4"><code class="inline">Ash.Type.merge_load/4</code></a> for more.</p>
  </section>
</section>
<section class="detail" id="new/2">

    <span id="new/1"></span>

  <div class="detail-header">
    <a href="#new/2" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">new(resource, opts \\ [])</h1>


        <a href="https://github.com/ash-project/ash/blob/v3.5.33/lib/ash/query/query.ex#L723" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> new(<a href="Ash.Resource.xhtml#t:t/0">Ash.Resource.t</a>() | <a href="#t:t/0">t</a>(), opts :: <a href="https://hexdocs.pm/elixir/Keyword.html#t:t/0">Keyword.t</a>()) :: <a href="#t:t/0">t</a>()</pre>

      </div>

<p>Creates a new query for the given resource.</p><p>This is the starting point for building queries.  The query will automatically include the resource's base filter
and default context.</p><h2 id="new/2-examples" class="section-heading"><a href="#new/2-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="c1"># Create a new query for a resource</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">new</samp><samp class="p" data-group-id="2490642436-1">(</samp><samp class="nc">MyApp.Post</samp><samp class="p" data-group-id="2490642436-1">)</samp><samp class="w">
</samp><samp class="p" data-group-id="2490642436-2">%</samp><samp class="nc" data-group-id="2490642436-2">Ash.Query</samp><samp class="p" data-group-id="2490642436-2">{</samp><samp class="ss">resource</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="nc">MyApp.Post</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">...</samp><samp class="p" data-group-id="2490642436-2">}</samp><samp class="w">

</samp><samp class="c1"># Create a query with options</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">new</samp><samp class="p" data-group-id="2490642436-3">(</samp><samp class="nc">MyApp.Post</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">domain</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="nc">MyApp.Blog</samp><samp class="p" data-group-id="2490642436-3">)</samp><samp class="w">
</samp><samp class="p" data-group-id="2490642436-4">%</samp><samp class="nc" data-group-id="2490642436-4">Ash.Query</samp><samp class="p" data-group-id="2490642436-4">{</samp><samp class="ss">resource</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="nc">MyApp.Post</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">domain</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="nc">MyApp.Blog</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">...</samp><samp class="p" data-group-id="2490642436-4">}</samp><samp class="w">

</samp><samp class="c1"># Pass an existing query (returns the query unchanged)</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="n">query</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">new</samp><samp class="p" data-group-id="2490642436-5">(</samp><samp class="nc">MyApp.Post</samp><samp class="p" data-group-id="2490642436-5">)</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">new</samp><samp class="p" data-group-id="2490642436-6">(</samp><samp class="n">query</samp><samp class="p" data-group-id="2490642436-6">)</samp><samp class="w">
</samp><samp class="p" data-group-id="2490642436-7">%</samp><samp class="nc" data-group-id="2490642436-7">Ash.Query</samp><samp class="p" data-group-id="2490642436-7">{</samp><samp class="ss">resource</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="nc">MyApp.Post</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">...</samp><samp class="p" data-group-id="2490642436-7">}</samp></code></pre><h2 id="new/2-see-also" class="section-heading"><a href="#new/2-see-also" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">See also</span></h2><ul><li><a href="#for_read/4"><code class="inline">for_read/4</code></a> for creating queries bound to specific read actions</li><li><a href="#filter/2"><code class="inline">filter/2</code></a> for adding filter conditions</li><li><a href="#sort/3"><code class="inline">sort/3</code></a> for adding sort criteria</li><li><a href="read-actions.xhtml">Read Actions Guide</a> for understanding read operations</li><li><a href="actions.xhtml">Actions Guide</a> for general action concepts</li></ul>
  </section>
</section>
<section class="detail" id="offset/2">

  <div class="detail-header">
    <a href="#offset/2" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">offset(query, offset)</h1>


        <a href="https://github.com/ash-project/ash/blob/v3.5.33/lib/ash/query/query.ex#L3728" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> offset(<a href="#t:t/0">t</a>() | <a href="Ash.Resource.xhtml#t:t/0">Ash.Resource.t</a>(), nil | <a href="https://hexdocs.pm/elixir/typespecs.html#basic-types">integer</a>()) :: <a href="#t:t/0">t</a>()</pre>

      </div>

<p>Skips the first n records in the query results.</p><p>This function is often used for offset-based pagination, allowing you
to skip a specified number of records from the beginning of the result set.
Often used together with <a href="#limit/2"><code class="inline">limit/2</code></a> to implement pagination.</p><h2 id="offset/2-examples" class="section-heading"><a href="#offset/2-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="c1"># Skip the first 20 records</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">MyApp.Post</samp><samp class="w"> </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">offset</samp><samp class="p" data-group-id="4494099333-1">(</samp><samp class="mi">20</samp><samp class="p" data-group-id="4494099333-1">)</samp><samp class="w">
</samp><samp class="p" data-group-id="4494099333-2">%</samp><samp class="nc" data-group-id="4494099333-2">Ash.Query</samp><samp class="p" data-group-id="4494099333-2">{</samp><samp class="ss">offset</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">20</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">...</samp><samp class="p" data-group-id="4494099333-2">}</samp><samp class="w">

</samp><samp class="c1"># Remove existing offset</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="n">query</samp><samp class="w"> </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">offset</samp><samp class="p" data-group-id="4494099333-3">(</samp><samp class="no">nil</samp><samp class="p" data-group-id="4494099333-3">)</samp><samp class="w">
</samp><samp class="p" data-group-id="4494099333-4">%</samp><samp class="nc" data-group-id="4494099333-4">Ash.Query</samp><samp class="p" data-group-id="4494099333-4">{</samp><samp class="ss">offset</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">0</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">...</samp><samp class="p" data-group-id="4494099333-4">}</samp><samp class="w">

</samp><samp class="c1"># Pagination example: page 3 with 10 items per page</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">MyApp.Post</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">sort</samp><samp class="p" data-group-id="4494099333-5">(</samp><samp class="ss">:created_at</samp><samp class="p" data-group-id="4494099333-5">)</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">offset</samp><samp class="p" data-group-id="4494099333-6">(</samp><samp class="mi">20</samp><samp class="p" data-group-id="4494099333-6">)</samp><samp class="w">  </samp><samp class="c1"># Skip first 20 (pages 1-2)</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">limit</samp><samp class="p" data-group-id="4494099333-7">(</samp><samp class="mi">10</samp><samp class="p" data-group-id="4494099333-7">)</samp><samp class="w">   </samp><samp class="c1"># Take next 10 (page 3)</samp><samp class="w">
</samp><samp class="p" data-group-id="4494099333-8">%</samp><samp class="nc" data-group-id="4494099333-8">Ash.Query</samp><samp class="p" data-group-id="4494099333-8">{</samp><samp class="ss">offset</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">20</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">limit</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">10</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">...</samp><samp class="p" data-group-id="4494099333-8">}</samp></code></pre><h2 id="offset/2-see-also" class="section-heading"><a href="#offset/2-see-also" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">See also</span></h2><ul><li><a href="#limit/2"><code class="inline">limit/2</code></a> for limiting the number of results</li><li><a href="#page/2"><code class="inline">page/2</code></a> for keyset pagination (more efficient for large datasets)</li><li><a href="#sort/3"><code class="inline">sort/3</code></a> for ordering results before offsetting</li></ul>
  </section>
</section>
<section class="detail" id="page/2">

  <div class="detail-header">
    <a href="#page/2" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">page(query, page_opts)</h1>


        <a href="https://github.com/ash-project/ash/blob/v3.5.33/lib/ash/query/query.ex#L3067" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> page(<a href="#t:t/0">t</a>() | <a href="Ash.Resource.xhtml#t:t/0">Ash.Resource.t</a>(), <a href="https://hexdocs.pm/elixir/Keyword.html#t:t/0">Keyword.t</a>() | nil | false) :: <a href="#t:t/0">t</a>()</pre>

      </div>

<p>Sets the pagination options of the query.</p><p>This function configures how results should be paginated when the query is executed.
Ash supports both offset-based pagination (limit/offset) and keyset-based pagination
(cursor-based), with keyset being more efficient for large datasets.</p><h2 id="page/2-examples" class="section-heading"><a href="#page/2-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="c1"># Offset-based pagination (page 2, 10 items per page)</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">MyApp.Post</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">page</samp><samp class="p" data-group-id="5558651095-1">(</samp><samp class="ss">limit</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">10</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">offset</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">10</samp><samp class="p" data-group-id="5558651095-1">)</samp><samp class="w">
</samp><samp class="p" data-group-id="5558651095-2">%</samp><samp class="nc" data-group-id="5558651095-2">Ash.Query</samp><samp class="p" data-group-id="5558651095-2">{</samp><samp class="ss">page</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="5558651095-3">[</samp><samp class="ss">limit</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">10</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">offset</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">10</samp><samp class="p" data-group-id="5558651095-3">]</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">...</samp><samp class="p" data-group-id="5558651095-2">}</samp><samp class="w">

</samp><samp class="c1"># Keyset pagination with before/after cursors</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">MyApp.Post</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">sort</samp><samp class="p" data-group-id="5558651095-4">(</samp><samp class="ss">:created_at</samp><samp class="p" data-group-id="5558651095-4">)</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">page</samp><samp class="p" data-group-id="5558651095-5">(</samp><samp class="ss">limit</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">20</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">after</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;cursor_string&quot;</samp><samp class="p" data-group-id="5558651095-5">)</samp><samp class="w">
</samp><samp class="p" data-group-id="5558651095-6">%</samp><samp class="nc" data-group-id="5558651095-6">Ash.Query</samp><samp class="p" data-group-id="5558651095-6">{</samp><samp class="ss">page</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="5558651095-7">[</samp><samp class="ss">limit</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">20</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">after</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;cursor_string&quot;</samp><samp class="p" data-group-id="5558651095-7">]</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">...</samp><samp class="p" data-group-id="5558651095-6">}</samp><samp class="w">

</samp><samp class="c1"># Disable pagination (return all results)</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">MyApp.Post</samp><samp class="w"> </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">page</samp><samp class="p" data-group-id="5558651095-8">(</samp><samp class="no">nil</samp><samp class="p" data-group-id="5558651095-8">)</samp><samp class="w">
</samp><samp class="p" data-group-id="5558651095-9">%</samp><samp class="nc" data-group-id="5558651095-9">Ash.Query</samp><samp class="p" data-group-id="5558651095-9">{</samp><samp class="ss">page</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">nil</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">...</samp><samp class="p" data-group-id="5558651095-9">}</samp><samp class="w">

</samp><samp class="c1"># Pagination with counting</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">MyApp.Post</samp><samp class="w"> </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">page</samp><samp class="p" data-group-id="5558651095-10">(</samp><samp class="ss">limit</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">10</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">count</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">true</samp><samp class="p" data-group-id="5558651095-10">)</samp><samp class="w">
</samp><samp class="p" data-group-id="5558651095-11">%</samp><samp class="nc" data-group-id="5558651095-11">Ash.Query</samp><samp class="p" data-group-id="5558651095-11">{</samp><samp class="ss">page</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="5558651095-12">[</samp><samp class="ss">limit</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">10</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">count</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">true</samp><samp class="p" data-group-id="5558651095-12">]</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">...</samp><samp class="p" data-group-id="5558651095-11">}</samp></code></pre><h2 id="page/2-pagination-types" class="section-heading"><a href="#page/2-pagination-types" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Pagination Types</span></h2><h3 id="page/2-limit-offset-pagination" class="section-heading"><a href="#page/2-limit-offset-pagination" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Limit/offset pagination</span></h3><ul><li><p><code class="inline">:offset</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#basic-types"><code class="inline">non_neg_integer/0</code></a>) - The number of records to skip from the beginning of the query</p></li><li><p><code class="inline">:limit</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#basic-types"><code class="inline">pos_integer/0</code></a>) - The number of records to include in the page</p></li><li><p><code class="inline">:filter</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">term/0</code></a>) - A filter to apply for pagination purposes, that should not be considered in the full count.<br/>This is used by the liveview paginator to only fetch the records that were <em>already</em> on the
page when refreshing data, to avoid pages jittering.</p></li><li><p><code class="inline">:count</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">boolean/0</code></a>) - Whether or not to return the page with a full count of all records</p></li></ul><h3 id="page/2-keyset-pagination" class="section-heading"><a href="#page/2-keyset-pagination" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Keyset pagination</span></h3><ul><li><p><code class="inline">:before</code> (<a href="https://hexdocs.pm/elixir/String.html#t:t/0"><code class="inline">String.t/0</code></a>) - Get records that appear before the provided keyset (mutually exclusive with <code class="inline">after</code>)</p></li><li><p><code class="inline">:after</code> (<a href="https://hexdocs.pm/elixir/String.html#t:t/0"><code class="inline">String.t/0</code></a>) - Get records that appear after the provided keyset (mutually exclusive with <code class="inline">before</code>)</p></li><li><p><code class="inline">:limit</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#basic-types"><code class="inline">pos_integer/0</code></a>) - How many records to include in the page</p></li><li><p><code class="inline">:filter</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">term/0</code></a>) - See the <code class="inline">filter</code> option for offset pagination, this behaves the same.</p></li><li><p><code class="inline">:count</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">boolean/0</code></a>) - Whether or not to return the page with a full count of all records</p></li></ul><h2 id="page/2-see-also" class="section-heading"><a href="#page/2-see-also" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">See also</span></h2><ul><li><a href="#limit/2"><code class="inline">limit/2</code></a> and <a href="#offset/2"><code class="inline">offset/2</code></a> for simple pagination without page metadata</li><li><a href="#sort/3"><code class="inline">sort/3</code></a> for ordering results (required for keyset pagination)</li><li><a href="Ash.xhtml#read/2"><code class="inline">Ash.read/2</code></a> for executing paginated queries</li></ul>
  </section>
</section>
<section class="detail" id="put_context/3">

  <div class="detail-header">
    <a href="#put_context/3" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">put_context(query, key, value)</h1>


        <a href="https://github.com/ash-project/ash/blob/v3.5.33/lib/ash/query/query.ex#L2727" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> put_context(<a href="#t:t/0">t</a>() | <a href="Ash.Resource.xhtml#t:t/0">Ash.Resource.t</a>(), <a href="https://hexdocs.pm/elixir/typespecs.html#basic-types">atom</a>(), <a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types">term</a>()) :: <a href="#t:t/0">t</a>()</pre>

      </div>

<p>Sets a specific context key to a specific value.</p><p>Context is used to pass additional information through the query pipeline
that can be accessed by preparations, calculations, and other query logic.
This function adds or updates a single key in the query's context map.</p><h2 id="put_context/3-examples" class="section-heading"><a href="#put_context/3-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="c1"># Add actor information to context</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="n">query</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="nc">MyApp.Post</samp><samp class="w"> </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">put_context</samp><samp class="p" data-group-id="8951371364-1">(</samp><samp class="ss">:actor</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">current_user</samp><samp class="p" data-group-id="8951371364-1">)</samp><samp class="w">
</samp><samp class="p" data-group-id="8951371364-2">%</samp><samp class="nc" data-group-id="8951371364-2">Ash.Query</samp><samp class="p" data-group-id="8951371364-2">{</samp><samp class="ss">context</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="8951371364-3">%{</samp><samp class="ss">actor</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="8951371364-4">%</samp><samp class="nc" data-group-id="8951371364-4">User</samp><samp class="p" data-group-id="8951371364-4">{</samp><samp class="n">...</samp><samp class="p" data-group-id="8951371364-4">}</samp><samp class="p" data-group-id="8951371364-3">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">...</samp><samp class="p" data-group-id="8951371364-2">}</samp><samp class="w">

</samp><samp class="c1"># Add custom metadata for preparations</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="n">query</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="nc">MyApp.Post</samp><samp class="w"> </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">put_context</samp><samp class="p" data-group-id="8951371364-5">(</samp><samp class="ss">:source</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;api&quot;</samp><samp class="p" data-group-id="8951371364-5">)</samp><samp class="w">
</samp><samp class="p" data-group-id="8951371364-6">%</samp><samp class="nc" data-group-id="8951371364-6">Ash.Query</samp><samp class="p" data-group-id="8951371364-6">{</samp><samp class="ss">context</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="8951371364-7">%{</samp><samp class="ss">source</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;api&quot;</samp><samp class="p" data-group-id="8951371364-7">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">...</samp><samp class="p" data-group-id="8951371364-6">}</samp><samp class="w">

</samp><samp class="c1"># Chain multiple context additions</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">MyApp.Post</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">put_context</samp><samp class="p" data-group-id="8951371364-8">(</samp><samp class="ss">:tenant</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;org_123&quot;</samp><samp class="p" data-group-id="8951371364-8">)</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">put_context</samp><samp class="p" data-group-id="8951371364-9">(</samp><samp class="ss">:locale</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;en_US&quot;</samp><samp class="p" data-group-id="8951371364-9">)</samp><samp class="w">
</samp><samp class="p" data-group-id="8951371364-10">%</samp><samp class="nc" data-group-id="8951371364-10">Ash.Query</samp><samp class="p" data-group-id="8951371364-10">{</samp><samp class="ss">context</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="8951371364-11">%{</samp><samp class="ss">tenant</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;org_123&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">locale</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;en_US&quot;</samp><samp class="p" data-group-id="8951371364-11">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">...</samp><samp class="p" data-group-id="8951371364-10">}</samp></code></pre><h2 id="put_context/3-see-also" class="section-heading"><a href="#put_context/3-see-also" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">See also</span></h2><ul><li><a href="#set_context/2"><code class="inline">set_context/2</code></a> for setting the entire context map</li><li><a href="#for_read/4"><code class="inline">for_read/4</code></a> for passing context when creating queries</li><li>Preparations and calculations can access context for custom logic</li></ul>
  </section>
</section>
<section class="detail" id="select/3">

    <span id="select/2"></span>

  <div class="detail-header">
    <a href="#select/3" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">select(query, fields, opts \\ [])</h1>


        <a href="https://github.com/ash-project/ash/blob/v3.5.33/lib/ash/query/query.ex#L1638" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> select(<a href="#t:t/0">t</a>() | <a href="Ash.Resource.xhtml#t:t/0">Ash.Resource.t</a>(), [<a href="https://hexdocs.pm/elixir/typespecs.html#basic-types">atom</a>()] | <a href="https://hexdocs.pm/elixir/typespecs.html#basic-types">atom</a>(), <a href="https://hexdocs.pm/elixir/Keyword.html#t:t/0">Keyword.t</a>()) :: <a href="#t:t/0">t</a>()</pre>

      </div>

<p>Ensure that only the specified <em>attributes</em> are present in the results.</p><p>The first call to <a href="#select/2"><code class="inline">select/2</code></a> will replace the default behavior of selecting
all attributes. Subsequent calls to <a href="#select/2"><code class="inline">select/2</code></a> will combine the provided
fields unless the <code class="inline">replace?</code> option is provided with a value of <code class="inline">true</code>.</p><p>If a field has been deselected, selecting it again will override that (because a single list of fields is tracked for selection)</p><p>Primary key attributes are always selected and cannot be deselected.</p><p>When attempting to load a relationship (or manage it with <a href="Ash.Changeset.xhtml#manage_relationship/3"><code class="inline">Ash.Changeset.manage_relationship/3</code></a>),
if the source field is not selected on the query/provided data an error will be produced. If loading
a relationship with a query, an error is produced if the query does not select the destination field
of the relationship.</p><p>Use <a href="#ensure_selected/2"><code class="inline">ensure_selected/2</code></a> if you wish to make sure a field has been selected, without deselecting any other fields.</p><h2 id="select/3-examples" class="section-heading"><a href="#select/3-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="c1"># Select specific attributes</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">MyApp.Post</samp><samp class="w"> </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">select</samp><samp class="p" data-group-id="4275928687-1">(</samp><samp class="p" data-group-id="4275928687-2">[</samp><samp class="ss">:title</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:content</samp><samp class="p" data-group-id="4275928687-2">]</samp><samp class="p" data-group-id="4275928687-1">)</samp><samp class="w">
</samp><samp class="p" data-group-id="4275928687-3">%</samp><samp class="nc" data-group-id="4275928687-3">Ash.Query</samp><samp class="p" data-group-id="4275928687-3">{</samp><samp class="ss">select</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="4275928687-4">[</samp><samp class="ss">:id</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:title</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:content</samp><samp class="p" data-group-id="4275928687-4">]</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">...</samp><samp class="p" data-group-id="4275928687-3">}</samp><samp class="w">

</samp><samp class="c1"># Select additional attributes (combines with existing selection)</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">MyApp.Post</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">select</samp><samp class="p" data-group-id="4275928687-5">(</samp><samp class="p" data-group-id="4275928687-6">[</samp><samp class="ss">:title</samp><samp class="p" data-group-id="4275928687-6">]</samp><samp class="p" data-group-id="4275928687-5">)</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">select</samp><samp class="p" data-group-id="4275928687-7">(</samp><samp class="p" data-group-id="4275928687-8">[</samp><samp class="ss">:content</samp><samp class="p" data-group-id="4275928687-8">]</samp><samp class="p" data-group-id="4275928687-7">)</samp><samp class="w">
</samp><samp class="p" data-group-id="4275928687-9">%</samp><samp class="nc" data-group-id="4275928687-9">Ash.Query</samp><samp class="p" data-group-id="4275928687-9">{</samp><samp class="ss">select</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="4275928687-10">[</samp><samp class="ss">:id</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:title</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:content</samp><samp class="p" data-group-id="4275928687-10">]</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">...</samp><samp class="p" data-group-id="4275928687-9">}</samp><samp class="w">

</samp><samp class="c1"># Replace existing selection</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">MyApp.Post</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">select</samp><samp class="p" data-group-id="4275928687-11">(</samp><samp class="p" data-group-id="4275928687-12">[</samp><samp class="ss">:title</samp><samp class="p" data-group-id="4275928687-12">]</samp><samp class="p" data-group-id="4275928687-11">)</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">select</samp><samp class="p" data-group-id="4275928687-13">(</samp><samp class="p" data-group-id="4275928687-14">[</samp><samp class="ss">:content</samp><samp class="p" data-group-id="4275928687-14">]</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">replace?</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">true</samp><samp class="p" data-group-id="4275928687-13">)</samp><samp class="w">
</samp><samp class="p" data-group-id="4275928687-15">%</samp><samp class="nc" data-group-id="4275928687-15">Ash.Query</samp><samp class="p" data-group-id="4275928687-15">{</samp><samp class="ss">select</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="4275928687-16">[</samp><samp class="ss">:id</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:content</samp><samp class="p" data-group-id="4275928687-16">]</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">...</samp><samp class="p" data-group-id="4275928687-15">}</samp></code></pre><h2 id="select/3-see-also" class="section-heading"><a href="#select/3-see-also" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">See also</span></h2><ul><li><a href="#ensure_selected/2"><code class="inline">ensure_selected/2</code></a> for adding fields without deselecting others</li><li><a href="#deselect/2"><code class="inline">deselect/2</code></a> for removing specific fields from selection</li><li><a href="#load/3"><code class="inline">load/3</code></a> for loading relationships and calculations</li></ul>
  </section>
</section>
<section class="detail" id="selecting?/2">

  <div class="detail-header">
    <a href="#selecting?/2" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">selecting?(query, field)</h1>


        <a href="https://github.com/ash-project/ash/blob/v3.5.33/lib/ash/query/query.ex#L1962" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> selecting?(<a href="#t:t/0">t</a>(), <a href="https://hexdocs.pm/elixir/typespecs.html#basic-types">atom</a>()) :: <a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types">boolean</a>()</pre>

      </div>

<p>Checks if a specific field is currently selected in the query.</p><p>Returns <code class="inline">true</code> if the field will be included in the query results, either
because it's explicitly selected, it's selected by default, or it's a
primary key field (which are always selected).</p><h2 id="selecting?/2-examples" class="section-heading"><a href="#selecting?/2-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="c1"># Check selection when no explicit select is set (uses defaults)</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="n">query</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="nc">MyApp.Post</samp><samp class="w"> </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">new</samp><samp class="p" data-group-id="4695757536-1">(</samp><samp class="p" data-group-id="4695757536-1">)</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">selecting?</samp><samp class="p" data-group-id="4695757536-2">(</samp><samp class="n">query</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:title</samp><samp class="p" data-group-id="4695757536-2">)</samp><samp class="w">
</samp><samp class="no">true</samp><samp class="w">

</samp><samp class="c1"># Check selection with explicit select</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="n">query</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="nc">MyApp.Post</samp><samp class="w"> </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">select</samp><samp class="p" data-group-id="4695757536-3">(</samp><samp class="p" data-group-id="4695757536-4">[</samp><samp class="ss">:title</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:content</samp><samp class="p" data-group-id="4695757536-4">]</samp><samp class="p" data-group-id="4695757536-3">)</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">selecting?</samp><samp class="p" data-group-id="4695757536-5">(</samp><samp class="n">query</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:title</samp><samp class="p" data-group-id="4695757536-5">)</samp><samp class="w">
</samp><samp class="no">true</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">selecting?</samp><samp class="p" data-group-id="4695757536-6">(</samp><samp class="n">query</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:metadata</samp><samp class="p" data-group-id="4695757536-6">)</samp><samp class="w">
</samp><samp class="no">false</samp><samp class="w">

</samp><samp class="c1"># Primary key fields are always selected</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="n">query</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="nc">MyApp.Post</samp><samp class="w"> </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">select</samp><samp class="p" data-group-id="4695757536-7">(</samp><samp class="p" data-group-id="4695757536-8">[</samp><samp class="ss">:title</samp><samp class="p" data-group-id="4695757536-8">]</samp><samp class="p" data-group-id="4695757536-7">)</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">selecting?</samp><samp class="p" data-group-id="4695757536-9">(</samp><samp class="n">query</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:id</samp><samp class="p" data-group-id="4695757536-9">)</samp><samp class="w">  </samp><samp class="c1"># assuming :id is primary key</samp><samp class="w">
</samp><samp class="no">true</samp></code></pre><h2 id="selecting?/2-see-also" class="section-heading"><a href="#selecting?/2-see-also" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">See also</span></h2><ul><li><a href="#select/3"><code class="inline">select/3</code></a> for controlling field selection</li><li><a href="#ensure_selected/2"><code class="inline">ensure_selected/2</code></a> for adding fields to selection</li><li><a href="#load/3"><code class="inline">load/3</code></a> for loading relationships that may require specific fields</li></ul>
  </section>
</section>
<section class="detail" id="set_argument/3">

  <div class="detail-header">
    <a href="#set_argument/3" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">set_argument(query, argument, value)</h1>


        <a href="https://github.com/ash-project/ash/blob/v3.5.33/lib/ash/query/query.ex#L2886" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

<p>Adds an argument to the query.</p><p>Arguments are used by action logic such as preparations, filters, and other
query modifications. They become available in filter templates and can be
referenced in action configurations. Setting an argument after a query has
been validated for an action will result in an error.</p><h2 id="set_argument/3-examples" class="section-heading"><a href="#set_argument/3-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="c1"># Set an argument for use in action filters</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="n">query</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">new</samp><samp class="p" data-group-id="9133908246-1">(</samp><samp class="nc">MyApp.Post</samp><samp class="p" data-group-id="9133908246-1">)</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">set_argument</samp><samp class="p" data-group-id="9133908246-2">(</samp><samp class="n">query</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:author_id</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">123</samp><samp class="p" data-group-id="9133908246-2">)</samp><samp class="w">
</samp><samp class="p" data-group-id="9133908246-3">%</samp><samp class="nc" data-group-id="9133908246-3">Ash.Query</samp><samp class="p" data-group-id="9133908246-3">{</samp><samp class="ss">arguments</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="9133908246-4">%{</samp><samp class="ss">author_id</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">123</samp><samp class="p" data-group-id="9133908246-4">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">...</samp><samp class="p" data-group-id="9133908246-3">}</samp><samp class="w">

</samp><samp class="c1"># Set multiple arguments by chaining</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">MyApp.Post</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">set_argument</samp><samp class="p" data-group-id="9133908246-5">(</samp><samp class="ss">:category</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;tech&quot;</samp><samp class="p" data-group-id="9133908246-5">)</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">set_argument</samp><samp class="p" data-group-id="9133908246-6">(</samp><samp class="ss">:published</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="no">true</samp><samp class="p" data-group-id="9133908246-6">)</samp><samp class="w">
</samp><samp class="p" data-group-id="9133908246-7">%</samp><samp class="nc" data-group-id="9133908246-7">Ash.Query</samp><samp class="p" data-group-id="9133908246-7">{</samp><samp class="ss">arguments</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="9133908246-8">%{</samp><samp class="ss">category</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;tech&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">published</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">true</samp><samp class="p" data-group-id="9133908246-8">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">...</samp><samp class="p" data-group-id="9133908246-7">}</samp><samp class="w">

</samp><samp class="c1"># Arguments are used in action preparations and filters</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="n">query</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="nc">MyApp.Post</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">for_read</samp><samp class="p" data-group-id="9133908246-9">(</samp><samp class="ss">:by_author</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="9133908246-10">%{</samp><samp class="ss">author_id</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">123</samp><samp class="p" data-group-id="9133908246-10">}</samp><samp class="p" data-group-id="9133908246-9">)</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">set_argument</samp><samp class="p" data-group-id="9133908246-11">(</samp><samp class="ss">:include_drafts</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="no">false</samp><samp class="p" data-group-id="9133908246-11">)</samp><samp class="w">
</samp><samp class="p" data-group-id="9133908246-12">%</samp><samp class="nc" data-group-id="9133908246-12">Ash.Query</samp><samp class="p" data-group-id="9133908246-12">{</samp><samp class="ss">arguments</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="9133908246-13">%{</samp><samp class="ss">author_id</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">123</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">include_drafts</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">false</samp><samp class="p" data-group-id="9133908246-13">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">...</samp><samp class="p" data-group-id="9133908246-12">}</samp></code></pre><h2 id="set_argument/3-see-also" class="section-heading"><a href="#set_argument/3-see-also" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">See also</span></h2><ul><li><a href="#get_argument/2"><code class="inline">get_argument/2</code></a> for retrieving argument values</li><li><a href="#fetch_argument/2"><code class="inline">fetch_argument/2</code></a> for safe argument retrieval</li><li><a href="#for_read/4"><code class="inline">for_read/4</code></a> for creating queries with initial arguments</li></ul>
  </section>
</section>
<section class="detail" id="set_arguments/2">

  <div class="detail-header">
    <a href="#set_arguments/2" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">set_arguments(query, map)</h1>


        <a href="https://github.com/ash-project/ash/blob/v3.5.33/lib/ash/query/query.ex#L2980" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

<p>Merge a map of arguments to the arguments list</p>
  </section>
</section>
<section class="detail" id="set_context/2">

  <div class="detail-header">
    <a href="#set_context/2" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">set_context(query, map)</h1>


        <a href="https://github.com/ash-project/ash/blob/v3.5.33/lib/ash/query/query.ex#L2755" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> set_context(<a href="#t:t/0">t</a>() | <a href="Ash.Resource.xhtml#t:t/0">Ash.Resource.t</a>(), <a href="https://hexdocs.pm/elixir/typespecs.html#basic-types">map</a>() | nil) :: <a href="#t:t/0">t</a>()</pre>

      </div>

<p>Merge a map of values into the query context</p>
  </section>
</section>
<section class="detail" id="set_domain/2">

  <div class="detail-header">
    <a href="#set_domain/2" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">set_domain(query, domain)</h1>


        <a href="https://github.com/ash-project/ash/blob/v3.5.33/lib/ash/query/query.ex#L3336" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

<p>Set the query's domain, and any loaded query's domain</p>
  </section>
</section>
<section class="detail" id="set_result/2">

  <div class="detail-header">
    <a href="#set_result/2" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">set_result(query, result)</h1>


        <a href="https://github.com/ash-project/ash/blob/v3.5.33/lib/ash/query/query.ex#L2736" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> set_result(<a href="#t:t/0">t</a>(), <a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types">term</a>()) :: <a href="#t:t/0">t</a>()</pre>

      </div>

<p>Set the result of the action. This will prevent running the underlying datalayer behavior</p>
  </section>
</section>
<section class="detail" id="set_tenant/2">

  <div class="detail-header">
    <a href="#set_tenant/2" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">set_tenant(query, tenant)</h1>


        <a href="https://github.com/ash-project/ash/blob/v3.5.33/lib/ash/query/query.ex#L3019" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> set_tenant(<a href="#t:t/0">t</a>() | <a href="Ash.Resource.xhtml#t:t/0">Ash.Resource.t</a>(), <a href="Ash.ToTenant.xhtml#t:t/0">Ash.ToTenant.t</a>()) :: <a href="#t:t/0">t</a>()</pre>

      </div>

<p>Sets the tenant for the query.</p><p>In multitenant applications, this function configures which tenant's data
the query should operate on. The tenant value is used to filter data
and ensure proper data isolation between tenants.</p><h2 id="set_tenant/2-examples" class="section-heading"><a href="#set_tenant/2-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="c1"># Set tenant using a string identifier</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">MyApp.Post</samp><samp class="w"> </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">set_tenant</samp><samp class="p" data-group-id="9188396163-1">(</samp><samp class="s">&quot;org_123&quot;</samp><samp class="p" data-group-id="9188396163-1">)</samp><samp class="w">
</samp><samp class="p" data-group-id="9188396163-2">%</samp><samp class="nc" data-group-id="9188396163-2">Ash.Query</samp><samp class="p" data-group-id="9188396163-2">{</samp><samp class="ss">tenant</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;org_123&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">...</samp><samp class="p" data-group-id="9188396163-2">}</samp><samp class="w">

</samp><samp class="c1"># Set tenant using a struct that implements Ash.ToTenant</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="n">org</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="p" data-group-id="9188396163-3">%</samp><samp class="nc" data-group-id="9188396163-3">MyApp.Organization</samp><samp class="p" data-group-id="9188396163-3">{</samp><samp class="ss">id</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">456</samp><samp class="p" data-group-id="9188396163-3">}</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">MyApp.Post</samp><samp class="w"> </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">set_tenant</samp><samp class="p" data-group-id="9188396163-4">(</samp><samp class="n">org</samp><samp class="p" data-group-id="9188396163-4">)</samp><samp class="w">
</samp><samp class="p" data-group-id="9188396163-5">%</samp><samp class="nc" data-group-id="9188396163-5">Ash.Query</samp><samp class="p" data-group-id="9188396163-5">{</samp><samp class="ss">tenant</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="9188396163-6">%</samp><samp class="nc" data-group-id="9188396163-6">MyApp.Organization</samp><samp class="p" data-group-id="9188396163-6">{</samp><samp class="ss">id</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">456</samp><samp class="p" data-group-id="9188396163-6">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">...</samp><samp class="p" data-group-id="9188396163-5">}</samp><samp class="w">

</samp><samp class="c1"># Use with other query functions</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">MyApp.Post</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">set_tenant</samp><samp class="p" data-group-id="9188396163-7">(</samp><samp class="s">&quot;org_123&quot;</samp><samp class="p" data-group-id="9188396163-7">)</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">filter</samp><samp class="p" data-group-id="9188396163-8">(</samp><samp class="ss">published</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">true</samp><samp class="p" data-group-id="9188396163-8">)</samp><samp class="w">
</samp><samp class="p" data-group-id="9188396163-9">%</samp><samp class="nc" data-group-id="9188396163-9">Ash.Query</samp><samp class="p" data-group-id="9188396163-9">{</samp><samp class="ss">tenant</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;org_123&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">...</samp><samp class="p" data-group-id="9188396163-9">}</samp></code></pre><h2 id="set_tenant/2-see-also" class="section-heading"><a href="#set_tenant/2-see-also" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">See also</span></h2><ul><li><a href="#for_read/4"><code class="inline">for_read/4</code></a> for setting tenant when creating queries</li><li><a href="Ash.ToTenant.xhtml"><code class="inline">Ash.ToTenant</code></a> protocol for custom tenant conversion</li><li><a href="#put_context/3"><code class="inline">put_context/3</code></a> for adding tenant to query context</li></ul>
  </section>
</section>
<section class="detail" id="sort/3">

    <span id="sort/2"></span>

  <div class="detail-header">
    <a href="#sort/3" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">sort(query, sorts, opts \\ [])</h1>


        <a href="https://github.com/ash-project/ash/blob/v3.5.33/lib/ash/query/query.ex#L4135" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> sort(<a href="#t:t/0">t</a>() | <a href="Ash.Resource.xhtml#t:t/0">Ash.Resource.t</a>(), <a href="Ash.Sort.xhtml#t:t/0">Ash.Sort.t</a>(), opts :: <a href="https://hexdocs.pm/elixir/Keyword.html#t:t/0">Keyword.t</a>()) :: <a href="#t:t/0">t</a>()</pre>

      </div>

<p>Sort the results based on attributes, aggregates or calculations.</p><h2 id="sort/3-format" class="section-heading"><a href="#sort/3-format" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Format</span></h2><p>Your sort can be an atom, list of atoms, a keyword list, or a string. When an order is not specified,
<code class="inline">:asc</code> is the default. See Sort Orders below for more on the available orders.</p><pre><code class="makeup elixir" translate="no"><samp class="c1"># sort by name ascending</samp><samp class="w">
</samp><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">sort</samp><samp class="p" data-group-id="8373726587-1">(</samp><samp class="n">query</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:name</samp><samp class="p" data-group-id="8373726587-1">)</samp><samp class="w">

</samp><samp class="c1"># sort by name descending</samp><samp class="w">
</samp><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">sort</samp><samp class="p" data-group-id="8373726587-2">(</samp><samp class="n">query</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">name</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="ss">:desc</samp><samp class="p" data-group-id="8373726587-2">)</samp><samp class="w">

</samp><samp class="c1"># sort by name descending with nils at the end</samp><samp class="w">
</samp><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">sort</samp><samp class="p" data-group-id="8373726587-3">(</samp><samp class="n">query</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">name</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="ss">:desc_nils_last</samp><samp class="p" data-group-id="8373726587-3">)</samp><samp class="w">

</samp><samp class="c1"># sort by name descending, and title ascending</samp><samp class="w">
</samp><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">sort</samp><samp class="p" data-group-id="8373726587-4">(</samp><samp class="n">query</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">name</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="ss">:desc</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">title</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="ss">:asc</samp><samp class="p" data-group-id="8373726587-4">)</samp><samp class="w">

</samp><samp class="c1"># sort by name ascending</samp><samp class="w">
</samp><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">sort</samp><samp class="p" data-group-id="8373726587-5">(</samp><samp class="n">query</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;name&quot;</samp><samp class="p" data-group-id="8373726587-5">)</samp><samp class="w">

</samp><samp class="c1"># sort by name descending, and title ascending</samp><samp class="w">
</samp><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">sort</samp><samp class="p" data-group-id="8373726587-6">(</samp><samp class="n">query</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;-name,title&quot;</samp><samp class="p" data-group-id="8373726587-6">)</samp><samp class="w">

</samp><samp class="c1"># sort by name descending with nils at the end</samp><samp class="w">
</samp><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">sort</samp><samp class="p" data-group-id="8373726587-7">(</samp><samp class="n">query</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;--name&quot;</samp><samp class="p" data-group-id="8373726587-7">)</samp></code></pre><h2 id="sort/3-related-fields" class="section-heading"><a href="#sort/3-related-fields" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Related Fields</span></h2><p>You can refer to related fields using the shorthand of <code class="inline">&quot;rel1.rel2.field&quot;</code>. For example:</p><pre><code class="makeup elixir" translate="no"><samp class="c1"># sort by the username of the comment&#39;s author.</samp><samp class="w">
</samp><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">sort</samp><samp class="p" data-group-id="6847433694-1">(</samp><samp class="n">query</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;comment.author.username&quot;</samp><samp class="p" data-group-id="6847433694-1">)</samp><samp class="w">

</samp><samp class="c1"># Use as an atom for keyword lists</samp><samp class="w">
</samp><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">sort</samp><samp class="p" data-group-id="6847433694-2">(</samp><samp class="n">query</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">&quot;comment.author.username&quot;</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="ss">:desc</samp><samp class="p" data-group-id="6847433694-2">)</samp></code></pre><h2 id="sort/3-expression-sorts" class="section-heading"><a href="#sort/3-expression-sorts" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Expression Sorts</span></h2><p>You can use the <a href="Ash.Expr.xhtml#calc/2"><code class="inline">Ash.Expr.calc/2</code></a> macro to sort on expressions:</p><pre><code class="makeup elixir" translate="no"><samp class="kn">import</samp><samp class="w"> </samp><samp class="nc">Ash.Expr</samp><samp class="w">

</samp><samp class="c1"># Sort on an expression</samp><samp class="w">
</samp><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">sort</samp><samp class="p" data-group-id="8041067251-1">(</samp><samp class="n">query</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">calc</samp><samp class="p" data-group-id="8041067251-2">(</samp><samp class="n">count</samp><samp class="p" data-group-id="8041067251-3">(</samp><samp class="n">friends</samp><samp class="p" data-group-id="8041067251-3">)</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:desc</samp><samp class="p" data-group-id="8041067251-2">)</samp><samp class="p" data-group-id="8041067251-1">)</samp><samp class="w">

</samp><samp class="c1"># Specify a type (required in some cases when we can&#39;t determine a type)</samp><samp class="w">
</samp><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">sort</samp><samp class="p" data-group-id="8041067251-4">(</samp><samp class="n">query</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="8041067251-5">[</samp><samp class="p" data-group-id="8041067251-6">{</samp><samp class="n">calc</samp><samp class="p" data-group-id="8041067251-7">(</samp><samp class="n">fragment</samp><samp class="p" data-group-id="8041067251-8">(</samp><samp class="s">&quot;some_sql(?)&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">field</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">type</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="ss">:string</samp><samp class="p" data-group-id="8041067251-8">)</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:desc</samp><samp class="p">}</samp><samp class="p">]</samp><samp class="p" data-group-id="8041067251-7">)</samp></code></pre><h2 id="sort/3-sort-strings" class="section-heading"><a href="#sort/3-sort-strings" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Sort Strings</span></h2><p>A comma separated list of fields to sort on, each with an optional prefix.</p><p>The prefixes are:</p><ul><li>&quot;+&quot; - Same as no prefix. Sorts <code class="inline">:asc</code>.</li><li>&quot;++&quot; - Sorts <code class="inline">:asc_nils_first</code></li><li>&quot;-&quot; - Sorts <code class="inline">:desc</code></li><li>&quot;--&quot; - Sorts <code class="inline">:desc_nils_last</code></li></ul><p>For example</p><pre><code class="makeup elixir" translate="no"><samp class="s">&quot;foo,-bar,++baz,--buz&quot;</samp></code></pre><h2 id="sort/3-a-list-of-sort-strings" class="section-heading"><a href="#sort/3-a-list-of-sort-strings" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">A list of sort strings</span></h2><p>Same prefix rules as above, but provided as a list.</p><p>For example:</p><pre><code class="makeup elixir" translate="no"><samp class="p" data-group-id="1170030713-1">[</samp><samp class="s">&quot;foo&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;-bar&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;++baz&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;--buz&quot;</samp><samp class="p" data-group-id="1170030713-1">]</samp></code></pre><h2 id="sort/3-calculations" class="section-heading"><a href="#sort/3-calculations" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Calculations</span></h2><p>Calculation inputs can be provided by providing a map. To provide both inputs and an order,
use a tuple with the first element being the inputs, and the second element being the order.</p><pre><code class="makeup elixir" translate="no"><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">sort</samp><samp class="p" data-group-id="0534555020-1">(</samp><samp class="n">query</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">full_name</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="0534555020-2">%{</samp><samp class="ss">separator</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot; &quot;</samp><samp class="p" data-group-id="0534555020-2">}</samp><samp class="p" data-group-id="0534555020-1">)</samp><samp class="w">

</samp><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">sort</samp><samp class="p" data-group-id="0534555020-3">(</samp><samp class="n">query</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">full_name</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="0534555020-4">{</samp><samp class="p" data-group-id="0534555020-5">%{</samp><samp class="ss">separator</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot; &quot;</samp><samp class="p" data-group-id="0534555020-5">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:asc</samp><samp class="p" data-group-id="0534555020-4">}</samp><samp class="p" data-group-id="0534555020-3">)</samp></code></pre><h2 id="sort/3-sort-orders" class="section-heading"><a href="#sort/3-sort-orders" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Sort Orders</span></h2><p>The available orders are:</p><ul><li><code class="inline">:asc</code> - Sort values ascending, with lowest first and highest last, and <code class="inline">nil</code> values at the end</li><li><code class="inline">:desc</code> - Sort values descending, with highest first and lowest last, and <code class="inline">nil</code> values at the beginning</li><li><code class="inline">:asc_nils_first</code> - Sort values ascending, with lowest first and highest last, and <code class="inline">nil</code> values at the beginning</li><li><code class="inline">:desc_nils_last</code> - Sort values descending, with highest first and lowest last, and <code class="inline">nil</code> values at the end</li></ul><h2 id="sort/3-examples" class="section-heading"><a href="#sort/3-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">sort</samp><samp class="p" data-group-id="1248409579-1">(</samp><samp class="n">query</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="1248409579-2">[</samp><samp class="ss">:foo</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:bar</samp><samp class="p" data-group-id="1248409579-2">]</samp><samp class="p" data-group-id="1248409579-1">)</samp><samp class="w">

</samp><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">sort</samp><samp class="p" data-group-id="1248409579-3">(</samp><samp class="n">query</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="1248409579-4">[</samp><samp class="ss">:foo</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">bar</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="ss">:desc</samp><samp class="p" data-group-id="1248409579-4">]</samp><samp class="p" data-group-id="1248409579-3">)</samp><samp class="w">

</samp><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">sort</samp><samp class="p" data-group-id="1248409579-5">(</samp><samp class="n">query</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="1248409579-6">[</samp><samp class="ss">foo</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="ss">:desc</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">bar</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="ss">:asc</samp><samp class="p" data-group-id="1248409579-6">]</samp><samp class="p" data-group-id="1248409579-5">)</samp></code></pre><p>See the guide on calculations for more.</p><h2 id="sort/3-options" class="section-heading"><a href="#sort/3-options" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Options</span></h2><ul><li><code class="inline">prepend?</code> - set to <code class="inline">true</code> to put your sort at the front of the list of a sort is already specified</li></ul>
  </section>
</section>
<section class="detail" id="sort_input/3">

    <span id="sort_input/2"></span>

  <div class="detail-header">
    <a href="#sort_input/3" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">sort_input(query, sorts, opts \\ [])</h1>


        <a href="https://github.com/ash-project/ash/blob/v3.5.33/lib/ash/query/query.ex#L551" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

<p>Attach a sort statement to the query labelled as user input.</p><p>Sorts added as user input (or filters constructed with <code class="inline">Ash.Filter.parse_input</code>)
will honor any field policies on resources by replacing any references to the field
with <code class="inline">nil</code> in cases where the actor should not be able to see the given field.</p><p>See <a href="#sort/3"><code class="inline">Ash.Query.sort/3</code></a> for more information on accepted formats.</p>
  </section>
</section>
<section class="detail" id="subset_of/2">

  <div class="detail-header">
    <a href="#subset_of/2" class="detail-link" data-no-tooltip="" aria-label="Link to this macro">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">subset_of(query, expr)</h1>

        <span class="note">(macro)</span>


        <a href="https://github.com/ash-project/ash/blob/v3.5.33/lib/ash/query/query.ex#L1768" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

<p>Determines if the provided expression would return data that is a subset of the data returned by the filter on the query.</p><p>This uses the satisfiability solver that is used when solving for policy authorizations. In complex scenarios, or when using
custom database expressions, (like fragments in ash_postgres), this function may return <code class="inline">:maybe</code>. Use <code class="inline">subset_of?</code> to always return
a boolean.</p>
  </section>
</section>
<section class="detail" id="subset_of?/2">

  <div class="detail-header">
    <a href="#subset_of?/2" class="detail-link" data-no-tooltip="" aria-label="Link to this macro">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">subset_of?(query, expr)</h1>

        <span class="note">(macro)</span>


        <a href="https://github.com/ash-project/ash/blob/v3.5.33/lib/ash/query/query.ex#L1801" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

<p>Same as <a href="#subset_of/2"><code class="inline">subset_of/2</code></a> but always returns a boolean. <code class="inline">:maybe</code> returns <code class="inline">false</code>.</p>
  </section>
</section>
<section class="detail" id="superset_of/2">

  <div class="detail-header">
    <a href="#superset_of/2" class="detail-link" data-no-tooltip="" aria-label="Link to this macro">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">superset_of(query, expr)</h1>

        <span class="note">(macro)</span>


        <a href="https://github.com/ash-project/ash/blob/v3.5.33/lib/ash/query/query.ex#L1721" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

<p>Determines if the provided expression would return data that is a subset of the data returned by the filter on the query.</p><p>This uses the satisfiability solver that is used when solving for policy authorizations. In complex scenarios, or when using
custom database expressions, (like fragments in ash_postgres), this function may return <code class="inline">:maybe</code>. Use <code class="inline">supserset_of?</code> to always return
a boolean.</p>
  </section>
</section>
<section class="detail" id="superset_of?/2">

  <div class="detail-header">
    <a href="#superset_of?/2" class="detail-link" data-no-tooltip="" aria-label="Link to this macro">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">superset_of?(query, expr)</h1>

        <span class="note">(macro)</span>


        <a href="https://github.com/ash-project/ash/blob/v3.5.33/lib/ash/query/query.ex#L1755" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

<p>Same as <a href="#superset_of/2"><code class="inline">superset_of/2</code></a> but always returns a boolean. <code class="inline">:maybe</code> returns <code class="inline">false</code>.</p>
  </section>
</section>
<section class="detail" id="timeout/2">

  <div class="detail-header">
    <a href="#timeout/2" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">timeout(query, timeout)</h1>


        <a href="https://github.com/ash-project/ash/blob/v3.5.33/lib/ash/query/query.ex#L942" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> timeout(<a href="#t:t/0">t</a>(), <a href="https://hexdocs.pm/elixir/typespecs.html#basic-types">pos_integer</a>() | :infinity | nil) :: <a href="#t:t/0">t</a>()</pre>

      </div>

<p>Set a timeout for the query.</p><p>For more information, see the <a href="timeouts.xhtml">timeouts guide</a></p>
  </section>
</section>
<section class="detail" id="unload/2">

  <div class="detail-header">
    <a href="#unload/2" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">unload(query, fields)</h1>


        <a href="https://github.com/ash-project/ash/blob/v3.5.33/lib/ash/query/query.ex#L3078" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> unload(<a href="#t:t/0">t</a>(), [<a href="https://hexdocs.pm/elixir/typespecs.html#basic-types">atom</a>()]) :: <a href="#t:t/0">t</a>()</pre>

      </div>

<p>Removes a field from the list of fields to load</p>
  </section>
</section>
<section class="detail" id="unset/2">

  <div class="detail-header">
    <a href="#unset/2" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">unset(query, keys)</h1>


        <a href="https://github.com/ash-project/ash/blob/v3.5.33/lib/ash/query/query.ex#L4360" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> unset(<a href="Ash.Resource.xhtml#t:t/0">Ash.Resource.t</a>() | <a href="#t:t/0">t</a>(), <a href="https://hexdocs.pm/elixir/typespecs.html#basic-types">atom</a>() | [<a href="https://hexdocs.pm/elixir/typespecs.html#basic-types">atom</a>()]) :: <a href="#t:t/0">t</a>()</pre>

      </div>

<p>Removes specified keys from the query, resetting them to their default values.</p><p>This function allows you to &quot;unset&quot; or reset parts of a query back to their
initial state. Useful when you want to remove filters, sorts, loads, or other
query modifications while keeping the rest of the query intact.</p><h2 id="unset/2-examples" class="section-heading"><a href="#unset/2-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="c1"># Remove multiple query aspects at once</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="n">query</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="nc">MyApp.Post</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">filter</samp><samp class="p" data-group-id="4904657422-1">(</samp><samp class="ss">published</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">true</samp><samp class="p" data-group-id="4904657422-1">)</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">sort</samp><samp class="p" data-group-id="4904657422-2">(</samp><samp class="ss">:created_at</samp><samp class="p" data-group-id="4904657422-2">)</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">limit</samp><samp class="p" data-group-id="4904657422-3">(</samp><samp class="mi">10</samp><samp class="p" data-group-id="4904657422-3">)</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">unset</samp><samp class="p" data-group-id="4904657422-4">(</samp><samp class="n">query</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="4904657422-5">[</samp><samp class="ss">:filter</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:sort</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:limit</samp><samp class="p" data-group-id="4904657422-5">]</samp><samp class="p" data-group-id="4904657422-4">)</samp><samp class="w">
</samp><samp class="p" data-group-id="4904657422-6">%</samp><samp class="nc" data-group-id="4904657422-6">Ash.Query</samp><samp class="p" data-group-id="4904657422-6">{</samp><samp class="ss">filter</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">nil</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">sort</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="4904657422-7">[</samp><samp class="p" data-group-id="4904657422-7">]</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">limit</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">nil</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">...</samp><samp class="p" data-group-id="4904657422-6">}</samp><samp class="w">

</samp><samp class="c1"># Remove just the sort from a query</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="n">query</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="nc">MyApp.Post</samp><samp class="w"> </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">sort</samp><samp class="p" data-group-id="4904657422-8">(</samp><samp class="p" data-group-id="4904657422-9">[</samp><samp class="ss">:title</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:created_at</samp><samp class="p" data-group-id="4904657422-9">]</samp><samp class="p" data-group-id="4904657422-8">)</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">unset</samp><samp class="p" data-group-id="4904657422-10">(</samp><samp class="n">query</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:sort</samp><samp class="p" data-group-id="4904657422-10">)</samp><samp class="w">
</samp><samp class="p" data-group-id="4904657422-11">%</samp><samp class="nc" data-group-id="4904657422-11">Ash.Query</samp><samp class="p" data-group-id="4904657422-11">{</samp><samp class="ss">sort</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="4904657422-12">[</samp><samp class="p" data-group-id="4904657422-12">]</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">...</samp><samp class="p" data-group-id="4904657422-11">}</samp><samp class="w">

</samp><samp class="c1"># Remove load statements</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="n">query</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="nc">MyApp.Post</samp><samp class="w"> </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">load</samp><samp class="p" data-group-id="4904657422-13">(</samp><samp class="p" data-group-id="4904657422-14">[</samp><samp class="ss">:author</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:comments</samp><samp class="p" data-group-id="4904657422-14">]</samp><samp class="p" data-group-id="4904657422-13">)</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">unset</samp><samp class="p" data-group-id="4904657422-15">(</samp><samp class="n">query</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:load</samp><samp class="p" data-group-id="4904657422-15">)</samp><samp class="w">
</samp><samp class="p" data-group-id="4904657422-16">%</samp><samp class="nc" data-group-id="4904657422-16">Ash.Query</samp><samp class="p" data-group-id="4904657422-16">{</samp><samp class="ss">load</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="4904657422-17">[</samp><samp class="p" data-group-id="4904657422-17">]</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">...</samp><samp class="p" data-group-id="4904657422-16">}</samp><samp class="w">

</samp><samp class="c1"># Reset pagination settings</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="n">query</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="nc">MyApp.Post</samp><samp class="w"> </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">limit</samp><samp class="p" data-group-id="4904657422-18">(</samp><samp class="mi">20</samp><samp class="p" data-group-id="4904657422-18">)</samp><samp class="w"> </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">offset</samp><samp class="p" data-group-id="4904657422-19">(</samp><samp class="mi">10</samp><samp class="p" data-group-id="4904657422-19">)</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">unset</samp><samp class="p" data-group-id="4904657422-20">(</samp><samp class="n">query</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="4904657422-21">[</samp><samp class="ss">:limit</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:offset</samp><samp class="p" data-group-id="4904657422-21">]</samp><samp class="p" data-group-id="4904657422-20">)</samp><samp class="w">
</samp><samp class="p" data-group-id="4904657422-22">%</samp><samp class="nc" data-group-id="4904657422-22">Ash.Query</samp><samp class="p" data-group-id="4904657422-22">{</samp><samp class="ss">limit</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">nil</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">offset</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">0</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">...</samp><samp class="p" data-group-id="4904657422-22">}</samp></code></pre><h2 id="unset/2-see-also" class="section-heading"><a href="#unset/2-see-also" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">See also</span></h2><ul><li><a href="#new/2"><code class="inline">new/2</code></a> for creating fresh queries</li><li><a href="#select/3"><code class="inline">select/3</code></a>, <a href="#filter/2"><code class="inline">filter/2</code></a>, <a href="#sort/3"><code class="inline">sort/3</code></a> for building queries</li></ul>
  </section>
</section>

        </div>
      </section>


  </body>
</html>
