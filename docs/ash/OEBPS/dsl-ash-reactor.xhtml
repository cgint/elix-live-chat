<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"
      xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>Ash.Reactor - ash v3.5.33</title>
    <meta name="generator" content="ExDoc v0.38.2" />
    <link type="text/css" rel="stylesheet" href="dist/epub-elixir-FNUUKFP7.css" />
    <script src="dist/epub-4WIP524F.js"></script>

  </head>
  <body class="content-inner">

    <h1 id="content">Ash.Reactor</h1>
<p><a href="Ash.Reactor.xhtml"><code class="inline">Ash.Reactor</code></a> is a <a href="https://hex.pm/packages/reactor"><code class="inline">Reactor</code></a> extension
which provides steps for working with Ash resources and actions.</p><p>See the <a href="https://hexdocs.pm/ash/reactor.html">Ash Reactor Guide</a> for more
information.</p><h2 id="ash">ash</h2><p>Ash-related configuration for the <a href="Ash.Reactor.xhtml"><code class="inline">Ash.Reactor</code></a> extension</p><h3 id="options">Options</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a href="#ash-default_domain" id="ash-default_domain"><code class="inline">default_domain</code></a></td><td style="text-align: left;"><code class="inline">module</code></td><td style="text-align: left;"></td><td style="text-align: left;">A domain to use by default when calling actions</td></tr></tbody></table><h3 id="reactor-action">reactor.action</h3><pre><code class="makeup elixir" translate="no"><span class="n">action</span><span class="w"> </span><span class="n">name</span><span class="p">,</span><span class="w"> </span><span class="n">resource</span><span class="p">,</span><span class="w"> </span><span class="n">action</span><span class="w"> </span><span class="o">\\</span><span class="w"> </span><span class="no">nil</span></code></pre><p>Declares a step that will call a generic action on a resource.</p><section role="note" class="admonition tip"><h4 class="admonition-title tip">Undo behaviour</h4><p>This step has three different modes of undo.</p><ul><li><code class="inline">never</code> - The result of the action is never undone.  This is the default.</li><li><code class="inline">always</code> - The <code class="inline">undo_action</code> will always be called.</li><li><code class="inline">outside_transaction</code> - The <code class="inline">undo_action</code> will not be called when running inside a <code class="inline">transaction</code> block, but will be otherwise.</li></ul></section><h3 id="nested-dsls">Nested DSLs</h3><ul><li><a href="#reactor-action-actor">actor</a></li><li><a href="#reactor-action-context">context</a></li><li><a href="#reactor-action-guard">guard</a></li><li><a href="#reactor-action-where">where</a></li><li><a href="#reactor-action-inputs">inputs</a></li><li><a href="#reactor-action-tenant">tenant</a></li><li><a href="#reactor-action-wait_for">wait_for</a></li></ul><h3 id="arguments">Arguments</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a class="spark-required" href="#reactor-action-name" id="reactor-action-name"><code class="inline">name</code></a></td><td style="text-align: left;"><code class="inline">atom</code></td><td style="text-align: left;"></td><td style="text-align: left;">A unique name for the step.</td></tr><tr><td style="text-align: left;"><a class="spark-required" href="#reactor-action-resource" id="reactor-action-resource"><code class="inline">resource</code></a></td><td style="text-align: left;"><code class="inline">module</code></td><td style="text-align: left;"></td><td style="text-align: left;">The resource to call the action on.</td></tr><tr><td style="text-align: left;"><a href="#reactor-action-action" id="reactor-action-action"><code class="inline">action</code></a></td><td style="text-align: left;"><code class="inline">atom</code></td><td style="text-align: left;"></td><td style="text-align: left;">The name of the action to call on the resource.</td></tr></tbody></table><h3 id="options-1">Options</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a href="#reactor-action-domain" id="reactor-action-domain"><code class="inline">domain</code></a></td><td style="text-align: left;"><code class="inline">module</code></td><td style="text-align: left;"></td><td style="text-align: left;">The Domain to use when calling the action.  Defaults to the Domain set on the resource or in the <code class="inline">ash</code> section.</td></tr><tr><td style="text-align: left;"><a href="#reactor-action-async?" id="reactor-action-async?"><code class="inline">async?</code></a></td><td style="text-align: left;"><code class="inline">boolean</code></td><td style="text-align: left;"><code class="inline">true</code></td><td style="text-align: left;">When set to true the step will be executed asynchronously via Reactor's <code class="inline">TaskSupervisor</code>.</td></tr><tr><td style="text-align: left;"><a href="#reactor-action-authorize?" id="reactor-action-authorize?"><code class="inline">authorize?</code></a></td><td style="text-align: left;"><code class="inline">boolean | nil</code></td><td style="text-align: left;"></td><td style="text-align: left;">Explicitly enable or disable authorization for the action.</td></tr><tr><td style="text-align: left;"><a href="#reactor-action-description" id="reactor-action-description"><code class="inline">description</code></a></td><td style="text-align: left;"><code class="inline">String.t</code></td><td style="text-align: left;"></td><td style="text-align: left;">A description for the step</td></tr><tr><td style="text-align: left;"><a href="#reactor-action-undo_action" id="reactor-action-undo_action"><code class="inline">undo_action</code></a></td><td style="text-align: left;"><code class="inline">atom</code></td><td style="text-align: left;"></td><td style="text-align: left;">The name of the action to call on the resource when the step is to be undone.</td></tr><tr><td style="text-align: left;"><a href="#reactor-action-undo" id="reactor-action-undo"><code class="inline">undo</code></a></td><td style="text-align: left;"><code class="inline">:always | :never | :outside_transaction</code></td><td style="text-align: left;"><code class="inline">:never</code></td><td style="text-align: left;">How to handle undoing this action</td></tr></tbody></table><h3 id="reactor-action-actor">reactor.action.actor</h3><pre><code class="makeup elixir" translate="no"><span class="n">actor</span><span class="w"> </span><span class="n">source</span></code></pre><p>Specifies the action actor</p><h3 id="arguments-1">Arguments</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a class="spark-required" href="#reactor-action-actor-source" id="reactor-action-actor-source"><code class="inline">source</code></a></td><td style="text-align: left;"><code class="inline">Reactor.Template.Element | Reactor.Template.Input | Reactor.Template.Result | Reactor.Template.Value</code></td><td style="text-align: left;"></td><td style="text-align: left;">What to use as the source of the actor.</td></tr></tbody></table><h3 id="options-2">Options</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a href="#reactor-action-actor-transform" id="reactor-action-actor-transform"><code class="inline">transform</code></a></td><td style="text-align: left;"><code class="inline">(any -&gt; any) | module | nil</code></td><td style="text-align: left;"></td><td style="text-align: left;">An optional transformation function which can be used to modify the actor before it is passed to the action.</td></tr></tbody></table><h3 id="introspection">Introspection</h3><p>Target: <a href="Ash.Reactor.Dsl.Actor.xhtml"><code class="inline">Ash.Reactor.Dsl.Actor</code></a></p><h3 id="reactor-action-context">reactor.action.context</h3><pre><code class="makeup elixir" translate="no"><span class="n">context</span><span class="w"> </span><span class="n">context</span></code></pre><p>A map to be merged into the action's context</p><h3 id="arguments-2">Arguments</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a href="#reactor-action-context-context" id="reactor-action-context-context"><code class="inline">context</code></a></td><td style="text-align: left;"><code class="inline">nil | Reactor.Template.Element | Reactor.Template.Input | Reactor.Template.Result | Reactor.Template.Value | map</code></td><td style="text-align: left;"></td><td style="text-align: left;">A map to be merged into the action's context.</td></tr></tbody></table><h3 id="options-3">Options</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a href="#reactor-action-context-transform" id="reactor-action-context-transform"><code class="inline">transform</code></a></td><td style="text-align: left;"><code class="inline">(any -&gt; any) | module | nil</code></td><td style="text-align: left;"></td><td style="text-align: left;">An optional transformation function which can be used to modify the context before it is passed to the action.</td></tr></tbody></table><h3 id="introspection-1">Introspection</h3><p>Target: <a href="Ash.Reactor.Dsl.Context.xhtml"><code class="inline">Ash.Reactor.Dsl.Context</code></a></p><h3 id="reactor-action-guard">reactor.action.guard</h3><pre><code class="makeup elixir" translate="no"><span class="n">guard</span><span class="w"> </span><span class="n">fun</span></code></pre><p>Provides a flexible method for conditionally executing a step, or replacing it's result.</p><p>Expects a two arity function which takes the step's arguments and context and returns one of the following:</p><ul><li><code class="inline">:cont</code> - the guard has passed.</li><li><code class="inline">{:halt, result}</code> - the guard has failed - instead of executing the step use the provided result.</li></ul><h3 id="examples">Examples</h3><pre><code class="makeup elixir" translate="no"><span class="n">step</span><span class="w"> </span><span class="ss">:read_file_via_cache</span><span class="w"> </span><span class="k" data-group-id="7294790775-1">do</span><span class="w">
  </span><span class="n">argument</span><span class="w"> </span><span class="ss">:path</span><span class="p">,</span><span class="w"> </span><span class="n">input</span><span class="p" data-group-id="7294790775-2">(</span><span class="ss">:path</span><span class="p" data-group-id="7294790775-2">)</span><span class="w">
  </span><span class="n">run</span><span class="w"> </span><span class="o">&amp;</span><span class="nc">File</span><span class="o">.</span><span class="n">read</span><span class="p" data-group-id="7294790775-3">(</span><span class="ni">&amp;1</span><span class="o">.</span><span class="n">path</span><span class="p" data-group-id="7294790775-3">)</span><span class="w">
  </span><span class="n">guard</span><span class="w"> </span><span class="k" data-group-id="7294790775-4">fn</span><span class="w"> </span><span class="p" data-group-id="7294790775-5">%{</span><span class="ss">path</span><span class="p">:</span><span class="w"> </span><span class="n">path</span><span class="p" data-group-id="7294790775-5">}</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="7294790775-6">%{</span><span class="ss">cache</span><span class="p">:</span><span class="w"> </span><span class="n">cache</span><span class="p" data-group-id="7294790775-6">}</span><span class="w"> </span><span class="o">-&gt;</span><span class="w">
    </span><span class="k">case</span><span class="w"> </span><span class="nc">Cache</span><span class="o">.</span><span class="n">get</span><span class="p" data-group-id="7294790775-7">(</span><span class="n">cache</span><span class="p">,</span><span class="w"> </span><span class="n">path</span><span class="p" data-group-id="7294790775-7">)</span><span class="w"> </span><span class="k" data-group-id="7294790775-8">do</span><span class="w">
      </span><span class="p" data-group-id="7294790775-9">{</span><span class="ss">:ok</span><span class="p">,</span><span class="w"> </span><span class="n">content</span><span class="p" data-group-id="7294790775-9">}</span><span class="w"> </span><span class="o">-&gt;</span><span class="w"> </span><span class="p" data-group-id="7294790775-10">{</span><span class="ss">:halt</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="7294790775-11">{</span><span class="ss">:ok</span><span class="p">,</span><span class="w"> </span><span class="n">content</span><span class="p" data-group-id="7294790775-11">}</span><span class="p" data-group-id="7294790775-10">}</span><span class="w">
      </span><span class="bp">_</span><span class="w"> </span><span class="o">-&gt;</span><span class="w"> </span><span class="ss">:cont</span><span class="w">
    </span><span class="k" data-group-id="7294790775-8">end</span><span class="w">
  </span><span class="k" data-group-id="7294790775-4">end</span><span class="w">
</span><span class="k" data-group-id="7294790775-1">end</span><span class="w">
</span></code></pre><h3 id="arguments-3">Arguments</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a class="spark-required" href="#reactor-action-guard-fun" id="reactor-action-guard-fun"><code class="inline">fun</code></a></td><td style="text-align: left;"><code class="inline">(any, any -&gt; any) | mfa</code></td><td style="text-align: left;"></td><td style="text-align: left;">The guard function.</td></tr></tbody></table><h3 id="options-4">Options</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a href="#reactor-action-guard-description" id="reactor-action-guard-description"><code class="inline">description</code></a></td><td style="text-align: left;"><code class="inline">String.t</code></td><td style="text-align: left;"></td><td style="text-align: left;">An optional description of the guard.</td></tr></tbody></table><h3 id="introspection-2">Introspection</h3><p>Target: <a href="https://hexdocs.pm/reactor/0.15.6/Reactor.Dsl.Guard.html"><code class="inline">Reactor.Dsl.Guard</code></a></p><h3 id="reactor-action-where">reactor.action.where</h3><pre><code class="makeup elixir" translate="no"><span class="n">where</span><span class="w"> </span><span class="n">predicate</span></code></pre><p>Only execute the surrounding step if the predicate function returns true.</p><p>This is a simple version of <code class="inline">guard</code> which provides more flexibility at the cost of complexity.</p><h3 id="examples-1">Examples</h3><pre><code class="makeup elixir" translate="no"><span class="n">step</span><span class="w"> </span><span class="ss">:read_file</span><span class="w"> </span><span class="k" data-group-id="6326656733-1">do</span><span class="w">
  </span><span class="n">argument</span><span class="w"> </span><span class="ss">:path</span><span class="p">,</span><span class="w"> </span><span class="n">input</span><span class="p" data-group-id="6326656733-2">(</span><span class="ss">:path</span><span class="p" data-group-id="6326656733-2">)</span><span class="w">
  </span><span class="n">run</span><span class="w"> </span><span class="o">&amp;</span><span class="nc">File</span><span class="o">.</span><span class="n">read</span><span class="p" data-group-id="6326656733-3">(</span><span class="ni">&amp;1</span><span class="o">.</span><span class="n">path</span><span class="p" data-group-id="6326656733-3">)</span><span class="w">
  </span><span class="n">where</span><span class="w"> </span><span class="o">&amp;</span><span class="nc">File</span><span class="o">.</span><span class="n">exists?</span><span class="p" data-group-id="6326656733-4">(</span><span class="ni">&amp;1</span><span class="o">.</span><span class="n">path</span><span class="p" data-group-id="6326656733-4">)</span><span class="w">
</span><span class="k" data-group-id="6326656733-1">end</span><span class="w">
</span></code></pre><h3 id="arguments-4">Arguments</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a class="spark-required" href="#reactor-action-where-predicate" id="reactor-action-where-predicate"><code class="inline">predicate</code></a></td><td style="text-align: left;"><code class="inline">(any -&gt; any) | mfa | (any, any -&gt; any) | mfa</code></td><td style="text-align: left;"></td><td style="text-align: left;">Provide a function which takes the step arguments and optionally the context and returns a boolean value.</td></tr></tbody></table><h3 id="options-5">Options</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a href="#reactor-action-where-description" id="reactor-action-where-description"><code class="inline">description</code></a></td><td style="text-align: left;"><code class="inline">String.t</code></td><td style="text-align: left;"></td><td style="text-align: left;">An optional description of the guard.</td></tr></tbody></table><h3 id="introspection-3">Introspection</h3><p>Target: <a href="https://hexdocs.pm/reactor/0.15.6/Reactor.Dsl.Where.html"><code class="inline">Reactor.Dsl.Where</code></a></p><h3 id="reactor-action-inputs">reactor.action.inputs</h3><pre><code class="makeup elixir" translate="no"><span class="n">inputs</span><span class="w"> </span><span class="n">template</span></code></pre><p>Specify the inputs for an action</p><h3 id="examples-2">Examples</h3><pre><code class="makeup elixir" translate="no"><span class="n">inputs</span><span class="w"> </span><span class="p" data-group-id="9384481233-1">%{</span><span class="w">
  </span><span class="ss">author</span><span class="p">:</span><span class="w"> </span><span class="n">result</span><span class="p" data-group-id="9384481233-2">(</span><span class="ss">:get_user</span><span class="p" data-group-id="9384481233-2">)</span><span class="p">,</span><span class="w">
  </span><span class="ss">title</span><span class="p">:</span><span class="w"> </span><span class="n">input</span><span class="p" data-group-id="9384481233-3">(</span><span class="ss">:title</span><span class="p" data-group-id="9384481233-3">)</span><span class="p">,</span><span class="w">
  </span><span class="ss">body</span><span class="p">:</span><span class="w"> </span><span class="n">input</span><span class="p" data-group-id="9384481233-4">(</span><span class="ss">:body</span><span class="p" data-group-id="9384481233-4">)</span><span class="w">
</span><span class="p" data-group-id="9384481233-1">}</span><span class="w">
</span></code></pre><pre><code class="makeup elixir" translate="no"><span class="n">inputs</span><span class="p" data-group-id="0446390326-1">(</span><span class="ss">author</span><span class="p">:</span><span class="w"> </span><span class="n">result</span><span class="p" data-group-id="0446390326-2">(</span><span class="ss">:get_user</span><span class="p" data-group-id="0446390326-2">)</span><span class="p" data-group-id="0446390326-1">)</span><span class="w">
</span></code></pre><h3 id="arguments-5">Arguments</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a class="spark-required" href="#reactor-action-inputs-template" id="reactor-action-inputs-template"><code class="inline">template</code></a></td><td style="text-align: left;"><code class="inline">%{optional(atom) =&gt; Reactor.Template.Element | Reactor.Template.Input | Reactor.Template.Result | Reactor.Template.Value} | keyword(Reactor.Template.Element | Reactor.Template.Input | Reactor.Template.Result | Reactor.Template.Value)</code></td><td style="text-align: left;"></td><td style="text-align: left;"></td></tr></tbody></table><h3 id="options-6">Options</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a href="#reactor-action-inputs-transform" id="reactor-action-inputs-transform"><code class="inline">transform</code></a></td><td style="text-align: left;"><code class="inline">(any -&gt; any) | module | nil</code></td><td style="text-align: left;"></td><td style="text-align: left;">An optional transformation function which will transform the inputs before executing the action.</td></tr></tbody></table><h3 id="introspection-4">Introspection</h3><p>Target: <a href="Ash.Reactor.Dsl.Inputs.xhtml"><code class="inline">Ash.Reactor.Dsl.Inputs</code></a></p><h3 id="reactor-action-tenant">reactor.action.tenant</h3><pre><code class="makeup elixir" translate="no"><span class="n">tenant</span><span class="w"> </span><span class="n">source</span></code></pre><p>Specifies the action tenant</p><h3 id="arguments-6">Arguments</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a class="spark-required" href="#reactor-action-tenant-source" id="reactor-action-tenant-source"><code class="inline">source</code></a></td><td style="text-align: left;"><code class="inline">Reactor.Template.Element | Reactor.Template.Input | Reactor.Template.Result | Reactor.Template.Value</code></td><td style="text-align: left;"></td><td style="text-align: left;">What to use as the source of the tenant.</td></tr></tbody></table><h3 id="options-7">Options</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a href="#reactor-action-tenant-transform" id="reactor-action-tenant-transform"><code class="inline">transform</code></a></td><td style="text-align: left;"><code class="inline">(any -&gt; any) | module | nil</code></td><td style="text-align: left;"></td><td style="text-align: left;">An optional transformation function which can be used to modify the tenant before it is passed to the action.</td></tr></tbody></table><h3 id="introspection-5">Introspection</h3><p>Target: <a href="Ash.Reactor.Dsl.Tenant.xhtml"><code class="inline">Ash.Reactor.Dsl.Tenant</code></a></p><h3 id="reactor-action-wait_for">reactor.action.wait_for</h3><pre><code class="makeup elixir" translate="no"><span class="n">wait_for</span><span class="w"> </span><span class="n">names</span></code></pre><p>Wait for the named step to complete before allowing this one to start.</p><p>Desugars to <code class="inline">argument :_, result(step_to_wait_for)</code></p><h3 id="examples-3">Examples</h3><pre><code class="makeup elixir" translate="no"><span class="n">wait_for</span><span class="w"> </span><span class="ss">:create_user</span></code></pre><h3 id="arguments-7">Arguments</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a class="spark-required" href="#reactor-action-wait_for-names" id="reactor-action-wait_for-names"><code class="inline">names</code></a></td><td style="text-align: left;"><code class="inline">atom | list(atom)</code></td><td style="text-align: left;"></td><td style="text-align: left;">The name of the step to wait for.</td></tr></tbody></table><h3 id="options-8">Options</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a href="#reactor-action-wait_for-description" id="reactor-action-wait_for-description"><code class="inline">description</code></a></td><td style="text-align: left;"><code class="inline">String.t</code></td><td style="text-align: left;"></td><td style="text-align: left;">An optional description.</td></tr></tbody></table><h3 id="introspection-6">Introspection</h3><p>Target: <a href="https://hexdocs.pm/reactor/0.15.6/Reactor.Dsl.WaitFor.html"><code class="inline">Reactor.Dsl.WaitFor</code></a></p><h3 id="introspection-7">Introspection</h3><p>Target: <a href="Ash.Reactor.Dsl.Action.xhtml"><code class="inline">Ash.Reactor.Dsl.Action</code></a></p><h3 id="reactor-ash_step">reactor.ash_step</h3><pre><code class="makeup elixir" translate="no"><span class="n">ash_step</span><span class="w"> </span><span class="n">name</span><span class="p">,</span><span class="w"> </span><span class="n">impl</span><span class="w"> </span><span class="o">\\</span><span class="w"> </span><span class="no">nil</span></code></pre><p>Specifies a Ash.Reactor step.</p><p>This is basically a wrapper around <code class="inline">Reactor.step</code>, in order to handle
any returned notifications from the run step/function.</p><p>See the <a href="https://hexdocs.pm/reactor/0.15.6/Reactor.Step.html"><code class="inline">Reactor.Step</code></a> behaviour for more information.</p><h3 id="nested-dsls-1">Nested DSLs</h3><ul><li><a href="#reactor-ash_step-argument">argument</a></li><li><a href="#reactor-ash_step-wait_for">wait_for</a></li><li><a href="#reactor-ash_step-guard">guard</a></li><li><a href="#reactor-ash_step-where">where</a></li></ul><h3 id="examples-4">Examples</h3><pre><code class="makeup elixir" translate="no"><span class="n">ash_step</span><span class="w"> </span><span class="ss">:create_post</span><span class="p">,</span><span class="w"> </span><span class="nc">MyApp.CreatePostStep</span><span class="w"> </span><span class="k" data-group-id="5520787920-1">do</span><span class="w">
  </span><span class="n">argument</span><span class="w"> </span><span class="ss">:title</span><span class="p">,</span><span class="w"> </span><span class="n">input</span><span class="p" data-group-id="5520787920-2">(</span><span class="ss">:title</span><span class="p" data-group-id="5520787920-2">)</span><span class="w">
</span><span class="k" data-group-id="5520787920-1">end</span><span class="w">
</span></code></pre><pre><code class="makeup elixir" translate="no"><span class="n">ash_step</span><span class="w"> </span><span class="ss">:create_post</span><span class="w"> </span><span class="k" data-group-id="5052934009-1">do</span><span class="w">
  </span><span class="n">argument</span><span class="w"> </span><span class="ss">:title</span><span class="p">,</span><span class="w"> </span><span class="n">input</span><span class="p" data-group-id="5052934009-2">(</span><span class="ss">:title</span><span class="p" data-group-id="5052934009-2">)</span><span class="w">

  </span><span class="n">run</span><span class="w"> </span><span class="k" data-group-id="5052934009-3">fn</span><span class="w"> </span><span class="p" data-group-id="5052934009-4">%{</span><span class="ss">title</span><span class="p">:</span><span class="w"> </span><span class="n">title</span><span class="p" data-group-id="5052934009-4">}</span><span class="p">,</span><span class="w"> </span><span class="bp">_</span><span class="w"> </span><span class="o">-&gt;</span><span class="w">
    </span><span class="nc">MyApp.Post</span><span class="o">.</span><span class="n">create</span><span class="p" data-group-id="5052934009-5">(</span><span class="n">title</span><span class="p">,</span><span class="w"> </span><span class="ss">return_notifications?</span><span class="p">:</span><span class="w"> </span><span class="no">true</span><span class="p" data-group-id="5052934009-5">)</span><span class="w">
  </span><span class="k" data-group-id="5052934009-3">end</span><span class="w">
</span><span class="k" data-group-id="5052934009-1">end</span><span class="w">
</span></code></pre><h3 id="arguments-8">Arguments</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a class="spark-required" href="#reactor-ash_step-name" id="reactor-ash_step-name"><code class="inline">name</code></a></td><td style="text-align: left;"><code class="inline">atom</code></td><td style="text-align: left;"></td><td style="text-align: left;">A unique name for the step. Used when choosing the return value of the Reactor and for arguments into other steps.</td></tr><tr><td style="text-align: left;"><a href="#reactor-ash_step-impl" id="reactor-ash_step-impl"><code class="inline">impl</code></a></td><td style="text-align: left;"><code class="inline">module | nil</code></td><td style="text-align: left;"></td><td style="text-align: left;">A module that implements the <a href="https://hexdocs.pm/reactor/0.15.6/Reactor.Step.html"><code class="inline">Reactor.Step</code></a> behaviour that provides the implementation.</td></tr></tbody></table><h3 id="options-9">Options</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a href="#reactor-ash_step-run" id="reactor-ash_step-run"><code class="inline">run</code></a></td><td style="text-align: left;"><code class="inline">(any -&gt; any) | mfa | (any, any -&gt; any) | mfa</code></td><td style="text-align: left;"></td><td style="text-align: left;">Provide an anonymous function which implements the <code class="inline">run/3</code> callback. Cannot be provided at the same time as the <code class="inline">impl</code> argument.</td></tr><tr><td style="text-align: left;"><a href="#reactor-ash_step-undo" id="reactor-ash_step-undo"><code class="inline">undo</code></a></td><td style="text-align: left;"><code class="inline">(any -&gt; any) | mfa | (any, any -&gt; any) | mfa | (any, any, any -&gt; any) | mfa</code></td><td style="text-align: left;"></td><td style="text-align: left;">Provide an anonymous function which implements the <code class="inline">undo/4</code> callback. Cannot be provided at the same time as the <code class="inline">impl</code> argument.</td></tr><tr><td style="text-align: left;"><a href="#reactor-ash_step-compensate" id="reactor-ash_step-compensate"><code class="inline">compensate</code></a></td><td style="text-align: left;"><code class="inline">(any -&gt; any) | mfa | (any, any -&gt; any) | mfa | (any, any, any -&gt; any) | mfa</code></td><td style="text-align: left;"></td><td style="text-align: left;">Provide an anonymous function which implements the <code class="inline">undo/4</code> callback. Cannot be provided at the same time as the <code class="inline">impl</code> argument.</td></tr><tr><td style="text-align: left;"><a href="#reactor-ash_step-max_retries" id="reactor-ash_step-max_retries"><code class="inline">max_retries</code></a></td><td style="text-align: left;"><code class="inline">:infinity | non_neg_integer</code></td><td style="text-align: left;"><code class="inline">:infinity</code></td><td style="text-align: left;">The maximum number of times that the step can be retried before failing. Only used when the result of the <code class="inline">compensate/4</code> callback is <code class="inline">:retry</code>.</td></tr><tr><td style="text-align: left;"><a href="#reactor-ash_step-async?" id="reactor-ash_step-async?"><code class="inline">async?</code></a></td><td style="text-align: left;"><code class="inline">boolean</code></td><td style="text-align: left;"><code class="inline">true</code></td><td style="text-align: left;">When set to true the step will be executed asynchronously via Reactor's <code class="inline">TaskSupervisor</code>.</td></tr><tr><td style="text-align: left;"><a href="#reactor-ash_step-transform" id="reactor-ash_step-transform"><code class="inline">transform</code></a></td><td style="text-align: left;"><code class="inline">(any -&gt; any) | module | nil</code></td><td style="text-align: left;"></td><td style="text-align: left;">An optional transformation function which can be used to modify the entire argument map before it is passed to the step.</td></tr></tbody></table><h3 id="reactor-ash_step-argument">reactor.ash_step.argument</h3><pre><code class="makeup elixir" translate="no"><span class="n">argument</span><span class="w"> </span><span class="n">name</span><span class="p">,</span><span class="w"> </span><span class="n">source</span><span class="w"> </span><span class="o">\\</span><span class="w"> </span><span class="no">nil</span></code></pre><p>Specifies an argument to a Reactor step.</p><p>Each argument is a value which is either the result of another step, or an input value.</p><p>Individual arguments can be transformed with an arbitrary function before
being passed to any steps.</p><h3 id="examples-5">Examples</h3><pre><code class="makeup elixir" translate="no"><span class="n">argument</span><span class="w"> </span><span class="ss">:name</span><span class="p">,</span><span class="w"> </span><span class="n">input</span><span class="p" data-group-id="8582836146-1">(</span><span class="ss">:name</span><span class="p" data-group-id="8582836146-1">)</span><span class="w">
</span></code></pre><pre><code class="makeup elixir" translate="no"><span class="n">argument</span><span class="w"> </span><span class="ss">:year</span><span class="p">,</span><span class="w"> </span><span class="n">input</span><span class="p" data-group-id="9048450600-1">(</span><span class="ss">:date</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="9048450600-2">[</span><span class="ss">:year</span><span class="p" data-group-id="9048450600-2">]</span><span class="p" data-group-id="9048450600-1">)</span><span class="w">
</span></code></pre><pre><code class="makeup elixir" translate="no"><span class="n">argument</span><span class="w"> </span><span class="ss">:user</span><span class="p">,</span><span class="w"> </span><span class="n">result</span><span class="p" data-group-id="9887433869-1">(</span><span class="ss">:create_user</span><span class="p" data-group-id="9887433869-1">)</span><span class="w">
</span></code></pre><pre><code class="makeup elixir" translate="no"><span class="n">argument</span><span class="w"> </span><span class="ss">:user_id</span><span class="p">,</span><span class="w"> </span><span class="n">result</span><span class="p" data-group-id="2389661228-1">(</span><span class="ss">:create_user</span><span class="p" data-group-id="2389661228-1">)</span><span class="w"> </span><span class="k" data-group-id="2389661228-2">do</span><span class="w">
  </span><span class="n">transform</span><span class="w"> </span><span class="o">&amp;</span><span class="w"> </span><span class="ni">&amp;1</span><span class="o">.</span><span class="n">id</span><span class="w">
</span><span class="k" data-group-id="2389661228-2">end</span><span class="w">
</span></code></pre><pre><code class="makeup elixir" translate="no"><span class="n">argument</span><span class="w"> </span><span class="ss">:user_id</span><span class="p">,</span><span class="w"> </span><span class="n">result</span><span class="p" data-group-id="5108209308-1">(</span><span class="ss">:create_user</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="5108209308-2">[</span><span class="ss">:id</span><span class="p" data-group-id="5108209308-2">]</span><span class="p" data-group-id="5108209308-1">)</span><span class="w">
</span></code></pre><pre><code class="makeup elixir" translate="no"><span class="n">argument</span><span class="w"> </span><span class="ss">:three</span><span class="p">,</span><span class="w"> </span><span class="n">value</span><span class="p" data-group-id="2823920739-1">(</span><span class="mi">3</span><span class="p" data-group-id="2823920739-1">)</span><span class="w">
</span></code></pre><h3 id="arguments-9">Arguments</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a class="spark-required" href="#reactor-ash_step-argument-name" id="reactor-ash_step-argument-name"><code class="inline">name</code></a></td><td style="text-align: left;"><code class="inline">atom</code></td><td style="text-align: left;"></td><td style="text-align: left;">The name of the argument which will be used as the key in the <code class="inline">arguments</code> map passed to the implementation.</td></tr><tr><td style="text-align: left;"><a class="spark-required" href="#reactor-ash_step-argument-source" id="reactor-ash_step-argument-source"><code class="inline">source</code></a></td><td style="text-align: left;"><code class="inline">Reactor.Template.Element | Reactor.Template.Input | Reactor.Template.Result | Reactor.Template.Value</code></td><td style="text-align: left;"></td><td style="text-align: left;">What to use as the source of the argument. See <a href="https://hexdocs.pm/reactor/0.15.6/Reactor.Dsl.Argument.html"><code class="inline">Reactor.Dsl.Argument</code></a> for more information.</td></tr></tbody></table><h3 id="options-10">Options</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a href="#reactor-ash_step-argument-description" id="reactor-ash_step-argument-description"><code class="inline">description</code></a></td><td style="text-align: left;"><code class="inline">String.t | nil</code></td><td style="text-align: left;"></td><td style="text-align: left;">An optional description for the argument.</td></tr><tr><td style="text-align: left;"><a href="#reactor-ash_step-argument-transform" id="reactor-ash_step-argument-transform"><code class="inline">transform</code></a></td><td style="text-align: left;"><code class="inline">(any -&gt; any) | module | nil</code></td><td style="text-align: left;"></td><td style="text-align: left;">An optional transformation function which can be used to modify the argument before it is passed to the step.</td></tr></tbody></table><h3 id="introspection-8">Introspection</h3><p>Target: <a href="https://hexdocs.pm/reactor/0.15.6/Reactor.Dsl.Argument.html"><code class="inline">Reactor.Dsl.Argument</code></a></p><h3 id="reactor-ash_step-wait_for">reactor.ash_step.wait_for</h3><pre><code class="makeup elixir" translate="no"><span class="n">wait_for</span><span class="w"> </span><span class="n">names</span></code></pre><p>Wait for the named step to complete before allowing this one to start.</p><p>Desugars to <code class="inline">argument :_, result(step_to_wait_for)</code></p><h3 id="examples-6">Examples</h3><pre><code class="makeup elixir" translate="no"><span class="n">wait_for</span><span class="w"> </span><span class="ss">:create_user</span></code></pre><h3 id="arguments-10">Arguments</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a class="spark-required" href="#reactor-ash_step-wait_for-names" id="reactor-ash_step-wait_for-names"><code class="inline">names</code></a></td><td style="text-align: left;"><code class="inline">atom | list(atom)</code></td><td style="text-align: left;"></td><td style="text-align: left;">The name of the step to wait for.</td></tr></tbody></table><h3 id="options-11">Options</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a href="#reactor-ash_step-wait_for-description" id="reactor-ash_step-wait_for-description"><code class="inline">description</code></a></td><td style="text-align: left;"><code class="inline">String.t</code></td><td style="text-align: left;"></td><td style="text-align: left;">An optional description.</td></tr></tbody></table><h3 id="introspection-9">Introspection</h3><p>Target: <a href="https://hexdocs.pm/reactor/0.15.6/Reactor.Dsl.WaitFor.html"><code class="inline">Reactor.Dsl.WaitFor</code></a></p><h3 id="reactor-ash_step-guard">reactor.ash_step.guard</h3><pre><code class="makeup elixir" translate="no"><span class="n">guard</span><span class="w"> </span><span class="n">fun</span></code></pre><p>Provides a flexible method for conditionally executing a step, or replacing it's result.</p><p>Expects a two arity function which takes the step's arguments and context and returns one of the following:</p><ul><li><code class="inline">:cont</code> - the guard has passed.</li><li><code class="inline">{:halt, result}</code> - the guard has failed - instead of executing the step use the provided result.</li></ul><h3 id="examples-7">Examples</h3><pre><code class="makeup elixir" translate="no"><span class="n">step</span><span class="w"> </span><span class="ss">:read_file_via_cache</span><span class="w"> </span><span class="k" data-group-id="4487016360-1">do</span><span class="w">
  </span><span class="n">argument</span><span class="w"> </span><span class="ss">:path</span><span class="p">,</span><span class="w"> </span><span class="n">input</span><span class="p" data-group-id="4487016360-2">(</span><span class="ss">:path</span><span class="p" data-group-id="4487016360-2">)</span><span class="w">
  </span><span class="n">run</span><span class="w"> </span><span class="o">&amp;</span><span class="nc">File</span><span class="o">.</span><span class="n">read</span><span class="p" data-group-id="4487016360-3">(</span><span class="ni">&amp;1</span><span class="o">.</span><span class="n">path</span><span class="p" data-group-id="4487016360-3">)</span><span class="w">
  </span><span class="n">guard</span><span class="w"> </span><span class="k" data-group-id="4487016360-4">fn</span><span class="w"> </span><span class="p" data-group-id="4487016360-5">%{</span><span class="ss">path</span><span class="p">:</span><span class="w"> </span><span class="n">path</span><span class="p" data-group-id="4487016360-5">}</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="4487016360-6">%{</span><span class="ss">cache</span><span class="p">:</span><span class="w"> </span><span class="n">cache</span><span class="p" data-group-id="4487016360-6">}</span><span class="w"> </span><span class="o">-&gt;</span><span class="w">
    </span><span class="k">case</span><span class="w"> </span><span class="nc">Cache</span><span class="o">.</span><span class="n">get</span><span class="p" data-group-id="4487016360-7">(</span><span class="n">cache</span><span class="p">,</span><span class="w"> </span><span class="n">path</span><span class="p" data-group-id="4487016360-7">)</span><span class="w"> </span><span class="k" data-group-id="4487016360-8">do</span><span class="w">
      </span><span class="p" data-group-id="4487016360-9">{</span><span class="ss">:ok</span><span class="p">,</span><span class="w"> </span><span class="n">content</span><span class="p" data-group-id="4487016360-9">}</span><span class="w"> </span><span class="o">-&gt;</span><span class="w"> </span><span class="p" data-group-id="4487016360-10">{</span><span class="ss">:halt</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="4487016360-11">{</span><span class="ss">:ok</span><span class="p">,</span><span class="w"> </span><span class="n">content</span><span class="p" data-group-id="4487016360-11">}</span><span class="p" data-group-id="4487016360-10">}</span><span class="w">
      </span><span class="bp">_</span><span class="w"> </span><span class="o">-&gt;</span><span class="w"> </span><span class="ss">:cont</span><span class="w">
    </span><span class="k" data-group-id="4487016360-8">end</span><span class="w">
  </span><span class="k" data-group-id="4487016360-4">end</span><span class="w">
</span><span class="k" data-group-id="4487016360-1">end</span><span class="w">
</span></code></pre><h3 id="arguments-11">Arguments</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a class="spark-required" href="#reactor-ash_step-guard-fun" id="reactor-ash_step-guard-fun"><code class="inline">fun</code></a></td><td style="text-align: left;"><code class="inline">(any, any -&gt; any) | mfa</code></td><td style="text-align: left;"></td><td style="text-align: left;">The guard function.</td></tr></tbody></table><h3 id="options-12">Options</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a href="#reactor-ash_step-guard-description" id="reactor-ash_step-guard-description"><code class="inline">description</code></a></td><td style="text-align: left;"><code class="inline">String.t</code></td><td style="text-align: left;"></td><td style="text-align: left;">An optional description of the guard.</td></tr></tbody></table><h3 id="introspection-10">Introspection</h3><p>Target: <a href="https://hexdocs.pm/reactor/0.15.6/Reactor.Dsl.Guard.html"><code class="inline">Reactor.Dsl.Guard</code></a></p><h3 id="reactor-ash_step-where">reactor.ash_step.where</h3><pre><code class="makeup elixir" translate="no"><span class="n">where</span><span class="w"> </span><span class="n">predicate</span></code></pre><p>Only execute the surrounding step if the predicate function returns true.</p><p>This is a simple version of <code class="inline">guard</code> which provides more flexibility at the cost of complexity.</p><h3 id="examples-8">Examples</h3><pre><code class="makeup elixir" translate="no"><span class="n">step</span><span class="w"> </span><span class="ss">:read_file</span><span class="w"> </span><span class="k" data-group-id="3749220469-1">do</span><span class="w">
  </span><span class="n">argument</span><span class="w"> </span><span class="ss">:path</span><span class="p">,</span><span class="w"> </span><span class="n">input</span><span class="p" data-group-id="3749220469-2">(</span><span class="ss">:path</span><span class="p" data-group-id="3749220469-2">)</span><span class="w">
  </span><span class="n">run</span><span class="w"> </span><span class="o">&amp;</span><span class="nc">File</span><span class="o">.</span><span class="n">read</span><span class="p" data-group-id="3749220469-3">(</span><span class="ni">&amp;1</span><span class="o">.</span><span class="n">path</span><span class="p" data-group-id="3749220469-3">)</span><span class="w">
  </span><span class="n">where</span><span class="w"> </span><span class="o">&amp;</span><span class="nc">File</span><span class="o">.</span><span class="n">exists?</span><span class="p" data-group-id="3749220469-4">(</span><span class="ni">&amp;1</span><span class="o">.</span><span class="n">path</span><span class="p" data-group-id="3749220469-4">)</span><span class="w">
</span><span class="k" data-group-id="3749220469-1">end</span><span class="w">
</span></code></pre><h3 id="arguments-12">Arguments</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a class="spark-required" href="#reactor-ash_step-where-predicate" id="reactor-ash_step-where-predicate"><code class="inline">predicate</code></a></td><td style="text-align: left;"><code class="inline">(any -&gt; any) | mfa | (any, any -&gt; any) | mfa</code></td><td style="text-align: left;"></td><td style="text-align: left;">Provide a function which takes the step arguments and optionally the context and returns a boolean value.</td></tr></tbody></table><h3 id="options-13">Options</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a href="#reactor-ash_step-where-description" id="reactor-ash_step-where-description"><code class="inline">description</code></a></td><td style="text-align: left;"><code class="inline">String.t</code></td><td style="text-align: left;"></td><td style="text-align: left;">An optional description of the guard.</td></tr></tbody></table><h3 id="introspection-11">Introspection</h3><p>Target: <a href="https://hexdocs.pm/reactor/0.15.6/Reactor.Dsl.Where.html"><code class="inline">Reactor.Dsl.Where</code></a></p><h3 id="introspection-12">Introspection</h3><p>Target: <a href="Ash.Reactor.Dsl.AshStep.xhtml"><code class="inline">Ash.Reactor.Dsl.AshStep</code></a></p><h3 id="reactor-bulk_create">reactor.bulk_create</h3><pre><code class="makeup elixir" translate="no"><span class="n">bulk_create</span><span class="w"> </span><span class="n">name</span><span class="p">,</span><span class="w"> </span><span class="n">resource</span><span class="p">,</span><span class="w"> </span><span class="n">action</span><span class="w"> </span><span class="o">\\</span><span class="w"> </span><span class="no">nil</span></code></pre><p>Declares a step which will call a create action on a resource with a collection of inputs.</p><section role="note" class="admonition warning"><h3 id="check-the-docs" class="admonition-title warning">Check the docs!</h3><p>Make sure to thoroughly read and understand the documentation in <a href="Ash.xhtml#bulk_create/4"><code class="inline">Ash.bulk_create/4</code></a> before using. Read each option and note the default values. By default, bulk creates don't return records or errors, and don't emit notifications.</p></section><p>Caveats/differences from <a href="Ash.xhtml#bulk_create/4"><code class="inline">Ash.bulk_create/4</code></a>:</p><ol><li><code class="inline">max_concurrency</code> specifies the number of tasks that Ash will start to process batches, and has no effect on Reactor concurrency targets.  It's could be possible to create a very large number of processes if a number of steps are running bulk actions with a high degree of concurrency.</li><li>Setting <code class="inline">notify?</code> to <code class="inline">true</code> will cause both <code class="inline">notify?</code> and <code class="inline">return_notifications?</code> to be set to true in the underlying call to <a href="Ash.xhtml#bulk_create/4"><code class="inline">Ash.bulk_create/4</code></a>. Notifications will then be managed by the <a href="Ash.Reactor.Notifications.xhtml"><code class="inline">Ash.Reactor.Notifications</code></a> Reactor middleware.</li><li>If you specify an undo action it must be a generic action which takes the bulk result as it's only argument.</li></ol><section role="note" class="admonition tip"><h4 class="admonition-title tip">Undo behaviour</h4><p>This step has three different modes of undo.</p><ul><li><code class="inline">never</code> - The result of the action is never undone.  This is the default.</li><li><code class="inline">always</code> - The <code class="inline">undo_action</code> will always be called.</li><li><code class="inline">outside_transaction</code> - The <code class="inline">undo_action</code> will not be called when running inside a <code class="inline">transaction</code> block, but will be otherwise.</li></ul></section><h3 id="nested-dsls-2">Nested DSLs</h3><ul><li><a href="#reactor-bulk_create-actor">actor</a></li><li><a href="#reactor-bulk_create-context">context</a></li><li><a href="#reactor-bulk_create-guard">guard</a></li><li><a href="#reactor-bulk_create-where">where</a></li><li><a href="#reactor-bulk_create-load">load</a></li><li><a href="#reactor-bulk_create-tenant">tenant</a></li><li><a href="#reactor-bulk_create-wait_for">wait_for</a></li></ul><h3 id="examples-9">Examples</h3><pre><code class="makeup elixir" translate="no"><span class="n">bulk_create</span><span class="w"> </span><span class="ss">:create_posts</span><span class="p">,</span><span class="w"> </span><span class="nc">MyApp.Post</span><span class="p">,</span><span class="w"> </span><span class="ss">:create</span><span class="w"> </span><span class="k" data-group-id="3148766260-1">do</span><span class="w">
  </span><span class="n">initial</span><span class="w"> </span><span class="n">input</span><span class="p" data-group-id="3148766260-2">(</span><span class="ss">:titles</span><span class="p" data-group-id="3148766260-2">)</span><span class="w">
  </span><span class="n">actor</span><span class="w"> </span><span class="n">result</span><span class="p" data-group-id="3148766260-3">(</span><span class="ss">:get_user</span><span class="p" data-group-id="3148766260-3">)</span><span class="w">
  </span><span class="n">tenant</span><span class="w"> </span><span class="n">result</span><span class="p" data-group-id="3148766260-4">(</span><span class="ss">:get_organisation</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="3148766260-5">[</span><span class="ss">:id</span><span class="p" data-group-id="3148766260-5">]</span><span class="p" data-group-id="3148766260-4">)</span><span class="w">
</span><span class="k" data-group-id="3148766260-1">end</span><span class="w">
</span></code></pre><h3 id="arguments-13">Arguments</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a class="spark-required" href="#reactor-bulk_create-name" id="reactor-bulk_create-name"><code class="inline">name</code></a></td><td style="text-align: left;"><code class="inline">atom</code></td><td style="text-align: left;"></td><td style="text-align: left;">A unique name for the step.</td></tr><tr><td style="text-align: left;"><a class="spark-required" href="#reactor-bulk_create-resource" id="reactor-bulk_create-resource"><code class="inline">resource</code></a></td><td style="text-align: left;"><code class="inline">module</code></td><td style="text-align: left;"></td><td style="text-align: left;">The resource to call the action on.</td></tr><tr><td style="text-align: left;"><a href="#reactor-bulk_create-action" id="reactor-bulk_create-action"><code class="inline">action</code></a></td><td style="text-align: left;"><code class="inline">atom</code></td><td style="text-align: left;"></td><td style="text-align: left;">The name of the action to call on the resource.</td></tr></tbody></table><h3 id="options-14">Options</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a class="spark-required" href="#reactor-bulk_create-initial" id="reactor-bulk_create-initial"><code class="inline">initial</code></a></td><td style="text-align: left;"><code class="inline">Reactor.Template.Element | Reactor.Template.Input | Reactor.Template.Result | Reactor.Template.Value</code></td><td style="text-align: left;"></td><td style="text-align: left;">A collection of inputs to pass to the create action. Must implement the <a href="https://hexdocs.pm/elixir/Enumerable.html"><code class="inline">Enumerable</code></a> protocol.</td></tr><tr><td style="text-align: left;"><a href="#reactor-bulk_create-assume_casted?" id="reactor-bulk_create-assume_casted?"><code class="inline">assume_casted?</code></a></td><td style="text-align: left;"><code class="inline">boolean</code></td><td style="text-align: left;"><code class="inline">false</code></td><td style="text-align: left;">Whether or not to cast attributes and arguments as input. This is an optimization for cases where the input is already casted and/or not in need of casting</td></tr><tr><td style="text-align: left;"><a href="#reactor-bulk_create-authorize_changeset_with" id="reactor-bulk_create-authorize_changeset_with"><code class="inline">authorize_changeset_with</code></a></td><td style="text-align: left;"><code class="inline">:filter | :error</code></td><td style="text-align: left;"><code class="inline">:filter</code></td><td style="text-align: left;">If set to <code class="inline">:error</code>, instead of filtering unauthorized changes, unauthorized changes will raise an appropriate forbidden error</td></tr><tr><td style="text-align: left;"><a href="#reactor-bulk_create-authorize_query_with" id="reactor-bulk_create-authorize_query_with"><code class="inline">authorize_query_with</code></a></td><td style="text-align: left;"><code class="inline">:filter | :error</code></td><td style="text-align: left;"><code class="inline">:filter</code></td><td style="text-align: left;">If set to <code class="inline">:error</code>, instead of filtering unauthorized query results, unauthorized query results will raise an appropriate forbidden error</td></tr><tr><td style="text-align: left;"><a href="#reactor-bulk_create-batch_size" id="reactor-bulk_create-batch_size"><code class="inline">batch_size</code></a></td><td style="text-align: left;"><code class="inline">nil | pos_integer</code></td><td style="text-align: left;"></td><td style="text-align: left;">The number of records to include in each batch. Defaults to the <code class="inline">default_limit</code> or <code class="inline">max_page_size</code> of the action, or 100.</td></tr><tr><td style="text-align: left;"><a href="#reactor-bulk_create-max_concurrency" id="reactor-bulk_create-max_concurrency"><code class="inline">max_concurrency</code></a></td><td style="text-align: left;"><code class="inline">non_neg_integer</code></td><td style="text-align: left;"><code class="inline">0</code></td><td style="text-align: left;">If set to a value greater than 0, up to that many tasks will be started to run batches asynchronously.</td></tr><tr><td style="text-align: left;"><a href="#reactor-bulk_create-notification_metadata" id="reactor-bulk_create-notification_metadata"><code class="inline">notification_metadata</code></a></td><td style="text-align: left;"><code class="inline">map | Reactor.Template.Element | Reactor.Template.Input | Reactor.Template.Result | Reactor.Template.Value</code></td><td style="text-align: left;"><code class="inline">%{}</code></td><td style="text-align: left;">Metadata to be merged into the metadata field for all notifications sent from this operation.</td></tr><tr><td style="text-align: left;"><a href="#reactor-bulk_create-notify?" id="reactor-bulk_create-notify?"><code class="inline">notify?</code></a></td><td style="text-align: left;"><code class="inline">boolean</code></td><td style="text-align: left;"><code class="inline">false</code></td><td style="text-align: left;">Whether or not to generate any notifications. This may be intensive for large bulk actions.</td></tr><tr><td style="text-align: left;"><a href="#reactor-bulk_create-read_action" id="reactor-bulk_create-read_action"><code class="inline">read_action</code></a></td><td style="text-align: left;"><code class="inline">atom</code></td><td style="text-align: left;"></td><td style="text-align: left;">The action to use when building the read query.</td></tr><tr><td style="text-align: left;"><a href="#reactor-bulk_create-return_errors?" id="reactor-bulk_create-return_errors?"><code class="inline">return_errors?</code></a></td><td style="text-align: left;"><code class="inline">boolean</code></td><td style="text-align: left;"><code class="inline">true</code></td><td style="text-align: left;">Whether or not to return all of the errors that occur. Defaults to false to account for large inserts.</td></tr><tr><td style="text-align: left;"><a href="#reactor-bulk_create-return_records?" id="reactor-bulk_create-return_records?"><code class="inline">return_records?</code></a></td><td style="text-align: left;"><code class="inline">boolean</code></td><td style="text-align: left;"><code class="inline">false</code></td><td style="text-align: left;">Whether or not to return all of the records that were inserted. Defaults to false to account for large inserts.</td></tr><tr><td style="text-align: left;"><a href="#reactor-bulk_create-return_stream?" id="reactor-bulk_create-return_stream?"><code class="inline">return_stream?</code></a></td><td style="text-align: left;"><code class="inline">boolean</code></td><td style="text-align: left;"><code class="inline">false</code></td><td style="text-align: left;">If set to <code class="inline">true</code>, instead of an <a href="Ash.BulkResult.xhtml"><code class="inline">Ash.BulkResult</code></a>, a mixed stream is returned.</td></tr><tr><td style="text-align: left;"><a href="#reactor-bulk_create-rollback_on_error?" id="reactor-bulk_create-rollback_on_error?"><code class="inline">rollback_on_error?</code></a></td><td style="text-align: left;"><code class="inline">boolean</code></td><td style="text-align: left;"><code class="inline">true</code></td><td style="text-align: left;">Whether or not to rollback the transaction on error, if the resource is in a transaction.</td></tr><tr><td style="text-align: left;"><a href="#reactor-bulk_create-select" id="reactor-bulk_create-select"><code class="inline">select</code></a></td><td style="text-align: left;"><code class="inline">atom | list(atom)</code></td><td style="text-align: left;"></td><td style="text-align: left;">A select statement to apply to records. Ignored if <code class="inline">return_records?</code> is not <code class="inline">true</code>.</td></tr><tr><td style="text-align: left;"><a href="#reactor-bulk_create-skip_unknown_inputs" id="reactor-bulk_create-skip_unknown_inputs"><code class="inline">skip_unknown_inputs</code></a></td><td style="text-align: left;"><code class="inline">atom | String.t | list(atom | String.t)</code></td><td style="text-align: left;"></td><td style="text-align: left;">A list of inputs that, if provided, will be ignored if they are not recognized by the action. Use <code class="inline">:*</code> to indicate all unknown keys.</td></tr><tr><td style="text-align: left;"><a href="#reactor-bulk_create-sorted?" id="reactor-bulk_create-sorted?"><code class="inline">sorted?</code></a></td><td style="text-align: left;"><code class="inline">boolean</code></td><td style="text-align: left;"><code class="inline">false</code></td><td style="text-align: left;">Whether or not to sort results by their input position, in cases where <code class="inline">return_records?</code> is set to <code class="inline">true</code>.</td></tr><tr><td style="text-align: left;"><a href="#reactor-bulk_create-stop_on_error?" id="reactor-bulk_create-stop_on_error?"><code class="inline">stop_on_error?</code></a></td><td style="text-align: left;"><code class="inline">boolean</code></td><td style="text-align: left;"><code class="inline">true</code></td><td style="text-align: left;">If <code class="inline">true</code>, the first encountered error will stop the action and be returned. Otherwise, errors will be skipped.</td></tr><tr><td style="text-align: left;"><a href="#reactor-bulk_create-success_state" id="reactor-bulk_create-success_state"><code class="inline">success_state</code></a></td><td style="text-align: left;"><code class="inline">:success | :partial_success</code></td><td style="text-align: left;"><code class="inline">:success</code></td><td style="text-align: left;">Bulk results can be entirely or partially successful. Chooses the <a href="Ash.BulkResult.xhtml"><code class="inline">Ash.BulkResult</code></a> state to consider the step a success.</td></tr><tr><td style="text-align: left;"><a href="#reactor-bulk_create-timeout" id="reactor-bulk_create-timeout"><code class="inline">timeout</code></a></td><td style="text-align: left;"><code class="inline">timeout</code></td><td style="text-align: left;"></td><td style="text-align: left;">If none is provided, the timeout configured on the domain is used (which defaults to <code class="inline">30_000</code>).</td></tr><tr><td style="text-align: left;"><a href="#reactor-bulk_create-transaction" id="reactor-bulk_create-transaction"><code class="inline">transaction</code></a></td><td style="text-align: left;"><code class="inline">:all | :batch | false</code></td><td style="text-align: left;"><code class="inline">:batch</code></td><td style="text-align: left;">Whether or not to wrap the entire execution in a transaction, each batch, or not at all.</td></tr><tr><td style="text-align: left;"><a href="#reactor-bulk_create-upsert_fields" id="reactor-bulk_create-upsert_fields"><code class="inline">upsert_fields</code></a></td><td style="text-align: left;"><code class="inline">atom | list(atom)</code></td><td style="text-align: left;"></td><td style="text-align: left;">The fields to upsert. If not set, the action's <code class="inline">upsert_fields</code> is used.</td></tr><tr><td style="text-align: left;"><a href="#reactor-bulk_create-upsert_identity" id="reactor-bulk_create-upsert_identity"><code class="inline">upsert_identity</code></a></td><td style="text-align: left;"><code class="inline">atom</code></td><td style="text-align: left;"></td><td style="text-align: left;">The identity to use for the upsert</td></tr><tr><td style="text-align: left;"><a href="#reactor-bulk_create-upsert?" id="reactor-bulk_create-upsert?"><code class="inline">upsert?</code></a></td><td style="text-align: left;"><code class="inline">boolean</code></td><td style="text-align: left;"><code class="inline">false</code></td><td style="text-align: left;">Whether or not this action should be executed as an upsert.</td></tr><tr><td style="text-align: left;"><a href="#reactor-bulk_create-domain" id="reactor-bulk_create-domain"><code class="inline">domain</code></a></td><td style="text-align: left;"><code class="inline">module</code></td><td style="text-align: left;"></td><td style="text-align: left;">The Domain to use when calling the action.  Defaults to the Domain set on the resource or in the <code class="inline">ash</code> section.</td></tr><tr><td style="text-align: left;"><a href="#reactor-bulk_create-async?" id="reactor-bulk_create-async?"><code class="inline">async?</code></a></td><td style="text-align: left;"><code class="inline">boolean</code></td><td style="text-align: left;"><code class="inline">true</code></td><td style="text-align: left;">When set to true the step will be executed asynchronously via Reactor's <code class="inline">TaskSupervisor</code>.</td></tr><tr><td style="text-align: left;"><a href="#reactor-bulk_create-authorize?" id="reactor-bulk_create-authorize?"><code class="inline">authorize?</code></a></td><td style="text-align: left;"><code class="inline">boolean | nil</code></td><td style="text-align: left;"></td><td style="text-align: left;">Explicitly enable or disable authorization for the action.</td></tr><tr><td style="text-align: left;"><a href="#reactor-bulk_create-description" id="reactor-bulk_create-description"><code class="inline">description</code></a></td><td style="text-align: left;"><code class="inline">String.t</code></td><td style="text-align: left;"></td><td style="text-align: left;">A description for the step</td></tr><tr><td style="text-align: left;"><a href="#reactor-bulk_create-undo_action" id="reactor-bulk_create-undo_action"><code class="inline">undo_action</code></a></td><td style="text-align: left;"><code class="inline">atom</code></td><td style="text-align: left;"></td><td style="text-align: left;">The name of the action to call on the resource when the step is to be undone.</td></tr><tr><td style="text-align: left;"><a href="#reactor-bulk_create-undo" id="reactor-bulk_create-undo"><code class="inline">undo</code></a></td><td style="text-align: left;"><code class="inline">:always | :never | :outside_transaction</code></td><td style="text-align: left;"><code class="inline">:never</code></td><td style="text-align: left;">How to handle undoing this action</td></tr></tbody></table><h3 id="reactor-bulk_create-actor">reactor.bulk_create.actor</h3><pre><code class="makeup elixir" translate="no"><span class="n">actor</span><span class="w"> </span><span class="n">source</span></code></pre><p>Specifies the action actor</p><h3 id="arguments-14">Arguments</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a class="spark-required" href="#reactor-bulk_create-actor-source" id="reactor-bulk_create-actor-source"><code class="inline">source</code></a></td><td style="text-align: left;"><code class="inline">Reactor.Template.Element | Reactor.Template.Input | Reactor.Template.Result | Reactor.Template.Value</code></td><td style="text-align: left;"></td><td style="text-align: left;">What to use as the source of the actor.</td></tr></tbody></table><h3 id="options-15">Options</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a href="#reactor-bulk_create-actor-transform" id="reactor-bulk_create-actor-transform"><code class="inline">transform</code></a></td><td style="text-align: left;"><code class="inline">(any -&gt; any) | module | nil</code></td><td style="text-align: left;"></td><td style="text-align: left;">An optional transformation function which can be used to modify the actor before it is passed to the action.</td></tr></tbody></table><h3 id="introspection-13">Introspection</h3><p>Target: <a href="Ash.Reactor.Dsl.Actor.xhtml"><code class="inline">Ash.Reactor.Dsl.Actor</code></a></p><h3 id="reactor-bulk_create-context">reactor.bulk_create.context</h3><pre><code class="makeup elixir" translate="no"><span class="n">context</span><span class="w"> </span><span class="n">context</span></code></pre><p>A map to be merged into the action's context</p><h3 id="arguments-15">Arguments</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a href="#reactor-bulk_create-context-context" id="reactor-bulk_create-context-context"><code class="inline">context</code></a></td><td style="text-align: left;"><code class="inline">nil | Reactor.Template.Element | Reactor.Template.Input | Reactor.Template.Result | Reactor.Template.Value | map</code></td><td style="text-align: left;"></td><td style="text-align: left;">A map to be merged into the action's context.</td></tr></tbody></table><h3 id="options-16">Options</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a href="#reactor-bulk_create-context-transform" id="reactor-bulk_create-context-transform"><code class="inline">transform</code></a></td><td style="text-align: left;"><code class="inline">(any -&gt; any) | module | nil</code></td><td style="text-align: left;"></td><td style="text-align: left;">An optional transformation function which can be used to modify the context before it is passed to the action.</td></tr></tbody></table><h3 id="introspection-14">Introspection</h3><p>Target: <a href="Ash.Reactor.Dsl.Context.xhtml"><code class="inline">Ash.Reactor.Dsl.Context</code></a></p><h3 id="reactor-bulk_create-guard">reactor.bulk_create.guard</h3><pre><code class="makeup elixir" translate="no"><span class="n">guard</span><span class="w"> </span><span class="n">fun</span></code></pre><p>Provides a flexible method for conditionally executing a step, or replacing it's result.</p><p>Expects a two arity function which takes the step's arguments and context and returns one of the following:</p><ul><li><code class="inline">:cont</code> - the guard has passed.</li><li><code class="inline">{:halt, result}</code> - the guard has failed - instead of executing the step use the provided result.</li></ul><h3 id="examples-10">Examples</h3><pre><code class="makeup elixir" translate="no"><span class="n">step</span><span class="w"> </span><span class="ss">:read_file_via_cache</span><span class="w"> </span><span class="k" data-group-id="5659332876-1">do</span><span class="w">
  </span><span class="n">argument</span><span class="w"> </span><span class="ss">:path</span><span class="p">,</span><span class="w"> </span><span class="n">input</span><span class="p" data-group-id="5659332876-2">(</span><span class="ss">:path</span><span class="p" data-group-id="5659332876-2">)</span><span class="w">
  </span><span class="n">run</span><span class="w"> </span><span class="o">&amp;</span><span class="nc">File</span><span class="o">.</span><span class="n">read</span><span class="p" data-group-id="5659332876-3">(</span><span class="ni">&amp;1</span><span class="o">.</span><span class="n">path</span><span class="p" data-group-id="5659332876-3">)</span><span class="w">
  </span><span class="n">guard</span><span class="w"> </span><span class="k" data-group-id="5659332876-4">fn</span><span class="w"> </span><span class="p" data-group-id="5659332876-5">%{</span><span class="ss">path</span><span class="p">:</span><span class="w"> </span><span class="n">path</span><span class="p" data-group-id="5659332876-5">}</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="5659332876-6">%{</span><span class="ss">cache</span><span class="p">:</span><span class="w"> </span><span class="n">cache</span><span class="p" data-group-id="5659332876-6">}</span><span class="w"> </span><span class="o">-&gt;</span><span class="w">
    </span><span class="k">case</span><span class="w"> </span><span class="nc">Cache</span><span class="o">.</span><span class="n">get</span><span class="p" data-group-id="5659332876-7">(</span><span class="n">cache</span><span class="p">,</span><span class="w"> </span><span class="n">path</span><span class="p" data-group-id="5659332876-7">)</span><span class="w"> </span><span class="k" data-group-id="5659332876-8">do</span><span class="w">
      </span><span class="p" data-group-id="5659332876-9">{</span><span class="ss">:ok</span><span class="p">,</span><span class="w"> </span><span class="n">content</span><span class="p" data-group-id="5659332876-9">}</span><span class="w"> </span><span class="o">-&gt;</span><span class="w"> </span><span class="p" data-group-id="5659332876-10">{</span><span class="ss">:halt</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="5659332876-11">{</span><span class="ss">:ok</span><span class="p">,</span><span class="w"> </span><span class="n">content</span><span class="p" data-group-id="5659332876-11">}</span><span class="p" data-group-id="5659332876-10">}</span><span class="w">
      </span><span class="bp">_</span><span class="w"> </span><span class="o">-&gt;</span><span class="w"> </span><span class="ss">:cont</span><span class="w">
    </span><span class="k" data-group-id="5659332876-8">end</span><span class="w">
  </span><span class="k" data-group-id="5659332876-4">end</span><span class="w">
</span><span class="k" data-group-id="5659332876-1">end</span><span class="w">
</span></code></pre><h3 id="arguments-16">Arguments</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a class="spark-required" href="#reactor-bulk_create-guard-fun" id="reactor-bulk_create-guard-fun"><code class="inline">fun</code></a></td><td style="text-align: left;"><code class="inline">(any, any -&gt; any) | mfa</code></td><td style="text-align: left;"></td><td style="text-align: left;">The guard function.</td></tr></tbody></table><h3 id="options-17">Options</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a href="#reactor-bulk_create-guard-description" id="reactor-bulk_create-guard-description"><code class="inline">description</code></a></td><td style="text-align: left;"><code class="inline">String.t</code></td><td style="text-align: left;"></td><td style="text-align: left;">An optional description of the guard.</td></tr></tbody></table><h3 id="introspection-15">Introspection</h3><p>Target: <a href="https://hexdocs.pm/reactor/0.15.6/Reactor.Dsl.Guard.html"><code class="inline">Reactor.Dsl.Guard</code></a></p><h3 id="reactor-bulk_create-where">reactor.bulk_create.where</h3><pre><code class="makeup elixir" translate="no"><span class="n">where</span><span class="w"> </span><span class="n">predicate</span></code></pre><p>Only execute the surrounding step if the predicate function returns true.</p><p>This is a simple version of <code class="inline">guard</code> which provides more flexibility at the cost of complexity.</p><h3 id="examples-11">Examples</h3><pre><code class="makeup elixir" translate="no"><span class="n">step</span><span class="w"> </span><span class="ss">:read_file</span><span class="w"> </span><span class="k" data-group-id="1680147713-1">do</span><span class="w">
  </span><span class="n">argument</span><span class="w"> </span><span class="ss">:path</span><span class="p">,</span><span class="w"> </span><span class="n">input</span><span class="p" data-group-id="1680147713-2">(</span><span class="ss">:path</span><span class="p" data-group-id="1680147713-2">)</span><span class="w">
  </span><span class="n">run</span><span class="w"> </span><span class="o">&amp;</span><span class="nc">File</span><span class="o">.</span><span class="n">read</span><span class="p" data-group-id="1680147713-3">(</span><span class="ni">&amp;1</span><span class="o">.</span><span class="n">path</span><span class="p" data-group-id="1680147713-3">)</span><span class="w">
  </span><span class="n">where</span><span class="w"> </span><span class="o">&amp;</span><span class="nc">File</span><span class="o">.</span><span class="n">exists?</span><span class="p" data-group-id="1680147713-4">(</span><span class="ni">&amp;1</span><span class="o">.</span><span class="n">path</span><span class="p" data-group-id="1680147713-4">)</span><span class="w">
</span><span class="k" data-group-id="1680147713-1">end</span><span class="w">
</span></code></pre><h3 id="arguments-17">Arguments</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a class="spark-required" href="#reactor-bulk_create-where-predicate" id="reactor-bulk_create-where-predicate"><code class="inline">predicate</code></a></td><td style="text-align: left;"><code class="inline">(any -&gt; any) | mfa | (any, any -&gt; any) | mfa</code></td><td style="text-align: left;"></td><td style="text-align: left;">Provide a function which takes the step arguments and optionally the context and returns a boolean value.</td></tr></tbody></table><h3 id="options-18">Options</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a href="#reactor-bulk_create-where-description" id="reactor-bulk_create-where-description"><code class="inline">description</code></a></td><td style="text-align: left;"><code class="inline">String.t</code></td><td style="text-align: left;"></td><td style="text-align: left;">An optional description of the guard.</td></tr></tbody></table><h3 id="introspection-16">Introspection</h3><p>Target: <a href="https://hexdocs.pm/reactor/0.15.6/Reactor.Dsl.Where.html"><code class="inline">Reactor.Dsl.Where</code></a></p><h3 id="reactor-bulk_create-load">reactor.bulk_create.load</h3><pre><code class="makeup elixir" translate="no"><span class="n">load</span><span class="w"> </span><span class="n">source</span></code></pre><p>Allows the addition of an Ash load statement to the action</p><h3 id="arguments-18">Arguments</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a class="spark-required" href="#reactor-bulk_create-load-source" id="reactor-bulk_create-load-source"><code class="inline">source</code></a></td><td style="text-align: left;"><code class="inline">Reactor.Template.Element | Reactor.Template.Input | Reactor.Template.Result | Reactor.Template.Value</code></td><td style="text-align: left;"></td><td style="text-align: left;">What to use as the source of the load</td></tr></tbody></table><h3 id="options-19">Options</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a href="#reactor-bulk_create-load-transform" id="reactor-bulk_create-load-transform"><code class="inline">transform</code></a></td><td style="text-align: left;"><code class="inline">(any -&gt; any) | module | nil</code></td><td style="text-align: left;"></td><td style="text-align: left;">An optional transformation function which can be used to modify the load before it is passed to the action.</td></tr></tbody></table><h3 id="introspection-17">Introspection</h3><p>Target: <a href="Ash.Reactor.Dsl.ActionLoad.xhtml"><code class="inline">Ash.Reactor.Dsl.ActionLoad</code></a></p><h3 id="reactor-bulk_create-tenant">reactor.bulk_create.tenant</h3><pre><code class="makeup elixir" translate="no"><span class="n">tenant</span><span class="w"> </span><span class="n">source</span></code></pre><p>Specifies the action tenant</p><h3 id="arguments-19">Arguments</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a class="spark-required" href="#reactor-bulk_create-tenant-source" id="reactor-bulk_create-tenant-source"><code class="inline">source</code></a></td><td style="text-align: left;"><code class="inline">Reactor.Template.Element | Reactor.Template.Input | Reactor.Template.Result | Reactor.Template.Value</code></td><td style="text-align: left;"></td><td style="text-align: left;">What to use as the source of the tenant.</td></tr></tbody></table><h3 id="options-20">Options</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a href="#reactor-bulk_create-tenant-transform" id="reactor-bulk_create-tenant-transform"><code class="inline">transform</code></a></td><td style="text-align: left;"><code class="inline">(any -&gt; any) | module | nil</code></td><td style="text-align: left;"></td><td style="text-align: left;">An optional transformation function which can be used to modify the tenant before it is passed to the action.</td></tr></tbody></table><h3 id="introspection-18">Introspection</h3><p>Target: <a href="Ash.Reactor.Dsl.Tenant.xhtml"><code class="inline">Ash.Reactor.Dsl.Tenant</code></a></p><h3 id="reactor-bulk_create-wait_for">reactor.bulk_create.wait_for</h3><pre><code class="makeup elixir" translate="no"><span class="n">wait_for</span><span class="w"> </span><span class="n">names</span></code></pre><p>Wait for the named step to complete before allowing this one to start.</p><p>Desugars to <code class="inline">argument :_, result(step_to_wait_for)</code></p><h3 id="examples-12">Examples</h3><pre><code class="makeup elixir" translate="no"><span class="n">wait_for</span><span class="w"> </span><span class="ss">:create_user</span></code></pre><h3 id="arguments-20">Arguments</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a class="spark-required" href="#reactor-bulk_create-wait_for-names" id="reactor-bulk_create-wait_for-names"><code class="inline">names</code></a></td><td style="text-align: left;"><code class="inline">atom | list(atom)</code></td><td style="text-align: left;"></td><td style="text-align: left;">The name of the step to wait for.</td></tr></tbody></table><h3 id="options-21">Options</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a href="#reactor-bulk_create-wait_for-description" id="reactor-bulk_create-wait_for-description"><code class="inline">description</code></a></td><td style="text-align: left;"><code class="inline">String.t</code></td><td style="text-align: left;"></td><td style="text-align: left;">An optional description.</td></tr></tbody></table><h3 id="introspection-19">Introspection</h3><p>Target: <a href="https://hexdocs.pm/reactor/0.15.6/Reactor.Dsl.WaitFor.html"><code class="inline">Reactor.Dsl.WaitFor</code></a></p><h3 id="introspection-20">Introspection</h3><p>Target: <a href="Ash.Reactor.Dsl.BulkCreate.xhtml"><code class="inline">Ash.Reactor.Dsl.BulkCreate</code></a></p><h3 id="reactor-bulk_update">reactor.bulk_update</h3><pre><code class="makeup elixir" translate="no"><span class="n">bulk_update</span><span class="w"> </span><span class="n">name</span><span class="p">,</span><span class="w"> </span><span class="n">resource</span><span class="p">,</span><span class="w"> </span><span class="n">action</span><span class="w"> </span><span class="o">\\</span><span class="w"> </span><span class="no">nil</span></code></pre><p>Declares a step which will call an update action on a resource with a collection of inputs.</p><section role="note" class="admonition warning"><h3 id="check-the-docs-1" class="admonition-title warning">Check the docs!</h3><p>Make sure to thoroughly read and understand the documentation in <a href="Ash.xhtml#bulk_update/4"><code class="inline">Ash.bulk_update/4</code></a> before using.  Read each option and note the default values.  By default, bulk updates don't return records or errors, and don't emit notifications.</p></section><p>Caveats/differences from <a href="Ash.xhtml#bulk_update/4"><code class="inline">Ash.bulk_update/4</code></a>:</p><ol><li><code class="inline">max_concurrency</code> specifies the number of tasks that Ash will start to process batches, and has no effect on Reactor concurrency targets.  It's could be possible to create a very large number of processes if a number of steps are running bulk actions with a high degree of concurrency.</li><li>Setting <code class="inline">notify?</code> to <code class="inline">true</code> will cause both <code class="inline">notify?</code> and <code class="inline">return_notifications?</code> to be set to true in the underlying call to <a href="Ash.xhtml#bulk_create/4"><code class="inline">Ash.bulk_create/4</code></a>. Notifications will then be managed by the <a href="Ash.Reactor.Notifications.xhtml"><code class="inline">Ash.Reactor.Notifications</code></a> Reactor middleware.</li><li>If you specify an undo action it must be a generic action which takes the bulk result as it's only argument.</li></ol><section role="note" class="admonition tip"><h4 class="admonition-title tip">Undo behaviour</h4><p>This step has three different modes of undo.</p><ul><li><code class="inline">never</code> - The result of the action is never undone.  This is the default.</li><li><code class="inline">always</code> - The <code class="inline">undo_action</code> will always be called.</li><li><code class="inline">outside_transaction</code> - The <code class="inline">undo_action</code> will not be called when running inside a <code class="inline">transaction</code> block, but will be otherwise.</li></ul></section><h3 id="nested-dsls-3">Nested DSLs</h3><ul><li><a href="#reactor-bulk_update-actor">actor</a></li><li><a href="#reactor-bulk_update-context">context</a></li><li><a href="#reactor-bulk_update-guard">guard</a></li><li><a href="#reactor-bulk_update-where">where</a></li><li><a href="#reactor-bulk_update-inputs">inputs</a></li><li><a href="#reactor-bulk_update-tenant">tenant</a></li><li><a href="#reactor-bulk_update-wait_for">wait_for</a></li></ul><h3 id="examples-13">Examples</h3><pre><code class="makeup elixir" translate="no"><span class="n">bulk_update</span><span class="w"> </span><span class="ss">:publish_posts</span><span class="p">,</span><span class="w"> </span><span class="nc">MyApp.Post</span><span class="p">,</span><span class="w"> </span><span class="ss">:publish</span><span class="w"> </span><span class="k" data-group-id="6658368591-1">do</span><span class="w">
  </span><span class="n">initial</span><span class="w"> </span><span class="n">input</span><span class="p" data-group-id="6658368591-2">(</span><span class="ss">:posts</span><span class="p" data-group-id="6658368591-2">)</span><span class="p">,</span><span class="w">
  </span><span class="n">actor</span><span class="w"> </span><span class="n">result</span><span class="p" data-group-id="6658368591-3">(</span><span class="ss">:get_user</span><span class="p" data-group-id="6658368591-3">)</span><span class="w">
</span><span class="k" data-group-id="6658368591-1">end</span><span class="w">
</span></code></pre><h3 id="arguments-21">Arguments</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a class="spark-required" href="#reactor-bulk_update-name" id="reactor-bulk_update-name"><code class="inline">name</code></a></td><td style="text-align: left;"><code class="inline">atom</code></td><td style="text-align: left;"></td><td style="text-align: left;">A unique name for the step.</td></tr><tr><td style="text-align: left;"><a class="spark-required" href="#reactor-bulk_update-resource" id="reactor-bulk_update-resource"><code class="inline">resource</code></a></td><td style="text-align: left;"><code class="inline">module</code></td><td style="text-align: left;"></td><td style="text-align: left;">The resource to call the action on.</td></tr><tr><td style="text-align: left;"><a href="#reactor-bulk_update-action" id="reactor-bulk_update-action"><code class="inline">action</code></a></td><td style="text-align: left;"><code class="inline">atom</code></td><td style="text-align: left;"></td><td style="text-align: left;">The name of the action to call on the resource.</td></tr></tbody></table><h3 id="options-22">Options</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a class="spark-required" href="#reactor-bulk_update-initial" id="reactor-bulk_update-initial"><code class="inline">initial</code></a></td><td style="text-align: left;"><code class="inline">Reactor.Template.Element | Reactor.Template.Input | Reactor.Template.Result | Reactor.Template.Value</code></td><td style="text-align: left;"></td><td style="text-align: left;">A collection of inputs to pass to the create action. Must implement the <a href="https://hexdocs.pm/elixir/Enumerable.html"><code class="inline">Enumerable</code></a> protocol.</td></tr><tr><td style="text-align: left;"><a href="#reactor-bulk_update-allow_stream_with" id="reactor-bulk_update-allow_stream_with"><code class="inline">allow_stream_with</code></a></td><td style="text-align: left;"><code class="inline">:keyset | :offset | :full_read</code></td><td style="text-align: left;"><code class="inline">:keyset</code></td><td style="text-align: left;">The 'worst' strategy allowed to be used to fetch records if the :stream strategy is chosen. See the <a href="Ash.xhtml#stream!/2"><code class="inline">Ash.stream!/2</code></a> docs for more.</td></tr><tr><td style="text-align: left;"><a href="#reactor-bulk_update-assume_casted?" id="reactor-bulk_update-assume_casted?"><code class="inline">assume_casted?</code></a></td><td style="text-align: left;"><code class="inline">boolean</code></td><td style="text-align: left;"><code class="inline">false</code></td><td style="text-align: left;">Whether or not to cast attributes and arguments as input. This is an optimization for cases where the input is already casted and/or not in need of casting</td></tr><tr><td style="text-align: left;"><a href="#reactor-bulk_update-atomic_update" id="reactor-bulk_update-atomic_update"><code class="inline">atomic_update</code></a></td><td style="text-align: left;"><code class="inline">map</code></td><td style="text-align: left;"></td><td style="text-align: left;">A map of atomic updates to apply. See <a href="Ash.Changeset.xhtml#atomic_update/3"><code class="inline">Ash.Changeset.atomic_update/3</code></a> for more.</td></tr><tr><td style="text-align: left;"><a href="#reactor-bulk_update-authorize_changeset_with" id="reactor-bulk_update-authorize_changeset_with"><code class="inline">authorize_changeset_with</code></a></td><td style="text-align: left;"><code class="inline">:filter | :error</code></td><td style="text-align: left;"><code class="inline">:filter</code></td><td style="text-align: left;">If set to <code class="inline">:error</code>, instead of filtering unauthorized changes, unauthorized changes will raise an appropriate forbidden error</td></tr><tr><td style="text-align: left;"><a href="#reactor-bulk_update-authorize_query_with" id="reactor-bulk_update-authorize_query_with"><code class="inline">authorize_query_with</code></a></td><td style="text-align: left;"><code class="inline">:filter | :error</code></td><td style="text-align: left;"><code class="inline">:filter</code></td><td style="text-align: left;">If set to <code class="inline">:error</code>, instead of filtering unauthorized query results, unauthorized query results will raise an appropriate forbidden error</td></tr><tr><td style="text-align: left;"><a href="#reactor-bulk_update-authorize_query?" id="reactor-bulk_update-authorize_query?"><code class="inline">authorize_query?</code></a></td><td style="text-align: left;"><code class="inline">boolean</code></td><td style="text-align: left;"><code class="inline">true</code></td><td style="text-align: left;">If a query is given, determines whether or not authorization is run on that query.</td></tr><tr><td style="text-align: left;"><a href="#reactor-bulk_update-batch_size" id="reactor-bulk_update-batch_size"><code class="inline">batch_size</code></a></td><td style="text-align: left;"><code class="inline">nil | pos_integer</code></td><td style="text-align: left;"></td><td style="text-align: left;">The number of records to include in each batch. Defaults to the <code class="inline">default_limit</code> or <code class="inline">max_page_size</code> of the action, or 100.</td></tr><tr><td style="text-align: left;"><a href="#reactor-bulk_update-filter" id="reactor-bulk_update-filter"><code class="inline">filter</code></a></td><td style="text-align: left;"><code class="inline">map | keyword</code></td><td style="text-align: left;"></td><td style="text-align: left;">A filter to apply to records. This is also applied to a stream of inputs.</td></tr><tr><td style="text-align: left;"><a href="#reactor-bulk_update-lock" id="reactor-bulk_update-lock"><code class="inline">lock</code></a></td><td style="text-align: left;"><code class="inline">any</code></td><td style="text-align: left;"></td><td style="text-align: left;">A lock statement to add onto the query.</td></tr><tr><td style="text-align: left;"><a href="#reactor-bulk_update-max_concurrency" id="reactor-bulk_update-max_concurrency"><code class="inline">max_concurrency</code></a></td><td style="text-align: left;"><code class="inline">non_neg_integer</code></td><td style="text-align: left;"><code class="inline">0</code></td><td style="text-align: left;">If set to a value greater than 0, up to that many tasks will be started to run batches asynchronously.</td></tr><tr><td style="text-align: left;"><a href="#reactor-bulk_update-notification_metadata" id="reactor-bulk_update-notification_metadata"><code class="inline">notification_metadata</code></a></td><td style="text-align: left;"><code class="inline">map | Reactor.Template.Element | Reactor.Template.Input | Reactor.Template.Result | Reactor.Template.Value</code></td><td style="text-align: left;"><code class="inline">%{}</code></td><td style="text-align: left;">Metadata to be merged into the metadata field for all notifications sent from this operation.</td></tr><tr><td style="text-align: left;"><a href="#reactor-bulk_update-notify?" id="reactor-bulk_update-notify?"><code class="inline">notify?</code></a></td><td style="text-align: left;"><code class="inline">boolean</code></td><td style="text-align: left;"><code class="inline">false</code></td><td style="text-align: left;">Whether or not to generate any notifications. This may be intensive for large bulk actions.</td></tr><tr><td style="text-align: left;"><a href="#reactor-bulk_update-page" id="reactor-bulk_update-page"><code class="inline">page</code></a></td><td style="text-align: left;"><code class="inline">keyword</code></td><td style="text-align: left;"><code class="inline">[]</code></td><td style="text-align: left;">Pagination options, see <a href="Ash.xhtml#read/2"><code class="inline">Ash.read/2</code></a> for more.</td></tr><tr><td style="text-align: left;"><a href="#reactor-bulk_update-read_action" id="reactor-bulk_update-read_action"><code class="inline">read_action</code></a></td><td style="text-align: left;"><code class="inline">atom</code></td><td style="text-align: left;"></td><td style="text-align: left;">The action to use when building the read query.</td></tr><tr><td style="text-align: left;"><a href="#reactor-bulk_update-return_errors?" id="reactor-bulk_update-return_errors?"><code class="inline">return_errors?</code></a></td><td style="text-align: left;"><code class="inline">boolean</code></td><td style="text-align: left;"><code class="inline">true</code></td><td style="text-align: left;">Whether or not to return all of the errors that occur. Defaults to false to account for large inserts.</td></tr><tr><td style="text-align: left;"><a href="#reactor-bulk_update-return_records?" id="reactor-bulk_update-return_records?"><code class="inline">return_records?</code></a></td><td style="text-align: left;"><code class="inline">boolean</code></td><td style="text-align: left;"><code class="inline">false</code></td><td style="text-align: left;">Whether or not to return all of the records that were inserted. Defaults to false to account for large inserts.</td></tr><tr><td style="text-align: left;"><a href="#reactor-bulk_update-return_stream?" id="reactor-bulk_update-return_stream?"><code class="inline">return_stream?</code></a></td><td style="text-align: left;"><code class="inline">boolean</code></td><td style="text-align: left;"><code class="inline">false</code></td><td style="text-align: left;">If set to <code class="inline">true</code>, instead of an <a href="Ash.BulkResult.xhtml"><code class="inline">Ash.BulkResult</code></a>, a mixed stream is returned.</td></tr><tr><td style="text-align: left;"><a href="#reactor-bulk_update-reuse_values?" id="reactor-bulk_update-reuse_values?"><code class="inline">reuse_values?</code></a></td><td style="text-align: left;"><code class="inline">boolean</code></td><td style="text-align: left;"><code class="inline">false</code></td><td style="text-align: left;">Whether calculations are allowed to reuse values that have already been loaded, or must refetch them from the data layer.</td></tr><tr><td style="text-align: left;"><a href="#reactor-bulk_update-rollback_on_error?" id="reactor-bulk_update-rollback_on_error?"><code class="inline">rollback_on_error?</code></a></td><td style="text-align: left;"><code class="inline">boolean</code></td><td style="text-align: left;"><code class="inline">true</code></td><td style="text-align: left;">Whether or not to rollback the transaction on error, if the resource is in a transaction.</td></tr><tr><td style="text-align: left;"><a href="#reactor-bulk_update-select" id="reactor-bulk_update-select"><code class="inline">select</code></a></td><td style="text-align: left;"><code class="inline">atom | list(atom)</code></td><td style="text-align: left;"></td><td style="text-align: left;">A select statement to apply to records. Ignored if <code class="inline">return_records?</code> is not <code class="inline">true</code>.</td></tr><tr><td style="text-align: left;"><a href="#reactor-bulk_update-skip_unknown_inputs" id="reactor-bulk_update-skip_unknown_inputs"><code class="inline">skip_unknown_inputs</code></a></td><td style="text-align: left;"><code class="inline">atom | String.t | list(atom | String.t)</code></td><td style="text-align: left;"></td><td style="text-align: left;">A list of inputs that, if provided, will be ignored if they are not recognized by the action. Use <code class="inline">:*</code> to indicate all unknown keys.</td></tr><tr><td style="text-align: left;"><a href="#reactor-bulk_update-sorted?" id="reactor-bulk_update-sorted?"><code class="inline">sorted?</code></a></td><td style="text-align: left;"><code class="inline">boolean</code></td><td style="text-align: left;"><code class="inline">false</code></td><td style="text-align: left;">Whether or not to sort results by their input position, in cases where <code class="inline">return_records?</code> is set to <code class="inline">true</code>.</td></tr><tr><td style="text-align: left;"><a href="#reactor-bulk_update-stop_on_error?" id="reactor-bulk_update-stop_on_error?"><code class="inline">stop_on_error?</code></a></td><td style="text-align: left;"><code class="inline">boolean</code></td><td style="text-align: left;"><code class="inline">true</code></td><td style="text-align: left;">If <code class="inline">true</code>, the first encountered error will stop the action and be returned. Otherwise, errors will be skipped.</td></tr><tr><td style="text-align: left;"><a href="#reactor-bulk_update-strategy" id="reactor-bulk_update-strategy"><code class="inline">strategy</code></a></td><td style="text-align: left;"><code class="inline">list(:atomic | :atomic_batches | :stream)</code></td><td style="text-align: left;"><code class="inline">[:atomic]</code></td><td style="text-align: left;">The strategy or strategies to enable. <code class="inline">:stream</code> is used in all cases if the data layer does not support atomics.</td></tr><tr><td style="text-align: left;"><a href="#reactor-bulk_update-stream_batch_size" id="reactor-bulk_update-stream_batch_size"><code class="inline">stream_batch_size</code></a></td><td style="text-align: left;"><code class="inline">pos_integer</code></td><td style="text-align: left;"></td><td style="text-align: left;">Batch size to use if provided a query and the query must be streamed.</td></tr><tr><td style="text-align: left;"><a href="#reactor-bulk_update-stream_with" id="reactor-bulk_update-stream_with"><code class="inline">stream_with</code></a></td><td style="text-align: left;"><code class="inline">:keyset | :offset | :full_read</code></td><td style="text-align: left;"></td><td style="text-align: left;">The specific strategy to use to fetch records. See <a href="Ash.xhtml#stream!/2"><code class="inline">Ash.stream!/2</code></a> docs for more.</td></tr><tr><td style="text-align: left;"><a href="#reactor-bulk_update-success_state" id="reactor-bulk_update-success_state"><code class="inline">success_state</code></a></td><td style="text-align: left;"><code class="inline">:success | :partial_success</code></td><td style="text-align: left;"><code class="inline">:success</code></td><td style="text-align: left;">Bulk results can be entirely or partially successful. Chooses the <a href="Ash.BulkResult.xhtml"><code class="inline">Ash.BulkResult</code></a> state to consider the step a success.</td></tr><tr><td style="text-align: left;"><a href="#reactor-bulk_update-timeout" id="reactor-bulk_update-timeout"><code class="inline">timeout</code></a></td><td style="text-align: left;"><code class="inline">timeout</code></td><td style="text-align: left;"></td><td style="text-align: left;">If none is provided, the timeout configured on the domain is used (which defaults to <code class="inline">30_000</code>).</td></tr><tr><td style="text-align: left;"><a href="#reactor-bulk_update-transaction" id="reactor-bulk_update-transaction"><code class="inline">transaction</code></a></td><td style="text-align: left;"><code class="inline">:all | :batch | false</code></td><td style="text-align: left;"><code class="inline">:batch</code></td><td style="text-align: left;">Whether or not to wrap the entire execution in a transaction, each batch, or not at all.</td></tr><tr><td style="text-align: left;"><a href="#reactor-bulk_update-domain" id="reactor-bulk_update-domain"><code class="inline">domain</code></a></td><td style="text-align: left;"><code class="inline">module</code></td><td style="text-align: left;"></td><td style="text-align: left;">The Domain to use when calling the action.  Defaults to the Domain set on the resource or in the <code class="inline">ash</code> section.</td></tr><tr><td style="text-align: left;"><a href="#reactor-bulk_update-async?" id="reactor-bulk_update-async?"><code class="inline">async?</code></a></td><td style="text-align: left;"><code class="inline">boolean</code></td><td style="text-align: left;"><code class="inline">true</code></td><td style="text-align: left;">When set to true the step will be executed asynchronously via Reactor's <code class="inline">TaskSupervisor</code>.</td></tr><tr><td style="text-align: left;"><a href="#reactor-bulk_update-authorize?" id="reactor-bulk_update-authorize?"><code class="inline">authorize?</code></a></td><td style="text-align: left;"><code class="inline">boolean | nil</code></td><td style="text-align: left;"></td><td style="text-align: left;">Explicitly enable or disable authorization for the action.</td></tr><tr><td style="text-align: left;"><a href="#reactor-bulk_update-description" id="reactor-bulk_update-description"><code class="inline">description</code></a></td><td style="text-align: left;"><code class="inline">String.t</code></td><td style="text-align: left;"></td><td style="text-align: left;">A description for the step</td></tr><tr><td style="text-align: left;"><a href="#reactor-bulk_update-undo_action" id="reactor-bulk_update-undo_action"><code class="inline">undo_action</code></a></td><td style="text-align: left;"><code class="inline">atom</code></td><td style="text-align: left;"></td><td style="text-align: left;">The name of the action to call on the resource when the step is to be undone.</td></tr><tr><td style="text-align: left;"><a href="#reactor-bulk_update-undo" id="reactor-bulk_update-undo"><code class="inline">undo</code></a></td><td style="text-align: left;"><code class="inline">:always | :never | :outside_transaction</code></td><td style="text-align: left;"><code class="inline">:never</code></td><td style="text-align: left;">How to handle undoing this action</td></tr></tbody></table><h3 id="reactor-bulk_update-actor">reactor.bulk_update.actor</h3><pre><code class="makeup elixir" translate="no"><span class="n">actor</span><span class="w"> </span><span class="n">source</span></code></pre><p>Specifies the action actor</p><h3 id="arguments-22">Arguments</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a class="spark-required" href="#reactor-bulk_update-actor-source" id="reactor-bulk_update-actor-source"><code class="inline">source</code></a></td><td style="text-align: left;"><code class="inline">Reactor.Template.Element | Reactor.Template.Input | Reactor.Template.Result | Reactor.Template.Value</code></td><td style="text-align: left;"></td><td style="text-align: left;">What to use as the source of the actor.</td></tr></tbody></table><h3 id="options-23">Options</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a href="#reactor-bulk_update-actor-transform" id="reactor-bulk_update-actor-transform"><code class="inline">transform</code></a></td><td style="text-align: left;"><code class="inline">(any -&gt; any) | module | nil</code></td><td style="text-align: left;"></td><td style="text-align: left;">An optional transformation function which can be used to modify the actor before it is passed to the action.</td></tr></tbody></table><h3 id="introspection-21">Introspection</h3><p>Target: <a href="Ash.Reactor.Dsl.Actor.xhtml"><code class="inline">Ash.Reactor.Dsl.Actor</code></a></p><h3 id="reactor-bulk_update-context">reactor.bulk_update.context</h3><pre><code class="makeup elixir" translate="no"><span class="n">context</span><span class="w"> </span><span class="n">context</span></code></pre><p>A map to be merged into the action's context</p><h3 id="arguments-23">Arguments</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a href="#reactor-bulk_update-context-context" id="reactor-bulk_update-context-context"><code class="inline">context</code></a></td><td style="text-align: left;"><code class="inline">nil | Reactor.Template.Element | Reactor.Template.Input | Reactor.Template.Result | Reactor.Template.Value | map</code></td><td style="text-align: left;"></td><td style="text-align: left;">A map to be merged into the action's context.</td></tr></tbody></table><h3 id="options-24">Options</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a href="#reactor-bulk_update-context-transform" id="reactor-bulk_update-context-transform"><code class="inline">transform</code></a></td><td style="text-align: left;"><code class="inline">(any -&gt; any) | module | nil</code></td><td style="text-align: left;"></td><td style="text-align: left;">An optional transformation function which can be used to modify the context before it is passed to the action.</td></tr></tbody></table><h3 id="introspection-22">Introspection</h3><p>Target: <a href="Ash.Reactor.Dsl.Context.xhtml"><code class="inline">Ash.Reactor.Dsl.Context</code></a></p><h3 id="reactor-bulk_update-guard">reactor.bulk_update.guard</h3><pre><code class="makeup elixir" translate="no"><span class="n">guard</span><span class="w"> </span><span class="n">fun</span></code></pre><p>Provides a flexible method for conditionally executing a step, or replacing it's result.</p><p>Expects a two arity function which takes the step's arguments and context and returns one of the following:</p><ul><li><code class="inline">:cont</code> - the guard has passed.</li><li><code class="inline">{:halt, result}</code> - the guard has failed - instead of executing the step use the provided result.</li></ul><h3 id="examples-14">Examples</h3><pre><code class="makeup elixir" translate="no"><span class="n">step</span><span class="w"> </span><span class="ss">:read_file_via_cache</span><span class="w"> </span><span class="k" data-group-id="4663643111-1">do</span><span class="w">
  </span><span class="n">argument</span><span class="w"> </span><span class="ss">:path</span><span class="p">,</span><span class="w"> </span><span class="n">input</span><span class="p" data-group-id="4663643111-2">(</span><span class="ss">:path</span><span class="p" data-group-id="4663643111-2">)</span><span class="w">
  </span><span class="n">run</span><span class="w"> </span><span class="o">&amp;</span><span class="nc">File</span><span class="o">.</span><span class="n">read</span><span class="p" data-group-id="4663643111-3">(</span><span class="ni">&amp;1</span><span class="o">.</span><span class="n">path</span><span class="p" data-group-id="4663643111-3">)</span><span class="w">
  </span><span class="n">guard</span><span class="w"> </span><span class="k" data-group-id="4663643111-4">fn</span><span class="w"> </span><span class="p" data-group-id="4663643111-5">%{</span><span class="ss">path</span><span class="p">:</span><span class="w"> </span><span class="n">path</span><span class="p" data-group-id="4663643111-5">}</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="4663643111-6">%{</span><span class="ss">cache</span><span class="p">:</span><span class="w"> </span><span class="n">cache</span><span class="p" data-group-id="4663643111-6">}</span><span class="w"> </span><span class="o">-&gt;</span><span class="w">
    </span><span class="k">case</span><span class="w"> </span><span class="nc">Cache</span><span class="o">.</span><span class="n">get</span><span class="p" data-group-id="4663643111-7">(</span><span class="n">cache</span><span class="p">,</span><span class="w"> </span><span class="n">path</span><span class="p" data-group-id="4663643111-7">)</span><span class="w"> </span><span class="k" data-group-id="4663643111-8">do</span><span class="w">
      </span><span class="p" data-group-id="4663643111-9">{</span><span class="ss">:ok</span><span class="p">,</span><span class="w"> </span><span class="n">content</span><span class="p" data-group-id="4663643111-9">}</span><span class="w"> </span><span class="o">-&gt;</span><span class="w"> </span><span class="p" data-group-id="4663643111-10">{</span><span class="ss">:halt</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="4663643111-11">{</span><span class="ss">:ok</span><span class="p">,</span><span class="w"> </span><span class="n">content</span><span class="p" data-group-id="4663643111-11">}</span><span class="p" data-group-id="4663643111-10">}</span><span class="w">
      </span><span class="bp">_</span><span class="w"> </span><span class="o">-&gt;</span><span class="w"> </span><span class="ss">:cont</span><span class="w">
    </span><span class="k" data-group-id="4663643111-8">end</span><span class="w">
  </span><span class="k" data-group-id="4663643111-4">end</span><span class="w">
</span><span class="k" data-group-id="4663643111-1">end</span><span class="w">
</span></code></pre><h3 id="arguments-24">Arguments</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a class="spark-required" href="#reactor-bulk_update-guard-fun" id="reactor-bulk_update-guard-fun"><code class="inline">fun</code></a></td><td style="text-align: left;"><code class="inline">(any, any -&gt; any) | mfa</code></td><td style="text-align: left;"></td><td style="text-align: left;">The guard function.</td></tr></tbody></table><h3 id="options-25">Options</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a href="#reactor-bulk_update-guard-description" id="reactor-bulk_update-guard-description"><code class="inline">description</code></a></td><td style="text-align: left;"><code class="inline">String.t</code></td><td style="text-align: left;"></td><td style="text-align: left;">An optional description of the guard.</td></tr></tbody></table><h3 id="introspection-23">Introspection</h3><p>Target: <a href="https://hexdocs.pm/reactor/0.15.6/Reactor.Dsl.Guard.html"><code class="inline">Reactor.Dsl.Guard</code></a></p><h3 id="reactor-bulk_update-where">reactor.bulk_update.where</h3><pre><code class="makeup elixir" translate="no"><span class="n">where</span><span class="w"> </span><span class="n">predicate</span></code></pre><p>Only execute the surrounding step if the predicate function returns true.</p><p>This is a simple version of <code class="inline">guard</code> which provides more flexibility at the cost of complexity.</p><h3 id="examples-15">Examples</h3><pre><code class="makeup elixir" translate="no"><span class="n">step</span><span class="w"> </span><span class="ss">:read_file</span><span class="w"> </span><span class="k" data-group-id="7231026652-1">do</span><span class="w">
  </span><span class="n">argument</span><span class="w"> </span><span class="ss">:path</span><span class="p">,</span><span class="w"> </span><span class="n">input</span><span class="p" data-group-id="7231026652-2">(</span><span class="ss">:path</span><span class="p" data-group-id="7231026652-2">)</span><span class="w">
  </span><span class="n">run</span><span class="w"> </span><span class="o">&amp;</span><span class="nc">File</span><span class="o">.</span><span class="n">read</span><span class="p" data-group-id="7231026652-3">(</span><span class="ni">&amp;1</span><span class="o">.</span><span class="n">path</span><span class="p" data-group-id="7231026652-3">)</span><span class="w">
  </span><span class="n">where</span><span class="w"> </span><span class="o">&amp;</span><span class="nc">File</span><span class="o">.</span><span class="n">exists?</span><span class="p" data-group-id="7231026652-4">(</span><span class="ni">&amp;1</span><span class="o">.</span><span class="n">path</span><span class="p" data-group-id="7231026652-4">)</span><span class="w">
</span><span class="k" data-group-id="7231026652-1">end</span><span class="w">
</span></code></pre><h3 id="arguments-25">Arguments</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a class="spark-required" href="#reactor-bulk_update-where-predicate" id="reactor-bulk_update-where-predicate"><code class="inline">predicate</code></a></td><td style="text-align: left;"><code class="inline">(any -&gt; any) | mfa | (any, any -&gt; any) | mfa</code></td><td style="text-align: left;"></td><td style="text-align: left;">Provide a function which takes the step arguments and optionally the context and returns a boolean value.</td></tr></tbody></table><h3 id="options-26">Options</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a href="#reactor-bulk_update-where-description" id="reactor-bulk_update-where-description"><code class="inline">description</code></a></td><td style="text-align: left;"><code class="inline">String.t</code></td><td style="text-align: left;"></td><td style="text-align: left;">An optional description of the guard.</td></tr></tbody></table><h3 id="introspection-24">Introspection</h3><p>Target: <a href="https://hexdocs.pm/reactor/0.15.6/Reactor.Dsl.Where.html"><code class="inline">Reactor.Dsl.Where</code></a></p><h3 id="reactor-bulk_update-inputs">reactor.bulk_update.inputs</h3><pre><code class="makeup elixir" translate="no"><span class="n">inputs</span><span class="w"> </span><span class="n">template</span></code></pre><p>Specify the inputs for an action</p><h3 id="examples-16">Examples</h3><pre><code class="makeup elixir" translate="no"><span class="n">inputs</span><span class="w"> </span><span class="p" data-group-id="7596175359-1">%{</span><span class="w">
  </span><span class="ss">author</span><span class="p">:</span><span class="w"> </span><span class="n">result</span><span class="p" data-group-id="7596175359-2">(</span><span class="ss">:get_user</span><span class="p" data-group-id="7596175359-2">)</span><span class="p">,</span><span class="w">
  </span><span class="ss">title</span><span class="p">:</span><span class="w"> </span><span class="n">input</span><span class="p" data-group-id="7596175359-3">(</span><span class="ss">:title</span><span class="p" data-group-id="7596175359-3">)</span><span class="p">,</span><span class="w">
  </span><span class="ss">body</span><span class="p">:</span><span class="w"> </span><span class="n">input</span><span class="p" data-group-id="7596175359-4">(</span><span class="ss">:body</span><span class="p" data-group-id="7596175359-4">)</span><span class="w">
</span><span class="p" data-group-id="7596175359-1">}</span><span class="w">
</span></code></pre><pre><code class="makeup elixir" translate="no"><span class="n">inputs</span><span class="p" data-group-id="2793648825-1">(</span><span class="ss">author</span><span class="p">:</span><span class="w"> </span><span class="n">result</span><span class="p" data-group-id="2793648825-2">(</span><span class="ss">:get_user</span><span class="p" data-group-id="2793648825-2">)</span><span class="p" data-group-id="2793648825-1">)</span><span class="w">
</span></code></pre><h3 id="arguments-26">Arguments</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a class="spark-required" href="#reactor-bulk_update-inputs-template" id="reactor-bulk_update-inputs-template"><code class="inline">template</code></a></td><td style="text-align: left;"><code class="inline">%{optional(atom) =&gt; Reactor.Template.Element | Reactor.Template.Input | Reactor.Template.Result | Reactor.Template.Value} | keyword(Reactor.Template.Element | Reactor.Template.Input | Reactor.Template.Result | Reactor.Template.Value)</code></td><td style="text-align: left;"></td><td style="text-align: left;"></td></tr></tbody></table><h3 id="options-27">Options</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a href="#reactor-bulk_update-inputs-transform" id="reactor-bulk_update-inputs-transform"><code class="inline">transform</code></a></td><td style="text-align: left;"><code class="inline">(any -&gt; any) | module | nil</code></td><td style="text-align: left;"></td><td style="text-align: left;">An optional transformation function which will transform the inputs before executing the action.</td></tr></tbody></table><h3 id="introspection-25">Introspection</h3><p>Target: <a href="Ash.Reactor.Dsl.Inputs.xhtml"><code class="inline">Ash.Reactor.Dsl.Inputs</code></a></p><h3 id="reactor-bulk_update-tenant">reactor.bulk_update.tenant</h3><pre><code class="makeup elixir" translate="no"><span class="n">tenant</span><span class="w"> </span><span class="n">source</span></code></pre><p>Specifies the action tenant</p><h3 id="arguments-27">Arguments</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a class="spark-required" href="#reactor-bulk_update-tenant-source" id="reactor-bulk_update-tenant-source"><code class="inline">source</code></a></td><td style="text-align: left;"><code class="inline">Reactor.Template.Element | Reactor.Template.Input | Reactor.Template.Result | Reactor.Template.Value</code></td><td style="text-align: left;"></td><td style="text-align: left;">What to use as the source of the tenant.</td></tr></tbody></table><h3 id="options-28">Options</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a href="#reactor-bulk_update-tenant-transform" id="reactor-bulk_update-tenant-transform"><code class="inline">transform</code></a></td><td style="text-align: left;"><code class="inline">(any -&gt; any) | module | nil</code></td><td style="text-align: left;"></td><td style="text-align: left;">An optional transformation function which can be used to modify the tenant before it is passed to the action.</td></tr></tbody></table><h3 id="introspection-26">Introspection</h3><p>Target: <a href="Ash.Reactor.Dsl.Tenant.xhtml"><code class="inline">Ash.Reactor.Dsl.Tenant</code></a></p><h3 id="reactor-bulk_update-wait_for">reactor.bulk_update.wait_for</h3><pre><code class="makeup elixir" translate="no"><span class="n">wait_for</span><span class="w"> </span><span class="n">names</span></code></pre><p>Wait for the named step to complete before allowing this one to start.</p><p>Desugars to <code class="inline">argument :_, result(step_to_wait_for)</code></p><h3 id="examples-17">Examples</h3><pre><code class="makeup elixir" translate="no"><span class="n">wait_for</span><span class="w"> </span><span class="ss">:create_user</span></code></pre><h3 id="arguments-28">Arguments</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a class="spark-required" href="#reactor-bulk_update-wait_for-names" id="reactor-bulk_update-wait_for-names"><code class="inline">names</code></a></td><td style="text-align: left;"><code class="inline">atom | list(atom)</code></td><td style="text-align: left;"></td><td style="text-align: left;">The name of the step to wait for.</td></tr></tbody></table><h3 id="options-29">Options</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a href="#reactor-bulk_update-wait_for-description" id="reactor-bulk_update-wait_for-description"><code class="inline">description</code></a></td><td style="text-align: left;"><code class="inline">String.t</code></td><td style="text-align: left;"></td><td style="text-align: left;">An optional description.</td></tr></tbody></table><h3 id="introspection-27">Introspection</h3><p>Target: <a href="https://hexdocs.pm/reactor/0.15.6/Reactor.Dsl.WaitFor.html"><code class="inline">Reactor.Dsl.WaitFor</code></a></p><h3 id="introspection-28">Introspection</h3><p>Target: <a href="Ash.Reactor.Dsl.BulkUpdate.xhtml"><code class="inline">Ash.Reactor.Dsl.BulkUpdate</code></a></p><h3 id="reactor-change">reactor.change</h3><pre><code class="makeup elixir" translate="no"><span class="n">change</span><span class="w"> </span><span class="n">name</span><span class="p">,</span><span class="w"> </span><span class="n">change</span></code></pre><p>Declares a step that will modify a changeset.</p><h3 id="nested-dsls-4">Nested DSLs</h3><ul><li><a href="#reactor-change-argument">argument</a></li><li><a href="#reactor-change-wait_for">wait_for</a></li></ul><h3 id="arguments-29">Arguments</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a class="spark-required" href="#reactor-change-name" id="reactor-change-name"><code class="inline">name</code></a></td><td style="text-align: left;"><code class="inline">atom</code></td><td style="text-align: left;"></td><td style="text-align: left;">A unique name for this step.</td></tr><tr><td style="text-align: left;"><a class="spark-required" href="#reactor-change-change" id="reactor-change-change"><code class="inline">change</code></a></td><td style="text-align: left;"><code class="inline">(any, any -&gt; any) | module</code></td><td style="text-align: left;"></td><td style="text-align: left;">The module and options for a change. Also accepts a function that takes the changeset and the context. See <a href="Ash.Resource.Change.Builtins.xhtml"><code class="inline">Ash.Resource.Change.Builtins</code></a> for builtin changes.</td></tr></tbody></table><h3 id="options-30">Options</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a class="spark-required" href="#reactor-change-initial" id="reactor-change-initial"><code class="inline">initial</code></a></td><td style="text-align: left;"><code class="inline">module | Reactor.Template.Element | Reactor.Template.Input | Reactor.Template.Result | Reactor.Template.Value</code></td><td style="text-align: left;"></td><td style="text-align: left;">The initial value to work from, either a resource or a changeset</td></tr><tr><td style="text-align: left;"><a href="#reactor-change-description" id="reactor-change-description"><code class="inline">description</code></a></td><td style="text-align: left;"><code class="inline">String.t | nil</code></td><td style="text-align: left;"></td><td style="text-align: left;">An optional description for the change</td></tr><tr><td style="text-align: left;"><a href="#reactor-change-only_when_valid?" id="reactor-change-only_when_valid?"><code class="inline">only_when_valid?</code></a></td><td style="text-align: left;"><code class="inline">boolean</code></td><td style="text-align: left;"><code class="inline">false</code></td><td style="text-align: left;">If the change should only be run on valid changes. By default, all changes are run unless stated otherwise here.</td></tr><tr><td style="text-align: left;"><a href="#reactor-change-where" id="reactor-change-where"><code class="inline">where</code></a></td><td style="text-align: left;"><code class="inline">(any, any -&gt; any) | module | list((any, any -&gt; any) | module)</code></td><td style="text-align: left;"><code class="inline">[]</code></td><td style="text-align: left;">Validations that should pass in order for this change to apply. These validations failing will result in this change being ignored.</td></tr><tr><td style="text-align: left;"><a href="#reactor-change-fail_if_invalid?" id="reactor-change-fail_if_invalid?"><code class="inline">fail_if_invalid?</code></a></td><td style="text-align: left;"><code class="inline">boolean</code></td><td style="text-align: left;"><code class="inline">false</code></td><td style="text-align: left;">Fail if the result of the change is an invalid changeset</td></tr></tbody></table><h3 id="reactor-change-argument">reactor.change.argument</h3><pre><code class="makeup elixir" translate="no"><span class="n">argument</span><span class="w"> </span><span class="n">name</span><span class="p">,</span><span class="w"> </span><span class="n">source</span><span class="w"> </span><span class="o">\\</span><span class="w"> </span><span class="no">nil</span></code></pre><p>Specifies an argument to a Reactor step.</p><p>Each argument is a value which is either the result of another step, or an input value.</p><p>Individual arguments can be transformed with an arbitrary function before
being passed to any steps.</p><h3 id="examples-18">Examples</h3><pre><code class="makeup elixir" translate="no"><span class="n">argument</span><span class="w"> </span><span class="ss">:name</span><span class="p">,</span><span class="w"> </span><span class="n">input</span><span class="p" data-group-id="6442907509-1">(</span><span class="ss">:name</span><span class="p" data-group-id="6442907509-1">)</span><span class="w">
</span></code></pre><pre><code class="makeup elixir" translate="no"><span class="n">argument</span><span class="w"> </span><span class="ss">:year</span><span class="p">,</span><span class="w"> </span><span class="n">input</span><span class="p" data-group-id="2870121754-1">(</span><span class="ss">:date</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="2870121754-2">[</span><span class="ss">:year</span><span class="p" data-group-id="2870121754-2">]</span><span class="p" data-group-id="2870121754-1">)</span><span class="w">
</span></code></pre><pre><code class="makeup elixir" translate="no"><span class="n">argument</span><span class="w"> </span><span class="ss">:user</span><span class="p">,</span><span class="w"> </span><span class="n">result</span><span class="p" data-group-id="1476791997-1">(</span><span class="ss">:create_user</span><span class="p" data-group-id="1476791997-1">)</span><span class="w">
</span></code></pre><pre><code class="makeup elixir" translate="no"><span class="n">argument</span><span class="w"> </span><span class="ss">:user_id</span><span class="p">,</span><span class="w"> </span><span class="n">result</span><span class="p" data-group-id="9413793627-1">(</span><span class="ss">:create_user</span><span class="p" data-group-id="9413793627-1">)</span><span class="w"> </span><span class="k" data-group-id="9413793627-2">do</span><span class="w">
  </span><span class="n">transform</span><span class="w"> </span><span class="o">&amp;</span><span class="w"> </span><span class="ni">&amp;1</span><span class="o">.</span><span class="n">id</span><span class="w">
</span><span class="k" data-group-id="9413793627-2">end</span><span class="w">
</span></code></pre><pre><code class="makeup elixir" translate="no"><span class="n">argument</span><span class="w"> </span><span class="ss">:user_id</span><span class="p">,</span><span class="w"> </span><span class="n">result</span><span class="p" data-group-id="3099083986-1">(</span><span class="ss">:create_user</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="3099083986-2">[</span><span class="ss">:id</span><span class="p" data-group-id="3099083986-2">]</span><span class="p" data-group-id="3099083986-1">)</span><span class="w">
</span></code></pre><pre><code class="makeup elixir" translate="no"><span class="n">argument</span><span class="w"> </span><span class="ss">:three</span><span class="p">,</span><span class="w"> </span><span class="n">value</span><span class="p" data-group-id="1166775948-1">(</span><span class="mi">3</span><span class="p" data-group-id="1166775948-1">)</span><span class="w">
</span></code></pre><h3 id="arguments-30">Arguments</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a class="spark-required" href="#reactor-change-argument-name" id="reactor-change-argument-name"><code class="inline">name</code></a></td><td style="text-align: left;"><code class="inline">atom</code></td><td style="text-align: left;"></td><td style="text-align: left;">The name of the argument which will be used as the key in the <code class="inline">arguments</code> map passed to the implementation.</td></tr><tr><td style="text-align: left;"><a class="spark-required" href="#reactor-change-argument-source" id="reactor-change-argument-source"><code class="inline">source</code></a></td><td style="text-align: left;"><code class="inline">Reactor.Template.Element | Reactor.Template.Input | Reactor.Template.Result | Reactor.Template.Value</code></td><td style="text-align: left;"></td><td style="text-align: left;">What to use as the source of the argument. See <a href="https://hexdocs.pm/reactor/0.15.6/Reactor.Dsl.Argument.html"><code class="inline">Reactor.Dsl.Argument</code></a> for more information.</td></tr></tbody></table><h3 id="options-31">Options</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a href="#reactor-change-argument-description" id="reactor-change-argument-description"><code class="inline">description</code></a></td><td style="text-align: left;"><code class="inline">String.t | nil</code></td><td style="text-align: left;"></td><td style="text-align: left;">An optional description for the argument.</td></tr><tr><td style="text-align: left;"><a href="#reactor-change-argument-transform" id="reactor-change-argument-transform"><code class="inline">transform</code></a></td><td style="text-align: left;"><code class="inline">(any -&gt; any) | module | nil</code></td><td style="text-align: left;"></td><td style="text-align: left;">An optional transformation function which can be used to modify the argument before it is passed to the step.</td></tr></tbody></table><h3 id="introspection-29">Introspection</h3><p>Target: <a href="https://hexdocs.pm/reactor/0.15.6/Reactor.Dsl.Argument.html"><code class="inline">Reactor.Dsl.Argument</code></a></p><h3 id="reactor-change-wait_for">reactor.change.wait_for</h3><pre><code class="makeup elixir" translate="no"><span class="n">wait_for</span><span class="w"> </span><span class="n">names</span></code></pre><p>Wait for the named step to complete before allowing this one to start.</p><p>Desugars to <code class="inline">argument :_, result(step_to_wait_for)</code></p><h3 id="examples-19">Examples</h3><pre><code class="makeup elixir" translate="no"><span class="n">wait_for</span><span class="w"> </span><span class="ss">:create_user</span></code></pre><h3 id="arguments-31">Arguments</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a class="spark-required" href="#reactor-change-wait_for-names" id="reactor-change-wait_for-names"><code class="inline">names</code></a></td><td style="text-align: left;"><code class="inline">atom | list(atom)</code></td><td style="text-align: left;"></td><td style="text-align: left;">The name of the step to wait for.</td></tr></tbody></table><h3 id="options-32">Options</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a href="#reactor-change-wait_for-description" id="reactor-change-wait_for-description"><code class="inline">description</code></a></td><td style="text-align: left;"><code class="inline">String.t</code></td><td style="text-align: left;"></td><td style="text-align: left;">An optional description.</td></tr></tbody></table><h3 id="introspection-30">Introspection</h3><p>Target: <a href="https://hexdocs.pm/reactor/0.15.6/Reactor.Dsl.WaitFor.html"><code class="inline">Reactor.Dsl.WaitFor</code></a></p><h3 id="introspection-31">Introspection</h3><p>Target: <a href="Ash.Reactor.Dsl.Change.xhtml"><code class="inline">Ash.Reactor.Dsl.Change</code></a></p><h3 id="reactor-create">reactor.create</h3><pre><code class="makeup elixir" translate="no"><span class="n">create</span><span class="w"> </span><span class="n">name</span><span class="p">,</span><span class="w"> </span><span class="n">resource</span><span class="p">,</span><span class="w"> </span><span class="n">action</span><span class="w"> </span><span class="o">\\</span><span class="w"> </span><span class="no">nil</span></code></pre><p>Declares a step that will call a create action on a resource.</p><section role="note" class="admonition tip"><h4 class="admonition-title tip">Undo behaviour</h4><p>This step has three different modes of undo.</p><ul><li><code class="inline">never</code> - The result of the action is never undone.  This is the default.</li><li><code class="inline">always</code> - The <code class="inline">undo_action</code> will always be called.</li><li><code class="inline">outside_transaction</code> - The <code class="inline">undo_action</code> will not be called when running inside a <code class="inline">transaction</code> block, but will be otherwise.</li></ul></section><h3 id="nested-dsls-5">Nested DSLs</h3><ul><li><a href="#reactor-create-actor">actor</a></li><li><a href="#reactor-create-context">context</a></li><li><a href="#reactor-create-guard">guard</a></li><li><a href="#reactor-create-where">where</a></li><li><a href="#reactor-create-inputs">inputs</a></li><li><a href="#reactor-create-load">load</a></li><li><a href="#reactor-create-tenant">tenant</a></li><li><a href="#reactor-create-wait_for">wait_for</a></li></ul><h3 id="examples-20">Examples</h3><pre><code class="makeup elixir" translate="no"><span class="n">create</span><span class="w"> </span><span class="ss">:create_post</span><span class="p">,</span><span class="w"> </span><span class="nc">MyApp.Post</span><span class="p">,</span><span class="w"> </span><span class="ss">:create</span><span class="w"> </span><span class="k" data-group-id="6332321626-1">do</span><span class="w">
  </span><span class="n">inputs</span><span class="w"> </span><span class="p" data-group-id="6332321626-2">%{</span><span class="w">
    </span><span class="ss">title</span><span class="p">:</span><span class="w"> </span><span class="n">input</span><span class="p" data-group-id="6332321626-3">(</span><span class="ss">:post_title</span><span class="p" data-group-id="6332321626-3">)</span><span class="p">,</span><span class="w">
    </span><span class="ss">author_id</span><span class="p">:</span><span class="w"> </span><span class="n">result</span><span class="p" data-group-id="6332321626-4">(</span><span class="ss">:get_user</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="6332321626-5">[</span><span class="ss">:id</span><span class="p" data-group-id="6332321626-5">]</span><span class="p" data-group-id="6332321626-4">)</span><span class="w">
  </span><span class="p" data-group-id="6332321626-2">}</span><span class="w">
  </span><span class="n">actor</span><span class="w"> </span><span class="n">result</span><span class="p" data-group-id="6332321626-6">(</span><span class="ss">:get_user</span><span class="p" data-group-id="6332321626-6">)</span><span class="w">
  </span><span class="n">tenant</span><span class="w"> </span><span class="n">result</span><span class="p" data-group-id="6332321626-7">(</span><span class="ss">:get_organisation</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="6332321626-8">[</span><span class="ss">:id</span><span class="p" data-group-id="6332321626-8">]</span><span class="p" data-group-id="6332321626-7">)</span><span class="w">
</span><span class="k" data-group-id="6332321626-1">end</span><span class="w">
</span></code></pre><h3 id="arguments-32">Arguments</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a class="spark-required" href="#reactor-create-name" id="reactor-create-name"><code class="inline">name</code></a></td><td style="text-align: left;"><code class="inline">atom</code></td><td style="text-align: left;"></td><td style="text-align: left;">A unique name for the step.</td></tr><tr><td style="text-align: left;"><a class="spark-required" href="#reactor-create-resource" id="reactor-create-resource"><code class="inline">resource</code></a></td><td style="text-align: left;"><code class="inline">module</code></td><td style="text-align: left;"></td><td style="text-align: left;">The resource to call the action on.</td></tr><tr><td style="text-align: left;"><a href="#reactor-create-action" id="reactor-create-action"><code class="inline">action</code></a></td><td style="text-align: left;"><code class="inline">atom</code></td><td style="text-align: left;"></td><td style="text-align: left;">The name of the action to call on the resource.</td></tr></tbody></table><h3 id="options-33">Options</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a href="#reactor-create-initial" id="reactor-create-initial"><code class="inline">initial</code></a></td><td style="text-align: left;"><code class="inline">nil | module | Reactor.Template.Element | Reactor.Template.Input | Reactor.Template.Result | Reactor.Template.Value</code></td><td style="text-align: left;"></td><td style="text-align: left;">The initial value passed into the action.</td></tr><tr><td style="text-align: left;"><a href="#reactor-create-upsert_identity" id="reactor-create-upsert_identity"><code class="inline">upsert_identity</code></a></td><td style="text-align: left;"><code class="inline">atom</code></td><td style="text-align: left;"></td><td style="text-align: left;">The identity to use for the upsert</td></tr><tr><td style="text-align: left;"><a href="#reactor-create-upsert?" id="reactor-create-upsert?"><code class="inline">upsert?</code></a></td><td style="text-align: left;"><code class="inline">boolean</code></td><td style="text-align: left;"><code class="inline">false</code></td><td style="text-align: left;">Whether or not this action should be executed as an upsert.</td></tr><tr><td style="text-align: left;"><a href="#reactor-create-domain" id="reactor-create-domain"><code class="inline">domain</code></a></td><td style="text-align: left;"><code class="inline">module</code></td><td style="text-align: left;"></td><td style="text-align: left;">The Domain to use when calling the action.  Defaults to the Domain set on the resource or in the <code class="inline">ash</code> section.</td></tr><tr><td style="text-align: left;"><a href="#reactor-create-async?" id="reactor-create-async?"><code class="inline">async?</code></a></td><td style="text-align: left;"><code class="inline">boolean</code></td><td style="text-align: left;"><code class="inline">true</code></td><td style="text-align: left;">When set to true the step will be executed asynchronously via Reactor's <code class="inline">TaskSupervisor</code>.</td></tr><tr><td style="text-align: left;"><a href="#reactor-create-authorize?" id="reactor-create-authorize?"><code class="inline">authorize?</code></a></td><td style="text-align: left;"><code class="inline">boolean | nil</code></td><td style="text-align: left;"></td><td style="text-align: left;">Explicitly enable or disable authorization for the action.</td></tr><tr><td style="text-align: left;"><a href="#reactor-create-description" id="reactor-create-description"><code class="inline">description</code></a></td><td style="text-align: left;"><code class="inline">String.t</code></td><td style="text-align: left;"></td><td style="text-align: left;">A description for the step</td></tr><tr><td style="text-align: left;"><a href="#reactor-create-undo_action" id="reactor-create-undo_action"><code class="inline">undo_action</code></a></td><td style="text-align: left;"><code class="inline">atom</code></td><td style="text-align: left;"></td><td style="text-align: left;">The name of the action to call on the resource when the step is to be undone.</td></tr><tr><td style="text-align: left;"><a href="#reactor-create-undo" id="reactor-create-undo"><code class="inline">undo</code></a></td><td style="text-align: left;"><code class="inline">:always | :never | :outside_transaction</code></td><td style="text-align: left;"><code class="inline">:never</code></td><td style="text-align: left;">How to handle undoing this action</td></tr></tbody></table><h3 id="reactor-create-actor">reactor.create.actor</h3><pre><code class="makeup elixir" translate="no"><span class="n">actor</span><span class="w"> </span><span class="n">source</span></code></pre><p>Specifies the action actor</p><h3 id="arguments-33">Arguments</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a class="spark-required" href="#reactor-create-actor-source" id="reactor-create-actor-source"><code class="inline">source</code></a></td><td style="text-align: left;"><code class="inline">Reactor.Template.Element | Reactor.Template.Input | Reactor.Template.Result | Reactor.Template.Value</code></td><td style="text-align: left;"></td><td style="text-align: left;">What to use as the source of the actor.</td></tr></tbody></table><h3 id="options-34">Options</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a href="#reactor-create-actor-transform" id="reactor-create-actor-transform"><code class="inline">transform</code></a></td><td style="text-align: left;"><code class="inline">(any -&gt; any) | module | nil</code></td><td style="text-align: left;"></td><td style="text-align: left;">An optional transformation function which can be used to modify the actor before it is passed to the action.</td></tr></tbody></table><h3 id="introspection-32">Introspection</h3><p>Target: <a href="Ash.Reactor.Dsl.Actor.xhtml"><code class="inline">Ash.Reactor.Dsl.Actor</code></a></p><h3 id="reactor-create-context">reactor.create.context</h3><pre><code class="makeup elixir" translate="no"><span class="n">context</span><span class="w"> </span><span class="n">context</span></code></pre><p>A map to be merged into the action's context</p><h3 id="arguments-34">Arguments</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a href="#reactor-create-context-context" id="reactor-create-context-context"><code class="inline">context</code></a></td><td style="text-align: left;"><code class="inline">nil | Reactor.Template.Element | Reactor.Template.Input | Reactor.Template.Result | Reactor.Template.Value | map</code></td><td style="text-align: left;"></td><td style="text-align: left;">A map to be merged into the action's context.</td></tr></tbody></table><h3 id="options-35">Options</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a href="#reactor-create-context-transform" id="reactor-create-context-transform"><code class="inline">transform</code></a></td><td style="text-align: left;"><code class="inline">(any -&gt; any) | module | nil</code></td><td style="text-align: left;"></td><td style="text-align: left;">An optional transformation function which can be used to modify the context before it is passed to the action.</td></tr></tbody></table><h3 id="introspection-33">Introspection</h3><p>Target: <a href="Ash.Reactor.Dsl.Context.xhtml"><code class="inline">Ash.Reactor.Dsl.Context</code></a></p><h3 id="reactor-create-guard">reactor.create.guard</h3><pre><code class="makeup elixir" translate="no"><span class="n">guard</span><span class="w"> </span><span class="n">fun</span></code></pre><p>Provides a flexible method for conditionally executing a step, or replacing it's result.</p><p>Expects a two arity function which takes the step's arguments and context and returns one of the following:</p><ul><li><code class="inline">:cont</code> - the guard has passed.</li><li><code class="inline">{:halt, result}</code> - the guard has failed - instead of executing the step use the provided result.</li></ul><h3 id="examples-21">Examples</h3><pre><code class="makeup elixir" translate="no"><span class="n">step</span><span class="w"> </span><span class="ss">:read_file_via_cache</span><span class="w"> </span><span class="k" data-group-id="3009396628-1">do</span><span class="w">
  </span><span class="n">argument</span><span class="w"> </span><span class="ss">:path</span><span class="p">,</span><span class="w"> </span><span class="n">input</span><span class="p" data-group-id="3009396628-2">(</span><span class="ss">:path</span><span class="p" data-group-id="3009396628-2">)</span><span class="w">
  </span><span class="n">run</span><span class="w"> </span><span class="o">&amp;</span><span class="nc">File</span><span class="o">.</span><span class="n">read</span><span class="p" data-group-id="3009396628-3">(</span><span class="ni">&amp;1</span><span class="o">.</span><span class="n">path</span><span class="p" data-group-id="3009396628-3">)</span><span class="w">
  </span><span class="n">guard</span><span class="w"> </span><span class="k" data-group-id="3009396628-4">fn</span><span class="w"> </span><span class="p" data-group-id="3009396628-5">%{</span><span class="ss">path</span><span class="p">:</span><span class="w"> </span><span class="n">path</span><span class="p" data-group-id="3009396628-5">}</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="3009396628-6">%{</span><span class="ss">cache</span><span class="p">:</span><span class="w"> </span><span class="n">cache</span><span class="p" data-group-id="3009396628-6">}</span><span class="w"> </span><span class="o">-&gt;</span><span class="w">
    </span><span class="k">case</span><span class="w"> </span><span class="nc">Cache</span><span class="o">.</span><span class="n">get</span><span class="p" data-group-id="3009396628-7">(</span><span class="n">cache</span><span class="p">,</span><span class="w"> </span><span class="n">path</span><span class="p" data-group-id="3009396628-7">)</span><span class="w"> </span><span class="k" data-group-id="3009396628-8">do</span><span class="w">
      </span><span class="p" data-group-id="3009396628-9">{</span><span class="ss">:ok</span><span class="p">,</span><span class="w"> </span><span class="n">content</span><span class="p" data-group-id="3009396628-9">}</span><span class="w"> </span><span class="o">-&gt;</span><span class="w"> </span><span class="p" data-group-id="3009396628-10">{</span><span class="ss">:halt</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="3009396628-11">{</span><span class="ss">:ok</span><span class="p">,</span><span class="w"> </span><span class="n">content</span><span class="p" data-group-id="3009396628-11">}</span><span class="p" data-group-id="3009396628-10">}</span><span class="w">
      </span><span class="bp">_</span><span class="w"> </span><span class="o">-&gt;</span><span class="w"> </span><span class="ss">:cont</span><span class="w">
    </span><span class="k" data-group-id="3009396628-8">end</span><span class="w">
  </span><span class="k" data-group-id="3009396628-4">end</span><span class="w">
</span><span class="k" data-group-id="3009396628-1">end</span><span class="w">
</span></code></pre><h3 id="arguments-35">Arguments</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a class="spark-required" href="#reactor-create-guard-fun" id="reactor-create-guard-fun"><code class="inline">fun</code></a></td><td style="text-align: left;"><code class="inline">(any, any -&gt; any) | mfa</code></td><td style="text-align: left;"></td><td style="text-align: left;">The guard function.</td></tr></tbody></table><h3 id="options-36">Options</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a href="#reactor-create-guard-description" id="reactor-create-guard-description"><code class="inline">description</code></a></td><td style="text-align: left;"><code class="inline">String.t</code></td><td style="text-align: left;"></td><td style="text-align: left;">An optional description of the guard.</td></tr></tbody></table><h3 id="introspection-34">Introspection</h3><p>Target: <a href="https://hexdocs.pm/reactor/0.15.6/Reactor.Dsl.Guard.html"><code class="inline">Reactor.Dsl.Guard</code></a></p><h3 id="reactor-create-where">reactor.create.where</h3><pre><code class="makeup elixir" translate="no"><span class="n">where</span><span class="w"> </span><span class="n">predicate</span></code></pre><p>Only execute the surrounding step if the predicate function returns true.</p><p>This is a simple version of <code class="inline">guard</code> which provides more flexibility at the cost of complexity.</p><h3 id="examples-22">Examples</h3><pre><code class="makeup elixir" translate="no"><span class="n">step</span><span class="w"> </span><span class="ss">:read_file</span><span class="w"> </span><span class="k" data-group-id="3521070492-1">do</span><span class="w">
  </span><span class="n">argument</span><span class="w"> </span><span class="ss">:path</span><span class="p">,</span><span class="w"> </span><span class="n">input</span><span class="p" data-group-id="3521070492-2">(</span><span class="ss">:path</span><span class="p" data-group-id="3521070492-2">)</span><span class="w">
  </span><span class="n">run</span><span class="w"> </span><span class="o">&amp;</span><span class="nc">File</span><span class="o">.</span><span class="n">read</span><span class="p" data-group-id="3521070492-3">(</span><span class="ni">&amp;1</span><span class="o">.</span><span class="n">path</span><span class="p" data-group-id="3521070492-3">)</span><span class="w">
  </span><span class="n">where</span><span class="w"> </span><span class="o">&amp;</span><span class="nc">File</span><span class="o">.</span><span class="n">exists?</span><span class="p" data-group-id="3521070492-4">(</span><span class="ni">&amp;1</span><span class="o">.</span><span class="n">path</span><span class="p" data-group-id="3521070492-4">)</span><span class="w">
</span><span class="k" data-group-id="3521070492-1">end</span><span class="w">
</span></code></pre><h3 id="arguments-36">Arguments</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a class="spark-required" href="#reactor-create-where-predicate" id="reactor-create-where-predicate"><code class="inline">predicate</code></a></td><td style="text-align: left;"><code class="inline">(any -&gt; any) | mfa | (any, any -&gt; any) | mfa</code></td><td style="text-align: left;"></td><td style="text-align: left;">Provide a function which takes the step arguments and optionally the context and returns a boolean value.</td></tr></tbody></table><h3 id="options-37">Options</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a href="#reactor-create-where-description" id="reactor-create-where-description"><code class="inline">description</code></a></td><td style="text-align: left;"><code class="inline">String.t</code></td><td style="text-align: left;"></td><td style="text-align: left;">An optional description of the guard.</td></tr></tbody></table><h3 id="introspection-35">Introspection</h3><p>Target: <a href="https://hexdocs.pm/reactor/0.15.6/Reactor.Dsl.Where.html"><code class="inline">Reactor.Dsl.Where</code></a></p><h3 id="reactor-create-inputs">reactor.create.inputs</h3><pre><code class="makeup elixir" translate="no"><span class="n">inputs</span><span class="w"> </span><span class="n">template</span></code></pre><p>Specify the inputs for an action</p><h3 id="examples-23">Examples</h3><pre><code class="makeup elixir" translate="no"><span class="n">inputs</span><span class="w"> </span><span class="p" data-group-id="7565729965-1">%{</span><span class="w">
  </span><span class="ss">author</span><span class="p">:</span><span class="w"> </span><span class="n">result</span><span class="p" data-group-id="7565729965-2">(</span><span class="ss">:get_user</span><span class="p" data-group-id="7565729965-2">)</span><span class="p">,</span><span class="w">
  </span><span class="ss">title</span><span class="p">:</span><span class="w"> </span><span class="n">input</span><span class="p" data-group-id="7565729965-3">(</span><span class="ss">:title</span><span class="p" data-group-id="7565729965-3">)</span><span class="p">,</span><span class="w">
  </span><span class="ss">body</span><span class="p">:</span><span class="w"> </span><span class="n">input</span><span class="p" data-group-id="7565729965-4">(</span><span class="ss">:body</span><span class="p" data-group-id="7565729965-4">)</span><span class="w">
</span><span class="p" data-group-id="7565729965-1">}</span><span class="w">
</span></code></pre><pre><code class="makeup elixir" translate="no"><span class="n">inputs</span><span class="p" data-group-id="6350009837-1">(</span><span class="ss">author</span><span class="p">:</span><span class="w"> </span><span class="n">result</span><span class="p" data-group-id="6350009837-2">(</span><span class="ss">:get_user</span><span class="p" data-group-id="6350009837-2">)</span><span class="p" data-group-id="6350009837-1">)</span><span class="w">
</span></code></pre><h3 id="arguments-37">Arguments</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a class="spark-required" href="#reactor-create-inputs-template" id="reactor-create-inputs-template"><code class="inline">template</code></a></td><td style="text-align: left;"><code class="inline">%{optional(atom) =&gt; Reactor.Template.Element | Reactor.Template.Input | Reactor.Template.Result | Reactor.Template.Value} | keyword(Reactor.Template.Element | Reactor.Template.Input | Reactor.Template.Result | Reactor.Template.Value)</code></td><td style="text-align: left;"></td><td style="text-align: left;"></td></tr></tbody></table><h3 id="options-38">Options</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a href="#reactor-create-inputs-transform" id="reactor-create-inputs-transform"><code class="inline">transform</code></a></td><td style="text-align: left;"><code class="inline">(any -&gt; any) | module | nil</code></td><td style="text-align: left;"></td><td style="text-align: left;">An optional transformation function which will transform the inputs before executing the action.</td></tr></tbody></table><h3 id="introspection-36">Introspection</h3><p>Target: <a href="Ash.Reactor.Dsl.Inputs.xhtml"><code class="inline">Ash.Reactor.Dsl.Inputs</code></a></p><h3 id="reactor-create-load">reactor.create.load</h3><pre><code class="makeup elixir" translate="no"><span class="n">load</span><span class="w"> </span><span class="n">source</span></code></pre><p>Allows the addition of an Ash load statement to the action</p><h3 id="arguments-38">Arguments</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a class="spark-required" href="#reactor-create-load-source" id="reactor-create-load-source"><code class="inline">source</code></a></td><td style="text-align: left;"><code class="inline">Reactor.Template.Element | Reactor.Template.Input | Reactor.Template.Result | Reactor.Template.Value</code></td><td style="text-align: left;"></td><td style="text-align: left;">What to use as the source of the load</td></tr></tbody></table><h3 id="options-39">Options</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a href="#reactor-create-load-transform" id="reactor-create-load-transform"><code class="inline">transform</code></a></td><td style="text-align: left;"><code class="inline">(any -&gt; any) | module | nil</code></td><td style="text-align: left;"></td><td style="text-align: left;">An optional transformation function which can be used to modify the load before it is passed to the action.</td></tr></tbody></table><h3 id="introspection-37">Introspection</h3><p>Target: <a href="Ash.Reactor.Dsl.ActionLoad.xhtml"><code class="inline">Ash.Reactor.Dsl.ActionLoad</code></a></p><h3 id="reactor-create-tenant">reactor.create.tenant</h3><pre><code class="makeup elixir" translate="no"><span class="n">tenant</span><span class="w"> </span><span class="n">source</span></code></pre><p>Specifies the action tenant</p><h3 id="arguments-39">Arguments</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a class="spark-required" href="#reactor-create-tenant-source" id="reactor-create-tenant-source"><code class="inline">source</code></a></td><td style="text-align: left;"><code class="inline">Reactor.Template.Element | Reactor.Template.Input | Reactor.Template.Result | Reactor.Template.Value</code></td><td style="text-align: left;"></td><td style="text-align: left;">What to use as the source of the tenant.</td></tr></tbody></table><h3 id="options-40">Options</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a href="#reactor-create-tenant-transform" id="reactor-create-tenant-transform"><code class="inline">transform</code></a></td><td style="text-align: left;"><code class="inline">(any -&gt; any) | module | nil</code></td><td style="text-align: left;"></td><td style="text-align: left;">An optional transformation function which can be used to modify the tenant before it is passed to the action.</td></tr></tbody></table><h3 id="introspection-38">Introspection</h3><p>Target: <a href="Ash.Reactor.Dsl.Tenant.xhtml"><code class="inline">Ash.Reactor.Dsl.Tenant</code></a></p><h3 id="reactor-create-wait_for">reactor.create.wait_for</h3><pre><code class="makeup elixir" translate="no"><span class="n">wait_for</span><span class="w"> </span><span class="n">names</span></code></pre><p>Wait for the named step to complete before allowing this one to start.</p><p>Desugars to <code class="inline">argument :_, result(step_to_wait_for)</code></p><h3 id="examples-24">Examples</h3><pre><code class="makeup elixir" translate="no"><span class="n">wait_for</span><span class="w"> </span><span class="ss">:create_user</span></code></pre><h3 id="arguments-40">Arguments</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a class="spark-required" href="#reactor-create-wait_for-names" id="reactor-create-wait_for-names"><code class="inline">names</code></a></td><td style="text-align: left;"><code class="inline">atom | list(atom)</code></td><td style="text-align: left;"></td><td style="text-align: left;">The name of the step to wait for.</td></tr></tbody></table><h3 id="options-41">Options</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a href="#reactor-create-wait_for-description" id="reactor-create-wait_for-description"><code class="inline">description</code></a></td><td style="text-align: left;"><code class="inline">String.t</code></td><td style="text-align: left;"></td><td style="text-align: left;">An optional description.</td></tr></tbody></table><h3 id="introspection-39">Introspection</h3><p>Target: <a href="https://hexdocs.pm/reactor/0.15.6/Reactor.Dsl.WaitFor.html"><code class="inline">Reactor.Dsl.WaitFor</code></a></p><h3 id="introspection-40">Introspection</h3><p>Target: <a href="Ash.Reactor.Dsl.Create.xhtml"><code class="inline">Ash.Reactor.Dsl.Create</code></a></p><h3 id="reactor-destroy">reactor.destroy</h3><pre><code class="makeup elixir" translate="no"><span class="n">destroy</span><span class="w"> </span><span class="n">name</span><span class="p">,</span><span class="w"> </span><span class="n">resource</span><span class="p">,</span><span class="w"> </span><span class="n">action</span><span class="w"> </span><span class="o">\\</span><span class="w"> </span><span class="no">nil</span></code></pre><p>Declares a step that will call a destroy action on a resource.</p><section role="note" class="admonition tip"><h4 class="admonition-title tip">Undo behaviour</h4><p>This step has three different modes of undo.</p><ul><li><code class="inline">never</code> - The result of the action is never undone.  This is the default.</li><li><code class="inline">always</code> - The <code class="inline">undo_action</code> will always be called.</li><li><code class="inline">outside_transaction</code> - The <code class="inline">undo_action</code> will not be called when running inside a <code class="inline">transaction</code> block, but will be otherwise.</li></ul></section><h3 id="nested-dsls-6">Nested DSLs</h3><ul><li><a href="#reactor-destroy-actor">actor</a></li><li><a href="#reactor-destroy-context">context</a></li><li><a href="#reactor-destroy-guard">guard</a></li><li><a href="#reactor-destroy-where">where</a></li><li><a href="#reactor-destroy-inputs">inputs</a></li><li><a href="#reactor-destroy-load">load</a></li><li><a href="#reactor-destroy-tenant">tenant</a></li><li><a href="#reactor-destroy-wait_for">wait_for</a></li></ul><h3 id="examples-25">Examples</h3><pre><code class="makeup elixir" translate="no"><span class="n">destroy</span><span class="w"> </span><span class="ss">:delete_post</span><span class="p">,</span><span class="w"> </span><span class="nc">MyApp.Post</span><span class="p">,</span><span class="w"> </span><span class="ss">:destroy</span><span class="w"> </span><span class="k" data-group-id="2414923510-1">do</span><span class="w">
  </span><span class="n">initial</span><span class="w"> </span><span class="n">input</span><span class="p" data-group-id="2414923510-2">(</span><span class="ss">:post</span><span class="p" data-group-id="2414923510-2">)</span><span class="w">
  </span><span class="n">actor</span><span class="w"> </span><span class="n">result</span><span class="p" data-group-id="2414923510-3">(</span><span class="ss">:get_user</span><span class="p" data-group-id="2414923510-3">)</span><span class="w">
  </span><span class="n">tenant</span><span class="w"> </span><span class="n">result</span><span class="p" data-group-id="2414923510-4">(</span><span class="ss">:get_organisation</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="2414923510-5">[</span><span class="ss">:id</span><span class="p" data-group-id="2414923510-5">]</span><span class="p" data-group-id="2414923510-4">)</span><span class="w">
</span><span class="k" data-group-id="2414923510-1">end</span><span class="w">
</span></code></pre><h3 id="arguments-41">Arguments</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a class="spark-required" href="#reactor-destroy-name" id="reactor-destroy-name"><code class="inline">name</code></a></td><td style="text-align: left;"><code class="inline">atom</code></td><td style="text-align: left;"></td><td style="text-align: left;">A unique name for the step.</td></tr><tr><td style="text-align: left;"><a class="spark-required" href="#reactor-destroy-resource" id="reactor-destroy-resource"><code class="inline">resource</code></a></td><td style="text-align: left;"><code class="inline">module</code></td><td style="text-align: left;"></td><td style="text-align: left;">The resource to call the action on.</td></tr><tr><td style="text-align: left;"><a href="#reactor-destroy-action" id="reactor-destroy-action"><code class="inline">action</code></a></td><td style="text-align: left;"><code class="inline">atom</code></td><td style="text-align: left;"></td><td style="text-align: left;">The name of the action to call on the resource.</td></tr></tbody></table><h3 id="options-42">Options</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a class="spark-required" href="#reactor-destroy-initial" id="reactor-destroy-initial"><code class="inline">initial</code></a></td><td style="text-align: left;"><code class="inline">Reactor.Template.Element | Reactor.Template.Input | Reactor.Template.Result | Reactor.Template.Value</code></td><td style="text-align: left;"></td><td style="text-align: left;">The record to update.</td></tr><tr><td style="text-align: left;"><a href="#reactor-destroy-return_destroyed?" id="reactor-destroy-return_destroyed?"><code class="inline">return_destroyed?</code></a></td><td style="text-align: left;"><code class="inline">boolean</code></td><td style="text-align: left;"><code class="inline">false</code></td><td style="text-align: left;">Whether or not the step should return the destroyed record upon completion.</td></tr><tr><td style="text-align: left;"><a href="#reactor-destroy-domain" id="reactor-destroy-domain"><code class="inline">domain</code></a></td><td style="text-align: left;"><code class="inline">module</code></td><td style="text-align: left;"></td><td style="text-align: left;">The Domain to use when calling the action.  Defaults to the Domain set on the resource or in the <code class="inline">ash</code> section.</td></tr><tr><td style="text-align: left;"><a href="#reactor-destroy-async?" id="reactor-destroy-async?"><code class="inline">async?</code></a></td><td style="text-align: left;"><code class="inline">boolean</code></td><td style="text-align: left;"><code class="inline">true</code></td><td style="text-align: left;">When set to true the step will be executed asynchronously via Reactor's <code class="inline">TaskSupervisor</code>.</td></tr><tr><td style="text-align: left;"><a href="#reactor-destroy-authorize?" id="reactor-destroy-authorize?"><code class="inline">authorize?</code></a></td><td style="text-align: left;"><code class="inline">boolean | nil</code></td><td style="text-align: left;"></td><td style="text-align: left;">Explicitly enable or disable authorization for the action.</td></tr><tr><td style="text-align: left;"><a href="#reactor-destroy-description" id="reactor-destroy-description"><code class="inline">description</code></a></td><td style="text-align: left;"><code class="inline">String.t</code></td><td style="text-align: left;"></td><td style="text-align: left;">A description for the step</td></tr><tr><td style="text-align: left;"><a href="#reactor-destroy-undo_action" id="reactor-destroy-undo_action"><code class="inline">undo_action</code></a></td><td style="text-align: left;"><code class="inline">atom</code></td><td style="text-align: left;"></td><td style="text-align: left;">The name of the action to call on the resource when the step is to be undone.</td></tr><tr><td style="text-align: left;"><a href="#reactor-destroy-undo" id="reactor-destroy-undo"><code class="inline">undo</code></a></td><td style="text-align: left;"><code class="inline">:always | :never | :outside_transaction</code></td><td style="text-align: left;"><code class="inline">:never</code></td><td style="text-align: left;">How to handle undoing this action</td></tr></tbody></table><h3 id="reactor-destroy-actor">reactor.destroy.actor</h3><pre><code class="makeup elixir" translate="no"><span class="n">actor</span><span class="w"> </span><span class="n">source</span></code></pre><p>Specifies the action actor</p><h3 id="arguments-42">Arguments</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a class="spark-required" href="#reactor-destroy-actor-source" id="reactor-destroy-actor-source"><code class="inline">source</code></a></td><td style="text-align: left;"><code class="inline">Reactor.Template.Element | Reactor.Template.Input | Reactor.Template.Result | Reactor.Template.Value</code></td><td style="text-align: left;"></td><td style="text-align: left;">What to use as the source of the actor.</td></tr></tbody></table><h3 id="options-43">Options</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a href="#reactor-destroy-actor-transform" id="reactor-destroy-actor-transform"><code class="inline">transform</code></a></td><td style="text-align: left;"><code class="inline">(any -&gt; any) | module | nil</code></td><td style="text-align: left;"></td><td style="text-align: left;">An optional transformation function which can be used to modify the actor before it is passed to the action.</td></tr></tbody></table><h3 id="introspection-41">Introspection</h3><p>Target: <a href="Ash.Reactor.Dsl.Actor.xhtml"><code class="inline">Ash.Reactor.Dsl.Actor</code></a></p><h3 id="reactor-destroy-context">reactor.destroy.context</h3><pre><code class="makeup elixir" translate="no"><span class="n">context</span><span class="w"> </span><span class="n">context</span></code></pre><p>A map to be merged into the action's context</p><h3 id="arguments-43">Arguments</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a href="#reactor-destroy-context-context" id="reactor-destroy-context-context"><code class="inline">context</code></a></td><td style="text-align: left;"><code class="inline">nil | Reactor.Template.Element | Reactor.Template.Input | Reactor.Template.Result | Reactor.Template.Value | map</code></td><td style="text-align: left;"></td><td style="text-align: left;">A map to be merged into the action's context.</td></tr></tbody></table><h3 id="options-44">Options</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a href="#reactor-destroy-context-transform" id="reactor-destroy-context-transform"><code class="inline">transform</code></a></td><td style="text-align: left;"><code class="inline">(any -&gt; any) | module | nil</code></td><td style="text-align: left;"></td><td style="text-align: left;">An optional transformation function which can be used to modify the context before it is passed to the action.</td></tr></tbody></table><h3 id="introspection-42">Introspection</h3><p>Target: <a href="Ash.Reactor.Dsl.Context.xhtml"><code class="inline">Ash.Reactor.Dsl.Context</code></a></p><h3 id="reactor-destroy-guard">reactor.destroy.guard</h3><pre><code class="makeup elixir" translate="no"><span class="n">guard</span><span class="w"> </span><span class="n">fun</span></code></pre><p>Provides a flexible method for conditionally executing a step, or replacing it's result.</p><p>Expects a two arity function which takes the step's arguments and context and returns one of the following:</p><ul><li><code class="inline">:cont</code> - the guard has passed.</li><li><code class="inline">{:halt, result}</code> - the guard has failed - instead of executing the step use the provided result.</li></ul><h3 id="examples-26">Examples</h3><pre><code class="makeup elixir" translate="no"><span class="n">step</span><span class="w"> </span><span class="ss">:read_file_via_cache</span><span class="w"> </span><span class="k" data-group-id="2943888362-1">do</span><span class="w">
  </span><span class="n">argument</span><span class="w"> </span><span class="ss">:path</span><span class="p">,</span><span class="w"> </span><span class="n">input</span><span class="p" data-group-id="2943888362-2">(</span><span class="ss">:path</span><span class="p" data-group-id="2943888362-2">)</span><span class="w">
  </span><span class="n">run</span><span class="w"> </span><span class="o">&amp;</span><span class="nc">File</span><span class="o">.</span><span class="n">read</span><span class="p" data-group-id="2943888362-3">(</span><span class="ni">&amp;1</span><span class="o">.</span><span class="n">path</span><span class="p" data-group-id="2943888362-3">)</span><span class="w">
  </span><span class="n">guard</span><span class="w"> </span><span class="k" data-group-id="2943888362-4">fn</span><span class="w"> </span><span class="p" data-group-id="2943888362-5">%{</span><span class="ss">path</span><span class="p">:</span><span class="w"> </span><span class="n">path</span><span class="p" data-group-id="2943888362-5">}</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="2943888362-6">%{</span><span class="ss">cache</span><span class="p">:</span><span class="w"> </span><span class="n">cache</span><span class="p" data-group-id="2943888362-6">}</span><span class="w"> </span><span class="o">-&gt;</span><span class="w">
    </span><span class="k">case</span><span class="w"> </span><span class="nc">Cache</span><span class="o">.</span><span class="n">get</span><span class="p" data-group-id="2943888362-7">(</span><span class="n">cache</span><span class="p">,</span><span class="w"> </span><span class="n">path</span><span class="p" data-group-id="2943888362-7">)</span><span class="w"> </span><span class="k" data-group-id="2943888362-8">do</span><span class="w">
      </span><span class="p" data-group-id="2943888362-9">{</span><span class="ss">:ok</span><span class="p">,</span><span class="w"> </span><span class="n">content</span><span class="p" data-group-id="2943888362-9">}</span><span class="w"> </span><span class="o">-&gt;</span><span class="w"> </span><span class="p" data-group-id="2943888362-10">{</span><span class="ss">:halt</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="2943888362-11">{</span><span class="ss">:ok</span><span class="p">,</span><span class="w"> </span><span class="n">content</span><span class="p" data-group-id="2943888362-11">}</span><span class="p" data-group-id="2943888362-10">}</span><span class="w">
      </span><span class="bp">_</span><span class="w"> </span><span class="o">-&gt;</span><span class="w"> </span><span class="ss">:cont</span><span class="w">
    </span><span class="k" data-group-id="2943888362-8">end</span><span class="w">
  </span><span class="k" data-group-id="2943888362-4">end</span><span class="w">
</span><span class="k" data-group-id="2943888362-1">end</span><span class="w">
</span></code></pre><h3 id="arguments-44">Arguments</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a class="spark-required" href="#reactor-destroy-guard-fun" id="reactor-destroy-guard-fun"><code class="inline">fun</code></a></td><td style="text-align: left;"><code class="inline">(any, any -&gt; any) | mfa</code></td><td style="text-align: left;"></td><td style="text-align: left;">The guard function.</td></tr></tbody></table><h3 id="options-45">Options</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a href="#reactor-destroy-guard-description" id="reactor-destroy-guard-description"><code class="inline">description</code></a></td><td style="text-align: left;"><code class="inline">String.t</code></td><td style="text-align: left;"></td><td style="text-align: left;">An optional description of the guard.</td></tr></tbody></table><h3 id="introspection-43">Introspection</h3><p>Target: <a href="https://hexdocs.pm/reactor/0.15.6/Reactor.Dsl.Guard.html"><code class="inline">Reactor.Dsl.Guard</code></a></p><h3 id="reactor-destroy-where">reactor.destroy.where</h3><pre><code class="makeup elixir" translate="no"><span class="n">where</span><span class="w"> </span><span class="n">predicate</span></code></pre><p>Only execute the surrounding step if the predicate function returns true.</p><p>This is a simple version of <code class="inline">guard</code> which provides more flexibility at the cost of complexity.</p><h3 id="examples-27">Examples</h3><pre><code class="makeup elixir" translate="no"><span class="n">step</span><span class="w"> </span><span class="ss">:read_file</span><span class="w"> </span><span class="k" data-group-id="5306963662-1">do</span><span class="w">
  </span><span class="n">argument</span><span class="w"> </span><span class="ss">:path</span><span class="p">,</span><span class="w"> </span><span class="n">input</span><span class="p" data-group-id="5306963662-2">(</span><span class="ss">:path</span><span class="p" data-group-id="5306963662-2">)</span><span class="w">
  </span><span class="n">run</span><span class="w"> </span><span class="o">&amp;</span><span class="nc">File</span><span class="o">.</span><span class="n">read</span><span class="p" data-group-id="5306963662-3">(</span><span class="ni">&amp;1</span><span class="o">.</span><span class="n">path</span><span class="p" data-group-id="5306963662-3">)</span><span class="w">
  </span><span class="n">where</span><span class="w"> </span><span class="o">&amp;</span><span class="nc">File</span><span class="o">.</span><span class="n">exists?</span><span class="p" data-group-id="5306963662-4">(</span><span class="ni">&amp;1</span><span class="o">.</span><span class="n">path</span><span class="p" data-group-id="5306963662-4">)</span><span class="w">
</span><span class="k" data-group-id="5306963662-1">end</span><span class="w">
</span></code></pre><h3 id="arguments-45">Arguments</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a class="spark-required" href="#reactor-destroy-where-predicate" id="reactor-destroy-where-predicate"><code class="inline">predicate</code></a></td><td style="text-align: left;"><code class="inline">(any -&gt; any) | mfa | (any, any -&gt; any) | mfa</code></td><td style="text-align: left;"></td><td style="text-align: left;">Provide a function which takes the step arguments and optionally the context and returns a boolean value.</td></tr></tbody></table><h3 id="options-46">Options</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a href="#reactor-destroy-where-description" id="reactor-destroy-where-description"><code class="inline">description</code></a></td><td style="text-align: left;"><code class="inline">String.t</code></td><td style="text-align: left;"></td><td style="text-align: left;">An optional description of the guard.</td></tr></tbody></table><h3 id="introspection-44">Introspection</h3><p>Target: <a href="https://hexdocs.pm/reactor/0.15.6/Reactor.Dsl.Where.html"><code class="inline">Reactor.Dsl.Where</code></a></p><h3 id="reactor-destroy-inputs">reactor.destroy.inputs</h3><pre><code class="makeup elixir" translate="no"><span class="n">inputs</span><span class="w"> </span><span class="n">template</span></code></pre><p>Specify the inputs for an action</p><h3 id="examples-28">Examples</h3><pre><code class="makeup elixir" translate="no"><span class="n">inputs</span><span class="w"> </span><span class="p" data-group-id="2825906665-1">%{</span><span class="w">
  </span><span class="ss">author</span><span class="p">:</span><span class="w"> </span><span class="n">result</span><span class="p" data-group-id="2825906665-2">(</span><span class="ss">:get_user</span><span class="p" data-group-id="2825906665-2">)</span><span class="p">,</span><span class="w">
  </span><span class="ss">title</span><span class="p">:</span><span class="w"> </span><span class="n">input</span><span class="p" data-group-id="2825906665-3">(</span><span class="ss">:title</span><span class="p" data-group-id="2825906665-3">)</span><span class="p">,</span><span class="w">
  </span><span class="ss">body</span><span class="p">:</span><span class="w"> </span><span class="n">input</span><span class="p" data-group-id="2825906665-4">(</span><span class="ss">:body</span><span class="p" data-group-id="2825906665-4">)</span><span class="w">
</span><span class="p" data-group-id="2825906665-1">}</span><span class="w">
</span></code></pre><pre><code class="makeup elixir" translate="no"><span class="n">inputs</span><span class="p" data-group-id="6813109418-1">(</span><span class="ss">author</span><span class="p">:</span><span class="w"> </span><span class="n">result</span><span class="p" data-group-id="6813109418-2">(</span><span class="ss">:get_user</span><span class="p" data-group-id="6813109418-2">)</span><span class="p" data-group-id="6813109418-1">)</span><span class="w">
</span></code></pre><h3 id="arguments-46">Arguments</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a class="spark-required" href="#reactor-destroy-inputs-template" id="reactor-destroy-inputs-template"><code class="inline">template</code></a></td><td style="text-align: left;"><code class="inline">%{optional(atom) =&gt; Reactor.Template.Element | Reactor.Template.Input | Reactor.Template.Result | Reactor.Template.Value} | keyword(Reactor.Template.Element | Reactor.Template.Input | Reactor.Template.Result | Reactor.Template.Value)</code></td><td style="text-align: left;"></td><td style="text-align: left;"></td></tr></tbody></table><h3 id="options-47">Options</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a href="#reactor-destroy-inputs-transform" id="reactor-destroy-inputs-transform"><code class="inline">transform</code></a></td><td style="text-align: left;"><code class="inline">(any -&gt; any) | module | nil</code></td><td style="text-align: left;"></td><td style="text-align: left;">An optional transformation function which will transform the inputs before executing the action.</td></tr></tbody></table><h3 id="introspection-45">Introspection</h3><p>Target: <a href="Ash.Reactor.Dsl.Inputs.xhtml"><code class="inline">Ash.Reactor.Dsl.Inputs</code></a></p><h3 id="reactor-destroy-load">reactor.destroy.load</h3><pre><code class="makeup elixir" translate="no"><span class="n">load</span><span class="w"> </span><span class="n">source</span></code></pre><p>Allows the addition of an Ash load statement to the action</p><h3 id="arguments-47">Arguments</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a class="spark-required" href="#reactor-destroy-load-source" id="reactor-destroy-load-source"><code class="inline">source</code></a></td><td style="text-align: left;"><code class="inline">Reactor.Template.Element | Reactor.Template.Input | Reactor.Template.Result | Reactor.Template.Value</code></td><td style="text-align: left;"></td><td style="text-align: left;">What to use as the source of the load</td></tr></tbody></table><h3 id="options-48">Options</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a href="#reactor-destroy-load-transform" id="reactor-destroy-load-transform"><code class="inline">transform</code></a></td><td style="text-align: left;"><code class="inline">(any -&gt; any) | module | nil</code></td><td style="text-align: left;"></td><td style="text-align: left;">An optional transformation function which can be used to modify the load before it is passed to the action.</td></tr></tbody></table><h3 id="introspection-46">Introspection</h3><p>Target: <a href="Ash.Reactor.Dsl.ActionLoad.xhtml"><code class="inline">Ash.Reactor.Dsl.ActionLoad</code></a></p><h3 id="reactor-destroy-tenant">reactor.destroy.tenant</h3><pre><code class="makeup elixir" translate="no"><span class="n">tenant</span><span class="w"> </span><span class="n">source</span></code></pre><p>Specifies the action tenant</p><h3 id="arguments-48">Arguments</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a class="spark-required" href="#reactor-destroy-tenant-source" id="reactor-destroy-tenant-source"><code class="inline">source</code></a></td><td style="text-align: left;"><code class="inline">Reactor.Template.Element | Reactor.Template.Input | Reactor.Template.Result | Reactor.Template.Value</code></td><td style="text-align: left;"></td><td style="text-align: left;">What to use as the source of the tenant.</td></tr></tbody></table><h3 id="options-49">Options</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a href="#reactor-destroy-tenant-transform" id="reactor-destroy-tenant-transform"><code class="inline">transform</code></a></td><td style="text-align: left;"><code class="inline">(any -&gt; any) | module | nil</code></td><td style="text-align: left;"></td><td style="text-align: left;">An optional transformation function which can be used to modify the tenant before it is passed to the action.</td></tr></tbody></table><h3 id="introspection-47">Introspection</h3><p>Target: <a href="Ash.Reactor.Dsl.Tenant.xhtml"><code class="inline">Ash.Reactor.Dsl.Tenant</code></a></p><h3 id="reactor-destroy-wait_for">reactor.destroy.wait_for</h3><pre><code class="makeup elixir" translate="no"><span class="n">wait_for</span><span class="w"> </span><span class="n">names</span></code></pre><p>Wait for the named step to complete before allowing this one to start.</p><p>Desugars to <code class="inline">argument :_, result(step_to_wait_for)</code></p><h3 id="examples-29">Examples</h3><pre><code class="makeup elixir" translate="no"><span class="n">wait_for</span><span class="w"> </span><span class="ss">:create_user</span></code></pre><h3 id="arguments-49">Arguments</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a class="spark-required" href="#reactor-destroy-wait_for-names" id="reactor-destroy-wait_for-names"><code class="inline">names</code></a></td><td style="text-align: left;"><code class="inline">atom | list(atom)</code></td><td style="text-align: left;"></td><td style="text-align: left;">The name of the step to wait for.</td></tr></tbody></table><h3 id="options-50">Options</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a href="#reactor-destroy-wait_for-description" id="reactor-destroy-wait_for-description"><code class="inline">description</code></a></td><td style="text-align: left;"><code class="inline">String.t</code></td><td style="text-align: left;"></td><td style="text-align: left;">An optional description.</td></tr></tbody></table><h3 id="introspection-48">Introspection</h3><p>Target: <a href="https://hexdocs.pm/reactor/0.15.6/Reactor.Dsl.WaitFor.html"><code class="inline">Reactor.Dsl.WaitFor</code></a></p><h3 id="introspection-49">Introspection</h3><p>Target: <a href="Ash.Reactor.Dsl.Destroy.xhtml"><code class="inline">Ash.Reactor.Dsl.Destroy</code></a></p><h3 id="reactor-load">reactor.load</h3><pre><code class="makeup elixir" translate="no"><span class="n">load</span><span class="w"> </span><span class="n">name</span><span class="p">,</span><span class="w"> </span><span class="n">records</span><span class="p">,</span><span class="w"> </span><span class="n">load</span></code></pre><p>Declares a step that will load additional data on a resource.</p><h3 id="nested-dsls-7">Nested DSLs</h3><ul><li><a href="#reactor-load-actor">actor</a></li><li><a href="#reactor-load-context">context</a></li><li><a href="#reactor-load-guard">guard</a></li><li><a href="#reactor-load-where">where</a></li><li><a href="#reactor-load-tenant">tenant</a></li><li><a href="#reactor-load-wait_for">wait_for</a></li></ul><h3 id="arguments-50">Arguments</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a class="spark-required" href="#reactor-load-name" id="reactor-load-name"><code class="inline">name</code></a></td><td style="text-align: left;"><code class="inline">atom</code></td><td style="text-align: left;"></td><td style="text-align: left;">A unique name for the step.</td></tr><tr><td style="text-align: left;"><a class="spark-required" href="#reactor-load-records" id="reactor-load-records"><code class="inline">records</code></a></td><td style="text-align: left;"><code class="inline">Reactor.Template.Element | Reactor.Template.Input | Reactor.Template.Result | Reactor.Template.Value</code></td><td style="text-align: left;"></td><td style="text-align: left;">The records upon which to add extra loaded data</td></tr><tr><td style="text-align: left;"><a class="spark-required" href="#reactor-load-load" id="reactor-load-load"><code class="inline">load</code></a></td><td style="text-align: left;"><code class="inline">Reactor.Template.Element | Reactor.Template.Input | Reactor.Template.Result | Reactor.Template.Value</code></td><td style="text-align: left;"></td><td style="text-align: left;">An Ash load statement</td></tr></tbody></table><h3 id="options-51">Options</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a href="#reactor-load-domain" id="reactor-load-domain"><code class="inline">domain</code></a></td><td style="text-align: left;"><code class="inline">module</code></td><td style="text-align: left;"></td><td style="text-align: left;">The Domain to use when calling the action.  Defaults to the Domain set on the resource or in the <code class="inline">ash</code> section.</td></tr><tr><td style="text-align: left;"><a href="#reactor-load-async?" id="reactor-load-async?"><code class="inline">async?</code></a></td><td style="text-align: left;"><code class="inline">boolean</code></td><td style="text-align: left;"><code class="inline">true</code></td><td style="text-align: left;">When set to true the step will be executed asynchronously via Reactor's <code class="inline">TaskSupervisor</code>.</td></tr><tr><td style="text-align: left;"><a href="#reactor-load-authorize?" id="reactor-load-authorize?"><code class="inline">authorize?</code></a></td><td style="text-align: left;"><code class="inline">boolean | nil</code></td><td style="text-align: left;"></td><td style="text-align: left;">Explicitly enable or disable authorization for the action.</td></tr><tr><td style="text-align: left;"><a href="#reactor-load-description" id="reactor-load-description"><code class="inline">description</code></a></td><td style="text-align: left;"><code class="inline">String.t</code></td><td style="text-align: left;"></td><td style="text-align: left;">A description for the step</td></tr><tr><td style="text-align: left;"><a href="#reactor-load-transform" id="reactor-load-transform"><code class="inline">transform</code></a></td><td style="text-align: left;"><code class="inline">(any -&gt; any) | module | nil</code></td><td style="text-align: left;"></td><td style="text-align: left;">An optional transformation function which can be used to modify the load statement before it is passed to the load.</td></tr><tr><td style="text-align: left;"><a href="#reactor-load-lazy?" id="reactor-load-lazy?"><code class="inline">lazy?</code></a></td><td style="text-align: left;"><code class="inline">boolean</code></td><td style="text-align: left;"></td><td style="text-align: left;">If set to true, values will only be loaded if the related value isn't currently loaded.</td></tr><tr><td style="text-align: left;"><a href="#reactor-load-reuse_values?" id="reactor-load-reuse_values?"><code class="inline">reuse_values?</code></a></td><td style="text-align: left;"><code class="inline">boolean</code></td><td style="text-align: left;"></td><td style="text-align: left;">Whether calculations are allowed to reuse values that have already been loaded, or must refetch them from the data layer.</td></tr><tr><td style="text-align: left;"><a href="#reactor-load-strict?" id="reactor-load-strict?"><code class="inline">strict?</code></a></td><td style="text-align: left;"><code class="inline">boolean</code></td><td style="text-align: left;"></td><td style="text-align: left;">If set to true, only specified attributes will be loaded when passing a list of fields to fetch on a relationship, which allows for more optimized data-fetching.</td></tr></tbody></table><h3 id="reactor-load-actor">reactor.load.actor</h3><pre><code class="makeup elixir" translate="no"><span class="n">actor</span><span class="w"> </span><span class="n">source</span></code></pre><p>Specifies the action actor</p><h3 id="arguments-51">Arguments</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a class="spark-required" href="#reactor-load-actor-source" id="reactor-load-actor-source"><code class="inline">source</code></a></td><td style="text-align: left;"><code class="inline">Reactor.Template.Element | Reactor.Template.Input | Reactor.Template.Result | Reactor.Template.Value</code></td><td style="text-align: left;"></td><td style="text-align: left;">What to use as the source of the actor.</td></tr></tbody></table><h3 id="options-52">Options</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a href="#reactor-load-actor-transform" id="reactor-load-actor-transform"><code class="inline">transform</code></a></td><td style="text-align: left;"><code class="inline">(any -&gt; any) | module | nil</code></td><td style="text-align: left;"></td><td style="text-align: left;">An optional transformation function which can be used to modify the actor before it is passed to the action.</td></tr></tbody></table><h3 id="introspection-50">Introspection</h3><p>Target: <a href="Ash.Reactor.Dsl.Actor.xhtml"><code class="inline">Ash.Reactor.Dsl.Actor</code></a></p><h3 id="reactor-load-context">reactor.load.context</h3><pre><code class="makeup elixir" translate="no"><span class="n">context</span><span class="w"> </span><span class="n">context</span></code></pre><p>A map to be merged into the action's context</p><h3 id="arguments-52">Arguments</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a href="#reactor-load-context-context" id="reactor-load-context-context"><code class="inline">context</code></a></td><td style="text-align: left;"><code class="inline">nil | Reactor.Template.Element | Reactor.Template.Input | Reactor.Template.Result | Reactor.Template.Value | map</code></td><td style="text-align: left;"></td><td style="text-align: left;">A map to be merged into the action's context.</td></tr></tbody></table><h3 id="options-53">Options</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a href="#reactor-load-context-transform" id="reactor-load-context-transform"><code class="inline">transform</code></a></td><td style="text-align: left;"><code class="inline">(any -&gt; any) | module | nil</code></td><td style="text-align: left;"></td><td style="text-align: left;">An optional transformation function which can be used to modify the context before it is passed to the action.</td></tr></tbody></table><h3 id="introspection-51">Introspection</h3><p>Target: <a href="Ash.Reactor.Dsl.Context.xhtml"><code class="inline">Ash.Reactor.Dsl.Context</code></a></p><h3 id="reactor-load-guard">reactor.load.guard</h3><pre><code class="makeup elixir" translate="no"><span class="n">guard</span><span class="w"> </span><span class="n">fun</span></code></pre><p>Provides a flexible method for conditionally executing a step, or replacing it's result.</p><p>Expects a two arity function which takes the step's arguments and context and returns one of the following:</p><ul><li><code class="inline">:cont</code> - the guard has passed.</li><li><code class="inline">{:halt, result}</code> - the guard has failed - instead of executing the step use the provided result.</li></ul><h3 id="examples-30">Examples</h3><pre><code class="makeup elixir" translate="no"><span class="n">step</span><span class="w"> </span><span class="ss">:read_file_via_cache</span><span class="w"> </span><span class="k" data-group-id="0349162595-1">do</span><span class="w">
  </span><span class="n">argument</span><span class="w"> </span><span class="ss">:path</span><span class="p">,</span><span class="w"> </span><span class="n">input</span><span class="p" data-group-id="0349162595-2">(</span><span class="ss">:path</span><span class="p" data-group-id="0349162595-2">)</span><span class="w">
  </span><span class="n">run</span><span class="w"> </span><span class="o">&amp;</span><span class="nc">File</span><span class="o">.</span><span class="n">read</span><span class="p" data-group-id="0349162595-3">(</span><span class="ni">&amp;1</span><span class="o">.</span><span class="n">path</span><span class="p" data-group-id="0349162595-3">)</span><span class="w">
  </span><span class="n">guard</span><span class="w"> </span><span class="k" data-group-id="0349162595-4">fn</span><span class="w"> </span><span class="p" data-group-id="0349162595-5">%{</span><span class="ss">path</span><span class="p">:</span><span class="w"> </span><span class="n">path</span><span class="p" data-group-id="0349162595-5">}</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="0349162595-6">%{</span><span class="ss">cache</span><span class="p">:</span><span class="w"> </span><span class="n">cache</span><span class="p" data-group-id="0349162595-6">}</span><span class="w"> </span><span class="o">-&gt;</span><span class="w">
    </span><span class="k">case</span><span class="w"> </span><span class="nc">Cache</span><span class="o">.</span><span class="n">get</span><span class="p" data-group-id="0349162595-7">(</span><span class="n">cache</span><span class="p">,</span><span class="w"> </span><span class="n">path</span><span class="p" data-group-id="0349162595-7">)</span><span class="w"> </span><span class="k" data-group-id="0349162595-8">do</span><span class="w">
      </span><span class="p" data-group-id="0349162595-9">{</span><span class="ss">:ok</span><span class="p">,</span><span class="w"> </span><span class="n">content</span><span class="p" data-group-id="0349162595-9">}</span><span class="w"> </span><span class="o">-&gt;</span><span class="w"> </span><span class="p" data-group-id="0349162595-10">{</span><span class="ss">:halt</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="0349162595-11">{</span><span class="ss">:ok</span><span class="p">,</span><span class="w"> </span><span class="n">content</span><span class="p" data-group-id="0349162595-11">}</span><span class="p" data-group-id="0349162595-10">}</span><span class="w">
      </span><span class="bp">_</span><span class="w"> </span><span class="o">-&gt;</span><span class="w"> </span><span class="ss">:cont</span><span class="w">
    </span><span class="k" data-group-id="0349162595-8">end</span><span class="w">
  </span><span class="k" data-group-id="0349162595-4">end</span><span class="w">
</span><span class="k" data-group-id="0349162595-1">end</span><span class="w">
</span></code></pre><h3 id="arguments-53">Arguments</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a class="spark-required" href="#reactor-load-guard-fun" id="reactor-load-guard-fun"><code class="inline">fun</code></a></td><td style="text-align: left;"><code class="inline">(any, any -&gt; any) | mfa</code></td><td style="text-align: left;"></td><td style="text-align: left;">The guard function.</td></tr></tbody></table><h3 id="options-54">Options</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a href="#reactor-load-guard-description" id="reactor-load-guard-description"><code class="inline">description</code></a></td><td style="text-align: left;"><code class="inline">String.t</code></td><td style="text-align: left;"></td><td style="text-align: left;">An optional description of the guard.</td></tr></tbody></table><h3 id="introspection-52">Introspection</h3><p>Target: <a href="https://hexdocs.pm/reactor/0.15.6/Reactor.Dsl.Guard.html"><code class="inline">Reactor.Dsl.Guard</code></a></p><h3 id="reactor-load-where">reactor.load.where</h3><pre><code class="makeup elixir" translate="no"><span class="n">where</span><span class="w"> </span><span class="n">predicate</span></code></pre><p>Only execute the surrounding step if the predicate function returns true.</p><p>This is a simple version of <code class="inline">guard</code> which provides more flexibility at the cost of complexity.</p><h3 id="examples-31">Examples</h3><pre><code class="makeup elixir" translate="no"><span class="n">step</span><span class="w"> </span><span class="ss">:read_file</span><span class="w"> </span><span class="k" data-group-id="0194974534-1">do</span><span class="w">
  </span><span class="n">argument</span><span class="w"> </span><span class="ss">:path</span><span class="p">,</span><span class="w"> </span><span class="n">input</span><span class="p" data-group-id="0194974534-2">(</span><span class="ss">:path</span><span class="p" data-group-id="0194974534-2">)</span><span class="w">
  </span><span class="n">run</span><span class="w"> </span><span class="o">&amp;</span><span class="nc">File</span><span class="o">.</span><span class="n">read</span><span class="p" data-group-id="0194974534-3">(</span><span class="ni">&amp;1</span><span class="o">.</span><span class="n">path</span><span class="p" data-group-id="0194974534-3">)</span><span class="w">
  </span><span class="n">where</span><span class="w"> </span><span class="o">&amp;</span><span class="nc">File</span><span class="o">.</span><span class="n">exists?</span><span class="p" data-group-id="0194974534-4">(</span><span class="ni">&amp;1</span><span class="o">.</span><span class="n">path</span><span class="p" data-group-id="0194974534-4">)</span><span class="w">
</span><span class="k" data-group-id="0194974534-1">end</span><span class="w">
</span></code></pre><h3 id="arguments-54">Arguments</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a class="spark-required" href="#reactor-load-where-predicate" id="reactor-load-where-predicate"><code class="inline">predicate</code></a></td><td style="text-align: left;"><code class="inline">(any -&gt; any) | mfa | (any, any -&gt; any) | mfa</code></td><td style="text-align: left;"></td><td style="text-align: left;">Provide a function which takes the step arguments and optionally the context and returns a boolean value.</td></tr></tbody></table><h3 id="options-55">Options</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a href="#reactor-load-where-description" id="reactor-load-where-description"><code class="inline">description</code></a></td><td style="text-align: left;"><code class="inline">String.t</code></td><td style="text-align: left;"></td><td style="text-align: left;">An optional description of the guard.</td></tr></tbody></table><h3 id="introspection-53">Introspection</h3><p>Target: <a href="https://hexdocs.pm/reactor/0.15.6/Reactor.Dsl.Where.html"><code class="inline">Reactor.Dsl.Where</code></a></p><h3 id="reactor-load-tenant">reactor.load.tenant</h3><pre><code class="makeup elixir" translate="no"><span class="n">tenant</span><span class="w"> </span><span class="n">source</span></code></pre><p>Specifies the action tenant</p><h3 id="arguments-55">Arguments</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a class="spark-required" href="#reactor-load-tenant-source" id="reactor-load-tenant-source"><code class="inline">source</code></a></td><td style="text-align: left;"><code class="inline">Reactor.Template.Element | Reactor.Template.Input | Reactor.Template.Result | Reactor.Template.Value</code></td><td style="text-align: left;"></td><td style="text-align: left;">What to use as the source of the tenant.</td></tr></tbody></table><h3 id="options-56">Options</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a href="#reactor-load-tenant-transform" id="reactor-load-tenant-transform"><code class="inline">transform</code></a></td><td style="text-align: left;"><code class="inline">(any -&gt; any) | module | nil</code></td><td style="text-align: left;"></td><td style="text-align: left;">An optional transformation function which can be used to modify the tenant before it is passed to the action.</td></tr></tbody></table><h3 id="introspection-54">Introspection</h3><p>Target: <a href="Ash.Reactor.Dsl.Tenant.xhtml"><code class="inline">Ash.Reactor.Dsl.Tenant</code></a></p><h3 id="reactor-load-wait_for">reactor.load.wait_for</h3><pre><code class="makeup elixir" translate="no"><span class="n">wait_for</span><span class="w"> </span><span class="n">names</span></code></pre><p>Wait for the named step to complete before allowing this one to start.</p><p>Desugars to <code class="inline">argument :_, result(step_to_wait_for)</code></p><h3 id="examples-32">Examples</h3><pre><code class="makeup elixir" translate="no"><span class="n">wait_for</span><span class="w"> </span><span class="ss">:create_user</span></code></pre><h3 id="arguments-56">Arguments</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a class="spark-required" href="#reactor-load-wait_for-names" id="reactor-load-wait_for-names"><code class="inline">names</code></a></td><td style="text-align: left;"><code class="inline">atom | list(atom)</code></td><td style="text-align: left;"></td><td style="text-align: left;">The name of the step to wait for.</td></tr></tbody></table><h3 id="options-57">Options</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a href="#reactor-load-wait_for-description" id="reactor-load-wait_for-description"><code class="inline">description</code></a></td><td style="text-align: left;"><code class="inline">String.t</code></td><td style="text-align: left;"></td><td style="text-align: left;">An optional description.</td></tr></tbody></table><h3 id="introspection-55">Introspection</h3><p>Target: <a href="https://hexdocs.pm/reactor/0.15.6/Reactor.Dsl.WaitFor.html"><code class="inline">Reactor.Dsl.WaitFor</code></a></p><h3 id="introspection-56">Introspection</h3><p>Target: <a href="Ash.Reactor.Dsl.Load.xhtml"><code class="inline">Ash.Reactor.Dsl.Load</code></a></p><h3 id="reactor-read_one">reactor.read_one</h3><pre><code class="makeup elixir" translate="no"><span class="n">read_one</span><span class="w"> </span><span class="n">name</span><span class="p">,</span><span class="w"> </span><span class="n">resource</span><span class="p">,</span><span class="w"> </span><span class="n">action</span><span class="w"> </span><span class="o">\\</span><span class="w"> </span><span class="no">nil</span></code></pre><p>Declares a step that will call a read action on a resource returning a single record.</p><h3 id="nested-dsls-8">Nested DSLs</h3><ul><li><a href="#reactor-read_one-actor">actor</a></li><li><a href="#reactor-read_one-context">context</a></li><li><a href="#reactor-read_one-guard">guard</a></li><li><a href="#reactor-read_one-where">where</a></li><li><a href="#reactor-read_one-inputs">inputs</a></li><li><a href="#reactor-read_one-load">load</a></li><li><a href="#reactor-read_one-tenant">tenant</a></li><li><a href="#reactor-read_one-wait_for">wait_for</a></li></ul><h3 id="examples-33">Examples</h3><pre><code class="makeup elixir" translate="no"><span class="n">read_one</span><span class="w"> </span><span class="ss">:post_by_id</span><span class="p">,</span><span class="w"> </span><span class="nc">MyApp.Post</span><span class="p">,</span><span class="w"> </span><span class="ss">:read</span><span class="w"> </span><span class="k" data-group-id="9912039359-1">do</span><span class="w">
  </span><span class="n">inputs</span><span class="w"> </span><span class="p" data-group-id="9912039359-2">%{</span><span class="ss">id</span><span class="p">:</span><span class="w"> </span><span class="n">input</span><span class="p" data-group-id="9912039359-3">(</span><span class="ss">:post_id</span><span class="p" data-group-id="9912039359-3">)</span><span class="p" data-group-id="9912039359-2">}</span><span class="w">
</span><span class="k" data-group-id="9912039359-1">end</span><span class="w">
</span></code></pre><h3 id="arguments-57">Arguments</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a class="spark-required" href="#reactor-read_one-name" id="reactor-read_one-name"><code class="inline">name</code></a></td><td style="text-align: left;"><code class="inline">atom</code></td><td style="text-align: left;"></td><td style="text-align: left;">A unique name for the step.</td></tr><tr><td style="text-align: left;"><a class="spark-required" href="#reactor-read_one-resource" id="reactor-read_one-resource"><code class="inline">resource</code></a></td><td style="text-align: left;"><code class="inline">module</code></td><td style="text-align: left;"></td><td style="text-align: left;">The resource to call the action on.</td></tr><tr><td style="text-align: left;"><a href="#reactor-read_one-action" id="reactor-read_one-action"><code class="inline">action</code></a></td><td style="text-align: left;"><code class="inline">atom</code></td><td style="text-align: left;"></td><td style="text-align: left;">The name of the action to call on the resource.</td></tr></tbody></table><h3 id="options-58">Options</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a href="#reactor-read_one-fail_on_not_found?" id="reactor-read_one-fail_on_not_found?"><code class="inline">fail_on_not_found?</code></a></td><td style="text-align: left;"><code class="inline">boolean</code></td><td style="text-align: left;"><code class="inline">false</code></td><td style="text-align: left;">When set to true the step will fail if the resource is not found.</td></tr><tr><td style="text-align: left;"><a href="#reactor-read_one-domain" id="reactor-read_one-domain"><code class="inline">domain</code></a></td><td style="text-align: left;"><code class="inline">module</code></td><td style="text-align: left;"></td><td style="text-align: left;">The Domain to use when calling the action.  Defaults to the Domain set on the resource or in the <code class="inline">ash</code> section.</td></tr><tr><td style="text-align: left;"><a href="#reactor-read_one-async?" id="reactor-read_one-async?"><code class="inline">async?</code></a></td><td style="text-align: left;"><code class="inline">boolean</code></td><td style="text-align: left;"><code class="inline">true</code></td><td style="text-align: left;">When set to true the step will be executed asynchronously via Reactor's <code class="inline">TaskSupervisor</code>.</td></tr><tr><td style="text-align: left;"><a href="#reactor-read_one-authorize?" id="reactor-read_one-authorize?"><code class="inline">authorize?</code></a></td><td style="text-align: left;"><code class="inline">boolean | nil</code></td><td style="text-align: left;"></td><td style="text-align: left;">Explicitly enable or disable authorization for the action.</td></tr><tr><td style="text-align: left;"><a href="#reactor-read_one-description" id="reactor-read_one-description"><code class="inline">description</code></a></td><td style="text-align: left;"><code class="inline">String.t</code></td><td style="text-align: left;"></td><td style="text-align: left;">A description for the step</td></tr></tbody></table><h3 id="reactor-read_one-actor">reactor.read_one.actor</h3><pre><code class="makeup elixir" translate="no"><span class="n">actor</span><span class="w"> </span><span class="n">source</span></code></pre><p>Specifies the action actor</p><h3 id="arguments-58">Arguments</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a class="spark-required" href="#reactor-read_one-actor-source" id="reactor-read_one-actor-source"><code class="inline">source</code></a></td><td style="text-align: left;"><code class="inline">Reactor.Template.Element | Reactor.Template.Input | Reactor.Template.Result | Reactor.Template.Value</code></td><td style="text-align: left;"></td><td style="text-align: left;">What to use as the source of the actor.</td></tr></tbody></table><h3 id="options-59">Options</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a href="#reactor-read_one-actor-transform" id="reactor-read_one-actor-transform"><code class="inline">transform</code></a></td><td style="text-align: left;"><code class="inline">(any -&gt; any) | module | nil</code></td><td style="text-align: left;"></td><td style="text-align: left;">An optional transformation function which can be used to modify the actor before it is passed to the action.</td></tr></tbody></table><h3 id="introspection-57">Introspection</h3><p>Target: <a href="Ash.Reactor.Dsl.Actor.xhtml"><code class="inline">Ash.Reactor.Dsl.Actor</code></a></p><h3 id="reactor-read_one-context">reactor.read_one.context</h3><pre><code class="makeup elixir" translate="no"><span class="n">context</span><span class="w"> </span><span class="n">context</span></code></pre><p>A map to be merged into the action's context</p><h3 id="arguments-59">Arguments</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a href="#reactor-read_one-context-context" id="reactor-read_one-context-context"><code class="inline">context</code></a></td><td style="text-align: left;"><code class="inline">nil | Reactor.Template.Element | Reactor.Template.Input | Reactor.Template.Result | Reactor.Template.Value | map</code></td><td style="text-align: left;"></td><td style="text-align: left;">A map to be merged into the action's context.</td></tr></tbody></table><h3 id="options-60">Options</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a href="#reactor-read_one-context-transform" id="reactor-read_one-context-transform"><code class="inline">transform</code></a></td><td style="text-align: left;"><code class="inline">(any -&gt; any) | module | nil</code></td><td style="text-align: left;"></td><td style="text-align: left;">An optional transformation function which can be used to modify the context before it is passed to the action.</td></tr></tbody></table><h3 id="introspection-58">Introspection</h3><p>Target: <a href="Ash.Reactor.Dsl.Context.xhtml"><code class="inline">Ash.Reactor.Dsl.Context</code></a></p><h3 id="reactor-read_one-guard">reactor.read_one.guard</h3><pre><code class="makeup elixir" translate="no"><span class="n">guard</span><span class="w"> </span><span class="n">fun</span></code></pre><p>Provides a flexible method for conditionally executing a step, or replacing it's result.</p><p>Expects a two arity function which takes the step's arguments and context and returns one of the following:</p><ul><li><code class="inline">:cont</code> - the guard has passed.</li><li><code class="inline">{:halt, result}</code> - the guard has failed - instead of executing the step use the provided result.</li></ul><h3 id="examples-34">Examples</h3><pre><code class="makeup elixir" translate="no"><span class="n">step</span><span class="w"> </span><span class="ss">:read_file_via_cache</span><span class="w"> </span><span class="k" data-group-id="5774225545-1">do</span><span class="w">
  </span><span class="n">argument</span><span class="w"> </span><span class="ss">:path</span><span class="p">,</span><span class="w"> </span><span class="n">input</span><span class="p" data-group-id="5774225545-2">(</span><span class="ss">:path</span><span class="p" data-group-id="5774225545-2">)</span><span class="w">
  </span><span class="n">run</span><span class="w"> </span><span class="o">&amp;</span><span class="nc">File</span><span class="o">.</span><span class="n">read</span><span class="p" data-group-id="5774225545-3">(</span><span class="ni">&amp;1</span><span class="o">.</span><span class="n">path</span><span class="p" data-group-id="5774225545-3">)</span><span class="w">
  </span><span class="n">guard</span><span class="w"> </span><span class="k" data-group-id="5774225545-4">fn</span><span class="w"> </span><span class="p" data-group-id="5774225545-5">%{</span><span class="ss">path</span><span class="p">:</span><span class="w"> </span><span class="n">path</span><span class="p" data-group-id="5774225545-5">}</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="5774225545-6">%{</span><span class="ss">cache</span><span class="p">:</span><span class="w"> </span><span class="n">cache</span><span class="p" data-group-id="5774225545-6">}</span><span class="w"> </span><span class="o">-&gt;</span><span class="w">
    </span><span class="k">case</span><span class="w"> </span><span class="nc">Cache</span><span class="o">.</span><span class="n">get</span><span class="p" data-group-id="5774225545-7">(</span><span class="n">cache</span><span class="p">,</span><span class="w"> </span><span class="n">path</span><span class="p" data-group-id="5774225545-7">)</span><span class="w"> </span><span class="k" data-group-id="5774225545-8">do</span><span class="w">
      </span><span class="p" data-group-id="5774225545-9">{</span><span class="ss">:ok</span><span class="p">,</span><span class="w"> </span><span class="n">content</span><span class="p" data-group-id="5774225545-9">}</span><span class="w"> </span><span class="o">-&gt;</span><span class="w"> </span><span class="p" data-group-id="5774225545-10">{</span><span class="ss">:halt</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="5774225545-11">{</span><span class="ss">:ok</span><span class="p">,</span><span class="w"> </span><span class="n">content</span><span class="p" data-group-id="5774225545-11">}</span><span class="p" data-group-id="5774225545-10">}</span><span class="w">
      </span><span class="bp">_</span><span class="w"> </span><span class="o">-&gt;</span><span class="w"> </span><span class="ss">:cont</span><span class="w">
    </span><span class="k" data-group-id="5774225545-8">end</span><span class="w">
  </span><span class="k" data-group-id="5774225545-4">end</span><span class="w">
</span><span class="k" data-group-id="5774225545-1">end</span><span class="w">
</span></code></pre><h3 id="arguments-60">Arguments</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a class="spark-required" href="#reactor-read_one-guard-fun" id="reactor-read_one-guard-fun"><code class="inline">fun</code></a></td><td style="text-align: left;"><code class="inline">(any, any -&gt; any) | mfa</code></td><td style="text-align: left;"></td><td style="text-align: left;">The guard function.</td></tr></tbody></table><h3 id="options-61">Options</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a href="#reactor-read_one-guard-description" id="reactor-read_one-guard-description"><code class="inline">description</code></a></td><td style="text-align: left;"><code class="inline">String.t</code></td><td style="text-align: left;"></td><td style="text-align: left;">An optional description of the guard.</td></tr></tbody></table><h3 id="introspection-59">Introspection</h3><p>Target: <a href="https://hexdocs.pm/reactor/0.15.6/Reactor.Dsl.Guard.html"><code class="inline">Reactor.Dsl.Guard</code></a></p><h3 id="reactor-read_one-where">reactor.read_one.where</h3><pre><code class="makeup elixir" translate="no"><span class="n">where</span><span class="w"> </span><span class="n">predicate</span></code></pre><p>Only execute the surrounding step if the predicate function returns true.</p><p>This is a simple version of <code class="inline">guard</code> which provides more flexibility at the cost of complexity.</p><h3 id="examples-35">Examples</h3><pre><code class="makeup elixir" translate="no"><span class="n">step</span><span class="w"> </span><span class="ss">:read_file</span><span class="w"> </span><span class="k" data-group-id="6983156933-1">do</span><span class="w">
  </span><span class="n">argument</span><span class="w"> </span><span class="ss">:path</span><span class="p">,</span><span class="w"> </span><span class="n">input</span><span class="p" data-group-id="6983156933-2">(</span><span class="ss">:path</span><span class="p" data-group-id="6983156933-2">)</span><span class="w">
  </span><span class="n">run</span><span class="w"> </span><span class="o">&amp;</span><span class="nc">File</span><span class="o">.</span><span class="n">read</span><span class="p" data-group-id="6983156933-3">(</span><span class="ni">&amp;1</span><span class="o">.</span><span class="n">path</span><span class="p" data-group-id="6983156933-3">)</span><span class="w">
  </span><span class="n">where</span><span class="w"> </span><span class="o">&amp;</span><span class="nc">File</span><span class="o">.</span><span class="n">exists?</span><span class="p" data-group-id="6983156933-4">(</span><span class="ni">&amp;1</span><span class="o">.</span><span class="n">path</span><span class="p" data-group-id="6983156933-4">)</span><span class="w">
</span><span class="k" data-group-id="6983156933-1">end</span><span class="w">
</span></code></pre><h3 id="arguments-61">Arguments</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a class="spark-required" href="#reactor-read_one-where-predicate" id="reactor-read_one-where-predicate"><code class="inline">predicate</code></a></td><td style="text-align: left;"><code class="inline">(any -&gt; any) | mfa | (any, any -&gt; any) | mfa</code></td><td style="text-align: left;"></td><td style="text-align: left;">Provide a function which takes the step arguments and optionally the context and returns a boolean value.</td></tr></tbody></table><h3 id="options-62">Options</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a href="#reactor-read_one-where-description" id="reactor-read_one-where-description"><code class="inline">description</code></a></td><td style="text-align: left;"><code class="inline">String.t</code></td><td style="text-align: left;"></td><td style="text-align: left;">An optional description of the guard.</td></tr></tbody></table><h3 id="introspection-60">Introspection</h3><p>Target: <a href="https://hexdocs.pm/reactor/0.15.6/Reactor.Dsl.Where.html"><code class="inline">Reactor.Dsl.Where</code></a></p><h3 id="reactor-read_one-inputs">reactor.read_one.inputs</h3><pre><code class="makeup elixir" translate="no"><span class="n">inputs</span><span class="w"> </span><span class="n">template</span></code></pre><p>Specify the inputs for an action</p><h3 id="examples-36">Examples</h3><pre><code class="makeup elixir" translate="no"><span class="n">inputs</span><span class="w"> </span><span class="p" data-group-id="8909291304-1">%{</span><span class="w">
  </span><span class="ss">author</span><span class="p">:</span><span class="w"> </span><span class="n">result</span><span class="p" data-group-id="8909291304-2">(</span><span class="ss">:get_user</span><span class="p" data-group-id="8909291304-2">)</span><span class="p">,</span><span class="w">
  </span><span class="ss">title</span><span class="p">:</span><span class="w"> </span><span class="n">input</span><span class="p" data-group-id="8909291304-3">(</span><span class="ss">:title</span><span class="p" data-group-id="8909291304-3">)</span><span class="p">,</span><span class="w">
  </span><span class="ss">body</span><span class="p">:</span><span class="w"> </span><span class="n">input</span><span class="p" data-group-id="8909291304-4">(</span><span class="ss">:body</span><span class="p" data-group-id="8909291304-4">)</span><span class="w">
</span><span class="p" data-group-id="8909291304-1">}</span><span class="w">
</span></code></pre><pre><code class="makeup elixir" translate="no"><span class="n">inputs</span><span class="p" data-group-id="0343741149-1">(</span><span class="ss">author</span><span class="p">:</span><span class="w"> </span><span class="n">result</span><span class="p" data-group-id="0343741149-2">(</span><span class="ss">:get_user</span><span class="p" data-group-id="0343741149-2">)</span><span class="p" data-group-id="0343741149-1">)</span><span class="w">
</span></code></pre><h3 id="arguments-62">Arguments</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a class="spark-required" href="#reactor-read_one-inputs-template" id="reactor-read_one-inputs-template"><code class="inline">template</code></a></td><td style="text-align: left;"><code class="inline">%{optional(atom) =&gt; Reactor.Template.Element | Reactor.Template.Input | Reactor.Template.Result | Reactor.Template.Value} | keyword(Reactor.Template.Element | Reactor.Template.Input | Reactor.Template.Result | Reactor.Template.Value)</code></td><td style="text-align: left;"></td><td style="text-align: left;"></td></tr></tbody></table><h3 id="options-63">Options</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a href="#reactor-read_one-inputs-transform" id="reactor-read_one-inputs-transform"><code class="inline">transform</code></a></td><td style="text-align: left;"><code class="inline">(any -&gt; any) | module | nil</code></td><td style="text-align: left;"></td><td style="text-align: left;">An optional transformation function which will transform the inputs before executing the action.</td></tr></tbody></table><h3 id="introspection-61">Introspection</h3><p>Target: <a href="Ash.Reactor.Dsl.Inputs.xhtml"><code class="inline">Ash.Reactor.Dsl.Inputs</code></a></p><h3 id="reactor-read_one-load">reactor.read_one.load</h3><pre><code class="makeup elixir" translate="no"><span class="n">load</span><span class="w"> </span><span class="n">source</span></code></pre><p>Allows the addition of an Ash load statement to the action</p><h3 id="arguments-63">Arguments</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a class="spark-required" href="#reactor-read_one-load-source" id="reactor-read_one-load-source"><code class="inline">source</code></a></td><td style="text-align: left;"><code class="inline">Reactor.Template.Element | Reactor.Template.Input | Reactor.Template.Result | Reactor.Template.Value</code></td><td style="text-align: left;"></td><td style="text-align: left;">What to use as the source of the load</td></tr></tbody></table><h3 id="options-64">Options</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a href="#reactor-read_one-load-transform" id="reactor-read_one-load-transform"><code class="inline">transform</code></a></td><td style="text-align: left;"><code class="inline">(any -&gt; any) | module | nil</code></td><td style="text-align: left;"></td><td style="text-align: left;">An optional transformation function which can be used to modify the load before it is passed to the action.</td></tr></tbody></table><h3 id="introspection-62">Introspection</h3><p>Target: <a href="Ash.Reactor.Dsl.ActionLoad.xhtml"><code class="inline">Ash.Reactor.Dsl.ActionLoad</code></a></p><h3 id="reactor-read_one-tenant">reactor.read_one.tenant</h3><pre><code class="makeup elixir" translate="no"><span class="n">tenant</span><span class="w"> </span><span class="n">source</span></code></pre><p>Specifies the action tenant</p><h3 id="arguments-64">Arguments</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a class="spark-required" href="#reactor-read_one-tenant-source" id="reactor-read_one-tenant-source"><code class="inline">source</code></a></td><td style="text-align: left;"><code class="inline">Reactor.Template.Element | Reactor.Template.Input | Reactor.Template.Result | Reactor.Template.Value</code></td><td style="text-align: left;"></td><td style="text-align: left;">What to use as the source of the tenant.</td></tr></tbody></table><h3 id="options-65">Options</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a href="#reactor-read_one-tenant-transform" id="reactor-read_one-tenant-transform"><code class="inline">transform</code></a></td><td style="text-align: left;"><code class="inline">(any -&gt; any) | module | nil</code></td><td style="text-align: left;"></td><td style="text-align: left;">An optional transformation function which can be used to modify the tenant before it is passed to the action.</td></tr></tbody></table><h3 id="introspection-63">Introspection</h3><p>Target: <a href="Ash.Reactor.Dsl.Tenant.xhtml"><code class="inline">Ash.Reactor.Dsl.Tenant</code></a></p><h3 id="reactor-read_one-wait_for">reactor.read_one.wait_for</h3><pre><code class="makeup elixir" translate="no"><span class="n">wait_for</span><span class="w"> </span><span class="n">names</span></code></pre><p>Wait for the named step to complete before allowing this one to start.</p><p>Desugars to <code class="inline">argument :_, result(step_to_wait_for)</code></p><h3 id="examples-37">Examples</h3><pre><code class="makeup elixir" translate="no"><span class="n">wait_for</span><span class="w"> </span><span class="ss">:create_user</span></code></pre><h3 id="arguments-65">Arguments</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a class="spark-required" href="#reactor-read_one-wait_for-names" id="reactor-read_one-wait_for-names"><code class="inline">names</code></a></td><td style="text-align: left;"><code class="inline">atom | list(atom)</code></td><td style="text-align: left;"></td><td style="text-align: left;">The name of the step to wait for.</td></tr></tbody></table><h3 id="options-66">Options</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a href="#reactor-read_one-wait_for-description" id="reactor-read_one-wait_for-description"><code class="inline">description</code></a></td><td style="text-align: left;"><code class="inline">String.t</code></td><td style="text-align: left;"></td><td style="text-align: left;">An optional description.</td></tr></tbody></table><h3 id="introspection-64">Introspection</h3><p>Target: <a href="https://hexdocs.pm/reactor/0.15.6/Reactor.Dsl.WaitFor.html"><code class="inline">Reactor.Dsl.WaitFor</code></a></p><h3 id="introspection-65">Introspection</h3><p>Target: <a href="Ash.Reactor.Dsl.ReadOne.xhtml"><code class="inline">Ash.Reactor.Dsl.ReadOne</code></a></p><h3 id="reactor-read">reactor.read</h3><pre><code class="makeup elixir" translate="no"><span class="n">read</span><span class="w"> </span><span class="n">name</span><span class="p">,</span><span class="w"> </span><span class="n">resource</span><span class="p">,</span><span class="w"> </span><span class="n">action</span><span class="w"> </span><span class="o">\\</span><span class="w"> </span><span class="no">nil</span></code></pre><p>Declares a step that will call a read action on a resource.</p><h3 id="nested-dsls-9">Nested DSLs</h3><ul><li><a href="#reactor-read-actor">actor</a></li><li><a href="#reactor-read-context">context</a></li><li><a href="#reactor-read-guard">guard</a></li><li><a href="#reactor-read-where">where</a></li><li><a href="#reactor-read-inputs">inputs</a></li><li><a href="#reactor-read-load">load</a></li><li><a href="#reactor-read-tenant">tenant</a></li><li><a href="#reactor-read-wait_for">wait_for</a></li></ul><h3 id="examples-38">Examples</h3><pre><code class="makeup elixir" translate="no"><span class="n">read</span><span class="w"> </span><span class="ss">:read_posts</span><span class="p">,</span><span class="w"> </span><span class="nc">MyApp.Post</span><span class="p">,</span><span class="w"> </span><span class="ss">:read</span><span class="w">
</span></code></pre><pre><code class="makeup elixir" translate="no"><span class="n">read</span><span class="w"> </span><span class="ss">:read_posts_in_range</span><span class="p">,</span><span class="w"> </span><span class="nc">MyApp.Post</span><span class="p">,</span><span class="w"> </span><span class="ss">:read_in_range</span><span class="w"> </span><span class="k" data-group-id="0306715019-1">do</span><span class="w">
  </span><span class="n">inputs</span><span class="w"> </span><span class="p" data-group-id="0306715019-2">%{</span><span class="ss">min_date</span><span class="p">:</span><span class="w"> </span><span class="n">input</span><span class="p" data-group-id="0306715019-3">(</span><span class="ss">:min_date</span><span class="p" data-group-id="0306715019-3">)</span><span class="p">,</span><span class="w"> </span><span class="ss">max_date</span><span class="p">:</span><span class="w"> </span><span class="n">input</span><span class="p" data-group-id="0306715019-4">(</span><span class="ss">:max_date</span><span class="p" data-group-id="0306715019-4">)</span><span class="p" data-group-id="0306715019-2">}</span><span class="w">
</span><span class="k" data-group-id="0306715019-1">end</span><span class="w">
</span></code></pre><h3 id="arguments-66">Arguments</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a class="spark-required" href="#reactor-read-name" id="reactor-read-name"><code class="inline">name</code></a></td><td style="text-align: left;"><code class="inline">atom</code></td><td style="text-align: left;"></td><td style="text-align: left;">A unique name for the step.</td></tr><tr><td style="text-align: left;"><a class="spark-required" href="#reactor-read-resource" id="reactor-read-resource"><code class="inline">resource</code></a></td><td style="text-align: left;"><code class="inline">module</code></td><td style="text-align: left;"></td><td style="text-align: left;">The resource to call the action on.</td></tr><tr><td style="text-align: left;"><a href="#reactor-read-action" id="reactor-read-action"><code class="inline">action</code></a></td><td style="text-align: left;"><code class="inline">atom</code></td><td style="text-align: left;"></td><td style="text-align: left;">The name of the action to call on the resource.</td></tr></tbody></table><h3 id="options-67">Options</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a href="#reactor-read-domain" id="reactor-read-domain"><code class="inline">domain</code></a></td><td style="text-align: left;"><code class="inline">module</code></td><td style="text-align: left;"></td><td style="text-align: left;">The Domain to use when calling the action.  Defaults to the Domain set on the resource or in the <code class="inline">ash</code> section.</td></tr><tr><td style="text-align: left;"><a href="#reactor-read-async?" id="reactor-read-async?"><code class="inline">async?</code></a></td><td style="text-align: left;"><code class="inline">boolean</code></td><td style="text-align: left;"><code class="inline">true</code></td><td style="text-align: left;">When set to true the step will be executed asynchronously via Reactor's <code class="inline">TaskSupervisor</code>.</td></tr><tr><td style="text-align: left;"><a href="#reactor-read-authorize?" id="reactor-read-authorize?"><code class="inline">authorize?</code></a></td><td style="text-align: left;"><code class="inline">boolean | nil</code></td><td style="text-align: left;"></td><td style="text-align: left;">Explicitly enable or disable authorization for the action.</td></tr><tr><td style="text-align: left;"><a href="#reactor-read-description" id="reactor-read-description"><code class="inline">description</code></a></td><td style="text-align: left;"><code class="inline">String.t</code></td><td style="text-align: left;"></td><td style="text-align: left;">A description for the step</td></tr></tbody></table><h3 id="reactor-read-actor">reactor.read.actor</h3><pre><code class="makeup elixir" translate="no"><span class="n">actor</span><span class="w"> </span><span class="n">source</span></code></pre><p>Specifies the action actor</p><h3 id="arguments-67">Arguments</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a class="spark-required" href="#reactor-read-actor-source" id="reactor-read-actor-source"><code class="inline">source</code></a></td><td style="text-align: left;"><code class="inline">Reactor.Template.Element | Reactor.Template.Input | Reactor.Template.Result | Reactor.Template.Value</code></td><td style="text-align: left;"></td><td style="text-align: left;">What to use as the source of the actor.</td></tr></tbody></table><h3 id="options-68">Options</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a href="#reactor-read-actor-transform" id="reactor-read-actor-transform"><code class="inline">transform</code></a></td><td style="text-align: left;"><code class="inline">(any -&gt; any) | module | nil</code></td><td style="text-align: left;"></td><td style="text-align: left;">An optional transformation function which can be used to modify the actor before it is passed to the action.</td></tr></tbody></table><h3 id="introspection-66">Introspection</h3><p>Target: <a href="Ash.Reactor.Dsl.Actor.xhtml"><code class="inline">Ash.Reactor.Dsl.Actor</code></a></p><h3 id="reactor-read-context">reactor.read.context</h3><pre><code class="makeup elixir" translate="no"><span class="n">context</span><span class="w"> </span><span class="n">context</span></code></pre><p>A map to be merged into the action's context</p><h3 id="arguments-68">Arguments</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a href="#reactor-read-context-context" id="reactor-read-context-context"><code class="inline">context</code></a></td><td style="text-align: left;"><code class="inline">nil | Reactor.Template.Element | Reactor.Template.Input | Reactor.Template.Result | Reactor.Template.Value | map</code></td><td style="text-align: left;"></td><td style="text-align: left;">A map to be merged into the action's context.</td></tr></tbody></table><h3 id="options-69">Options</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a href="#reactor-read-context-transform" id="reactor-read-context-transform"><code class="inline">transform</code></a></td><td style="text-align: left;"><code class="inline">(any -&gt; any) | module | nil</code></td><td style="text-align: left;"></td><td style="text-align: left;">An optional transformation function which can be used to modify the context before it is passed to the action.</td></tr></tbody></table><h3 id="introspection-67">Introspection</h3><p>Target: <a href="Ash.Reactor.Dsl.Context.xhtml"><code class="inline">Ash.Reactor.Dsl.Context</code></a></p><h3 id="reactor-read-guard">reactor.read.guard</h3><pre><code class="makeup elixir" translate="no"><span class="n">guard</span><span class="w"> </span><span class="n">fun</span></code></pre><p>Provides a flexible method for conditionally executing a step, or replacing it's result.</p><p>Expects a two arity function which takes the step's arguments and context and returns one of the following:</p><ul><li><code class="inline">:cont</code> - the guard has passed.</li><li><code class="inline">{:halt, result}</code> - the guard has failed - instead of executing the step use the provided result.</li></ul><h3 id="examples-39">Examples</h3><pre><code class="makeup elixir" translate="no"><span class="n">step</span><span class="w"> </span><span class="ss">:read_file_via_cache</span><span class="w"> </span><span class="k" data-group-id="3754657748-1">do</span><span class="w">
  </span><span class="n">argument</span><span class="w"> </span><span class="ss">:path</span><span class="p">,</span><span class="w"> </span><span class="n">input</span><span class="p" data-group-id="3754657748-2">(</span><span class="ss">:path</span><span class="p" data-group-id="3754657748-2">)</span><span class="w">
  </span><span class="n">run</span><span class="w"> </span><span class="o">&amp;</span><span class="nc">File</span><span class="o">.</span><span class="n">read</span><span class="p" data-group-id="3754657748-3">(</span><span class="ni">&amp;1</span><span class="o">.</span><span class="n">path</span><span class="p" data-group-id="3754657748-3">)</span><span class="w">
  </span><span class="n">guard</span><span class="w"> </span><span class="k" data-group-id="3754657748-4">fn</span><span class="w"> </span><span class="p" data-group-id="3754657748-5">%{</span><span class="ss">path</span><span class="p">:</span><span class="w"> </span><span class="n">path</span><span class="p" data-group-id="3754657748-5">}</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="3754657748-6">%{</span><span class="ss">cache</span><span class="p">:</span><span class="w"> </span><span class="n">cache</span><span class="p" data-group-id="3754657748-6">}</span><span class="w"> </span><span class="o">-&gt;</span><span class="w">
    </span><span class="k">case</span><span class="w"> </span><span class="nc">Cache</span><span class="o">.</span><span class="n">get</span><span class="p" data-group-id="3754657748-7">(</span><span class="n">cache</span><span class="p">,</span><span class="w"> </span><span class="n">path</span><span class="p" data-group-id="3754657748-7">)</span><span class="w"> </span><span class="k" data-group-id="3754657748-8">do</span><span class="w">
      </span><span class="p" data-group-id="3754657748-9">{</span><span class="ss">:ok</span><span class="p">,</span><span class="w"> </span><span class="n">content</span><span class="p" data-group-id="3754657748-9">}</span><span class="w"> </span><span class="o">-&gt;</span><span class="w"> </span><span class="p" data-group-id="3754657748-10">{</span><span class="ss">:halt</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="3754657748-11">{</span><span class="ss">:ok</span><span class="p">,</span><span class="w"> </span><span class="n">content</span><span class="p" data-group-id="3754657748-11">}</span><span class="p" data-group-id="3754657748-10">}</span><span class="w">
      </span><span class="bp">_</span><span class="w"> </span><span class="o">-&gt;</span><span class="w"> </span><span class="ss">:cont</span><span class="w">
    </span><span class="k" data-group-id="3754657748-8">end</span><span class="w">
  </span><span class="k" data-group-id="3754657748-4">end</span><span class="w">
</span><span class="k" data-group-id="3754657748-1">end</span><span class="w">
</span></code></pre><h3 id="arguments-69">Arguments</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a class="spark-required" href="#reactor-read-guard-fun" id="reactor-read-guard-fun"><code class="inline">fun</code></a></td><td style="text-align: left;"><code class="inline">(any, any -&gt; any) | mfa</code></td><td style="text-align: left;"></td><td style="text-align: left;">The guard function.</td></tr></tbody></table><h3 id="options-70">Options</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a href="#reactor-read-guard-description" id="reactor-read-guard-description"><code class="inline">description</code></a></td><td style="text-align: left;"><code class="inline">String.t</code></td><td style="text-align: left;"></td><td style="text-align: left;">An optional description of the guard.</td></tr></tbody></table><h3 id="introspection-68">Introspection</h3><p>Target: <a href="https://hexdocs.pm/reactor/0.15.6/Reactor.Dsl.Guard.html"><code class="inline">Reactor.Dsl.Guard</code></a></p><h3 id="reactor-read-where">reactor.read.where</h3><pre><code class="makeup elixir" translate="no"><span class="n">where</span><span class="w"> </span><span class="n">predicate</span></code></pre><p>Only execute the surrounding step if the predicate function returns true.</p><p>This is a simple version of <code class="inline">guard</code> which provides more flexibility at the cost of complexity.</p><h3 id="examples-40">Examples</h3><pre><code class="makeup elixir" translate="no"><span class="n">step</span><span class="w"> </span><span class="ss">:read_file</span><span class="w"> </span><span class="k" data-group-id="6536993134-1">do</span><span class="w">
  </span><span class="n">argument</span><span class="w"> </span><span class="ss">:path</span><span class="p">,</span><span class="w"> </span><span class="n">input</span><span class="p" data-group-id="6536993134-2">(</span><span class="ss">:path</span><span class="p" data-group-id="6536993134-2">)</span><span class="w">
  </span><span class="n">run</span><span class="w"> </span><span class="o">&amp;</span><span class="nc">File</span><span class="o">.</span><span class="n">read</span><span class="p" data-group-id="6536993134-3">(</span><span class="ni">&amp;1</span><span class="o">.</span><span class="n">path</span><span class="p" data-group-id="6536993134-3">)</span><span class="w">
  </span><span class="n">where</span><span class="w"> </span><span class="o">&amp;</span><span class="nc">File</span><span class="o">.</span><span class="n">exists?</span><span class="p" data-group-id="6536993134-4">(</span><span class="ni">&amp;1</span><span class="o">.</span><span class="n">path</span><span class="p" data-group-id="6536993134-4">)</span><span class="w">
</span><span class="k" data-group-id="6536993134-1">end</span><span class="w">
</span></code></pre><h3 id="arguments-70">Arguments</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a class="spark-required" href="#reactor-read-where-predicate" id="reactor-read-where-predicate"><code class="inline">predicate</code></a></td><td style="text-align: left;"><code class="inline">(any -&gt; any) | mfa | (any, any -&gt; any) | mfa</code></td><td style="text-align: left;"></td><td style="text-align: left;">Provide a function which takes the step arguments and optionally the context and returns a boolean value.</td></tr></tbody></table><h3 id="options-71">Options</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a href="#reactor-read-where-description" id="reactor-read-where-description"><code class="inline">description</code></a></td><td style="text-align: left;"><code class="inline">String.t</code></td><td style="text-align: left;"></td><td style="text-align: left;">An optional description of the guard.</td></tr></tbody></table><h3 id="introspection-69">Introspection</h3><p>Target: <a href="https://hexdocs.pm/reactor/0.15.6/Reactor.Dsl.Where.html"><code class="inline">Reactor.Dsl.Where</code></a></p><h3 id="reactor-read-inputs">reactor.read.inputs</h3><pre><code class="makeup elixir" translate="no"><span class="n">inputs</span><span class="w"> </span><span class="n">template</span></code></pre><p>Specify the inputs for an action</p><h3 id="examples-41">Examples</h3><pre><code class="makeup elixir" translate="no"><span class="n">inputs</span><span class="w"> </span><span class="p" data-group-id="7274916540-1">%{</span><span class="w">
  </span><span class="ss">author</span><span class="p">:</span><span class="w"> </span><span class="n">result</span><span class="p" data-group-id="7274916540-2">(</span><span class="ss">:get_user</span><span class="p" data-group-id="7274916540-2">)</span><span class="p">,</span><span class="w">
  </span><span class="ss">title</span><span class="p">:</span><span class="w"> </span><span class="n">input</span><span class="p" data-group-id="7274916540-3">(</span><span class="ss">:title</span><span class="p" data-group-id="7274916540-3">)</span><span class="p">,</span><span class="w">
  </span><span class="ss">body</span><span class="p">:</span><span class="w"> </span><span class="n">input</span><span class="p" data-group-id="7274916540-4">(</span><span class="ss">:body</span><span class="p" data-group-id="7274916540-4">)</span><span class="w">
</span><span class="p" data-group-id="7274916540-1">}</span><span class="w">
</span></code></pre><pre><code class="makeup elixir" translate="no"><span class="n">inputs</span><span class="p" data-group-id="4571192583-1">(</span><span class="ss">author</span><span class="p">:</span><span class="w"> </span><span class="n">result</span><span class="p" data-group-id="4571192583-2">(</span><span class="ss">:get_user</span><span class="p" data-group-id="4571192583-2">)</span><span class="p" data-group-id="4571192583-1">)</span><span class="w">
</span></code></pre><h3 id="arguments-71">Arguments</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a class="spark-required" href="#reactor-read-inputs-template" id="reactor-read-inputs-template"><code class="inline">template</code></a></td><td style="text-align: left;"><code class="inline">%{optional(atom) =&gt; Reactor.Template.Element | Reactor.Template.Input | Reactor.Template.Result | Reactor.Template.Value} | keyword(Reactor.Template.Element | Reactor.Template.Input | Reactor.Template.Result | Reactor.Template.Value)</code></td><td style="text-align: left;"></td><td style="text-align: left;"></td></tr></tbody></table><h3 id="options-72">Options</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a href="#reactor-read-inputs-transform" id="reactor-read-inputs-transform"><code class="inline">transform</code></a></td><td style="text-align: left;"><code class="inline">(any -&gt; any) | module | nil</code></td><td style="text-align: left;"></td><td style="text-align: left;">An optional transformation function which will transform the inputs before executing the action.</td></tr></tbody></table><h3 id="introspection-70">Introspection</h3><p>Target: <a href="Ash.Reactor.Dsl.Inputs.xhtml"><code class="inline">Ash.Reactor.Dsl.Inputs</code></a></p><h3 id="reactor-read-load">reactor.read.load</h3><pre><code class="makeup elixir" translate="no"><span class="n">load</span><span class="w"> </span><span class="n">source</span></code></pre><p>Allows the addition of an Ash load statement to the action</p><h3 id="arguments-72">Arguments</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a class="spark-required" href="#reactor-read-load-source" id="reactor-read-load-source"><code class="inline">source</code></a></td><td style="text-align: left;"><code class="inline">Reactor.Template.Element | Reactor.Template.Input | Reactor.Template.Result | Reactor.Template.Value</code></td><td style="text-align: left;"></td><td style="text-align: left;">What to use as the source of the load</td></tr></tbody></table><h3 id="options-73">Options</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a href="#reactor-read-load-transform" id="reactor-read-load-transform"><code class="inline">transform</code></a></td><td style="text-align: left;"><code class="inline">(any -&gt; any) | module | nil</code></td><td style="text-align: left;"></td><td style="text-align: left;">An optional transformation function which can be used to modify the load before it is passed to the action.</td></tr></tbody></table><h3 id="introspection-71">Introspection</h3><p>Target: <a href="Ash.Reactor.Dsl.ActionLoad.xhtml"><code class="inline">Ash.Reactor.Dsl.ActionLoad</code></a></p><h3 id="reactor-read-tenant">reactor.read.tenant</h3><pre><code class="makeup elixir" translate="no"><span class="n">tenant</span><span class="w"> </span><span class="n">source</span></code></pre><p>Specifies the action tenant</p><h3 id="arguments-73">Arguments</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a class="spark-required" href="#reactor-read-tenant-source" id="reactor-read-tenant-source"><code class="inline">source</code></a></td><td style="text-align: left;"><code class="inline">Reactor.Template.Element | Reactor.Template.Input | Reactor.Template.Result | Reactor.Template.Value</code></td><td style="text-align: left;"></td><td style="text-align: left;">What to use as the source of the tenant.</td></tr></tbody></table><h3 id="options-74">Options</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a href="#reactor-read-tenant-transform" id="reactor-read-tenant-transform"><code class="inline">transform</code></a></td><td style="text-align: left;"><code class="inline">(any -&gt; any) | module | nil</code></td><td style="text-align: left;"></td><td style="text-align: left;">An optional transformation function which can be used to modify the tenant before it is passed to the action.</td></tr></tbody></table><h3 id="introspection-72">Introspection</h3><p>Target: <a href="Ash.Reactor.Dsl.Tenant.xhtml"><code class="inline">Ash.Reactor.Dsl.Tenant</code></a></p><h3 id="reactor-read-wait_for">reactor.read.wait_for</h3><pre><code class="makeup elixir" translate="no"><span class="n">wait_for</span><span class="w"> </span><span class="n">names</span></code></pre><p>Wait for the named step to complete before allowing this one to start.</p><p>Desugars to <code class="inline">argument :_, result(step_to_wait_for)</code></p><h3 id="examples-42">Examples</h3><pre><code class="makeup elixir" translate="no"><span class="n">wait_for</span><span class="w"> </span><span class="ss">:create_user</span></code></pre><h3 id="arguments-74">Arguments</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a class="spark-required" href="#reactor-read-wait_for-names" id="reactor-read-wait_for-names"><code class="inline">names</code></a></td><td style="text-align: left;"><code class="inline">atom | list(atom)</code></td><td style="text-align: left;"></td><td style="text-align: left;">The name of the step to wait for.</td></tr></tbody></table><h3 id="options-75">Options</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a href="#reactor-read-wait_for-description" id="reactor-read-wait_for-description"><code class="inline">description</code></a></td><td style="text-align: left;"><code class="inline">String.t</code></td><td style="text-align: left;"></td><td style="text-align: left;">An optional description.</td></tr></tbody></table><h3 id="introspection-73">Introspection</h3><p>Target: <a href="https://hexdocs.pm/reactor/0.15.6/Reactor.Dsl.WaitFor.html"><code class="inline">Reactor.Dsl.WaitFor</code></a></p><h3 id="introspection-74">Introspection</h3><p>Target: <a href="Ash.Reactor.Dsl.Read.xhtml"><code class="inline">Ash.Reactor.Dsl.Read</code></a></p><h3 id="reactor-transaction">reactor.transaction</h3><pre><code class="makeup elixir" translate="no"><span class="n">transaction</span><span class="w"> </span><span class="n">name</span><span class="p">,</span><span class="w"> </span><span class="n">resources</span></code></pre><p>Creates a group of steps which will be executed inside a data layer transaction.</p><h3 id="nested-dsls-10">Nested DSLs</h3><ul><li><a href="#reactor-transaction-guard">guard</a></li><li><a href="#reactor-transaction-where">where</a></li><li><a href="#reactor-transaction-wait_for">wait_for</a></li></ul><h3 id="arguments-75">Arguments</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a class="spark-required" href="#reactor-transaction-name" id="reactor-transaction-name"><code class="inline">name</code></a></td><td style="text-align: left;"><code class="inline">atom</code></td><td style="text-align: left;"></td><td style="text-align: left;">A unique name for the step.</td></tr><tr><td style="text-align: left;"><a class="spark-required" href="#reactor-transaction-resources" id="reactor-transaction-resources"><code class="inline">resources</code></a></td><td style="text-align: left;"><code class="inline">module | list(module)</code></td><td style="text-align: left;"></td><td style="text-align: left;">A resource or list of resources to consider in the transaction.</td></tr></tbody></table><h3 id="options-76">Options</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a href="#reactor-transaction-return" id="reactor-transaction-return"><code class="inline">return</code></a></td><td style="text-align: left;"><code class="inline">atom</code></td><td style="text-align: left;"></td><td style="text-align: left;">The name of the step whose result will be returned as the return value of the transaction.</td></tr><tr><td style="text-align: left;"><a href="#reactor-transaction-timeout" id="reactor-transaction-timeout"><code class="inline">timeout</code></a></td><td style="text-align: left;"><code class="inline">pos_integer | :infinity</code></td><td style="text-align: left;"><code class="inline">15000</code></td><td style="text-align: left;">How long to allow the transaction to run before timing out.</td></tr></tbody></table><h3 id="reactor-transaction-guard">reactor.transaction.guard</h3><pre><code class="makeup elixir" translate="no"><span class="n">guard</span><span class="w"> </span><span class="n">fun</span></code></pre><p>Provides a flexible method for conditionally executing a step, or replacing it's result.</p><p>Expects a two arity function which takes the step's arguments and context and returns one of the following:</p><ul><li><code class="inline">:cont</code> - the guard has passed.</li><li><code class="inline">{:halt, result}</code> - the guard has failed - instead of executing the step use the provided result.</li></ul><h3 id="examples-43">Examples</h3><pre><code class="makeup elixir" translate="no"><span class="n">step</span><span class="w"> </span><span class="ss">:read_file_via_cache</span><span class="w"> </span><span class="k" data-group-id="4004430808-1">do</span><span class="w">
  </span><span class="n">argument</span><span class="w"> </span><span class="ss">:path</span><span class="p">,</span><span class="w"> </span><span class="n">input</span><span class="p" data-group-id="4004430808-2">(</span><span class="ss">:path</span><span class="p" data-group-id="4004430808-2">)</span><span class="w">
  </span><span class="n">run</span><span class="w"> </span><span class="o">&amp;</span><span class="nc">File</span><span class="o">.</span><span class="n">read</span><span class="p" data-group-id="4004430808-3">(</span><span class="ni">&amp;1</span><span class="o">.</span><span class="n">path</span><span class="p" data-group-id="4004430808-3">)</span><span class="w">
  </span><span class="n">guard</span><span class="w"> </span><span class="k" data-group-id="4004430808-4">fn</span><span class="w"> </span><span class="p" data-group-id="4004430808-5">%{</span><span class="ss">path</span><span class="p">:</span><span class="w"> </span><span class="n">path</span><span class="p" data-group-id="4004430808-5">}</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="4004430808-6">%{</span><span class="ss">cache</span><span class="p">:</span><span class="w"> </span><span class="n">cache</span><span class="p" data-group-id="4004430808-6">}</span><span class="w"> </span><span class="o">-&gt;</span><span class="w">
    </span><span class="k">case</span><span class="w"> </span><span class="nc">Cache</span><span class="o">.</span><span class="n">get</span><span class="p" data-group-id="4004430808-7">(</span><span class="n">cache</span><span class="p">,</span><span class="w"> </span><span class="n">path</span><span class="p" data-group-id="4004430808-7">)</span><span class="w"> </span><span class="k" data-group-id="4004430808-8">do</span><span class="w">
      </span><span class="p" data-group-id="4004430808-9">{</span><span class="ss">:ok</span><span class="p">,</span><span class="w"> </span><span class="n">content</span><span class="p" data-group-id="4004430808-9">}</span><span class="w"> </span><span class="o">-&gt;</span><span class="w"> </span><span class="p" data-group-id="4004430808-10">{</span><span class="ss">:halt</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="4004430808-11">{</span><span class="ss">:ok</span><span class="p">,</span><span class="w"> </span><span class="n">content</span><span class="p" data-group-id="4004430808-11">}</span><span class="p" data-group-id="4004430808-10">}</span><span class="w">
      </span><span class="bp">_</span><span class="w"> </span><span class="o">-&gt;</span><span class="w"> </span><span class="ss">:cont</span><span class="w">
    </span><span class="k" data-group-id="4004430808-8">end</span><span class="w">
  </span><span class="k" data-group-id="4004430808-4">end</span><span class="w">
</span><span class="k" data-group-id="4004430808-1">end</span><span class="w">
</span></code></pre><h3 id="arguments-76">Arguments</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a class="spark-required" href="#reactor-transaction-guard-fun" id="reactor-transaction-guard-fun"><code class="inline">fun</code></a></td><td style="text-align: left;"><code class="inline">(any, any -&gt; any) | mfa</code></td><td style="text-align: left;"></td><td style="text-align: left;">The guard function.</td></tr></tbody></table><h3 id="options-77">Options</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a href="#reactor-transaction-guard-description" id="reactor-transaction-guard-description"><code class="inline">description</code></a></td><td style="text-align: left;"><code class="inline">String.t</code></td><td style="text-align: left;"></td><td style="text-align: left;">An optional description of the guard.</td></tr></tbody></table><h3 id="introspection-75">Introspection</h3><p>Target: <a href="https://hexdocs.pm/reactor/0.15.6/Reactor.Dsl.Guard.html"><code class="inline">Reactor.Dsl.Guard</code></a></p><h3 id="reactor-transaction-where">reactor.transaction.where</h3><pre><code class="makeup elixir" translate="no"><span class="n">where</span><span class="w"> </span><span class="n">predicate</span></code></pre><p>Only execute the surrounding step if the predicate function returns true.</p><p>This is a simple version of <code class="inline">guard</code> which provides more flexibility at the cost of complexity.</p><h3 id="examples-44">Examples</h3><pre><code class="makeup elixir" translate="no"><span class="n">step</span><span class="w"> </span><span class="ss">:read_file</span><span class="w"> </span><span class="k" data-group-id="7965892967-1">do</span><span class="w">
  </span><span class="n">argument</span><span class="w"> </span><span class="ss">:path</span><span class="p">,</span><span class="w"> </span><span class="n">input</span><span class="p" data-group-id="7965892967-2">(</span><span class="ss">:path</span><span class="p" data-group-id="7965892967-2">)</span><span class="w">
  </span><span class="n">run</span><span class="w"> </span><span class="o">&amp;</span><span class="nc">File</span><span class="o">.</span><span class="n">read</span><span class="p" data-group-id="7965892967-3">(</span><span class="ni">&amp;1</span><span class="o">.</span><span class="n">path</span><span class="p" data-group-id="7965892967-3">)</span><span class="w">
  </span><span class="n">where</span><span class="w"> </span><span class="o">&amp;</span><span class="nc">File</span><span class="o">.</span><span class="n">exists?</span><span class="p" data-group-id="7965892967-4">(</span><span class="ni">&amp;1</span><span class="o">.</span><span class="n">path</span><span class="p" data-group-id="7965892967-4">)</span><span class="w">
</span><span class="k" data-group-id="7965892967-1">end</span><span class="w">
</span></code></pre><h3 id="arguments-77">Arguments</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a class="spark-required" href="#reactor-transaction-where-predicate" id="reactor-transaction-where-predicate"><code class="inline">predicate</code></a></td><td style="text-align: left;"><code class="inline">(any -&gt; any) | mfa | (any, any -&gt; any) | mfa</code></td><td style="text-align: left;"></td><td style="text-align: left;">Provide a function which takes the step arguments and optionally the context and returns a boolean value.</td></tr></tbody></table><h3 id="options-78">Options</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a href="#reactor-transaction-where-description" id="reactor-transaction-where-description"><code class="inline">description</code></a></td><td style="text-align: left;"><code class="inline">String.t</code></td><td style="text-align: left;"></td><td style="text-align: left;">An optional description of the guard.</td></tr></tbody></table><h3 id="introspection-76">Introspection</h3><p>Target: <a href="https://hexdocs.pm/reactor/0.15.6/Reactor.Dsl.Where.html"><code class="inline">Reactor.Dsl.Where</code></a></p><h3 id="reactor-transaction-wait_for">reactor.transaction.wait_for</h3><pre><code class="makeup elixir" translate="no"><span class="n">wait_for</span><span class="w"> </span><span class="n">names</span></code></pre><p>Wait for the named step to complete before allowing this one to start.</p><p>Desugars to <code class="inline">argument :_, result(step_to_wait_for)</code></p><h3 id="examples-45">Examples</h3><pre><code class="makeup elixir" translate="no"><span class="n">wait_for</span><span class="w"> </span><span class="ss">:create_user</span></code></pre><h3 id="arguments-78">Arguments</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a class="spark-required" href="#reactor-transaction-wait_for-names" id="reactor-transaction-wait_for-names"><code class="inline">names</code></a></td><td style="text-align: left;"><code class="inline">atom | list(atom)</code></td><td style="text-align: left;"></td><td style="text-align: left;">The name of the step to wait for.</td></tr></tbody></table><h3 id="options-79">Options</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a href="#reactor-transaction-wait_for-description" id="reactor-transaction-wait_for-description"><code class="inline">description</code></a></td><td style="text-align: left;"><code class="inline">String.t</code></td><td style="text-align: left;"></td><td style="text-align: left;">An optional description.</td></tr></tbody></table><h3 id="introspection-77">Introspection</h3><p>Target: <a href="https://hexdocs.pm/reactor/0.15.6/Reactor.Dsl.WaitFor.html"><code class="inline">Reactor.Dsl.WaitFor</code></a></p><h3 id="introspection-78">Introspection</h3><p>Target: <a href="Ash.Reactor.Dsl.Transaction.xhtml"><code class="inline">Ash.Reactor.Dsl.Transaction</code></a></p><h3 id="reactor-update">reactor.update</h3><pre><code class="makeup elixir" translate="no"><span class="n">update</span><span class="w"> </span><span class="n">name</span><span class="p">,</span><span class="w"> </span><span class="n">resource</span><span class="p">,</span><span class="w"> </span><span class="n">action</span><span class="w"> </span><span class="o">\\</span><span class="w"> </span><span class="no">nil</span></code></pre><p>Declares a step that will call an update action on a resource.</p><section role="note" class="admonition tip"><h4 class="admonition-title tip">Undo behaviour</h4><p>This step has three different modes of undo.</p><ul><li><code class="inline">never</code> - The result of the action is never undone.  This is the default.</li><li><code class="inline">always</code> - The <code class="inline">undo_action</code> will always be called.</li><li><code class="inline">outside_transaction</code> - The <code class="inline">undo_action</code> will not be called when running inside a <code class="inline">transaction</code> block, but will be otherwise.</li></ul></section><h3 id="nested-dsls-11">Nested DSLs</h3><ul><li><a href="#reactor-update-actor">actor</a></li><li><a href="#reactor-update-context">context</a></li><li><a href="#reactor-update-guard">guard</a></li><li><a href="#reactor-update-where">where</a></li><li><a href="#reactor-update-inputs">inputs</a></li><li><a href="#reactor-update-load">load</a></li><li><a href="#reactor-update-tenant">tenant</a></li><li><a href="#reactor-update-wait_for">wait_for</a></li></ul><h3 id="examples-46">Examples</h3><pre><code class="makeup elixir" translate="no"><span class="n">update</span><span class="w"> </span><span class="ss">:publish_post</span><span class="p">,</span><span class="w"> </span><span class="nc">MyApp.Post</span><span class="p">,</span><span class="w"> </span><span class="ss">:update</span><span class="w"> </span><span class="k" data-group-id="4730521626-1">do</span><span class="w">
  </span><span class="n">initial</span><span class="w"> </span><span class="n">input</span><span class="p" data-group-id="4730521626-2">(</span><span class="ss">:post</span><span class="p" data-group-id="4730521626-2">)</span><span class="w">
  </span><span class="n">inputs</span><span class="w"> </span><span class="p" data-group-id="4730521626-3">%{</span><span class="w">
    </span><span class="ss">published</span><span class="p">:</span><span class="w"> </span><span class="n">value</span><span class="p" data-group-id="4730521626-4">(</span><span class="no">true</span><span class="p" data-group-id="4730521626-4">)</span><span class="w">
  </span><span class="p" data-group-id="4730521626-3">}</span><span class="w">
  </span><span class="n">actor</span><span class="w"> </span><span class="n">result</span><span class="p" data-group-id="4730521626-5">(</span><span class="ss">:get_user</span><span class="p" data-group-id="4730521626-5">)</span><span class="w">
  </span><span class="n">tenant</span><span class="w"> </span><span class="n">result</span><span class="p" data-group-id="4730521626-6">(</span><span class="ss">:get_organisation</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="4730521626-7">[</span><span class="ss">:id</span><span class="p" data-group-id="4730521626-7">]</span><span class="p" data-group-id="4730521626-6">)</span><span class="w">
</span><span class="k" data-group-id="4730521626-1">end</span><span class="w">
</span></code></pre><h3 id="arguments-79">Arguments</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a class="spark-required" href="#reactor-update-name" id="reactor-update-name"><code class="inline">name</code></a></td><td style="text-align: left;"><code class="inline">atom</code></td><td style="text-align: left;"></td><td style="text-align: left;">A unique name for the step.</td></tr><tr><td style="text-align: left;"><a class="spark-required" href="#reactor-update-resource" id="reactor-update-resource"><code class="inline">resource</code></a></td><td style="text-align: left;"><code class="inline">module</code></td><td style="text-align: left;"></td><td style="text-align: left;">The resource to call the action on.</td></tr><tr><td style="text-align: left;"><a href="#reactor-update-action" id="reactor-update-action"><code class="inline">action</code></a></td><td style="text-align: left;"><code class="inline">atom</code></td><td style="text-align: left;"></td><td style="text-align: left;">The name of the action to call on the resource.</td></tr></tbody></table><h3 id="options-80">Options</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a class="spark-required" href="#reactor-update-initial" id="reactor-update-initial"><code class="inline">initial</code></a></td><td style="text-align: left;"><code class="inline">Reactor.Template.Element | Reactor.Template.Input | Reactor.Template.Result | Reactor.Template.Value</code></td><td style="text-align: left;"></td><td style="text-align: left;">The record to update.</td></tr><tr><td style="text-align: left;"><a href="#reactor-update-domain" id="reactor-update-domain"><code class="inline">domain</code></a></td><td style="text-align: left;"><code class="inline">module</code></td><td style="text-align: left;"></td><td style="text-align: left;">The Domain to use when calling the action.  Defaults to the Domain set on the resource or in the <code class="inline">ash</code> section.</td></tr><tr><td style="text-align: left;"><a href="#reactor-update-async?" id="reactor-update-async?"><code class="inline">async?</code></a></td><td style="text-align: left;"><code class="inline">boolean</code></td><td style="text-align: left;"><code class="inline">true</code></td><td style="text-align: left;">When set to true the step will be executed asynchronously via Reactor's <code class="inline">TaskSupervisor</code>.</td></tr><tr><td style="text-align: left;"><a href="#reactor-update-authorize?" id="reactor-update-authorize?"><code class="inline">authorize?</code></a></td><td style="text-align: left;"><code class="inline">boolean | nil</code></td><td style="text-align: left;"></td><td style="text-align: left;">Explicitly enable or disable authorization for the action.</td></tr><tr><td style="text-align: left;"><a href="#reactor-update-description" id="reactor-update-description"><code class="inline">description</code></a></td><td style="text-align: left;"><code class="inline">String.t</code></td><td style="text-align: left;"></td><td style="text-align: left;">A description for the step</td></tr><tr><td style="text-align: left;"><a href="#reactor-update-undo_action" id="reactor-update-undo_action"><code class="inline">undo_action</code></a></td><td style="text-align: left;"><code class="inline">atom</code></td><td style="text-align: left;"></td><td style="text-align: left;">The name of the action to call on the resource when the step is to be undone.</td></tr><tr><td style="text-align: left;"><a href="#reactor-update-undo" id="reactor-update-undo"><code class="inline">undo</code></a></td><td style="text-align: left;"><code class="inline">:always | :never | :outside_transaction</code></td><td style="text-align: left;"><code class="inline">:never</code></td><td style="text-align: left;">How to handle undoing this action</td></tr></tbody></table><h3 id="reactor-update-actor">reactor.update.actor</h3><pre><code class="makeup elixir" translate="no"><span class="n">actor</span><span class="w"> </span><span class="n">source</span></code></pre><p>Specifies the action actor</p><h3 id="arguments-80">Arguments</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a class="spark-required" href="#reactor-update-actor-source" id="reactor-update-actor-source"><code class="inline">source</code></a></td><td style="text-align: left;"><code class="inline">Reactor.Template.Element | Reactor.Template.Input | Reactor.Template.Result | Reactor.Template.Value</code></td><td style="text-align: left;"></td><td style="text-align: left;">What to use as the source of the actor.</td></tr></tbody></table><h3 id="options-81">Options</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a href="#reactor-update-actor-transform" id="reactor-update-actor-transform"><code class="inline">transform</code></a></td><td style="text-align: left;"><code class="inline">(any -&gt; any) | module | nil</code></td><td style="text-align: left;"></td><td style="text-align: left;">An optional transformation function which can be used to modify the actor before it is passed to the action.</td></tr></tbody></table><h3 id="introspection-79">Introspection</h3><p>Target: <a href="Ash.Reactor.Dsl.Actor.xhtml"><code class="inline">Ash.Reactor.Dsl.Actor</code></a></p><h3 id="reactor-update-context">reactor.update.context</h3><pre><code class="makeup elixir" translate="no"><span class="n">context</span><span class="w"> </span><span class="n">context</span></code></pre><p>A map to be merged into the action's context</p><h3 id="arguments-81">Arguments</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a href="#reactor-update-context-context" id="reactor-update-context-context"><code class="inline">context</code></a></td><td style="text-align: left;"><code class="inline">nil | Reactor.Template.Element | Reactor.Template.Input | Reactor.Template.Result | Reactor.Template.Value | map</code></td><td style="text-align: left;"></td><td style="text-align: left;">A map to be merged into the action's context.</td></tr></tbody></table><h3 id="options-82">Options</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a href="#reactor-update-context-transform" id="reactor-update-context-transform"><code class="inline">transform</code></a></td><td style="text-align: left;"><code class="inline">(any -&gt; any) | module | nil</code></td><td style="text-align: left;"></td><td style="text-align: left;">An optional transformation function which can be used to modify the context before it is passed to the action.</td></tr></tbody></table><h3 id="introspection-80">Introspection</h3><p>Target: <a href="Ash.Reactor.Dsl.Context.xhtml"><code class="inline">Ash.Reactor.Dsl.Context</code></a></p><h3 id="reactor-update-guard">reactor.update.guard</h3><pre><code class="makeup elixir" translate="no"><span class="n">guard</span><span class="w"> </span><span class="n">fun</span></code></pre><p>Provides a flexible method for conditionally executing a step, or replacing it's result.</p><p>Expects a two arity function which takes the step's arguments and context and returns one of the following:</p><ul><li><code class="inline">:cont</code> - the guard has passed.</li><li><code class="inline">{:halt, result}</code> - the guard has failed - instead of executing the step use the provided result.</li></ul><h3 id="examples-47">Examples</h3><pre><code class="makeup elixir" translate="no"><span class="n">step</span><span class="w"> </span><span class="ss">:read_file_via_cache</span><span class="w"> </span><span class="k" data-group-id="3233457674-1">do</span><span class="w">
  </span><span class="n">argument</span><span class="w"> </span><span class="ss">:path</span><span class="p">,</span><span class="w"> </span><span class="n">input</span><span class="p" data-group-id="3233457674-2">(</span><span class="ss">:path</span><span class="p" data-group-id="3233457674-2">)</span><span class="w">
  </span><span class="n">run</span><span class="w"> </span><span class="o">&amp;</span><span class="nc">File</span><span class="o">.</span><span class="n">read</span><span class="p" data-group-id="3233457674-3">(</span><span class="ni">&amp;1</span><span class="o">.</span><span class="n">path</span><span class="p" data-group-id="3233457674-3">)</span><span class="w">
  </span><span class="n">guard</span><span class="w"> </span><span class="k" data-group-id="3233457674-4">fn</span><span class="w"> </span><span class="p" data-group-id="3233457674-5">%{</span><span class="ss">path</span><span class="p">:</span><span class="w"> </span><span class="n">path</span><span class="p" data-group-id="3233457674-5">}</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="3233457674-6">%{</span><span class="ss">cache</span><span class="p">:</span><span class="w"> </span><span class="n">cache</span><span class="p" data-group-id="3233457674-6">}</span><span class="w"> </span><span class="o">-&gt;</span><span class="w">
    </span><span class="k">case</span><span class="w"> </span><span class="nc">Cache</span><span class="o">.</span><span class="n">get</span><span class="p" data-group-id="3233457674-7">(</span><span class="n">cache</span><span class="p">,</span><span class="w"> </span><span class="n">path</span><span class="p" data-group-id="3233457674-7">)</span><span class="w"> </span><span class="k" data-group-id="3233457674-8">do</span><span class="w">
      </span><span class="p" data-group-id="3233457674-9">{</span><span class="ss">:ok</span><span class="p">,</span><span class="w"> </span><span class="n">content</span><span class="p" data-group-id="3233457674-9">}</span><span class="w"> </span><span class="o">-&gt;</span><span class="w"> </span><span class="p" data-group-id="3233457674-10">{</span><span class="ss">:halt</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="3233457674-11">{</span><span class="ss">:ok</span><span class="p">,</span><span class="w"> </span><span class="n">content</span><span class="p" data-group-id="3233457674-11">}</span><span class="p" data-group-id="3233457674-10">}</span><span class="w">
      </span><span class="bp">_</span><span class="w"> </span><span class="o">-&gt;</span><span class="w"> </span><span class="ss">:cont</span><span class="w">
    </span><span class="k" data-group-id="3233457674-8">end</span><span class="w">
  </span><span class="k" data-group-id="3233457674-4">end</span><span class="w">
</span><span class="k" data-group-id="3233457674-1">end</span><span class="w">
</span></code></pre><h3 id="arguments-82">Arguments</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a class="spark-required" href="#reactor-update-guard-fun" id="reactor-update-guard-fun"><code class="inline">fun</code></a></td><td style="text-align: left;"><code class="inline">(any, any -&gt; any) | mfa</code></td><td style="text-align: left;"></td><td style="text-align: left;">The guard function.</td></tr></tbody></table><h3 id="options-83">Options</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a href="#reactor-update-guard-description" id="reactor-update-guard-description"><code class="inline">description</code></a></td><td style="text-align: left;"><code class="inline">String.t</code></td><td style="text-align: left;"></td><td style="text-align: left;">An optional description of the guard.</td></tr></tbody></table><h3 id="introspection-81">Introspection</h3><p>Target: <a href="https://hexdocs.pm/reactor/0.15.6/Reactor.Dsl.Guard.html"><code class="inline">Reactor.Dsl.Guard</code></a></p><h3 id="reactor-update-where">reactor.update.where</h3><pre><code class="makeup elixir" translate="no"><span class="n">where</span><span class="w"> </span><span class="n">predicate</span></code></pre><p>Only execute the surrounding step if the predicate function returns true.</p><p>This is a simple version of <code class="inline">guard</code> which provides more flexibility at the cost of complexity.</p><h3 id="examples-48">Examples</h3><pre><code class="makeup elixir" translate="no"><span class="n">step</span><span class="w"> </span><span class="ss">:read_file</span><span class="w"> </span><span class="k" data-group-id="5842762860-1">do</span><span class="w">
  </span><span class="n">argument</span><span class="w"> </span><span class="ss">:path</span><span class="p">,</span><span class="w"> </span><span class="n">input</span><span class="p" data-group-id="5842762860-2">(</span><span class="ss">:path</span><span class="p" data-group-id="5842762860-2">)</span><span class="w">
  </span><span class="n">run</span><span class="w"> </span><span class="o">&amp;</span><span class="nc">File</span><span class="o">.</span><span class="n">read</span><span class="p" data-group-id="5842762860-3">(</span><span class="ni">&amp;1</span><span class="o">.</span><span class="n">path</span><span class="p" data-group-id="5842762860-3">)</span><span class="w">
  </span><span class="n">where</span><span class="w"> </span><span class="o">&amp;</span><span class="nc">File</span><span class="o">.</span><span class="n">exists?</span><span class="p" data-group-id="5842762860-4">(</span><span class="ni">&amp;1</span><span class="o">.</span><span class="n">path</span><span class="p" data-group-id="5842762860-4">)</span><span class="w">
</span><span class="k" data-group-id="5842762860-1">end</span><span class="w">
</span></code></pre><h3 id="arguments-83">Arguments</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a class="spark-required" href="#reactor-update-where-predicate" id="reactor-update-where-predicate"><code class="inline">predicate</code></a></td><td style="text-align: left;"><code class="inline">(any -&gt; any) | mfa | (any, any -&gt; any) | mfa</code></td><td style="text-align: left;"></td><td style="text-align: left;">Provide a function which takes the step arguments and optionally the context and returns a boolean value.</td></tr></tbody></table><h3 id="options-84">Options</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a href="#reactor-update-where-description" id="reactor-update-where-description"><code class="inline">description</code></a></td><td style="text-align: left;"><code class="inline">String.t</code></td><td style="text-align: left;"></td><td style="text-align: left;">An optional description of the guard.</td></tr></tbody></table><h3 id="introspection-82">Introspection</h3><p>Target: <a href="https://hexdocs.pm/reactor/0.15.6/Reactor.Dsl.Where.html"><code class="inline">Reactor.Dsl.Where</code></a></p><h3 id="reactor-update-inputs">reactor.update.inputs</h3><pre><code class="makeup elixir" translate="no"><span class="n">inputs</span><span class="w"> </span><span class="n">template</span></code></pre><p>Specify the inputs for an action</p><h3 id="examples-49">Examples</h3><pre><code class="makeup elixir" translate="no"><span class="n">inputs</span><span class="w"> </span><span class="p" data-group-id="5118339395-1">%{</span><span class="w">
  </span><span class="ss">author</span><span class="p">:</span><span class="w"> </span><span class="n">result</span><span class="p" data-group-id="5118339395-2">(</span><span class="ss">:get_user</span><span class="p" data-group-id="5118339395-2">)</span><span class="p">,</span><span class="w">
  </span><span class="ss">title</span><span class="p">:</span><span class="w"> </span><span class="n">input</span><span class="p" data-group-id="5118339395-3">(</span><span class="ss">:title</span><span class="p" data-group-id="5118339395-3">)</span><span class="p">,</span><span class="w">
  </span><span class="ss">body</span><span class="p">:</span><span class="w"> </span><span class="n">input</span><span class="p" data-group-id="5118339395-4">(</span><span class="ss">:body</span><span class="p" data-group-id="5118339395-4">)</span><span class="w">
</span><span class="p" data-group-id="5118339395-1">}</span><span class="w">
</span></code></pre><pre><code class="makeup elixir" translate="no"><span class="n">inputs</span><span class="p" data-group-id="1600454998-1">(</span><span class="ss">author</span><span class="p">:</span><span class="w"> </span><span class="n">result</span><span class="p" data-group-id="1600454998-2">(</span><span class="ss">:get_user</span><span class="p" data-group-id="1600454998-2">)</span><span class="p" data-group-id="1600454998-1">)</span><span class="w">
</span></code></pre><h3 id="arguments-84">Arguments</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a class="spark-required" href="#reactor-update-inputs-template" id="reactor-update-inputs-template"><code class="inline">template</code></a></td><td style="text-align: left;"><code class="inline">%{optional(atom) =&gt; Reactor.Template.Element | Reactor.Template.Input | Reactor.Template.Result | Reactor.Template.Value} | keyword(Reactor.Template.Element | Reactor.Template.Input | Reactor.Template.Result | Reactor.Template.Value)</code></td><td style="text-align: left;"></td><td style="text-align: left;"></td></tr></tbody></table><h3 id="options-85">Options</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a href="#reactor-update-inputs-transform" id="reactor-update-inputs-transform"><code class="inline">transform</code></a></td><td style="text-align: left;"><code class="inline">(any -&gt; any) | module | nil</code></td><td style="text-align: left;"></td><td style="text-align: left;">An optional transformation function which will transform the inputs before executing the action.</td></tr></tbody></table><h3 id="introspection-83">Introspection</h3><p>Target: <a href="Ash.Reactor.Dsl.Inputs.xhtml"><code class="inline">Ash.Reactor.Dsl.Inputs</code></a></p><h3 id="reactor-update-load">reactor.update.load</h3><pre><code class="makeup elixir" translate="no"><span class="n">load</span><span class="w"> </span><span class="n">source</span></code></pre><p>Allows the addition of an Ash load statement to the action</p><h3 id="arguments-85">Arguments</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a class="spark-required" href="#reactor-update-load-source" id="reactor-update-load-source"><code class="inline">source</code></a></td><td style="text-align: left;"><code class="inline">Reactor.Template.Element | Reactor.Template.Input | Reactor.Template.Result | Reactor.Template.Value</code></td><td style="text-align: left;"></td><td style="text-align: left;">What to use as the source of the load</td></tr></tbody></table><h3 id="options-86">Options</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a href="#reactor-update-load-transform" id="reactor-update-load-transform"><code class="inline">transform</code></a></td><td style="text-align: left;"><code class="inline">(any -&gt; any) | module | nil</code></td><td style="text-align: left;"></td><td style="text-align: left;">An optional transformation function which can be used to modify the load before it is passed to the action.</td></tr></tbody></table><h3 id="introspection-84">Introspection</h3><p>Target: <a href="Ash.Reactor.Dsl.ActionLoad.xhtml"><code class="inline">Ash.Reactor.Dsl.ActionLoad</code></a></p><h3 id="reactor-update-tenant">reactor.update.tenant</h3><pre><code class="makeup elixir" translate="no"><span class="n">tenant</span><span class="w"> </span><span class="n">source</span></code></pre><p>Specifies the action tenant</p><h3 id="arguments-86">Arguments</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a class="spark-required" href="#reactor-update-tenant-source" id="reactor-update-tenant-source"><code class="inline">source</code></a></td><td style="text-align: left;"><code class="inline">Reactor.Template.Element | Reactor.Template.Input | Reactor.Template.Result | Reactor.Template.Value</code></td><td style="text-align: left;"></td><td style="text-align: left;">What to use as the source of the tenant.</td></tr></tbody></table><h3 id="options-87">Options</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a href="#reactor-update-tenant-transform" id="reactor-update-tenant-transform"><code class="inline">transform</code></a></td><td style="text-align: left;"><code class="inline">(any -&gt; any) | module | nil</code></td><td style="text-align: left;"></td><td style="text-align: left;">An optional transformation function which can be used to modify the tenant before it is passed to the action.</td></tr></tbody></table><h3 id="introspection-85">Introspection</h3><p>Target: <a href="Ash.Reactor.Dsl.Tenant.xhtml"><code class="inline">Ash.Reactor.Dsl.Tenant</code></a></p><h3 id="reactor-update-wait_for">reactor.update.wait_for</h3><pre><code class="makeup elixir" translate="no"><span class="n">wait_for</span><span class="w"> </span><span class="n">names</span></code></pre><p>Wait for the named step to complete before allowing this one to start.</p><p>Desugars to <code class="inline">argument :_, result(step_to_wait_for)</code></p><h3 id="examples-50">Examples</h3><pre><code class="makeup elixir" translate="no"><span class="n">wait_for</span><span class="w"> </span><span class="ss">:create_user</span></code></pre><h3 id="arguments-87">Arguments</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a class="spark-required" href="#reactor-update-wait_for-names" id="reactor-update-wait_for-names"><code class="inline">names</code></a></td><td style="text-align: left;"><code class="inline">atom | list(atom)</code></td><td style="text-align: left;"></td><td style="text-align: left;">The name of the step to wait for.</td></tr></tbody></table><h3 id="options-88">Options</h3><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Type</th><th style="text-align: left;">Default</th><th style="text-align: left;">Docs</th></tr></thead><tbody><tr><td style="text-align: left;"><a href="#reactor-update-wait_for-description" id="reactor-update-wait_for-description"><code class="inline">description</code></a></td><td style="text-align: left;"><code class="inline">String.t</code></td><td style="text-align: left;"></td><td style="text-align: left;">An optional description.</td></tr></tbody></table><h3 id="introspection-86">Introspection</h3><p>Target: <a href="https://hexdocs.pm/reactor/0.15.6/Reactor.Dsl.WaitFor.html"><code class="inline">Reactor.Dsl.WaitFor</code></a></p><h3 id="introspection-87">Introspection</h3><p>Target: <a href="Ash.Reactor.Dsl.Update.xhtml"><code class="inline">Ash.Reactor.Dsl.Update</code></a></p><style type="text/css">.spark-required::after { content: "*"; color: red !important; }</style>

  </body>
</html>
