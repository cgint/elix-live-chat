<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"
      xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>Design Principles - ash v3.5.33</title>
    <meta name="generator" content="ExDoc v0.38.2" />
    <link type="text/css" rel="stylesheet" href="dist/epub-elixir-FNUUKFP7.css" />
    <script src="dist/epub-4WIP524F.js"></script>

  </head>
  <body class="content-inner">

    <h1 id="content">Design Principles</h1>
<p>The design principles behind Ash allows us to build an extremely flexible and powerful set of tools, without locking users into specific choices at any level. The framework acts as a spinal cord for your application, with extension points at every level to allow for custom behavior. What follows are the core tenets behind Ash Framework.</p><h2 id="anything-not-everything">Anything, not Everything</h2><p>&quot;Anything, not Everything&quot; means building a framework capable of doing anything, not providing a framework that already does everything. The first is possible, the second is not. Our primary goal is to provide a framework that <em>unlocks</em> potential, and frees developers to work on the things that make their application special.</p><p>To this end, there are many prebuilt extensions to use, but there is also a rich suite of tools to build your <em>own</em> extensions. In this way, you can make the framework work for you, instead of struggling to fit your application to a strictly prescribed pattern. Use as much of Ash as you can, and leverage the amazing Elixir ecosystem for everything else.</p><h2 id="declarative-introspectable-derivable">Declarative, Introspectable, Derivable</h2><p>The real superpower behind Ash is the declarative design pattern. All behavior is driven by explicit, static declarations. A resource, for example, is really just a configuration file. On its own it does nothing. It is provided to code that reads that configuration and acts accordingly.</p><p>You can read more about some simple declarative design patterns outside of the context of Ash Framework in <a href="https://zachdaniel.dev/incremental-declarative-design">An Incremental Approach to Declarative Design</a>.</p><h2 id="configuration-over-convention">Configuration over Convention</h2><p>While convention has value, we believe that explicit configuration ultimately leads to more discoverable, maintainable and flexible applications than a convention driven approach. This means that we never do things like assume that files with a given name are a certain type of thing, or that because a file is in a certain location, it should perform a specific function.</p><h2 id="pragmatism-first">Pragmatism First</h2><p>While Ash does have lofty goals and a roadmap, the priority for development is always what the <em>current</em> users of Ash need or are having trouble with. We focus on simple, pragmatic, and integrated solutions that meld well with the rest of the framework.</p><p>A high priority is placed on ensuring that our users don't experience feature whip-lash due to poorly thought out implementations, and that any breaking changes (a rare occurrence) have a clean and simple upgrade path. This is something made much easier by the declarative pattern.</p><h2 id="community">Community</h2><p>The Ash community comes together and collaborates to make sure that we can all build our software quickly, effectively and in a way that will age gracefully. We have a strict code of conduct, and love working with people of any experience level or background. To experience this first-hand, participate on <a href="https://elixirforum.com/c/elixir-framework-forums/ash-framework-forum/123">ElixirForum</a> or join our <a href="https://discord.gg/D7FNG2q">discord</a>!</p><section role="note" class="admonition info"><h3 id="domain-driven-design" class="admonition-title info">Domain Driven Design?</h3><p> Ash is <em>not</em> a Domain Driven Design framework, if we're talking about &quot;proper&quot; Domain Driven Design as it is taught and discussed today. Domain Driven Design comes with a considerable amount of baggage and unnecessary complexity. While we identify with the <em>goals</em> of Domain Driven Design, we believe that a simpler approach is more effective, and that much of what DDD teaches are actually <em>implementation</em> details, and not <em>design</em> concepts. If the name wasn't taken, we would surely have claimed it for ourselves. If you must have a similar term for Ash, consider it a &quot;Resource-oriented, Declarative Design Application Framework&quot;.</p></section>

  </body>
</html>
