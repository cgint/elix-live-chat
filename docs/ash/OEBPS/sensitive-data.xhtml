<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"
      xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>Sensitive Data - ash v3.5.33</title>
    <meta name="generator" content="ExDoc v0.38.2" />
    <link type="text/css" rel="stylesheet" href="dist/epub-elixir-FNUUKFP7.css" />
    <script src="dist/epub-4WIP524F.js"></script>

  </head>
  <body class="content-inner">

    <h1 id="content">Sensitive Data</h1>
<h2 id="public-private-attributes">Public &amp; Private Attributes</h2><p>By default, attributes, calculations, aggregates and relationships are <em>private</em> (they are marked <code class="inline">public?: false</code>).<br/>If you are working with Ash in code, reading a resource, for example using <a href="Ash.xhtml#read/2"><code class="inline">Ash.read/2</code></a>, the public/private status of an attribute is not relevant.<br/>However, when working with api extensions like <code class="inline">AshGraphql</code> and <code class="inline">AshJsonApi</code>, they will only include public fields in their interfaces. This helps avoid accidentally exposing data over &quot;public&quot; interfaces.</p><h2 id="public-private-arguments">Public &amp; Private Arguments</h2><p>Public/private arguments work the same way as public/private fields, except that they default to <code class="inline">public?: true</code>.<br/>This is because arguments to an action being used in a public interface would naturally be expected to be <code class="inline">public</code>. If an argument is marked as <code class="inline">public?: false</code>, it can only be set using one of the following methods:</p><ol><li><a href="Ash.Query.xhtml#set_argument/3"><code class="inline">Ash.Query.set_argument/3</code></a></li><li><a href="Ash.Changeset.xhtml#set_argument/3"><code class="inline">Ash.Changeset.set_argument/3</code></a></li><li>By setting <code class="inline">private_argument</code> option when creating a changeset. For eg., <code class="inline">Ash.Changeset.for_create(:create_with_private_argument, %{public_title: &quot;title&quot;}, private_arguments: %{private_name: &quot;private&quot;}</code></li></ol><h2 id="sensitive-attributes">Sensitive Attributes</h2><p>Using <code class="inline">sensitive? true</code> will cause an attribute, calculation or argument to show as <code class="inline">&quot;** Redacted **&quot;</code> when inspecting records.<br/>In filter statements, any value used in the same expression as a sensitive field will also be redacted. For example, you might see: <code class="inline">email == &quot;** Redacted **&quot;</code> in a filter statement if <code class="inline">email</code> is marked as sensitive.</p><h3 id="show-sensitive-attributes">Show Sensitive Attributes</h3><p><strong>IMPORTANT WARNING:</strong> The following configuration should only ever be used in development mode!</p><p>To display sensitive attributes in their original form during development, use the following config.</p><pre><code class="makeup elixir" translate="no"><span class="n">config</span><span class="w"> </span><span class="ss">:ash</span><span class="p">,</span><span class="w"> </span><span class="ss">show_sensitive?</span><span class="p">:</span><span class="w"> </span><span class="no">true</span></code></pre><h2 id="field-policies">Field Policies</h2><p>Field policies are a way to control the visibility of individual fields (except for relationships) as a part of authorization flow, for those using <a href="Ash.Policy.Authorizer.xhtml"><code class="inline">Ash.Policy.Authorizer</code></a>.<br/>If a field is not visible, it will be populated with <code class="inline">%Ash.ForbiddenField{}</code>, or will be not shown (or may show an error) in public interfaces. See the <a href="policies.xhtml#field-policies">Policies guide</a> for more.</p>

  </body>
</html>
