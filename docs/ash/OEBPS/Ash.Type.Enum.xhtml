<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"
      xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>Ash.Type.Enum - ash v3.5.33</title>
    <meta name="generator" content="ExDoc v0.38.2" />
    <link type="text/css" rel="stylesheet" href="dist/epub-elixir-FNUUKFP7.css" />
    <script src="dist/epub-4WIP524F.js"></script>

  </head>
  <body class="content-inner">

    <h1 id="content">
Ash.Type.Enum <small>behaviour</small>
    </h1>


      <section id="moduledoc" class="docstring">
<p>A type for abstracting enums into a single type.</p><p>For example, your existing attribute might look like:</p><pre><code class="makeup elixir" translate="no"><samp class="n">attribute</samp><samp class="w"> </samp><samp class="ss">:status</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:atom</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">constraints</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="9955417795-1">[</samp><samp class="ss">one_of</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="9955417795-2">[</samp><samp class="ss">:open</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:closed</samp><samp class="p" data-group-id="9955417795-2">]</samp><samp class="p" data-group-id="9955417795-1">]</samp></code></pre><p>But as that starts to spread around your system, you may find that you want
to centralize that logic. To do that, use this module to define an Ash type
easily:</p><pre><code class="makeup elixir" translate="no"><samp class="kd">defmodule</samp><samp class="w"> </samp><samp class="nc">MyApp.TicketStatus</samp><samp class="w"> </samp><samp class="k" data-group-id="2298974791-1">do</samp><samp class="w">
  </samp><samp class="kn">use</samp><samp class="w"> </samp><samp class="nc">Ash.Type.Enum</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">values</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="2298974791-2">[</samp><samp class="ss">:open</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:closed</samp><samp class="p" data-group-id="2298974791-2">]</samp><samp class="w">
</samp><samp class="k" data-group-id="2298974791-1">end</samp></code></pre><p>Then, you can rewrite your original attribute as follows:</p><pre><code class="makeup elixir" translate="no"><samp class="n">attribute</samp><samp class="w"> </samp><samp class="ss">:status</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="nc">MyApp.TicketStatus</samp></code></pre><p>Valid values are:</p><ul><li>The atom itself, e.g <code class="inline">:open</code></li><li>A string that matches the atom, e.g <code class="inline">&quot;open&quot;</code></li><li>A string that matches the atom after being downcased, e.g <code class="inline">&quot;OPEN&quot;</code> or <code class="inline">&quot;oPeN&quot;</code></li><li>A string that matches the stringified, downcased atom, after itself being downcased.
This allows for enum values like <code class="inline">:Open</code>, <code class="inline">:SomeState</code> and <code class="inline">:Some_State</code></li></ul><h2 id="module-custom-input-values">Custom input values</h2><p>If you need to accept inputs beyond those described above while still mapping them to one
of the enum values, you can override the <code class="inline">match/1</code> callback.</p><p>For example, if you want to map both the <code class="inline">:half_empty</code> and <code class="inline">:half_full</code> states to the same enum
value, you could implement it as follows:</p><pre><code class="makeup elixir" translate="no"><samp class="kd">defmodule</samp><samp class="w"> </samp><samp class="nc">MyApp.GlassState</samp><samp class="w"> </samp><samp class="k" data-group-id="1504153432-1">do</samp><samp class="w">
  </samp><samp class="kn">use</samp><samp class="w"> </samp><samp class="nc">Ash.Type.Enum</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">values</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="1504153432-2">[</samp><samp class="ss">:empty</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:half_full</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:full</samp><samp class="p" data-group-id="1504153432-2">]</samp><samp class="w">

  </samp><samp class="kd">def</samp><samp class="w"> </samp><samp class="nf">match</samp><samp class="p" data-group-id="1504153432-3">(</samp><samp class="ss">:half_empty</samp><samp class="p" data-group-id="1504153432-3">)</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">do</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="1504153432-4">{</samp><samp class="ss">:ok</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:half_full</samp><samp class="p" data-group-id="1504153432-4">}</samp><samp class="w">
  </samp><samp class="kd">def</samp><samp class="w"> </samp><samp class="nf">match</samp><samp class="p" data-group-id="1504153432-5">(</samp><samp class="s">&quot;half_empty&quot;</samp><samp class="p" data-group-id="1504153432-5">)</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">do</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="1504153432-6">{</samp><samp class="ss">:ok</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:half_full</samp><samp class="p" data-group-id="1504153432-6">}</samp><samp class="w">
  </samp><samp class="kd">def</samp><samp class="w"> </samp><samp class="nf">match</samp><samp class="p" data-group-id="1504153432-7">(</samp><samp class="n">value</samp><samp class="p" data-group-id="1504153432-7">)</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">do</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="k">super</samp><samp class="p" data-group-id="1504153432-8">(</samp><samp class="n">value</samp><samp class="p" data-group-id="1504153432-8">)</samp><samp class="w">
</samp><samp class="k" data-group-id="1504153432-1">end</samp></code></pre><p>In the provided example, if no additional value is matched, <code class="inline">super(value)</code> is called, invoking
the default implementation of <code class="inline">match/1</code>. This approach is typically suitable if you only aim to
extend default matching rather than completely reimplementing it.</p><h3 id="module-caveats">Caveats</h3><p>Additional input values are not exposed in derived interfaces. For example, <code class="inline">HALF_EMPTY</code> will not
be present as a possible enum value when using <code class="inline">ash_graphql</code>.</p><p>Moreover, only explicitly matched values are mapped to the enum value. For instance,
<code class="inline">&quot;HaLf_emPty&quot;</code> would not be accepted by the code provided earlier. If case normalization is
needed for additional values, it must be explicitly implemented.</p><h2 id="module-value-labels-and-descriptions">Value labels and descriptions</h2><p>It's possible to associate a label and/or description for each value.</p><pre><code class="makeup elixir" translate="no"><samp class="kd">defmodule</samp><samp class="w"> </samp><samp class="nc">MyApp.TicketStatus</samp><samp class="w"> </samp><samp class="k" data-group-id="0557046590-1">do</samp><samp class="w">
  </samp><samp class="kn">use</samp><samp class="w"> </samp><samp class="nc">Ash.Type.Enum</samp><samp class="p">,</samp><samp class="w">
    </samp><samp class="ss">values</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="0557046590-2">[</samp><samp class="w">
      </samp><samp class="ss">open</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;An open ticket&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="c1"># &lt;- description only,</samp><samp class="w">
      </samp><samp class="ss">escalated</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="0557046590-3">[</samp><samp class="ss">description</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;An escalated ticket&quot;</samp><samp class="p" data-group-id="0557046590-3">]</samp><samp class="p">,</samp><samp class="w">
      </samp><samp class="ss">follow_up</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="0557046590-4">[</samp><samp class="ss">label</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;Follow up&quot;</samp><samp class="p" data-group-id="0557046590-4">]</samp><samp class="p">,</samp><samp class="w">
      </samp><samp class="ss">closed</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="0557046590-5">[</samp><samp class="ss">description</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;A closed ticket&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">label</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;Closed&quot;</samp><samp class="p" data-group-id="0557046590-5">]</samp><samp class="w">
    </samp><samp class="p" data-group-id="0557046590-2">]</samp><samp class="w">
</samp><samp class="k" data-group-id="0557046590-1">end</samp></code></pre><p>Adding labels and descriptions can be helpful when displaying the Enum values to users.</p><p>This can be used by extensions to provide detailed descriptions of enum values.</p><p>The description of a value can be retrieved with <code class="inline">description/1</code>:</p><pre><code class="makeup elixir" translate="no"><samp class="nc">MyApp.TicketStatus</samp><samp class="o">.</samp><samp class="n">description</samp><samp class="p" data-group-id="8432726543-1">(</samp><samp class="ss">:open</samp><samp class="p" data-group-id="8432726543-1">)</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="s">&quot;An open ticket&quot;</samp></code></pre><p>The label of a value can be retrieved with <code class="inline">label/1</code>:</p><pre><code class="makeup elixir" translate="no"><samp class="nc">MyApp.TicketStatus</samp><samp class="o">.</samp><samp class="n">label</samp><samp class="p" data-group-id="8761236424-1">(</samp><samp class="ss">:closed</samp><samp class="p" data-group-id="8761236424-1">)</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="s">&quot;Closed&quot;</samp></code></pre><p>Both the description and label can be retrieved with <code class="inline">details/1</code></p><pre><code class="makeup elixir" translate="no"><samp class="nc">MyApp.TicketStatus</samp><samp class="o">.</samp><samp class="n">details</samp><samp class="p" data-group-id="1037370277-1">(</samp><samp class="ss">:closed</samp><samp class="p" data-group-id="1037370277-1">)</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="p" data-group-id="1037370277-2">%{</samp><samp class="ss">description</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;A closed ticket&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">label</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;Closed&quot;</samp><samp class="p" data-group-id="1037370277-2">}</samp></code></pre>
      </section>


      <section id="summary" class="details-list">
        <h1 class="section-heading">Summary</h1>
<div class="summary-callbacks summary">
  <h2>
    <a href="#callbacks">Callbacks</a>
  </h2>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#c:description/1" data-no-tooltip="" translate="no">description(arg1)</a>

      </div>

        <div class="summary-synopsis"><p>The description of the value, if existing</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#c:details/1" data-no-tooltip="" translate="no">details(arg1)</a>

      </div>

        <div class="summary-synopsis"><p>The value detail map, if existing</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#c:label/1" data-no-tooltip="" translate="no">label(arg1)</a>

      </div>

        <div class="summary-synopsis"><p>The label of the value, if existing</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#c:match/1" data-no-tooltip="" translate="no">match(term)</a>

      </div>

        <div class="summary-synopsis"><p>finds the valid value that matches a given input term</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#c:match?/1" data-no-tooltip="" translate="no">match?(term)</a>

      </div>

        <div class="summary-synopsis"><p>true if a given term matches a value</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#c:values/0" data-no-tooltip="" translate="no">values()</a>

      </div>

        <div class="summary-synopsis"><p>The list of valid values (not all input types that match them)</p></div>

    </div>

</div>

      </section>


      <section id="callbacks" class="details-list">
        <h1 class="section-heading">Callbacks</h1>
        <div class="callbacks-list">
<section class="detail" id="c:description/1">

  <div class="detail-header">
    <a href="#c:description/1" class="detail-link" data-no-tooltip="" aria-label="Link to this callback">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">description(arg1)</h1>


        <a href="https://github.com/ash-project/ash/blob/v3.5.33/lib/ash/type/enum.ex#L110" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@callback</span> description(<a href="https://hexdocs.pm/elixir/typespecs.html#basic-types">atom</a>() | <a href="https://hexdocs.pm/elixir/String.html#t:t/0">String.t</a>()) :: <a href="https://hexdocs.pm/elixir/String.html#t:t/0">String.t</a>() | nil</pre>

      </div>

<p>The description of the value, if existing</p>
  </section>
</section>
<section class="detail" id="c:details/1">

  <div class="detail-header">
    <a href="#c:details/1" class="detail-link" data-no-tooltip="" aria-label="Link to this callback">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">details(arg1)</h1>


        <a href="https://github.com/ash-project/ash/blob/v3.5.33/lib/ash/type/enum.ex#L112" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@callback</span> details(<a href="https://hexdocs.pm/elixir/typespecs.html#basic-types">atom</a>() | <a href="https://hexdocs.pm/elixir/String.html#t:t/0">String.t</a>()) :: %{
  description: <a href="https://hexdocs.pm/elixir/String.html#t:t/0">String.t</a>() | nil,
  label: <a href="https://hexdocs.pm/elixir/String.html#t:t/0">String.t</a>() | nil
}</pre>

      </div>

<p>The value detail map, if existing</p>
  </section>
</section>
<section class="detail" id="c:label/1">

  <div class="detail-header">
    <a href="#c:label/1" class="detail-link" data-no-tooltip="" aria-label="Link to this callback">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">label(arg1)</h1>


        <a href="https://github.com/ash-project/ash/blob/v3.5.33/lib/ash/type/enum.ex#L108" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@callback</span> label(<a href="https://hexdocs.pm/elixir/typespecs.html#basic-types">atom</a>() | <a href="https://hexdocs.pm/elixir/String.html#t:t/0">String.t</a>()) :: <a href="https://hexdocs.pm/elixir/String.html#t:t/0">String.t</a>() | nil</pre>

      </div>

<p>The label of the value, if existing</p>
  </section>
</section>
<section class="detail" id="c:match/1">

  <div class="detail-header">
    <a href="#c:match/1" class="detail-link" data-no-tooltip="" aria-label="Link to this callback">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">match(term)</h1>


        <a href="https://github.com/ash-project/ash/blob/v3.5.33/lib/ash/type/enum.ex#L119" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@callback</span> match(<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types">term</a>()) :: {:ok, <a href="https://hexdocs.pm/elixir/typespecs.html#basic-types">atom</a>()} | :error</pre>

      </div>

<p>finds the valid value that matches a given input term</p>
  </section>
</section>
<section class="detail" id="c:match?/1">

  <div class="detail-header">
    <a href="#c:match?/1" class="detail-link" data-no-tooltip="" aria-label="Link to this callback">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">match?(term)</h1>


        <a href="https://github.com/ash-project/ash/blob/v3.5.33/lib/ash/type/enum.ex#L117" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@callback</span> match?(<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types">term</a>()) :: <a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types">boolean</a>()</pre>

      </div>

<p>true if a given term matches a value</p>
  </section>
</section>
<section class="detail" id="c:values/0">

  <div class="detail-header">
    <a href="#c:values/0" class="detail-link" data-no-tooltip="" aria-label="Link to this callback">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">values()</h1>


        <a href="https://github.com/ash-project/ash/blob/v3.5.33/lib/ash/type/enum.ex#L106" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@callback</span> values() :: [<a href="https://hexdocs.pm/elixir/typespecs.html#basic-types">atom</a>() | <a href="https://hexdocs.pm/elixir/String.html#t:t/0">String.t</a>()]</pre>

      </div>

<p>The list of valid values (not all input types that match them)</p>
  </section>
</section>

        </div>
      </section>


  </body>
</html>
