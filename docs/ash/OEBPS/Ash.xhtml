<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"
      xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>Ash - ash v3.5.33</title>
    <meta name="generator" content="ExDoc v0.38.2" />
    <link type="text/css" rel="stylesheet" href="dist/epub-elixir-FNUUKFP7.css" />
    <script src="dist/epub-4WIP524F.js"></script>

  </head>
  <body class="content-inner">

    <h1 id="content">
Ash 
    </h1>


      <section id="moduledoc" class="docstring">
<p>The primary interface to call actions and interact with resources.</p>
      </section>


      <section id="summary" class="details-list">
        <h1 class="section-heading">Summary</h1>
<div class="summary-types summary">
  <h2>
    <a href="#types">Types</a>
  </h2>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#t:actor/0" data-no-tooltip="" translate="no">actor()</a>

      </div>

        <div class="summary-synopsis"><p>The actor performing the action - can be any term.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#t:aggregate/0" data-no-tooltip="" translate="no">aggregate()</a>

      </div>

        <div class="summary-synopsis"><p>Aggregate specification for queries.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#t:data_layer_query/0" data-no-tooltip="" translate="no">data_layer_query()</a>

      </div>

        <div class="summary-synopsis"><p>A data layer query structure with execution and counting functions.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#t:load_statement/0" data-no-tooltip="" translate="no">load_statement()</a>

      </div>

        <div class="summary-synopsis"><p>Load statement for relationships and calculations.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#t:page_request/0" data-no-tooltip="" translate="no">page_request()</a>

      </div>

        <div class="summary-synopsis"><p>Page request options for paginated queries.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#t:record_or_records/0" data-no-tooltip="" translate="no">record_or_records()</a>

      </div>

        <div class="summary-synopsis"><p>A single record or a list of records.</p></div>

    </div>

</div>
<div class="summary-functions summary">
  <h2>
    <a href="#functions">Functions</a>
  </h2>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#aggregate/3" data-no-tooltip="" translate="no">aggregate(query, aggregate_or_aggregates, opts \\ [])</a>

      </div>

        <div class="summary-synopsis"><p>Runs an aggregate or aggregates over a resource query</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#aggregate!/3" data-no-tooltip="" translate="no">aggregate!(query, aggregate_or_aggregates, opts \\ [])</a>

      </div>

        <div class="summary-synopsis"><p>Runs an aggregate or aggregates over a resource query, returning the result or raising an error.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#avg/3" data-no-tooltip="" translate="no">avg(query, field, opts \\ [])</a>

      </div>

        <div class="summary-synopsis"><p>Fetches the average of all values of a given field.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#avg!/3" data-no-tooltip="" translate="no">avg!(query, field, opts \\ [])</a>

      </div>

        <div class="summary-synopsis"><p>Fetches the average of all values of a given field or raises an error.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#bulk_create/4" data-no-tooltip="" translate="no">bulk_create(inputs, resource, action, opts \\ [])</a>

      </div>

        <div class="summary-synopsis"><p>Creates many records.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#bulk_create!/4" data-no-tooltip="" translate="no">bulk_create!(inputs, resource, action, opts \\ [])</a>

      </div>

        <div class="summary-synopsis"><p>Creates many records, raising any errors that are returned. See <a><code class="inline">bulk_create/4</code></a> for more.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#bulk_destroy/4" data-no-tooltip="" translate="no">bulk_destroy(query_or_stream, action, input, opts \\ [])</a>

      </div>

        <div class="summary-synopsis"><p>Destroys all items in the provided enumerable or query with the provided input.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#bulk_destroy!/4" data-no-tooltip="" translate="no">bulk_destroy!(stream_or_query, action, input, opts \\ [])</a>

      </div>

        <div class="summary-synopsis"><p>Destroys all items in the provided enumerable or query with the provided input.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#bulk_update/4" data-no-tooltip="" translate="no">bulk_update(query_or_stream, action, input, opts \\ [])</a>

      </div>

        <div class="summary-synopsis"><p>Updates all items in the provided enumerable or query with the provided input.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#bulk_update!/4" data-no-tooltip="" translate="no">bulk_update!(stream_or_query, action, input, opts \\ [])</a>

      </div>

        <div class="summary-synopsis"><p>Updates all items in the provided enumerable or query with the provided input.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#calculate/3" data-no-tooltip="" translate="no">calculate(resource_or_record, calculation, opts \\ [])</a>

      </div>

        <div class="summary-synopsis"><p>Evaluates the calculation on the resource.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#calculate!/3" data-no-tooltip="" translate="no">calculate!(resource_or_record, calculation, opts \\ [])</a>

      </div>

        <div class="summary-synopsis"><p>Evaluates the calculation on the resource or raises an error. See <a><code class="inline">calculate/3</code></a> for more.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#can/3" data-no-tooltip="" translate="no">can(action_or_query_or_changeset, actor_or_scope, opts \\ [])</a>

      </div>

        <div class="summary-synopsis"><p>Returns whether or not the user can perform the action, or <code class="inline">:maybe</code>, returning any errors.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#can?/3" data-no-tooltip="" translate="no">can?(action_or_query_or_changeset, actor_or_scope, opts \\ [])</a>

      </div>

        <div class="summary-synopsis"><p>Returns whether or not the user can perform the action, or raises on errors.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#context_to_opts/2" data-no-tooltip="" translate="no">context_to_opts(map, add_to \\ [])</a>

          <span class="deprecated" title="Converts a context map to opts to be passed into an action.
">deprecated</span>

      </div>

        <div class="summary-synopsis"><p>See <a><code class="inline">Ash.Context.to_opts/2</code></a>.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#count/2" data-no-tooltip="" translate="no">count(query, opts \\ [])</a>

      </div>

        <div class="summary-synopsis"><p>Fetches the count of results that would be returned from a given query.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#count!/2" data-no-tooltip="" translate="no">count!(query, opts \\ [])</a>

      </div>

        <div class="summary-synopsis"><p>Fetches the count of results that would be returned from a given query, or raises an error.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#create/3" data-no-tooltip="" translate="no">create(changeset_or_resource, params_or_opts \\ %{}, opts \\ [])</a>

      </div>

        <div class="summary-synopsis"><p>Create a record.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#create!/3" data-no-tooltip="" translate="no">create!(changeset_or_resource, params \\ %{}, opts \\ [])</a>

      </div>

        <div class="summary-synopsis"><p>Create a record. See <a><code class="inline">create/2</code></a> for more information.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#data_layer_query/2" data-no-tooltip="" translate="no">data_layer_query(query, opts \\ [])</a>

      </div>

        <div class="summary-synopsis"><p>Gets the full query and any runtime calculations that would be loaded</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#data_layer_query!/2" data-no-tooltip="" translate="no">data_layer_query!(query, opts \\ [])</a>

      </div>

        <div class="summary-synopsis"><p>Gets the full query and any runtime calculations that would be loaded, raising any errors.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#destroy/2" data-no-tooltip="" translate="no">destroy(changeset_or_record, opts \\ [])</a>

      </div>

        <div class="summary-synopsis"><p>Destroy a record.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#destroy!/2" data-no-tooltip="" translate="no">destroy!(changeset_or_record, opts \\ [])</a>

      </div>

        <div class="summary-synopsis"><p>Destroy a record. See <a><code class="inline">destroy/2</code></a> for more information.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#exists/2" data-no-tooltip="" translate="no">exists(query, opts \\ [])</a>

      </div>

        <div class="summary-synopsis"><p>Returns whether or not the query would return any results.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#exists?/2" data-no-tooltip="" translate="no">exists?(query, opts \\ [])</a>

      </div>

        <div class="summary-synopsis"><p>Returns whether or not the query would return any results, or raises an error.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#first/3" data-no-tooltip="" translate="no">first(query, field, opts \\ [])</a>

      </div>

        <div class="summary-synopsis"><p>Fetches the first value for a given field.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#first!/3" data-no-tooltip="" translate="no">first!(query, field, opts \\ [])</a>

      </div>

        <div class="summary-synopsis"><p>Fetches the first value for a given field, or raises an error.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#get/3" data-no-tooltip="" translate="no">get(resource, id, opts \\ [])</a>

      </div>

        <div class="summary-synopsis"><p>Get a record by an identifier.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#get!/3" data-no-tooltip="" translate="no">get!(resource, id, opts \\ [])</a>

      </div>

        <div class="summary-synopsis"><p>Get a record by an identifier, or raises an error. See <a><code class="inline">get/3</code></a> for more.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#list/3" data-no-tooltip="" translate="no">list(query, field, opts \\ [])</a>

      </div>

        <div class="summary-synopsis"><p>Fetches a list of all values of a given field.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#list!/3" data-no-tooltip="" translate="no">list!(query, field, opts \\ [])</a>

      </div>

        <div class="summary-synopsis"><p>Fetches a list of all values of a given field or raises an error.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#load/3" data-no-tooltip="" translate="no">load(data, query, opts \\ [])</a>

      </div>

        <div class="summary-synopsis"><p>Load fields or relationships on already fetched records.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#load!/3" data-no-tooltip="" translate="no">load!(data, query, opts \\ [])</a>

      </div>

        <div class="summary-synopsis"><p>Load fields or relationships on already fetched records. See <a><code class="inline">load/3</code></a> for more information.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#max/3" data-no-tooltip="" translate="no">max(query, field, opts \\ [])</a>

      </div>

        <div class="summary-synopsis"><p>Fetches the greatest of all values of a given field.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#max!/3" data-no-tooltip="" translate="no">max!(query, field, opts \\ [])</a>

      </div>

        <div class="summary-synopsis"><p>Fetches the greatest of all values of a given field or raises an error.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#min/3" data-no-tooltip="" translate="no">min(query, field, opts \\ [])</a>

      </div>

        <div class="summary-synopsis"><p>Fetches the least of all values of a given field.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#min!/3" data-no-tooltip="" translate="no">min!(query, field, opts \\ [])</a>

      </div>

        <div class="summary-synopsis"><p>Fetches the least of all values of a given field or raises an error.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#page/2" data-no-tooltip="" translate="no">page(page, n)</a>

      </div>

        <div class="summary-synopsis"><p>Fetch a page relative to the provided page.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#page!/2" data-no-tooltip="" translate="no">page!(page, request)</a>

      </div>

        <div class="summary-synopsis"><p>Fetch a page relative to the provided page or raises an error</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#read/2" data-no-tooltip="" translate="no">read(query, opts \\ [])</a>

      </div>

        <div class="summary-synopsis"><p>Runs an <a><code class="inline">Ash.Query</code></a>.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#read!/2" data-no-tooltip="" translate="no">read!(query, opts \\ [])</a>

      </div>

        <div class="summary-synopsis"><p>Run an <a><code class="inline">Ash.Query</code></a>. See <a><code class="inline">read/2</code></a> for more.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#read_first/2" data-no-tooltip="" translate="no">read_first(query, opts \\ [])</a>

      </div>

        <div class="summary-synopsis"><p>Runs a query on a resource, returning a first result, nil, or an error.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#read_first!/2" data-no-tooltip="" translate="no">read_first!(query, opts \\ [])</a>

      </div>

        <div class="summary-synopsis"><p>Runs an Ash query, returning the first result or nil, or raising an error. See <a><code class="inline">read_first/2</code></a> for more.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#read_one/2" data-no-tooltip="" translate="no">read_one(query, opts \\ [])</a>

      </div>

        <div class="summary-synopsis"><p>Runs a query on a resource, returning a single result, nil, or an error.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#read_one!/2" data-no-tooltip="" translate="no">read_one!(query, opts \\ [])</a>

      </div>

        <div class="summary-synopsis"><p>Runs an ash query, returning a single result or raise an error. See <a><code class="inline">read_one/2</code></a> for more.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#reload/2" data-no-tooltip="" translate="no">reload(record, opts \\ [])</a>

      </div>

        <div class="summary-synopsis"><p>Refetches a record by primary key. See <a><code class="inline">get/2</code></a> for more.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#reload!/2" data-no-tooltip="" translate="no">reload!(record, opts \\ [])</a>

      </div>

        <div class="summary-synopsis"><p>Refetches a record by primary key or raises an error. See <a><code class="inline">reload/2</code></a> for more.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#run_action/2" data-no-tooltip="" translate="no">run_action(input, opts \\ [])</a>

      </div>

        <div class="summary-synopsis"><p>Runs a generic action.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#run_action!/2" data-no-tooltip="" translate="no">run_action!(input, opts \\ [])</a>

      </div>

        <div class="summary-synopsis"><p>Runs a generic action or raises an error. See <a><code class="inline">run_action/2</code></a> for more</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#stream!/2" data-no-tooltip="" translate="no">stream!(query, opts \\ [])</a>

      </div>

        <div class="summary-synopsis"><p>Streams the results of a query.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#sum/3" data-no-tooltip="" translate="no">sum(query, field, opts \\ [])</a>

      </div>

        <div class="summary-synopsis"><p>Fetches the sum of a given field.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#sum!/3" data-no-tooltip="" translate="no">sum!(query, field, opts \\ [])</a>

      </div>

        <div class="summary-synopsis"><p>Fetches the sum of a given field or raises an error.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#transaction/3" data-no-tooltip="" translate="no">transaction(resource_or_resources, func, opts \\ [])</a>

      </div>

        <div class="summary-synopsis"><p>Wraps the execution of the function in a transaction with the resource's data_layer.
Collects notifications during the function's execution and sends them if the transaction was successful.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#update/3" data-no-tooltip="" translate="no">update(changeset_or_record, params_or_opts \\ %{}, opts \\ [])</a>

      </div>

        <div class="summary-synopsis"><p>Update a record.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#update!/3" data-no-tooltip="" translate="no">update!(changeset_or_record, params_or_opts \\ %{}, opts \\ [])</a>

      </div>

        <div class="summary-synopsis"><p>Update a record. See <a><code class="inline">update/2</code></a> for more information.</p></div>

    </div>

</div>

      </section>


      <section id="types" class="details-list">
        <h1 class="section-heading">Types</h1>
        <div class="types-list">
<section class="detail" id="t:actor/0">

  <div class="detail-header">
    <a href="#t:actor/0" class="detail-link" data-no-tooltip="" aria-label="Link to this type">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">actor()</h1>


        <a href="https://github.com/ash-project/ash/blob/v3.5.33/lib/ash.ex#L2346" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@type</span> actor() :: <a href="https://hexdocs.pm/elixir/typespecs.html#basic-types">any</a>()</pre>

      </div>

<p>The actor performing the action - can be any term.</p>
  </section>
</section>
<section class="detail" id="t:aggregate/0">

  <div class="detail-header">
    <a href="#t:aggregate/0" class="detail-link" data-no-tooltip="" aria-label="Link to this type">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">aggregate()</h1>


        <a href="https://github.com/ash-project/ash/blob/v3.5.33/lib/ash.ex#L22" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@type</span> aggregate() ::
  <a href="Ash.Query.Aggregate.xhtml#t:t/0">Ash.Query.Aggregate.t</a>()
  | {name :: <a href="https://hexdocs.pm/elixir/typespecs.html#basic-types">atom</a>(), kind :: <a href="https://hexdocs.pm/elixir/typespecs.html#basic-types">atom</a>()}
  | {name :: <a href="https://hexdocs.pm/elixir/typespecs.html#basic-types">atom</a>(), kind :: <a href="https://hexdocs.pm/elixir/typespecs.html#basic-types">atom</a>(), opts :: <a href="https://hexdocs.pm/elixir/Keyword.html#t:t/0">Keyword.t</a>()}</pre>

      </div>

<p>Aggregate specification for queries.</p><p>Can be an <a href="Ash.Query.Aggregate.xhtml"><code class="inline">Ash.Query.Aggregate</code></a> struct, a <code class="inline">{name, kind}</code> tuple, or a <code class="inline">{name, kind, opts}</code> tuple with options.</p>
  </section>
</section>
<section class="detail" id="t:data_layer_query/0">

  <div class="detail-header">
    <a href="#t:data_layer_query/0" class="detail-link" data-no-tooltip="" aria-label="Link to this type">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">data_layer_query()</h1>


        <a href="https://github.com/ash-project/ash/blob/v3.5.33/lib/ash.ex#L2622" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@type</span> data_layer_query() :: %{
  query: <a href="Ash.DataLayer.xhtml#t:data_layer_query/0">Ash.DataLayer.data_layer_query</a>(),
  ash_query: <a href="Ash.Query.xhtml#t:t/0">Ash.Query.t</a>(),
  count: (-&gt; {:ok, <a href="https://hexdocs.pm/elixir/typespecs.html#basic-types">integer</a>() | nil} | {:error, <a href="Ash.Error.xhtml#t:t/0">Ash.Error.t</a>()}),
  run: (<a href="Ash.DataLayer.xhtml#t:data_layer_query/0">Ash.DataLayer.data_layer_query</a>() -&gt;
          {:ok, [<a href="Ash.Resource.xhtml#t:record/0">Ash.Resource.record</a>()] | <a href="Ash.Page.xhtml#t:page/0">Ash.Page.page</a>() | <a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types">no_return</a>()}
          | {:error, <a href="Ash.Error.xhtml#t:t/0">Ash.Error.t</a>()}),
  load: ([<a href="Ash.Resource.xhtml#t:record/0">Ash.Resource.record</a>()] | <a href="Ash.Page.xhtml#t:page/0">Ash.Page.page</a>() -&gt;
           {:ok, [<a href="Ash.Resource.xhtml#t:record/0">Ash.Resource.record</a>()] | <a href="Ash.Page.xhtml#t:page/0">Ash.Page.page</a>()}
           | {:error, <a href="Ash.Error.xhtml#t:t/0">Ash.Error.t</a>()})
}</pre>

      </div>

<p>A data layer query structure with execution and counting functions.</p><p>Contains the query that would be executed along with functions for counting,
running the query, and loading any runtime data needed for the operation.</p>
  </section>
</section>
<section class="detail" id="t:load_statement/0">

  <div class="detail-header">
    <a href="#t:load_statement/0" class="detail-link" data-no-tooltip="" aria-label="Link to this type">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">load_statement()</h1>


        <a href="https://github.com/ash-project/ash/blob/v3.5.33/lib/ash.ex#L32" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@type</span> load_statement() ::
  <a href="Ash.Query.xhtml#t:t/0">Ash.Query.t</a>()
  | [<a href="https://hexdocs.pm/elixir/typespecs.html#basic-types">atom</a>()]
  | <a href="https://hexdocs.pm/elixir/typespecs.html#basic-types">atom</a>()
  | <a href="https://hexdocs.pm/elixir/Keyword.html#t:t/0">Keyword.t</a>()
  | [<a href="https://hexdocs.pm/elixir/typespecs.html#basic-types">atom</a>() | {<a href="https://hexdocs.pm/elixir/typespecs.html#basic-types">atom</a>(), <a href="https://hexdocs.pm/elixir/typespecs.html#basic-types">atom</a>() | <a href="https://hexdocs.pm/elixir/Keyword.html#t:t/0">Keyword.t</a>()}]</pre>

      </div>

<p>Load statement for relationships and calculations.</p><p>Can be a query, a list of atoms, a single atom, keywords, or a list of atoms and tuples with options.</p>
  </section>
</section>
<section class="detail" id="t:page_request/0">

  <div class="detail-header">
    <a href="#t:page_request/0" class="detail-link" data-no-tooltip="" aria-label="Link to this type">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">page_request()</h1>


        <a href="https://github.com/ash-project/ash/blob/v3.5.33/lib/ash.ex#L14" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@type</span> page_request() :: :next | :prev | :first | :last | :self | <a href="https://hexdocs.pm/elixir/typespecs.html#basic-types">integer</a>()</pre>

      </div>

<p>Page request options for paginated queries.</p><p>Can be atoms for navigation (<code class="inline">:next</code>, <code class="inline">:prev</code>, <code class="inline">:first</code>, <code class="inline">:last</code>, <code class="inline">:self</code>) or an integer for specific page numbers.</p>
  </section>
</section>
<section class="detail" id="t:record_or_records/0">

  <div class="detail-header">
    <a href="#t:record_or_records/0" class="detail-link" data-no-tooltip="" aria-label="Link to this type">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">record_or_records()</h1>


        <a href="https://github.com/ash-project/ash/blob/v3.5.33/lib/ash.ex#L2341" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@type</span> record_or_records() :: <a href="Ash.Resource.xhtml#t:record/0">Ash.Resource.record</a>() | [<a href="Ash.Resource.xhtml#t:record/0">Ash.Resource.record</a>()]</pre>

      </div>

<p>A single record or a list of records.</p>
  </section>
</section>

        </div>
      </section>

      <section id="functions" class="details-list">
        <h1 class="section-heading">Functions</h1>
        <div class="functions-list">
<section class="detail" id="aggregate/3">

    <span id="aggregate/2"></span>

  <div class="detail-header">
    <a href="#aggregate/3" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">aggregate(query, aggregate_or_aggregates, opts \\ [])</h1>


        <a href="https://github.com/ash-project/ash/blob/v3.5.33/lib/ash.ex#L1035" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> aggregate(
  <a href="Ash.Query.xhtml#t:t/0">Ash.Query.t</a>() | <a href="Ash.Resource.xhtml#t:t/0">Ash.Resource.t</a>(),
  aggregates :: <a href="#t:aggregate/0">aggregate</a>() | [<a href="#t:aggregate/0">aggregate</a>()],
  opts :: <a href="https://hexdocs.pm/elixir/Keyword.html#t:t/0">Keyword.t</a>()
) :: {:ok, <a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types">term</a>()} | {:error, <a href="Ash.Error.xhtml#t:t/0">Ash.Error.t</a>()}</pre>

      </div>

<p>Runs an aggregate or aggregates over a resource query</p><p>If you pass an <code class="inline">%Ash.Query.Aggregate{}</code>, gotten from <code class="inline">Ash.Query.Aggregate.new()</code>,
the query provided as the first argument to this function will not apply. For this
reason, it is preferred that you pass in the tuple format, i.e</p><p>Prefer this:
<code class="inline">Api.aggregate(query, {:count_of_things, :count})</code></p><p>Over this:
<code class="inline">Api.aggregate(query, Ash.Query.Aggregate.new(...))</code></p><h2 id="aggregate/3-examples" class="section-heading"><a href="#aggregate/3-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">MyApp.Post</samp><samp class="w"> </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Ash</samp><samp class="o">.</samp><samp class="n">aggregate</samp><samp class="p" data-group-id="2174439604-1">(</samp><samp class="p" data-group-id="2174439604-2">{</samp><samp class="ss">:count</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:count</samp><samp class="p" data-group-id="2174439604-2">}</samp><samp class="p" data-group-id="2174439604-1">)</samp><samp class="w">
</samp><samp class="p" data-group-id="2174439604-3">{</samp><samp class="ss">:ok</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="2174439604-4">%{</samp><samp class="ss">count</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">42</samp><samp class="p" data-group-id="2174439604-4">}</samp><samp class="p" data-group-id="2174439604-3">}</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="n">query</samp><samp class="w"> </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Ash</samp><samp class="o">.</samp><samp class="n">aggregate</samp><samp class="p" data-group-id="2174439604-5">(</samp><samp class="p" data-group-id="2174439604-6">[</samp><samp class="p" data-group-id="2174439604-7">{</samp><samp class="ss">:avg_likes</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:avg</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">field</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="ss">:likes</samp><samp class="p" data-group-id="2174439604-7">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="2174439604-8">{</samp><samp class="ss">:count</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:count</samp><samp class="p" data-group-id="2174439604-8">}</samp><samp class="p" data-group-id="2174439604-6">]</samp><samp class="p" data-group-id="2174439604-5">)</samp><samp class="w">
</samp><samp class="p" data-group-id="2174439604-9">{</samp><samp class="ss">:ok</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="2174439604-10">%{</samp><samp class="ss">avg_likes</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mf">10.5</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">count</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">42</samp><samp class="p" data-group-id="2174439604-10">}</samp><samp class="p" data-group-id="2174439604-9">}</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">MyApp.Post</samp><samp class="w"> </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">filter</samp><samp class="p" data-group-id="2174439604-11">(</samp><samp class="ss">published</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">true</samp><samp class="p" data-group-id="2174439604-11">)</samp><samp class="w"> </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Ash</samp><samp class="o">.</samp><samp class="n">aggregate</samp><samp class="p" data-group-id="2174439604-12">(</samp><samp class="p" data-group-id="2174439604-13">{</samp><samp class="ss">:sum_views</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:sum</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">field</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="ss">:view_count</samp><samp class="p" data-group-id="2174439604-13">}</samp><samp class="p" data-group-id="2174439604-12">)</samp><samp class="w">
</samp><samp class="p" data-group-id="2174439604-14">{</samp><samp class="ss">:ok</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="2174439604-15">%{</samp><samp class="ss">sum_views</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">1542</samp><samp class="p" data-group-id="2174439604-15">}</samp><samp class="p" data-group-id="2174439604-14">}</samp></code></pre><h2 id="aggregate/3-see-also" class="section-heading"><a href="#aggregate/3-see-also" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">See also</span></h2><ul><li><a href="#aggregate!/3"><code class="inline">aggregate!/3</code></a> for the raising version</li><li><a href="#count/2"><code class="inline">count/2</code></a> for counting records specifically</li><li><a href="#sum/3"><code class="inline">sum/3</code></a> for summing field values</li><li><code class="inline">d:Ash.Resource.Dsl.aggregates</code> for defining aggregates on resources</li><li><a href="read-actions.xhtml">Read Actions Guide</a> for understanding read operations</li><li><a href="aggregates.xhtml">Aggregates Guide</a> for resource-level aggregates</li></ul><h2 id="aggregate/3-options" class="section-heading"><a href="#aggregate/3-options" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Options</span></h2><ul><li><p><code class="inline">:domain</code> (<a href="Ash.Domain.xhtml"><code class="inline">Ash.Domain</code></a>) - The domain to use.</p></li><li><p><code class="inline">:timeout</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">timeout/0</code></a>) - A positive integer, or <code class="inline">:infinity</code>. If none is provided, the timeout configured on the domain is used.</p></li><li><p><code class="inline">:tracer</code> (one or a list of module that adopts <a href="Ash.Tracer.xhtml"><code class="inline">Ash.Tracer</code></a>) - A tracer that implements the <a href="Ash.Tracer.xhtml"><code class="inline">Ash.Tracer</code></a> behaviour. See that module for more.</p></li><li><p><code class="inline">:action</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">term/0</code></a>) - The action to use, either an Action struct or the name of the action</p></li><li><p><code class="inline">:authorize?</code> - If an actor option is provided (even if it is <code class="inline">nil</code>), authorization happens automatically. If not, this flag can be used to authorize with no user.</p></li><li><p><code class="inline">:context</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#basic-types"><code class="inline">map/0</code></a>) - Context to set on the query, changeset, or input</p></li><li><p><code class="inline">:tenant</code> (value that implements the <a href="Ash.ToTenant.xhtml"><code class="inline">Ash.ToTenant</code></a> protocol) - A tenant to set on the query or changeset</p></li><li><p><code class="inline">:actor</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">term/0</code></a>) - If an actor is provided, it will be used in conjunction with the authorizers of a resource to authorize access</p></li><li><p><code class="inline">:scope</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">term/0</code></a>) - A value that implements the <a href="Ash.Scope.ToOpts.xhtml"><code class="inline">Ash.Scope.ToOpts</code></a> protocol, for passing around actor/tenant/context in a single value. See <a href="Ash.Scope.ToOpts.xhtml"><code class="inline">Ash.Scope.ToOpts</code></a> for more.</p></li></ul>
  </section>
</section>
<section class="detail" id="aggregate!/3">

    <span id="aggregate!/2"></span>

  <div class="detail-header">
    <a href="#aggregate!/3" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">aggregate!(query, aggregate_or_aggregates, opts \\ [])</h1>


        <a href="https://github.com/ash-project/ash/blob/v3.5.33/lib/ash.ex#L975" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> aggregate!(
  <a href="Ash.Query.xhtml#t:t/0">Ash.Query.t</a>() | <a href="Ash.Resource.xhtml#t:t/0">Ash.Resource.t</a>(),
  <a href="#t:aggregate/0">aggregate</a>() | [<a href="#t:aggregate/0">aggregate</a>()],
  opts :: <a href="https://hexdocs.pm/elixir/Keyword.html#t:t/0">Keyword.t</a>()
) :: <a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types">term</a>() | <a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types">no_return</a>()</pre>

      </div>

<p>Runs an aggregate or aggregates over a resource query, returning the result or raising an error.</p><p>This is the bang version of <a href="#aggregate/3"><code class="inline">aggregate/3</code></a> that raises an error if the operation fails.</p><h2 id="aggregate!/3-examples" class="section-heading"><a href="#aggregate!/3-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">MyApp.Post</samp><samp class="w"> </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Ash</samp><samp class="o">.</samp><samp class="n">aggregate!</samp><samp class="p" data-group-id="6660850670-1">(</samp><samp class="p" data-group-id="6660850670-2">{</samp><samp class="ss">:count</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:count</samp><samp class="p" data-group-id="6660850670-2">}</samp><samp class="p" data-group-id="6660850670-1">)</samp><samp class="w">
</samp><samp class="mi">42</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="n">query</samp><samp class="w"> </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Ash</samp><samp class="o">.</samp><samp class="n">aggregate!</samp><samp class="p" data-group-id="6660850670-3">(</samp><samp class="p" data-group-id="6660850670-4">[</samp><samp class="p" data-group-id="6660850670-5">{</samp><samp class="ss">:avg_likes</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:avg</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">field</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="ss">:likes</samp><samp class="p" data-group-id="6660850670-5">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="6660850670-6">{</samp><samp class="ss">:count</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:count</samp><samp class="p" data-group-id="6660850670-6">}</samp><samp class="p" data-group-id="6660850670-4">]</samp><samp class="p" data-group-id="6660850670-3">)</samp><samp class="w">
</samp><samp class="p" data-group-id="6660850670-7">%{</samp><samp class="ss">avg_likes</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mf">10.5</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">count</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">42</samp><samp class="p" data-group-id="6660850670-7">}</samp></code></pre><h2 id="aggregate!/3-see-also" class="section-heading"><a href="#aggregate!/3-see-also" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">See also</span></h2><ul><li><a href="#aggregate/3"><code class="inline">aggregate/3</code></a> for the non-raising version</li><li><a href="#count!/2"><code class="inline">count!/2</code></a> for counting records specifically</li><li><a href="#sum!/3"><code class="inline">sum!/3</code></a> for summing field values</li><li><code class="inline">d:Ash.Resource.Dsl.aggregates</code> for defining aggregates on resources</li><li><a href="read-actions.xhtml">Read Actions Guide</a> for understanding read operations</li><li><a href="aggregates.xhtml">Aggregates Guide</a> for resource-level aggregates</li></ul>
  </section>
</section>
<section class="detail" id="avg/3">

    <span id="avg/2"></span>

  <div class="detail-header">
    <a href="#avg/3" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">avg(query, field, opts \\ [])</h1>


        <a href="https://github.com/ash-project/ash/blob/v3.5.33/lib/ash.ex#L1607" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> avg(<a href="Ash.Query.xhtml#t:t/0">Ash.Query.t</a>() | <a href="Ash.Resource.xhtml#t:t/0">Ash.Resource.t</a>(), <a href="https://hexdocs.pm/elixir/typespecs.html#basic-types">atom</a>(), <a href="https://hexdocs.pm/elixir/Keyword.html#t:t/0">Keyword.t</a>()) ::
  {:ok, <a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types">number</a>()} | {:error, <a href="Ash.Error.xhtml#t:t/0">Ash.Error.t</a>()}</pre>

      </div>

<p>Fetches the average of all values of a given field.</p><h2 id="avg/3-examples" class="section-heading"><a href="#avg/3-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">MyApp.Post</samp><samp class="w"> </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Ash</samp><samp class="o">.</samp><samp class="n">avg</samp><samp class="p" data-group-id="4722548455-1">(</samp><samp class="ss">:view_count</samp><samp class="p" data-group-id="4722548455-1">)</samp><samp class="w">
</samp><samp class="p" data-group-id="4722548455-2">{</samp><samp class="ss">:ok</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mf">42.5</samp><samp class="p" data-group-id="4722548455-2">}</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">MyApp.Post</samp><samp class="w"> </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">filter</samp><samp class="p" data-group-id="4722548455-3">(</samp><samp class="ss">published</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">true</samp><samp class="p" data-group-id="4722548455-3">)</samp><samp class="w"> </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Ash</samp><samp class="o">.</samp><samp class="n">avg</samp><samp class="p" data-group-id="4722548455-4">(</samp><samp class="ss">:likes</samp><samp class="p" data-group-id="4722548455-4">)</samp><samp class="w">
</samp><samp class="p" data-group-id="4722548455-5">{</samp><samp class="ss">:ok</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mf">15.8</samp><samp class="p" data-group-id="4722548455-5">}</samp></code></pre><h2 id="avg/3-see-also" class="section-heading"><a href="#avg/3-see-also" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">See also</span></h2><ul><li><a href="#avg!/3"><code class="inline">avg!/3</code></a> for the raising version</li><li><a href="#sum/3"><code class="inline">sum/3</code></a> for getting the total sum</li><li><code class="inline">d:Ash.Resource.Dsl.aggregates</code> for defining aggregates on resources</li></ul>
  </section>
</section>
<section class="detail" id="avg!/3">

    <span id="avg!/2"></span>

  <div class="detail-header">
    <a href="#avg!/3" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">avg!(query, field, opts \\ [])</h1>


        <a href="https://github.com/ash-project/ash/blob/v3.5.33/lib/ash.ex#L1644" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> avg!(<a href="Ash.Query.xhtml#t:t/0">Ash.Query.t</a>() | <a href="Ash.Resource.xhtml#t:t/0">Ash.Resource.t</a>(), <a href="https://hexdocs.pm/elixir/typespecs.html#basic-types">atom</a>(), <a href="https://hexdocs.pm/elixir/Keyword.html#t:t/0">Keyword.t</a>()) ::
  <a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types">number</a>() | <a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types">no_return</a>()</pre>

      </div>

<p>Fetches the average of all values of a given field or raises an error.</p><h2 id="avg!/3-examples" class="section-heading"><a href="#avg!/3-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">MyApp.Post</samp><samp class="w"> </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Ash</samp><samp class="o">.</samp><samp class="n">avg!</samp><samp class="p" data-group-id="6084560310-1">(</samp><samp class="ss">:view_count</samp><samp class="p" data-group-id="6084560310-1">)</samp><samp class="w">
</samp><samp class="mf">42.5</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">MyApp.Post</samp><samp class="w"> </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">filter</samp><samp class="p" data-group-id="6084560310-2">(</samp><samp class="ss">published</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">true</samp><samp class="p" data-group-id="6084560310-2">)</samp><samp class="w"> </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Ash</samp><samp class="o">.</samp><samp class="n">avg!</samp><samp class="p" data-group-id="6084560310-3">(</samp><samp class="ss">:likes</samp><samp class="p" data-group-id="6084560310-3">)</samp><samp class="w">
</samp><samp class="mf">15.8</samp></code></pre><h2 id="avg!/3-see-also" class="section-heading"><a href="#avg!/3-see-also" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">See also</span></h2><ul><li><a href="#avg/3"><code class="inline">avg/3</code></a> for the non-raising version</li><li><a href="#sum!/3"><code class="inline">sum!/3</code></a> for getting the total sum</li><li><code class="inline">d:Ash.Resource.Dsl.aggregates</code> for defining aggregates on resources</li></ul>
  </section>
</section>
<section class="detail" id="bulk_create/4">

    <span id="bulk_create/3"></span>

  <div class="detail-header">
    <a href="#bulk_create/4" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">bulk_create(inputs, resource, action, opts \\ [])</h1>


        <a href="https://github.com/ash-project/ash/blob/v3.5.33/lib/ash.ex#L3267" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> bulk_create(
  <a href="https://hexdocs.pm/elixir/Enumerable.html#t:t/1">Enumerable.t</a>(<a href="https://hexdocs.pm/elixir/typespecs.html#basic-types">map</a>()),
  resource :: <a href="Ash.Resource.xhtml#t:t/0">Ash.Resource.t</a>(),
  action :: <a href="https://hexdocs.pm/elixir/typespecs.html#basic-types">atom</a>(),
  opts :: <a href="https://hexdocs.pm/elixir/Keyword.html#t:t/0">Keyword.t</a>()
) ::
  <a href="Ash.BulkResult.xhtml#t:t/0">Ash.BulkResult.t</a>()
  | Enumerable.t(
      {:ok, <a href="Ash.Resource.xhtml#t:record/0">Ash.Resource.record</a>()}
      | {:error, <a href="Ash.Changeset.xhtml#t:t/0">Ash.Changeset.t</a>() | <a href="Ash.Error.xhtml#t:t/0">Ash.Error.t</a>()}
      | {:notification, <a href="Ash.Notifier.Notification.xhtml#t:t/0">Ash.Notifier.Notification.t</a>()}
    )</pre>

      </div>

<p>Creates many records.</p><h2 id="bulk_create/4-assumptions" class="section-heading"><a href="#bulk_create/4-assumptions" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Assumptions</span></h2><p>We assume that the input is a list of changesets all for the same action, or a list of input maps for the
same action with the <code class="inline">:resource</code> and <code class="inline">:action</code> option provided to illustrate which action it is for.</p><h2 id="bulk_create/4-performance-feasibility" class="section-heading"><a href="#bulk_create/4-performance-feasibility" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Performance/Feasibility</span></h2><p>The performance of this operation depends on the data layer in question.
Data layers like AshPostgres will choose reasonable batch sizes in an attempt
to handle large bulk actions, but that does not mean that you can pass a list of
500k inputs and expect things to go off without a hitch (although it might).
If you need to do large data processing, you should look into projects like
GenStage and Broadway. With that said, if you want to do things like support CSV upload
and you place some reasonable limits on the size this is a great tool. You'll need to
test it yourself, YMMV.</p><p>Passing <code class="inline">return_records?: true</code> can significantly increase the time it takes to perform the operation,
and can also make the operation completely unreasonable due to the memory requirement. If you want to
do very large bulk creates and display all of the results, the suggestion is to annotate them with a
&quot;bulk_create_id&quot; in the data layer, and then read the records with that <code class="inline">bulk_create_id</code> so that they can
be retrieved later if necessary.</p><h2 id="bulk_create/4-changes-validations" class="section-heading"><a href="#bulk_create/4-changes-validations" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Changes/Validations</span></h2><p>Changes will be applied in the order they are given on the actions as normal. Any change that exposes
the <code class="inline">bulk_change</code> callbacks will be applied on the entire list.</p><h2 id="bulk_create/4-after-action-hooks" class="section-heading"><a href="#bulk_create/4-after-action-hooks" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">After Action Hooks</span></h2><p>The following requirements must be met for <code class="inline">after_action</code> hooks to function properly. If they are not met,
and an after_action hook being applied to a changeset in a <code class="inline">change</code>.</p><ol><li><code class="inline">return_records?</code> must be set to <code class="inline">true</code>.</li><li>The changeset must be setting the primary key as part of its changes, so that we know which result applies to which
changeset.</li></ol><p>It is possible to use <code class="inline">after_action</code> hooks with <code class="inline">bulk_change/3</code>, but you need to return the hooks along with the changesets.
This allows for setting up <code class="inline">after_action</code> hooks that don't need access to the returned record,
or <code class="inline">after_action</code> hooks that can operate on the entire list at once.  See the documentation for that callback for more on
how to do accomplish that.</p><h2 id="bulk_create/4-see-also" class="section-heading"><a href="#bulk_create/4-see-also" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">See also</span></h2><ul><li><a href="#bulk_create!/4"><code class="inline">bulk_create!/4</code></a> for the raising version</li><li><a href="#create/3"><code class="inline">create/3</code></a> for creating single records</li><li><a href="create-actions.xhtml">Create Actions Guide</a> for understanding create operations</li><li><a href="actions.xhtml">Actions Guide</a> for general action concepts</li></ul><h2 id="bulk_create/4-options" class="section-heading"><a href="#bulk_create/4-options" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Options</span></h2><ul><li><p><code class="inline">:upsert?</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">boolean/0</code></a>) - If a conflict is found based on the primary key, the record is updated in the database (requires upsert support) The default value is <code class="inline">false</code>.</p></li><li><p><code class="inline">:upsert_identity</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#basic-types"><code class="inline">atom/0</code></a>) - The identity to use when detecting conflicts for <code class="inline">upsert?</code>, e.g. <code class="inline">upsert_identity: :full_name</code>. By default, the primary key is used. Has no effect if <code class="inline">upsert?: true</code> is not provided</p></li><li><p><code class="inline">:upsert_fields</code> - The fields to upsert. If not set, the action's <code class="inline">upsert_fields</code> is used. Unlike singular <code class="inline">create</code>, <code class="inline">bulk_create</code> with <code class="inline">upsert?</code> requires that <code class="inline">upsert_fields</code> be specified explicitly in one of these two locations.</p></li><li><p><code class="inline">:after_action</code> (function of arity 2) - An after_action hook to be added to each processed changeset</p></li><li><p><code class="inline">:upsert_condition</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">term/0</code></a>) - An expression to check if the record should be updated when there's a conflict.</p></li><li><p><code class="inline">:domain</code> (<a href="Ash.Domain.xhtml"><code class="inline">Ash.Domain</code></a>) - The domain to use.</p></li><li><p><code class="inline">:timeout</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">timeout/0</code></a>) - A positive integer, or <code class="inline">:infinity</code>. If none is provided, the timeout configured on the domain is used.</p></li><li><p><code class="inline">:tracer</code> (one or a list of module that adopts <a href="Ash.Tracer.xhtml"><code class="inline">Ash.Tracer</code></a>) - A tracer that implements the <a href="Ash.Tracer.xhtml"><code class="inline">Ash.Tracer</code></a> behaviour. See that module for more.</p></li><li><p><code class="inline">:authorize?</code> - If an actor option is provided (even if it is <code class="inline">nil</code>), authorization happens automatically. If not, this flag can be used to authorize with no user.</p></li><li><p><code class="inline">:tenant</code> (value that implements the <a href="Ash.ToTenant.xhtml"><code class="inline">Ash.ToTenant</code></a> protocol) - A tenant to set on the query or changeset</p></li><li><p><code class="inline">:actor</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">term/0</code></a>) - If an actor is provided, it will be used in conjunction with the authorizers of a resource to authorize access</p></li><li><p><code class="inline">:scope</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">term/0</code></a>) - A value that implements the <a href="Ash.Scope.ToOpts.xhtml"><code class="inline">Ash.Scope.ToOpts</code></a> protocol, for passing around actor/tenant/context in a single value. See <a href="Ash.Scope.ToOpts.xhtml"><code class="inline">Ash.Scope.ToOpts</code></a> for more.</p></li><li><p><code class="inline">:return_notifications?</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">boolean/0</code></a>) - Use this if you're running ash actions in your own transaction and you want to manually handle sending notifications.<br/>If a transaction is ongoing, and this is false, notifications will be discarded, otherwise
the return value is <code class="inline">{:ok, result, notifications}</code> (or <code class="inline">{:ok, notifications}</code>)<br/>To send notifications later, use <code class="inline">Ash.Notifier.notify(notifications)</code>. It sends any notifications
that can be sent, and returns the rest. The default value is <code class="inline">false</code>.</p></li><li><p><code class="inline">:rollback_on_error?</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">boolean/0</code></a>) - Whether or not to rollback the transaction on error, if the resource is in a transaction.<br/>If the action has <code class="inline">transaction? false</code> this option has no effect. If an error is returned from the
data layer and the resource is in a transaction, the transaction is always rolled back, regardless. The default value is <code class="inline">true</code>.</p></li><li><p><code class="inline">:notification_metadata</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">term/0</code></a>) - Metadata to be merged into the metadata field for all notifications sent from this operation. The default value is <code class="inline">%{}</code>.</p></li><li><p><code class="inline">:read_action</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#basic-types"><code class="inline">atom/0</code></a>) - The action to use when building the read query.</p></li><li><p><code class="inline">:assume_casted?</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">boolean/0</code></a>) - Whether or not to cast attributes and arguments as input. This is an optimization for cases where the input is already casted and/or not in need of casting The default value is <code class="inline">false</code>.</p></li><li><p><code class="inline">:load</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">term/0</code></a>) - A load statement to apply to records. Ignored if <code class="inline">return_records?</code> is not true.</p></li><li><p><code class="inline">:select</code> (list of <a href="https://hexdocs.pm/elixir/typespecs.html#basic-types"><code class="inline">atom/0</code></a>) - A select statement to apply to records. Ignored if <code class="inline">return_records?</code> is not true.</p></li><li><p><code class="inline">:authorize_query_with</code> - If set to <code class="inline">:error</code>, instead of filtering unauthorized query results, unauthorized query results will raise an appropriate forbidden error. Uses <code class="inline">authorize_with</code> if not set. Valid values are :filter, :error</p></li><li><p><code class="inline">:authorize_changeset_with</code> - If set to <code class="inline">:error</code>, instead of filtering unauthorized changes, unauthorized changes will raise an appropriate forbidden error. Uses <code class="inline">authorize_with</code> if not set. Valid values are :filter, :error</p></li><li><p><code class="inline">:authorize_with</code> - If set to <code class="inline">:error</code>, instead of filtering unauthorized query results, unauthorized query results will raise an appropriate forbidden error. Valid values are :filter, :error The default value is <code class="inline">:filter</code>.</p></li><li><p><code class="inline">:context</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#basic-types"><code class="inline">map/0</code></a>) - Context to set on each changeset</p></li><li><p><code class="inline">:private_arguments</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#basic-types"><code class="inline">map/0</code></a>) - Private argument values to set on each changeset before validations and changes are run. The default value is <code class="inline">%{}</code>.</p></li><li><p><code class="inline">:sorted?</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">boolean/0</code></a>) - Whether or not to sort results by their input position, in cases where <code class="inline">return_records?: true</code> was provided. The default value is <code class="inline">false</code>.</p></li><li><p><code class="inline">:return_records?</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">boolean/0</code></a>) - Whether or not to return all of the records that were inserted. Defaults to false to account for large inserts. The default value is <code class="inline">false</code>.</p></li><li><p><code class="inline">:return_errors?</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">boolean/0</code></a>) - Whether to return all errors that occur during the operation. Defaults to the value of <code class="inline">:bulk_actions_default_to_errors?</code> in your config, or <code class="inline">false</code> if not set. Returning all errors may be expensive for large inserts. The default value is <code class="inline">true</code>.</p></li><li><p><code class="inline">:batch_size</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#basic-types"><code class="inline">pos_integer/0</code></a>) - The number of records to include in each batch. Defaults to the <code class="inline">default_limit</code>
or <code class="inline">max_page_size</code> of the action, or 100.</p></li><li><p><code class="inline">:return_stream?</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">boolean/0</code></a>) - If set to <code class="inline">true</code>, instead of an <a href="Ash.BulkResult.xhtml"><code class="inline">Ash.BulkResult</code></a>, a mixed stream is returned.<br/>Potential elements:<br/><code class="inline">{:notification, notification}</code> - if <code class="inline">return_notifications?</code> is set to <code class="inline">true</code>
<code class="inline">{:ok, record}</code> - if <code class="inline">return_records?</code> is set to <code class="inline">true</code>
<code class="inline">{:error, error}</code> - an error that occurred. May be changeset or an individual error. The default value is <code class="inline">false</code>.</p></li><li><p><code class="inline">:return_nothing?</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">boolean/0</code></a>) - Mutes warnings about returning nothing.<br/>Only relevant if <code class="inline">return_stream?</code> is set to <code class="inline">true</code> and all other
<code class="inline">return_*?</code> options are set to <code class="inline">false</code>. The default value is <code class="inline">false</code>.</p></li><li><p><code class="inline">:stop_on_error?</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">boolean/0</code></a>) - If true, the first encountered error will stop the action and be returned. Otherwise, errors
will be skipped. The default value is <code class="inline">true</code>.</p></li><li><p><code class="inline">:notify?</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">boolean/0</code></a>) - Whether or not to generate any notifications. If this is set to <code class="inline">true</code> then the data layer must return
the results from each batch. This may be intensive for large bulk actions.<br/>Notifications will be automatically sent unless <code class="inline">return_notifications?</code> is set to <code class="inline">true</code>. The default value is <code class="inline">false</code>.</p></li><li><p><code class="inline">:transaction</code> - Whether or not to wrap the entire execution in a transaction, each batch, or not at all.<br/>Keep in mind:<br/><code class="inline">before_transaction</code> and <code class="inline">after_transaction</code> hooks attached to changesets will have to be run
<em>inside</em> the transaction if you choose <code class="inline">transaction: :all</code>.
 Valid values are :all, :batch, false The default value is <code class="inline">:batch</code>.</p></li><li><p><code class="inline">:max_concurrency</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#basic-types"><code class="inline">non_neg_integer/0</code></a>) - If set to a value greater than 0, up to that many tasks will be started to run batches asynchronously The default value is <code class="inline">0</code>.</p></li><li><p><code class="inline">:skip_unknown_inputs</code> - A list of inputs that, if provided, will be ignored if they are not recognized by the action. Use <code class="inline">:*</code> to indicate all unknown keys.</p></li></ul>
  </section>
</section>
<section class="detail" id="bulk_create!/4">

    <span id="bulk_create!/3"></span>

  <div class="detail-header">
    <a href="#bulk_create!/4" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">bulk_create!(inputs, resource, action, opts \\ [])</h1>


        <a href="https://github.com/ash-project/ash/blob/v3.5.33/lib/ash.ex#L3162" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> bulk_create!(<a href="https://hexdocs.pm/elixir/Enumerable.html#t:t/1">Enumerable.t</a>(<a href="https://hexdocs.pm/elixir/typespecs.html#basic-types">map</a>()), <a href="Ash.Resource.xhtml#t:t/0">Ash.Resource.t</a>(), <a href="https://hexdocs.pm/elixir/typespecs.html#basic-types">atom</a>(), <a href="https://hexdocs.pm/elixir/Keyword.html#t:t/0">Keyword.t</a>()) ::
  <a href="Ash.BulkResult.xhtml#t:t/0">Ash.BulkResult.t</a>() | <a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types">no_return</a>()</pre>

      </div>

<p>Creates many records, raising any errors that are returned. See <a href="#bulk_create/4"><code class="inline">bulk_create/4</code></a> for more.</p>
  </section>
</section>
<section class="detail" id="bulk_destroy/4">

    <span id="bulk_destroy/3"></span>

  <div class="detail-header">
    <a href="#bulk_destroy/4" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">bulk_destroy(query_or_stream, action, input, opts \\ [])</h1>


        <a href="https://github.com/ash-project/ash/blob/v3.5.33/lib/ash.ex#L3487" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> bulk_destroy(
  <a href="https://hexdocs.pm/elixir/Enumerable.html#t:t/1">Enumerable.t</a>(<a href="Ash.Resource.xhtml#t:record/0">Ash.Resource.record</a>()) | <a href="Ash.Query.xhtml#t:t/0">Ash.Query.t</a>(),
  <a href="https://hexdocs.pm/elixir/typespecs.html#basic-types">atom</a>(),
  input :: <a href="https://hexdocs.pm/elixir/typespecs.html#basic-types">map</a>(),
  <a href="https://hexdocs.pm/elixir/Keyword.html#t:t/0">Keyword.t</a>()
) :: <a href="Ash.BulkResult.xhtml#t:t/0">Ash.BulkResult.t</a>()</pre>

      </div>

<p>Destroys all items in the provided enumerable or query with the provided input.</p><p>The input is a map of valid inputs for the action. The input will be applied to all records in the enumerable/query.</p><p>If the data layer supports destroying from a query, and the destroy action can be done fully atomically,
it will be updated in a single pass using the data layer.</p><p>Otherwise, this will stream each record and update it.</p><h2 id="bulk_destroy/4-options" class="section-heading"><a href="#bulk_destroy/4-options" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Options</span></h2><ul><li><p><code class="inline">:resource</code> (<a href="Ash.Resource.xhtml"><code class="inline">Ash.Resource</code></a>) - The resource being destroyed. This must be provided if the input given is a stream, so we know ahead of time what the resource being updated is.</p></li><li><p><code class="inline">:stream_batch_size</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#basic-types"><code class="inline">integer/0</code></a>) - Batch size to use if provided a query and the query must be streamed</p></li><li><p><code class="inline">:authorize_query?</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">boolean/0</code></a>) - If a query is given, determines whether or not authorization is run on that query. The default value is <code class="inline">true</code>.</p></li><li><p><code class="inline">:strategy</code> - The strategy or strategies to enable. :stream is used in all cases if the data layer does not support atomics. Valid values are :atomic, :atomic_batches, :stream The default value is <code class="inline">:atomic</code>.</p></li><li><p><code class="inline">:filter</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">term/0</code></a>) - A filter to apply to records. This is also applied to a stream of inputs.</p></li><li><p><code class="inline">:allow_stream_with</code> - The 'worst' strategy allowed to be used to fetch records. See <a href="#stream!/2"><code class="inline">Ash.stream!/2</code></a> docs for more. Valid values are :keyset, :offset, :full_read The default value is <code class="inline">:keyset</code>.</p></li><li><p><code class="inline">:stream_with</code> - The specific strategy to use to fetch records. See <a href="#stream!/2"><code class="inline">Ash.stream!/2</code></a> docs for more. Valid values are :keyset, :offset, :full_read</p></li><li><p><code class="inline">:lock</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">term/0</code></a>) - A lock statement to add onto the query</p></li><li><p><code class="inline">:return_query?</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">boolean/0</code></a>) - If <code class="inline">true</code>, the query that was ultimately used is returned as a third tuple element.<br/>The query goes through many potential changes during a request, potentially adding
authorization filters, or replacing relationships for other data layers with their
corresponding ids. This option can be used to get the true query that was sent to
the data layer. The default value is <code class="inline">false</code>.</p></li><li><p><code class="inline">:reuse_values?</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">boolean/0</code></a>) - Whether calculations are allowed to reuse values that have already been loaded, or must refetch them from the data layer. The default value is <code class="inline">false</code>.</p></li><li><p><code class="inline">:strict?</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">boolean/0</code></a>) - If set to true, only specified attributes will be loaded when passing
  a list of fields to fetch on a relationship, which allows for more
  optimized data-fetching.<br/>  See <a href="Ash.Query.xhtml#load/2"><code class="inline">Ash.Query.load/2</code></a>. The default value is <code class="inline">false</code>.</p></li><li><p><code class="inline">:domain</code> (<a href="Ash.Domain.xhtml"><code class="inline">Ash.Domain</code></a>) - The domain to use.</p></li><li><p><code class="inline">:timeout</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">timeout/0</code></a>) - A positive integer, or <code class="inline">:infinity</code>. If none is provided, the timeout configured on the domain is used.</p></li><li><p><code class="inline">:tracer</code> (one or a list of module that adopts <a href="Ash.Tracer.xhtml"><code class="inline">Ash.Tracer</code></a>) - A tracer that implements the <a href="Ash.Tracer.xhtml"><code class="inline">Ash.Tracer</code></a> behaviour. See that module for more.</p></li><li><p><code class="inline">:action</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">term/0</code></a>) - The action to use, either an Action struct or the name of the action</p></li><li><p><code class="inline">:authorize?</code> - If an actor option is provided (even if it is <code class="inline">nil</code>), authorization happens automatically. If not, this flag can be used to authorize with no user.</p></li><li><p><code class="inline">:tenant</code> (value that implements the <a href="Ash.ToTenant.xhtml"><code class="inline">Ash.ToTenant</code></a> protocol) - A tenant to set on the query or changeset</p></li><li><p><code class="inline">:actor</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">term/0</code></a>) - If an actor is provided, it will be used in conjunction with the authorizers of a resource to authorize access</p></li><li><p><code class="inline">:scope</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">term/0</code></a>) - A value that implements the <a href="Ash.Scope.ToOpts.xhtml"><code class="inline">Ash.Scope.ToOpts</code></a> protocol, for passing around actor/tenant/context in a single value. See <a href="Ash.Scope.ToOpts.xhtml"><code class="inline">Ash.Scope.ToOpts</code></a> for more.</p></li><li><p><code class="inline">:return_notifications?</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">boolean/0</code></a>) - Use this if you're running ash actions in your own transaction and you want to manually handle sending notifications.<br/>If a transaction is ongoing, and this is false, notifications will be discarded, otherwise
the return value is <code class="inline">{:ok, result, notifications}</code> (or <code class="inline">{:ok, notifications}</code>)<br/>To send notifications later, use <code class="inline">Ash.Notifier.notify(notifications)</code>. It sends any notifications
that can be sent, and returns the rest. The default value is <code class="inline">false</code>.</p></li><li><p><code class="inline">:rollback_on_error?</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">boolean/0</code></a>) - Whether or not to rollback the transaction on error, if the resource is in a transaction.<br/>If the action has <code class="inline">transaction? false</code> this option has no effect. If an error is returned from the
data layer and the resource is in a transaction, the transaction is always rolled back, regardless. The default value is <code class="inline">true</code>.</p></li><li><p><code class="inline">:notification_metadata</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">term/0</code></a>) - Metadata to be merged into the metadata field for all notifications sent from this operation. The default value is <code class="inline">%{}</code>.</p></li><li><p><code class="inline">:read_action</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#basic-types"><code class="inline">atom/0</code></a>) - The action to use when building the read query.</p></li><li><p><code class="inline">:assume_casted?</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">boolean/0</code></a>) - Whether or not to cast attributes and arguments as input. This is an optimization for cases where the input is already casted and/or not in need of casting The default value is <code class="inline">false</code>.</p></li><li><p><code class="inline">:load</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">term/0</code></a>) - A load statement to apply to records. Ignored if <code class="inline">return_records?</code> is not true.</p></li><li><p><code class="inline">:select</code> (list of <a href="https://hexdocs.pm/elixir/typespecs.html#basic-types"><code class="inline">atom/0</code></a>) - A select statement to apply to records. Ignored if <code class="inline">return_records?</code> is not true.</p></li><li><p><code class="inline">:authorize_query_with</code> - If set to <code class="inline">:error</code>, instead of filtering unauthorized query results, unauthorized query results will raise an appropriate forbidden error. Uses <code class="inline">authorize_with</code> if not set. Valid values are :filter, :error</p></li><li><p><code class="inline">:authorize_changeset_with</code> - If set to <code class="inline">:error</code>, instead of filtering unauthorized changes, unauthorized changes will raise an appropriate forbidden error. Uses <code class="inline">authorize_with</code> if not set. Valid values are :filter, :error</p></li><li><p><code class="inline">:authorize_with</code> - If set to <code class="inline">:error</code>, instead of filtering unauthorized query results, unauthorized query results will raise an appropriate forbidden error. Valid values are :filter, :error The default value is <code class="inline">:filter</code>.</p></li><li><p><code class="inline">:context</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#basic-types"><code class="inline">map/0</code></a>) - Context to set on each changeset</p></li><li><p><code class="inline">:private_arguments</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#basic-types"><code class="inline">map/0</code></a>) - Private argument values to set on each changeset before validations and changes are run. The default value is <code class="inline">%{}</code>.</p></li><li><p><code class="inline">:sorted?</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">boolean/0</code></a>) - Whether or not to sort results by their input position, in cases where <code class="inline">return_records?: true</code> was provided. The default value is <code class="inline">false</code>.</p></li><li><p><code class="inline">:return_records?</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">boolean/0</code></a>) - Whether or not to return all of the records that were inserted. Defaults to false to account for large inserts. The default value is <code class="inline">false</code>.</p></li><li><p><code class="inline">:return_errors?</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">boolean/0</code></a>) - Whether to return all errors that occur during the operation. Defaults to the value of <code class="inline">:bulk_actions_default_to_errors?</code> in your config, or <code class="inline">false</code> if not set. Returning all errors may be expensive for large inserts. The default value is <code class="inline">true</code>.</p></li><li><p><code class="inline">:batch_size</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#basic-types"><code class="inline">pos_integer/0</code></a>) - The number of records to include in each batch. Defaults to the <code class="inline">default_limit</code>
or <code class="inline">max_page_size</code> of the action, or 100.</p></li><li><p><code class="inline">:return_stream?</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">boolean/0</code></a>) - If set to <code class="inline">true</code>, instead of an <a href="Ash.BulkResult.xhtml"><code class="inline">Ash.BulkResult</code></a>, a mixed stream is returned.<br/>Potential elements:<br/><code class="inline">{:notification, notification}</code> - if <code class="inline">return_notifications?</code> is set to <code class="inline">true</code>
<code class="inline">{:ok, record}</code> - if <code class="inline">return_records?</code> is set to <code class="inline">true</code>
<code class="inline">{:error, error}</code> - an error that occurred. May be changeset or an individual error. The default value is <code class="inline">false</code>.</p></li><li><p><code class="inline">:return_nothing?</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">boolean/0</code></a>) - Mutes warnings about returning nothing.<br/>Only relevant if <code class="inline">return_stream?</code> is set to <code class="inline">true</code> and all other
<code class="inline">return_*?</code> options are set to <code class="inline">false</code>. The default value is <code class="inline">false</code>.</p></li><li><p><code class="inline">:stop_on_error?</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">boolean/0</code></a>) - If true, the first encountered error will stop the action and be returned. Otherwise, errors
will be skipped. The default value is <code class="inline">true</code>.</p></li><li><p><code class="inline">:notify?</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">boolean/0</code></a>) - Whether or not to generate any notifications. If this is set to <code class="inline">true</code> then the data layer must return
the results from each batch. This may be intensive for large bulk actions.<br/>Notifications will be automatically sent unless <code class="inline">return_notifications?</code> is set to <code class="inline">true</code>. The default value is <code class="inline">false</code>.</p></li><li><p><code class="inline">:transaction</code> - Whether or not to wrap the entire execution in a transaction, each batch, or not at all.<br/>Keep in mind:<br/><code class="inline">before_transaction</code> and <code class="inline">after_transaction</code> hooks attached to changesets will have to be run
<em>inside</em> the transaction if you choose <code class="inline">transaction: :all</code>.
 Valid values are :all, :batch, false The default value is <code class="inline">:batch</code>.</p></li><li><p><code class="inline">:max_concurrency</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#basic-types"><code class="inline">non_neg_integer/0</code></a>) - If set to a value greater than 0, up to that many tasks will be started to run batches asynchronously The default value is <code class="inline">0</code>.</p></li><li><p><code class="inline">:skip_unknown_inputs</code> - A list of inputs that, if provided, will be ignored if they are not recognized by the action. Use <code class="inline">:*</code> to indicate all unknown keys.</p></li></ul>
  </section>
</section>
<section class="detail" id="bulk_destroy!/4">

    <span id="bulk_destroy!/3"></span>

  <div class="detail-header">
    <a href="#bulk_destroy!/4" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">bulk_destroy!(stream_or_query, action, input, opts \\ [])</h1>


        <a href="https://github.com/ash-project/ash/blob/v3.5.33/lib/ash.ex#L3428" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> bulk_destroy!(
  <a href="https://hexdocs.pm/elixir/Enumerable.html#t:t/1">Enumerable.t</a>(<a href="Ash.Resource.xhtml#t:record/0">Ash.Resource.record</a>()) | <a href="Ash.Query.xhtml#t:t/0">Ash.Query.t</a>(),
  action :: <a href="https://hexdocs.pm/elixir/typespecs.html#basic-types">atom</a>(),
  input :: <a href="https://hexdocs.pm/elixir/typespecs.html#basic-types">map</a>(),
  opts :: <a href="https://hexdocs.pm/elixir/Keyword.html#t:t/0">Keyword.t</a>()
) :: <a href="Ash.BulkResult.xhtml#t:t/0">Ash.BulkResult.t</a>() | <a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types">no_return</a>()</pre>

      </div>

<p>Destroys all items in the provided enumerable or query with the provided input.</p><p>See <a href="#bulk_destroy/4"><code class="inline">bulk_destroy/4</code></a> for more.</p>
  </section>
</section>
<section class="detail" id="bulk_update/4">

    <span id="bulk_update/3"></span>

  <div class="detail-header">
    <a href="#bulk_update/4" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">bulk_update(query_or_stream, action, input, opts \\ [])</h1>


        <a href="https://github.com/ash-project/ash/blob/v3.5.33/lib/ash.ex#L3377" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> bulk_update(
  <a href="https://hexdocs.pm/elixir/Enumerable.html#t:t/1">Enumerable.t</a>(<a href="Ash.Resource.xhtml#t:record/0">Ash.Resource.record</a>()) | <a href="Ash.Query.xhtml#t:t/0">Ash.Query.t</a>(),
  <a href="https://hexdocs.pm/elixir/typespecs.html#basic-types">atom</a>(),
  input :: <a href="https://hexdocs.pm/elixir/typespecs.html#basic-types">map</a>(),
  <a href="https://hexdocs.pm/elixir/Keyword.html#t:t/0">Keyword.t</a>()
) :: <a href="Ash.BulkResult.xhtml#t:t/0">Ash.BulkResult.t</a>()</pre>

      </div>

<p>Updates all items in the provided enumerable or query with the provided input.</p><p>The input is a map of valid inputs for the action. The input will be applied to all records in the enumerable/query.</p><p>If the data layer supports updating from a query, and the update action can be done fully atomically,
it will be updated in a single pass using the data layer.</p><p>Otherwise, this will stream each record and update it.</p><h2 id="bulk_update/4-options" class="section-heading"><a href="#bulk_update/4-options" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Options</span></h2><ul><li><p><code class="inline">:resource</code> (<a href="Ash.Resource.xhtml"><code class="inline">Ash.Resource</code></a>) - The resource being updated. This must be provided if the input given is a stream, so we know ahead of time what the resource being updated is.</p></li><li><p><code class="inline">:atomic_update</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#basic-types"><code class="inline">map/0</code></a>) - A map of atomic updates to apply. See <a href="Ash.Changeset.xhtml#atomic_update/3"><code class="inline">Ash.Changeset.atomic_update/3</code></a> for more.</p></li><li><p><code class="inline">:stream_batch_size</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#basic-types"><code class="inline">integer/0</code></a>) - Batch size to use if provided a query and the query must be streamed</p></li><li><p><code class="inline">:authorize_query?</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">boolean/0</code></a>) - If a query is given, determines whether or not authorization is run on that query. The default value is <code class="inline">true</code>.</p></li><li><p><code class="inline">:filter</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">term/0</code></a>) - A filter to apply to records. This is also applied to a stream of inputs.</p></li><li><p><code class="inline">:strategy</code> - The strategy or strategies to enable. :stream is used in all cases if the data layer does not support atomics. Valid values are :atomic, :atomic_batches, :stream The default value is <code class="inline">[:atomic]</code>.</p></li><li><p><code class="inline">:allow_stream_with</code> - The 'worst' strategy allowed to be used to fetch records. See <a href="#stream!/2"><code class="inline">Ash.stream!/2</code></a> docs for more. Valid values are :keyset, :offset, :full_read The default value is <code class="inline">:keyset</code>.</p></li><li><p><code class="inline">:stream_with</code> - The specific strategy to use to fetch records. See <a href="#stream!/2"><code class="inline">Ash.stream!/2</code></a> docs for more. Valid values are :keyset, :offset, :full_read</p></li><li><p><code class="inline">:lock</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">term/0</code></a>) - A lock statement to add onto the query</p></li><li><p><code class="inline">:return_query?</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">boolean/0</code></a>) - If <code class="inline">true</code>, the query that was ultimately used is returned as a third tuple element.<br/>The query goes through many potential changes during a request, potentially adding
authorization filters, or replacing relationships for other data layers with their
corresponding ids. This option can be used to get the true query that was sent to
the data layer. The default value is <code class="inline">false</code>.</p></li><li><p><code class="inline">:reuse_values?</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">boolean/0</code></a>) - Whether calculations are allowed to reuse values that have already been loaded, or must refetch them from the data layer. The default value is <code class="inline">false</code>.</p></li><li><p><code class="inline">:strict?</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">boolean/0</code></a>) - If set to true, only specified attributes will be loaded when passing
  a list of fields to fetch on a relationship, which allows for more
  optimized data-fetching.<br/>  See <a href="Ash.Query.xhtml#load/2"><code class="inline">Ash.Query.load/2</code></a>. The default value is <code class="inline">false</code>.</p></li><li><p><code class="inline">:domain</code> (<a href="Ash.Domain.xhtml"><code class="inline">Ash.Domain</code></a>) - The domain to use.</p></li><li><p><code class="inline">:timeout</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">timeout/0</code></a>) - A positive integer, or <code class="inline">:infinity</code>. If none is provided, the timeout configured on the domain is used.</p></li><li><p><code class="inline">:tracer</code> (one or a list of module that adopts <a href="Ash.Tracer.xhtml"><code class="inline">Ash.Tracer</code></a>) - A tracer that implements the <a href="Ash.Tracer.xhtml"><code class="inline">Ash.Tracer</code></a> behaviour. See that module for more.</p></li><li><p><code class="inline">:action</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">term/0</code></a>) - The action to use, either an Action struct or the name of the action</p></li><li><p><code class="inline">:authorize?</code> - If an actor option is provided (even if it is <code class="inline">nil</code>), authorization happens automatically. If not, this flag can be used to authorize with no user.</p></li><li><p><code class="inline">:tenant</code> (value that implements the <a href="Ash.ToTenant.xhtml"><code class="inline">Ash.ToTenant</code></a> protocol) - A tenant to set on the query or changeset</p></li><li><p><code class="inline">:actor</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">term/0</code></a>) - If an actor is provided, it will be used in conjunction with the authorizers of a resource to authorize access</p></li><li><p><code class="inline">:scope</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">term/0</code></a>) - A value that implements the <a href="Ash.Scope.ToOpts.xhtml"><code class="inline">Ash.Scope.ToOpts</code></a> protocol, for passing around actor/tenant/context in a single value. See <a href="Ash.Scope.ToOpts.xhtml"><code class="inline">Ash.Scope.ToOpts</code></a> for more.</p></li><li><p><code class="inline">:return_notifications?</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">boolean/0</code></a>) - Use this if you're running ash actions in your own transaction and you want to manually handle sending notifications.<br/>If a transaction is ongoing, and this is false, notifications will be discarded, otherwise
the return value is <code class="inline">{:ok, result, notifications}</code> (or <code class="inline">{:ok, notifications}</code>)<br/>To send notifications later, use <code class="inline">Ash.Notifier.notify(notifications)</code>. It sends any notifications
that can be sent, and returns the rest. The default value is <code class="inline">false</code>.</p></li><li><p><code class="inline">:rollback_on_error?</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">boolean/0</code></a>) - Whether or not to rollback the transaction on error, if the resource is in a transaction.<br/>If the action has <code class="inline">transaction? false</code> this option has no effect. If an error is returned from the
data layer and the resource is in a transaction, the transaction is always rolled back, regardless. The default value is <code class="inline">true</code>.</p></li><li><p><code class="inline">:notification_metadata</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">term/0</code></a>) - Metadata to be merged into the metadata field for all notifications sent from this operation. The default value is <code class="inline">%{}</code>.</p></li><li><p><code class="inline">:read_action</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#basic-types"><code class="inline">atom/0</code></a>) - The action to use when building the read query.</p></li><li><p><code class="inline">:assume_casted?</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">boolean/0</code></a>) - Whether or not to cast attributes and arguments as input. This is an optimization for cases where the input is already casted and/or not in need of casting The default value is <code class="inline">false</code>.</p></li><li><p><code class="inline">:load</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">term/0</code></a>) - A load statement to apply to records. Ignored if <code class="inline">return_records?</code> is not true.</p></li><li><p><code class="inline">:select</code> (list of <a href="https://hexdocs.pm/elixir/typespecs.html#basic-types"><code class="inline">atom/0</code></a>) - A select statement to apply to records. Ignored if <code class="inline">return_records?</code> is not true.</p></li><li><p><code class="inline">:authorize_query_with</code> - If set to <code class="inline">:error</code>, instead of filtering unauthorized query results, unauthorized query results will raise an appropriate forbidden error. Uses <code class="inline">authorize_with</code> if not set. Valid values are :filter, :error</p></li><li><p><code class="inline">:authorize_changeset_with</code> - If set to <code class="inline">:error</code>, instead of filtering unauthorized changes, unauthorized changes will raise an appropriate forbidden error. Uses <code class="inline">authorize_with</code> if not set. Valid values are :filter, :error</p></li><li><p><code class="inline">:authorize_with</code> - If set to <code class="inline">:error</code>, instead of filtering unauthorized query results, unauthorized query results will raise an appropriate forbidden error. Valid values are :filter, :error The default value is <code class="inline">:filter</code>.</p></li><li><p><code class="inline">:context</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#basic-types"><code class="inline">map/0</code></a>) - Context to set on each changeset</p></li><li><p><code class="inline">:private_arguments</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#basic-types"><code class="inline">map/0</code></a>) - Private argument values to set on each changeset before validations and changes are run. The default value is <code class="inline">%{}</code>.</p></li><li><p><code class="inline">:sorted?</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">boolean/0</code></a>) - Whether or not to sort results by their input position, in cases where <code class="inline">return_records?: true</code> was provided. The default value is <code class="inline">false</code>.</p></li><li><p><code class="inline">:return_records?</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">boolean/0</code></a>) - Whether or not to return all of the records that were inserted. Defaults to false to account for large inserts. The default value is <code class="inline">false</code>.</p></li><li><p><code class="inline">:return_errors?</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">boolean/0</code></a>) - Whether to return all errors that occur during the operation. Defaults to the value of <code class="inline">:bulk_actions_default_to_errors?</code> in your config, or <code class="inline">false</code> if not set. Returning all errors may be expensive for large inserts. The default value is <code class="inline">true</code>.</p></li><li><p><code class="inline">:batch_size</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#basic-types"><code class="inline">pos_integer/0</code></a>) - The number of records to include in each batch. Defaults to the <code class="inline">default_limit</code>
or <code class="inline">max_page_size</code> of the action, or 100.</p></li><li><p><code class="inline">:return_stream?</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">boolean/0</code></a>) - If set to <code class="inline">true</code>, instead of an <a href="Ash.BulkResult.xhtml"><code class="inline">Ash.BulkResult</code></a>, a mixed stream is returned.<br/>Potential elements:<br/><code class="inline">{:notification, notification}</code> - if <code class="inline">return_notifications?</code> is set to <code class="inline">true</code>
<code class="inline">{:ok, record}</code> - if <code class="inline">return_records?</code> is set to <code class="inline">true</code>
<code class="inline">{:error, error}</code> - an error that occurred. May be changeset or an individual error. The default value is <code class="inline">false</code>.</p></li><li><p><code class="inline">:return_nothing?</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">boolean/0</code></a>) - Mutes warnings about returning nothing.<br/>Only relevant if <code class="inline">return_stream?</code> is set to <code class="inline">true</code> and all other
<code class="inline">return_*?</code> options are set to <code class="inline">false</code>. The default value is <code class="inline">false</code>.</p></li><li><p><code class="inline">:stop_on_error?</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">boolean/0</code></a>) - If true, the first encountered error will stop the action and be returned. Otherwise, errors
will be skipped. The default value is <code class="inline">true</code>.</p></li><li><p><code class="inline">:notify?</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">boolean/0</code></a>) - Whether or not to generate any notifications. If this is set to <code class="inline">true</code> then the data layer must return
the results from each batch. This may be intensive for large bulk actions.<br/>Notifications will be automatically sent unless <code class="inline">return_notifications?</code> is set to <code class="inline">true</code>. The default value is <code class="inline">false</code>.</p></li><li><p><code class="inline">:transaction</code> - Whether or not to wrap the entire execution in a transaction, each batch, or not at all.<br/>Keep in mind:<br/><code class="inline">before_transaction</code> and <code class="inline">after_transaction</code> hooks attached to changesets will have to be run
<em>inside</em> the transaction if you choose <code class="inline">transaction: :all</code>.
 Valid values are :all, :batch, false The default value is <code class="inline">:batch</code>.</p></li><li><p><code class="inline">:max_concurrency</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#basic-types"><code class="inline">non_neg_integer/0</code></a>) - If set to a value greater than 0, up to that many tasks will be started to run batches asynchronously The default value is <code class="inline">0</code>.</p></li><li><p><code class="inline">:skip_unknown_inputs</code> - A list of inputs that, if provided, will be ignored if they are not recognized by the action. Use <code class="inline">:*</code> to indicate all unknown keys.</p></li></ul>
  </section>
</section>
<section class="detail" id="bulk_update!/4">

    <span id="bulk_update!/3"></span>

  <div class="detail-header">
    <a href="#bulk_update!/4" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">bulk_update!(stream_or_query, action, input, opts \\ [])</h1>


        <a href="https://github.com/ash-project/ash/blob/v3.5.33/lib/ash.ex#L3318" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> bulk_update!(
  <a href="https://hexdocs.pm/elixir/Enumerable.html#t:t/1">Enumerable.t</a>(<a href="Ash.Resource.xhtml#t:record/0">Ash.Resource.record</a>()) | <a href="Ash.Query.xhtml#t:t/0">Ash.Query.t</a>(),
  action :: <a href="https://hexdocs.pm/elixir/typespecs.html#basic-types">atom</a>(),
  input :: <a href="https://hexdocs.pm/elixir/typespecs.html#basic-types">map</a>(),
  opts :: <a href="https://hexdocs.pm/elixir/Keyword.html#t:t/0">Keyword.t</a>()
) :: <a href="Ash.BulkResult.xhtml#t:t/0">Ash.BulkResult.t</a>() | <a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types">no_return</a>()</pre>

      </div>

<p>Updates all items in the provided enumerable or query with the provided input.</p><p>See <a href="#bulk_update/4"><code class="inline">bulk_update/4</code></a> for more.</p>
  </section>
</section>
<section class="detail" id="calculate/3">

    <span id="calculate/2"></span>

  <div class="detail-header">
    <a href="#calculate/3" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">calculate(resource_or_record, calculation, opts \\ [])</h1>


        <a href="https://github.com/ash-project/ash/blob/v3.5.33/lib/ash.ex#L1986" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> calculate(
  resource_or_record :: <a href="Ash.Resource.xhtml#t:t/0">Ash.Resource.t</a>() | <a href="Ash.Resource.xhtml#t:record/0">Ash.Resource.record</a>(),
  calculation :: <a href="https://hexdocs.pm/elixir/typespecs.html#basic-types">atom</a>(),
  opts :: <a href="https://hexdocs.pm/elixir/Keyword.html#t:t/0">Keyword.t</a>()
) :: {:ok, <a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types">term</a>()} | {:error, <a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types">term</a>()}</pre>

      </div>

<p>Evaluates the calculation on the resource.</p><p>If a record is provided, its field values will be used to evaluate the calculation.</p><h2 id="calculate/3-examples" class="section-heading"><a href="#calculate/3-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Ash</samp><samp class="o">.</samp><samp class="n">calculate</samp><samp class="p" data-group-id="1026906180-1">(</samp><samp class="n">post</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:word_count</samp><samp class="p" data-group-id="1026906180-1">)</samp><samp class="w">
</samp><samp class="p" data-group-id="1026906180-2">{</samp><samp class="ss">:ok</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">142</samp><samp class="p" data-group-id="1026906180-2">}</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Ash</samp><samp class="o">.</samp><samp class="n">calculate</samp><samp class="p" data-group-id="1026906180-3">(</samp><samp class="nc">MyApp.User</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:age</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">args</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="1026906180-4">%{</samp><samp class="ss">birth_date</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="ld">~D[1990-01-01]</samp><samp class="p" data-group-id="1026906180-4">}</samp><samp class="p" data-group-id="1026906180-3">)</samp><samp class="w">
</samp><samp class="p" data-group-id="1026906180-5">{</samp><samp class="ss">:ok</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">34</samp><samp class="p" data-group-id="1026906180-5">}</samp></code></pre><h2 id="calculate/3-see-also" class="section-heading"><a href="#calculate/3-see-also" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">See also</span></h2><ul><li><a href="#calculate!/3"><code class="inline">calculate!/3</code></a> for the raising version</li><li><code class="inline">d:Ash.Resource.Dsl.calculations</code> for defining calculations on resources</li><li><a href="calculations.xhtml">Calculations Guide</a> for understanding calculations</li></ul><h2 id="calculate/3-options" class="section-heading"><a href="#calculate/3-options" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Options</span></h2><ul><li><p><code class="inline">:args</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#basic-types"><code class="inline">map/0</code></a>) - Values for arguments referenced by the calculation. The default value is <code class="inline">%{}</code>.</p></li><li><p><code class="inline">:refs</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#basic-types"><code class="inline">map/0</code></a>) - Values for references used by the calculation. The default value is <code class="inline">%{}</code>.</p></li><li><p><code class="inline">:actor</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">term/0</code></a>) - The actor for handling <a href="https://hexdocs.pm/elixir/Kernel.SpecialForms.html#%5E/1"><code class="inline">^actor/1</code></a> templates, supplied to calculation context.</p></li><li><p><code class="inline">:scope</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">term/0</code></a>) - A value that implements the <a href="Ash.Scope.ToOpts.xhtml"><code class="inline">Ash.Scope.ToOpts</code></a> protocol. Will overwrite any actor, tenant or context provided. See <a href="Ash.Context.xhtml"><code class="inline">Ash.Context</code></a> for more.</p></li><li><p><code class="inline">:tenant</code> (value that implements the <a href="Ash.ToTenant.xhtml"><code class="inline">Ash.ToTenant</code></a> protocol) - The tenant, supplied to calculation context.</p></li><li><p><code class="inline">:context</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#basic-types"><code class="inline">map/0</code></a>) - Context to set on the calculation input.</p></li><li><p><code class="inline">:authorize?</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">boolean/0</code></a>) - Whether or not the request is being authorized, provided to calculation context. The default value is <code class="inline">true</code>.</p></li><li><p><code class="inline">:tracer</code> (one or a list of module that adopts <a href="Ash.Tracer.xhtml"><code class="inline">Ash.Tracer</code></a>) - A tracer, provided to the calculation context.</p></li><li><p><code class="inline">:record</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">term/0</code></a>) - A record to use as the base of the calculation</p></li><li><p><code class="inline">:data_layer?</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">boolean/0</code></a>) - Set to <code class="inline">true</code> to require that the value be computed within the data layer. Only works for calculations that define an expression.</p></li><li><p><code class="inline">:reuse_values?</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">boolean/0</code></a>) - Set to <code class="inline">true</code> to reuse existing values on any provided record. Only necessary if providing a record as the basis for calculation. The default value is <code class="inline">false</code>.</p></li><li><p><code class="inline">:domain</code> (<a href="Ash.Domain.xhtml"><code class="inline">Ash.Domain</code></a>) - The domain to use for the action</p></li></ul>
  </section>
</section>
<section class="detail" id="calculate!/3">

    <span id="calculate!/2"></span>

  <div class="detail-header">
    <a href="#calculate!/3" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">calculate!(resource_or_record, calculation, opts \\ [])</h1>


        <a href="https://github.com/ash-project/ash/blob/v3.5.33/lib/ash.ex#L1940" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> calculate!(
  resource_or_record :: <a href="Ash.Resource.xhtml#t:t/0">Ash.Resource.t</a>() | <a href="Ash.Resource.xhtml#t:record/0">Ash.Resource.record</a>(),
  calculation :: <a href="https://hexdocs.pm/elixir/typespecs.html#basic-types">atom</a>(),
  opts :: <a href="https://hexdocs.pm/elixir/Keyword.html#t:t/0">Keyword.t</a>()
) :: <a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types">term</a>() | <a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types">no_return</a>()</pre>

      </div>

<p>Evaluates the calculation on the resource or raises an error. See <a href="#calculate/3"><code class="inline">calculate/3</code></a> for more.</p><h2 id="calculate!/3-examples" class="section-heading"><a href="#calculate!/3-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Ash</samp><samp class="o">.</samp><samp class="n">calculate!</samp><samp class="p" data-group-id="5399348589-1">(</samp><samp class="n">post</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:word_count</samp><samp class="p" data-group-id="5399348589-1">)</samp><samp class="w">
</samp><samp class="mi">142</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Ash</samp><samp class="o">.</samp><samp class="n">calculate!</samp><samp class="p" data-group-id="5399348589-2">(</samp><samp class="nc">MyApp.User</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:age</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">args</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="5399348589-3">%{</samp><samp class="ss">birth_date</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="ld">~D[1990-01-01]</samp><samp class="p" data-group-id="5399348589-3">}</samp><samp class="p" data-group-id="5399348589-2">)</samp><samp class="w">
</samp><samp class="mi">34</samp></code></pre><h2 id="calculate!/3-see-also" class="section-heading"><a href="#calculate!/3-see-also" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">See also</span></h2><ul><li><a href="#calculate/3"><code class="inline">calculate/3</code></a> for the non-raising version</li><li><code class="inline">d:Ash.Resource.Dsl.calculations</code> for defining calculations on resources</li><li><a href="calculations.xhtml">Calculations Guide</a> for understanding calculations</li></ul>
  </section>
</section>
<section class="detail" id="can/3">

    <span id="can/2"></span>

  <div class="detail-header">
    <a href="#can/3" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">can(action_or_query_or_changeset, actor_or_scope, opts \\ [])</h1>


        <a href="https://github.com/ash-project/ash/blob/v3.5.33/lib/ash.ex#L1805" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> can(<a href="Ash.Can.xhtml#t:subject/0">Ash.Can.subject</a>(), <a href="#t:actor/0">actor</a>() | <a href="Ash.Scope.xhtml#t:t/0">Ash.Scope.t</a>(), <a href="https://hexdocs.pm/elixir/Keyword.html#t:t/0">Keyword.t</a>()) ::
  {:ok, <a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types">boolean</a>() | :maybe}
  | {:ok, true, <a href="Ash.Changeset.xhtml#t:t/0">Ash.Changeset.t</a>() | <a href="Ash.Query.xhtml#t:t/0">Ash.Query.t</a>()}
  | {:ok, true, <a href="Ash.Changeset.xhtml#t:t/0">Ash.Changeset.t</a>(), <a href="Ash.Query.xhtml#t:t/0">Ash.Query.t</a>()}
  | {:ok, false, <a href="https://hexdocs.pm/elixir/Exception.html#t:t/0">Exception.t</a>()}
  | {:error, <a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types">term</a>()}</pre>

      </div>

<p>Returns whether or not the user can perform the action, or <code class="inline">:maybe</code>, returning any errors.</p><p>In cases with &quot;runtime&quot; checks (checks after the action), we may not be able to determine
an answer, and so the value <code class="inline">:maybe</code> will be returned from <a href="#can/2"><code class="inline">can/2</code></a>. The <code class="inline">can?</code> function assumes that
<code class="inline">:maybe</code> means <code class="inline">true</code>. Keep in mind, this is just for doing things like &quot;can they do this&quot; in a UI,
so assuming <code class="inline">:maybe</code> is <code class="inline">true</code> is fine. The actual action invocation will be properly checked regardless.
If you have runtime checks, you may need to use <code class="inline">can</code> instead of <code class="inline">can?</code>, or configure what <code class="inline">:maybe</code> means.</p><h3 id="can/3-accepted-inputs" class="section-heading"><a href="#can/3-accepted-inputs" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Accepted inputs</span></h3><p>You can pass many different inputs as the subject to <a href="#can/3"><code class="inline">can/3</code></a>.</p><pre><code class="makeup elixir" translate="no"><samp class="c1"># Can this user run this query.</samp><samp class="w">
</samp><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">t</samp><samp class="p" data-group-id="3718143196-1">(</samp><samp class="p" data-group-id="3718143196-1">)</samp><samp class="w">

</samp><samp class="c1"># Can this user run this changeset.</samp><samp class="w">
</samp><samp class="nc">Ash.Changeset</samp><samp class="o">.</samp><samp class="n">t</samp><samp class="p" data-group-id="3718143196-2">(</samp><samp class="p" data-group-id="3718143196-2">)</samp><samp class="w">

</samp><samp class="c1"># Can this user run this action.</samp><samp class="w">
</samp><samp class="nc">Ash.ActionInput</samp><samp class="o">.</samp><samp class="n">t</samp><samp class="p" data-group-id="3718143196-3">(</samp><samp class="p" data-group-id="3718143196-3">)</samp><samp class="w">

</samp><samp class="c1"># Can this user run this action.</samp><samp class="w">
</samp><samp class="p" data-group-id="3718143196-4">{</samp><samp class="nc">Ash.Resource</samp><samp class="o">.</samp><samp class="n">t</samp><samp class="p" data-group-id="3718143196-5">(</samp><samp class="p" data-group-id="3718143196-5">)</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:action</samp><samp class="p" data-group-id="3718143196-4">}</samp><samp class="w">

</samp><samp class="c1"># Can this user run this action.</samp><samp class="w">
</samp><samp class="p" data-group-id="3718143196-6">{</samp><samp class="nc">Ash.Resource</samp><samp class="o">.</samp><samp class="n">t</samp><samp class="p" data-group-id="3718143196-7">(</samp><samp class="p" data-group-id="3718143196-7">)</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="3718143196-8">%</samp><samp class="nc" data-group-id="3718143196-8">Action</samp><samp class="p" data-group-id="3718143196-8">{</samp><samp class="p" data-group-id="3718143196-8">}</samp><samp class="p" data-group-id="3718143196-6">}</samp><samp class="w">

</samp><samp class="c1"># Can this user run this action with this input.</samp><samp class="w">
</samp><samp class="p" data-group-id="3718143196-9">{</samp><samp class="nc">Ash.Resource</samp><samp class="o">.</samp><samp class="n">t</samp><samp class="p" data-group-id="3718143196-10">(</samp><samp class="p" data-group-id="3718143196-10">)</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:atom</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="3718143196-11">%{</samp><samp class="n">...</samp><samp class="n">input</samp><samp class="p" data-group-id="3718143196-11">}</samp><samp class="p" data-group-id="3718143196-9">}</samp><samp class="w">

</samp><samp class="c1"># Can this user run this action with this input.</samp><samp class="w">
</samp><samp class="p" data-group-id="3718143196-12">{</samp><samp class="nc">Ash.Resource</samp><samp class="o">.</samp><samp class="n">t</samp><samp class="p" data-group-id="3718143196-13">(</samp><samp class="p" data-group-id="3718143196-13">)</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="3718143196-14">%</samp><samp class="nc" data-group-id="3718143196-14">Action</samp><samp class="p" data-group-id="3718143196-14">{</samp><samp class="p" data-group-id="3718143196-14">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="3718143196-15">%{</samp><samp class="n">...</samp><samp class="n">input</samp><samp class="p" data-group-id="3718143196-15">}</samp><samp class="p" data-group-id="3718143196-12">}</samp></code></pre><h3 id="can/3-examples" class="section-heading"><a href="#can/3-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h3><pre><code class="makeup elixir" translate="no"><samp class="c1"># no actor</samp><samp class="w">
</samp><samp class="nc">Ash</samp><samp class="o">.</samp><samp class="n">can?</samp><samp class="p" data-group-id="9362544037-1">(</samp><samp class="p" data-group-id="9362544037-2">{</samp><samp class="nc">MyApp.Accounts.Organization</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:create</samp><samp class="p" data-group-id="9362544037-2">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="no">nil</samp><samp class="p" data-group-id="9362544037-1">)</samp><samp class="w">
</samp><samp class="c1"># =&gt; false</samp><samp class="w">

</samp><samp class="c1"># admin user actor</samp><samp class="w">
</samp><samp class="nc">Ash</samp><samp class="o">.</samp><samp class="n">can?</samp><samp class="p" data-group-id="9362544037-3">(</samp><samp class="p" data-group-id="9362544037-4">{</samp><samp class="nc">MyApp.Accounts.Organization</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:create</samp><samp class="p" data-group-id="9362544037-4">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="9362544037-5">%</samp><samp class="nc" data-group-id="9362544037-5">MyApp.Accounts.User</samp><samp class="p" data-group-id="9362544037-5">{</samp><samp class="ss">role</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="ss">:admin</samp><samp class="p" data-group-id="9362544037-5">}</samp><samp class="p" data-group-id="9362544037-3">)</samp><samp class="w">
</samp><samp class="c1"># =&gt; true</samp><samp class="w">

</samp><samp class="c1"># check for permission to update a specific thing</samp><samp class="w">
</samp><samp class="n">user</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="nc">MyApp.Accounts</samp><samp class="o">.</samp><samp class="n">get_post_by_id!</samp><samp class="p" data-group-id="9362544037-6">(</samp><samp class="err">«</samp><samp class="n">uuid</samp><samp class="err">»</samp><samp class="p" data-group-id="9362544037-6">)</samp><samp class="w">
</samp><samp class="nc">Ash</samp><samp class="o">.</samp><samp class="n">can?</samp><samp class="p" data-group-id="9362544037-7">(</samp><samp class="p" data-group-id="9362544037-8">{</samp><samp class="n">user</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:update</samp><samp class="p" data-group-id="9362544037-8">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="9362544037-9">%{</samp><samp class="ss">role</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="ss">:user</samp><samp class="p" data-group-id="9362544037-9">}</samp><samp class="p" data-group-id="9362544037-7">)</samp><samp class="w">
</samp><samp class="c1"># =&gt; false</samp><samp class="w">

</samp><samp class="c1"># read actions</samp><samp class="w">
</samp><samp class="c1"># no logged in user. Will say `true` because the action</samp><samp class="w">
</samp><samp class="c1"># is allowed, but will just be filtered</samp><samp class="w">
</samp><samp class="nc">Ash</samp><samp class="o">.</samp><samp class="n">can?</samp><samp class="p" data-group-id="9362544037-10">(</samp><samp class="p" data-group-id="9362544037-11">{</samp><samp class="nc">MyApp.Accounts.Organization</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:read</samp><samp class="p" data-group-id="9362544037-11">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="no">nil</samp><samp class="p" data-group-id="9362544037-10">)</samp><samp class="w">
</samp><samp class="c1"># =&gt; true</samp><samp class="w">

</samp><samp class="c1"># check for permission to read a specific thing</samp><samp class="w">
</samp><samp class="nc">Ash</samp><samp class="o">.</samp><samp class="n">can?</samp><samp class="p" data-group-id="9362544037-12">(</samp><samp class="p" data-group-id="9362544037-13">{</samp><samp class="n">organization</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:read</samp><samp class="p" data-group-id="9362544037-13">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="no">nil</samp><samp class="p" data-group-id="9362544037-12">)</samp><samp class="w">
</samp><samp class="c1"># =&gt; false</samp></code></pre><h3 id="can/3-code-interfaces" class="section-heading"><a href="#can/3-code-interfaces" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Code Interfaces</span></h3><p>When you define code interfaces, they provide <code class="inline">can_*</code> functions, which can be used like so:</p><pre><code class="makeup elixir" translate="no"><samp class="c1"># no actor</samp><samp class="w">
</samp><samp class="nc">MyApp.Accounts</samp><samp class="o">.</samp><samp class="n">can_create_organization?</samp><samp class="p" data-group-id="8953918783-1">(</samp><samp class="no">nil</samp><samp class="p" data-group-id="8953918783-1">)</samp><samp class="w">
</samp><samp class="c1"># =&gt; false</samp><samp class="w">

</samp><samp class="c1"># admin user actor</samp><samp class="w">
</samp><samp class="nc">MyApp.Accounts</samp><samp class="o">.</samp><samp class="n">can_create_organization?</samp><samp class="p" data-group-id="8953918783-2">(</samp><samp class="p" data-group-id="8953918783-3">%</samp><samp class="nc" data-group-id="8953918783-3">MyApp.Accounts.User</samp><samp class="p" data-group-id="8953918783-3">{</samp><samp class="ss">role</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="ss">:admin</samp><samp class="p" data-group-id="8953918783-3">}</samp><samp class="p" data-group-id="8953918783-2">)</samp><samp class="w">
</samp><samp class="c1"># =&gt; true</samp><samp class="w">

</samp><samp class="c1"># check for permission to update a specific thing</samp><samp class="w">
</samp><samp class="n">user</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="nc">MyApp.Accounts</samp><samp class="o">.</samp><samp class="n">get_post_by_id!</samp><samp class="p" data-group-id="8953918783-4">(</samp><samp class="err">«</samp><samp class="n">uuid</samp><samp class="err">»</samp><samp class="p" data-group-id="8953918783-4">)</samp><samp class="w">
</samp><samp class="nc">MyApp.Accounts</samp><samp class="o">.</samp><samp class="n">can_update_user</samp><samp class="p" data-group-id="8953918783-5">(</samp><samp class="n">user</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="8953918783-6">%{</samp><samp class="ss">role</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="ss">:user</samp><samp class="p" data-group-id="8953918783-6">}</samp><samp class="p" data-group-id="8953918783-5">)</samp><samp class="w">
</samp><samp class="c1"># =&gt; false</samp><samp class="w">

</samp><samp class="c1"># read actions</samp><samp class="w">
</samp><samp class="c1"># no logged in user. Will say `true` because the action</samp><samp class="w">
</samp><samp class="c1"># is allowed, but will just be filtered</samp><samp class="w">
</samp><samp class="nc">MyApp.Accounts</samp><samp class="o">.</samp><samp class="n">can_read_organizations?</samp><samp class="p" data-group-id="8953918783-7">(</samp><samp class="no">nil</samp><samp class="p" data-group-id="8953918783-7">)</samp><samp class="w">
</samp><samp class="c1"># =&gt; true</samp><samp class="w">

</samp><samp class="c1"># check for permission to read a specific thing</samp><samp class="w">
</samp><samp class="nc">MyApp.Accounts</samp><samp class="o">.</samp><samp class="n">can_read_organizations?</samp><samp class="p" data-group-id="8953918783-8">(</samp><samp class="no">nil</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">data</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="n">organization</samp><samp class="p" data-group-id="8953918783-8">)</samp><samp class="w">
</samp><samp class="c1"># =&gt; false</samp></code></pre><h2 id="can/3-see-also" class="section-heading"><a href="#can/3-see-also" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">See also</span></h2><ul><li><a href="#can?/3"><code class="inline">can?/3</code></a> for the raising version that returns true/false</li><li><code class="inline">d:Ash.Policy.Authorizer.policies</code> for defining authorization policies</li><li><a href="actors-and-authorization.xhtml">Actors and Authorization Guide</a> for understanding authorization</li><li><a href="policies.xhtml">Policies Guide</a> for defining authorization policies</li></ul><h2 id="can/3-options" class="section-heading"><a href="#can/3-options" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Options</span></h2><ul><li><p><code class="inline">:maybe_is</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">term/0</code></a>) - If the actor <em>may</em> be able to perform the action, what value should be returned. The default value is <code class="inline">:maybe</code>.</p></li><li><p><code class="inline">:filter_with</code> - If set to <code class="inline">:error</code>, the query will raise an error on a match. If set to <code class="inline">:filter</code> the query will filter out unauthorized access. Valid values are :filter, :error The default value is <code class="inline">:filter</code>.</p></li><li><p><code class="inline">:validate?</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">boolean/0</code></a>) - Whether or not to treat an invalid action as a non-allowed action. The default value is <code class="inline">false</code>.</p></li><li><p><code class="inline">:reuse_values?</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">boolean/0</code></a>) - Whether or not loaded data like aggregates, calculations and relationships should be checked in memory if possible, instead of querying. No effect if <code class="inline">pre_flight?</code> is <code class="inline">false</code>. The default value is <code class="inline">false</code>.</p></li><li><p><code class="inline">:pre_flight?</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">boolean/0</code></a>) - Whether or not this is a pre_flight check (which may perform optimized in-memory checks) or the final proper check. The default value is <code class="inline">true</code>.</p></li><li><p><code class="inline">:scope</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">term/0</code></a>) - A value that implements the <a href="Ash.Scope.ToOpts.xhtml"><code class="inline">Ash.Scope.ToOpts</code></a> protocol. Will overwrite any actor, tenant or context provided. See <a href="Ash.Context.xhtml"><code class="inline">Ash.Context</code></a> for more.</p></li><li><p><code class="inline">:run_queries?</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">boolean/0</code></a>) - Whether or not to run queries. If set to <code class="inline">true</code>, <code class="inline">:maybe</code> will not be returned. The default value is <code class="inline">true</code>.</p></li><li><p><code class="inline">:data</code> - The record or records specifically attempting to be acted upon.</p></li><li><p><code class="inline">:tenant</code> (value that implements the <a href="Ash.ToTenant.xhtml"><code class="inline">Ash.ToTenant</code></a> protocol) - The tenant to use for authorization</p></li><li><p><code class="inline">:alter_source?</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">boolean/0</code></a>) - If set to <code class="inline">true</code>, the source being authorized is returned so it can be run. The default value is <code class="inline">false</code>.</p></li><li><p><code class="inline">:base_query</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">term/0</code></a>) - A base query on which to apply an generated filters</p></li><li><p><code class="inline">:no_check?</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">boolean/0</code></a>) - Whether or not authorization must pass at the strict/filter step, or if post-checks are allowed to be run The default value is <code class="inline">false</code>.</p></li><li><p><code class="inline">:on_must_pass_strict_check</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">term/0</code></a>) - Override the value returned when <code class="inline">no_check?</code> is <code class="inline">true</code> but a check must be run.</p></li><li><p><code class="inline">:atomic_changeset</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">term/0</code></a>) - A base query on which to apply an generated filters</p></li><li><p><code class="inline">:return_forbidden_error?</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">boolean/0</code></a>) - Whether or not to return a forbidden error in cases of not being authorized. The default value is <code class="inline">false</code>.</p></li><li><p><code class="inline">:log?</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">boolean/0</code></a>) - Whether or not to log the authorization result. The default value is <code class="inline">false</code>.</p></li></ul>
  </section>
</section>
<section class="detail" id="can?/3">

    <span id="can?/2"></span>

  <div class="detail-header">
    <a href="#can?/3" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">can?(action_or_query_or_changeset, actor_or_scope, opts \\ [])</h1>


        <a href="https://github.com/ash-project/ash/blob/v3.5.33/lib/ash.ex#L1682" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> can?(<a href="Ash.Can.xhtml#t:subject/0">Ash.Can.subject</a>(), <a href="#t:actor/0">actor</a>() | <a href="Ash.Scope.xhtml#t:t/0">Ash.Scope.t</a>(), <a href="https://hexdocs.pm/elixir/Keyword.html#t:t/0">Keyword.t</a>()) ::
  <a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types">boolean</a>() | <a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types">no_return</a>()</pre>

      </div>

<p>Returns whether or not the user can perform the action, or raises on errors.</p><p>Calls <a href="#can/3"><code class="inline">can/3</code></a> with a <code class="inline">maybe_is: true</code>. See <a href="#can/3"><code class="inline">can/3</code></a> for more info.</p><h2 id="can?/3-examples" class="section-heading"><a href="#can?/3-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Ash</samp><samp class="o">.</samp><samp class="n">can?</samp><samp class="p" data-group-id="3856765444-1">(</samp><samp class="p" data-group-id="3856765444-2">{</samp><samp class="nc">MyApp.Post</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:create</samp><samp class="p" data-group-id="3856765444-2">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">actor</samp><samp class="p" data-group-id="3856765444-1">)</samp><samp class="w">
</samp><samp class="no">true</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Ash</samp><samp class="o">.</samp><samp class="n">can?</samp><samp class="p" data-group-id="3856765444-3">(</samp><samp class="p" data-group-id="3856765444-4">{</samp><samp class="nc">MyApp.Post</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:read</samp><samp class="p" data-group-id="3856765444-4">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="no">nil</samp><samp class="p" data-group-id="3856765444-3">)</samp><samp class="w">
</samp><samp class="no">true</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Ash</samp><samp class="o">.</samp><samp class="n">can?</samp><samp class="p" data-group-id="3856765444-5">(</samp><samp class="p" data-group-id="3856765444-6">{</samp><samp class="n">post</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:update</samp><samp class="p" data-group-id="3856765444-6">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">actor</samp><samp class="p" data-group-id="3856765444-5">)</samp><samp class="w">
</samp><samp class="no">false</samp></code></pre><h2 id="can?/3-see-also" class="section-heading"><a href="#can?/3-see-also" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">See also</span></h2><ul><li><a href="#can/3"><code class="inline">can/3</code></a> for the non-raising version that returns detailed results</li><li><code class="inline">d:Ash.Policy.Authorizer.policies</code> for defining authorization policies</li><li><a href="actors-and-authorization.xhtml">Actors and Authorization Guide</a> for understanding authorization</li><li><a href="policies.xhtml">Policies Guide</a> for defining authorization policies</li></ul><h3 id="can?/3-options" class="section-heading"><a href="#can?/3-options" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Options</span></h3><ul><li><p><code class="inline">:maybe_is</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">term/0</code></a>) - If the actor <em>may</em> be able to perform the action, what value should be returned. The default value is <code class="inline">true</code>.</p></li><li><p><code class="inline">:filter_with</code> - If set to <code class="inline">:error</code>, the query will raise an error on a match. If set to <code class="inline">:filter</code> the query will filter out unauthorized access. Valid values are :filter, :error The default value is <code class="inline">:filter</code>.</p></li><li><p><code class="inline">:validate?</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">boolean/0</code></a>) - Whether or not to treat an invalid action as a non-allowed action. The default value is <code class="inline">false</code>.</p></li><li><p><code class="inline">:reuse_values?</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">boolean/0</code></a>) - Whether or not loaded data like aggregates, calculations and relationships should be checked in memory if possible, instead of querying. No effect if <code class="inline">pre_flight?</code> is <code class="inline">false</code>. The default value is <code class="inline">false</code>.</p></li><li><p><code class="inline">:pre_flight?</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">boolean/0</code></a>) - Whether or not this is a pre_flight check (which may perform optimized in-memory checks) or the final proper check. The default value is <code class="inline">true</code>.</p></li><li><p><code class="inline">:scope</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">term/0</code></a>) - A value that implements the <a href="Ash.Scope.ToOpts.xhtml"><code class="inline">Ash.Scope.ToOpts</code></a> protocol. Will overwrite any actor, tenant or context provided. See <a href="Ash.Context.xhtml"><code class="inline">Ash.Context</code></a> for more.</p></li><li><p><code class="inline">:run_queries?</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">boolean/0</code></a>) - Whether or not to run queries. If set to <code class="inline">true</code>, <code class="inline">:maybe</code> will not be returned. The default value is <code class="inline">true</code>.</p></li><li><p><code class="inline">:data</code> - The record or records specifically attempting to be acted upon.</p></li><li><p><code class="inline">:tenant</code> (value that implements the <a href="Ash.ToTenant.xhtml"><code class="inline">Ash.ToTenant</code></a> protocol) - The tenant to use for authorization</p></li><li><p><code class="inline">:alter_source?</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">boolean/0</code></a>) - If set to <code class="inline">true</code>, the source being authorized is returned so it can be run. The default value is <code class="inline">false</code>.</p></li><li><p><code class="inline">:base_query</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">term/0</code></a>) - A base query on which to apply an generated filters</p></li><li><p><code class="inline">:no_check?</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">boolean/0</code></a>) - Whether or not authorization must pass at the strict/filter step, or if post-checks are allowed to be run The default value is <code class="inline">false</code>.</p></li><li><p><code class="inline">:on_must_pass_strict_check</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">term/0</code></a>) - Override the value returned when <code class="inline">no_check?</code> is <code class="inline">true</code> but a check must be run.</p></li><li><p><code class="inline">:atomic_changeset</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">term/0</code></a>) - A base query on which to apply an generated filters</p></li><li><p><code class="inline">:return_forbidden_error?</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">boolean/0</code></a>) - Whether or not to return a forbidden error in cases of not being authorized. The default value is <code class="inline">false</code>.</p></li><li><p><code class="inline">:log?</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">boolean/0</code></a>) - Whether or not to log the authorization result. The default value is <code class="inline">false</code>.</p></li></ul>
  </section>
</section>
<section class="detail" id="context_to_opts/2">

    <span id="context_to_opts/1"></span>

  <div class="detail-header">
    <a href="#context_to_opts/2" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">context_to_opts(map, add_to \\ [])</h1>


        <a href="https://github.com/ash-project/ash/blob/v3.5.33/lib/ash.ex#L3918" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

    <div class="deprecated">
      This function is deprecated. Converts a context map to opts to be passed into an action.
.
    </div>

  <section class="docstring">

<p>See <a href="Ash.Context.xhtml#to_opts/2"><code class="inline">Ash.Context.to_opts/2</code></a>.</p>
  </section>
</section>
<section class="detail" id="count/2">

    <span id="count/1"></span>

  <div class="detail-header">
    <a href="#count/2" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">count(query, opts \\ [])</h1>


        <a href="https://github.com/ash-project/ash/blob/v3.5.33/lib/ash.ex#L1105" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> count(<a href="Ash.Query.xhtml#t:t/0">Ash.Query.t</a>() | <a href="Ash.Resource.xhtml#t:t/0">Ash.Resource.t</a>(), <a href="https://hexdocs.pm/elixir/Keyword.html#t:t/0">Keyword.t</a>()) ::
  {:ok, <a href="https://hexdocs.pm/elixir/typespecs.html#basic-types">non_neg_integer</a>()} | {:error, <a href="Ash.Error.xhtml#t:t/0">Ash.Error.t</a>()}</pre>

      </div>

<p>Fetches the count of results that would be returned from a given query.</p><h2 id="count/2-examples" class="section-heading"><a href="#count/2-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">MyApp.Post</samp><samp class="w"> </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Ash</samp><samp class="o">.</samp><samp class="n">count</samp><samp class="p" data-group-id="8215651650-1">(</samp><samp class="p" data-group-id="8215651650-1">)</samp><samp class="w">
</samp><samp class="p" data-group-id="8215651650-2">{</samp><samp class="ss">:ok</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">42</samp><samp class="p" data-group-id="8215651650-2">}</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">MyApp.Post</samp><samp class="w"> </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">filter</samp><samp class="p" data-group-id="8215651650-3">(</samp><samp class="ss">published</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">true</samp><samp class="p" data-group-id="8215651650-3">)</samp><samp class="w"> </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Ash</samp><samp class="o">.</samp><samp class="n">count</samp><samp class="p" data-group-id="8215651650-4">(</samp><samp class="p" data-group-id="8215651650-4">)</samp><samp class="w">
</samp><samp class="p" data-group-id="8215651650-5">{</samp><samp class="ss">:ok</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">15</samp><samp class="p" data-group-id="8215651650-5">}</samp></code></pre><h2 id="count/2-see-also" class="section-heading"><a href="#count/2-see-also" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">See also</span></h2><ul><li><a href="#count!/2"><code class="inline">count!/2</code></a> for the raising version</li><li><a href="#aggregate/3"><code class="inline">aggregate/3</code></a> for running multiple aggregates</li><li><code class="inline">d:Ash.Resource.Dsl.aggregates</code> for defining aggregates on resources</li><li><a href="read-actions.xhtml">Read Actions Guide</a> for understanding read operations</li><li><a href="aggregates.xhtml">Aggregates Guide</a> for resource-level aggregates</li></ul>
  </section>
</section>
<section class="detail" id="count!/2">

    <span id="count!/1"></span>

  <div class="detail-header">
    <a href="#count!/2" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">count!(query, opts \\ [])</h1>


        <a href="https://github.com/ash-project/ash/blob/v3.5.33/lib/ash.ex#L1074" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> count!(<a href="Ash.Query.xhtml#t:t/0">Ash.Query.t</a>() | <a href="Ash.Resource.xhtml#t:t/0">Ash.Resource.t</a>(), <a href="https://hexdocs.pm/elixir/Keyword.html#t:t/0">Keyword.t</a>()) ::
  <a href="https://hexdocs.pm/elixir/typespecs.html#basic-types">non_neg_integer</a>() | <a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types">no_return</a>()</pre>

      </div>

<p>Fetches the count of results that would be returned from a given query, or raises an error.</p><h2 id="count!/2-examples" class="section-heading"><a href="#count!/2-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">MyApp.Post</samp><samp class="w"> </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Ash</samp><samp class="o">.</samp><samp class="n">count!</samp><samp class="p" data-group-id="4068273016-1">(</samp><samp class="p" data-group-id="4068273016-1">)</samp><samp class="w">
</samp><samp class="mi">42</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">MyApp.Post</samp><samp class="w"> </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">filter</samp><samp class="p" data-group-id="4068273016-2">(</samp><samp class="ss">published</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">true</samp><samp class="p" data-group-id="4068273016-2">)</samp><samp class="w"> </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Ash</samp><samp class="o">.</samp><samp class="n">count!</samp><samp class="p" data-group-id="4068273016-3">(</samp><samp class="p" data-group-id="4068273016-3">)</samp><samp class="w">
</samp><samp class="mi">15</samp></code></pre><h2 id="count!/2-see-also" class="section-heading"><a href="#count!/2-see-also" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">See also</span></h2><ul><li><a href="#count/2"><code class="inline">count/2</code></a> for the non-raising version</li><li><a href="#aggregate!/3"><code class="inline">aggregate!/3</code></a> for running multiple aggregates</li><li><code class="inline">d:Ash.Resource.Dsl.aggregates</code> for defining aggregates on resources</li><li><a href="read-actions.xhtml">Read Actions Guide</a> for understanding read operations</li><li><a href="aggregates.xhtml">Aggregates Guide</a> for resource-level aggregates</li></ul>
  </section>
</section>
<section class="detail" id="create/3">

    <span id="create/1"></span>

    <span id="create/2"></span>

  <div class="detail-header">
    <a href="#create/3" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">create(changeset_or_resource, params_or_opts \\ %{}, opts \\ [])</h1>


        <a href="https://github.com/ash-project/ash/blob/v3.5.33/lib/ash.ex#L3102" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> create(
  changeset_or_resource :: <a href="Ash.Changeset.xhtml#t:t/0">Ash.Changeset.t</a>() | <a href="Ash.Resource.xhtml#t:t/0">Ash.Resource.t</a>(),
  params_or_opts :: <a href="https://hexdocs.pm/elixir/typespecs.html#basic-types">map</a>() | <a href="https://hexdocs.pm/elixir/Keyword.html#t:t/0">Keyword.t</a>(),
  opts :: <a href="https://hexdocs.pm/elixir/Keyword.html#t:t/0">Keyword.t</a>()
) ::
  {:ok, <a href="Ash.Resource.xhtml#t:record/0">Ash.Resource.record</a>()}
  | {:ok, <a href="Ash.Resource.xhtml#t:record/0">Ash.Resource.record</a>(), [<a href="Ash.Notifier.Notification.xhtml#t:t/0">Ash.Notifier.Notification.t</a>()]}
  | {:error, <a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types">term</a>()}</pre>

      </div>

<p>Create a record.</p><h2 id="create/3-examples" class="section-heading"><a href="#create/3-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Ash</samp><samp class="o">.</samp><samp class="n">create</samp><samp class="p" data-group-id="3244735962-1">(</samp><samp class="nc">MyApp.Post</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="3244735962-2">%{</samp><samp class="ss">title</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;Hello World&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">content</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;...&quot;</samp><samp class="p" data-group-id="3244735962-2">}</samp><samp class="p" data-group-id="3244735962-1">)</samp><samp class="w">
</samp><samp class="p" data-group-id="3244735962-3">{</samp><samp class="ss">:ok</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="3244735962-4">%</samp><samp class="nc" data-group-id="3244735962-4">MyApp.Post</samp><samp class="p" data-group-id="3244735962-4">{</samp><samp class="ss">id</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">1</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">title</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;Hello World&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">content</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;...&quot;</samp><samp class="p" data-group-id="3244735962-4">}</samp><samp class="p" data-group-id="3244735962-3">}</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="n">changeset</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="nc">Ash.Changeset</samp><samp class="o">.</samp><samp class="n">for_create</samp><samp class="p" data-group-id="3244735962-5">(</samp><samp class="nc">MyApp.User</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:create</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="3244735962-6">%{</samp><samp class="ss">name</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;John&quot;</samp><samp class="p" data-group-id="3244735962-6">}</samp><samp class="p" data-group-id="3244735962-5">)</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Ash</samp><samp class="o">.</samp><samp class="n">create</samp><samp class="p" data-group-id="3244735962-7">(</samp><samp class="n">changeset</samp><samp class="p" data-group-id="3244735962-7">)</samp><samp class="w">
</samp><samp class="p" data-group-id="3244735962-8">{</samp><samp class="ss">:ok</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="3244735962-9">%</samp><samp class="nc" data-group-id="3244735962-9">MyApp.User</samp><samp class="p" data-group-id="3244735962-9">{</samp><samp class="ss">id</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">1</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">name</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;John&quot;</samp><samp class="p" data-group-id="3244735962-9">}</samp><samp class="p" data-group-id="3244735962-8">}</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Ash</samp><samp class="o">.</samp><samp class="n">create</samp><samp class="p" data-group-id="3244735962-10">(</samp><samp class="nc">MyApp.Post</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="3244735962-11">%{</samp><samp class="ss">title</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;New Post&quot;</samp><samp class="p" data-group-id="3244735962-11">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">return_notifications?</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">true</samp><samp class="p" data-group-id="3244735962-10">)</samp><samp class="w">
</samp><samp class="p" data-group-id="3244735962-12">{</samp><samp class="ss">:ok</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="3244735962-13">%</samp><samp class="nc" data-group-id="3244735962-13">MyApp.Post</samp><samp class="p" data-group-id="3244735962-13">{</samp><samp class="ss">id</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">2</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">title</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;New Post&quot;</samp><samp class="p" data-group-id="3244735962-13">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="3244735962-14">[</samp><samp class="p" data-group-id="3244735962-15">%</samp><samp class="nc" data-group-id="3244735962-15">Ash.Notifier.Notification</samp><samp class="p" data-group-id="3244735962-15">{</samp><samp class="p" data-group-id="3244735962-15">}</samp><samp class="p" data-group-id="3244735962-14">]</samp><samp class="p" data-group-id="3244735962-12">}</samp></code></pre><h2 id="create/3-see-also" class="section-heading"><a href="#create/3-see-also" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">See also</span></h2><ul><li><a href="#create!/3"><code class="inline">create!/3</code></a> for the raising version</li><li><code class="inline">d:Ash.Resource.Dsl.actions.create</code> for defining create actions</li><li><code class="inline">d:Ash.Resource.Dsl.attributes</code> for defining attributes</li><li><a href="create-actions.xhtml">Create Actions Guide</a> for understanding create operations</li><li><a href="actions.xhtml">Actions Guide</a> for general action concepts</li></ul><h2 id="create/3-options" class="section-heading"><a href="#create/3-options" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Options</span></h2><ul><li><p><code class="inline">:upsert?</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">boolean/0</code></a>) - If a conflict is found based on the primary key, the record is updated in the database (requires upsert support) The default value is <code class="inline">false</code>.</p></li><li><p><code class="inline">:return_skipped_upsert?</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">boolean/0</code></a>) - If <code class="inline">true</code>, and a record was <em>not</em> upserted because its filter prevented the upsert, the original record (which was <em>not</em> upserted) will be returned. The default value is <code class="inline">false</code>.</p></li><li><p><code class="inline">:upsert_identity</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#basic-types"><code class="inline">atom/0</code></a>) - The identity to use when detecting conflicts for <code class="inline">upsert?</code>, e.g. <code class="inline">upsert_identity: :full_name</code>. By default, the primary key is used. Has no effect if <code class="inline">upsert?: true</code> is not provided</p></li><li><p><code class="inline">:upsert_fields</code> - The fields to upsert. If not set, the action's upsert_fields is used, and if that is not set, then any fields not being set to defaults are written.</p></li><li><p><code class="inline">:upsert_condition</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">term/0</code></a>) - An expression to check if the record should be updated when there's a conflict.</p></li><li><p><code class="inline">:domain</code> (<a href="Ash.Domain.xhtml"><code class="inline">Ash.Domain</code></a>) - The domain to use.</p></li><li><p><code class="inline">:timeout</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">timeout/0</code></a>) - A positive integer, or <code class="inline">:infinity</code>. If none is provided, the timeout configured on the domain is used.</p></li><li><p><code class="inline">:tracer</code> (one or a list of module that adopts <a href="Ash.Tracer.xhtml"><code class="inline">Ash.Tracer</code></a>) - A tracer that implements the <a href="Ash.Tracer.xhtml"><code class="inline">Ash.Tracer</code></a> behaviour. See that module for more.</p></li><li><p><code class="inline">:action</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">term/0</code></a>) - The action to use, either an Action struct or the name of the action</p></li><li><p><code class="inline">:authorize?</code> - If an actor option is provided (even if it is <code class="inline">nil</code>), authorization happens automatically. If not, this flag can be used to authorize with no user.</p></li><li><p><code class="inline">:context</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#basic-types"><code class="inline">map/0</code></a>) - Context to set on the query, changeset, or input</p></li><li><p><code class="inline">:tenant</code> (value that implements the <a href="Ash.ToTenant.xhtml"><code class="inline">Ash.ToTenant</code></a> protocol) - A tenant to set on the query or changeset</p></li><li><p><code class="inline">:actor</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">term/0</code></a>) - If an actor is provided, it will be used in conjunction with the authorizers of a resource to authorize access</p></li><li><p><code class="inline">:scope</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">term/0</code></a>) - A value that implements the <a href="Ash.Scope.ToOpts.xhtml"><code class="inline">Ash.Scope.ToOpts</code></a> protocol, for passing around actor/tenant/context in a single value. See <a href="Ash.Scope.ToOpts.xhtml"><code class="inline">Ash.Scope.ToOpts</code></a> for more.</p></li><li><p><code class="inline">:return_notifications?</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">boolean/0</code></a>) - Use this if you're running ash actions in your own transaction and you want to manually handle sending notifications.<br/>If a transaction is ongoing, and this is false, notifications will be discarded, otherwise
the return value is <code class="inline">{:ok, result, notifications}</code> (or <code class="inline">{:ok, notifications}</code>)<br/>To send notifications later, use <code class="inline">Ash.Notifier.notify(notifications)</code>. It sends any notifications
that can be sent, and returns the rest. The default value is <code class="inline">false</code>.</p></li><li><p><code class="inline">:rollback_on_error?</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">boolean/0</code></a>) - Whether or not to rollback the transaction on error, if the resource is in a transaction.<br/>If the action has <code class="inline">transaction? false</code> this option has no effect. If an error is returned from the
data layer and the resource is in a transaction, the transaction is always rolled back, regardless. The default value is <code class="inline">true</code>.</p></li><li><p><code class="inline">:notification_metadata</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">term/0</code></a>) - Metadata to be merged into the metadata field for all notifications sent from this operation. The default value is <code class="inline">%{}</code>.</p></li><li><p><code class="inline">:skip_unknown_inputs</code> - A list of inputs that, if provided, will be ignored if they are not recognized by the action. Use <code class="inline">:*</code> to indicate all unknown keys.</p></li><li><p><code class="inline">:load</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">term/0</code></a>) - A load statement to add onto the changeset</p></li></ul>
  </section>
</section>
<section class="detail" id="create!/3">

    <span id="create!/1"></span>

    <span id="create!/2"></span>

  <div class="detail-header">
    <a href="#create!/3" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">create!(changeset_or_resource, params \\ %{}, opts \\ [])</h1>


        <a href="https://github.com/ash-project/ash/blob/v3.5.33/lib/ash.ex#L3053" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> create!(
  changeset_or_resource :: <a href="Ash.Changeset.xhtml#t:t/0">Ash.Changeset.t</a>() | <a href="Ash.Resource.xhtml#t:t/0">Ash.Resource.t</a>(),
  params_or_opts :: <a href="https://hexdocs.pm/elixir/typespecs.html#basic-types">map</a>() | <a href="https://hexdocs.pm/elixir/Keyword.html#t:t/0">Keyword.t</a>(),
  opts :: <a href="https://hexdocs.pm/elixir/Keyword.html#t:t/0">Keyword.t</a>()
) ::
  <a href="Ash.Resource.xhtml#t:record/0">Ash.Resource.record</a>()
  | {<a href="Ash.Resource.xhtml#t:record/0">Ash.Resource.record</a>(), [<a href="Ash.Notifier.Notification.xhtml#t:t/0">Ash.Notifier.Notification.t</a>()]}
  | <a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types">no_return</a>()</pre>

      </div>

<p>Create a record. See <a href="#create/2"><code class="inline">create/2</code></a> for more information.</p><h2 id="create!/3-examples" class="section-heading"><a href="#create!/3-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Ash</samp><samp class="o">.</samp><samp class="n">create!</samp><samp class="p" data-group-id="0985078062-1">(</samp><samp class="nc">MyApp.Post</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="0985078062-2">%{</samp><samp class="ss">title</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;Hello World&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">content</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;...&quot;</samp><samp class="p" data-group-id="0985078062-2">}</samp><samp class="p" data-group-id="0985078062-1">)</samp><samp class="w">
</samp><samp class="p" data-group-id="0985078062-3">%</samp><samp class="nc" data-group-id="0985078062-3">MyApp.Post</samp><samp class="p" data-group-id="0985078062-3">{</samp><samp class="ss">id</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">1</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">title</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;Hello World&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">content</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;...&quot;</samp><samp class="p" data-group-id="0985078062-3">}</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="n">changeset</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="nc">Ash.Changeset</samp><samp class="o">.</samp><samp class="n">for_create</samp><samp class="p" data-group-id="0985078062-4">(</samp><samp class="nc">MyApp.User</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:create</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="0985078062-5">%{</samp><samp class="ss">name</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;John&quot;</samp><samp class="p" data-group-id="0985078062-5">}</samp><samp class="p" data-group-id="0985078062-4">)</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Ash</samp><samp class="o">.</samp><samp class="n">create!</samp><samp class="p" data-group-id="0985078062-6">(</samp><samp class="n">changeset</samp><samp class="p" data-group-id="0985078062-6">)</samp><samp class="w">
</samp><samp class="p" data-group-id="0985078062-7">%</samp><samp class="nc" data-group-id="0985078062-7">MyApp.User</samp><samp class="p" data-group-id="0985078062-7">{</samp><samp class="ss">id</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">1</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">name</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;John&quot;</samp><samp class="p" data-group-id="0985078062-7">}</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Ash</samp><samp class="o">.</samp><samp class="n">create!</samp><samp class="p" data-group-id="0985078062-8">(</samp><samp class="nc">MyApp.Post</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="0985078062-9">%{</samp><samp class="ss">title</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;New Post&quot;</samp><samp class="p" data-group-id="0985078062-9">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">return_notifications?</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">true</samp><samp class="p" data-group-id="0985078062-8">)</samp><samp class="w">
</samp><samp class="p" data-group-id="0985078062-10">{</samp><samp class="p" data-group-id="0985078062-11">%</samp><samp class="nc" data-group-id="0985078062-11">MyApp.Post</samp><samp class="p" data-group-id="0985078062-11">{</samp><samp class="ss">id</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">2</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">title</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;New Post&quot;</samp><samp class="p" data-group-id="0985078062-11">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="0985078062-12">[</samp><samp class="p" data-group-id="0985078062-13">%</samp><samp class="nc" data-group-id="0985078062-13">Ash.Notifier.Notification</samp><samp class="p" data-group-id="0985078062-13">{</samp><samp class="p" data-group-id="0985078062-13">}</samp><samp class="p" data-group-id="0985078062-12">]</samp><samp class="p" data-group-id="0985078062-10">}</samp></code></pre><h2 id="create!/3-see-also" class="section-heading"><a href="#create!/3-see-also" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">See also</span></h2><ul><li><a href="#create/3"><code class="inline">create/3</code></a> for the non-raising version</li><li><a href="create-actions.xhtml">Create Actions Guide</a> for understanding create operations</li><li><a href="actions.xhtml">Actions Guide</a> for general action concepts</li></ul>
  </section>
</section>
<section class="detail" id="data_layer_query/2">

    <span id="data_layer_query/1"></span>

  <div class="detail-header">
    <a href="#data_layer_query/2" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">data_layer_query(query, opts \\ [])</h1>


        <a href="https://github.com/ash-project/ash/blob/v3.5.33/lib/ash.ex#L2651" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> data_layer_query(<a href="Ash.Query.xhtml#t:t/0">Ash.Query.t</a>(), opts :: <a href="https://hexdocs.pm/elixir/Keyword.html#t:t/0">Keyword.t</a>()) ::
  {:ok, <a href="#t:data_layer_query/0">data_layer_query</a>()} | {:error, <a href="Ash.Error.xhtml#t:t/0">Ash.Error.t</a>()}</pre>

      </div>

<p>Gets the full query and any runtime calculations that would be loaded</p><h2 id="data_layer_query/2-examples" class="section-heading"><a href="#data_layer_query/2-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="n">query</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="nc">MyApp.Post</samp><samp class="w"> </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">filter</samp><samp class="p" data-group-id="9692125734-1">(</samp><samp class="ss">published</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">true</samp><samp class="p" data-group-id="9692125734-1">)</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Ash</samp><samp class="o">.</samp><samp class="n">data_layer_query</samp><samp class="p" data-group-id="9692125734-2">(</samp><samp class="n">query</samp><samp class="p" data-group-id="9692125734-2">)</samp><samp class="w">
</samp><samp class="p" data-group-id="9692125734-3">{</samp><samp class="ss">:ok</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="9692125734-4">%{</samp><samp class="ss">query</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="9692125734-5">#</samp><samp class="nc" data-group-id="9692125734-5">Ecto.Query</samp><samp class="p" data-group-id="9692125734-5">&lt;</samp><samp class="n">...</samp><samp class="p" data-group-id="9692125734-5">&gt;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">ash_query</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="9692125734-6">%</samp><samp class="nc" data-group-id="9692125734-6">Ash.Query</samp><samp class="p" data-group-id="9692125734-6">{</samp><samp class="p" data-group-id="9692125734-6">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">count</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="9692125734-7">#</samp><samp class="nc" data-group-id="9692125734-7">Function</samp><samp class="p" data-group-id="9692125734-7">&lt;</samp><samp class="n">...</samp><samp class="p" data-group-id="9692125734-7">&gt;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">run</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="9692125734-8">#</samp><samp class="nc" data-group-id="9692125734-8">Function</samp><samp class="p" data-group-id="9692125734-8">&lt;</samp><samp class="n">...</samp><samp class="p" data-group-id="9692125734-8">&gt;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">load</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="9692125734-9">#</samp><samp class="nc" data-group-id="9692125734-9">Function</samp><samp class="p" data-group-id="9692125734-9">&lt;</samp><samp class="n">...</samp><samp class="p" data-group-id="9692125734-9">&gt;</samp><samp class="p" data-group-id="9692125734-4">}</samp><samp class="p" data-group-id="9692125734-3">}</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">MyApp.Post</samp><samp class="w"> </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">limit</samp><samp class="p" data-group-id="9692125734-10">(</samp><samp class="mi">10</samp><samp class="p" data-group-id="9692125734-10">)</samp><samp class="w"> </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Ash</samp><samp class="o">.</samp><samp class="n">data_layer_query</samp><samp class="p" data-group-id="9692125734-11">(</samp><samp class="p" data-group-id="9692125734-11">)</samp><samp class="w">
</samp><samp class="p" data-group-id="9692125734-12">{</samp><samp class="ss">:ok</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="9692125734-13">%{</samp><samp class="ss">query</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="9692125734-14">#</samp><samp class="nc" data-group-id="9692125734-14">Ecto.Query</samp><samp class="p" data-group-id="9692125734-14">&lt;</samp><samp class="n">...</samp><samp class="p" data-group-id="9692125734-14">&gt;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">...</samp><samp class="p" data-group-id="9692125734-13">}</samp><samp class="p" data-group-id="9692125734-12">}</samp></code></pre><h2 id="data_layer_query/2-see-also" class="section-heading"><a href="#data_layer_query/2-see-also" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">See also</span></h2><ul><li><a href="#data_layer_query!/2"><code class="inline">data_layer_query!/2</code></a> for the raising version</li></ul>
  </section>
</section>
<section class="detail" id="data_layer_query!/2">

    <span id="data_layer_query!/1"></span>

  <div class="detail-header">
    <a href="#data_layer_query!/2" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">data_layer_query!(query, opts \\ [])</h1>


        <a href="https://github.com/ash-project/ash/blob/v3.5.33/lib/ash.ex#L2673" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

<p>Gets the full query and any runtime calculations that would be loaded, raising any errors.</p><h2 id="data_layer_query!/2-examples" class="section-heading"><a href="#data_layer_query!/2-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="n">query</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="nc">MyApp.Post</samp><samp class="w"> </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">filter</samp><samp class="p" data-group-id="5360842020-1">(</samp><samp class="ss">published</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">true</samp><samp class="p" data-group-id="5360842020-1">)</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Ash</samp><samp class="o">.</samp><samp class="n">data_layer_query!</samp><samp class="p" data-group-id="5360842020-2">(</samp><samp class="n">query</samp><samp class="p" data-group-id="5360842020-2">)</samp><samp class="w">
</samp><samp class="p" data-group-id="5360842020-3">%{</samp><samp class="ss">query</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="5360842020-4">#</samp><samp class="nc" data-group-id="5360842020-4">Ecto.Query</samp><samp class="p" data-group-id="5360842020-4">&lt;</samp><samp class="n">...</samp><samp class="p" data-group-id="5360842020-4">&gt;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">ash_query</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="5360842020-5">%</samp><samp class="nc" data-group-id="5360842020-5">Ash.Query</samp><samp class="p" data-group-id="5360842020-5">{</samp><samp class="p" data-group-id="5360842020-5">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">count</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="5360842020-6">#</samp><samp class="nc" data-group-id="5360842020-6">Function</samp><samp class="p" data-group-id="5360842020-6">&lt;</samp><samp class="n">...</samp><samp class="p" data-group-id="5360842020-6">&gt;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">run</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="5360842020-7">#</samp><samp class="nc" data-group-id="5360842020-7">Function</samp><samp class="p" data-group-id="5360842020-7">&lt;</samp><samp class="n">...</samp><samp class="p" data-group-id="5360842020-7">&gt;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">load</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="5360842020-8">#</samp><samp class="nc" data-group-id="5360842020-8">Function</samp><samp class="p" data-group-id="5360842020-8">&lt;</samp><samp class="n">...</samp><samp class="p" data-group-id="5360842020-8">&gt;</samp><samp class="p" data-group-id="5360842020-3">}</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">MyApp.Post</samp><samp class="w"> </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">limit</samp><samp class="p" data-group-id="5360842020-9">(</samp><samp class="mi">10</samp><samp class="p" data-group-id="5360842020-9">)</samp><samp class="w"> </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Ash</samp><samp class="o">.</samp><samp class="n">data_layer_query!</samp><samp class="p" data-group-id="5360842020-10">(</samp><samp class="p" data-group-id="5360842020-10">)</samp><samp class="w">
</samp><samp class="p" data-group-id="5360842020-11">%{</samp><samp class="ss">query</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="5360842020-12">#</samp><samp class="nc" data-group-id="5360842020-12">Ecto.Query</samp><samp class="p" data-group-id="5360842020-12">&lt;</samp><samp class="n">...</samp><samp class="p" data-group-id="5360842020-12">&gt;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">...</samp><samp class="p" data-group-id="5360842020-11">}</samp></code></pre><h2 id="data_layer_query!/2-see-also" class="section-heading"><a href="#data_layer_query!/2-see-also" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">See also</span></h2><ul><li><a href="#data_layer_query/2"><code class="inline">data_layer_query/2</code></a> for the non-raising version</li></ul><p>See <a href="#data_layer_query/2"><code class="inline">data_layer_query/2</code></a> for more.</p>
  </section>
</section>
<section class="detail" id="destroy/2">

    <span id="destroy/1"></span>

  <div class="detail-header">
    <a href="#destroy/2" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">destroy(changeset_or_record, opts \\ [])</h1>


        <a href="https://github.com/ash-project/ash/blob/v3.5.33/lib/ash.ex#L3753" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> destroy(<a href="Ash.Changeset.xhtml#t:t/0">Ash.Changeset.t</a>() | <a href="Ash.Resource.xhtml#t:record/0">Ash.Resource.record</a>(), opts :: <a href="https://hexdocs.pm/elixir/Keyword.html#t:t/0">Keyword.t</a>()) ::
  :ok
  | {:ok, <a href="Ash.Resource.xhtml#t:record/0">Ash.Resource.record</a>()}
  | {:ok, [<a href="Ash.Notifier.Notification.xhtml#t:t/0">Ash.Notifier.Notification.t</a>()]}
  | {:ok, <a href="Ash.Resource.xhtml#t:record/0">Ash.Resource.record</a>(), [<a href="Ash.Notifier.Notification.xhtml#t:t/0">Ash.Notifier.Notification.t</a>()]}
  | {:error, <a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types">term</a>()}</pre>

      </div>

<p>Destroy a record.</p><h2 id="destroy/2-examples" class="section-heading"><a href="#destroy/2-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Ash</samp><samp class="o">.</samp><samp class="n">destroy</samp><samp class="p" data-group-id="8050232679-1">(</samp><samp class="n">post</samp><samp class="p" data-group-id="8050232679-1">)</samp><samp class="w">
</samp><samp class="ss">:ok</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="n">changeset</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="nc">Ash.Changeset</samp><samp class="o">.</samp><samp class="n">for_destroy</samp><samp class="p" data-group-id="8050232679-2">(</samp><samp class="n">user</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:archive</samp><samp class="p" data-group-id="8050232679-2">)</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Ash</samp><samp class="o">.</samp><samp class="n">destroy</samp><samp class="p" data-group-id="8050232679-3">(</samp><samp class="n">changeset</samp><samp class="p" data-group-id="8050232679-3">)</samp><samp class="w">
</samp><samp class="p" data-group-id="8050232679-4">{</samp><samp class="ss">:ok</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:ok</samp><samp class="p" data-group-id="8050232679-4">}</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Ash</samp><samp class="o">.</samp><samp class="n">destroy</samp><samp class="p" data-group-id="8050232679-5">(</samp><samp class="n">post</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">return_destroyed?</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">true</samp><samp class="p" data-group-id="8050232679-5">)</samp><samp class="w">
</samp><samp class="p" data-group-id="8050232679-6">{</samp><samp class="ss">:ok</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="8050232679-7">%</samp><samp class="nc" data-group-id="8050232679-7">MyApp.Post</samp><samp class="p" data-group-id="8050232679-7">{</samp><samp class="ss">id</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">1</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">title</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;Deleted Post&quot;</samp><samp class="p" data-group-id="8050232679-7">}</samp><samp class="p" data-group-id="8050232679-6">}</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Ash</samp><samp class="o">.</samp><samp class="n">destroy</samp><samp class="p" data-group-id="8050232679-8">(</samp><samp class="n">user</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">return_notifications?</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">true</samp><samp class="p" data-group-id="8050232679-8">)</samp><samp class="w">
</samp><samp class="p" data-group-id="8050232679-9">{</samp><samp class="ss">:ok</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="8050232679-10">[</samp><samp class="p" data-group-id="8050232679-11">%</samp><samp class="nc" data-group-id="8050232679-11">Ash.Notifier.Notification</samp><samp class="p" data-group-id="8050232679-11">{</samp><samp class="p" data-group-id="8050232679-11">}</samp><samp class="p" data-group-id="8050232679-10">]</samp><samp class="p" data-group-id="8050232679-9">}</samp></code></pre><h2 id="destroy/2-see-also" class="section-heading"><a href="#destroy/2-see-also" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">See also</span></h2><ul><li><a href="#destroy!/2"><code class="inline">destroy!/2</code></a> for the raising version</li><li><code class="inline">d:Ash.Resource.Dsl.actions.destroy</code> for defining destroy actions</li><li><a href="destroy-actions.xhtml">Destroy Actions Guide</a> for understanding destroy operations</li><li><a href="actions.xhtml">Actions Guide</a> for general action concepts</li></ul><h2 id="destroy/2-options" class="section-heading"><a href="#destroy/2-options" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Options</span></h2><ul><li><p><code class="inline">:return_destroyed?</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">boolean/0</code></a>) - If true, the destroyed record is included in the return result, e.g <code class="inline">{:ok, destroyed}</code> or <code class="inline">{:ok, destroyed, notifications}</code> The default value is <code class="inline">false</code>.</p></li><li><p><code class="inline">:domain</code> (<a href="Ash.Domain.xhtml"><code class="inline">Ash.Domain</code></a>) - The domain to use.</p></li><li><p><code class="inline">:timeout</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">timeout/0</code></a>) - A positive integer, or <code class="inline">:infinity</code>. If none is provided, the timeout configured on the domain is used.</p></li><li><p><code class="inline">:tracer</code> (one or a list of module that adopts <a href="Ash.Tracer.xhtml"><code class="inline">Ash.Tracer</code></a>) - A tracer that implements the <a href="Ash.Tracer.xhtml"><code class="inline">Ash.Tracer</code></a> behaviour. See that module for more.</p></li><li><p><code class="inline">:action</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">term/0</code></a>) - The action to use, either an Action struct or the name of the action</p></li><li><p><code class="inline">:authorize?</code> - If an actor option is provided (even if it is <code class="inline">nil</code>), authorization happens automatically. If not, this flag can be used to authorize with no user.</p></li><li><p><code class="inline">:context</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#basic-types"><code class="inline">map/0</code></a>) - Context to set on the query, changeset, or input</p></li><li><p><code class="inline">:tenant</code> (value that implements the <a href="Ash.ToTenant.xhtml"><code class="inline">Ash.ToTenant</code></a> protocol) - A tenant to set on the query or changeset</p></li><li><p><code class="inline">:actor</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">term/0</code></a>) - If an actor is provided, it will be used in conjunction with the authorizers of a resource to authorize access</p></li><li><p><code class="inline">:scope</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">term/0</code></a>) - A value that implements the <a href="Ash.Scope.ToOpts.xhtml"><code class="inline">Ash.Scope.ToOpts</code></a> protocol, for passing around actor/tenant/context in a single value. See <a href="Ash.Scope.ToOpts.xhtml"><code class="inline">Ash.Scope.ToOpts</code></a> for more.</p></li><li><p><code class="inline">:return_notifications?</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">boolean/0</code></a>) - Use this if you're running ash actions in your own transaction and you want to manually handle sending notifications.<br/>If a transaction is ongoing, and this is false, notifications will be discarded, otherwise
the return value is <code class="inline">{:ok, result, notifications}</code> (or <code class="inline">{:ok, notifications}</code>)<br/>To send notifications later, use <code class="inline">Ash.Notifier.notify(notifications)</code>. It sends any notifications
that can be sent, and returns the rest. The default value is <code class="inline">false</code>.</p></li><li><p><code class="inline">:rollback_on_error?</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">boolean/0</code></a>) - Whether or not to rollback the transaction on error, if the resource is in a transaction.<br/>If the action has <code class="inline">transaction? false</code> this option has no effect. If an error is returned from the
data layer and the resource is in a transaction, the transaction is always rolled back, regardless. The default value is <code class="inline">true</code>.</p></li><li><p><code class="inline">:notification_metadata</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">term/0</code></a>) - Metadata to be merged into the metadata field for all notifications sent from this operation. The default value is <code class="inline">%{}</code>.</p></li><li><p><code class="inline">:skip_unknown_inputs</code> - A list of inputs that, if provided, will be ignored if they are not recognized by the action. Use <code class="inline">:*</code> to indicate all unknown keys.</p></li><li><p><code class="inline">:load</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">term/0</code></a>) - A load statement to add onto the changeset</p></li></ul>
  </section>
</section>
<section class="detail" id="destroy!/2">

    <span id="destroy!/1"></span>

  <div class="detail-header">
    <a href="#destroy!/2" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">destroy!(changeset_or_record, opts \\ [])</h1>


        <a href="https://github.com/ash-project/ash/blob/v3.5.33/lib/ash.ex#L3700" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> destroy!(<a href="Ash.Changeset.xhtml#t:t/0">Ash.Changeset.t</a>() | <a href="Ash.Resource.xhtml#t:record/0">Ash.Resource.record</a>(), opts :: <a href="https://hexdocs.pm/elixir/Keyword.html#t:t/0">Keyword.t</a>()) ::
  :ok
  | <a href="Ash.Resource.xhtml#t:record/0">Ash.Resource.record</a>()
  | [<a href="Ash.Notifier.Notification.xhtml#t:t/0">Ash.Notifier.Notification.t</a>()]
  | {<a href="Ash.Resource.xhtml#t:record/0">Ash.Resource.record</a>(), [<a href="Ash.Notifier.Notification.xhtml#t:t/0">Ash.Notifier.Notification.t</a>()]}
  | <a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types">no_return</a>()</pre>

      </div>

<p>Destroy a record. See <a href="#destroy/2"><code class="inline">destroy/2</code></a> for more information.</p><h2 id="destroy!/2-examples" class="section-heading"><a href="#destroy!/2-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Ash</samp><samp class="o">.</samp><samp class="n">destroy!</samp><samp class="p" data-group-id="8971280750-1">(</samp><samp class="n">post</samp><samp class="p" data-group-id="8971280750-1">)</samp><samp class="w">
</samp><samp class="ss">:ok</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="n">changeset</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="nc">Ash.Changeset</samp><samp class="o">.</samp><samp class="n">for_destroy</samp><samp class="p" data-group-id="8971280750-2">(</samp><samp class="n">user</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:archive</samp><samp class="p" data-group-id="8971280750-2">)</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Ash</samp><samp class="o">.</samp><samp class="n">destroy!</samp><samp class="p" data-group-id="8971280750-3">(</samp><samp class="n">changeset</samp><samp class="p" data-group-id="8971280750-3">)</samp><samp class="w">
</samp><samp class="ss">:ok</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Ash</samp><samp class="o">.</samp><samp class="n">destroy!</samp><samp class="p" data-group-id="8971280750-4">(</samp><samp class="n">post</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">return_destroyed?</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">true</samp><samp class="p" data-group-id="8971280750-4">)</samp><samp class="w">
</samp><samp class="p" data-group-id="8971280750-5">%</samp><samp class="nc" data-group-id="8971280750-5">MyApp.Post</samp><samp class="p" data-group-id="8971280750-5">{</samp><samp class="ss">id</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">1</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">title</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;Deleted Post&quot;</samp><samp class="p" data-group-id="8971280750-5">}</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Ash</samp><samp class="o">.</samp><samp class="n">destroy!</samp><samp class="p" data-group-id="8971280750-6">(</samp><samp class="n">user</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">return_notifications?</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">true</samp><samp class="p" data-group-id="8971280750-6">)</samp><samp class="w">
</samp><samp class="p" data-group-id="8971280750-7">[</samp><samp class="p" data-group-id="8971280750-8">%</samp><samp class="nc" data-group-id="8971280750-8">Ash.Notifier.Notification</samp><samp class="p" data-group-id="8971280750-8">{</samp><samp class="p" data-group-id="8971280750-8">}</samp><samp class="p" data-group-id="8971280750-7">]</samp></code></pre><h2 id="destroy!/2-see-also" class="section-heading"><a href="#destroy!/2-see-also" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">See also</span></h2><ul><li><a href="#destroy/2"><code class="inline">destroy/2</code></a> for the non-raising version</li><li><code class="inline">d:Ash.Resource.Dsl.actions.destroy</code> for defining destroy actions</li><li><a href="destroy-actions.xhtml">Destroy Actions Guide</a> for understanding destroy operations</li><li><a href="actions.xhtml">Actions Guide</a> for general action concepts</li></ul>
  </section>
</section>
<section class="detail" id="exists/2">

    <span id="exists/1"></span>

  <div class="detail-header">
    <a href="#exists/2" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">exists(query, opts \\ [])</h1>


        <a href="https://github.com/ash-project/ash/blob/v3.5.33/lib/ash.ex#L1171" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> exists(<a href="Ash.Query.xhtml#t:t/0">Ash.Query.t</a>() | <a href="Ash.Resource.xhtml#t:t/0">Ash.Resource.t</a>(), <a href="https://hexdocs.pm/elixir/Keyword.html#t:t/0">Keyword.t</a>()) ::
  {:ok, <a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types">boolean</a>()} | {:error, <a href="Ash.Error.xhtml#t:t/0">Ash.Error.t</a>()}</pre>

      </div>

<p>Returns whether or not the query would return any results.</p><h2 id="exists/2-examples" class="section-heading"><a href="#exists/2-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">MyApp.Post</samp><samp class="w"> </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Ash</samp><samp class="o">.</samp><samp class="n">exists</samp><samp class="p" data-group-id="6327859607-1">(</samp><samp class="p" data-group-id="6327859607-1">)</samp><samp class="w">
</samp><samp class="p" data-group-id="6327859607-2">{</samp><samp class="ss">:ok</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="no">true</samp><samp class="p" data-group-id="6327859607-2">}</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">MyApp.Post</samp><samp class="w"> </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">filter</samp><samp class="p" data-group-id="6327859607-3">(</samp><samp class="ss">published</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">false</samp><samp class="p" data-group-id="6327859607-3">)</samp><samp class="w"> </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Ash</samp><samp class="o">.</samp><samp class="n">exists</samp><samp class="p" data-group-id="6327859607-4">(</samp><samp class="p" data-group-id="6327859607-4">)</samp><samp class="w">
</samp><samp class="p" data-group-id="6327859607-5">{</samp><samp class="ss">:ok</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="no">false</samp><samp class="p" data-group-id="6327859607-5">}</samp></code></pre><h2 id="exists/2-see-also" class="section-heading"><a href="#exists/2-see-also" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">See also</span></h2><ul><li><a href="#exists?/2"><code class="inline">exists?/2</code></a> for the raising version</li><li><a href="#count/2"><code class="inline">count/2</code></a> for getting the actual count</li><li><code class="inline">d:Ash.Resource.Dsl.aggregates</code> for defining aggregates on resources</li><li><a href="read-actions.xhtml">Read Actions Guide</a> for understanding read operations</li></ul>
  </section>
</section>
<section class="detail" id="exists?/2">

    <span id="exists?/1"></span>

  <div class="detail-header">
    <a href="#exists?/2" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">exists?(query, opts \\ [])</h1>


        <a href="https://github.com/ash-project/ash/blob/v3.5.33/lib/ash.ex#L1141" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> exists?(<a href="Ash.Query.xhtml#t:t/0">Ash.Query.t</a>() | <a href="Ash.Resource.xhtml#t:t/0">Ash.Resource.t</a>(), <a href="https://hexdocs.pm/elixir/Keyword.html#t:t/0">Keyword.t</a>()) ::
  <a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types">boolean</a>() | <a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types">no_return</a>()</pre>

      </div>

<p>Returns whether or not the query would return any results, or raises an error.</p><h2 id="exists?/2-examples" class="section-heading"><a href="#exists?/2-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">MyApp.Post</samp><samp class="w"> </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Ash</samp><samp class="o">.</samp><samp class="n">exists?</samp><samp class="p" data-group-id="5556198383-1">(</samp><samp class="p" data-group-id="5556198383-1">)</samp><samp class="w">
</samp><samp class="no">true</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">MyApp.Post</samp><samp class="w"> </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">filter</samp><samp class="p" data-group-id="5556198383-2">(</samp><samp class="ss">published</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">false</samp><samp class="p" data-group-id="5556198383-2">)</samp><samp class="w"> </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Ash</samp><samp class="o">.</samp><samp class="n">exists?</samp><samp class="p" data-group-id="5556198383-3">(</samp><samp class="p" data-group-id="5556198383-3">)</samp><samp class="w">
</samp><samp class="no">false</samp></code></pre><h2 id="exists?/2-see-also" class="section-heading"><a href="#exists?/2-see-also" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">See also</span></h2><ul><li><a href="#exists/2"><code class="inline">exists/2</code></a> for the non-raising version</li><li><a href="#count!/2"><code class="inline">count!/2</code></a> for getting the actual count</li><li><code class="inline">d:Ash.Resource.Dsl.aggregates</code> for defining aggregates on resources</li><li><a href="read-actions.xhtml">Read Actions Guide</a> for understanding read operations</li></ul>
  </section>
</section>
<section class="detail" id="first/3">

    <span id="first/2"></span>

  <div class="detail-header">
    <a href="#first/3" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">first(query, field, opts \\ [])</h1>


        <a href="https://github.com/ash-project/ash/blob/v3.5.33/lib/ash.ex#L1209" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> first(<a href="Ash.Query.xhtml#t:t/0">Ash.Query.t</a>() | <a href="Ash.Resource.xhtml#t:t/0">Ash.Resource.t</a>(), <a href="https://hexdocs.pm/elixir/typespecs.html#basic-types">atom</a>(), <a href="https://hexdocs.pm/elixir/Keyword.html#t:t/0">Keyword.t</a>()) ::
  {:ok, <a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types">term</a>()} | {:error, <a href="Ash.Error.xhtml#t:t/0">Ash.Error.t</a>()}</pre>

      </div>

<p>Fetches the first value for a given field.</p><h2 id="first/3-examples" class="section-heading"><a href="#first/3-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">MyApp.Post</samp><samp class="w"> </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Ash</samp><samp class="o">.</samp><samp class="n">first</samp><samp class="p" data-group-id="6664174810-1">(</samp><samp class="ss">:title</samp><samp class="p" data-group-id="6664174810-1">)</samp><samp class="w">
</samp><samp class="p" data-group-id="6664174810-2">{</samp><samp class="ss">:ok</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;Hello World&quot;</samp><samp class="p" data-group-id="6664174810-2">}</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">MyApp.Post</samp><samp class="w"> </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">filter</samp><samp class="p" data-group-id="6664174810-3">(</samp><samp class="ss">published</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">true</samp><samp class="p" data-group-id="6664174810-3">)</samp><samp class="w"> </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Ash</samp><samp class="o">.</samp><samp class="n">first</samp><samp class="p" data-group-id="6664174810-4">(</samp><samp class="ss">:view_count</samp><samp class="p" data-group-id="6664174810-4">)</samp><samp class="w">
</samp><samp class="p" data-group-id="6664174810-5">{</samp><samp class="ss">:ok</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">42</samp><samp class="p" data-group-id="6664174810-5">}</samp></code></pre><h2 id="first/3-see-also" class="section-heading"><a href="#first/3-see-also" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">See also</span></h2><ul><li><a href="#first!/3"><code class="inline">first!/3</code></a> for the raising version</li><li><a href="#list/3"><code class="inline">list/3</code></a> for getting all values of a field</li><li><code class="inline">d:Ash.Resource.Dsl.aggregates</code> for defining aggregates on resources</li><li><a href="read-actions.xhtml">Read Actions Guide</a> for understanding read operations</li><li><a href="aggregates.xhtml">Aggregates Guide</a> for resource-level aggregates</li></ul>
  </section>
</section>
<section class="detail" id="first!/3">

    <span id="first!/2"></span>

  <div class="detail-header">
    <a href="#first!/3" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">first!(query, field, opts \\ [])</h1>


        <a href="https://github.com/ash-project/ash/blob/v3.5.33/lib/ash.ex#L1277" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> first!(<a href="Ash.Query.xhtml#t:t/0">Ash.Query.t</a>() | <a href="Ash.Resource.xhtml#t:t/0">Ash.Resource.t</a>(), <a href="https://hexdocs.pm/elixir/typespecs.html#basic-types">atom</a>(), <a href="https://hexdocs.pm/elixir/Keyword.html#t:t/0">Keyword.t</a>()) ::
  <a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types">term</a>() | <a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types">no_return</a>()</pre>

      </div>

<p>Fetches the first value for a given field, or raises an error.</p><h2 id="first!/3-examples" class="section-heading"><a href="#first!/3-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">MyApp.Post</samp><samp class="w"> </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Ash</samp><samp class="o">.</samp><samp class="n">first!</samp><samp class="p" data-group-id="6494678352-1">(</samp><samp class="ss">:title</samp><samp class="p" data-group-id="6494678352-1">)</samp><samp class="w">
</samp><samp class="s">&quot;Hello World&quot;</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">MyApp.Post</samp><samp class="w"> </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">filter</samp><samp class="p" data-group-id="6494678352-2">(</samp><samp class="ss">published</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">true</samp><samp class="p" data-group-id="6494678352-2">)</samp><samp class="w"> </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Ash</samp><samp class="o">.</samp><samp class="n">first!</samp><samp class="p" data-group-id="6494678352-3">(</samp><samp class="ss">:view_count</samp><samp class="p" data-group-id="6494678352-3">)</samp><samp class="w">
</samp><samp class="mi">42</samp></code></pre><h2 id="first!/3-see-also" class="section-heading"><a href="#first!/3-see-also" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">See also</span></h2><ul><li><a href="#first/3"><code class="inline">first/3</code></a> for the non-raising version</li><li><a href="#list!/3"><code class="inline">list!/3</code></a> for getting all values of a field</li><li><code class="inline">d:Ash.Resource.Dsl.aggregates</code> for defining aggregates on resources</li><li><a href="read-actions.xhtml">Read Actions Guide</a> for understanding read operations</li><li><a href="aggregates.xhtml">Aggregates Guide</a> for resource-level aggregates</li></ul>
  </section>
</section>
<section class="detail" id="get/3">

    <span id="get/2"></span>

  <div class="detail-header">
    <a href="#get/3" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">get(resource, id, opts \\ [])</h1>


        <a href="https://github.com/ash-project/ash/blob/v3.5.33/lib/ash.ex#L2065" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> get(<a href="Ash.Resource.xhtml#t:t/0">Ash.Resource.t</a>(), <a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types">term</a>(), <a href="https://hexdocs.pm/elixir/Keyword.html#t:t/0">Keyword.t</a>()) ::
  {:ok, <a href="Ash.Resource.xhtml#t:record/0">Ash.Resource.record</a>() | nil} | {:error, <a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types">term</a>()}</pre>

      </div>

<p>Get a record by an identifier.</p><p>For a resource with a composite primary key, pass a keyword list or map, e.g
<code class="inline">Ash.get(MyResource, %{first_key: 1, second_key: 2})</code></p><p>Additionally, a keyword list or map of keys matching an identity can be provided.</p><h2 id="get/3-examples" class="section-heading"><a href="#get/3-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Ash</samp><samp class="o">.</samp><samp class="n">get</samp><samp class="p" data-group-id="1689805653-1">(</samp><samp class="nc">MyApp.Post</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">1</samp><samp class="p" data-group-id="1689805653-1">)</samp><samp class="w">
</samp><samp class="p" data-group-id="1689805653-2">{</samp><samp class="ss">:ok</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="1689805653-3">%</samp><samp class="nc" data-group-id="1689805653-3">MyApp.Post</samp><samp class="p" data-group-id="1689805653-3">{</samp><samp class="ss">id</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">1</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">title</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;Hello World&quot;</samp><samp class="p" data-group-id="1689805653-3">}</samp><samp class="p" data-group-id="1689805653-2">}</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Ash</samp><samp class="o">.</samp><samp class="n">get</samp><samp class="p" data-group-id="1689805653-4">(</samp><samp class="nc">MyApp.User</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="1689805653-5">%{</samp><samp class="ss">email</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;user@example.com&quot;</samp><samp class="p" data-group-id="1689805653-5">}</samp><samp class="p" data-group-id="1689805653-4">)</samp><samp class="w">
</samp><samp class="p" data-group-id="1689805653-6">{</samp><samp class="ss">:ok</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="1689805653-7">%</samp><samp class="nc" data-group-id="1689805653-7">MyApp.User</samp><samp class="p" data-group-id="1689805653-7">{</samp><samp class="ss">id</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">5</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">email</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;user@example.com&quot;</samp><samp class="p" data-group-id="1689805653-7">}</samp><samp class="p" data-group-id="1689805653-6">}</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Ash</samp><samp class="o">.</samp><samp class="n">get</samp><samp class="p" data-group-id="1689805653-8">(</samp><samp class="nc">MyApp.Post</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="1689805653-9">%{</samp><samp class="ss">first_key</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">1</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">second_key</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">2</samp><samp class="p" data-group-id="1689805653-9">}</samp><samp class="p" data-group-id="1689805653-8">)</samp><samp class="w">
</samp><samp class="p" data-group-id="1689805653-10">{</samp><samp class="ss">:ok</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="1689805653-11">%</samp><samp class="nc" data-group-id="1689805653-11">MyApp.Post</samp><samp class="p" data-group-id="1689805653-11">{</samp><samp class="ss">first_key</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">1</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">second_key</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">2</samp><samp class="p" data-group-id="1689805653-11">}</samp><samp class="p" data-group-id="1689805653-10">}</samp></code></pre><h2 id="get/3-see-also" class="section-heading"><a href="#get/3-see-also" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">See also</span></h2><ul><li><a href="#get!/3"><code class="inline">get!/3</code></a> for the raising version</li><li><a href="read-actions.xhtml">Read Actions Guide</a> for understanding read operations</li></ul><h2 id="get/3-options" class="section-heading"><a href="#get/3-options" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Options</span></h2><ul><li><p><code class="inline">:error?</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">boolean/0</code></a>) - Whether or not an error should be returned or raised when the record is not found. If set to false, <code class="inline">nil</code> will be returned. The default value is <code class="inline">true</code>.</p></li><li><p><code class="inline">:load</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">term/0</code></a>) - Fields or relationships to load in the query. See <a href="Ash.Query.xhtml#load/2"><code class="inline">Ash.Query.load/2</code></a></p></li><li><p><code class="inline">:lock</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">term/0</code></a>) - A lock statement to add onto the query</p></li><li><p><code class="inline">:reuse_values?</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">boolean/0</code></a>) - Whether calculations are allowed to reuse values that have already been loaded, or must refetch them from the data layer. The default value is <code class="inline">false</code>.</p></li><li><p><code class="inline">:strict?</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">boolean/0</code></a>) - If set to true, only specified attributes will be loaded when passing
  a list of fields to fetch on a relationship, which allows for more
  optimized data-fetching.<br/>  See <a href="Ash.Query.xhtml#load/2"><code class="inline">Ash.Query.load/2</code></a>. The default value is <code class="inline">false</code>.</p></li><li><p><code class="inline">:authorize_with</code> - If set to <code class="inline">:error</code>, instead of applying authorization filters as a filter, any records not matching the authorization filter will cause an error to be returned. Valid values are :filter, :error The default value is <code class="inline">:filter</code>.</p></li><li><p><code class="inline">:domain</code> (<a href="Ash.Domain.xhtml"><code class="inline">Ash.Domain</code></a>) - The domain to use.</p></li><li><p><code class="inline">:timeout</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">timeout/0</code></a>) - A positive integer, or <code class="inline">:infinity</code>. If none is provided, the timeout configured on the domain is used.</p></li><li><p><code class="inline">:tracer</code> (one or a list of module that adopts <a href="Ash.Tracer.xhtml"><code class="inline">Ash.Tracer</code></a>) - A tracer that implements the <a href="Ash.Tracer.xhtml"><code class="inline">Ash.Tracer</code></a> behaviour. See that module for more.</p></li><li><p><code class="inline">:action</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">term/0</code></a>) - The action to use, either an Action struct or the name of the action</p></li><li><p><code class="inline">:authorize?</code> - If an actor option is provided (even if it is <code class="inline">nil</code>), authorization happens automatically. If not, this flag can be used to authorize with no user.</p></li><li><p><code class="inline">:context</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#basic-types"><code class="inline">map/0</code></a>) - Context to set on the query, changeset, or input</p></li><li><p><code class="inline">:tenant</code> (value that implements the <a href="Ash.ToTenant.xhtml"><code class="inline">Ash.ToTenant</code></a> protocol) - A tenant to set on the query or changeset</p></li><li><p><code class="inline">:actor</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">term/0</code></a>) - If an actor is provided, it will be used in conjunction with the authorizers of a resource to authorize access</p></li><li><p><code class="inline">:scope</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">term/0</code></a>) - A value that implements the <a href="Ash.Scope.ToOpts.xhtml"><code class="inline">Ash.Scope.ToOpts</code></a> protocol, for passing around actor/tenant/context in a single value. See <a href="Ash.Scope.ToOpts.xhtml"><code class="inline">Ash.Scope.ToOpts</code></a> for more.</p></li></ul>
  </section>
</section>
<section class="detail" id="get!/3">

    <span id="get!/2"></span>

  <div class="detail-header">
    <a href="#get!/3" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">get!(resource, id, opts \\ [])</h1>


        <a href="https://github.com/ash-project/ash/blob/v3.5.33/lib/ash.ex#L2018" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> get!(<a href="Ash.Resource.xhtml#t:t/0">Ash.Resource.t</a>(), <a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types">term</a>(), <a href="https://hexdocs.pm/elixir/Keyword.html#t:t/0">Keyword.t</a>()) ::
  <a href="Ash.Resource.xhtml#t:record/0">Ash.Resource.record</a>() | nil | <a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types">no_return</a>()</pre>

      </div>

<p>Get a record by an identifier, or raises an error. See <a href="#get/3"><code class="inline">get/3</code></a> for more.</p><h2 id="get!/3-examples" class="section-heading"><a href="#get!/3-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Ash</samp><samp class="o">.</samp><samp class="n">get!</samp><samp class="p" data-group-id="2784006962-1">(</samp><samp class="nc">MyApp.Post</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">1</samp><samp class="p" data-group-id="2784006962-1">)</samp><samp class="w">
</samp><samp class="p" data-group-id="2784006962-2">%</samp><samp class="nc" data-group-id="2784006962-2">MyApp.Post</samp><samp class="p" data-group-id="2784006962-2">{</samp><samp class="ss">id</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">1</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">title</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;Hello World&quot;</samp><samp class="p" data-group-id="2784006962-2">}</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Ash</samp><samp class="o">.</samp><samp class="n">get!</samp><samp class="p" data-group-id="2784006962-3">(</samp><samp class="nc">MyApp.User</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="2784006962-4">%{</samp><samp class="ss">email</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;user@example.com&quot;</samp><samp class="p" data-group-id="2784006962-4">}</samp><samp class="p" data-group-id="2784006962-3">)</samp><samp class="w">
</samp><samp class="p" data-group-id="2784006962-5">%</samp><samp class="nc" data-group-id="2784006962-5">MyApp.User</samp><samp class="p" data-group-id="2784006962-5">{</samp><samp class="ss">id</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">5</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">email</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;user@example.com&quot;</samp><samp class="p" data-group-id="2784006962-5">}</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Ash</samp><samp class="o">.</samp><samp class="n">get!</samp><samp class="p" data-group-id="2784006962-6">(</samp><samp class="nc">MyApp.Post</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="2784006962-7">%{</samp><samp class="ss">first_key</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">1</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">second_key</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">2</samp><samp class="p" data-group-id="2784006962-7">}</samp><samp class="p" data-group-id="2784006962-6">)</samp><samp class="w">
</samp><samp class="p" data-group-id="2784006962-8">%</samp><samp class="nc" data-group-id="2784006962-8">MyApp.Post</samp><samp class="p" data-group-id="2784006962-8">{</samp><samp class="ss">first_key</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">1</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">second_key</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">2</samp><samp class="p" data-group-id="2784006962-8">}</samp></code></pre><h2 id="get!/3-see-also" class="section-heading"><a href="#get!/3-see-also" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">See also</span></h2><ul><li><a href="#get/3"><code class="inline">get/3</code></a> for the non-raising version</li><li><a href="read-actions.xhtml">Read Actions Guide</a> for understanding read operations</li></ul>
  </section>
</section>
<section class="detail" id="list/3">

    <span id="list/2"></span>

  <div class="detail-header">
    <a href="#list/3" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">list(query, field, opts \\ [])</h1>


        <a href="https://github.com/ash-project/ash/blob/v3.5.33/lib/ash.ex#L1374" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> list(<a href="Ash.Query.xhtml#t:t/0">Ash.Query.t</a>() | <a href="Ash.Resource.xhtml#t:t/0">Ash.Resource.t</a>(), <a href="https://hexdocs.pm/elixir/typespecs.html#basic-types">atom</a>(), <a href="https://hexdocs.pm/elixir/Keyword.html#t:t/0">Keyword.t</a>()) ::
  {:ok, [<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types">term</a>()]} | {:error, <a href="Ash.Error.xhtml#t:t/0">Ash.Error.t</a>()}</pre>

      </div>

<p>Fetches a list of all values of a given field.</p><h2 id="list/3-examples" class="section-heading"><a href="#list/3-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">MyApp.Post</samp><samp class="w"> </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Ash</samp><samp class="o">.</samp><samp class="n">list</samp><samp class="p" data-group-id="7566838916-1">(</samp><samp class="ss">:title</samp><samp class="p" data-group-id="7566838916-1">)</samp><samp class="w">
</samp><samp class="p" data-group-id="7566838916-2">{</samp><samp class="ss">:ok</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="7566838916-3">[</samp><samp class="s">&quot;Hello World&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;Another Post&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;Final Post&quot;</samp><samp class="p" data-group-id="7566838916-3">]</samp><samp class="p" data-group-id="7566838916-2">}</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">MyApp.Post</samp><samp class="w"> </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">filter</samp><samp class="p" data-group-id="7566838916-4">(</samp><samp class="ss">published</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">true</samp><samp class="p" data-group-id="7566838916-4">)</samp><samp class="w"> </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Ash</samp><samp class="o">.</samp><samp class="n">list</samp><samp class="p" data-group-id="7566838916-5">(</samp><samp class="ss">:view_count</samp><samp class="p" data-group-id="7566838916-5">)</samp><samp class="w">
</samp><samp class="p" data-group-id="7566838916-6">{</samp><samp class="ss">:ok</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="7566838916-7">[</samp><samp class="mi">42</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">15</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">89</samp><samp class="p" data-group-id="7566838916-7">]</samp><samp class="p" data-group-id="7566838916-6">}</samp></code></pre><h2 id="list/3-see-also" class="section-heading"><a href="#list/3-see-also" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">See also</span></h2><ul><li><a href="#list!/3"><code class="inline">list!/3</code></a> for the raising version</li><li><a href="#first/3"><code class="inline">first/3</code></a> for getting just the first value</li><li><code class="inline">d:Ash.Resource.Dsl.aggregates</code> for defining aggregates on resources</li></ul>
  </section>
</section>
<section class="detail" id="list!/3">

    <span id="list!/2"></span>

  <div class="detail-header">
    <a href="#list!/3" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">list!(query, field, opts \\ [])</h1>


        <a href="https://github.com/ash-project/ash/blob/v3.5.33/lib/ash.ex#L1446" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> list!(<a href="Ash.Query.xhtml#t:t/0">Ash.Query.t</a>() | <a href="Ash.Resource.xhtml#t:t/0">Ash.Resource.t</a>(), <a href="https://hexdocs.pm/elixir/typespecs.html#basic-types">atom</a>(), <a href="https://hexdocs.pm/elixir/Keyword.html#t:t/0">Keyword.t</a>()) ::
  [<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types">term</a>()] | <a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types">no_return</a>()</pre>

      </div>

<p>Fetches a list of all values of a given field or raises an error.</p><h2 id="list!/3-examples" class="section-heading"><a href="#list!/3-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">MyApp.Post</samp><samp class="w"> </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Ash</samp><samp class="o">.</samp><samp class="n">list!</samp><samp class="p" data-group-id="4135940644-1">(</samp><samp class="ss">:title</samp><samp class="p" data-group-id="4135940644-1">)</samp><samp class="w">
</samp><samp class="p" data-group-id="4135940644-2">[</samp><samp class="s">&quot;Hello World&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;Another Post&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;Final Post&quot;</samp><samp class="p" data-group-id="4135940644-2">]</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">MyApp.Post</samp><samp class="w"> </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">filter</samp><samp class="p" data-group-id="4135940644-3">(</samp><samp class="ss">published</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">true</samp><samp class="p" data-group-id="4135940644-3">)</samp><samp class="w"> </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Ash</samp><samp class="o">.</samp><samp class="n">list!</samp><samp class="p" data-group-id="4135940644-4">(</samp><samp class="ss">:view_count</samp><samp class="p" data-group-id="4135940644-4">)</samp><samp class="w">
</samp><samp class="p" data-group-id="4135940644-5">[</samp><samp class="mi">42</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">15</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">89</samp><samp class="p" data-group-id="4135940644-5">]</samp></code></pre><h2 id="list!/3-see-also" class="section-heading"><a href="#list!/3-see-also" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">See also</span></h2><ul><li><a href="#list/3"><code class="inline">list/3</code></a> for the non-raising version</li><li><a href="#first!/3"><code class="inline">first!/3</code></a> for getting just the first value</li><li><code class="inline">d:Ash.Resource.Dsl.aggregates</code> for defining aggregates on resources</li></ul>
  </section>
</section>
<section class="detail" id="load/3">

    <span id="load/2"></span>

  <div class="detail-header">
    <a href="#load/3" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">load(data, query, opts \\ [])</h1>


        <a href="https://github.com/ash-project/ash/blob/v3.5.33/lib/ash.ex#L2440" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> load(
  record_or_records ::
    <a href="#t:record_or_records/0">record_or_records</a>()
    | <a href="Ash.Page.xhtml#t:page/0">Ash.Page.page</a>()
    | {:ok, <a href="#t:record_or_records/0">record_or_records</a>()}
    | {:ok, <a href="Ash.Page.xhtml#t:page/0">Ash.Page.page</a>()}
    | {:error, <a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types">term</a>()}
    | :ok
    | nil,
  query :: <a href="#t:load_statement/0">load_statement</a>(),
  opts :: <a href="https://hexdocs.pm/elixir/Keyword.html#t:t/0">Keyword.t</a>()
) ::
  {:ok, <a href="Ash.Resource.xhtml#t:record/0">Ash.Resource.record</a>() | [<a href="Ash.Resource.xhtml#t:record/0">Ash.Resource.record</a>()] | nil}
  | {:error, <a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types">term</a>()}</pre>

      </div>

<p>Load fields or relationships on already fetched records.</p><p>Accepts a list of non-loaded fields and loads them on the provided records or a query, in
which case the loaded fields of the query are used. Relationship loads can be nested, for
example: <code class="inline">Ash.load(record, [posts: [:comments]])</code>.</p><h2 id="load/3-examples" class="section-heading"><a href="#load/3-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Ash</samp><samp class="o">.</samp><samp class="n">load</samp><samp class="p" data-group-id="8699862554-1">(</samp><samp class="n">post</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:comments</samp><samp class="p" data-group-id="8699862554-1">)</samp><samp class="w">
</samp><samp class="p" data-group-id="8699862554-2">{</samp><samp class="ss">:ok</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="8699862554-3">%</samp><samp class="nc" data-group-id="8699862554-3">MyApp.Post</samp><samp class="p" data-group-id="8699862554-3">{</samp><samp class="ss">comments</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="8699862554-4">[</samp><samp class="p" data-group-id="8699862554-5">%</samp><samp class="nc" data-group-id="8699862554-5">MyApp.Comment</samp><samp class="p" data-group-id="8699862554-5">{</samp><samp class="p" data-group-id="8699862554-5">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">...</samp><samp class="p" data-group-id="8699862554-4">]</samp><samp class="p" data-group-id="8699862554-3">}</samp><samp class="p" data-group-id="8699862554-2">}</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Ash</samp><samp class="o">.</samp><samp class="n">load</samp><samp class="p" data-group-id="8699862554-6">(</samp><samp class="n">posts</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="8699862554-7">[</samp><samp class="ss">:author</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:comments</samp><samp class="p" data-group-id="8699862554-7">]</samp><samp class="p" data-group-id="8699862554-6">)</samp><samp class="w">
</samp><samp class="p" data-group-id="8699862554-8">{</samp><samp class="ss">:ok</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="8699862554-9">[</samp><samp class="p" data-group-id="8699862554-10">%</samp><samp class="nc" data-group-id="8699862554-10">MyApp.Post</samp><samp class="p" data-group-id="8699862554-10">{</samp><samp class="ss">author</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="8699862554-11">%</samp><samp class="nc" data-group-id="8699862554-11">MyApp.User</samp><samp class="p" data-group-id="8699862554-11">{</samp><samp class="p" data-group-id="8699862554-11">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">comments</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="8699862554-12">[</samp><samp class="n">...</samp><samp class="p" data-group-id="8699862554-12">]</samp><samp class="p" data-group-id="8699862554-10">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">...</samp><samp class="p" data-group-id="8699862554-9">]</samp><samp class="p" data-group-id="8699862554-8">}</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Ash</samp><samp class="o">.</samp><samp class="n">load</samp><samp class="p" data-group-id="8699862554-13">(</samp><samp class="n">user</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="8699862554-14">[</samp><samp class="ss">posts</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="8699862554-15">[</samp><samp class="ss">:comments</samp><samp class="p" data-group-id="8699862554-15">]</samp><samp class="p" data-group-id="8699862554-14">]</samp><samp class="p" data-group-id="8699862554-13">)</samp><samp class="w">
</samp><samp class="p" data-group-id="8699862554-16">{</samp><samp class="ss">:ok</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="8699862554-17">%</samp><samp class="nc" data-group-id="8699862554-17">MyApp.User</samp><samp class="p" data-group-id="8699862554-17">{</samp><samp class="ss">posts</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="8699862554-18">[</samp><samp class="p" data-group-id="8699862554-19">%</samp><samp class="nc" data-group-id="8699862554-19">MyApp.Post</samp><samp class="p" data-group-id="8699862554-19">{</samp><samp class="ss">comments</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="8699862554-20">[</samp><samp class="n">...</samp><samp class="p" data-group-id="8699862554-20">]</samp><samp class="p" data-group-id="8699862554-19">}</samp><samp class="p" data-group-id="8699862554-18">]</samp><samp class="p" data-group-id="8699862554-17">}</samp><samp class="p" data-group-id="8699862554-16">}</samp></code></pre><h2 id="load/3-see-also" class="section-heading"><a href="#load/3-see-also" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">See also</span></h2><ul><li><a href="#load!/3"><code class="inline">load!/3</code></a> for the raising version</li><li><code class="inline">d:Ash.Resource.Dsl.relationships</code> for defining relationships to load</li><li><code class="inline">d:Ash.Resource.Dsl.calculations</code> for defining calculations to load</li></ul><h2 id="load/3-options" class="section-heading"><a href="#load/3-options" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Options</span></h2><ul><li><p><code class="inline">:lazy?</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">boolean/0</code></a>) - If set to true, values will only be loaded if the related value isn't currently loaded. The default value is <code class="inline">false</code>.</p></li><li><p><code class="inline">:reuse_values?</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">boolean/0</code></a>) - Whether calculations are allowed to reuse values that have already been loaded, or must refetch them from the data layer. The default value is <code class="inline">false</code>.</p></li><li><p><code class="inline">:strict?</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">boolean/0</code></a>) - If set to true, only specified attributes will be loaded when passing
  a list of fields to fetch on a relationship, which allows for more
  optimized data-fetching.<br/>  See <a href="Ash.Query.xhtml#load/2"><code class="inline">Ash.Query.load/2</code></a>. The default value is <code class="inline">false</code>.</p></li><li><p><code class="inline">:domain</code> (<a href="Ash.Domain.xhtml"><code class="inline">Ash.Domain</code></a>) - The domain to use.</p></li><li><p><code class="inline">:timeout</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">timeout/0</code></a>) - A positive integer, or <code class="inline">:infinity</code>. If none is provided, the timeout configured on the domain is used.</p></li><li><p><code class="inline">:tracer</code> (one or a list of module that adopts <a href="Ash.Tracer.xhtml"><code class="inline">Ash.Tracer</code></a>) - A tracer that implements the <a href="Ash.Tracer.xhtml"><code class="inline">Ash.Tracer</code></a> behaviour. See that module for more.</p></li><li><p><code class="inline">:action</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">term/0</code></a>) - The action to use, either an Action struct or the name of the action</p></li><li><p><code class="inline">:authorize?</code> - If an actor option is provided (even if it is <code class="inline">nil</code>), authorization happens automatically. If not, this flag can be used to authorize with no user.</p></li><li><p><code class="inline">:context</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#basic-types"><code class="inline">map/0</code></a>) - Context to set on the query, changeset, or input</p></li><li><p><code class="inline">:tenant</code> (value that implements the <a href="Ash.ToTenant.xhtml"><code class="inline">Ash.ToTenant</code></a> protocol) - A tenant to set on the query or changeset</p></li><li><p><code class="inline">:actor</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">term/0</code></a>) - If an actor is provided, it will be used in conjunction with the authorizers of a resource to authorize access</p></li><li><p><code class="inline">:scope</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">term/0</code></a>) - A value that implements the <a href="Ash.Scope.ToOpts.xhtml"><code class="inline">Ash.Scope.ToOpts</code></a> protocol, for passing around actor/tenant/context in a single value. See <a href="Ash.Scope.ToOpts.xhtml"><code class="inline">Ash.Scope.ToOpts</code></a> for more.</p></li></ul>
  </section>
</section>
<section class="detail" id="load!/3">

    <span id="load!/2"></span>

  <div class="detail-header">
    <a href="#load!/3" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">load!(data, query, opts \\ [])</h1>


        <a href="https://github.com/ash-project/ash/blob/v3.5.33/lib/ash.ex#L2384" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> load!(
  record_or_records ::
    <a href="#t:record_or_records/0">record_or_records</a>()
    | <a href="Ash.Page.xhtml#t:page/0">Ash.Page.page</a>()
    | {:ok, <a href="#t:record_or_records/0">record_or_records</a>()}
    | {:ok, <a href="Ash.Page.xhtml#t:page/0">Ash.Page.page</a>()}
    | {:error, <a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types">term</a>()}
    | :ok
    | nil,
  query :: <a href="#t:load_statement/0">load_statement</a>(),
  opts :: <a href="https://hexdocs.pm/elixir/Keyword.html#t:t/0">Keyword.t</a>()
) :: <a href="Ash.Resource.xhtml#t:record/0">Ash.Resource.record</a>() | [<a href="Ash.Resource.xhtml#t:record/0">Ash.Resource.record</a>()] | nil | <a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types">no_return</a>()</pre>

      </div>

<p>Load fields or relationships on already fetched records. See <a href="#load/3"><code class="inline">load/3</code></a> for more information.</p><h2 id="load!/3-examples" class="section-heading"><a href="#load!/3-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Ash</samp><samp class="o">.</samp><samp class="n">load!</samp><samp class="p" data-group-id="4142813272-1">(</samp><samp class="n">post</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:comments</samp><samp class="p" data-group-id="4142813272-1">)</samp><samp class="w">
</samp><samp class="p" data-group-id="4142813272-2">%</samp><samp class="nc" data-group-id="4142813272-2">MyApp.Post</samp><samp class="p" data-group-id="4142813272-2">{</samp><samp class="ss">comments</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="4142813272-3">[</samp><samp class="p" data-group-id="4142813272-4">%</samp><samp class="nc" data-group-id="4142813272-4">MyApp.Comment</samp><samp class="p" data-group-id="4142813272-4">{</samp><samp class="p" data-group-id="4142813272-4">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">...</samp><samp class="p" data-group-id="4142813272-3">]</samp><samp class="p" data-group-id="4142813272-2">}</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Ash</samp><samp class="o">.</samp><samp class="n">load!</samp><samp class="p" data-group-id="4142813272-5">(</samp><samp class="n">posts</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="4142813272-6">[</samp><samp class="ss">:author</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:comments</samp><samp class="p" data-group-id="4142813272-6">]</samp><samp class="p" data-group-id="4142813272-5">)</samp><samp class="w">
</samp><samp class="p" data-group-id="4142813272-7">[</samp><samp class="p" data-group-id="4142813272-8">%</samp><samp class="nc" data-group-id="4142813272-8">MyApp.Post</samp><samp class="p" data-group-id="4142813272-8">{</samp><samp class="ss">author</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="4142813272-9">%</samp><samp class="nc" data-group-id="4142813272-9">MyApp.User</samp><samp class="p" data-group-id="4142813272-9">{</samp><samp class="p" data-group-id="4142813272-9">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">comments</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="4142813272-10">[</samp><samp class="n">...</samp><samp class="p" data-group-id="4142813272-10">]</samp><samp class="p" data-group-id="4142813272-8">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">...</samp><samp class="p" data-group-id="4142813272-7">]</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Ash</samp><samp class="o">.</samp><samp class="n">load!</samp><samp class="p" data-group-id="4142813272-11">(</samp><samp class="n">user</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="4142813272-12">[</samp><samp class="ss">posts</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="4142813272-13">[</samp><samp class="ss">:comments</samp><samp class="p" data-group-id="4142813272-13">]</samp><samp class="p" data-group-id="4142813272-12">]</samp><samp class="p" data-group-id="4142813272-11">)</samp><samp class="w">
</samp><samp class="p" data-group-id="4142813272-14">%</samp><samp class="nc" data-group-id="4142813272-14">MyApp.User</samp><samp class="p" data-group-id="4142813272-14">{</samp><samp class="ss">posts</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="4142813272-15">[</samp><samp class="p" data-group-id="4142813272-16">%</samp><samp class="nc" data-group-id="4142813272-16">MyApp.Post</samp><samp class="p" data-group-id="4142813272-16">{</samp><samp class="ss">comments</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="4142813272-17">[</samp><samp class="n">...</samp><samp class="p" data-group-id="4142813272-17">]</samp><samp class="p" data-group-id="4142813272-16">}</samp><samp class="p" data-group-id="4142813272-15">]</samp><samp class="p" data-group-id="4142813272-14">}</samp></code></pre><h2 id="load!/3-see-also" class="section-heading"><a href="#load!/3-see-also" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">See also</span></h2><ul><li><a href="#load/3"><code class="inline">load/3</code></a> for the non-raising version</li><li><code class="inline">d:Ash.Resource.Dsl.relationships</code> for defining relationships to load</li><li><code class="inline">d:Ash.Resource.Dsl.calculations</code> for defining calculations to load</li><li><a href="relationships.xhtml">Relationships Guide</a> for understanding relationships</li><li><a href="calculations.xhtml">Calculations Guide</a> for understanding calculations</li></ul>
  </section>
</section>
<section class="detail" id="max/3">

    <span id="max/2"></span>

  <div class="detail-header">
    <a href="#max/3" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">max(query, field, opts \\ [])</h1>


        <a href="https://github.com/ash-project/ash/blob/v3.5.33/lib/ash.ex#L1475" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> max(<a href="Ash.Query.xhtml#t:t/0">Ash.Query.t</a>() | <a href="Ash.Resource.xhtml#t:t/0">Ash.Resource.t</a>(), <a href="https://hexdocs.pm/elixir/typespecs.html#basic-types">atom</a>(), <a href="https://hexdocs.pm/elixir/Keyword.html#t:t/0">Keyword.t</a>()) ::
  {:ok, <a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types">term</a>()} | {:error, <a href="Ash.Error.xhtml#t:t/0">Ash.Error.t</a>()}</pre>

      </div>

<p>Fetches the greatest of all values of a given field.</p><h2 id="max/3-examples" class="section-heading"><a href="#max/3-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">MyApp.Post</samp><samp class="w"> </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Ash</samp><samp class="o">.</samp><samp class="n">max</samp><samp class="p" data-group-id="4134848959-1">(</samp><samp class="ss">:view_count</samp><samp class="p" data-group-id="4134848959-1">)</samp><samp class="w">
</samp><samp class="p" data-group-id="4134848959-2">{</samp><samp class="ss">:ok</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">1542</samp><samp class="p" data-group-id="4134848959-2">}</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">MyApp.Post</samp><samp class="w"> </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">filter</samp><samp class="p" data-group-id="4134848959-3">(</samp><samp class="ss">published</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">true</samp><samp class="p" data-group-id="4134848959-3">)</samp><samp class="w"> </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Ash</samp><samp class="o">.</samp><samp class="n">max</samp><samp class="p" data-group-id="4134848959-4">(</samp><samp class="ss">:created_at</samp><samp class="p" data-group-id="4134848959-4">)</samp><samp class="w">
</samp><samp class="p" data-group-id="4134848959-5">{</samp><samp class="ss">:ok</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ld">~U[2023-12-25 10:30:00Z]</samp><samp class="p" data-group-id="4134848959-5">}</samp></code></pre><h2 id="max/3-see-also" class="section-heading"><a href="#max/3-see-also" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">See also</span></h2><ul><li><a href="#max!/3"><code class="inline">max!/3</code></a> for the raising version</li><li><a href="#min/3"><code class="inline">min/3</code></a> for getting the minimum value</li><li><code class="inline">d:Ash.Resource.Dsl.aggregates</code> for defining aggregates on resources</li></ul>
  </section>
</section>
<section class="detail" id="max!/3">

    <span id="max!/2"></span>

  <div class="detail-header">
    <a href="#max!/3" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">max!(query, field, opts \\ [])</h1>


        <a href="https://github.com/ash-project/ash/blob/v3.5.33/lib/ash.ex#L1512" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> max!(<a href="Ash.Query.xhtml#t:t/0">Ash.Query.t</a>() | <a href="Ash.Resource.xhtml#t:t/0">Ash.Resource.t</a>(), <a href="https://hexdocs.pm/elixir/typespecs.html#basic-types">atom</a>(), <a href="https://hexdocs.pm/elixir/Keyword.html#t:t/0">Keyword.t</a>()) ::
  <a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types">term</a>() | <a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types">no_return</a>()</pre>

      </div>

<p>Fetches the greatest of all values of a given field or raises an error.</p><h2 id="max!/3-examples" class="section-heading"><a href="#max!/3-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">MyApp.Post</samp><samp class="w"> </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Ash</samp><samp class="o">.</samp><samp class="n">max!</samp><samp class="p" data-group-id="1395661591-1">(</samp><samp class="ss">:view_count</samp><samp class="p" data-group-id="1395661591-1">)</samp><samp class="w">
</samp><samp class="mi">1542</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">MyApp.Post</samp><samp class="w"> </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">filter</samp><samp class="p" data-group-id="1395661591-2">(</samp><samp class="ss">published</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">true</samp><samp class="p" data-group-id="1395661591-2">)</samp><samp class="w"> </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Ash</samp><samp class="o">.</samp><samp class="n">max!</samp><samp class="p" data-group-id="1395661591-3">(</samp><samp class="ss">:created_at</samp><samp class="p" data-group-id="1395661591-3">)</samp><samp class="w">
</samp><samp class="ld">~U[2023-12-25 10:30:00Z]</samp></code></pre><h2 id="max!/3-see-also" class="section-heading"><a href="#max!/3-see-also" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">See also</span></h2><ul><li><a href="#max/3"><code class="inline">max/3</code></a> for the non-raising version</li><li><a href="#min!/3"><code class="inline">min!/3</code></a> for getting the minimum value</li><li><code class="inline">d:Ash.Resource.Dsl.aggregates</code> for defining aggregates on resources</li></ul>
  </section>
</section>
<section class="detail" id="min/3">

    <span id="min/2"></span>

  <div class="detail-header">
    <a href="#min/3" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">min(query, field, opts \\ [])</h1>


        <a href="https://github.com/ash-project/ash/blob/v3.5.33/lib/ash.ex#L1541" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> min(<a href="Ash.Query.xhtml#t:t/0">Ash.Query.t</a>() | <a href="Ash.Resource.xhtml#t:t/0">Ash.Resource.t</a>(), <a href="https://hexdocs.pm/elixir/typespecs.html#basic-types">atom</a>(), <a href="https://hexdocs.pm/elixir/Keyword.html#t:t/0">Keyword.t</a>()) ::
  {:ok, <a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types">term</a>()} | {:error, <a href="Ash.Error.xhtml#t:t/0">Ash.Error.t</a>()}</pre>

      </div>

<p>Fetches the least of all values of a given field.</p><h2 id="min/3-examples" class="section-heading"><a href="#min/3-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">MyApp.Post</samp><samp class="w"> </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Ash</samp><samp class="o">.</samp><samp class="n">min</samp><samp class="p" data-group-id="5619948418-1">(</samp><samp class="ss">:view_count</samp><samp class="p" data-group-id="5619948418-1">)</samp><samp class="w">
</samp><samp class="p" data-group-id="5619948418-2">{</samp><samp class="ss">:ok</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">5</samp><samp class="p" data-group-id="5619948418-2">}</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">MyApp.Post</samp><samp class="w"> </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">filter</samp><samp class="p" data-group-id="5619948418-3">(</samp><samp class="ss">published</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">true</samp><samp class="p" data-group-id="5619948418-3">)</samp><samp class="w"> </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Ash</samp><samp class="o">.</samp><samp class="n">min</samp><samp class="p" data-group-id="5619948418-4">(</samp><samp class="ss">:created_at</samp><samp class="p" data-group-id="5619948418-4">)</samp><samp class="w">
</samp><samp class="p" data-group-id="5619948418-5">{</samp><samp class="ss">:ok</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ld">~U[2023-01-01 08:00:00Z]</samp><samp class="p" data-group-id="5619948418-5">}</samp></code></pre><h2 id="min/3-see-also" class="section-heading"><a href="#min/3-see-also" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">See also</span></h2><ul><li><a href="#min!/3"><code class="inline">min!/3</code></a> for the raising version</li><li><a href="#max/3"><code class="inline">max/3</code></a> for getting the maximum value</li><li><code class="inline">d:Ash.Resource.Dsl.aggregates</code> for defining aggregates on resources</li></ul>
  </section>
</section>
<section class="detail" id="min!/3">

    <span id="min!/2"></span>

  <div class="detail-header">
    <a href="#min!/3" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">min!(query, field, opts \\ [])</h1>


        <a href="https://github.com/ash-project/ash/blob/v3.5.33/lib/ash.ex#L1578" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> min!(<a href="Ash.Query.xhtml#t:t/0">Ash.Query.t</a>() | <a href="Ash.Resource.xhtml#t:t/0">Ash.Resource.t</a>(), <a href="https://hexdocs.pm/elixir/typespecs.html#basic-types">atom</a>(), <a href="https://hexdocs.pm/elixir/Keyword.html#t:t/0">Keyword.t</a>()) ::
  <a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types">term</a>() | <a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types">no_return</a>()</pre>

      </div>

<p>Fetches the least of all values of a given field or raises an error.</p><h2 id="min!/3-examples" class="section-heading"><a href="#min!/3-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">MyApp.Post</samp><samp class="w"> </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Ash</samp><samp class="o">.</samp><samp class="n">min!</samp><samp class="p" data-group-id="4441149205-1">(</samp><samp class="ss">:view_count</samp><samp class="p" data-group-id="4441149205-1">)</samp><samp class="w">
</samp><samp class="mi">5</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">MyApp.Post</samp><samp class="w"> </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">filter</samp><samp class="p" data-group-id="4441149205-2">(</samp><samp class="ss">published</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">true</samp><samp class="p" data-group-id="4441149205-2">)</samp><samp class="w"> </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Ash</samp><samp class="o">.</samp><samp class="n">min!</samp><samp class="p" data-group-id="4441149205-3">(</samp><samp class="ss">:created_at</samp><samp class="p" data-group-id="4441149205-3">)</samp><samp class="w">
</samp><samp class="ld">~U[2023-01-01 08:00:00Z]</samp></code></pre><h2 id="min!/3-see-also" class="section-heading"><a href="#min!/3-see-also" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">See also</span></h2><ul><li><a href="#min/3"><code class="inline">min/3</code></a> for the non-raising version</li><li><a href="#max!/3"><code class="inline">max!/3</code></a> for getting the maximum value</li><li><code class="inline">d:Ash.Resource.Dsl.aggregates</code> for defining aggregates on resources</li></ul>
  </section>
</section>
<section class="detail" id="page/2">

  <div class="detail-header">
    <a href="#page/2" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">page(page, n)</h1>


        <a href="https://github.com/ash-project/ash/blob/v3.5.33/lib/ash.ex#L2195" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> page(<a href="Ash.Page.xhtml#t:page/0">Ash.Page.page</a>(), <a href="#t:page_request/0">page_request</a>()) ::
  {:ok, <a href="Ash.Page.xhtml#t:page/0">Ash.Page.page</a>()} | {:error, <a href="Ash.Error.xhtml#t:t/0">Ash.Error.t</a>()}</pre>

      </div>

<p>Fetch a page relative to the provided page.</p><h2 id="page/2-examples" class="section-heading"><a href="#page/2-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Ash</samp><samp class="o">.</samp><samp class="n">page</samp><samp class="p" data-group-id="9990738181-1">(</samp><samp class="n">page</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:next</samp><samp class="p" data-group-id="9990738181-1">)</samp><samp class="w">
</samp><samp class="p" data-group-id="9990738181-2">{</samp><samp class="ss">:ok</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="9990738181-3">%</samp><samp class="nc" data-group-id="9990738181-3">Ash.Page.Offset</samp><samp class="p" data-group-id="9990738181-3">{</samp><samp class="ss">results</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="9990738181-4">[</samp><samp class="n">...</samp><samp class="p" data-group-id="9990738181-4">]</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">more?</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">true</samp><samp class="p" data-group-id="9990738181-3">}</samp><samp class="p" data-group-id="9990738181-2">}</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Ash</samp><samp class="o">.</samp><samp class="n">page</samp><samp class="p" data-group-id="9990738181-5">(</samp><samp class="n">page</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:prev</samp><samp class="p" data-group-id="9990738181-5">)</samp><samp class="w">
</samp><samp class="p" data-group-id="9990738181-6">{</samp><samp class="ss">:ok</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="9990738181-7">%</samp><samp class="nc" data-group-id="9990738181-7">Ash.Page.Offset</samp><samp class="p" data-group-id="9990738181-7">{</samp><samp class="ss">results</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="9990738181-8">[</samp><samp class="n">...</samp><samp class="p" data-group-id="9990738181-8">]</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">more?</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">false</samp><samp class="p" data-group-id="9990738181-7">}</samp><samp class="p" data-group-id="9990738181-6">}</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Ash</samp><samp class="o">.</samp><samp class="n">page</samp><samp class="p" data-group-id="9990738181-9">(</samp><samp class="n">page</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">3</samp><samp class="p" data-group-id="9990738181-9">)</samp><samp class="w">
</samp><samp class="p" data-group-id="9990738181-10">{</samp><samp class="ss">:ok</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="9990738181-11">%</samp><samp class="nc" data-group-id="9990738181-11">Ash.Page.Offset</samp><samp class="p" data-group-id="9990738181-11">{</samp><samp class="ss">results</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="9990738181-12">[</samp><samp class="n">...</samp><samp class="p" data-group-id="9990738181-12">]</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">offset</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">40</samp><samp class="p" data-group-id="9990738181-11">}</samp><samp class="p" data-group-id="9990738181-10">}</samp></code></pre><h2 id="page/2-see-also" class="section-heading"><a href="#page/2-see-also" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">See also</span></h2><ul><li><a href="#page!/2"><code class="inline">page!/2</code></a> for the raising version</li></ul>
  </section>
</section>
<section class="detail" id="page!/2">

  <div class="detail-header">
    <a href="#page!/2" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">page!(page, request)</h1>


        <a href="https://github.com/ash-project/ash/blob/v3.5.33/lib/ash.ex#L2169" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> page!(<a href="Ash.Page.xhtml#t:page/0">Ash.Page.page</a>(), <a href="#t:page_request/0">page_request</a>()) :: <a href="Ash.Page.xhtml#t:page/0">Ash.Page.page</a>() | <a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types">no_return</a>()</pre>

      </div>

<p>Fetch a page relative to the provided page or raises an error</p><h2 id="page!/2-examples" class="section-heading"><a href="#page!/2-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Ash</samp><samp class="o">.</samp><samp class="n">page!</samp><samp class="p" data-group-id="4418486292-1">(</samp><samp class="n">page</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:next</samp><samp class="p" data-group-id="4418486292-1">)</samp><samp class="w">
</samp><samp class="p" data-group-id="4418486292-2">%</samp><samp class="nc" data-group-id="4418486292-2">Ash.Page.Offset</samp><samp class="p" data-group-id="4418486292-2">{</samp><samp class="ss">results</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="4418486292-3">[</samp><samp class="n">...</samp><samp class="p" data-group-id="4418486292-3">]</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">more?</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">true</samp><samp class="p" data-group-id="4418486292-2">}</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Ash</samp><samp class="o">.</samp><samp class="n">page!</samp><samp class="p" data-group-id="4418486292-4">(</samp><samp class="n">page</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:prev</samp><samp class="p" data-group-id="4418486292-4">)</samp><samp class="w">
</samp><samp class="p" data-group-id="4418486292-5">%</samp><samp class="nc" data-group-id="4418486292-5">Ash.Page.Offset</samp><samp class="p" data-group-id="4418486292-5">{</samp><samp class="ss">results</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="4418486292-6">[</samp><samp class="n">...</samp><samp class="p" data-group-id="4418486292-6">]</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">more?</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">false</samp><samp class="p" data-group-id="4418486292-5">}</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Ash</samp><samp class="o">.</samp><samp class="n">page!</samp><samp class="p" data-group-id="4418486292-7">(</samp><samp class="n">page</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">3</samp><samp class="p" data-group-id="4418486292-7">)</samp><samp class="w">
</samp><samp class="p" data-group-id="4418486292-8">%</samp><samp class="nc" data-group-id="4418486292-8">Ash.Page.Offset</samp><samp class="p" data-group-id="4418486292-8">{</samp><samp class="ss">results</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="4418486292-9">[</samp><samp class="n">...</samp><samp class="p" data-group-id="4418486292-9">]</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">offset</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">40</samp><samp class="p" data-group-id="4418486292-8">}</samp></code></pre><h2 id="page!/2-see-also" class="section-heading"><a href="#page!/2-see-also" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">See also</span></h2><ul><li><a href="#page/2"><code class="inline">page/2</code></a> for the non-raising version</li></ul>
  </section>
</section>
<section class="detail" id="read/2">

    <span id="read/1"></span>

  <div class="detail-header">
    <a href="#read/2" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">read(query, opts \\ [])</h1>


        <a href="https://github.com/ash-project/ash/blob/v3.5.33/lib/ash.ex#L2750" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> read(<a href="Ash.Query.xhtml#t:t/0">Ash.Query.t</a>() | <a href="Ash.Resource.xhtml#t:t/0">Ash.Resource.t</a>(), <a href="https://hexdocs.pm/elixir/Keyword.html#t:t/0">Keyword.t</a>()) ::
  {:ok, [<a href="Ash.Resource.xhtml#t:record/0">Ash.Resource.record</a>()] | <a href="Ash.Page.xhtml#t:page/0">Ash.Page.page</a>()} | {:error, <a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types">term</a>()}</pre>

      </div>

<p>Runs an <a href="Ash.Query.xhtml"><code class="inline">Ash.Query</code></a>.</p><p>For more information on building a query, see <a href="Ash.Query.xhtml"><code class="inline">Ash.Query</code></a>.</p><h2 id="read/2-examples" class="section-heading"><a href="#read/2-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Ash</samp><samp class="o">.</samp><samp class="n">read</samp><samp class="p" data-group-id="7161249434-1">(</samp><samp class="nc">MyApp.Post</samp><samp class="p" data-group-id="7161249434-1">)</samp><samp class="w">
</samp><samp class="p" data-group-id="7161249434-2">{</samp><samp class="ss">:ok</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="7161249434-3">[</samp><samp class="p" data-group-id="7161249434-4">%</samp><samp class="nc" data-group-id="7161249434-4">MyApp.Post</samp><samp class="p" data-group-id="7161249434-4">{</samp><samp class="ss">id</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">1</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">title</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;Hello&quot;</samp><samp class="p" data-group-id="7161249434-4">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="7161249434-5">%</samp><samp class="nc" data-group-id="7161249434-5">MyApp.Post</samp><samp class="p" data-group-id="7161249434-5">{</samp><samp class="ss">id</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">2</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">title</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;World&quot;</samp><samp class="p" data-group-id="7161249434-5">}</samp><samp class="p" data-group-id="7161249434-3">]</samp><samp class="p" data-group-id="7161249434-2">}</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">MyApp.Post</samp><samp class="w"> </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">filter</samp><samp class="p" data-group-id="7161249434-6">(</samp><samp class="ss">published</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">true</samp><samp class="p" data-group-id="7161249434-6">)</samp><samp class="w"> </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Ash</samp><samp class="o">.</samp><samp class="n">read</samp><samp class="p" data-group-id="7161249434-7">(</samp><samp class="p" data-group-id="7161249434-7">)</samp><samp class="w">
</samp><samp class="p" data-group-id="7161249434-8">{</samp><samp class="ss">:ok</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="7161249434-9">[</samp><samp class="p" data-group-id="7161249434-10">%</samp><samp class="nc" data-group-id="7161249434-10">MyApp.Post</samp><samp class="p" data-group-id="7161249434-10">{</samp><samp class="ss">id</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">1</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">title</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;Hello&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">published</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">true</samp><samp class="p" data-group-id="7161249434-10">}</samp><samp class="p" data-group-id="7161249434-9">]</samp><samp class="p" data-group-id="7161249434-8">}</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">MyApp.Post</samp><samp class="w"> </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">limit</samp><samp class="p" data-group-id="7161249434-11">(</samp><samp class="mi">5</samp><samp class="p" data-group-id="7161249434-11">)</samp><samp class="w"> </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Ash</samp><samp class="o">.</samp><samp class="n">read</samp><samp class="p" data-group-id="7161249434-12">(</samp><samp class="p" data-group-id="7161249434-12">)</samp><samp class="w">
</samp><samp class="p" data-group-id="7161249434-13">{</samp><samp class="ss">:ok</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="7161249434-14">[</samp><samp class="p" data-group-id="7161249434-15">%</samp><samp class="nc" data-group-id="7161249434-15">MyApp.Post</samp><samp class="p" data-group-id="7161249434-15">{</samp><samp class="p" data-group-id="7161249434-15">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="7161249434-16">%</samp><samp class="nc" data-group-id="7161249434-16">MyApp.Post</samp><samp class="p" data-group-id="7161249434-16">{</samp><samp class="p" data-group-id="7161249434-16">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">...</samp><samp class="p" data-group-id="7161249434-14">]</samp><samp class="p" data-group-id="7161249434-13">}</samp></code></pre><h2 id="read/2-see-also" class="section-heading"><a href="#read/2-see-also" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">See also</span></h2><ul><li><a href="#read!/2"><code class="inline">read!/2</code></a> for the raising version</li><li><code class="inline">d:Ash.Resource.Dsl.actions.read</code> for defining read actions</li><li><code class="inline">d:Ash.Resource.Dsl.actions.read.pagination</code> for pagination configuration</li><li><a href="read-actions.xhtml">Read Actions Guide</a> for understanding read operations</li><li><a href="actions.xhtml">Actions Guide</a> for general action concepts</li></ul><h2 id="read/2-options" class="section-heading"><a href="#read/2-options" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Options</span></h2><ul><li><p><code class="inline">:page</code> - Pagination options, see <a href="#read/2"><code class="inline">Ash.read/2</code></a> for more.</p></li><li><p><code class="inline">:load</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">term/0</code></a>) - A load statement to add onto the query</p></li><li><p><code class="inline">:max_concurrency</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#basic-types"><code class="inline">non_neg_integer/0</code></a>) - The maximum number of processes allowed to be started for parallel loading of relationships and calculations. Defaults to <code class="inline">System.schedulers_online() * 2</code></p></li><li><p><code class="inline">:lock</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">term/0</code></a>) - A lock statement to add onto the query</p></li><li><p><code class="inline">:return_query?</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">boolean/0</code></a>) - If <code class="inline">true</code>, the query that was ultimately used is returned as a third tuple element.<br/>The query goes through many potential changes during a request, potentially adding
authorization filters, or replacing relationships for other data layers with their
corresponding ids. This option can be used to get the true query that was sent to
the data layer. The default value is <code class="inline">false</code>.</p></li><li><p><code class="inline">:skip_unknown_inputs</code> - A list of inputs that, if provided, will be ignored if they are not recognized by the action. Use <code class="inline">:*</code> to indicate all unknown keys.</p></li><li><p><code class="inline">:reuse_values?</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">boolean/0</code></a>) - Whether calculations are allowed to reuse values that have already been loaded, or must refetch them from the data layer. The default value is <code class="inline">false</code>.</p></li><li><p><code class="inline">:strict?</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">boolean/0</code></a>) - If set to true, only specified attributes will be loaded when passing
  a list of fields to fetch on a relationship, which allows for more
  optimized data-fetching.<br/>  See <a href="Ash.Query.xhtml#load/2"><code class="inline">Ash.Query.load/2</code></a>. The default value is <code class="inline">false</code>.</p></li><li><p><code class="inline">:authorize_with</code> - If set to <code class="inline">:error</code>, instead of applying authorization filters as a filter, any records not matching the authorization filter will cause an error to be returned. Valid values are :filter, :error The default value is <code class="inline">:filter</code>.</p></li><li><p><code class="inline">:domain</code> (<a href="Ash.Domain.xhtml"><code class="inline">Ash.Domain</code></a>) - The domain to use.</p></li><li><p><code class="inline">:timeout</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">timeout/0</code></a>) - A positive integer, or <code class="inline">:infinity</code>. If none is provided, the timeout configured on the domain is used.</p></li><li><p><code class="inline">:tracer</code> (one or a list of module that adopts <a href="Ash.Tracer.xhtml"><code class="inline">Ash.Tracer</code></a>) - A tracer that implements the <a href="Ash.Tracer.xhtml"><code class="inline">Ash.Tracer</code></a> behaviour. See that module for more.</p></li><li><p><code class="inline">:action</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">term/0</code></a>) - The action to use, either an Action struct or the name of the action</p></li><li><p><code class="inline">:authorize?</code> - If an actor option is provided (even if it is <code class="inline">nil</code>), authorization happens automatically. If not, this flag can be used to authorize with no user.</p></li><li><p><code class="inline">:context</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#basic-types"><code class="inline">map/0</code></a>) - Context to set on the query, changeset, or input</p></li><li><p><code class="inline">:tenant</code> (value that implements the <a href="Ash.ToTenant.xhtml"><code class="inline">Ash.ToTenant</code></a> protocol) - A tenant to set on the query or changeset</p></li><li><p><code class="inline">:actor</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">term/0</code></a>) - If an actor is provided, it will be used in conjunction with the authorizers of a resource to authorize access</p></li><li><p><code class="inline">:scope</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">term/0</code></a>) - A value that implements the <a href="Ash.Scope.ToOpts.xhtml"><code class="inline">Ash.Scope.ToOpts</code></a> protocol, for passing around actor/tenant/context in a single value. See <a href="Ash.Scope.ToOpts.xhtml"><code class="inline">Ash.Scope.ToOpts</code></a> for more.</p></li></ul><h2 id="read/2-pagination" class="section-heading"><a href="#read/2-pagination" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Pagination</span></h2><h4>Limit/offset pagination</h4><ul><li><p><code class="inline">:offset</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#basic-types"><code class="inline">non_neg_integer/0</code></a>) - The number of records to skip from the beginning of the query</p></li><li><p><code class="inline">:limit</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#basic-types"><code class="inline">pos_integer/0</code></a>) - The number of records to include in the page</p></li><li><p><code class="inline">:filter</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">term/0</code></a>) - A filter to apply for pagination purposes, that should not be considered in the full count.<br/>This is used by the liveview paginator to only fetch the records that were <em>already</em> on the
page when refreshing data, to avoid pages jittering.</p></li><li><p><code class="inline">:count</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">boolean/0</code></a>) - Whether or not to return the page with a full count of all records</p></li></ul><h4>Keyset pagination</h4><ul><li><p><code class="inline">:before</code> (<a href="https://hexdocs.pm/elixir/String.html#t:t/0"><code class="inline">String.t/0</code></a>) - Get records that appear before the provided keyset (mutually exclusive with <code class="inline">after</code>)</p></li><li><p><code class="inline">:after</code> (<a href="https://hexdocs.pm/elixir/String.html#t:t/0"><code class="inline">String.t/0</code></a>) - Get records that appear after the provided keyset (mutually exclusive with <code class="inline">before</code>)</p></li><li><p><code class="inline">:limit</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#basic-types"><code class="inline">pos_integer/0</code></a>) - How many records to include in the page</p></li><li><p><code class="inline">:filter</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">term/0</code></a>) - See the <code class="inline">filter</code> option for offset pagination, this behaves the same.</p></li><li><p><code class="inline">:count</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">boolean/0</code></a>) - Whether or not to return the page with a full count of all records</p></li></ul>
  </section>
</section>
<section class="detail" id="read!/2">

    <span id="read!/1"></span>

  <div class="detail-header">
    <a href="#read!/2" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">read!(query, opts \\ [])</h1>


        <a href="https://github.com/ash-project/ash/blob/v3.5.33/lib/ash.ex#L2702" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> read!(<a href="Ash.Query.xhtml#t:t/0">Ash.Query.t</a>() | <a href="Ash.Resource.xhtml#t:t/0">Ash.Resource.t</a>(), <a href="https://hexdocs.pm/elixir/Keyword.html#t:t/0">Keyword.t</a>()) ::
  [<a href="Ash.Resource.xhtml#t:record/0">Ash.Resource.record</a>()] | <a href="Ash.Page.xhtml#t:page/0">Ash.Page.page</a>() | <a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types">no_return</a>()</pre>

      </div>

<p>Run an <a href="Ash.Query.xhtml"><code class="inline">Ash.Query</code></a>. See <a href="#read/2"><code class="inline">read/2</code></a> for more.</p><h2 id="read!/2-examples" class="section-heading"><a href="#read!/2-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Ash</samp><samp class="o">.</samp><samp class="n">read!</samp><samp class="p" data-group-id="9534919759-1">(</samp><samp class="nc">MyApp.Post</samp><samp class="p" data-group-id="9534919759-1">)</samp><samp class="w">
</samp><samp class="p" data-group-id="9534919759-2">[</samp><samp class="p" data-group-id="9534919759-3">%</samp><samp class="nc" data-group-id="9534919759-3">MyApp.Post</samp><samp class="p" data-group-id="9534919759-3">{</samp><samp class="ss">id</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">1</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">title</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;Hello&quot;</samp><samp class="p" data-group-id="9534919759-3">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="9534919759-4">%</samp><samp class="nc" data-group-id="9534919759-4">MyApp.Post</samp><samp class="p" data-group-id="9534919759-4">{</samp><samp class="ss">id</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">2</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">title</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;World&quot;</samp><samp class="p" data-group-id="9534919759-4">}</samp><samp class="p" data-group-id="9534919759-2">]</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">MyApp.Post</samp><samp class="w"> </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">filter</samp><samp class="p" data-group-id="9534919759-5">(</samp><samp class="ss">published</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">true</samp><samp class="p" data-group-id="9534919759-5">)</samp><samp class="w"> </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Ash</samp><samp class="o">.</samp><samp class="n">read!</samp><samp class="p" data-group-id="9534919759-6">(</samp><samp class="p" data-group-id="9534919759-6">)</samp><samp class="w">
</samp><samp class="p" data-group-id="9534919759-7">[</samp><samp class="p" data-group-id="9534919759-8">%</samp><samp class="nc" data-group-id="9534919759-8">MyApp.Post</samp><samp class="p" data-group-id="9534919759-8">{</samp><samp class="ss">id</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">1</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">title</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;Hello&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">published</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">true</samp><samp class="p" data-group-id="9534919759-8">}</samp><samp class="p" data-group-id="9534919759-7">]</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">MyApp.Post</samp><samp class="w"> </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">limit</samp><samp class="p" data-group-id="9534919759-9">(</samp><samp class="mi">5</samp><samp class="p" data-group-id="9534919759-9">)</samp><samp class="w"> </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Ash</samp><samp class="o">.</samp><samp class="n">read!</samp><samp class="p" data-group-id="9534919759-10">(</samp><samp class="p" data-group-id="9534919759-10">)</samp><samp class="w">
</samp><samp class="p" data-group-id="9534919759-11">[</samp><samp class="p" data-group-id="9534919759-12">%</samp><samp class="nc" data-group-id="9534919759-12">MyApp.Post</samp><samp class="p" data-group-id="9534919759-12">{</samp><samp class="p" data-group-id="9534919759-12">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="9534919759-13">%</samp><samp class="nc" data-group-id="9534919759-13">MyApp.Post</samp><samp class="p" data-group-id="9534919759-13">{</samp><samp class="p" data-group-id="9534919759-13">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">...</samp><samp class="p" data-group-id="9534919759-11">]</samp></code></pre><h2 id="read!/2-see-also" class="section-heading"><a href="#read!/2-see-also" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">See also</span></h2><ul><li><a href="#read/2"><code class="inline">read/2</code></a> for the non-raising version</li><li><a href="read-actions.xhtml">Read Actions Guide</a> for understanding read operations</li></ul>
  </section>
</section>
<section class="detail" id="read_first/2">

    <span id="read_first/1"></span>

  <div class="detail-header">
    <a href="#read_first/2" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">read_first(query, opts \\ [])</h1>


        <a href="https://github.com/ash-project/ash/blob/v3.5.33/lib/ash.ex#L2983" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> read_first(
  resource_or_query :: <a href="Ash.Query.xhtml#t:t/0">Ash.Query.t</a>() | <a href="Ash.Resource.xhtml#t:t/0">Ash.Resource.t</a>(),
  opts :: <a href="https://hexdocs.pm/elixir/Keyword.html#t:t/0">Keyword.t</a>()
) ::
  {:ok, <a href="Ash.Resource.xhtml#t:record/0">Ash.Resource.record</a>() | nil} | {:error, <a href="Ash.Error.xhtml#t:t/0">Ash.Error.t</a>()}</pre>

      </div>

<p>Runs a query on a resource, returning a first result, nil, or an error.</p><p>Query is automatically limited to only return one result, unlike <code class="inline">read_one/3</code></p><h2 id="read_first/2-examples" class="section-heading"><a href="#read_first/2-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Ash</samp><samp class="o">.</samp><samp class="n">read_first</samp><samp class="p" data-group-id="8445423604-1">(</samp><samp class="nc">MyApp.Post</samp><samp class="p" data-group-id="8445423604-1">)</samp><samp class="w">
</samp><samp class="p" data-group-id="8445423604-2">{</samp><samp class="ss">:ok</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="8445423604-3">%</samp><samp class="nc" data-group-id="8445423604-3">MyApp.Post</samp><samp class="p" data-group-id="8445423604-3">{</samp><samp class="ss">id</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">1</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">title</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;First Post&quot;</samp><samp class="p" data-group-id="8445423604-3">}</samp><samp class="p" data-group-id="8445423604-2">}</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">MyApp.Post</samp><samp class="w"> </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">sort</samp><samp class="p" data-group-id="8445423604-4">(</samp><samp class="ss">:created_at</samp><samp class="p" data-group-id="8445423604-4">)</samp><samp class="w"> </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Ash</samp><samp class="o">.</samp><samp class="n">read_first</samp><samp class="p" data-group-id="8445423604-5">(</samp><samp class="p" data-group-id="8445423604-5">)</samp><samp class="w">
</samp><samp class="p" data-group-id="8445423604-6">{</samp><samp class="ss">:ok</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="8445423604-7">%</samp><samp class="nc" data-group-id="8445423604-7">MyApp.Post</samp><samp class="p" data-group-id="8445423604-7">{</samp><samp class="ss">id</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">1</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">created_at</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="ld">~U[2023-01-01 00:00:00Z]</samp><samp class="p" data-group-id="8445423604-7">}</samp><samp class="p" data-group-id="8445423604-6">}</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">MyApp.Post</samp><samp class="w"> </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">filter</samp><samp class="p" data-group-id="8445423604-8">(</samp><samp class="ss">published</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">false</samp><samp class="p" data-group-id="8445423604-8">)</samp><samp class="w"> </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Ash</samp><samp class="o">.</samp><samp class="n">read_first</samp><samp class="p" data-group-id="8445423604-9">(</samp><samp class="p" data-group-id="8445423604-9">)</samp><samp class="w">
</samp><samp class="p" data-group-id="8445423604-10">{</samp><samp class="ss">:ok</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="no">nil</samp><samp class="p" data-group-id="8445423604-10">}</samp></code></pre><h2 id="read_first/2-see-also" class="section-heading"><a href="#read_first/2-see-also" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">See also</span></h2><ul><li><a href="#read_first!/2"><code class="inline">read_first!/2</code></a> for the raising version</li></ul><h2 id="read_first/2-options" class="section-heading"><a href="#read_first/2-options" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Options</span></h2><ul><li><p><code class="inline">:not_found_error?</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">boolean/0</code></a>) - Whether or not to return an <a href="Ash.Error.Query.NotFound.xhtml"><code class="inline">Ash.Error.Query.NotFound</code></a> if no record is found. The default value is <code class="inline">false</code>.</p></li><li><p><code class="inline">:page</code> - Pagination options, see <a href="#read/2"><code class="inline">Ash.read/2</code></a> for more.</p></li><li><p><code class="inline">:load</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">term/0</code></a>) - A load statement to add onto the query</p></li><li><p><code class="inline">:max_concurrency</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#basic-types"><code class="inline">non_neg_integer/0</code></a>) - The maximum number of processes allowed to be started for parallel loading of relationships and calculations. Defaults to <code class="inline">System.schedulers_online() * 2</code></p></li><li><p><code class="inline">:lock</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">term/0</code></a>) - A lock statement to add onto the query</p></li><li><p><code class="inline">:return_query?</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">boolean/0</code></a>) - If <code class="inline">true</code>, the query that was ultimately used is returned as a third tuple element.<br/>The query goes through many potential changes during a request, potentially adding
authorization filters, or replacing relationships for other data layers with their
corresponding ids. This option can be used to get the true query that was sent to
the data layer. The default value is <code class="inline">false</code>.</p></li><li><p><code class="inline">:skip_unknown_inputs</code> - A list of inputs that, if provided, will be ignored if they are not recognized by the action. Use <code class="inline">:*</code> to indicate all unknown keys.</p></li><li><p><code class="inline">:reuse_values?</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">boolean/0</code></a>) - Whether calculations are allowed to reuse values that have already been loaded, or must refetch them from the data layer. The default value is <code class="inline">false</code>.</p></li><li><p><code class="inline">:strict?</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">boolean/0</code></a>) - If set to true, only specified attributes will be loaded when passing
  a list of fields to fetch on a relationship, which allows for more
  optimized data-fetching.<br/>  See <a href="Ash.Query.xhtml#load/2"><code class="inline">Ash.Query.load/2</code></a>. The default value is <code class="inline">false</code>.</p></li><li><p><code class="inline">:authorize_with</code> - If set to <code class="inline">:error</code>, instead of applying authorization filters as a filter, any records not matching the authorization filter will cause an error to be returned. Valid values are :filter, :error The default value is <code class="inline">:filter</code>.</p></li><li><p><code class="inline">:domain</code> (<a href="Ash.Domain.xhtml"><code class="inline">Ash.Domain</code></a>) - The domain to use.</p></li><li><p><code class="inline">:timeout</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">timeout/0</code></a>) - A positive integer, or <code class="inline">:infinity</code>. If none is provided, the timeout configured on the domain is used.</p></li><li><p><code class="inline">:tracer</code> (one or a list of module that adopts <a href="Ash.Tracer.xhtml"><code class="inline">Ash.Tracer</code></a>) - A tracer that implements the <a href="Ash.Tracer.xhtml"><code class="inline">Ash.Tracer</code></a> behaviour. See that module for more.</p></li><li><p><code class="inline">:action</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">term/0</code></a>) - The action to use, either an Action struct or the name of the action</p></li><li><p><code class="inline">:authorize?</code> - If an actor option is provided (even if it is <code class="inline">nil</code>), authorization happens automatically. If not, this flag can be used to authorize with no user.</p></li><li><p><code class="inline">:context</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#basic-types"><code class="inline">map/0</code></a>) - Context to set on the query, changeset, or input</p></li><li><p><code class="inline">:tenant</code> (value that implements the <a href="Ash.ToTenant.xhtml"><code class="inline">Ash.ToTenant</code></a> protocol) - A tenant to set on the query or changeset</p></li><li><p><code class="inline">:actor</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">term/0</code></a>) - If an actor is provided, it will be used in conjunction with the authorizers of a resource to authorize access</p></li><li><p><code class="inline">:scope</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">term/0</code></a>) - A value that implements the <a href="Ash.Scope.ToOpts.xhtml"><code class="inline">Ash.Scope.ToOpts</code></a> protocol, for passing around actor/tenant/context in a single value. See <a href="Ash.Scope.ToOpts.xhtml"><code class="inline">Ash.Scope.ToOpts</code></a> for more.</p></li></ul>
  </section>
</section>
<section class="detail" id="read_first!/2">

    <span id="read_first!/1"></span>

  <div class="detail-header">
    <a href="#read_first!/2" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">read_first!(query, opts \\ [])</h1>


        <a href="https://github.com/ash-project/ash/blob/v3.5.33/lib/ash.ex#L2947" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> read_first!(
  resource_or_query :: <a href="Ash.Query.xhtml#t:t/0">Ash.Query.t</a>() | <a href="Ash.Resource.xhtml#t:t/0">Ash.Resource.t</a>(),
  opts :: <a href="https://hexdocs.pm/elixir/Keyword.html#t:t/0">Keyword.t</a>()
) ::
  <a href="Ash.Resource.xhtml#t:record/0">Ash.Resource.record</a>() | nil</pre>

      </div>

<p>Runs an Ash query, returning the first result or nil, or raising an error. See <a href="#read_first/2"><code class="inline">read_first/2</code></a> for more.</p><h2 id="read_first!/2-examples" class="section-heading"><a href="#read_first!/2-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Ash</samp><samp class="o">.</samp><samp class="n">read_first!</samp><samp class="p" data-group-id="6121255551-1">(</samp><samp class="nc">MyApp.Post</samp><samp class="p" data-group-id="6121255551-1">)</samp><samp class="w">
</samp><samp class="p" data-group-id="6121255551-2">%</samp><samp class="nc" data-group-id="6121255551-2">MyApp.Post</samp><samp class="p" data-group-id="6121255551-2">{</samp><samp class="ss">id</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">1</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">title</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;First Post&quot;</samp><samp class="p" data-group-id="6121255551-2">}</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">MyApp.Post</samp><samp class="w"> </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">sort</samp><samp class="p" data-group-id="6121255551-3">(</samp><samp class="ss">:created_at</samp><samp class="p" data-group-id="6121255551-3">)</samp><samp class="w"> </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Ash</samp><samp class="o">.</samp><samp class="n">read_first!</samp><samp class="p" data-group-id="6121255551-4">(</samp><samp class="p" data-group-id="6121255551-4">)</samp><samp class="w">
</samp><samp class="p" data-group-id="6121255551-5">%</samp><samp class="nc" data-group-id="6121255551-5">MyApp.Post</samp><samp class="p" data-group-id="6121255551-5">{</samp><samp class="ss">id</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">1</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">created_at</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="ld">~U[2023-01-01 00:00:00Z]</samp><samp class="p" data-group-id="6121255551-5">}</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">MyApp.Post</samp><samp class="w"> </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">filter</samp><samp class="p" data-group-id="6121255551-6">(</samp><samp class="ss">published</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">false</samp><samp class="p" data-group-id="6121255551-6">)</samp><samp class="w"> </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Ash</samp><samp class="o">.</samp><samp class="n">read_first!</samp><samp class="p" data-group-id="6121255551-7">(</samp><samp class="p" data-group-id="6121255551-7">)</samp><samp class="w">
</samp><samp class="no">nil</samp></code></pre><h2 id="read_first!/2-see-also" class="section-heading"><a href="#read_first!/2-see-also" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">See also</span></h2><ul><li><a href="#read_first/2"><code class="inline">read_first/2</code></a> for the non-raising version</li></ul>
  </section>
</section>
<section class="detail" id="read_one/2">

    <span id="read_one/1"></span>

  <div class="detail-header">
    <a href="#read_one/2" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">read_one(query, opts \\ [])</h1>


        <a href="https://github.com/ash-project/ash/blob/v3.5.33/lib/ash.ex#L2904" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> read_one(
  resource_or_query :: <a href="Ash.Query.xhtml#t:t/0">Ash.Query.t</a>() | <a href="Ash.Resource.xhtml#t:t/0">Ash.Resource.t</a>(),
  opts :: <a href="https://hexdocs.pm/elixir/Keyword.html#t:t/0">Keyword.t</a>()
) ::
  {:ok, <a href="Ash.Resource.xhtml#t:record/0">Ash.Resource.record</a>() | nil} | {:error, <a href="Ash.Error.xhtml#t:t/0">Ash.Error.t</a>()}</pre>

      </div>

<p>Runs a query on a resource, returning a single result, nil, or an error.</p><p>If more than one result would be returned, an error is returned instead.</p><h2 id="read_one/2-examples" class="section-heading"><a href="#read_one/2-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">MyApp.Post</samp><samp class="w"> </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">filter</samp><samp class="p" data-group-id="1306702769-1">(</samp><samp class="ss">published</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">true</samp><samp class="p" data-group-id="1306702769-1">)</samp><samp class="w"> </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Ash</samp><samp class="o">.</samp><samp class="n">read_one</samp><samp class="p" data-group-id="1306702769-2">(</samp><samp class="p" data-group-id="1306702769-2">)</samp><samp class="w">
</samp><samp class="p" data-group-id="1306702769-3">{</samp><samp class="ss">:ok</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="1306702769-4">%</samp><samp class="nc" data-group-id="1306702769-4">MyApp.Post</samp><samp class="p" data-group-id="1306702769-4">{</samp><samp class="ss">id</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">1</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">published</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">true</samp><samp class="p" data-group-id="1306702769-4">}</samp><samp class="p" data-group-id="1306702769-3">}</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">MyApp.User</samp><samp class="w"> </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">filter</samp><samp class="p" data-group-id="1306702769-5">(</samp><samp class="ss">email</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;nonexistent@example.com&quot;</samp><samp class="p" data-group-id="1306702769-5">)</samp><samp class="w"> </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Ash</samp><samp class="o">.</samp><samp class="n">read_one</samp><samp class="p" data-group-id="1306702769-6">(</samp><samp class="p" data-group-id="1306702769-6">)</samp><samp class="w">
</samp><samp class="p" data-group-id="1306702769-7">{</samp><samp class="ss">:ok</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="no">nil</samp><samp class="p" data-group-id="1306702769-7">}</samp></code></pre><h2 id="read_one/2-see-also" class="section-heading"><a href="#read_one/2-see-also" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">See also</span></h2><ul><li><a href="#read_one!/2"><code class="inline">read_one!/2</code></a> for the raising version</li></ul><h2 id="read_one/2-options" class="section-heading"><a href="#read_one/2-options" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Options</span></h2><ul><li><p><code class="inline">:not_found_error?</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">boolean/0</code></a>) - Whether or not to return an <a href="Ash.Error.Query.NotFound.xhtml"><code class="inline">Ash.Error.Query.NotFound</code></a> if no record is found. The default value is <code class="inline">false</code>.</p></li><li><p><code class="inline">:page</code> - Pagination options, see <a href="#read/2"><code class="inline">Ash.read/2</code></a> for more.</p></li><li><p><code class="inline">:load</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">term/0</code></a>) - A load statement to add onto the query</p></li><li><p><code class="inline">:max_concurrency</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#basic-types"><code class="inline">non_neg_integer/0</code></a>) - The maximum number of processes allowed to be started for parallel loading of relationships and calculations. Defaults to <code class="inline">System.schedulers_online() * 2</code></p></li><li><p><code class="inline">:lock</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">term/0</code></a>) - A lock statement to add onto the query</p></li><li><p><code class="inline">:return_query?</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">boolean/0</code></a>) - If <code class="inline">true</code>, the query that was ultimately used is returned as a third tuple element.<br/>The query goes through many potential changes during a request, potentially adding
authorization filters, or replacing relationships for other data layers with their
corresponding ids. This option can be used to get the true query that was sent to
the data layer. The default value is <code class="inline">false</code>.</p></li><li><p><code class="inline">:skip_unknown_inputs</code> - A list of inputs that, if provided, will be ignored if they are not recognized by the action. Use <code class="inline">:*</code> to indicate all unknown keys.</p></li><li><p><code class="inline">:reuse_values?</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">boolean/0</code></a>) - Whether calculations are allowed to reuse values that have already been loaded, or must refetch them from the data layer. The default value is <code class="inline">false</code>.</p></li><li><p><code class="inline">:strict?</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">boolean/0</code></a>) - If set to true, only specified attributes will be loaded when passing
  a list of fields to fetch on a relationship, which allows for more
  optimized data-fetching.<br/>  See <a href="Ash.Query.xhtml#load/2"><code class="inline">Ash.Query.load/2</code></a>. The default value is <code class="inline">false</code>.</p></li><li><p><code class="inline">:authorize_with</code> - If set to <code class="inline">:error</code>, instead of applying authorization filters as a filter, any records not matching the authorization filter will cause an error to be returned. Valid values are :filter, :error The default value is <code class="inline">:filter</code>.</p></li><li><p><code class="inline">:domain</code> (<a href="Ash.Domain.xhtml"><code class="inline">Ash.Domain</code></a>) - The domain to use.</p></li><li><p><code class="inline">:timeout</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">timeout/0</code></a>) - A positive integer, or <code class="inline">:infinity</code>. If none is provided, the timeout configured on the domain is used.</p></li><li><p><code class="inline">:tracer</code> (one or a list of module that adopts <a href="Ash.Tracer.xhtml"><code class="inline">Ash.Tracer</code></a>) - A tracer that implements the <a href="Ash.Tracer.xhtml"><code class="inline">Ash.Tracer</code></a> behaviour. See that module for more.</p></li><li><p><code class="inline">:action</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">term/0</code></a>) - The action to use, either an Action struct or the name of the action</p></li><li><p><code class="inline">:authorize?</code> - If an actor option is provided (even if it is <code class="inline">nil</code>), authorization happens automatically. If not, this flag can be used to authorize with no user.</p></li><li><p><code class="inline">:context</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#basic-types"><code class="inline">map/0</code></a>) - Context to set on the query, changeset, or input</p></li><li><p><code class="inline">:tenant</code> (value that implements the <a href="Ash.ToTenant.xhtml"><code class="inline">Ash.ToTenant</code></a> protocol) - A tenant to set on the query or changeset</p></li><li><p><code class="inline">:actor</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">term/0</code></a>) - If an actor is provided, it will be used in conjunction with the authorizers of a resource to authorize access</p></li><li><p><code class="inline">:scope</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">term/0</code></a>) - A value that implements the <a href="Ash.Scope.ToOpts.xhtml"><code class="inline">Ash.Scope.ToOpts</code></a> protocol, for passing around actor/tenant/context in a single value. See <a href="Ash.Scope.ToOpts.xhtml"><code class="inline">Ash.Scope.ToOpts</code></a> for more.</p></li></ul>
  </section>
</section>
<section class="detail" id="read_one!/2">

    <span id="read_one!/1"></span>

  <div class="detail-header">
    <a href="#read_one!/2" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">read_one!(query, opts \\ [])</h1>


        <a href="https://github.com/ash-project/ash/blob/v3.5.33/lib/ash.ex#L2863" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> read_one!(
  resource_or_query :: <a href="Ash.Query.xhtml#t:t/0">Ash.Query.t</a>() | <a href="Ash.Resource.xhtml#t:t/0">Ash.Resource.t</a>(),
  opts :: <a href="https://hexdocs.pm/elixir/Keyword.html#t:t/0">Keyword.t</a>()
) ::
  <a href="Ash.Resource.xhtml#t:record/0">Ash.Resource.record</a>() | nil</pre>

      </div>

<p>Runs an ash query, returning a single result or raise an error. See <a href="#read_one/2"><code class="inline">read_one/2</code></a> for more.</p><h2 id="read_one!/2-examples" class="section-heading"><a href="#read_one!/2-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Ash</samp><samp class="o">.</samp><samp class="n">read_one!</samp><samp class="p" data-group-id="7166410177-1">(</samp><samp class="nc">MyApp.User</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">email</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;user@example.com&quot;</samp><samp class="p" data-group-id="7166410177-1">)</samp><samp class="w">
</samp><samp class="p" data-group-id="7166410177-2">%</samp><samp class="nc" data-group-id="7166410177-2">MyApp.User</samp><samp class="p" data-group-id="7166410177-2">{</samp><samp class="ss">id</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">1</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">email</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;user@example.com&quot;</samp><samp class="p" data-group-id="7166410177-2">}</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">MyApp.Post</samp><samp class="w"> </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">filter</samp><samp class="p" data-group-id="7166410177-3">(</samp><samp class="ss">published</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">true</samp><samp class="p" data-group-id="7166410177-3">)</samp><samp class="w"> </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Ash</samp><samp class="o">.</samp><samp class="n">read_one!</samp><samp class="p" data-group-id="7166410177-4">(</samp><samp class="p" data-group-id="7166410177-4">)</samp><samp class="w">
</samp><samp class="p" data-group-id="7166410177-5">%</samp><samp class="nc" data-group-id="7166410177-5">MyApp.Post</samp><samp class="p" data-group-id="7166410177-5">{</samp><samp class="ss">id</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">1</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">published</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">true</samp><samp class="p" data-group-id="7166410177-5">}</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">MyApp.User</samp><samp class="w"> </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">filter</samp><samp class="p" data-group-id="7166410177-6">(</samp><samp class="ss">email</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;nonexistent@example.com&quot;</samp><samp class="p" data-group-id="7166410177-6">)</samp><samp class="w"> </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Ash</samp><samp class="o">.</samp><samp class="n">read_one!</samp><samp class="p" data-group-id="7166410177-7">(</samp><samp class="p" data-group-id="7166410177-7">)</samp><samp class="w">
</samp><samp class="no">nil</samp></code></pre><h2 id="read_one!/2-see-also" class="section-heading"><a href="#read_one!/2-see-also" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">See also</span></h2><ul><li><a href="#read_one/2"><code class="inline">read_one/2</code></a> for the non-raising version</li></ul>
  </section>
</section>
<section class="detail" id="reload/2">

    <span id="reload/1"></span>

  <div class="detail-header">
    <a href="#reload/2" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">reload(record, opts \\ [])</h1>


        <a href="https://github.com/ash-project/ash/blob/v3.5.33/lib/ash.ex#L2833" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> reload(record :: <a href="Ash.Resource.xhtml#t:record/0">Ash.Resource.record</a>(), opts :: <a href="https://hexdocs.pm/elixir/Keyword.html#t:t/0">Keyword.t</a>()) ::
  {:ok, <a href="Ash.Resource.xhtml#t:record/0">Ash.Resource.record</a>()} | {:error, <a href="Ash.Error.xhtml#t:t/0">Ash.Error.t</a>()}</pre>

      </div>

<p>Refetches a record by primary key. See <a href="#get/2"><code class="inline">get/2</code></a> for more.</p><h2 id="reload/2-examples" class="section-heading"><a href="#reload/2-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Ash</samp><samp class="o">.</samp><samp class="n">reload</samp><samp class="p" data-group-id="1191086180-1">(</samp><samp class="n">post</samp><samp class="p" data-group-id="1191086180-1">)</samp><samp class="w">
</samp><samp class="p" data-group-id="1191086180-2">{</samp><samp class="ss">:ok</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="1191086180-3">%</samp><samp class="nc" data-group-id="1191086180-3">MyApp.Post</samp><samp class="p" data-group-id="1191086180-3">{</samp><samp class="ss">id</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">1</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">title</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;Updated Title&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">updated_at</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="ld">~U[2023-12-25 10:30:00Z]</samp><samp class="p" data-group-id="1191086180-3">}</samp><samp class="p" data-group-id="1191086180-2">}</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Ash</samp><samp class="o">.</samp><samp class="n">reload</samp><samp class="p" data-group-id="1191086180-4">(</samp><samp class="n">user</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">load</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="1191086180-5">[</samp><samp class="ss">:posts</samp><samp class="p" data-group-id="1191086180-5">]</samp><samp class="p" data-group-id="1191086180-4">)</samp><samp class="w">
</samp><samp class="p" data-group-id="1191086180-6">{</samp><samp class="ss">:ok</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="1191086180-7">%</samp><samp class="nc" data-group-id="1191086180-7">MyApp.User</samp><samp class="p" data-group-id="1191086180-7">{</samp><samp class="ss">id</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">1</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">posts</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="1191086180-8">[</samp><samp class="p" data-group-id="1191086180-9">%</samp><samp class="nc" data-group-id="1191086180-9">MyApp.Post</samp><samp class="p" data-group-id="1191086180-9">{</samp><samp class="p" data-group-id="1191086180-9">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">...</samp><samp class="p" data-group-id="1191086180-8">]</samp><samp class="p" data-group-id="1191086180-7">}</samp><samp class="p" data-group-id="1191086180-6">}</samp></code></pre><h2 id="reload/2-see-also" class="section-heading"><a href="#reload/2-see-also" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">See also</span></h2><ul><li><a href="#reload!/2"><code class="inline">reload!/2</code></a> for the raising version</li></ul>
  </section>
</section>
<section class="detail" id="reload!/2">

    <span id="reload!/1"></span>

  <div class="detail-header">
    <a href="#reload!/2" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">reload!(record, opts \\ [])</h1>


        <a href="https://github.com/ash-project/ash/blob/v3.5.33/lib/ash.ex#L2806" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> reload!(record :: <a href="Ash.Resource.xhtml#t:record/0">Ash.Resource.record</a>(), opts :: <a href="https://hexdocs.pm/elixir/Keyword.html#t:t/0">Keyword.t</a>()) ::
  <a href="Ash.Resource.xhtml#t:record/0">Ash.Resource.record</a>() | <a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types">no_return</a>()</pre>

      </div>

<p>Refetches a record by primary key or raises an error. See <a href="#reload/2"><code class="inline">reload/2</code></a> for more.</p><h2 id="reload!/2-examples" class="section-heading"><a href="#reload!/2-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Ash</samp><samp class="o">.</samp><samp class="n">reload!</samp><samp class="p" data-group-id="4800468175-1">(</samp><samp class="n">post</samp><samp class="p" data-group-id="4800468175-1">)</samp><samp class="w">
</samp><samp class="p" data-group-id="4800468175-2">%</samp><samp class="nc" data-group-id="4800468175-2">MyApp.Post</samp><samp class="p" data-group-id="4800468175-2">{</samp><samp class="ss">id</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">1</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">title</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;Updated Title&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">updated_at</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="ld">~U[2023-12-25 10:30:00Z]</samp><samp class="p" data-group-id="4800468175-2">}</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Ash</samp><samp class="o">.</samp><samp class="n">reload!</samp><samp class="p" data-group-id="4800468175-3">(</samp><samp class="n">user</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">load</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="4800468175-4">[</samp><samp class="ss">:posts</samp><samp class="p" data-group-id="4800468175-4">]</samp><samp class="p" data-group-id="4800468175-3">)</samp><samp class="w">
</samp><samp class="p" data-group-id="4800468175-5">%</samp><samp class="nc" data-group-id="4800468175-5">MyApp.User</samp><samp class="p" data-group-id="4800468175-5">{</samp><samp class="ss">id</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">1</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">posts</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="4800468175-6">[</samp><samp class="p" data-group-id="4800468175-7">%</samp><samp class="nc" data-group-id="4800468175-7">MyApp.Post</samp><samp class="p" data-group-id="4800468175-7">{</samp><samp class="p" data-group-id="4800468175-7">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">...</samp><samp class="p" data-group-id="4800468175-6">]</samp><samp class="p" data-group-id="4800468175-5">}</samp></code></pre><h2 id="reload!/2-see-also" class="section-heading"><a href="#reload!/2-see-also" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">See also</span></h2><ul><li><a href="#reload/2"><code class="inline">reload/2</code></a> for the non-raising version</li><li><code class="inline">d:Ash.Resource.Dsl.relationships</code> for defining relationships to load</li></ul>
  </section>
</section>
<section class="detail" id="run_action/2">

    <span id="run_action/1"></span>

  <div class="detail-header">
    <a href="#run_action/2" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">run_action(input, opts \\ [])</h1>


        <a href="https://github.com/ash-project/ash/blob/v3.5.33/lib/ash.ex#L1897" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> run_action(input :: <a href="Ash.ActionInput.xhtml#t:t/0">Ash.ActionInput.t</a>(), opts :: <a href="https://hexdocs.pm/elixir/Keyword.html#t:t/0">Keyword.t</a>()) ::
  :ok | {:ok, <a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types">term</a>()} | {:error, <a href="Ash.Error.xhtml#t:t/0">Ash.Error.t</a>()}</pre>

      </div>

<p>Runs a generic action.</p><h2 id="run_action/2-examples" class="section-heading"><a href="#run_action/2-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="n">input</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="nc">Ash.ActionInput</samp><samp class="o">.</samp><samp class="n">for_action</samp><samp class="p" data-group-id="1707332397-1">(</samp><samp class="nc">MyApp.Post</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:send_email</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="1707332397-2">%{</samp><samp class="ss">email</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;test@example.com&quot;</samp><samp class="p" data-group-id="1707332397-2">}</samp><samp class="p" data-group-id="1707332397-1">)</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Ash</samp><samp class="o">.</samp><samp class="n">run_action</samp><samp class="p" data-group-id="1707332397-3">(</samp><samp class="n">input</samp><samp class="p" data-group-id="1707332397-3">)</samp><samp class="w">
</samp><samp class="p" data-group-id="1707332397-4">{</samp><samp class="ss">:ok</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:ok</samp><samp class="p" data-group-id="1707332397-4">}</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="n">input</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="nc">Ash.ActionInput</samp><samp class="o">.</samp><samp class="n">for_action</samp><samp class="p" data-group-id="1707332397-5">(</samp><samp class="nc">MyApp.Calculator</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:calculate_tax</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="1707332397-6">%{</samp><samp class="ss">amount</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">100</samp><samp class="p" data-group-id="1707332397-6">}</samp><samp class="p" data-group-id="1707332397-5">)</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Ash</samp><samp class="o">.</samp><samp class="n">run_action</samp><samp class="p" data-group-id="1707332397-7">(</samp><samp class="n">input</samp><samp class="p" data-group-id="1707332397-7">)</samp><samp class="w">
</samp><samp class="p" data-group-id="1707332397-8">{</samp><samp class="ss">:ok</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mf">8.25</samp><samp class="p" data-group-id="1707332397-8">}</samp></code></pre><h2 id="run_action/2-see-also" class="section-heading"><a href="#run_action/2-see-also" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">See also</span></h2><ul><li><a href="#run_action!/2"><code class="inline">run_action!/2</code></a> for the raising version</li><li><code class="inline">d:Ash.Resource.Dsl.actions.action</code> for defining generic actions</li><li><a href="generic-actions.xhtml">Generic Actions Guide</a> for understanding generic actions</li><li><a href="actions.xhtml">Actions Guide</a> for general action concepts</li></ul><h2 id="run_action/2-options" class="section-heading"><a href="#run_action/2-options" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Options</span></h2><ul><li><p><code class="inline">:actor</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">term/0</code></a>) - The actor for handling <a href="https://hexdocs.pm/elixir/Kernel.SpecialForms.html#%5E/1"><code class="inline">^actor/1</code></a> templates, supplied to calculation context.</p></li><li><p><code class="inline">:scope</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">term/0</code></a>) - A value that implements the <a href="Ash.Scope.ToOpts.xhtml"><code class="inline">Ash.Scope.ToOpts</code></a> protocol. Will overwrite any actor, tenant or context provided. See <a href="Ash.Context.xhtml"><code class="inline">Ash.Context</code></a> for more.</p></li><li><p><code class="inline">:tenant</code> (value that implements the <a href="Ash.ToTenant.xhtml"><code class="inline">Ash.ToTenant</code></a> protocol) - The tenant, supplied to calculation context.</p></li><li><p><code class="inline">:authorize?</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">boolean/0</code></a>) - Whether or not the request should be authorized.</p></li><li><p><code class="inline">:tracer</code> (one or a list of module that adopts <a href="Ash.Tracer.xhtml"><code class="inline">Ash.Tracer</code></a>) - A tracer, provided to the calculation context.</p></li><li><p><code class="inline">:domain</code> (<a href="Ash.Domain.xhtml"><code class="inline">Ash.Domain</code></a>) - The domain to use for the action</p></li><li><p><code class="inline">:context</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#basic-types"><code class="inline">map/0</code></a>) - Context to set on the action input</p></li><li><p><code class="inline">:skip_unknown_inputs</code> - A list of inputs that, if provided, will be ignored if they are not recognized by the action. Use <code class="inline">:*</code> to indicate all unknown keys.</p></li></ul>
  </section>
</section>
<section class="detail" id="run_action!/2">

    <span id="run_action!/1"></span>

  <div class="detail-header">
    <a href="#run_action!/2" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">run_action!(input, opts \\ [])</h1>


        <a href="https://github.com/ash-project/ash/blob/v3.5.33/lib/ash.ex#L1855" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> run_action!(input :: <a href="Ash.ActionInput.xhtml#t:t/0">Ash.ActionInput.t</a>(), opts :: <a href="https://hexdocs.pm/elixir/Keyword.html#t:t/0">Keyword.t</a>()) ::
  <a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types">term</a>() | <a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types">no_return</a>()</pre>

      </div>

<p>Runs a generic action or raises an error. See <a href="#run_action/2"><code class="inline">run_action/2</code></a> for more</p><h2 id="run_action!/2-examples" class="section-heading"><a href="#run_action!/2-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="n">input</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="nc">Ash.ActionInput</samp><samp class="o">.</samp><samp class="n">for_action</samp><samp class="p" data-group-id="0935332270-1">(</samp><samp class="nc">MyApp.Post</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:send_email</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="0935332270-2">%{</samp><samp class="ss">email</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;test@example.com&quot;</samp><samp class="p" data-group-id="0935332270-2">}</samp><samp class="p" data-group-id="0935332270-1">)</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Ash</samp><samp class="o">.</samp><samp class="n">run_action!</samp><samp class="p" data-group-id="0935332270-3">(</samp><samp class="n">input</samp><samp class="p" data-group-id="0935332270-3">)</samp><samp class="w">
</samp><samp class="ss">:ok</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="n">input</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="nc">Ash.ActionInput</samp><samp class="o">.</samp><samp class="n">for_action</samp><samp class="p" data-group-id="0935332270-4">(</samp><samp class="nc">MyApp.Calculator</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:calculate_tax</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="0935332270-5">%{</samp><samp class="ss">amount</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">100</samp><samp class="p" data-group-id="0935332270-5">}</samp><samp class="p" data-group-id="0935332270-4">)</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Ash</samp><samp class="o">.</samp><samp class="n">run_action!</samp><samp class="p" data-group-id="0935332270-6">(</samp><samp class="n">input</samp><samp class="p" data-group-id="0935332270-6">)</samp><samp class="w">
</samp><samp class="mf">8.25</samp></code></pre><h2 id="run_action!/2-see-also" class="section-heading"><a href="#run_action!/2-see-also" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">See also</span></h2><ul><li><a href="#run_action/2"><code class="inline">run_action/2</code></a> for the non-raising version</li><li><code class="inline">d:Ash.Resource.Dsl.actions.action</code> for defining generic actions</li><li><a href="generic-actions.xhtml">Generic Actions Guide</a> for understanding generic actions</li><li><a href="actions.xhtml">Actions Guide</a> for general action concepts</li></ul>
  </section>
</section>
<section class="detail" id="stream!/2">

    <span id="stream!/1"></span>

  <div class="detail-header">
    <a href="#stream!/2" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">stream!(query, opts \\ [])</h1>


        <a href="https://github.com/ash-project/ash/blob/v3.5.33/lib/ash.ex#L2598" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> stream!(query :: <a href="Ash.Query.xhtml#t:t/0">Ash.Query.t</a>() | <a href="Ash.Resource.xhtml#t:t/0">Ash.Resource.t</a>(), opts :: <a href="https://hexdocs.pm/elixir/Keyword.html#t:t/0">Keyword.t</a>()) ::
  <a href="https://hexdocs.pm/elixir/Enumerable.html#t:t/1">Enumerable.t</a>(<a href="Ash.Resource.xhtml#t:record/0">Ash.Resource.record</a>())</pre>

      </div>

<p>Streams the results of a query.</p><h2 id="stream!/2-strategies" class="section-heading"><a href="#stream!/2-strategies" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Strategies</span></h2><p>There are three strategies supported, and the best one available is always chosen. They are,
in order from best to worst:</p><ul><li><code class="inline">:keyset</code></li><li><code class="inline">:offset</code></li><li><code class="inline">:full_read</code></li></ul><p>By default, only <code class="inline">:keyset</code> is supported. If you want to allow worse strategies to be used, pass
the worst one you wish to allow as the <code class="inline">allow_stream_with</code> option, i.e <code class="inline">allow_stream_with: :full_read</code>.
If you wish to specify a specific strategy to use, pass <code class="inline">stream_with: :strategy_name</code>.</p><h3 id="stream!/2-keyset" class="section-heading"><a href="#stream!/2-keyset" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Keyset</span></h3><p>This utilizes keyset pagination to accomplish this stream. The action must support keyset pagination.
This is the most efficient way to stream a query, because it works by using filters which can benefit
from indexes in the data layer.</p><h3 id="stream!/2-offset" class="section-heading"><a href="#stream!/2-offset" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Offset</span></h3><p>This utilizes offset/limit to accomplish this stream. If the action supports offset pagination, that will
be used. Otherwise, if the data layer supports limit/offset, then explicit limits/offsets will be used.
This is a much less efficient way of streaming a resource than <code class="inline">keyset</code>. To use limit/offset to reliably
stream, a sort must always be applied, and limit/offset in the data layer will generally require sorting
the entire table to figure out what is in each batch.</p><h3 id="stream!/2-full-read" class="section-heading"><a href="#stream!/2-full-read" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Full Read</span></h3><p>This reads the entire table into memory with no limit. This is, generally speaking, the least efficient.</p><h2 id="stream!/2-examples" class="section-heading"><a href="#stream!/2-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">MyApp.Post</samp><samp class="w"> </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Ash</samp><samp class="o">.</samp><samp class="n">stream!</samp><samp class="p" data-group-id="8197483341-1">(</samp><samp class="p" data-group-id="8197483341-1">)</samp><samp class="w"> </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Enum</samp><samp class="o">.</samp><samp class="n">take</samp><samp class="p" data-group-id="8197483341-2">(</samp><samp class="mi">10</samp><samp class="p" data-group-id="8197483341-2">)</samp><samp class="w">
</samp><samp class="p" data-group-id="8197483341-3">[</samp><samp class="p" data-group-id="8197483341-4">%</samp><samp class="nc" data-group-id="8197483341-4">MyApp.Post</samp><samp class="p" data-group-id="8197483341-4">{</samp><samp class="p" data-group-id="8197483341-4">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="8197483341-5">%</samp><samp class="nc" data-group-id="8197483341-5">MyApp.Post</samp><samp class="p" data-group-id="8197483341-5">{</samp><samp class="p" data-group-id="8197483341-5">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">...</samp><samp class="p" data-group-id="8197483341-3">]</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">MyApp.Post</samp><samp class="w"> </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">filter</samp><samp class="p" data-group-id="8197483341-6">(</samp><samp class="ss">published</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">true</samp><samp class="p" data-group-id="8197483341-6">)</samp><samp class="w"> </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Ash</samp><samp class="o">.</samp><samp class="n">stream!</samp><samp class="p" data-group-id="8197483341-7">(</samp><samp class="ss">strategy</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="ss">:keyset</samp><samp class="p" data-group-id="8197483341-7">)</samp><samp class="w"> </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Enum</samp><samp class="o">.</samp><samp class="n">map</samp><samp class="p" data-group-id="8197483341-8">(</samp><samp class="o">&amp;</samp><samp class="w"> </samp><samp class="ni">&amp;1</samp><samp class="o">.</samp><samp class="n">title</samp><samp class="p" data-group-id="8197483341-8">)</samp><samp class="w">
</samp><samp class="p" data-group-id="8197483341-9">[</samp><samp class="s">&quot;Hello World&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;Another Post&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">...</samp><samp class="p" data-group-id="8197483341-9">]</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">MyApp.Post</samp><samp class="w"> </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Ash</samp><samp class="o">.</samp><samp class="n">stream!</samp><samp class="p" data-group-id="8197483341-10">(</samp><samp class="ss">strategy</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="ss">:offset</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">batch_size</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">50</samp><samp class="p" data-group-id="8197483341-10">)</samp><samp class="w"> </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Stream</samp><samp class="o">.</samp><samp class="n">filter</samp><samp class="p" data-group-id="8197483341-11">(</samp><samp class="o">&amp;</samp><samp class="w"> </samp><samp class="ni">&amp;1</samp><samp class="o">.</samp><samp class="n">likes</samp><samp class="w"> </samp><samp class="o">&gt;</samp><samp class="w"> </samp><samp class="mi">10</samp><samp class="p" data-group-id="8197483341-11">)</samp><samp class="w"> </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Enum</samp><samp class="o">.</samp><samp class="n">to_list</samp><samp class="p" data-group-id="8197483341-12">(</samp><samp class="p" data-group-id="8197483341-12">)</samp><samp class="w">
</samp><samp class="p" data-group-id="8197483341-13">[</samp><samp class="p" data-group-id="8197483341-14">%</samp><samp class="nc" data-group-id="8197483341-14">MyApp.Post</samp><samp class="p" data-group-id="8197483341-14">{</samp><samp class="ss">likes</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">15</samp><samp class="p" data-group-id="8197483341-14">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">...</samp><samp class="p" data-group-id="8197483341-13">]</samp></code></pre><h2 id="stream!/2-see-also" class="section-heading"><a href="#stream!/2-see-also" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">See also</span></h2><ul><li><a href="#read/2"><code class="inline">read/2</code></a> for non-streaming reads</li><li><code class="inline">d:Ash.Resource.Dsl.actions.read</code> for defining read actions</li><li><code class="inline">d:Ash.Resource.Dsl.actions.read.pagination</code> for pagination configuration</li></ul><h2 id="stream!/2-options" class="section-heading"><a href="#stream!/2-options" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Options</span></h2><ul><li><p><code class="inline">:batch_size</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#basic-types"><code class="inline">integer/0</code></a>) - How many records to request in each query run. Defaults to the pagination limits on the resource, or 250.</p></li><li><p><code class="inline">:allow_stream_with</code> - The 'worst' strategy allowed to be used to fetch records. See <a href="#stream!/2"><code class="inline">Ash.stream!/2</code></a> docs for more. Valid values are :keyset, :offset, :full_read The default value is <code class="inline">:keyset</code>.</p></li><li><p><code class="inline">:stream_with</code> - The specific strategy to use to fetch records. See <a href="#stream!/2"><code class="inline">Ash.stream!/2</code></a> docs for more. Valid values are :keyset, :offset, :full_read</p></li><li><p><code class="inline">:load</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">term/0</code></a>) - A load statement to add onto the query</p></li><li><p><code class="inline">:max_concurrency</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#basic-types"><code class="inline">non_neg_integer/0</code></a>) - The maximum number of processes allowed to be started for parallel loading of relationships and calculations. Defaults to <code class="inline">System.schedulers_online() * 2</code></p></li><li><p><code class="inline">:lock</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">term/0</code></a>) - A lock statement to add onto the query</p></li><li><p><code class="inline">:return_query?</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">boolean/0</code></a>) - If <code class="inline">true</code>, the query that was ultimately used is returned as a third tuple element.<br/>The query goes through many potential changes during a request, potentially adding
authorization filters, or replacing relationships for other data layers with their
corresponding ids. This option can be used to get the true query that was sent to
the data layer. The default value is <code class="inline">false</code>.</p></li><li><p><code class="inline">:skip_unknown_inputs</code> - A list of inputs that, if provided, will be ignored if they are not recognized by the action. Use <code class="inline">:*</code> to indicate all unknown keys.</p></li><li><p><code class="inline">:reuse_values?</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">boolean/0</code></a>) - Whether calculations are allowed to reuse values that have already been loaded, or must refetch them from the data layer. The default value is <code class="inline">false</code>.</p></li><li><p><code class="inline">:strict?</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">boolean/0</code></a>) - If set to true, only specified attributes will be loaded when passing
  a list of fields to fetch on a relationship, which allows for more
  optimized data-fetching.<br/>  See <a href="Ash.Query.xhtml#load/2"><code class="inline">Ash.Query.load/2</code></a>. The default value is <code class="inline">false</code>.</p></li><li><p><code class="inline">:authorize_with</code> - If set to <code class="inline">:error</code>, instead of applying authorization filters as a filter, any records not matching the authorization filter will cause an error to be returned. Valid values are :filter, :error The default value is <code class="inline">:filter</code>.</p></li><li><p><code class="inline">:domain</code> (<a href="Ash.Domain.xhtml"><code class="inline">Ash.Domain</code></a>) - The domain to use.</p></li><li><p><code class="inline">:timeout</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">timeout/0</code></a>) - A positive integer, or <code class="inline">:infinity</code>. If none is provided, the timeout configured on the domain is used.</p></li><li><p><code class="inline">:tracer</code> (one or a list of module that adopts <a href="Ash.Tracer.xhtml"><code class="inline">Ash.Tracer</code></a>) - A tracer that implements the <a href="Ash.Tracer.xhtml"><code class="inline">Ash.Tracer</code></a> behaviour. See that module for more.</p></li><li><p><code class="inline">:action</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">term/0</code></a>) - The action to use, either an Action struct or the name of the action</p></li><li><p><code class="inline">:authorize?</code> - If an actor option is provided (even if it is <code class="inline">nil</code>), authorization happens automatically. If not, this flag can be used to authorize with no user.</p></li><li><p><code class="inline">:context</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#basic-types"><code class="inline">map/0</code></a>) - Context to set on the query, changeset, or input</p></li><li><p><code class="inline">:tenant</code> (value that implements the <a href="Ash.ToTenant.xhtml"><code class="inline">Ash.ToTenant</code></a> protocol) - A tenant to set on the query or changeset</p></li><li><p><code class="inline">:actor</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">term/0</code></a>) - If an actor is provided, it will be used in conjunction with the authorizers of a resource to authorize access</p></li><li><p><code class="inline">:scope</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">term/0</code></a>) - A value that implements the <a href="Ash.Scope.ToOpts.xhtml"><code class="inline">Ash.Scope.ToOpts</code></a> protocol, for passing around actor/tenant/context in a single value. See <a href="Ash.Scope.ToOpts.xhtml"><code class="inline">Ash.Scope.ToOpts</code></a> for more.</p></li></ul>
  </section>
</section>
<section class="detail" id="sum/3">

    <span id="sum/2"></span>

  <div class="detail-header">
    <a href="#sum/3" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">sum(query, field, opts \\ [])</h1>


        <a href="https://github.com/ash-project/ash/blob/v3.5.33/lib/ash.ex#L1308" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> sum(<a href="Ash.Query.xhtml#t:t/0">Ash.Query.t</a>() | <a href="Ash.Resource.xhtml#t:t/0">Ash.Resource.t</a>(), <a href="https://hexdocs.pm/elixir/typespecs.html#basic-types">atom</a>(), <a href="https://hexdocs.pm/elixir/Keyword.html#t:t/0">Keyword.t</a>()) ::
  {:ok, <a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types">number</a>()} | {:error, <a href="Ash.Error.xhtml#t:t/0">Ash.Error.t</a>()}</pre>

      </div>

<p>Fetches the sum of a given field.</p><h2 id="sum/3-examples" class="section-heading"><a href="#sum/3-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">MyApp.Post</samp><samp class="w"> </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Ash</samp><samp class="o">.</samp><samp class="n">sum</samp><samp class="p" data-group-id="3207180934-1">(</samp><samp class="ss">:view_count</samp><samp class="p" data-group-id="3207180934-1">)</samp><samp class="w">
</samp><samp class="p" data-group-id="3207180934-2">{</samp><samp class="ss">:ok</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">1542</samp><samp class="p" data-group-id="3207180934-2">}</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">MyApp.Post</samp><samp class="w"> </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">filter</samp><samp class="p" data-group-id="3207180934-3">(</samp><samp class="ss">published</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">true</samp><samp class="p" data-group-id="3207180934-3">)</samp><samp class="w"> </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Ash</samp><samp class="o">.</samp><samp class="n">sum</samp><samp class="p" data-group-id="3207180934-4">(</samp><samp class="ss">:likes</samp><samp class="p" data-group-id="3207180934-4">)</samp><samp class="w">
</samp><samp class="p" data-group-id="3207180934-5">{</samp><samp class="ss">:ok</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">238</samp><samp class="p" data-group-id="3207180934-5">}</samp></code></pre><h2 id="sum/3-see-also" class="section-heading"><a href="#sum/3-see-also" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">See also</span></h2><ul><li><a href="#sum!/3"><code class="inline">sum!/3</code></a> for the raising version</li><li><a href="#avg/3"><code class="inline">avg/3</code></a> for getting the average value</li><li><code class="inline">d:Ash.Resource.Dsl.aggregates</code> for defining aggregates on resources</li><li><a href="read-actions.xhtml">Read Actions Guide</a> for understanding read operations</li><li><a href="aggregates.xhtml">Aggregates Guide</a> for resource-level aggregates</li></ul>
  </section>
</section>
<section class="detail" id="sum!/3">

    <span id="sum!/2"></span>

  <div class="detail-header">
    <a href="#sum!/3" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">sum!(query, field, opts \\ [])</h1>


        <a href="https://github.com/ash-project/ash/blob/v3.5.33/lib/ash.ex#L1345" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> sum!(<a href="Ash.Query.xhtml#t:t/0">Ash.Query.t</a>() | <a href="Ash.Resource.xhtml#t:t/0">Ash.Resource.t</a>(), <a href="https://hexdocs.pm/elixir/typespecs.html#basic-types">atom</a>(), <a href="https://hexdocs.pm/elixir/Keyword.html#t:t/0">Keyword.t</a>()) ::
  <a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types">number</a>() | <a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types">no_return</a>()</pre>

      </div>

<p>Fetches the sum of a given field or raises an error.</p><h2 id="sum!/3-examples" class="section-heading"><a href="#sum!/3-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">MyApp.Post</samp><samp class="w"> </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Ash</samp><samp class="o">.</samp><samp class="n">sum!</samp><samp class="p" data-group-id="9945780914-1">(</samp><samp class="ss">:view_count</samp><samp class="p" data-group-id="9945780914-1">)</samp><samp class="w">
</samp><samp class="mi">1542</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">MyApp.Post</samp><samp class="w"> </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Ash.Query</samp><samp class="o">.</samp><samp class="n">filter</samp><samp class="p" data-group-id="9945780914-2">(</samp><samp class="ss">published</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">true</samp><samp class="p" data-group-id="9945780914-2">)</samp><samp class="w"> </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Ash</samp><samp class="o">.</samp><samp class="n">sum!</samp><samp class="p" data-group-id="9945780914-3">(</samp><samp class="ss">:likes</samp><samp class="p" data-group-id="9945780914-3">)</samp><samp class="w">
</samp><samp class="mi">238</samp></code></pre><h2 id="sum!/3-see-also" class="section-heading"><a href="#sum!/3-see-also" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">See also</span></h2><ul><li><a href="#sum/3"><code class="inline">sum/3</code></a> for the non-raising version</li><li><a href="#avg!/3"><code class="inline">avg!/3</code></a> for getting the average value</li><li><code class="inline">d:Ash.Resource.Dsl.aggregates</code> for defining aggregates on resources</li></ul>
  </section>
</section>
<section class="detail" id="transaction/3">

    <span id="transaction/2"></span>

  <div class="detail-header">
    <a href="#transaction/3" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">transaction(resource_or_resources, func, opts \\ [])</h1>


        <a href="https://github.com/ash-project/ash/blob/v3.5.33/lib/ash.ex#L3861" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> transaction(
  resource_or_resources :: <a href="Ash.Resource.xhtml#t:t/0">Ash.Resource.t</a>() | [<a href="Ash.Resource.xhtml#t:t/0">Ash.Resource.t</a>()],
  func :: (-&gt; <a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types">term</a>()),
  opts :: <a href="https://hexdocs.pm/elixir/Keyword.html#t:t/0">Keyword.t</a>()
) ::
  {:ok, <a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types">term</a>()}
  | {:ok, <a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types">term</a>(), [<a href="Ash.Notifier.Notification.xhtml#t:t/0">Ash.Notifier.Notification.t</a>()]}
  | {:error, <a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types">term</a>()}</pre>

      </div>

<p>Wraps the execution of the function in a transaction with the resource's data_layer.
Collects notifications during the function's execution and sends them if the transaction was successful.</p><h2 id="transaction/3-examples" class="section-heading"><a href="#transaction/3-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Ash</samp><samp class="o">.</samp><samp class="n">transaction</samp><samp class="p" data-group-id="0032272552-1">(</samp><samp class="nc">MyApp.Post</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="k" data-group-id="0032272552-2">fn</samp><samp class="w"> </samp><samp class="o">-&gt;</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="w">  </samp><samp class="n">post</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="nc">Ash</samp><samp class="o">.</samp><samp class="n">create!</samp><samp class="p" data-group-id="0032272552-3">(</samp><samp class="nc">MyApp.Post</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="0032272552-4">%{</samp><samp class="ss">title</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;Hello&quot;</samp><samp class="p" data-group-id="0032272552-4">}</samp><samp class="p" data-group-id="0032272552-3">)</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="w">  </samp><samp class="nc">Ash</samp><samp class="o">.</samp><samp class="n">update!</samp><samp class="p" data-group-id="0032272552-5">(</samp><samp class="n">post</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="0032272552-6">%{</samp><samp class="ss">content</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;World&quot;</samp><samp class="p" data-group-id="0032272552-6">}</samp><samp class="p" data-group-id="0032272552-5">)</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="k" data-group-id="0032272552-2">end</samp><samp class="p" data-group-id="0032272552-1">)</samp><samp class="w">
</samp><samp class="p" data-group-id="0032272552-7">{</samp><samp class="ss">:ok</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="0032272552-8">%</samp><samp class="nc" data-group-id="0032272552-8">MyApp.Post</samp><samp class="p" data-group-id="0032272552-8">{</samp><samp class="ss">title</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;Hello&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">content</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;World&quot;</samp><samp class="p" data-group-id="0032272552-8">}</samp><samp class="p" data-group-id="0032272552-7">}</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Ash</samp><samp class="o">.</samp><samp class="n">transaction</samp><samp class="p" data-group-id="0032272552-9">(</samp><samp class="p" data-group-id="0032272552-10">[</samp><samp class="nc">MyApp.User</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="nc">MyApp.Post</samp><samp class="p" data-group-id="0032272552-10">]</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="k" data-group-id="0032272552-11">fn</samp><samp class="w"> </samp><samp class="o">-&gt;</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="w">  </samp><samp class="n">user</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="nc">Ash</samp><samp class="o">.</samp><samp class="n">create!</samp><samp class="p" data-group-id="0032272552-12">(</samp><samp class="nc">MyApp.User</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="0032272552-13">%{</samp><samp class="ss">name</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;John&quot;</samp><samp class="p" data-group-id="0032272552-13">}</samp><samp class="p" data-group-id="0032272552-12">)</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="w">  </samp><samp class="nc">Ash</samp><samp class="o">.</samp><samp class="n">create!</samp><samp class="p" data-group-id="0032272552-14">(</samp><samp class="nc">MyApp.Post</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="0032272552-15">%{</samp><samp class="ss">title</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;Hello&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">author_id</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="n">user</samp><samp class="o">.</samp><samp class="n">id</samp><samp class="p" data-group-id="0032272552-15">}</samp><samp class="p" data-group-id="0032272552-14">)</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="k" data-group-id="0032272552-11">end</samp><samp class="p" data-group-id="0032272552-9">)</samp><samp class="w">
</samp><samp class="p" data-group-id="0032272552-16">{</samp><samp class="ss">:ok</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="0032272552-17">%</samp><samp class="nc" data-group-id="0032272552-17">MyApp.Post</samp><samp class="p" data-group-id="0032272552-17">{</samp><samp class="ss">title</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;Hello&quot;</samp><samp class="p" data-group-id="0032272552-17">}</samp><samp class="p" data-group-id="0032272552-16">}</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Ash</samp><samp class="o">.</samp><samp class="n">transaction</samp><samp class="p" data-group-id="0032272552-18">(</samp><samp class="nc">MyApp.Post</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="k" data-group-id="0032272552-19">fn</samp><samp class="w"> </samp><samp class="o">-&gt;</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="w">  </samp><samp class="nc">Ash</samp><samp class="o">.</samp><samp class="n">create!</samp><samp class="p" data-group-id="0032272552-20">(</samp><samp class="nc">MyApp.Post</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="0032272552-21">%{</samp><samp class="ss">title</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;Test&quot;</samp><samp class="p" data-group-id="0032272552-21">}</samp><samp class="p" data-group-id="0032272552-20">)</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="k" data-group-id="0032272552-19">end</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">return_notifications?</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">true</samp><samp class="p" data-group-id="0032272552-18">)</samp><samp class="w">
</samp><samp class="p" data-group-id="0032272552-22">{</samp><samp class="ss">:ok</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="0032272552-23">%</samp><samp class="nc" data-group-id="0032272552-23">MyApp.Post</samp><samp class="p" data-group-id="0032272552-23">{</samp><samp class="ss">title</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;Test&quot;</samp><samp class="p" data-group-id="0032272552-23">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="0032272552-24">[</samp><samp class="p" data-group-id="0032272552-25">%</samp><samp class="nc" data-group-id="0032272552-25">Ash.Notifier.Notification</samp><samp class="p" data-group-id="0032272552-25">{</samp><samp class="p" data-group-id="0032272552-25">}</samp><samp class="p" data-group-id="0032272552-24">]</samp><samp class="p" data-group-id="0032272552-22">}</samp></code></pre><h2 id="transaction/3-see-also" class="section-heading"><a href="#transaction/3-see-also" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">See also</span></h2><ul><li><a href="actions.xhtml">Actions Guide</a> for understanding action concepts</li><li><a href="testing.xhtml">Development Testing Guide</a> for testing with transactions</li></ul><h2 id="transaction/3-options" class="section-heading"><a href="#transaction/3-options" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Options</span></h2><ul><li><p><code class="inline">:timeout</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">timeout/0</code></a>) - The time in milliseconds (as an integer) to wait for the transaction to finish or <code class="inline">:infinity</code> to wait indefinitely.<br/>If not specified then default behaviour is adapter specific - for <a href="https://hexdocs.pm/ecto/3.13.2/Ecto.html"><code class="inline">Ecto</code></a>-based data layers it will be <code class="inline">15_000</code>.</p></li><li><p><code class="inline">:return_notifications?</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">boolean/0</code></a>) - Use this if you want to manually handle sending notifications.<br/>If true the returned tuple will contain notifications list as the last element.<br/>To send notifications use <code class="inline">Ash.Notifier.notify(notifications)</code>. It sends any notifications that can be sent, and returns the rest. The default value is <code class="inline">false</code>.</p></li></ul>
  </section>
</section>
<section class="detail" id="update/3">

    <span id="update/1"></span>

    <span id="update/2"></span>

  <div class="detail-header">
    <a href="#update/3" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">update(changeset_or_record, params_or_opts \\ %{}, opts \\ [])</h1>


        <a href="https://github.com/ash-project/ash/blob/v3.5.33/lib/ash.ex#L3603" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> update(
  changeset_or_record :: <a href="Ash.Changeset.xhtml#t:t/0">Ash.Changeset.t</a>() | <a href="Ash.Resource.xhtml#t:record/0">Ash.Resource.record</a>(),
  params_or_opts :: <a href="https://hexdocs.pm/elixir/typespecs.html#basic-types">map</a>() | <a href="https://hexdocs.pm/elixir/Keyword.html#t:t/0">Keyword.t</a>(),
  opts :: <a href="https://hexdocs.pm/elixir/Keyword.html#t:t/0">Keyword.t</a>()
) ::
  {:ok, <a href="Ash.Resource.xhtml#t:record/0">Ash.Resource.record</a>()}
  | {:ok, <a href="Ash.Resource.xhtml#t:record/0">Ash.Resource.record</a>(), [<a href="Ash.Notifier.Notification.xhtml#t:t/0">Ash.Notifier.Notification.t</a>()]}
  | {:error, <a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types">term</a>()}</pre>

      </div>

<p>Update a record.</p><h2 id="update/3-examples" class="section-heading"><a href="#update/3-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Ash</samp><samp class="o">.</samp><samp class="n">update</samp><samp class="p" data-group-id="3147829841-1">(</samp><samp class="n">post</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="3147829841-2">%{</samp><samp class="ss">title</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;Updated Title&quot;</samp><samp class="p" data-group-id="3147829841-2">}</samp><samp class="p" data-group-id="3147829841-1">)</samp><samp class="w">
</samp><samp class="p" data-group-id="3147829841-3">{</samp><samp class="ss">:ok</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="3147829841-4">%</samp><samp class="nc" data-group-id="3147829841-4">MyApp.Post</samp><samp class="p" data-group-id="3147829841-4">{</samp><samp class="ss">id</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">1</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">title</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;Updated Title&quot;</samp><samp class="p" data-group-id="3147829841-4">}</samp><samp class="p" data-group-id="3147829841-3">}</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="n">changeset</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="nc">Ash.Changeset</samp><samp class="o">.</samp><samp class="n">for_update</samp><samp class="p" data-group-id="3147829841-5">(</samp><samp class="n">user</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:update</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="3147829841-6">%{</samp><samp class="ss">name</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;Jane&quot;</samp><samp class="p" data-group-id="3147829841-6">}</samp><samp class="p" data-group-id="3147829841-5">)</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Ash</samp><samp class="o">.</samp><samp class="n">update</samp><samp class="p" data-group-id="3147829841-7">(</samp><samp class="n">changeset</samp><samp class="p" data-group-id="3147829841-7">)</samp><samp class="w">
</samp><samp class="p" data-group-id="3147829841-8">{</samp><samp class="ss">:ok</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="3147829841-9">%</samp><samp class="nc" data-group-id="3147829841-9">MyApp.User</samp><samp class="p" data-group-id="3147829841-9">{</samp><samp class="ss">id</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">1</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">name</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;Jane&quot;</samp><samp class="p" data-group-id="3147829841-9">}</samp><samp class="p" data-group-id="3147829841-8">}</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Ash</samp><samp class="o">.</samp><samp class="n">update</samp><samp class="p" data-group-id="3147829841-10">(</samp><samp class="n">post</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="3147829841-11">%{</samp><samp class="ss">content</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;New content&quot;</samp><samp class="p" data-group-id="3147829841-11">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">return_notifications?</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">true</samp><samp class="p" data-group-id="3147829841-10">)</samp><samp class="w">
</samp><samp class="p" data-group-id="3147829841-12">{</samp><samp class="ss">:ok</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="3147829841-13">%</samp><samp class="nc" data-group-id="3147829841-13">MyApp.Post</samp><samp class="p" data-group-id="3147829841-13">{</samp><samp class="ss">id</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">1</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">content</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;New content&quot;</samp><samp class="p" data-group-id="3147829841-13">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="3147829841-14">[</samp><samp class="p" data-group-id="3147829841-15">%</samp><samp class="nc" data-group-id="3147829841-15">Ash.Notifier.Notification</samp><samp class="p" data-group-id="3147829841-15">{</samp><samp class="p" data-group-id="3147829841-15">}</samp><samp class="p" data-group-id="3147829841-14">]</samp><samp class="p" data-group-id="3147829841-12">}</samp></code></pre><h2 id="update/3-see-also" class="section-heading"><a href="#update/3-see-also" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">See also</span></h2><ul><li><a href="#update!/3"><code class="inline">update!/3</code></a> for the raising version</li><li><code class="inline">d:Ash.Resource.Dsl.actions.update</code> for defining update actions</li><li><code class="inline">d:Ash.Resource.Dsl.changes</code> for defining changes</li><li><a href="update-actions.xhtml">Update Actions Guide</a> for understanding update operations</li><li><a href="actions.xhtml">Actions Guide</a> for general action concepts</li></ul><h2 id="update/3-options" class="section-heading"><a href="#update/3-options" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Options</span></h2><ul><li><p><code class="inline">:params</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#basic-types"><code class="inline">map/0</code></a>) - Parameters to supply, ignored if the input is a changeset, only used when an identifier is given.</p></li><li><p><code class="inline">:atomic_upgrade?</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">boolean/0</code></a>) - If true the action will be done atomically if it can (and is configured to do so), ignoring the in memory transformations and validations. You should not generally need to disable this. The default value is <code class="inline">true</code>.</p></li><li><p><code class="inline">:domain</code> (<a href="Ash.Domain.xhtml"><code class="inline">Ash.Domain</code></a>) - The domain to use.</p></li><li><p><code class="inline">:timeout</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">timeout/0</code></a>) - A positive integer, or <code class="inline">:infinity</code>. If none is provided, the timeout configured on the domain is used.</p></li><li><p><code class="inline">:tracer</code> (one or a list of module that adopts <a href="Ash.Tracer.xhtml"><code class="inline">Ash.Tracer</code></a>) - A tracer that implements the <a href="Ash.Tracer.xhtml"><code class="inline">Ash.Tracer</code></a> behaviour. See that module for more.</p></li><li><p><code class="inline">:action</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">term/0</code></a>) - The action to use, either an Action struct or the name of the action</p></li><li><p><code class="inline">:authorize?</code> - If an actor option is provided (even if it is <code class="inline">nil</code>), authorization happens automatically. If not, this flag can be used to authorize with no user.</p></li><li><p><code class="inline">:context</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#basic-types"><code class="inline">map/0</code></a>) - Context to set on the query, changeset, or input</p></li><li><p><code class="inline">:tenant</code> (value that implements the <a href="Ash.ToTenant.xhtml"><code class="inline">Ash.ToTenant</code></a> protocol) - A tenant to set on the query or changeset</p></li><li><p><code class="inline">:actor</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">term/0</code></a>) - If an actor is provided, it will be used in conjunction with the authorizers of a resource to authorize access</p></li><li><p><code class="inline">:scope</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">term/0</code></a>) - A value that implements the <a href="Ash.Scope.ToOpts.xhtml"><code class="inline">Ash.Scope.ToOpts</code></a> protocol, for passing around actor/tenant/context in a single value. See <a href="Ash.Scope.ToOpts.xhtml"><code class="inline">Ash.Scope.ToOpts</code></a> for more.</p></li><li><p><code class="inline">:return_notifications?</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">boolean/0</code></a>) - Use this if you're running ash actions in your own transaction and you want to manually handle sending notifications.<br/>If a transaction is ongoing, and this is false, notifications will be discarded, otherwise
the return value is <code class="inline">{:ok, result, notifications}</code> (or <code class="inline">{:ok, notifications}</code>)<br/>To send notifications later, use <code class="inline">Ash.Notifier.notify(notifications)</code>. It sends any notifications
that can be sent, and returns the rest. The default value is <code class="inline">false</code>.</p></li><li><p><code class="inline">:rollback_on_error?</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">boolean/0</code></a>) - Whether or not to rollback the transaction on error, if the resource is in a transaction.<br/>If the action has <code class="inline">transaction? false</code> this option has no effect. If an error is returned from the
data layer and the resource is in a transaction, the transaction is always rolled back, regardless. The default value is <code class="inline">true</code>.</p></li><li><p><code class="inline">:notification_metadata</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">term/0</code></a>) - Metadata to be merged into the metadata field for all notifications sent from this operation. The default value is <code class="inline">%{}</code>.</p></li><li><p><code class="inline">:skip_unknown_inputs</code> - A list of inputs that, if provided, will be ignored if they are not recognized by the action. Use <code class="inline">:*</code> to indicate all unknown keys.</p></li><li><p><code class="inline">:load</code> (<a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types"><code class="inline">term/0</code></a>) - A load statement to add onto the changeset</p></li></ul>
  </section>
</section>
<section class="detail" id="update!/3">

    <span id="update!/1"></span>

    <span id="update!/2"></span>

  <div class="detail-header">
    <a href="#update!/3" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">update!(changeset_or_record, params_or_opts \\ %{}, opts \\ [])</h1>


        <a href="https://github.com/ash-project/ash/blob/v3.5.33/lib/ash.ex#L3555" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> update!(
  changeset_or_record :: <a href="Ash.Changeset.xhtml#t:t/0">Ash.Changeset.t</a>() | <a href="Ash.Resource.xhtml#t:record/0">Ash.Resource.record</a>(),
  params_or_opts :: <a href="https://hexdocs.pm/elixir/typespecs.html#basic-types">map</a>() | <a href="https://hexdocs.pm/elixir/Keyword.html#t:t/0">Keyword.t</a>(),
  opts :: <a href="https://hexdocs.pm/elixir/Keyword.html#t:t/0">Keyword.t</a>()
) ::
  <a href="Ash.Resource.xhtml#t:record/0">Ash.Resource.record</a>()
  | {<a href="Ash.Resource.xhtml#t:record/0">Ash.Resource.record</a>(), [<a href="Ash.Notifier.Notification.xhtml#t:t/0">Ash.Notifier.Notification.t</a>()]}
  | <a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types">no_return</a>()</pre>

      </div>

<p>Update a record. See <a href="#update/2"><code class="inline">update/2</code></a> for more information.</p><h2 id="update!/3-examples" class="section-heading"><a href="#update!/3-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Ash</samp><samp class="o">.</samp><samp class="n">update!</samp><samp class="p" data-group-id="8931304946-1">(</samp><samp class="n">post</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="8931304946-2">%{</samp><samp class="ss">title</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;Updated Title&quot;</samp><samp class="p" data-group-id="8931304946-2">}</samp><samp class="p" data-group-id="8931304946-1">)</samp><samp class="w">
</samp><samp class="p" data-group-id="8931304946-3">%</samp><samp class="nc" data-group-id="8931304946-3">MyApp.Post</samp><samp class="p" data-group-id="8931304946-3">{</samp><samp class="ss">id</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">1</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">title</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;Updated Title&quot;</samp><samp class="p" data-group-id="8931304946-3">}</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="n">changeset</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="nc">Ash.Changeset</samp><samp class="o">.</samp><samp class="n">for_update</samp><samp class="p" data-group-id="8931304946-4">(</samp><samp class="n">user</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:update</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="8931304946-5">%{</samp><samp class="ss">name</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;Jane&quot;</samp><samp class="p" data-group-id="8931304946-5">}</samp><samp class="p" data-group-id="8931304946-4">)</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Ash</samp><samp class="o">.</samp><samp class="n">update!</samp><samp class="p" data-group-id="8931304946-6">(</samp><samp class="n">changeset</samp><samp class="p" data-group-id="8931304946-6">)</samp><samp class="w">
</samp><samp class="p" data-group-id="8931304946-7">%</samp><samp class="nc" data-group-id="8931304946-7">MyApp.User</samp><samp class="p" data-group-id="8931304946-7">{</samp><samp class="ss">id</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">1</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">name</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;Jane&quot;</samp><samp class="p" data-group-id="8931304946-7">}</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="nc">Ash</samp><samp class="o">.</samp><samp class="n">update!</samp><samp class="p" data-group-id="8931304946-8">(</samp><samp class="n">post</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="8931304946-9">%{</samp><samp class="ss">content</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;New content&quot;</samp><samp class="p" data-group-id="8931304946-9">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">return_notifications?</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">true</samp><samp class="p" data-group-id="8931304946-8">)</samp><samp class="w">
</samp><samp class="p" data-group-id="8931304946-10">{</samp><samp class="p" data-group-id="8931304946-11">%</samp><samp class="nc" data-group-id="8931304946-11">MyApp.Post</samp><samp class="p" data-group-id="8931304946-11">{</samp><samp class="ss">id</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">1</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">content</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;New content&quot;</samp><samp class="p" data-group-id="8931304946-11">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="8931304946-12">[</samp><samp class="p" data-group-id="8931304946-13">%</samp><samp class="nc" data-group-id="8931304946-13">Ash.Notifier.Notification</samp><samp class="p" data-group-id="8931304946-13">{</samp><samp class="p" data-group-id="8931304946-13">}</samp><samp class="p" data-group-id="8931304946-12">]</samp><samp class="p" data-group-id="8931304946-10">}</samp></code></pre><h2 id="update!/3-see-also" class="section-heading"><a href="#update!/3-see-also" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">See also</span></h2><ul><li><a href="#update/3"><code class="inline">update/3</code></a> for the non-raising version</li><li><code class="inline">d:Ash.Resource.Dsl.actions.update</code> for defining update actions</li><li><a href="update-actions.xhtml">Update Actions Guide</a> for understanding update operations</li><li><a href="actions.xhtml">Actions Guide</a> for general action concepts</li></ul>
  </section>
</section>

        </div>
      </section>


  </body>
</html>
