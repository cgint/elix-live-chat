<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"
      xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>Read Actions - ash v3.5.33</title>
    <meta name="generator" content="ExDoc v0.38.2" />
    <link type="text/css" rel="stylesheet" href="dist/epub-elixir-FNUUKFP7.css" />
    <script src="dist/epub-4WIP524F.js"></script>

  </head>
  <body class="content-inner">

    <h1 id="content">Read Actions</h1>
<p>Read actions operate on an <a href="Ash.Query.xhtml"><code class="inline">Ash.Query</code></a>. Read actions always return lists of data. The act of <a href="#pagination">pagination</a>, or returning a <a href="#ash-get">single result</a>, is handled as part of the interface, and is not a concern of the action itself. Here is an example of a read action:</p><pre><code class="makeup elixir" translate="no"><span class="c1"># Giving your actions informative names is always a good idea</span><span class="w">
</span><span class="n">read</span><span class="w"> </span><span class="ss">:ticket_queue</span><span class="w"> </span><span class="k" data-group-id="0886158416-1">do</span><span class="w">
  </span><span class="c1"># Use arguments to take in values you need to run your read action.</span><span class="w">
  </span><span class="n">argument</span><span class="w"> </span><span class="ss">:priorities</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="0886158416-2">{</span><span class="ss">:array</span><span class="p">,</span><span class="w"> </span><span class="ss">:atom</span><span class="p" data-group-id="0886158416-2">}</span><span class="w"> </span><span class="k" data-group-id="0886158416-3">do</span><span class="w">
    </span><span class="n">constraints</span><span class="w"> </span><span class="ss">items</span><span class="p">:</span><span class="w"> </span><span class="p" data-group-id="0886158416-4">[</span><span class="ss">one_of</span><span class="p">:</span><span class="w"> </span><span class="p" data-group-id="0886158416-5">[</span><span class="ss">:low</span><span class="p">,</span><span class="w"> </span><span class="ss">:medium</span><span class="p">,</span><span class="w"> </span><span class="ss">:high</span><span class="p" data-group-id="0886158416-5">]</span><span class="p" data-group-id="0886158416-4">]</span><span class="w">
  </span><span class="k" data-group-id="0886158416-3">end</span><span class="w">

  </span><span class="c1"># This action may be paginated,</span><span class="w">
  </span><span class="c1"># and returns a total count of records by default</span><span class="w">
  </span><span class="n">pagination</span><span class="w"> </span><span class="ss">offset</span><span class="p">:</span><span class="w"> </span><span class="no">true</span><span class="p">,</span><span class="w"> </span><span class="ss">countable</span><span class="p">:</span><span class="w"> </span><span class="ss">:by_default</span><span class="w">

  </span><span class="c1"># Arguments can be used in preparations and filters</span><span class="w">
  </span><span class="n">filter</span><span class="w"> </span><span class="n">expr</span><span class="p" data-group-id="0886158416-6">(</span><span class="n">status</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="ss">:open</span><span class="w"> </span><span class="ow">and</span><span class="w"> </span><span class="n">priority</span><span class="w"> </span><span class="ow">in</span><span class="w"> </span><span class="o">^</span><span class="n">arg</span><span class="p" data-group-id="0886158416-7">(</span><span class="ss">:priorities</span><span class="p" data-group-id="0886158416-7">)</span><span class="p" data-group-id="0886158416-6">)</span><span class="w">
</span><span class="k" data-group-id="0886158416-1">end</span></code></pre><p>For a full list of all of the available options for configuring read actions, see <a href="dsl-ash-resource.html#actions-read">the Ash.Resource.Dsl documentation</a>.</p><h2 id="calling-read-actions">Calling Read Actions</h2><p>The basic formula for calling a read action looks like this:</p><pre><code class="makeup elixir" translate="no"><span class="nc">Resource</span><span class="w">
</span><span class="o">|&gt;</span><span class="w"> </span><span class="nc">Ash.Query</span><span class="o">.</span><span class="n">for_read</span><span class="p" data-group-id="9054381765-1">(</span><span class="ss">:action_name</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="9054381765-2">%{</span><span class="ss">argument</span><span class="p">:</span><span class="w"> </span><span class="ss">:value</span><span class="p" data-group-id="9054381765-2">}</span><span class="p">,</span><span class="w"> </span><span class="n">...</span><span class="n">opts</span><span class="p" data-group-id="9054381765-1">)</span><span class="w">
</span><span class="o">|&gt;</span><span class="w"> </span><span class="nc">Ash</span><span class="o">.</span><span class="n">read!</span><span class="p" data-group-id="9054381765-3">(</span><span class="p" data-group-id="9054381765-3">)</span></code></pre><p>See below for variations on action calling, and see the <a href="code-interfaces.xhtml">code interface guide</a> guide for how to
define idiomatic and convenient functions that call your actions.</p><h2 id="ash-get">Ash.get!</h2><p>The <code class="inline">Ash.get!</code> function is a convenience function for running a read action, filtering by a unique identifier, and expecting only a single result. It is equivalent to the following code:</p><pre><code class="makeup elixir" translate="no"><span class="c1"># action can be omitted to use the primary read action</span><span class="w">
</span><span class="nc">Ash</span><span class="o">.</span><span class="n">get!</span><span class="p" data-group-id="5287747160-1">(</span><span class="nc">Resource</span><span class="p">,</span><span class="w"> </span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="ss">action</span><span class="p">:</span><span class="w"> </span><span class="ss">:read_action</span><span class="p" data-group-id="5287747160-1">)</span><span class="w">

</span><span class="c1"># is roughly equivalent to</span><span class="w">

</span><span class="nc">Resource</span><span class="w">
</span><span class="o">|&gt;</span><span class="w"> </span><span class="nc">Ash.Query</span><span class="o">.</span><span class="n">filter</span><span class="p" data-group-id="5287747160-2">(</span><span class="n">id</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="mi">1</span><span class="p" data-group-id="5287747160-2">)</span><span class="w">
</span><span class="o">|&gt;</span><span class="w"> </span><span class="nc">Ash.Query</span><span class="o">.</span><span class="n">limit</span><span class="p" data-group-id="5287747160-3">(</span><span class="mi">2</span><span class="p" data-group-id="5287747160-3">)</span><span class="w">
</span><span class="o">|&gt;</span><span class="w"> </span><span class="nc">Ash.Query</span><span class="o">.</span><span class="n">for_read</span><span class="p" data-group-id="5287747160-4">(</span><span class="ss">:read_action</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="5287747160-5">%{</span><span class="p" data-group-id="5287747160-5">}</span><span class="p" data-group-id="5287747160-4">)</span><span class="w">
</span><span class="o">|&gt;</span><span class="w"> </span><span class="nc">Ash</span><span class="o">.</span><span class="n">read!</span><span class="p" data-group-id="5287747160-6">(</span><span class="p" data-group-id="5287747160-6">)</span><span class="w">
</span><span class="o">|&gt;</span><span class="w"> </span><span class="k">case</span><span class="w"> </span><span class="k" data-group-id="5287747160-7">do</span><span class="w">
  </span><span class="p" data-group-id="5287747160-8">[</span><span class="p" data-group-id="5287747160-8">]</span><span class="w"> </span><span class="o">-&gt;</span><span class="w"> </span><span class="c1"># raise not found error</span><span class="w">
  </span><span class="p" data-group-id="5287747160-9">[</span><span class="n">result</span><span class="p" data-group-id="5287747160-9">]</span><span class="w"> </span><span class="o">-&gt;</span><span class="w"> </span><span class="n">result</span><span class="w">
  </span><span class="p" data-group-id="5287747160-10">[</span><span class="bp">_</span><span class="p">,</span><span class="w"> </span><span class="bp">_</span><span class="p" data-group-id="5287747160-10">]</span><span class="w"> </span><span class="o">-&gt;</span><span class="w"> </span><span class="c1"># raise too many results error</span><span class="w">
</span><span class="k" data-group-id="5287747160-7">end</span></code></pre><h2 id="ash-read_one">Ash.read_one!</h2><p>The <code class="inline">Ash.read_one!</code> function is a similar convenience function to <code class="inline">Ash.get!</code>, but it does not take a unique identifier. It is useful when you expect an action to return only a single result, and want to enforce that and return a single result.</p><pre><code class="makeup elixir" translate="no"><span class="nc">Ash</span><span class="o">.</span><span class="n">read_one!</span><span class="p" data-group-id="8167016864-1">(</span><span class="n">query</span><span class="p" data-group-id="8167016864-1">)</span><span class="w">

</span><span class="c1"># is roughly equivalent to</span><span class="w">

</span><span class="n">query</span><span class="w">
</span><span class="o">|&gt;</span><span class="w"> </span><span class="nc">Ash.Query</span><span class="o">.</span><span class="n">limit</span><span class="p" data-group-id="8167016864-2">(</span><span class="mi">2</span><span class="p" data-group-id="8167016864-2">)</span><span class="w">
</span><span class="o">|&gt;</span><span class="w"> </span><span class="nc">Ash</span><span class="o">.</span><span class="n">read!</span><span class="p" data-group-id="8167016864-3">(</span><span class="p" data-group-id="8167016864-3">)</span><span class="w">
</span><span class="o">|&gt;</span><span class="w"> </span><span class="k">case</span><span class="w"> </span><span class="k" data-group-id="8167016864-4">do</span><span class="w">
  </span><span class="p" data-group-id="8167016864-5">[</span><span class="p" data-group-id="8167016864-5">]</span><span class="w"> </span><span class="o">-&gt;</span><span class="w"> </span><span class="no">nil</span><span class="w">
  </span><span class="p" data-group-id="8167016864-6">[</span><span class="n">result</span><span class="p" data-group-id="8167016864-6">]</span><span class="w"> </span><span class="o">-&gt;</span><span class="w"> </span><span class="n">result</span><span class="w">
  </span><span class="p" data-group-id="8167016864-7">[</span><span class="bp">_</span><span class="p">,</span><span class="w"> </span><span class="bp">_</span><span class="p" data-group-id="8167016864-7">]</span><span class="w"> </span><span class="o">-&gt;</span><span class="w"> </span><span class="c1"># raise too many results error</span><span class="w">
</span><span class="k" data-group-id="8167016864-4">end</span></code></pre><h2 id="pagination">Pagination</h2><p>Ash provides built-in support for pagination when reading resources and their relationships. You can find more information about this in the <a href="pagination.xhtml">pagination guide</a>.</p><section role="note" class="admonition info"><h3 id="pagination-configuration-on-default-vs-custom-read-actions" class="admonition-title info">Pagination configuration on default vs custom read actions</h3><p>The default read action supports keyset pagination automatically. You need to explicitly enable pagination strategies you want to support when defining your own read actions.</p></section><h2 id="what-happens-when-you-call-ash-query-for_read-4">What happens when you call Ash.Query.for_read/4</h2><p>The following steps are performed when you call <a href="Ash.Query.xhtml#for_read/4"><code class="inline">Ash.Query.for_read/4</code></a>.</p><ul><li>Cast input arguments - <code class="inline">d:Ash.Resource.Dsl.actions.read.argument</code></li><li>Set default argument values - <code class="inline">d:Ash.Resource.Dsl.actions.read.argument|default</code></li><li><p>Add errors for missing required arguments | <code class="inline">d:Ash.Resource.Dsl.actions.read.argument|allow_nil?</code></p></li><li><p>Run query preparations and validations (in definition order) | <code class="inline">d:Ash.Resource.Dsl.actions.read.prepare</code> and <code class="inline">d:Ash.Resource.Dsl.actions.read.validate</code></p></li><li><p>Add action filter | <code class="inline">d:Ash.Resource.Dsl.actions.read|filter</code></p></li></ul><h2 id="what-happens-when-you-run-the-action">What happens when you run the action</h2><p>These steps are trimmed down, and are aimed at helping users understand the general flow. Some steps are omitted.</p><ul><li>Run <a href="Ash.Query.xhtml#for_read/3"><code class="inline">Ash.Query.for_read/3</code></a> if it has not already been run</li><li><a href="multitenancy.xhtml">Apply tenant filters for attribute</a></li><li>Apply <a href="pagination.xhtml">pagination</a> options</li><li>Run before action hooks</li><li>Multi-datalayer filter is synthesized. We run queries in other data layers to fetch ids and translate related filters to <code class="inline">(destination_field in ^ids)</code></li><li>Strict Check &amp; Filter Authorization is run</li><li>Data layer query is built and validated</li><li>Field policies are added to the query</li><li>Data layer query is Run</li><li>Authorizer &quot;runtime&quot; checks are run (you likely do not have any of these)</li></ul><p>The following steps happen while(asynchronously) or after the main data layer query has been run</p><ul><li>If paginating and count was requested, the count is determined at the same time as the query is run.</li><li>Any calculations &amp; aggregates that were able to be run outside of the main query are run</li><li>Relationships, calculations, and aggregates are loaded</li></ul><h2 id="customizing-queries-when-calling-actions">Customizing Queries When Calling Actions</h2><p>When calling read actions through code interfaces, you can customize the query using the <code class="inline">query</code> option. This allows you to filter, sort, limit, and otherwise modify the results without manually building queries.</p><section role="note" class="admonition warning"><h4 class="admonition-title warning">User Input Safety</h4><p>When accepting query parameters from untrusted sources (like web requests), always use the <code class="inline">_input</code> variants (<code class="inline">sort_input</code>, <code class="inline">filter_input</code>) instead of the regular options.
These functions only allow access to public fields and provide safe parsing of user input.</p></section><h3 id="query-options-via-code-interfaces">Query Options via Code Interfaces</h3><p>The <code class="inline">query</code> option accepts all the options that <a href="Ash.Query.xhtml#build/2"><code class="inline">Ash.Query.build/2</code></a> accepts:</p><pre><code class="makeup elixir" translate="no"><span class="c1"># Filtering results</span><span class="w">
</span><span class="n">posts</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nc">MyApp.Blog</span><span class="o">.</span><span class="n">list_posts!</span><span class="p" data-group-id="8437372355-1">(</span><span class="w">
  </span><span class="ss">query</span><span class="p">:</span><span class="w"> </span><span class="p" data-group-id="8437372355-2">[</span><span class="ss">filter</span><span class="p">:</span><span class="w"> </span><span class="p" data-group-id="8437372355-3">[</span><span class="ss">status</span><span class="p">:</span><span class="w"> </span><span class="ss">:published</span><span class="p" data-group-id="8437372355-3">]</span><span class="p" data-group-id="8437372355-2">]</span><span class="w">
</span><span class="p" data-group-id="8437372355-1">)</span><span class="w">

</span><span class="c1"># Sorting results</span><span class="w">
</span><span class="n">posts</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nc">MyApp.Blog</span><span class="o">.</span><span class="n">list_posts!</span><span class="p" data-group-id="8437372355-4">(</span><span class="w">
  </span><span class="ss">query</span><span class="p">:</span><span class="w"> </span><span class="p" data-group-id="8437372355-5">[</span><span class="ss">sort</span><span class="p">:</span><span class="w"> </span><span class="p" data-group-id="8437372355-6">[</span><span class="ss">published_at</span><span class="p">:</span><span class="w"> </span><span class="ss">:desc</span><span class="p" data-group-id="8437372355-6">]</span><span class="p" data-group-id="8437372355-5">]</span><span class="w">
</span><span class="p" data-group-id="8437372355-4">)</span><span class="w">

</span><span class="c1"># Limiting results</span><span class="w">
</span><span class="n">posts</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nc">MyApp.Blog</span><span class="o">.</span><span class="n">list_posts!</span><span class="p" data-group-id="8437372355-7">(</span><span class="w">
  </span><span class="ss">query</span><span class="p">:</span><span class="w"> </span><span class="p" data-group-id="8437372355-8">[</span><span class="ss">limit</span><span class="p">:</span><span class="w"> </span><span class="mi">10</span><span class="p" data-group-id="8437372355-8">]</span><span class="w">
</span><span class="p" data-group-id="8437372355-7">)</span><span class="w">

</span><span class="c1"># Combining multiple query options</span><span class="w">
</span><span class="n">posts</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nc">MyApp.Blog</span><span class="o">.</span><span class="n">list_posts!</span><span class="p" data-group-id="8437372355-9">(</span><span class="w">
  </span><span class="ss">query</span><span class="p">:</span><span class="w"> </span><span class="p" data-group-id="8437372355-10">[</span><span class="w">
    </span><span class="ss">filter</span><span class="p">:</span><span class="w"> </span><span class="p" data-group-id="8437372355-11">[</span><span class="ss">status</span><span class="p">:</span><span class="w"> </span><span class="ss">:published</span><span class="p">,</span><span class="w"> </span><span class="ss">author_id</span><span class="p">:</span><span class="w"> </span><span class="n">author</span><span class="o">.</span><span class="n">id</span><span class="p" data-group-id="8437372355-11">]</span><span class="p">,</span><span class="w">
    </span><span class="ss">sort</span><span class="p">:</span><span class="w"> </span><span class="p" data-group-id="8437372355-12">[</span><span class="ss">published_at</span><span class="p">:</span><span class="w"> </span><span class="ss">:desc</span><span class="p" data-group-id="8437372355-12">]</span><span class="p">,</span><span class="w">
    </span><span class="ss">limit</span><span class="p">:</span><span class="w"> </span><span class="mi">10</span><span class="p">,</span><span class="w">
    </span><span class="ss">offset</span><span class="p">:</span><span class="w"> </span><span class="mi">20</span><span class="w">
  </span><span class="p" data-group-id="8437372355-10">]</span><span class="w">
</span><span class="p" data-group-id="8437372355-9">)</span><span class="w">

</span><span class="c1"># Loading related data with query constraints</span><span class="w">
</span><span class="n">posts</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nc">MyApp.Blog</span><span class="o">.</span><span class="n">list_posts!</span><span class="p" data-group-id="8437372355-13">(</span><span class="w">
  </span><span class="ss">query</span><span class="p">:</span><span class="w"> </span><span class="p" data-group-id="8437372355-14">[</span><span class="w">
    </span><span class="ss">load</span><span class="p">:</span><span class="w"> </span><span class="p" data-group-id="8437372355-15">[</span><span class="w">
      </span><span class="ss">comments</span><span class="p">:</span><span class="w"> </span><span class="p" data-group-id="8437372355-16">[</span><span class="w">
        </span><span class="ss">filter</span><span class="p">:</span><span class="w"> </span><span class="p" data-group-id="8437372355-17">[</span><span class="ss">approved</span><span class="p">:</span><span class="w"> </span><span class="no">true</span><span class="p" data-group-id="8437372355-17">]</span><span class="p">,</span><span class="w">
        </span><span class="ss">sort</span><span class="p">:</span><span class="w"> </span><span class="p" data-group-id="8437372355-18">[</span><span class="ss">created_at</span><span class="p">:</span><span class="w"> </span><span class="ss">:desc</span><span class="p" data-group-id="8437372355-18">]</span><span class="p">,</span><span class="w">
        </span><span class="ss">limit</span><span class="p">:</span><span class="w"> </span><span class="mi">5</span><span class="w">
      </span><span class="p" data-group-id="8437372355-16">]</span><span class="w">
    </span><span class="p" data-group-id="8437372355-15">]</span><span class="w">
  </span><span class="p" data-group-id="8437372355-14">]</span><span class="w">
</span><span class="p" data-group-id="8437372355-13">)</span></code></pre><h3 id="handling-user-input">Handling User Input</h3><p>When accepting query parameters from user input, use the safe input variants:</p><pre><code class="makeup elixir" translate="no"><span class="c1"># Safe sorting from user input</span><span class="w">
</span><span class="n">posts</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nc">MyApp.Blog</span><span class="o">.</span><span class="n">list_posts!</span><span class="p" data-group-id="2028067864-1">(</span><span class="w">
  </span><span class="ss">query</span><span class="p">:</span><span class="w"> </span><span class="p" data-group-id="2028067864-2">[</span><span class="ss">sort_input</span><span class="p">:</span><span class="w"> </span><span class="n">params</span><span class="p" data-group-id="2028067864-3">[</span><span class="s">&quot;sort&quot;</span><span class="p" data-group-id="2028067864-3">]</span><span class="w"> </span><span class="o">||</span><span class="w"> </span><span class="s">&quot;+published_at&quot;</span><span class="p" data-group-id="2028067864-2">]</span><span class="w">
</span><span class="p" data-group-id="2028067864-1">)</span><span class="w">

</span><span class="c1"># Safe filtering from user input</span><span class="w">
</span><span class="n">posts</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nc">MyApp.Blog</span><span class="o">.</span><span class="n">list_posts!</span><span class="p" data-group-id="2028067864-4">(</span><span class="w">
  </span><span class="ss">query</span><span class="p">:</span><span class="w"> </span><span class="p" data-group-id="2028067864-5">[</span><span class="ss">filter_input</span><span class="p">:</span><span class="w"> </span><span class="n">params</span><span class="p" data-group-id="2028067864-6">[</span><span class="s">&quot;filter&quot;</span><span class="p" data-group-id="2028067864-6">]</span><span class="w"> </span><span class="o">||</span><span class="w"> </span><span class="p" data-group-id="2028067864-7">%{</span><span class="p" data-group-id="2028067864-7">}</span><span class="p" data-group-id="2028067864-5">]</span><span class="w">
</span><span class="p" data-group-id="2028067864-4">)</span><span class="w">

</span><span class="c1"># Combining user input with application-defined constraints</span><span class="w">
</span><span class="n">posts</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nc">MyApp.Blog</span><span class="o">.</span><span class="n">list_posts!</span><span class="p" data-group-id="2028067864-8">(</span><span class="w">
  </span><span class="ss">query</span><span class="p">:</span><span class="w"> </span><span class="p" data-group-id="2028067864-9">[</span><span class="w">
    </span><span class="c1"># User-controlled sorting</span><span class="w">
    </span><span class="ss">sort_input</span><span class="p">:</span><span class="w"> </span><span class="n">params</span><span class="p" data-group-id="2028067864-10">[</span><span class="s">&quot;sort&quot;</span><span class="p" data-group-id="2028067864-10">]</span><span class="p">,</span><span class="w">
    </span><span class="c1"># User-controlled filtering</span><span class="w">
    </span><span class="ss">filter_input</span><span class="p">:</span><span class="w"> </span><span class="n">params</span><span class="p" data-group-id="2028067864-11">[</span><span class="s">&quot;filter&quot;</span><span class="p" data-group-id="2028067864-11">]</span><span class="p">,</span><span class="w">
    </span><span class="c1"># Application-enforced constraints</span><span class="w">
    </span><span class="ss">filter</span><span class="p">:</span><span class="w"> </span><span class="p" data-group-id="2028067864-12">[</span><span class="ss">archived</span><span class="p">:</span><span class="w"> </span><span class="no">false</span><span class="p" data-group-id="2028067864-12">]</span><span class="p">,</span><span class="w">
    </span><span class="ss">limit</span><span class="p">:</span><span class="w"> </span><span class="mi">100</span><span class="w">  </span><span class="c1"># Prevent excessive data fetching</span><span class="w">
  </span><span class="p" data-group-id="2028067864-9">]</span><span class="w">
</span><span class="p" data-group-id="2028067864-8">)</span></code></pre><h3 id="default-query-behavior-in-actions">Default Query Behavior in Actions</h3><p>You can configure default query behavior in your action definitions:</p><pre><code class="makeup elixir" translate="no"><span class="n">actions</span><span class="w"> </span><span class="k" data-group-id="4111396305-1">do</span><span class="w">
  </span><span class="n">read</span><span class="w"> </span><span class="ss">:recent_posts</span><span class="w"> </span><span class="k" data-group-id="4111396305-2">do</span><span class="w">
    </span><span class="c1"># Default sort - overridden if user provides any sort</span><span class="w">
    </span><span class="n">prepare</span><span class="w"> </span><span class="n">build</span><span class="p" data-group-id="4111396305-3">(</span><span class="ss">default_sort</span><span class="p">:</span><span class="w"> </span><span class="p" data-group-id="4111396305-4">[</span><span class="ss">published_at</span><span class="p">:</span><span class="w"> </span><span class="ss">:desc</span><span class="p" data-group-id="4111396305-4">]</span><span class="p" data-group-id="4111396305-3">)</span><span class="w">
    
    </span><span class="c1"># Always applied filter - cannot be overridden</span><span class="w">
    </span><span class="n">filter</span><span class="w"> </span><span class="n">expr</span><span class="p" data-group-id="4111396305-5">(</span><span class="n">status</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="ss">:published</span><span class="p" data-group-id="4111396305-5">)</span><span class="w">
    
    </span><span class="c1"># Default pagination</span><span class="w">
    </span><span class="n">pagination</span><span class="w"> </span><span class="ss">offset</span><span class="p">:</span><span class="w"> </span><span class="no">true</span><span class="p">,</span><span class="w"> </span><span class="ss">default_limit</span><span class="p">:</span><span class="w"> </span><span class="mi">20</span><span class="w">
  </span><span class="k" data-group-id="4111396305-2">end</span><span class="w">
  
  </span><span class="n">read</span><span class="w"> </span><span class="ss">:search</span><span class="w"> </span><span class="k" data-group-id="4111396305-6">do</span><span class="w">
    </span><span class="n">argument</span><span class="w"> </span><span class="ss">:query</span><span class="p">,</span><span class="w"> </span><span class="ss">:string</span><span class="p">,</span><span class="w"> </span><span class="ss">allow_nil?</span><span class="p">:</span><span class="w"> </span><span class="no">false</span><span class="w">
    
    </span><span class="c1"># Prepare modifies the query before execution</span><span class="w">
    </span><span class="n">prepare</span><span class="w"> </span><span class="k" data-group-id="4111396305-7">fn</span><span class="w"> </span><span class="n">query</span><span class="p">,</span><span class="w"> </span><span class="c">_context</span><span class="w"> </span><span class="o">-&gt;</span><span class="w">
      </span><span class="nc">Ash.Query</span><span class="o">.</span><span class="n">filter</span><span class="p" data-group-id="4111396305-8">(</span><span class="n">query</span><span class="p">,</span><span class="w"> </span><span class="n">contains</span><span class="p" data-group-id="4111396305-9">(</span><span class="n">title</span><span class="p">,</span><span class="w"> </span><span class="o">^</span><span class="n">query</span><span class="o">.</span><span class="n">arguments</span><span class="o">.</span><span class="n">query</span><span class="p" data-group-id="4111396305-9">)</span><span class="p" data-group-id="4111396305-8">)</span><span class="w">
    </span><span class="k" data-group-id="4111396305-7">end</span><span class="w">
  </span><span class="k" data-group-id="4111396305-6">end</span><span class="w">
  
  </span><span class="n">read</span><span class="w"> </span><span class="ss">:user_posts</span><span class="w"> </span><span class="k" data-group-id="4111396305-10">do</span><span class="w">
    </span><span class="n">argument</span><span class="w"> </span><span class="ss">:email</span><span class="p">,</span><span class="w"> </span><span class="ss">:string</span><span class="p">,</span><span class="w"> </span><span class="ss">allow_nil?</span><span class="p">:</span><span class="w"> </span><span class="no">false</span><span class="w">
    </span><span class="n">argument</span><span class="w"> </span><span class="ss">:status</span><span class="p">,</span><span class="w"> </span><span class="ss">:string</span><span class="p">,</span><span class="w"> </span><span class="ss">default</span><span class="p">:</span><span class="w"> </span><span class="s">&quot;published&quot;</span><span class="w">
    
    </span><span class="c1"># Validate arguments before processing</span><span class="w">
    </span><span class="n">validate</span><span class="w"> </span><span class="n">match</span><span class="p" data-group-id="4111396305-11">(</span><span class="ss">:email</span><span class="p">,</span><span class="w"> </span><span class="sr">~r/^[^</span><span class="se">\s</span><span class="sr">]+@[^</span><span class="se">\s</span><span class="sr">]+</span><span class="se">\.</span><span class="sr">[^</span><span class="se">\s</span><span class="sr">]+$/</span><span class="p" data-group-id="4111396305-11">)</span><span class="w"> </span><span class="k" data-group-id="4111396305-12">do</span><span class="w">
      </span><span class="n">message</span><span class="w"> </span><span class="s">&quot;must be a valid email address&quot;</span><span class="w">
    </span><span class="k" data-group-id="4111396305-12">end</span><span class="w">
    
    </span><span class="n">validate</span><span class="w"> </span><span class="n">one_of</span><span class="p" data-group-id="4111396305-13">(</span><span class="ss">:status</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="4111396305-14">[</span><span class="s">&quot;published&quot;</span><span class="p">,</span><span class="w"> </span><span class="s">&quot;draft&quot;</span><span class="p">,</span><span class="w"> </span><span class="s">&quot;archived&quot;</span><span class="p" data-group-id="4111396305-14">]</span><span class="p" data-group-id="4111396305-13">)</span><span class="w">
    
    </span><span class="c1"># Conditional validation - only validate if email is provided</span><span class="w">
    </span><span class="n">validate</span><span class="w"> </span><span class="n">present</span><span class="p" data-group-id="4111396305-15">(</span><span class="ss">:email</span><span class="p" data-group-id="4111396305-15">)</span><span class="w"> </span><span class="k" data-group-id="4111396305-16">do</span><span class="w">
      </span><span class="n">where</span><span class="w"> </span><span class="n">present</span><span class="p" data-group-id="4111396305-17">(</span><span class="ss">:email</span><span class="p" data-group-id="4111396305-17">)</span><span class="w">
    </span><span class="k" data-group-id="4111396305-16">end</span><span class="w">
  </span><span class="k" data-group-id="4111396305-10">end</span><span class="w">
</span><span class="k" data-group-id="4111396305-1">end</span></code></pre><h3 id="building-queries-manually">Building Queries Manually</h3><p>For more complex scenarios, you can build queries manually before calling the action:</p><pre><code class="makeup elixir" translate="no"><span class="kn">require</span><span class="w"> </span><span class="nc">Ash.Query</span><span class="w">

</span><span class="c1"># Build a complex query</span><span class="w">
</span><span class="n">query</span><span class="w"> </span><span class="o">=</span><span class="w"> 
  </span><span class="nc">MyApp.Post</span><span class="w">
  </span><span class="o">|&gt;</span><span class="w"> </span><span class="nc">Ash.Query</span><span class="o">.</span><span class="n">filter</span><span class="p" data-group-id="3477758859-1">(</span><span class="n">status</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="ss">:published</span><span class="p" data-group-id="3477758859-1">)</span><span class="w">
  </span><span class="o">|&gt;</span><span class="w"> </span><span class="nc">Ash.Query</span><span class="o">.</span><span class="n">sort</span><span class="p" data-group-id="3477758859-2">(</span><span class="ss">published_at</span><span class="p">:</span><span class="w"> </span><span class="ss">:desc</span><span class="p" data-group-id="3477758859-2">)</span><span class="w">
  </span><span class="o">|&gt;</span><span class="w"> </span><span class="nc">Ash.Query</span><span class="o">.</span><span class="n">limit</span><span class="p" data-group-id="3477758859-3">(</span><span class="mi">10</span><span class="p" data-group-id="3477758859-3">)</span><span class="w">

</span><span class="c1"># Execute the query</span><span class="w">
</span><span class="n">posts</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nc">Ash</span><span class="o">.</span><span class="n">read!</span><span class="p" data-group-id="3477758859-4">(</span><span class="n">query</span><span class="p" data-group-id="3477758859-4">)</span><span class="w">

</span><span class="c1"># Or use it with a specific action</span><span class="w">
</span><span class="n">posts</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nc">Ash</span><span class="o">.</span><span class="n">read!</span><span class="p" data-group-id="3477758859-5">(</span><span class="n">query</span><span class="p">,</span><span class="w"> </span><span class="ss">action</span><span class="p">:</span><span class="w"> </span><span class="ss">:published_posts</span><span class="p" data-group-id="3477758859-5">)</span></code></pre><h3 id="common-query-patterns">Common Query Patterns</h3><h4>Pagination</h4><pre><code class="makeup elixir" translate="no"><span class="c1"># With page options</span><span class="w">
</span><span class="n">posts</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nc">MyApp.Blog</span><span class="o">.</span><span class="n">list_posts!</span><span class="p" data-group-id="9643918432-1">(</span><span class="w">
  </span><span class="ss">page</span><span class="p">:</span><span class="w"> </span><span class="p" data-group-id="9643918432-2">[</span><span class="ss">limit</span><span class="p">:</span><span class="w"> </span><span class="mi">20</span><span class="p">,</span><span class="w"> </span><span class="ss">offset</span><span class="p">:</span><span class="w"> </span><span class="mi">40</span><span class="p" data-group-id="9643918432-2">]</span><span class="w">
</span><span class="p" data-group-id="9643918432-1">)</span><span class="w">

</span><span class="c1"># with a query</span><span class="w">
</span><span class="nc">MyApp.Post</span><span class="w">
</span><span class="o">|&gt;</span><span class="w"> </span><span class="nc">Ash.Query</span><span class="o">.</span><span class="n">page</span><span class="p" data-group-id="9643918432-3">(</span><span class="w">
  </span><span class="ss">limit</span><span class="p">:</span><span class="w"> </span><span class="mi">20</span><span class="p">,</span><span class="w"> </span><span class="ss">offset</span><span class="p">:</span><span class="w"> </span><span class="mi">40</span><span class="w">
</span><span class="p" data-group-id="9643918432-3">)</span><span class="w">

</span><span class="c1"># when calling an action</span><span class="w">

</span><span class="nc">MyApp.Post</span><span class="w">
</span><span class="o">|&gt;</span><span class="w"> </span><span class="nc">Ash.Query</span><span class="o">.</span><span class="n">for_read</span><span class="p" data-group-id="9643918432-4">(</span><span class="n">...</span><span class="p" data-group-id="9643918432-4">)</span><span class="w">
</span><span class="o">|&gt;</span><span class="w"> </span><span class="nc">Ash</span><span class="o">.</span><span class="n">read!</span><span class="p" data-group-id="9643918432-5">(</span><span class="ss">page</span><span class="p">:</span><span class="w"> </span><span class="p" data-group-id="9643918432-6">[</span><span class="ss">limit</span><span class="p">:</span><span class="w"> </span><span class="mi">20</span><span class="p">,</span><span class="w"> </span><span class="ss">offste</span><span class="p">:</span><span class="w"> </span><span class="mi">40</span><span class="p" data-group-id="9643918432-6">]</span><span class="p" data-group-id="9643918432-5">)</span></code></pre><h4>Complex Filtering</h4><pre><code class="makeup elixir" translate="no"><span class="c1"># Filtering with relationships</span><span class="w">
</span><span class="n">posts</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nc">MyApp.Blog</span><span class="o">.</span><span class="n">list_posts!</span><span class="p" data-group-id="5150485946-1">(</span><span class="w">
  </span><span class="ss">query</span><span class="p">:</span><span class="w"> </span><span class="p" data-group-id="5150485946-2">[</span><span class="w">
    </span><span class="ss">filter</span><span class="p">:</span><span class="w"> </span><span class="p" data-group-id="5150485946-3">[</span><span class="w">
      </span><span class="ss">author</span><span class="p">:</span><span class="w"> </span><span class="p" data-group-id="5150485946-4">[</span><span class="ss">verified</span><span class="p">:</span><span class="w"> </span><span class="no">true</span><span class="p" data-group-id="5150485946-4">]</span><span class="p">,</span><span class="w">
      </span><span class="ss">comments_count</span><span class="p">:</span><span class="w"> </span><span class="p" data-group-id="5150485946-5">[</span><span class="ss">greater_than</span><span class="p">:</span><span class="w"> </span><span class="mi">5</span><span class="p" data-group-id="5150485946-5">]</span><span class="w">
    </span><span class="p" data-group-id="5150485946-3">]</span><span class="w">
  </span><span class="p" data-group-id="5150485946-2">]</span><span class="w">
</span><span class="p" data-group-id="5150485946-1">)</span><span class="w">

</span><span class="c1"># Using filter expressions (requires building query manually)</span><span class="w">
</span><span class="n">query</span><span class="w"> </span><span class="o">=</span><span class="w"> 
  </span><span class="nc">MyApp.Post</span><span class="w">
  </span><span class="o">|&gt;</span><span class="w"> </span><span class="nc">Ash.Query</span><span class="o">.</span><span class="n">filter</span><span class="p" data-group-id="5150485946-6">(</span><span class="w">
    </span><span class="n">status</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="ss">:published</span><span class="w"> </span><span class="ow">and</span><span class="w"> 
    </span><span class="p" data-group-id="5150485946-7">(</span><span class="n">author</span><span class="o">.</span><span class="n">verified</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="no">true</span><span class="w"> </span><span class="ow">or</span><span class="w"> </span><span class="n">author</span><span class="o">.</span><span class="n">admin</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="no">true</span><span class="p" data-group-id="5150485946-7">)</span><span class="w">
  </span><span class="p" data-group-id="5150485946-6">)</span></code></pre><h2 id="validations-on-read-actions">Validations on Read Actions</h2><p>Read actions support validations to ensure query arguments meet your requirements before processing. Most built-in validations work on both changesets and queries.</p><p>Validations run alongside preparations during the query building phase, in the order they are defined in the action. This means you can mix preparations and validations, and they will execute in the sequence you specify.</p><h3 id="supported-validations">Supported Validations</h3><p>The following built-in validations support queries:</p><ul><li><code class="inline">action_is</code> - validates the action name</li><li><code class="inline">argument_does_not_equal</code>, <code class="inline">argument_equals</code>, <code class="inline">argument_in</code> - validates argument values</li><li><code class="inline">compare</code> - compares argument values </li><li><code class="inline">confirm</code> - confirms two arguments match</li><li><code class="inline">match</code> - validates arguments against regex patterns</li><li><code class="inline">negate</code> - negates other validations</li><li><code class="inline">one_of</code> - validates arguments are in allowed values</li><li><code class="inline">present</code> - validates required arguments are present</li><li><code class="inline">string_length</code> - validates string argument length</li></ul><h3 id="validation-examples">Validation Examples</h3><pre><code class="makeup elixir" translate="no"><span class="n">actions</span><span class="w"> </span><span class="k" data-group-id="8763436456-1">do</span><span class="w">
  </span><span class="n">read</span><span class="w"> </span><span class="ss">:user_search</span><span class="w"> </span><span class="k" data-group-id="8763436456-2">do</span><span class="w">
    </span><span class="n">argument</span><span class="w"> </span><span class="ss">:email</span><span class="p">,</span><span class="w"> </span><span class="ss">:string</span><span class="w">
    </span><span class="n">argument</span><span class="w"> </span><span class="ss">:role</span><span class="p">,</span><span class="w"> </span><span class="ss">:string</span><span class="w">
    </span><span class="n">argument</span><span class="w"> </span><span class="ss">:min_age</span><span class="p">,</span><span class="w"> </span><span class="ss">:integer</span><span class="w">
    </span><span class="n">argument</span><span class="w"> </span><span class="ss">:max_age</span><span class="p">,</span><span class="w"> </span><span class="ss">:integer</span><span class="w">
    
    </span><span class="c1"># Validate email format</span><span class="w">
    </span><span class="n">validate</span><span class="w"> </span><span class="n">match</span><span class="p" data-group-id="8763436456-3">(</span><span class="ss">:email</span><span class="p">,</span><span class="w"> </span><span class="sr">~r/^[^</span><span class="se">\s</span><span class="sr">]+@[^</span><span class="se">\s</span><span class="sr">]+</span><span class="se">\.</span><span class="sr">[^</span><span class="se">\s</span><span class="sr">]+$/</span><span class="p" data-group-id="8763436456-3">)</span><span class="w"> </span><span class="k" data-group-id="8763436456-4">do</span><span class="w">
      </span><span class="n">message</span><span class="w"> </span><span class="s">&quot;must be a valid email address&quot;</span><span class="w">
    </span><span class="k" data-group-id="8763436456-4">end</span><span class="w">
    
    </span><span class="c1"># Validate role is one of allowed values</span><span class="w">
    </span><span class="n">validate</span><span class="w"> </span><span class="n">one_of</span><span class="p" data-group-id="8763436456-5">(</span><span class="ss">:role</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="8763436456-6">[</span><span class="s">&quot;admin&quot;</span><span class="p">,</span><span class="w"> </span><span class="s">&quot;user&quot;</span><span class="p">,</span><span class="w"> </span><span class="s">&quot;moderator&quot;</span><span class="p" data-group-id="8763436456-6">]</span><span class="p" data-group-id="8763436456-5">)</span><span class="w">
    
    </span><span class="c1"># Validate age range makes sense</span><span class="w">
    </span><span class="n">validate</span><span class="w"> </span><span class="n">compare</span><span class="p" data-group-id="8763436456-7">(</span><span class="ss">:min_age</span><span class="p">,</span><span class="w"> </span><span class="ss">less_than</span><span class="p">:</span><span class="w"> </span><span class="ss">:max_age</span><span class="p" data-group-id="8763436456-7">)</span><span class="w"> </span><span class="k" data-group-id="8763436456-8">do</span><span class="w">
      </span><span class="n">message</span><span class="w"> </span><span class="s">&quot;minimum age must be less than maximum age&quot;</span><span class="w">
    </span><span class="k" data-group-id="8763436456-8">end</span><span class="w">
    
    </span><span class="c1"># Conditional validation - only validate email if provided</span><span class="w">
    </span><span class="n">validate</span><span class="w"> </span><span class="n">present</span><span class="p" data-group-id="8763436456-9">(</span><span class="ss">:email</span><span class="p" data-group-id="8763436456-9">)</span><span class="w"> </span><span class="k" data-group-id="8763436456-10">do</span><span class="w">
      </span><span class="n">where</span><span class="w"> </span><span class="n">present</span><span class="p" data-group-id="8763436456-11">(</span><span class="ss">:email</span><span class="p" data-group-id="8763436456-11">)</span><span class="w">
    </span><span class="k" data-group-id="8763436456-10">end</span><span class="w">
    
    </span><span class="c1"># Skip expensive validation if query is already invalid</span><span class="w">
    </span><span class="n">validate</span><span class="w"> </span><span class="n">expensive_validation</span><span class="p" data-group-id="8763436456-12">(</span><span class="p" data-group-id="8763436456-12">)</span><span class="w"> </span><span class="k" data-group-id="8763436456-13">do</span><span class="w">
      </span><span class="n">only_when_valid?</span><span class="w"> </span><span class="no">true</span><span class="w">
    </span><span class="k" data-group-id="8763436456-13">end</span><span class="w">
  </span><span class="k" data-group-id="8763436456-2">end</span><span class="w">
</span><span class="k" data-group-id="8763436456-1">end</span></code></pre><h3 id="where-clauses">Where Clauses</h3><p>Use <code class="inline">where</code> clauses to conditionally apply validations:</p><pre><code class="makeup elixir" translate="no"><span class="n">read</span><span class="w"> </span><span class="ss">:conditional_search</span><span class="w"> </span><span class="k" data-group-id="3320734673-1">do</span><span class="w">
  </span><span class="n">argument</span><span class="w"> </span><span class="ss">:include_archived</span><span class="p">,</span><span class="w"> </span><span class="ss">:boolean</span><span class="p">,</span><span class="w"> </span><span class="ss">default</span><span class="p">:</span><span class="w"> </span><span class="no">false</span><span class="w">
  </span><span class="n">argument</span><span class="w"> </span><span class="ss">:archive_reason</span><span class="p">,</span><span class="w"> </span><span class="ss">:string</span><span class="w">
  
  </span><span class="c1"># Only validate archive_reason if including archived items</span><span class="w">
  </span><span class="n">validate</span><span class="w"> </span><span class="n">present</span><span class="p" data-group-id="3320734673-2">(</span><span class="ss">:archive_reason</span><span class="p" data-group-id="3320734673-2">)</span><span class="w"> </span><span class="k" data-group-id="3320734673-3">do</span><span class="w">
    </span><span class="n">where</span><span class="w"> </span><span class="n">argument_equals</span><span class="p" data-group-id="3320734673-4">(</span><span class="ss">:include_archived</span><span class="p">,</span><span class="w"> </span><span class="no">true</span><span class="p" data-group-id="3320734673-4">)</span><span class="w">
  </span><span class="k" data-group-id="3320734673-3">end</span><span class="w">
</span><span class="k" data-group-id="3320734673-1">end</span></code></pre><h3 id="only_when_valid-option">only_when_valid? Option</h3><p>Use <code class="inline">only_when_valid?</code> to skip validations when the query is already invalid:</p><pre><code class="makeup elixir" translate="no"><span class="n">read</span><span class="w"> </span><span class="ss">:complex_search</span><span class="w"> </span><span class="k" data-group-id="6753078185-1">do</span><span class="w">
  </span><span class="n">argument</span><span class="w"> </span><span class="ss">:required_field</span><span class="p">,</span><span class="w"> </span><span class="ss">:string</span><span class="w">
  
  </span><span class="c1"># This validation must pass</span><span class="w">
  </span><span class="n">validate</span><span class="w"> </span><span class="n">present</span><span class="p" data-group-id="6753078185-2">(</span><span class="ss">:required_field</span><span class="p" data-group-id="6753078185-2">)</span><span class="w">
  
  </span><span class="c1"># This expensive validation only runs if query is valid so far</span><span class="w">
  </span><span class="n">validate</span><span class="w"> </span><span class="n">expensive_external_validation</span><span class="p" data-group-id="6753078185-3">(</span><span class="p" data-group-id="6753078185-3">)</span><span class="w"> </span><span class="k" data-group-id="6753078185-4">do</span><span class="w">
    </span><span class="n">only_when_valid?</span><span class="w"> </span><span class="no">true</span><span class="w">
  </span><span class="k" data-group-id="6753078185-4">end</span><span class="w">
</span><span class="k" data-group-id="6753078185-1">end</span></code></pre><p>For detailed information about query capabilities, see:</p><ul><li><a href="Ash.Query.xhtml"><code class="inline">Ash.Query</code></a> module documentation for building queries</li><li><a href="Ash.Query.xhtml#build/2"><code class="inline">Ash.Query.build/2</code></a> for all available query options</li><li><a href="write-queries.xhtml">Write Queries guide</a> for practical examples</li><li><a href="validations.xhtml">Validations guide</a> for more validation examples</li></ul>

  </body>
</html>
