<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"
      xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>Notifiers - ash v3.5.33</title>
    <meta name="generator" content="ExDoc v0.38.2" />
    <link type="text/css" rel="stylesheet" href="dist/epub-elixir-FNUUKFP7.css" />
    <script src="dist/epub-4WIP524F.js"></script>

  </head>
  <body class="content-inner">

    <h1 id="content">Notifiers</h1>
<h2 id="what-are-notifiers-for">What are notifiers for?</h2><p>Notifiers allow you to tap into create, update and destroy actions on a resource. Notifiers are called after
the current transaction is committed, which solves a lot of problems that can happen from performing a certain
kind of side effect in your action code.</p><p>A common example of one such issue is using Phoenix PubSub to notify another part of your app (often a LiveView or
phoenix channel) of a change. If you send a message to another process while your transaction is still open, and
that process tries to look up a record you just created, it won't find it yet, because your transaction is still open!</p><p>Notifiers are a solution for a certain kind of side effect, what we call &quot;at most once&quot; effects. An example is
sending an event to an analytics system, or our pubsub example above. It is &quot;okay&quot; if the event is fired and some
error in that process prevents it from being sent.</p><h3 id="when-you-really-need-an-event-to-happen">When you really need an event to happen</h3><p>In these cases you are looking for something other than a notifier. For example, you may want to look into integrating
<a href="https://hexdocs.pm/oban">https://hexdocs.pm/oban</a> into your application, allowing you to commit a &quot;job&quot; in the same transaction as your changes, to be processed later.</p><p>Alternatively, you could look into using <a href="https://hexdocs.pm/reactor/0.15.6/Reactor.html"><code class="inline">Reactor</code></a>, which is designed for writing &quot;sagas&quot; and has first-class support
for Ash via the <code class="inline">AshReactor</code> extension.</p><h3 id="including-a-notifier-in-a-resource">Including a notifier in a resource</h3><p>If the notifier is also an extension, include it in the <code class="inline">notifiers</code> key:</p><pre><code class="makeup elixir" translate="no"><span class="kd">defmodule</span><span class="w"> </span><span class="nc">MyResource</span><span class="w"> </span><span class="k" data-group-id="3727655976-1">do</span><span class="w">
  </span><span class="kn">use</span><span class="w"> </span><span class="nc">Ash.Resource</span><span class="p">,</span><span class="w">
    </span><span class="ss">notifiers</span><span class="p">:</span><span class="w"> </span><span class="p" data-group-id="3727655976-2">[</span><span class="nc">ExampleNotifier</span><span class="p" data-group-id="3727655976-2">]</span><span class="w">
</span><span class="k" data-group-id="3727655976-1">end</span></code></pre><p>Configuring a notifier for a specific action or actions can be a great way to avoid complexity in the implementation of a notifier. It allows you to avoid doing things like pattern matching on the action, and treat it more like a change module, that does its work whenever it is called.</p><pre><code class="makeup elixir" translate="no"><span class="n">create</span><span class="w"> </span><span class="ss">:create</span><span class="w"> </span><span class="k" data-group-id="9025360747-1">do</span><span class="w">
  </span><span class="n">notifiers</span><span class="w"> </span><span class="p" data-group-id="9025360747-2">[</span><span class="nc">ExampleNotifier</span><span class="p" data-group-id="9025360747-2">]</span><span class="w">
</span><span class="k" data-group-id="9025360747-1">end</span></code></pre><p>When your notifier is not an extension, and you want it to run on all actions, include it this way to avoid unnecessary compile time dependencies:</p><pre><code class="makeup elixir" translate="no"><span class="kd">defmodule</span><span class="w"> </span><span class="nc">MyResource</span><span class="w"> </span><span class="k" data-group-id="0365776444-1">do</span><span class="w">
  </span><span class="kn">use</span><span class="w"> </span><span class="nc">Ash.Resource</span><span class="p">,</span><span class="w">
    </span><span class="ss">simple_notifiers</span><span class="p">:</span><span class="w"> </span><span class="p" data-group-id="0365776444-2">[</span><span class="nc">ExampleNotifier</span><span class="p" data-group-id="0365776444-2">]</span><span class="w">
</span><span class="k" data-group-id="0365776444-1">end</span></code></pre><h2 id="built-in-notifiers">Built-in Notifiers</h2><p>Ash comes with a builtin pub_sub notifier: <a href="Ash.Notifier.PubSub.xhtml"><code class="inline">Ash.Notifier.PubSub</code></a>. See the module documentation for more.</p><h2 id="creating-your-own-notifier">Creating your own notifier</h2><p>A notifier is a simple extension that must implement a single callback <code class="inline">notify/1</code>. Notifiers do not have to implement an Ash DSL extension, but they may in order to configure how that notifier should behave. See <a href="Ash.Notifier.Notification.xhtml"><code class="inline">Ash.Notifier.Notification</code></a> for the currently available fields on a notification.</p><p>For more information on creating a DSL extension to configure your notifier, see the docs for <a href="https://hexdocs.pm/spark/2.2.67/Spark.Dsl.Extension.html"><code class="inline">Spark.Dsl.Extension</code></a>.</p><section role="note" class="admonition warning"><h3 id="notifier-performance" class="admonition-title warning">Notifier performance</h3><p>Notifiers should not do intensive synchronous work. If any heavy work needs to be done, they should delegate to something else to handle the notification, like sending it to a GenServer or GenStage.</p></section><h3 id="example-notifier">Example notifier</h3><pre><code class="makeup elixir" translate="no"><span class="kd">defmodule</span><span class="w"> </span><span class="nc">ExampleNotifier</span><span class="w"> </span><span class="k" data-group-id="7817573562-1">do</span><span class="w">
  </span><span class="kn">use</span><span class="w"> </span><span class="nc">Ash.Notifier</span><span class="w">

  </span><span class="kd">def</span><span class="w"> </span><span class="nf">notify</span><span class="p" data-group-id="7817573562-2">(</span><span class="p" data-group-id="7817573562-3">%</span><span class="nc" data-group-id="7817573562-3">Ash.Notifier.Notification</span><span class="p" data-group-id="7817573562-3">{</span><span class="ss">resource</span><span class="p">:</span><span class="w"> </span><span class="n">resource</span><span class="p">,</span><span class="w"> </span><span class="ss">action</span><span class="p">:</span><span class="w"> </span><span class="p" data-group-id="7817573562-4">%{</span><span class="ss">type</span><span class="p">:</span><span class="w"> </span><span class="ss">:create</span><span class="p" data-group-id="7817573562-4">}</span><span class="p">,</span><span class="w"> </span><span class="ss">actor</span><span class="p">:</span><span class="w"> </span><span class="n">actor</span><span class="p" data-group-id="7817573562-3">}</span><span class="p" data-group-id="7817573562-2">)</span><span class="w"> </span><span class="k" data-group-id="7817573562-5">do</span><span class="w">
    </span><span class="k">if</span><span class="w"> </span><span class="n">actor</span><span class="w"> </span><span class="k" data-group-id="7817573562-6">do</span><span class="w">
      </span><span class="nc">Logger</span><span class="o">.</span><span class="n">info</span><span class="p" data-group-id="7817573562-7">(</span><span class="s">&quot;</span><span class="si" data-group-id="7817573562-8">#{</span><span class="n">actor</span><span class="o">.</span><span class="n">id</span><span class="si" data-group-id="7817573562-8">}</span><span class="s"> created a </span><span class="si" data-group-id="7817573562-9">#{</span><span class="n">resource</span><span class="si" data-group-id="7817573562-9">}</span><span class="s">&quot;</span><span class="p" data-group-id="7817573562-7">)</span><span class="w">
    </span><span class="k" data-group-id="7817573562-6">else</span><span class="w">
      </span><span class="nc">Logger</span><span class="o">.</span><span class="n">info</span><span class="p" data-group-id="7817573562-10">(</span><span class="s">&quot;A non-logged in user created a </span><span class="si" data-group-id="7817573562-11">#{</span><span class="n">resource</span><span class="si" data-group-id="7817573562-11">}</span><span class="s">&quot;</span><span class="p" data-group-id="7817573562-10">)</span><span class="w">
    </span><span class="k" data-group-id="7817573562-6">end</span><span class="w">
  </span><span class="k" data-group-id="7817573562-5">end</span><span class="w">
</span><span class="k" data-group-id="7817573562-1">end</span></code></pre><h2 id="transactions">Transactions</h2><p>Domain calls involving resources who's datalayer supports transactions (like Postgres), notifications are saved up and sent after the transaction is closed. For example, the domain call below ultimately results in many many database calls.</p><pre><code class="makeup elixir" translate="no"><span class="nc">Post</span><span class="w">
</span><span class="o">|&gt;</span><span class="w"> </span><span class="nc">Ash.Changeset</span><span class="o">.</span><span class="n">for_update</span><span class="p" data-group-id="1584177372-1">(</span><span class="ss">:update</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="1584177372-2">%{</span><span class="p" data-group-id="1584177372-2">}</span><span class="p" data-group-id="1584177372-1">)</span><span class="w">
</span><span class="o">|&gt;</span><span class="w"> </span><span class="nc">Ash.Changeset</span><span class="o">.</span><span class="n">manage_relationship</span><span class="p" data-group-id="1584177372-3">(</span><span class="ss">:related_posts</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="1584177372-4">[</span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="mi">2</span><span class="p">,</span><span class="w"> </span><span class="mi">3</span><span class="p" data-group-id="1584177372-4">]</span><span class="p">,</span><span class="w"> </span><span class="ss">type</span><span class="p">:</span><span class="w"> </span><span class="ss">:append</span><span class="p" data-group-id="1584177372-3">)</span><span class="w">
</span><span class="o">|&gt;</span><span class="w"> </span><span class="nc">Ash.Changeset</span><span class="o">.</span><span class="n">manage_relationship</span><span class="p" data-group-id="1584177372-5">(</span><span class="ss">:related_posts</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="1584177372-6">[</span><span class="mi">4</span><span class="p">,</span><span class="w"> </span><span class="mi">5</span><span class="p" data-group-id="1584177372-6">]</span><span class="p">,</span><span class="w"> </span><span class="ss">type</span><span class="p">:</span><span class="w"> </span><span class="ss">:remove</span><span class="p" data-group-id="1584177372-5">)</span><span class="w">
</span><span class="o">|&gt;</span><span class="w"> </span><span class="nc">Ash.Changeset</span><span class="o">.</span><span class="n">manage_relationship</span><span class="p" data-group-id="1584177372-7">(</span><span class="ss">:comments</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="1584177372-8">[</span><span class="mi">10</span><span class="p" data-group-id="1584177372-8">]</span><span class="p">,</span><span class="w"> </span><span class="ss">type</span><span class="p">:</span><span class="w"> </span><span class="ss">:append</span><span class="p" data-group-id="1584177372-7">)</span><span class="w">
</span><span class="o">|&gt;</span><span class="w"> </span><span class="nc">Ash</span><span class="o">.</span><span class="n">update!</span><span class="p" data-group-id="1584177372-9">(</span><span class="p" data-group-id="1584177372-9">)</span></code></pre><p><code class="inline">Ash.Changeset.manage_relationship</code> doesn't leverage bulk operations yet, so it performs the following operations:</p><ul><li>a read of the currently related posts</li><li>a read of the currently related comments</li><li>a creation of a post_link to relate to 1</li><li>a creation of a post_link to relate to 2</li><li>a creation of a post_link to relate to 3</li><li>a destruction of the post_link related to 4</li><li>a destruction of the post_link related to 5</li><li>an update to comment 10, to set its <code class="inline">post_id</code> to this post</li></ul><p>If all three of these resources have notifiers configured, we need to send a notification for each operation (notifications are not sent for reads). For data consistency reasons, if a data layer supports transactions, all writes are done in a transaction. However, if you try to read the record from the database that you have just received a notification about before the transaction has been closed, in a different process, the information will be wrong. For this reason, Ash accumulates notifications until they can be sent.</p><p>If you need to perform multiple operations against your resources in your own transaction, you will have to handle that case yourself. To support this, <a href="Ash.xhtml#create/2"><code class="inline">Ash.create/2</code></a>, <a href="Ash.xhtml#update/2"><code class="inline">Ash.update/2</code></a> and <a href="Ash.xhtml#destroy/2"><code class="inline">Ash.destroy/2</code></a> support a <code class="inline">return_notifications?: true</code> option. This causes the domain call to return <code class="inline">{:ok, result, notifications}</code> in the successful case. Here is an example of how you might use it.</p><pre><code class="makeup elixir" translate="no"><span class="n">result</span><span class="w"> </span><span class="o">=</span><span class="w">
  </span><span class="nc">Ash.DataLayer</span><span class="o">.</span><span class="n">transaction</span><span class="p" data-group-id="3929739183-1">(</span><span class="n">resource</span><span class="p">,</span><span class="w"> </span><span class="k" data-group-id="3929739183-2">fn</span><span class="w"> </span><span class="o">-&gt;</span><span class="w">
    </span><span class="p" data-group-id="3929739183-3">{</span><span class="ss">:ok</span><span class="p">,</span><span class="w"> </span><span class="n">something</span><span class="p">,</span><span class="w"> </span><span class="n">notifications1</span><span class="p" data-group-id="3929739183-3">}</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">create_something</span><span class="p" data-group-id="3929739183-4">(</span><span class="p" data-group-id="3929739183-4">)</span><span class="w">
    </span><span class="p" data-group-id="3929739183-5">{</span><span class="ss">:ok</span><span class="p">,</span><span class="w"> </span><span class="n">result</span><span class="p">,</span><span class="w"> </span><span class="n">notifications2</span><span class="p" data-group-id="3929739183-5">}</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">create_another_thing</span><span class="p" data-group-id="3929739183-6">(</span><span class="n">something</span><span class="p" data-group-id="3929739183-6">)</span><span class="w">
    </span><span class="p" data-group-id="3929739183-7">{</span><span class="ss">:ok</span><span class="p">,</span><span class="w"> </span><span class="n">notifications3</span><span class="p" data-group-id="3929739183-7">}</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">destroy_something</span><span class="p" data-group-id="3929739183-8">(</span><span class="n">something</span><span class="p" data-group-id="3929739183-8">)</span><span class="w">

    </span><span class="p" data-group-id="3929739183-9">{</span><span class="n">result</span><span class="p">,</span><span class="w"> </span><span class="nc">Enum</span><span class="o">.</span><span class="n">concat</span><span class="p" data-group-id="3929739183-10">(</span><span class="p" data-group-id="3929739183-11">[</span><span class="n">notifications1</span><span class="p">,</span><span class="w"> </span><span class="n">notifications2</span><span class="p">,</span><span class="w"> </span><span class="n">notifications3</span><span class="p" data-group-id="3929739183-11">]</span><span class="p" data-group-id="3929739183-10">)</span><span class="p" data-group-id="3929739183-9">}</span><span class="w">
  </span><span class="k" data-group-id="3929739183-2">end</span><span class="p" data-group-id="3929739183-1">)</span><span class="w">

</span><span class="k">case</span><span class="w"> </span><span class="n">result</span><span class="w"> </span><span class="k" data-group-id="3929739183-12">do</span><span class="w">
  </span><span class="p" data-group-id="3929739183-13">{</span><span class="ss">:ok</span><span class="p">,</span><span class="w"> </span><span class="n">value</span><span class="p">,</span><span class="w"> </span><span class="n">notifications</span><span class="p" data-group-id="3929739183-13">}</span><span class="w"> </span><span class="o">-&gt;</span><span class="w">
     </span><span class="nc">Ash.Notifier</span><span class="o">.</span><span class="n">notify</span><span class="p" data-group-id="3929739183-14">(</span><span class="n">notifications</span><span class="p" data-group-id="3929739183-14">)</span><span class="w">

     </span><span class="n">value</span><span class="w">
  </span><span class="p" data-group-id="3929739183-15">{</span><span class="ss">:error</span><span class="p">,</span><span class="w"> </span><span class="n">error</span><span class="p" data-group-id="3929739183-15">}</span><span class="w"> </span><span class="o">-&gt;</span><span class="w">
    </span><span class="n">handle_error</span><span class="p" data-group-id="3929739183-16">(</span><span class="n">error</span><span class="p" data-group-id="3929739183-16">)</span><span class="w">
</span><span class="k" data-group-id="3929739183-12">end</span></code></pre>

  </body>
</html>
