<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"
      xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>Validations - ash v3.5.33</title>
    <meta name="generator" content="ExDoc v0.38.2" />
    <link type="text/css" rel="stylesheet" href="dist/epub-elixir-FNUUKFP7.css" />
    <script src="dist/epub-4WIP524F.js"></script>

  </head>
  <body class="content-inner">

    <h1 id="content">Validations</h1>
<p>Validations are similar to <a href="changes.xhtml">changes</a>, except they cannot modify the changeset. They can only continue, or add an error.</p><p>Validations work on all action types. When used on queries and generic actions, they validate the arguments to ensure they meet your requirements before processing.</p><h2 id="builtin-validations">Builtin Validations</h2><p>There are a number of builtin validations that can be used, and are automatically imported into your resources. See <a href="Ash.Resource.Validation.Builtins.xhtml"><code class="inline">Ash.Resource.Validation.Builtins</code></a> for more.</p><h3 id="query-support">Query Support</h3><p>The following builtin validations support both changesets and queries:</p><ul><li><code class="inline">action_is</code> - validates the action name</li><li><code class="inline">argument_does_not_equal</code>, <code class="inline">argument_equals</code>, <code class="inline">argument_in</code> - validates argument values</li><li><code class="inline">compare</code> - compares values (arguments or attributes)</li><li><code class="inline">confirm</code> - confirms two values match</li><li><code class="inline">match</code> - validates values against regex patterns</li><li><code class="inline">negate</code> - negates other validations</li><li><code class="inline">one_of</code> - validates values are in allowed options</li><li><code class="inline">present</code> - validates required values are present</li><li><code class="inline">string_length</code> - validates string length</li></ul><p>Some examples of usage of builtin validations</p><pre><code class="makeup elixir" translate="no"><span class="c1"># Works on both changesets and queries</span><span class="w">
</span><span class="n">validate</span><span class="w"> </span><span class="n">match</span><span class="p" data-group-id="7402608372-1">(</span><span class="ss">:email</span><span class="p">,</span><span class="w"> </span><span class="s">&quot;@&quot;</span><span class="p" data-group-id="7402608372-1">)</span><span class="w">

</span><span class="n">validate</span><span class="w"> </span><span class="n">compare</span><span class="p" data-group-id="7402608372-2">(</span><span class="ss">:age</span><span class="p">,</span><span class="w"> </span><span class="ss">greater_than_or_equal_to</span><span class="p">:</span><span class="w"> </span><span class="mi">18</span><span class="p" data-group-id="7402608372-2">)</span><span class="w"> </span><span class="k" data-group-id="7402608372-3">do</span><span class="w">
  </span><span class="n">message</span><span class="w"> </span><span class="s">&quot;must be over 18 to sign up&quot;</span><span class="w">
</span><span class="k" data-group-id="7402608372-3">end</span><span class="w">

</span><span class="n">validate</span><span class="w"> </span><span class="n">present</span><span class="p" data-group-id="7402608372-4">(</span><span class="ss">:last_name</span><span class="p" data-group-id="7402608372-4">)</span><span class="w"> </span><span class="k" data-group-id="7402608372-5">do</span><span class="w">
  </span><span class="n">where</span><span class="w"> </span><span class="p" data-group-id="7402608372-6">[</span><span class="n">present</span><span class="p" data-group-id="7402608372-7">(</span><span class="ss">:first_name</span><span class="p" data-group-id="7402608372-7">)</span><span class="p">,</span><span class="w"> </span><span class="n">present</span><span class="p" data-group-id="7402608372-8">(</span><span class="ss">:middle_name</span><span class="p" data-group-id="7402608372-8">)</span><span class="p" data-group-id="7402608372-6">]</span><span class="w">
  </span><span class="n">message</span><span class="w"> </span><span class="s">&quot;must also be supplied if setting first name and middle_name&quot;</span><span class="w">
</span><span class="k" data-group-id="7402608372-5">end</span><span class="w">

</span><span class="c1"># Example for read actions</span><span class="w">
</span><span class="n">actions</span><span class="w"> </span><span class="k" data-group-id="7402608372-9">do</span><span class="w">
  </span><span class="n">read</span><span class="w"> </span><span class="ss">:search</span><span class="w"> </span><span class="k" data-group-id="7402608372-10">do</span><span class="w">
    </span><span class="n">argument</span><span class="w"> </span><span class="ss">:email</span><span class="p">,</span><span class="w"> </span><span class="ss">:string</span><span class="w">
    </span><span class="n">argument</span><span class="w"> </span><span class="ss">:role</span><span class="p">,</span><span class="w"> </span><span class="ss">:string</span><span class="w">
    
    </span><span class="n">validate</span><span class="w"> </span><span class="n">match</span><span class="p" data-group-id="7402608372-11">(</span><span class="ss">:email</span><span class="p">,</span><span class="w"> </span><span class="sr">~r/^[^</span><span class="se">\s</span><span class="sr">]+@[^</span><span class="se">\s</span><span class="sr">]+</span><span class="se">\.</span><span class="sr">[^</span><span class="se">\s</span><span class="sr">]+$/</span><span class="p" data-group-id="7402608372-11">)</span><span class="w">
    </span><span class="n">validate</span><span class="w"> </span><span class="n">one_of</span><span class="p" data-group-id="7402608372-12">(</span><span class="ss">:role</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="7402608372-13">[</span><span class="s">&quot;admin&quot;</span><span class="p">,</span><span class="w"> </span><span class="s">&quot;user&quot;</span><span class="p">,</span><span class="w"> </span><span class="s">&quot;moderator&quot;</span><span class="p" data-group-id="7402608372-13">]</span><span class="p" data-group-id="7402608372-12">)</span><span class="w">
  </span><span class="k" data-group-id="7402608372-10">end</span><span class="w">
  
  </span><span class="c1"># Example for generic actions</span><span class="w">
  </span><span class="n">action</span><span class="w"> </span><span class="ss">:send_notification</span><span class="p">,</span><span class="w"> </span><span class="ss">:boolean</span><span class="w"> </span><span class="k" data-group-id="7402608372-14">do</span><span class="w">
    </span><span class="n">argument</span><span class="w"> </span><span class="ss">:recipient_email</span><span class="p">,</span><span class="w"> </span><span class="ss">:string</span><span class="w">
    </span><span class="n">argument</span><span class="w"> </span><span class="ss">:priority</span><span class="p">,</span><span class="w"> </span><span class="ss">:atom</span><span class="w">
    
    </span><span class="n">validate</span><span class="w"> </span><span class="n">match</span><span class="p" data-group-id="7402608372-15">(</span><span class="ss">:recipient_email</span><span class="p">,</span><span class="w"> </span><span class="sr">~r/^[^</span><span class="se">\s</span><span class="sr">]+@[^</span><span class="se">\s</span><span class="sr">]+</span><span class="se">\.</span><span class="sr">[^</span><span class="se">\s</span><span class="sr">]+$/</span><span class="p" data-group-id="7402608372-15">)</span><span class="w">
    </span><span class="n">validate</span><span class="w"> </span><span class="n">one_of</span><span class="p" data-group-id="7402608372-16">(</span><span class="ss">:priority</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="7402608372-17">[</span><span class="ss">:low</span><span class="p">,</span><span class="w"> </span><span class="ss">:medium</span><span class="p">,</span><span class="w"> </span><span class="ss">:high</span><span class="p" data-group-id="7402608372-17">]</span><span class="p" data-group-id="7402608372-16">)</span><span class="w">
  </span><span class="k" data-group-id="7402608372-14">end</span><span class="w">
</span><span class="k" data-group-id="7402608372-9">end</span></code></pre><h2 id="custom-validations">Custom Validations</h2><pre><code class="makeup elixir" translate="no"><span class="kd">defmodule</span><span class="w"> </span><span class="nc">MyApp.Validations.IsPrime</span><span class="w"> </span><span class="k" data-group-id="6592407587-1">do</span><span class="w">
  </span><span class="c1"># transform and validate opts</span><span class="w">

  </span><span class="kn">use</span><span class="w"> </span><span class="nc">Ash.Resource.Validation</span><span class="w">

  </span><span class="na">@impl</span><span class="w"> </span><span class="no">true</span><span class="w">
  </span><span class="kd">def</span><span class="w"> </span><span class="nf">init</span><span class="p" data-group-id="6592407587-2">(</span><span class="n">opts</span><span class="p" data-group-id="6592407587-2">)</span><span class="w"> </span><span class="k" data-group-id="6592407587-3">do</span><span class="w">
    </span><span class="k">if</span><span class="w"> </span><span class="n">is_atom</span><span class="p" data-group-id="6592407587-4">(</span><span class="n">opts</span><span class="p" data-group-id="6592407587-5">[</span><span class="ss">:attribute</span><span class="p" data-group-id="6592407587-5">]</span><span class="p" data-group-id="6592407587-4">)</span><span class="w"> </span><span class="k" data-group-id="6592407587-6">do</span><span class="w">
      </span><span class="p" data-group-id="6592407587-7">{</span><span class="ss">:ok</span><span class="p">,</span><span class="w"> </span><span class="n">opts</span><span class="p" data-group-id="6592407587-7">}</span><span class="w">
    </span><span class="k" data-group-id="6592407587-6">else</span><span class="w">
      </span><span class="p" data-group-id="6592407587-8">{</span><span class="ss">:error</span><span class="p">,</span><span class="w"> </span><span class="s">&quot;attribute must be an atom!&quot;</span><span class="p" data-group-id="6592407587-8">}</span><span class="w">
    </span><span class="k" data-group-id="6592407587-6">end</span><span class="w">
  </span><span class="k" data-group-id="6592407587-3">end</span><span class="w">

  </span><span class="na">@impl</span><span class="w"> </span><span class="no">true</span><span class="w">
  </span><span class="kd">def</span><span class="w"> </span><span class="nf">supports</span><span class="p" data-group-id="6592407587-9">(</span><span class="c">_opts</span><span class="p" data-group-id="6592407587-9">)</span><span class="p">,</span><span class="w"> </span><span class="ss">do</span><span class="p">:</span><span class="w"> </span><span class="p" data-group-id="6592407587-10">[</span><span class="nc">Ash.Changeset</span><span class="p" data-group-id="6592407587-10">]</span><span class="w">

  </span><span class="na">@impl</span><span class="w"> </span><span class="no">true</span><span class="w">
  </span><span class="kd">def</span><span class="w"> </span><span class="nf">validate</span><span class="p" data-group-id="6592407587-11">(</span><span class="n">changeset</span><span class="p">,</span><span class="w"> </span><span class="n">opts</span><span class="p">,</span><span class="w"> </span><span class="c">_context</span><span class="p" data-group-id="6592407587-11">)</span><span class="w"> </span><span class="k" data-group-id="6592407587-12">do</span><span class="w">
    </span><span class="n">value</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nc">Ash.Changeset</span><span class="o">.</span><span class="n">get_attribute</span><span class="p" data-group-id="6592407587-13">(</span><span class="n">changeset</span><span class="p">,</span><span class="w"> </span><span class="n">opts</span><span class="p" data-group-id="6592407587-14">[</span><span class="ss">:attribute</span><span class="p" data-group-id="6592407587-14">]</span><span class="p" data-group-id="6592407587-13">)</span><span class="w">
    </span><span class="c1"># this is a function I made up for example</span><span class="w">
    </span><span class="k">if</span><span class="w"> </span><span class="n">is_nil</span><span class="p" data-group-id="6592407587-15">(</span><span class="n">value</span><span class="p" data-group-id="6592407587-15">)</span><span class="w"> </span><span class="o">||</span><span class="w"> </span><span class="nc">Math</span><span class="o">.</span><span class="n">is_prime?</span><span class="p" data-group-id="6592407587-16">(</span><span class="n">value</span><span class="p" data-group-id="6592407587-16">)</span><span class="w"> </span><span class="k" data-group-id="6592407587-17">do</span><span class="w">
      </span><span class="ss">:ok</span><span class="w">
    </span><span class="k" data-group-id="6592407587-17">else</span><span class="w">
      </span><span class="c1"># The returned error will be passed into `Ash.Error.to_ash_error/3`</span><span class="w">
      </span><span class="p" data-group-id="6592407587-18">{</span><span class="ss">:error</span><span class="p">,</span><span class="w"> </span><span class="ss">field</span><span class="p">:</span><span class="w"> </span><span class="n">opts</span><span class="p" data-group-id="6592407587-19">[</span><span class="ss">:attribute</span><span class="p" data-group-id="6592407587-19">]</span><span class="p">,</span><span class="w"> </span><span class="ss">message</span><span class="p">:</span><span class="w"> </span><span class="s">&quot;must be prime&quot;</span><span class="p" data-group-id="6592407587-18">}</span><span class="w">
    </span><span class="k" data-group-id="6592407587-17">end</span><span class="w">
  </span><span class="k" data-group-id="6592407587-12">end</span><span class="w">
</span><span class="k" data-group-id="6592407587-1">end</span></code></pre><h3 id="supporting-queries-in-custom-validations">Supporting Queries in Custom Validations</h3><p>To make a custom validation work on both changesets and queries, implement the <code class="inline">supports/1</code> callback:</p><pre><code class="makeup elixir" translate="no"><span class="kd">defmodule</span><span class="w"> </span><span class="nc">MyApp.Validations.ValidEmail</span><span class="w"> </span><span class="k" data-group-id="5226414986-1">do</span><span class="w">
  </span><span class="kn">use</span><span class="w"> </span><span class="nc">Ash.Resource.Validation</span><span class="w">

  </span><span class="na">@impl</span><span class="w"> </span><span class="no">true</span><span class="w">
  </span><span class="kd">def</span><span class="w"> </span><span class="nf">init</span><span class="p" data-group-id="5226414986-2">(</span><span class="n">opts</span><span class="p" data-group-id="5226414986-2">)</span><span class="w"> </span><span class="k" data-group-id="5226414986-3">do</span><span class="w">
    </span><span class="p" data-group-id="5226414986-4">{</span><span class="ss">:ok</span><span class="p">,</span><span class="w"> </span><span class="n">opts</span><span class="p" data-group-id="5226414986-4">}</span><span class="w">
  </span><span class="k" data-group-id="5226414986-3">end</span><span class="w">

  </span><span class="na">@impl</span><span class="w"> </span><span class="no">true</span><span class="w">
  </span><span class="kd">def</span><span class="w"> </span><span class="nf">supports</span><span class="p" data-group-id="5226414986-5">(</span><span class="c">_opts</span><span class="p" data-group-id="5226414986-5">)</span><span class="p">,</span><span class="w"> </span><span class="ss">do</span><span class="p">:</span><span class="w"> </span><span class="p" data-group-id="5226414986-6">[</span><span class="nc">Ash.Changeset</span><span class="p">,</span><span class="w"> </span><span class="nc">Ash.Query</span><span class="p" data-group-id="5226414986-6">]</span><span class="w">

  </span><span class="na">@impl</span><span class="w"> </span><span class="no">true</span><span class="w">
  </span><span class="kd">def</span><span class="w"> </span><span class="nf">validate</span><span class="p" data-group-id="5226414986-7">(</span><span class="n">subject</span><span class="p">,</span><span class="w"> </span><span class="n">opts</span><span class="p">,</span><span class="w"> </span><span class="c">_context</span><span class="p" data-group-id="5226414986-7">)</span><span class="w"> </span><span class="k" data-group-id="5226414986-8">do</span><span class="w">
    </span><span class="n">value</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">get_value</span><span class="p" data-group-id="5226414986-9">(</span><span class="n">subject</span><span class="p">,</span><span class="w"> </span><span class="n">opts</span><span class="p" data-group-id="5226414986-10">[</span><span class="ss">:attribute</span><span class="p" data-group-id="5226414986-10">]</span><span class="p" data-group-id="5226414986-9">)</span><span class="w">
    
    </span><span class="k">if</span><span class="w"> </span><span class="n">is_nil</span><span class="p" data-group-id="5226414986-11">(</span><span class="n">value</span><span class="p" data-group-id="5226414986-11">)</span><span class="w"> </span><span class="o">||</span><span class="w"> </span><span class="n">valid_email?</span><span class="p" data-group-id="5226414986-12">(</span><span class="n">value</span><span class="p" data-group-id="5226414986-12">)</span><span class="w"> </span><span class="k" data-group-id="5226414986-13">do</span><span class="w">
      </span><span class="ss">:ok</span><span class="w">
    </span><span class="k" data-group-id="5226414986-13">else</span><span class="w">
      </span><span class="p" data-group-id="5226414986-14">{</span><span class="ss">:error</span><span class="p">,</span><span class="w"> </span><span class="ss">field</span><span class="p">:</span><span class="w"> </span><span class="n">opts</span><span class="p" data-group-id="5226414986-15">[</span><span class="ss">:attribute</span><span class="p" data-group-id="5226414986-15">]</span><span class="p">,</span><span class="w"> </span><span class="ss">message</span><span class="p">:</span><span class="w"> </span><span class="s">&quot;must be a valid email&quot;</span><span class="p" data-group-id="5226414986-14">}</span><span class="w">
    </span><span class="k" data-group-id="5226414986-13">end</span><span class="w">
  </span><span class="k" data-group-id="5226414986-8">end</span><span class="w">

  </span><span class="kd">defp</span><span class="w"> </span><span class="nf">get_value</span><span class="p" data-group-id="5226414986-16">(</span><span class="p" data-group-id="5226414986-17">%</span><span class="nc" data-group-id="5226414986-17">Ash.Changeset</span><span class="p" data-group-id="5226414986-17">{</span><span class="p" data-group-id="5226414986-17">}</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">changeset</span><span class="p">,</span><span class="w"> </span><span class="n">attribute</span><span class="p" data-group-id="5226414986-16">)</span><span class="w"> </span><span class="k" data-group-id="5226414986-18">do</span><span class="w">
    </span><span class="nc">Ash.Changeset</span><span class="o">.</span><span class="n">get_argument_or_attribute</span><span class="p" data-group-id="5226414986-19">(</span><span class="n">changeset</span><span class="p">,</span><span class="w"> </span><span class="n">attribute</span><span class="p" data-group-id="5226414986-19">)</span><span class="w">
  </span><span class="k" data-group-id="5226414986-18">end</span><span class="w">

  </span><span class="kd">defp</span><span class="w"> </span><span class="nf">get_value</span><span class="p" data-group-id="5226414986-20">(</span><span class="p" data-group-id="5226414986-21">%</span><span class="nc" data-group-id="5226414986-21">Ash.Query</span><span class="p" data-group-id="5226414986-21">{</span><span class="p" data-group-id="5226414986-21">}</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">query</span><span class="p">,</span><span class="w"> </span><span class="n">attribute</span><span class="p" data-group-id="5226414986-20">)</span><span class="w"> </span><span class="k" data-group-id="5226414986-22">do</span><span class="w">
    </span><span class="nc">Ash.Query</span><span class="o">.</span><span class="n">get_argument</span><span class="p" data-group-id="5226414986-23">(</span><span class="n">query</span><span class="p">,</span><span class="w"> </span><span class="n">attribute</span><span class="p" data-group-id="5226414986-23">)</span><span class="w">
  </span><span class="k" data-group-id="5226414986-22">end</span><span class="w">

  </span><span class="kd">defp</span><span class="w"> </span><span class="nf">valid_email?</span><span class="p" data-group-id="5226414986-24">(</span><span class="n">email</span><span class="p" data-group-id="5226414986-24">)</span><span class="w"> </span><span class="k" data-group-id="5226414986-25">do</span><span class="w">
    </span><span class="nc">String</span><span class="o">.</span><span class="n">match?</span><span class="p" data-group-id="5226414986-26">(</span><span class="n">email</span><span class="p">,</span><span class="w"> </span><span class="sr">~r/^[^</span><span class="se">\s</span><span class="sr">]+@[^</span><span class="se">\s</span><span class="sr">]+</span><span class="se">\.</span><span class="sr">[^</span><span class="se">\s</span><span class="sr">]+$/</span><span class="p" data-group-id="5226414986-26">)</span><span class="w">
  </span><span class="k" data-group-id="5226414986-25">end</span><span class="w">
</span><span class="k" data-group-id="5226414986-1">end</span></code></pre><p>This could then be used in a resource via:</p><pre><code class="makeup elixir" translate="no"><span class="n">validate</span><span class="w"> </span><span class="p" data-group-id="0314869168-1">{</span><span class="nc">MyApp.Validations.IsPrime</span><span class="p">,</span><span class="w"> </span><span class="ss">attribute</span><span class="p">:</span><span class="w"> </span><span class="ss">:foo</span><span class="p" data-group-id="0314869168-1">}</span></code></pre><h2 id="anonymous-function-validations">Anonymous Function Validations</h2><p>You can also use anonymous functions for validations. Keep in mind, these cannot be made atomic. This is great for prototyping, but we generally recommend using a module, both for organizational purposes, and to allow adding atomic behavior.</p><pre><code class="makeup elixir" translate="no"><span class="n">validate</span><span class="w"> </span><span class="k" data-group-id="1475508251-1">fn</span><span class="w"> </span><span class="n">changeset</span><span class="p">,</span><span class="w"> </span><span class="c">_context</span><span class="w"> </span><span class="o">-&gt;</span><span class="w">
  </span><span class="c1"># put your code here</span><span class="w">
</span><span class="k" data-group-id="1475508251-1">end</span></code></pre><h2 id="where">Where</h2><p>The <code class="inline">where</code> can be used to perform validations conditionally.</p><p>The value of the <code class="inline">where</code> option can either be a validation or a list of validations. All of the <code class="inline">where</code>-validations must first pass for the main validation to be applied. For expressing complex conditionals, passing a list of built-in validations to <code class="inline">where</code> can serve as an alternative to writing a custom validation module.</p><h3 id="examples">Examples</h3><pre><code class="makeup elixir" translate="no"><span class="n">validate</span><span class="w"> </span><span class="n">present</span><span class="p" data-group-id="1893181597-1">(</span><span class="ss">:other_number</span><span class="p" data-group-id="1893181597-1">)</span><span class="p">,</span><span class="w"> </span><span class="ss">where</span><span class="p">:</span><span class="w"> </span><span class="n">absent</span><span class="p" data-group-id="1893181597-2">(</span><span class="ss">:that_number</span><span class="p" data-group-id="1893181597-2">)</span></code></pre><pre><code class="makeup elixir" translate="no"><span class="n">validate</span><span class="w"> </span><span class="n">present</span><span class="p" data-group-id="9472717035-1">(</span><span class="ss">:other_number</span><span class="p" data-group-id="9472717035-1">)</span><span class="w"> </span><span class="k" data-group-id="9472717035-2">do</span><span class="w">
  </span><span class="n">where</span><span class="w"> </span><span class="p" data-group-id="9472717035-3">{</span><span class="nc">MyApp.Validations.IsPrime</span><span class="p">,</span><span class="w"> </span><span class="ss">attribute</span><span class="p">:</span><span class="w"> </span><span class="ss">:foo</span><span class="p" data-group-id="9472717035-3">}</span><span class="w">
</span><span class="k" data-group-id="9472717035-2">end</span></code></pre><pre><code class="makeup elixir" translate="no"><span class="n">validate</span><span class="w"> </span><span class="n">present</span><span class="p" data-group-id="6968163394-1">(</span><span class="ss">:other_number</span><span class="p" data-group-id="6968163394-1">)</span><span class="p">,</span><span class="w">
  </span><span class="ss">where</span><span class="p">:</span><span class="w"> </span><span class="p" data-group-id="6968163394-2">[</span><span class="w">
    </span><span class="n">numericality</span><span class="p" data-group-id="6968163394-3">(</span><span class="ss">:large_number</span><span class="p">,</span><span class="w"> </span><span class="ss">greater_than</span><span class="p">:</span><span class="w"> </span><span class="mi">100</span><span class="p" data-group-id="6968163394-3">)</span><span class="p">,</span><span class="w">
    </span><span class="n">one_of</span><span class="p" data-group-id="6968163394-4">(</span><span class="ss">:magic_number</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="6968163394-5">[</span><span class="mi">7</span><span class="p">,</span><span class="w"> </span><span class="mi">13</span><span class="p">,</span><span class="w"> </span><span class="mi">123</span><span class="p" data-group-id="6968163394-5">]</span><span class="p" data-group-id="6968163394-4">)</span><span class="w">
  </span><span class="p" data-group-id="6968163394-2">]</span></code></pre><h2 id="action-vs-global-validations">Action vs Global Validations</h2><p>You can place a validation in any create, update, or destroy action. For example:</p><pre><code class="makeup elixir" translate="no"><span class="n">actions</span><span class="w"> </span><span class="k" data-group-id="1308739583-1">do</span><span class="w">
  </span><span class="n">create</span><span class="w"> </span><span class="ss">:create</span><span class="w"> </span><span class="k" data-group-id="1308739583-2">do</span><span class="w">
    </span><span class="n">validate</span><span class="w"> </span><span class="n">compare</span><span class="p" data-group-id="1308739583-3">(</span><span class="ss">:age</span><span class="p">,</span><span class="w"> </span><span class="ss">greater_than_or_equal_to</span><span class="p">:</span><span class="w"> </span><span class="mi">18</span><span class="p" data-group-id="1308739583-3">)</span><span class="w">
  </span><span class="k" data-group-id="1308739583-2">end</span><span class="w">
</span><span class="k" data-group-id="1308739583-1">end</span></code></pre><p>Or you can use the global validations block to validate on all actions of a given type. Where statements can be used in either. Note the warning about running on destroy actions below.</p><pre><code class="makeup elixir" translate="no"><span class="n">validations</span><span class="w"> </span><span class="k" data-group-id="6907130655-1">do</span><span class="w">
  </span><span class="n">validate</span><span class="w"> </span><span class="n">present</span><span class="p" data-group-id="6907130655-2">(</span><span class="p" data-group-id="6907130655-3">[</span><span class="ss">:foo</span><span class="p">,</span><span class="w"> </span><span class="ss">:bar</span><span class="p" data-group-id="6907130655-3">]</span><span class="p">,</span><span class="w"> </span><span class="ss">at_least</span><span class="p">:</span><span class="w"> </span><span class="mi">1</span><span class="p" data-group-id="6907130655-2">)</span><span class="w"> </span><span class="k" data-group-id="6907130655-4">do</span><span class="w">
    </span><span class="n">on</span><span class="w"> </span><span class="p" data-group-id="6907130655-5">[</span><span class="ss">:create</span><span class="p">,</span><span class="w"> </span><span class="ss">:update</span><span class="p" data-group-id="6907130655-5">]</span><span class="w">
    </span><span class="n">where</span><span class="w"> </span><span class="n">present</span><span class="p" data-group-id="6907130655-6">(</span><span class="ss">:baz</span><span class="p" data-group-id="6907130655-6">)</span><span class="w">
  </span><span class="k" data-group-id="6907130655-4">end</span><span class="w">
</span><span class="k" data-group-id="6907130655-1">end</span></code></pre><p>The validations section allows you to add validations across multiple actions of a changeset</p><section role="note" class="admonition warning"><h3 id="running-on-destroy-actions" class="admonition-title warning">Running on destroy actions</h3><p>By default, validations in the global <code class="inline">validations</code> block will run on create and update only. Many validations don't make sense in the context of destroys. To make them run on destroy, use <code class="inline">on: [:create, :update, :destroy]</code></p></section><h2 id="only_when_valid-option">only_when_valid? Option</h2><p>Use the <code class="inline">only_when_valid?</code> option to skip validations when the changeset or query is already invalid. This is useful for expensive validations that should only run if other validations have passed.</p><pre><code class="makeup elixir" translate="no"><span class="n">actions</span><span class="w"> </span><span class="k" data-group-id="2021695011-1">do</span><span class="w">
  </span><span class="n">create</span><span class="w"> </span><span class="ss">:create</span><span class="w"> </span><span class="k" data-group-id="2021695011-2">do</span><span class="w">
    </span><span class="n">validate</span><span class="w"> </span><span class="n">present</span><span class="p" data-group-id="2021695011-3">(</span><span class="ss">:required_field</span><span class="p" data-group-id="2021695011-3">)</span><span class="w">
    
    </span><span class="c1"># This expensive validation only runs if query is valid so far</span><span class="w">
    </span><span class="n">validate</span><span class="w"> </span><span class="n">expensive_external_validation</span><span class="p" data-group-id="2021695011-4">(</span><span class="p" data-group-id="2021695011-4">)</span><span class="w"> </span><span class="k" data-group-id="2021695011-5">do</span><span class="w">
      </span><span class="n">only_when_valid?</span><span class="w"> </span><span class="no">true</span><span class="w">
    </span><span class="k" data-group-id="2021695011-5">end</span><span class="w">
  </span><span class="k" data-group-id="2021695011-2">end</span><span class="w">
  
  </span><span class="n">read</span><span class="w"> </span><span class="ss">:search</span><span class="w"> </span><span class="k" data-group-id="2021695011-6">do</span><span class="w">
    </span><span class="n">argument</span><span class="w"> </span><span class="ss">:email</span><span class="p">,</span><span class="w"> </span><span class="ss">:string</span><span class="w">
    
    </span><span class="n">validate</span><span class="w"> </span><span class="n">present</span><span class="p" data-group-id="2021695011-7">(</span><span class="ss">:email</span><span class="p" data-group-id="2021695011-7">)</span><span class="w">
    
    </span><span class="c1"># Only validate email format if email is present</span><span class="w">
    </span><span class="n">validate</span><span class="w"> </span><span class="n">match</span><span class="p" data-group-id="2021695011-8">(</span><span class="ss">:email</span><span class="p">,</span><span class="w"> </span><span class="sr">~r/^[^</span><span class="se">\s</span><span class="sr">]+@[^</span><span class="se">\s</span><span class="sr">]+</span><span class="se">\.</span><span class="sr">[^</span><span class="se">\s</span><span class="sr">]+$/</span><span class="p" data-group-id="2021695011-8">)</span><span class="w"> </span><span class="k" data-group-id="2021695011-9">do</span><span class="w">
      </span><span class="n">only_when_valid?</span><span class="w"> </span><span class="no">true</span><span class="w">
    </span><span class="k" data-group-id="2021695011-9">end</span><span class="w">
  </span><span class="k" data-group-id="2021695011-6">end</span><span class="w">
</span><span class="k" data-group-id="2021695011-1">end</span></code></pre><h3 id="examples-1">Examples</h3><pre><code class="makeup elixir" translate="no"><span class="n">validations</span><span class="w"> </span><span class="k" data-group-id="8857933577-1">do</span><span class="w">
  </span><span class="n">validate</span><span class="w"> </span><span class="n">present</span><span class="p" data-group-id="8857933577-2">(</span><span class="p" data-group-id="8857933577-3">[</span><span class="ss">:foo</span><span class="p">,</span><span class="w"> </span><span class="ss">:bar</span><span class="p" data-group-id="8857933577-3">]</span><span class="p" data-group-id="8857933577-2">)</span><span class="p">,</span><span class="w"> </span><span class="ss">on</span><span class="p">:</span><span class="w"> </span><span class="ss">:update</span><span class="w">
  </span><span class="n">validate</span><span class="w"> </span><span class="n">present</span><span class="p" data-group-id="8857933577-4">(</span><span class="p" data-group-id="8857933577-5">[</span><span class="ss">:foo</span><span class="p">,</span><span class="w"> </span><span class="ss">:bar</span><span class="p">,</span><span class="w"> </span><span class="ss">:baz</span><span class="p" data-group-id="8857933577-5">]</span><span class="p">,</span><span class="w"> </span><span class="ss">at_least</span><span class="p">:</span><span class="w"> </span><span class="mi">2</span><span class="p" data-group-id="8857933577-4">)</span><span class="p">,</span><span class="w"> </span><span class="ss">on</span><span class="p">:</span><span class="w"> </span><span class="ss">:create</span><span class="w">
  </span><span class="n">validate</span><span class="w"> </span><span class="n">present</span><span class="p" data-group-id="8857933577-6">(</span><span class="p" data-group-id="8857933577-7">[</span><span class="ss">:foo</span><span class="p">,</span><span class="w"> </span><span class="ss">:bar</span><span class="p">,</span><span class="w"> </span><span class="ss">:baz</span><span class="p" data-group-id="8857933577-7">]</span><span class="p">,</span><span class="w"> </span><span class="ss">at_least</span><span class="p">:</span><span class="w"> </span><span class="mi">2</span><span class="p" data-group-id="8857933577-6">)</span><span class="p">,</span><span class="w"> </span><span class="ss">where</span><span class="p">:</span><span class="w"> </span><span class="p" data-group-id="8857933577-8">[</span><span class="n">action_is</span><span class="p" data-group-id="8857933577-9">(</span><span class="p" data-group-id="8857933577-10">[</span><span class="ss">:action1</span><span class="p">,</span><span class="w"> </span><span class="ss">:action2</span><span class="p" data-group-id="8857933577-10">]</span><span class="p" data-group-id="8857933577-9">)</span><span class="p" data-group-id="8857933577-8">]</span><span class="w">
  </span><span class="n">validate</span><span class="w"> </span><span class="n">absent</span><span class="p" data-group-id="8857933577-11">(</span><span class="p" data-group-id="8857933577-12">[</span><span class="ss">:foo</span><span class="p">,</span><span class="w"> </span><span class="ss">:bar</span><span class="p">,</span><span class="w"> </span><span class="ss">:baz</span><span class="p" data-group-id="8857933577-12">]</span><span class="p">,</span><span class="w"> </span><span class="ss">exactly</span><span class="p">:</span><span class="w"> </span><span class="mi">1</span><span class="p" data-group-id="8857933577-11">)</span><span class="p">,</span><span class="w"> </span><span class="ss">on</span><span class="p">:</span><span class="w"> </span><span class="p" data-group-id="8857933577-13">[</span><span class="ss">:update</span><span class="p">,</span><span class="w"> </span><span class="ss">:destroy</span><span class="p" data-group-id="8857933577-13">]</span><span class="w">
  </span><span class="n">validate</span><span class="w"> </span><span class="p" data-group-id="8857933577-14">{</span><span class="nc">MyCustomValidation</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="8857933577-15">[</span><span class="ss">foo</span><span class="p">:</span><span class="w"> </span><span class="ss">:bar</span><span class="p" data-group-id="8857933577-15">]</span><span class="p" data-group-id="8857933577-14">}</span><span class="p">,</span><span class="w"> </span><span class="ss">on</span><span class="p">:</span><span class="w"> </span><span class="ss">:create</span><span class="w">
</span><span class="k" data-group-id="8857933577-1">end</span></code></pre><h2 id="atomic-validations">Atomic Validations</h2><p>To make a validation atomic, you have to implement the <a href="Ash.Resource.Validation.xhtml#c:atomic/3"><code class="inline">Ash.Resource.Validation.atomic/3</code></a> callback. This callback returns an atomic instruction, or a list of atomic instructions, or an error/indication that the validation cannot be done atomically. For our <code class="inline">IsPrime</code> example above, this would look something like:</p><pre><code class="makeup elixir" translate="no"><span class="kd">defmodule</span><span class="w"> </span><span class="nc">MyApp.Validations.IsPrime</span><span class="w"> </span><span class="k" data-group-id="9438653655-1">do</span><span class="w">
  </span><span class="c1"># transform and validate opts</span><span class="w">

  </span><span class="kn">use</span><span class="w"> </span><span class="nc">Ash.Resource.Validation</span><span class="w">

  </span><span class="n">...</span><span class="w">

  </span><span class="kd">def</span><span class="w"> </span><span class="nf">atomic</span><span class="p" data-group-id="9438653655-2">(</span><span class="n">changeset</span><span class="p">,</span><span class="w"> </span><span class="n">opts</span><span class="p">,</span><span class="w"> </span><span class="n">context</span><span class="p" data-group-id="9438653655-2">)</span><span class="w"> </span><span class="k" data-group-id="9438653655-3">do</span><span class="w">
    </span><span class="c1"># lets ignore that there is no easy/built-in way to check prime numbers in postgres</span><span class="w">
    </span><span class="p" data-group-id="9438653655-4">{</span><span class="ss">:atomic</span><span class="p">,</span><span class="w">
      </span><span class="c1"># the list of attributes that are involved in the validation</span><span class="w">
      </span><span class="p" data-group-id="9438653655-5">[</span><span class="n">opts</span><span class="p" data-group-id="9438653655-6">[</span><span class="ss">:attribute</span><span class="p" data-group-id="9438653655-6">]</span><span class="p" data-group-id="9438653655-5">]</span><span class="p">,</span><span class="w">
      </span><span class="c1"># the condition that should cause the error</span><span class="w">
      </span><span class="c1"># here we refer to the new value or the current value</span><span class="w">
      </span><span class="n">expr</span><span class="p" data-group-id="9438653655-7">(</span><span class="ow">not</span><span class="p" data-group-id="9438653655-8">(</span><span class="n">fragment</span><span class="p" data-group-id="9438653655-9">(</span><span class="s">&quot;is_prime(?)&quot;</span><span class="p">,</span><span class="w"> </span><span class="o">^</span><span class="n">atomic_ref</span><span class="p" data-group-id="9438653655-10">(</span><span class="n">opts</span><span class="p" data-group-id="9438653655-11">[</span><span class="ss">:attribute</span><span class="p" data-group-id="9438653655-11">]</span><span class="p" data-group-id="9438653655-10">)</span><span class="p" data-group-id="9438653655-9">)</span><span class="p" data-group-id="9438653655-8">)</span><span class="p" data-group-id="9438653655-7">)</span><span class="p">,</span><span class="w">
      </span><span class="c1"># the error expression</span><span class="w">
      </span><span class="n">expr</span><span class="p" data-group-id="9438653655-12">(</span><span class="w">
        </span><span class="n">error</span><span class="p" data-group-id="9438653655-13">(</span><span class="o">^</span><span class="nc">InvalidAttribute</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="9438653655-14">%{</span><span class="w">
          </span><span class="ss">field</span><span class="p">:</span><span class="w"> </span><span class="o">^</span><span class="n">opts</span><span class="p" data-group-id="9438653655-15">[</span><span class="ss">:attribute</span><span class="p" data-group-id="9438653655-15">]</span><span class="p">,</span><span class="w">
          </span><span class="c1"># the value that caused the error</span><span class="w">
          </span><span class="ss">value</span><span class="p">:</span><span class="w"> </span><span class="o">^</span><span class="n">atomic_ref</span><span class="p" data-group-id="9438653655-16">(</span><span class="n">opts</span><span class="p" data-group-id="9438653655-17">[</span><span class="ss">:attribute</span><span class="p" data-group-id="9438653655-17">]</span><span class="p" data-group-id="9438653655-16">)</span><span class="p">,</span><span class="w">
          </span><span class="c1"># the message to display</span><span class="w">
          </span><span class="ss">message</span><span class="p">:</span><span class="w"> </span><span class="o">^</span><span class="p" data-group-id="9438653655-18">(</span><span class="n">context</span><span class="o">.</span><span class="n">message</span><span class="w"> </span><span class="o">||</span><span class="w"> </span><span class="s">&quot;%{field} must be prime&quot;</span><span class="p" data-group-id="9438653655-18">)</span><span class="p">,</span><span class="w">
          </span><span class="ss">vars</span><span class="p">:</span><span class="w"> </span><span class="p" data-group-id="9438653655-19">%{</span><span class="ss">field</span><span class="p">:</span><span class="w"> </span><span class="o">^</span><span class="n">opts</span><span class="p" data-group-id="9438653655-20">[</span><span class="ss">:attribute</span><span class="p" data-group-id="9438653655-20">]</span><span class="p" data-group-id="9438653655-19">}</span><span class="w">
        </span><span class="p" data-group-id="9438653655-14">}</span><span class="p" data-group-id="9438653655-13">)</span><span class="w">
      </span><span class="p" data-group-id="9438653655-12">)</span><span class="w">
    </span><span class="p" data-group-id="9438653655-4">}</span><span class="w">
  </span><span class="k" data-group-id="9438653655-3">end</span><span class="w">
</span><span class="k" data-group-id="9438653655-1">end</span></code></pre><p>In some cases, validations operate on arguments only and therefore have no need of atomic behavior. for this, you can call <code class="inline">validate/3</code> directly from <code class="inline">atomic/3</code>. The builtin <a href="Ash.Resource.Validation.Builtins.xhtml#argument_equals/2"><code class="inline">Ash.Resource.Validation.Builtins.argument_equals/2</code></a> validation does this, for example.</p><pre><code class="makeup elixir" translate="no"><span class="na">@impl</span><span class="w"> </span><span class="no">true</span><span class="w">
</span><span class="kd">def</span><span class="w"> </span><span class="nf">atomic</span><span class="p" data-group-id="8116486390-1">(</span><span class="n">changeset</span><span class="p">,</span><span class="w"> </span><span class="n">opts</span><span class="p">,</span><span class="w"> </span><span class="n">context</span><span class="p" data-group-id="8116486390-1">)</span><span class="w"> </span><span class="k" data-group-id="8116486390-2">do</span><span class="w">
  </span><span class="n">validate</span><span class="p" data-group-id="8116486390-3">(</span><span class="n">changeset</span><span class="p">,</span><span class="w"> </span><span class="n">opts</span><span class="p">,</span><span class="w"> </span><span class="n">context</span><span class="p" data-group-id="8116486390-3">)</span><span class="w">
</span><span class="k" data-group-id="8116486390-2">end</span></code></pre>

  </body>
</html>
