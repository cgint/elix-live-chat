<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"
      xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>Writing Extensions - ash v3.5.33</title>
    <meta name="generator" content="ExDoc v0.38.2" />
    <link type="text/css" rel="stylesheet" href="dist/epub-elixir-FNUUKFP7.css" />
    <script src="dist/epub-4WIP524F.js"></script>

  </head>
  <body class="content-inner">

    <h1 id="content">Writing Extensions</h1>
<p>Extensions allow you to make powerful modifications to DSL entities. If you are using <code class="inline">AshPostgres</code>, <code class="inline">AshGraphql</code> or <code class="inline">AshJsonApi</code>, they are all integrated into Ash using extensions. In this guide we will build a simple extension for <a href="Ash.Resource.xhtml"><code class="inline">Ash.Resource</code></a> that adds timestamps to your resource. We'll also show some simple patterns that can help ensure that all of your resources are using your extension.</p><h2 id="creating-an-extension">Creating an extension</h2><p>What we call an &quot;extension&quot; is typically one or more <a href="https://hexdocs.pm/spark/2.2.67/Spark.Dsl.Extension.html"><code class="inline">Spark.Dsl.Extension</code></a>, and then any additional code that is used by that extension. For example, <code class="inline">AshGraphql</code> has a domain extension called <code class="inline">AshGraphql.Domain</code>, a resource extension called <code class="inline">AshGraphql.Resource</code>, and code to connect a GraphQL schema to your resources.</p><h3 id="dsl-extension">DSL Extension</h3><p>Here we create a DSL extension called <code class="inline">MyApp.Extensions.Base</code>, and configure a single transformer, called <code class="inline">MyApp.Extensions.Base.AddTimestamps</code></p><pre><code class="makeup elixir" translate="no"><span class="kd">defmodule</span><span class="w"> </span><span class="nc">MyApp.Extensions.Base</span><span class="w"> </span><span class="k" data-group-id="2566099279-1">do</span><span class="w">
  </span><span class="kn">use</span><span class="w"> </span><span class="nc">Spark.Dsl.Extension</span><span class="p">,</span><span class="w"> </span><span class="ss">transformers</span><span class="p">:</span><span class="w"> </span><span class="p" data-group-id="2566099279-2">[</span><span class="nc">MyApp.Extensions.Base.AddTimestamps</span><span class="p" data-group-id="2566099279-2">]</span><span class="w">
</span><span class="k" data-group-id="2566099279-1">end</span></code></pre><h3 id="transformers">Transformers</h3><p>Transformers are all run serially against a map of data called <code class="inline">dsl_state</code>, which is the data structure that we build as we use the DSL. For example:</p><pre><code class="makeup elixir" translate="no"><span class="n">attributes</span><span class="w"> </span><span class="k" data-group-id="0936087622-1">do</span><span class="w">
  </span><span class="n">attribute</span><span class="w"> </span><span class="ss">:name</span><span class="p">,</span><span class="w"> </span><span class="ss">:string</span><span class="w">
</span><span class="k" data-group-id="0936087622-1">end</span></code></pre><p>Would, under the hood, look something like this:</p><pre><code class="makeup elixir" translate="no"><span class="p" data-group-id="9285016326-1">%{</span><span class="w">
  </span><span class="p" data-group-id="9285016326-2">[</span><span class="ss">:attributes</span><span class="p" data-group-id="9285016326-2">]</span><span class="w"> </span><span class="p">=&gt;</span><span class="w"> </span><span class="p" data-group-id="9285016326-3">%{</span><span class="ss">entities</span><span class="p">:</span><span class="w"> </span><span class="p" data-group-id="9285016326-4">[</span><span class="w">
      </span><span class="p" data-group-id="9285016326-5">%</span><span class="nc" data-group-id="9285016326-5">Ash.Resource.Attribute</span><span class="p" data-group-id="9285016326-5">{</span><span class="ss">name</span><span class="p">:</span><span class="w"> </span><span class="ss">:name</span><span class="p">,</span><span class="w"> </span><span class="ss">type</span><span class="p">:</span><span class="w"> </span><span class="ss">:string</span><span class="p" data-group-id="9285016326-5">}</span><span class="w">
    </span><span class="p" data-group-id="9285016326-4">]</span><span class="w">
  </span><span class="p" data-group-id="9285016326-3">}</span><span class="p">,</span><span class="w">
  </span><span class="n">...</span><span class="w">
</span><span class="p" data-group-id="9285016326-1">}</span></code></pre><p>A transformer exposes <code class="inline">transform/1</code>, which takes the <code class="inline">dsl_state</code> and returns either <code class="inline">{:ok, dsl_state}</code> or <code class="inline">{:error, error}</code></p><pre><code class="makeup elixir" translate="no"><span class="kd">defmodule</span><span class="w"> </span><span class="nc">MyApp.Extensions.Base.AddTimestamps</span><span class="w"> </span><span class="k" data-group-id="5748847237-1">do</span><span class="w">
  </span><span class="kn">use</span><span class="w"> </span><span class="nc">Spark.Dsl.Transformer</span><span class="w">
  </span><span class="kn">alias</span><span class="w"> </span><span class="nc">Spark.Dsl.Transformer</span><span class="w">

  </span><span class="kd">def</span><span class="w"> </span><span class="nf">transform</span><span class="p" data-group-id="5748847237-2">(</span><span class="n">dsl_state</span><span class="p" data-group-id="5748847237-2">)</span><span class="w"> </span><span class="k" data-group-id="5748847237-3">do</span><span class="w">
    </span><span class="n">dsl_state</span><span class="w">
    </span><span class="c1"># Ash.Resource.Builder has utilities for extending resources</span><span class="w">
    </span><span class="o">|&gt;</span><span class="w"> </span><span class="nc">Ash.Resource.Builder</span><span class="o">.</span><span class="n">add_new_create_timestamp</span><span class="p" data-group-id="5748847237-4">(</span><span class="ss">:inserted_at</span><span class="p" data-group-id="5748847237-4">)</span><span class="w">
    </span><span class="o">|&gt;</span><span class="w"> </span><span class="nc">Ash.Resource.Builder</span><span class="o">.</span><span class="n">add_new_update_timestamp</span><span class="p" data-group-id="5748847237-5">(</span><span class="ss">:updated_at</span><span class="p" data-group-id="5748847237-5">)</span><span class="w">
  </span><span class="k" data-group-id="5748847237-3">end</span><span class="w">
</span><span class="k" data-group-id="5748847237-1">end</span></code></pre><p>This transformer builds adds a <code class="inline">create_timestamp</code> called <code class="inline">:inserted_at</code> and an <code class="inline">update_timestamp</code> called <code class="inline">:updated_at</code>, unless they already exist.</p><h3 id="make-the-extension-configurable">Make the extension configurable</h3><p>So far we've covered transformers, and using them to modify resources, but now lets say we want to make this behavior opt-out. Perhaps certain resources really shouldn't have timestamps, but we want it to be the default. Lets add a &quot;DSL Section&quot; to our extension.</p><pre><code class="makeup elixir" translate="no"><span class="kd">defmodule</span><span class="w"> </span><span class="nc">MyApp.Extensions.Base</span><span class="w"> </span><span class="k" data-group-id="4839581689-1">do</span><span class="w">
  </span><span class="na">@base</span><span class="w"> </span><span class="p" data-group-id="4839581689-2">%</span><span class="nc" data-group-id="4839581689-2">Spark.Dsl.Section</span><span class="p" data-group-id="4839581689-2">{</span><span class="w">
    </span><span class="ss">name</span><span class="p">:</span><span class="w"> </span><span class="ss">:base</span><span class="p">,</span><span class="w">
    </span><span class="ss">describe</span><span class="p">:</span><span class="w"> </span><span class="s">&quot;&quot;&quot;
    Configure the behavior of our base extension.
    &quot;&quot;&quot;</span><span class="p">,</span><span class="w">
    </span><span class="ss">examples</span><span class="p">:</span><span class="w"> </span><span class="p" data-group-id="4839581689-3">[</span><span class="w">
      </span><span class="s">&quot;&quot;&quot;
      base do
        timestamps? false
      end
      &quot;&quot;&quot;</span><span class="w">
    </span><span class="p" data-group-id="4839581689-3">]</span><span class="p">,</span><span class="w">
    </span><span class="ss">schema</span><span class="p">:</span><span class="w"> </span><span class="p" data-group-id="4839581689-4">[</span><span class="w">
      </span><span class="ss">timestamps?</span><span class="p">:</span><span class="w"> </span><span class="p" data-group-id="4839581689-5">[</span><span class="w">
        </span><span class="ss">type</span><span class="p">:</span><span class="w"> </span><span class="ss">:boolean</span><span class="p">,</span><span class="w">
        </span><span class="ss">doc</span><span class="p">:</span><span class="w"> </span><span class="s">&quot;Set to false to skip adding timestamps&quot;</span><span class="p">,</span><span class="w">
        </span><span class="ss">default</span><span class="p">:</span><span class="w"> </span><span class="no">true</span><span class="w">
      </span><span class="p" data-group-id="4839581689-5">]</span><span class="w">
    </span><span class="p" data-group-id="4839581689-4">]</span><span class="w">
  </span><span class="p" data-group-id="4839581689-2">}</span><span class="w">



  </span><span class="kn">use</span><span class="w"> </span><span class="nc">Spark.Dsl.Extension</span><span class="p">,</span><span class="w">
    </span><span class="ss">transformers</span><span class="p">:</span><span class="w"> </span><span class="p" data-group-id="4839581689-6">[</span><span class="nc">MyApp.Extensions.Base.AddTimestamps</span><span class="p" data-group-id="4839581689-6">]</span><span class="p">,</span><span class="w">
    </span><span class="ss">sections</span><span class="p">:</span><span class="w"> </span><span class="p" data-group-id="4839581689-7">[</span><span class="na">@base</span><span class="p" data-group-id="4839581689-7">]</span><span class="w">
</span><span class="k" data-group-id="4839581689-1">end</span><span class="w">

</span><span class="kd">defmodule</span><span class="w"> </span><span class="nc">MyApp.Extensions.Base.Info</span><span class="w"> </span><span class="k" data-group-id="4839581689-8">do</span><span class="w">
  </span><span class="kn">use</span><span class="w"> </span><span class="nc">Spark.InfoGenerator</span><span class="p">,</span><span class="w"> </span><span class="ss">extension</span><span class="p">:</span><span class="w"> </span><span class="nc">MyApp.Extensions.Base</span><span class="p">,</span><span class="w"> </span><span class="ss">sections</span><span class="p">:</span><span class="w"> </span><span class="p" data-group-id="4839581689-9">[</span><span class="ss">:base</span><span class="p" data-group-id="4839581689-9">]</span><span class="w">

  </span><span class="c1"># This will define `base_timestamps?/1`.</span><span class="w">
</span><span class="k" data-group-id="4839581689-8">end</span></code></pre><p>Now we can use this configuration in our transformer, like so:</p><pre><code class="makeup elixir" translate="no"><span class="w">  </span><span class="kd">def</span><span class="w"> </span><span class="nf">transform</span><span class="p" data-group-id="6258822813-1">(</span><span class="n">dsl_state</span><span class="p" data-group-id="6258822813-1">)</span><span class="w"> </span><span class="k" data-group-id="6258822813-2">do</span><span class="w">
    </span><span class="c1"># Introspection functions can take a `dsl_state` *or* a module</span><span class="w">
    </span><span class="k">if</span><span class="w"> </span><span class="nc">MyApp.Extensions.Base.Info</span><span class="o">.</span><span class="n">base_timestamps?</span><span class="p" data-group-id="6258822813-3">(</span><span class="n">dsl_state</span><span class="p" data-group-id="6258822813-3">)</span><span class="w"> </span><span class="k" data-group-id="6258822813-4">do</span><span class="w">
      </span><span class="n">dsl_state</span><span class="w">
      </span><span class="o">|&gt;</span><span class="w"> </span><span class="nc">Ash.Resource.Builder</span><span class="o">.</span><span class="n">add_new_create_timestamp</span><span class="p" data-group-id="6258822813-5">(</span><span class="ss">:inserted_at</span><span class="p" data-group-id="6258822813-5">)</span><span class="w">
      </span><span class="o">|&gt;</span><span class="w"> </span><span class="nc">Ash.Resource.Builder</span><span class="o">.</span><span class="n">add_new_update_timestamp</span><span class="p" data-group-id="6258822813-6">(</span><span class="ss">:updated_at</span><span class="p" data-group-id="6258822813-6">)</span><span class="w">
    </span><span class="k" data-group-id="6258822813-4">else</span><span class="w">
      </span><span class="p" data-group-id="6258822813-7">{</span><span class="ss">:ok</span><span class="p">,</span><span class="w"> </span><span class="n">dsl_state</span><span class="p" data-group-id="6258822813-7">}</span><span class="w">
    </span><span class="k" data-group-id="6258822813-4">end</span><span class="w">
  </span><span class="k" data-group-id="6258822813-2">end</span></code></pre><p>And now we have a configurable base extension! For more information on writing DSLs, see <a href="https://hexdocs.pm/spark/2.2.67/Spark.html"><code class="inline">Spark</code></a>.  <a href="https://hexdocs.pm/spark/2.2.67/Spark.html"><code class="inline">Spark</code></a> is still lacking in documentation, unfortunately, as its something that mostly the adventurous/power users work with, and they often learn by way of examples, looking at <a href="Ash.xhtml"><code class="inline">Ash</code></a> extensions. We would like to rectify this in the future. Please reach out if you're interested in assisting with that effort!</p><h3 id="ordering-of-transformers">Ordering of transformers</h3><p>In this case, this transformer can run in any order. However, as we start adding transformers and/or modify the behavior of this one, we may need to ensure that our transformer runs before or after specific transformers. As of the writing of this guide, the best way to look at the list of transformers is to look at the source of the extension, and see what transformers it has and what they do. The <a href="https://github.com/ash-project/ash/blob/main/lib/ash/resource/dsl.ex">Resource DSL</a> for example.</p><p>If you need to affect the ordering, you can define <code class="inline">before?/1</code> and <code class="inline">after?/1</code> in your transformer, i.e</p><pre><code class="makeup elixir" translate="no"><span class="c1"># I go after every transformer</span><span class="w">
</span><span class="kd">def</span><span class="w"> </span><span class="nf">after?</span><span class="p" data-group-id="1684492477-1">(</span><span class="bp">_</span><span class="p" data-group-id="1684492477-1">)</span><span class="p">,</span><span class="w"> </span><span class="ss">do</span><span class="p">:</span><span class="w"> </span><span class="no">true</span><span class="w">

</span><span class="c1"># except I go before `SomeOtherTransformer`</span><span class="w">
</span><span class="kd">def</span><span class="w"> </span><span class="nf">before?</span><span class="p" data-group-id="1684492477-2">(</span><span class="nc">SomeOtherTransformer</span><span class="p" data-group-id="1684492477-2">)</span><span class="p">,</span><span class="w"> </span><span class="ss">do</span><span class="p">:</span><span class="w"> </span><span class="no">true</span><span class="w">
</span><span class="kd">def</span><span class="w"> </span><span class="nf">before?</span><span class="p" data-group-id="1684492477-3">(</span><span class="bp">_</span><span class="p" data-group-id="1684492477-3">)</span><span class="p">,</span><span class="w"> </span><span class="ss">do</span><span class="p">:</span><span class="w"> </span><span class="no">false</span></code></pre><h2 id="using-your-extension">Using your extension</h2><p>Now it can be used in a resource:</p><pre><code class="makeup elixir" translate="no"><span class="kd">defmodule</span><span class="w"> </span><span class="nc">MyApp.Tweet</span><span class="w"> </span><span class="k" data-group-id="9673124078-1">do</span><span class="w">
  </span><span class="kn">use</span><span class="w"> </span><span class="nc">Ash.Resource</span><span class="p">,</span><span class="w">
    </span><span class="ss">extensions</span><span class="p">:</span><span class="w"> </span><span class="p" data-group-id="9673124078-2">[</span><span class="nc">MyApp.Extensions.Base</span><span class="p" data-group-id="9673124078-2">]</span><span class="w">

  </span><span class="n">base</span><span class="w"> </span><span class="k" data-group-id="9673124078-3">do</span><span class="w">
    </span><span class="c1"># And you can configure it like so</span><span class="w">
    </span><span class="n">timestamps?</span><span class="w"> </span><span class="no">false</span><span class="w">
  </span><span class="k" data-group-id="9673124078-3">end</span><span class="w">
</span><span class="k" data-group-id="9673124078-1">end</span></code></pre><p>Your extension will automatically support autocompletion if using <code class="inline">ElixirLS</code>, showing inline documentation and type-aware auto complete as you type. For more, see <a href="development-utilities.xhtml">Development Utilities</a></p><h2 id="base-resources">Base Resources</h2><p>Base resources are a &quot;quick and easy&quot; way to ensure that all or a set of your resources use the same behavior.
If we want to ensure that all of our resources have timestamps, we could create a module like so:</p><pre><code class="makeup elixir" translate="no"><span class="kd">defmodule</span><span class="w"> </span><span class="nc">MyApp.Resource</span><span class="w"> </span><span class="k" data-group-id="9726508173-1">do</span><span class="w">
  </span><span class="kd">defmacro</span><span class="w"> </span><span class="nf">__using__</span><span class="p" data-group-id="9726508173-2">(</span><span class="n">opts</span><span class="p" data-group-id="9726508173-2">)</span><span class="w"> </span><span class="k" data-group-id="9726508173-3">do</span><span class="w">
    </span><span class="k">quote</span><span class="w"> </span><span class="k" data-group-id="9726508173-4">do</span><span class="w">
      </span><span class="kn">use</span><span class="w"> </span><span class="nc">Ash.Resource</span><span class="p">,</span><span class="w"> </span><span class="k">unquote</span><span class="p" data-group-id="9726508173-5">(</span><span class="n">opts</span><span class="p" data-group-id="9726508173-5">)</span><span class="w">

      </span><span class="n">attributes</span><span class="w"> </span><span class="k" data-group-id="9726508173-6">do</span><span class="w">
        </span><span class="n">timestamps</span><span class="p" data-group-id="9726508173-7">(</span><span class="p" data-group-id="9726508173-7">)</span><span class="w">
      </span><span class="k" data-group-id="9726508173-6">end</span><span class="w">
    </span><span class="k" data-group-id="9726508173-4">end</span><span class="w">
  </span><span class="k" data-group-id="9726508173-3">end</span><span class="w">
</span><span class="k" data-group-id="9726508173-1">end</span></code></pre><p>Then we would configure that this base resource exists, with
<code class="inline">config :my_app, base_resources: [MyApp.Resource]</code></p><p>Now in our resources instead of <code class="inline">use Ash.Resource</code>, we say <code class="inline">use MyApp.Resource</code>.</p><p>Use <a href="Mix.Tasks.Ash.Gen.BaseResource.xhtml"><code class="inline">mix ash.gen.base_resource</code></a> to create one of these.:w</p><p>This pattern is relatively limited, good for simple things like making sure that all
of our resources use a particular extension. See the section above on extensions for the
ideal way of extending resources.</p>

  </body>
</html>
