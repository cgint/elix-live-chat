<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"
      xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>Project Structure - ash v3.5.33</title>
    <meta name="generator" content="ExDoc v0.38.2" />
    <link type="text/css" rel="stylesheet" href="dist/epub-elixir-FNUUKFP7.css" />
    <script src="dist/epub-4WIP524F.js"></script>

  </head>
  <body class="content-inner">

    <h1 id="content">Project Structure</h1>
<p>In this guide we'll discuss some best practices for how to structure your project. These recommendations align well with <a href="https://hexdocs.pm/elixir/1.16.2/naming-conventions.html#casing">Elixir conventions</a> around file and module naming. These conventions allow for a logical coupling of module and file names, and help keep your project organized and easy to navigate.</p><section role="note" class="admonition info"><h3 id="these-are-recommendations" class="admonition-title info">These are recommendations</h3><p>None of the things we show you here are <em>requirements</em>, only recommendations.
Feel free to plot your own course here. Ash avoids any pattern that requires
you to name a  file or module in a specific way, or put them in a specific
place. This ensures that all connections between one module and another
module are <em>explicit</em> rather than <em>implicit</em>.</p></section><p>These recommendations all correspond to standard practice in most Elixir/Phoenix applications</p><pre><code class="makeup elixir" translate="no"><span class="n">lib</span><span class="o">/</span><span class="w">
</span><span class="err">├</span><span class="err">─</span><span class="err">─</span><span class="w"> </span><span class="n">my_app</span><span class="o">/</span><span class="w">                    </span><span class="c1"># Your application&#39;s main namespace</span><span class="w">
</span><span class="err">│</span><span class="w">   </span><span class="err">├</span><span class="err">─</span><span class="err">─</span><span class="w"> </span><span class="n">accounts</span><span class="o">.</span><span class="n">ex</span><span class="w">            </span><span class="c1"># Accounts domain module</span><span class="w">
</span><span class="err">│</span><span class="w">   </span><span class="err">├</span><span class="err">─</span><span class="err">─</span><span class="w"> </span><span class="n">helpdesk</span><span class="o">.</span><span class="n">ex</span><span class="w">            </span><span class="c1"># Helpdesk domain module</span><span class="w">
</span><span class="err">│</span><span class="w">   </span><span class="err">│</span><span class="w">
</span><span class="err">│</span><span class="w">   </span><span class="err">├</span><span class="err">─</span><span class="err">─</span><span class="w"> </span><span class="n">accounts</span><span class="o">/</span><span class="w">               </span><span class="c1"># Accounts context</span><span class="w">
</span><span class="err">│</span><span class="w">   </span><span class="err">│</span><span class="w">   </span><span class="err">├</span><span class="err">─</span><span class="err">─</span><span class="w"> </span><span class="n">user</span><span class="o">.</span><span class="n">ex</span><span class="w">             </span><span class="c1"># User resource</span><span class="w">
</span><span class="err">│</span><span class="w">   </span><span class="err">│</span><span class="w">   </span><span class="err">├</span><span class="err">─</span><span class="err">─</span><span class="w"> </span><span class="n">user</span><span class="o">/</span><span class="w">               </span><span class="c1"># User resource files</span><span class="w">
</span><span class="err">│</span><span class="w">   </span><span class="err">│</span><span class="w">   </span><span class="err">├</span><span class="err">─</span><span class="err">─</span><span class="w"> </span><span class="n">token</span><span class="o">.</span><span class="n">ex</span><span class="w">            </span><span class="c1"># Token resource</span><span class="w">
</span><span class="err">│</span><span class="w">   </span><span class="err">│</span><span class="w">   </span><span class="err">└</span><span class="err">─</span><span class="err">─</span><span class="w"> </span><span class="n">password_helper</span><span class="o">.</span><span class="n">ex</span><span class="w">  </span><span class="c1"># Support module</span><span class="w">
</span><span class="err">│</span><span class="w">   </span><span class="err">│</span><span class="w">
</span><span class="err">│</span><span class="w">   </span><span class="err">└</span><span class="err">─</span><span class="err">─</span><span class="w"> </span><span class="n">helpdesk</span><span class="o">/</span><span class="w">            </span><span class="c1"># Helpdesk context</span><span class="w">
</span><span class="err">│</span><span class="w">       </span><span class="err">├</span><span class="err">─</span><span class="err">─</span><span class="w"> </span><span class="n">ticket</span><span class="o">.</span><span class="n">ex</span><span class="w">        </span><span class="c1"># Ticket resource</span><span class="w">
</span><span class="err">│</span><span class="w">       </span><span class="err">├</span><span class="err">─</span><span class="err">─</span><span class="w"> </span><span class="n">notification</span><span class="o">.</span><span class="n">ex</span><span class="w">  </span><span class="c1"># Notification resource</span><span class="w">
</span><span class="err">│</span><span class="w">       </span><span class="err">├</span><span class="err">─</span><span class="err">─</span><span class="w"> </span><span class="n">other_file</span><span class="o">.</span><span class="n">ex</span><span class="w">    </span><span class="c1"># Support module</span><span class="w">
</span><span class="err">│</span><span class="w">       </span><span class="err">└</span><span class="err">─</span><span class="err">─</span><span class="w"> </span><span class="n">ticket</span><span class="o">/</span><span class="w">          </span><span class="c1"># Ticket resource files</span><span class="w">
</span><span class="err">│</span><span class="w">           </span><span class="err">├</span><span class="err">─</span><span class="err">─</span><span class="w"> </span><span class="n">preparations</span><span class="o">/</span><span class="w">
</span><span class="err">│</span><span class="w">           </span><span class="err">├</span><span class="err">─</span><span class="err">─</span><span class="w"> </span><span class="n">changes</span><span class="o">/</span><span class="w">
</span><span class="err">│</span><span class="w">           </span><span class="err">└</span><span class="err">─</span><span class="err">─</span><span class="w"> </span><span class="n">checks</span><span class="o">/</span></code></pre><p>Place your Ash application in the standard Elixir application directory <code class="inline">lib/my_app</code>. Your <a href="Ash.Domain.xhtml"><code class="inline">Ash.Domain</code></a> modules should be at the root level of this directory. Each domain should have a directory named after it, containing the domain's <a href="Ash.Resource.xhtml"><code class="inline">Ash.Resource</code></a> modules and any of the domain's supporting modules. All resource interaction ultimately goes through a domain module.</p><p>For resources that require additional files, create a dedicated folder in the domain context named after the resource. We suggest organizing these supplementary files into subdirectories by type (like <code class="inline">changes/</code>, <code class="inline">preparations/</code>, etc.), though this organization is optional.</p><h1>Where do I put X thing</h1><p>The purpose of Ash is to be both the model of and the interface to your domain logic (A.K.A business logic). Applying this generally looks like building as much of your domain logic &quot;behind&quot; your resources. This does not mean, however, that everything has to go <em>inside of</em> your resources. For example, if you have a <code class="inline">Purchase</code> resource, and you want to be able to display a list of purchases that were taxable, and also calculate the percentage of the purchase that was taxable. You might have an action called <code class="inline">:taxable</code> and a calculation called <code class="inline">:percentage_tax</code>.</p><h2 id="example-1-reads-calculations">Example 1: Reads &amp; Calculations</h2><pre><code class="makeup elixir" translate="no"><span class="n">actions</span><span class="w"> </span><span class="k" data-group-id="6912036356-1">do</span><span class="w">
  </span><span class="n">...</span><span class="w">

  </span><span class="n">read</span><span class="w"> </span><span class="ss">:taxable</span><span class="w"> </span><span class="k" data-group-id="6912036356-2">do</span><span class="w">
    </span><span class="n">filter</span><span class="w"> </span><span class="n">expr</span><span class="p" data-group-id="6912036356-3">(</span><span class="n">taxable</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="no">true</span><span class="p" data-group-id="6912036356-3">)</span><span class="w">
  </span><span class="k" data-group-id="6912036356-2">end</span><span class="w">
</span><span class="k" data-group-id="6912036356-1">end</span><span class="w">

</span><span class="n">calculations</span><span class="w"> </span><span class="k" data-group-id="6912036356-4">do</span><span class="w">
  </span><span class="n">calculate</span><span class="w"> </span><span class="ss">:percentage_tax</span><span class="p">,</span><span class="w"> </span><span class="ss">:decimal</span><span class="p">,</span><span class="w"> </span><span class="n">expr</span><span class="p" data-group-id="6912036356-5">(</span><span class="w">
    </span><span class="n">sum</span><span class="p" data-group-id="6912036356-6">(</span><span class="n">line_items</span><span class="p">,</span><span class="w"> </span><span class="ss">field</span><span class="p">:</span><span class="w"> </span><span class="ss">:amount</span><span class="p">,</span><span class="w"> </span><span class="ss">query</span><span class="p">:</span><span class="w"> </span><span class="p" data-group-id="6912036356-7">[</span><span class="ss">filter</span><span class="p">:</span><span class="w"> </span><span class="n">tax</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="no">true</span><span class="p" data-group-id="6912036356-7">]</span><span class="p" data-group-id="6912036356-6">)</span><span class="w"> </span><span class="o">/</span><span class="w">
    </span><span class="n">sum</span><span class="p" data-group-id="6912036356-8">(</span><span class="n">line_items</span><span class="p">,</span><span class="w"> </span><span class="ss">field</span><span class="p">:</span><span class="w"> </span><span class="ss">:amount</span><span class="p" data-group-id="6912036356-8">)</span><span class="w">
  </span><span class="p" data-group-id="6912036356-5">)</span><span class="w">
</span><span class="k" data-group-id="6912036356-4">end</span></code></pre><p>In practice, you may not need the <code class="inline">taxable</code> action, i.e perhaps you simply want a &quot;taxable&quot; checkbox on a list view in your application, in which case you may use the primary read, or some other read like <code class="inline">:transaction_report</code>. You would then, on the consumer, provide the filter for <code class="inline">taxable == true</code>, and load the <code class="inline">:percentage_tax</code> calculation.</p><h2 id="example-2-using-external-data-in-create-actions">Example 2: Using external data in create actions</h2><p>Lets say you want the user to fill in a github issue id, and you will fetch information from that github issue to use as part of creating a &quot;ticket&quot; in your system.. You might be tempted to do something like this in a LiveView:</p><pre><code class="makeup elixir" translate="no"><span class="kd">def</span><span class="w"> </span><span class="nf">handle_event</span><span class="p" data-group-id="0087337153-1">(</span><span class="s">&quot;link_ticket&quot;</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="0087337153-2">%{</span><span class="s">&quot;issue_id&quot;</span><span class="w"> </span><span class="p">=&gt;</span><span class="w"> </span><span class="n">issue_id</span><span class="p" data-group-id="0087337153-2">}</span><span class="p">,</span><span class="w"> </span><span class="n">socket</span><span class="p" data-group-id="0087337153-1">)</span><span class="w"> </span><span class="k" data-group-id="0087337153-3">do</span><span class="w">
  </span><span class="n">issue_info</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nc">GithubApi</span><span class="o">.</span><span class="n">get_issue</span><span class="p" data-group-id="0087337153-4">(</span><span class="n">issue_id</span><span class="p" data-group-id="0087337153-4">)</span><span class="w">

  </span><span class="nc">MyApp.Support</span><span class="o">.</span><span class="n">update_ticket</span><span class="p" data-group-id="0087337153-5">(</span><span class="n">socket</span><span class="o">.</span><span class="n">assigns</span><span class="o">.</span><span class="n">ticket_id</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="0087337153-6">%{</span><span class="ss">issue_info</span><span class="p">:</span><span class="w"> </span><span class="p" data-group-id="0087337153-7">%{</span><span class="w">
    </span><span class="ss">title</span><span class="p">:</span><span class="w"> </span><span class="n">issue_info</span><span class="o">.</span><span class="n">title</span><span class="p">,</span><span class="w">
    </span><span class="ss">body</span><span class="p">:</span><span class="w"> </span><span class="n">issue_info</span><span class="o">.</span><span class="n">body</span><span class="w">
  </span><span class="p" data-group-id="0087337153-7">}</span><span class="p" data-group-id="0087337153-6">}</span><span class="p" data-group-id="0087337153-5">)</span><span class="w">
</span><span class="k" data-group-id="0087337153-3">end</span></code></pre><p>But this is putting business logic inside of your UI/representation layer. Instead, you should write an action and put this logic inside of it.</p><pre><code class="makeup elixir" translate="no"><span class="kd">defmodule</span><span class="w"> </span><span class="nc">MyApp.Ticket.FetchIssueInfo</span><span class="w"> </span><span class="k" data-group-id="2781225285-1">do</span><span class="w">
  </span><span class="kn">use</span><span class="w"> </span><span class="nc">Ash.Resource.Change</span><span class="w">

  </span><span class="kd">def</span><span class="w"> </span><span class="nf">change</span><span class="p" data-group-id="2781225285-2">(</span><span class="n">changeset</span><span class="p">,</span><span class="w"> </span><span class="bp">_</span><span class="p">,</span><span class="w"> </span><span class="bp">_</span><span class="p" data-group-id="2781225285-2">)</span><span class="w"> </span><span class="k" data-group-id="2781225285-3">do</span><span class="w">
    </span><span class="nc">Ash.Changeset</span><span class="o">.</span><span class="n">before_transaction</span><span class="p" data-group-id="2781225285-4">(</span><span class="n">changeset</span><span class="p">,</span><span class="w"> </span><span class="k" data-group-id="2781225285-5">fn</span><span class="w"> </span><span class="n">changeset</span><span class="w"> </span><span class="o">-&gt;</span><span class="w">
      </span><span class="n">issue_info</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nc">GithubApi</span><span class="o">.</span><span class="n">get_issue</span><span class="p" data-group-id="2781225285-6">(</span><span class="n">changeset</span><span class="o">.</span><span class="n">arguments</span><span class="o">.</span><span class="n">issue_id</span><span class="p" data-group-id="2781225285-6">)</span><span class="w">

      </span><span class="nc">Ash.Changeset</span><span class="o">.</span><span class="n">force_change_attributes</span><span class="p" data-group-id="2781225285-7">(</span><span class="n">changeset</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="2781225285-8">%{</span><span class="w">
        </span><span class="ss">issue_info</span><span class="p">:</span><span class="w"> </span><span class="p" data-group-id="2781225285-9">%{</span><span class="w">
          </span><span class="ss">title</span><span class="p">:</span><span class="w"> </span><span class="n">issue_info</span><span class="o">.</span><span class="n">title</span><span class="p">,</span><span class="w">
          </span><span class="ss">body</span><span class="p">:</span><span class="w"> </span><span class="n">issue_info</span><span class="o">.</span><span class="n">body</span><span class="w">
        </span><span class="p" data-group-id="2781225285-9">}</span><span class="w">
      </span><span class="p" data-group-id="2781225285-8">}</span><span class="p" data-group-id="2781225285-7">)</span><span class="w">
    </span><span class="k" data-group-id="2781225285-5">end</span><span class="p" data-group-id="2781225285-4">)</span><span class="w">
  </span><span class="k" data-group-id="2781225285-3">end</span><span class="w">
</span><span class="k" data-group-id="2781225285-1">end</span></code></pre><p>Then you'd have an action like this:</p><pre><code class="makeup elixir" translate="no"><span class="n">update</span><span class="w"> </span><span class="ss">:link_ticket</span><span class="w"> </span><span class="k" data-group-id="1537392477-1">do</span><span class="w">
  </span><span class="n">argument</span><span class="w"> </span><span class="ss">:issue_id</span><span class="p">,</span><span class="w"> </span><span class="ss">:string</span><span class="p">,</span><span class="w"> </span><span class="ss">allow_nil?</span><span class="p">:</span><span class="w"> </span><span class="no">false</span><span class="w">

  </span><span class="n">change</span><span class="w"> </span><span class="nc">MyApp.Ticket.FetchIssueInfo</span><span class="w">
</span><span class="k" data-group-id="1537392477-1">end</span></code></pre><p>This cleanly encapsulates the operation behind the resource, even while the code for fetching the github issue still lives in a <code class="inline">GitHubApi</code> module.</p>

  </body>
</html>
