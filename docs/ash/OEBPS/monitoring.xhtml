<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"
      xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>Monitoring - ash v3.5.33</title>
    <meta name="generator" content="ExDoc v0.38.2" />
    <link type="text/css" rel="stylesheet" href="dist/epub-elixir-FNUUKFP7.css" />
    <script src="dist/epub-4WIP524F.js"></script>

  </head>
  <body class="content-inner">

    <h1 id="content">Monitoring</h1>
<p>Monitoring in Ash has two primary components, <a href="Ash.Tracer.xhtml"><code class="inline">Ash.Tracer</code></a> and <code class="inline">:telemetry</code>. Monitoring might also be referred to as observability and instrumentation.</p><h2 id="packages">Packages</h2><p>If you want to integrate with <a href="https://www.appsignal.com">Appsignal</a>, use the <a href="https://hexdocs.pm/ash_appsignal">AshAppsignal</a> package, which is maintained by the core team. We believe that Appsignal is a great way to get started quickly, is relatively cost effective, and provides a great user experience.</p><h2 id="telemetry">Telemetry</h2><p>Ash emits the following telemetry events, suffixed with <code class="inline">:start</code> and <code class="inline">:stop</code>. Start events have <code class="inline">system_time</code> measurements, and stop events have <code class="inline">system_time</code> and <code class="inline">duration</code> measurements. All times will be in the native time unit.</p><h3 id="important">Important</h3><p>Note the mention of <code class="inline">:start</code> and <code class="inline">:stop</code> suffixes. The event below <code class="inline">[:ash, (domain_short_name), :create]</code>, is actually referring to two events, <code class="inline">[:ash, (domain_short_name), :create, :start]</code> and <code class="inline">[:ash, (domain_short_name), :create, :stop]</code>.</p><p>_Replace <code class="inline">(domain_short_name)</code> with your domain short name, from <code class="inline">d:Ash.Domain.Info.short_name</code>.</p><h3 id="events">Events</h3><ul><li><code class="inline">[:ash, (domain_short_name), :create]</code> - The execution of a create action. Use <code class="inline">resource_short_name</code> and <code class="inline">action</code> metadata to break down measurements.</li><li><code class="inline">[:ash, (domain_short_name), :update]</code> - The execution of a update action. Use <code class="inline">resource_short_name</code> and <code class="inline">action</code> metadata to break down measurements.</li><li><code class="inline">[:ash, (domain_short_name), :read]</code> - The execution of a read action. Use <code class="inline">resource_short_name</code> and <code class="inline">action</code> metadata to break down measurements.</li><li><code class="inline">[:ash, (domain_short_name), :destroy]</code> - The execution of a destroy action. Use <code class="inline">resource_short_name</code> and <code class="inline">action</code> metadata to break down measurements.</li><li><code class="inline">[:ash, (domain_short_name), :action]</code> - The execution of a generic action. Use <code class="inline">resource_short_name</code> and <code class="inline">action</code> metadata to break down measurements.</li><li><code class="inline">[:ash, :changeset]</code> - A changeset being processed for a given action, i.e with <code class="inline">Ash.Changeset.for_create</code>. Use <code class="inline">resource_short_name</code> metadata to break down measurements.</li><li><code class="inline">[:ash, :query]</code> - A query being processed for an action, with <code class="inline">Ash.Query.for_read</code>. Use <code class="inline">resource_short_name</code> metadata to break down measurements.</li><li><code class="inline">[:ash, :validation]</code> - A validation being run on a changeset. Use <code class="inline">resource_short_name</code> and <code class="inline">validation</code> metadata to break down measurements.</li><li><code class="inline">[:ash, :change]</code> - A change being run on a changeset. Use <code class="inline">resource_short_name</code> and <code class="inline">change</code> metadata to break down measurements.</li><li><code class="inline">[:ash, :calculation]</code> - A calculation being computed in the app. Use <code class="inline">resource_short_name</code> and <code class="inline">calculation</code> metadata to break down measurements.</li><li><code class="inline">[:ash, :before_action]</code> - A before_action being run on a changeset. Use <code class="inline">resource_short_name</code> to break down measurements.</li><li><code class="inline">[:ash, :after_action]</code> - An after_action being run on a changeset. Use <code class="inline">resource_short_name</code> to break down measurements.</li><li><code class="inline">[:ash, :preparation]</code> - A preparation being run on a changeset. Use <code class="inline">resource_short_name</code> and <code class="inline">preparation</code> metadata to break down measurements.</li><li><code class="inline">[:ash, :notifier]</code> - A notifier being run with a notification. Use <code class="inline">resource_short_name</code> and <code class="inline">notifier</code> metadata to break down measurements.</li><li><code class="inline">[:ash, :request_step]</code> - The resolution of an internal request. Ash breaks up its operations internally into multiple requests, this can give you a high resolution insight onto the execution of those internal requests resolution. Use <code class="inline">name</code> metadata to break down measurements.</li></ul><h2 id="tracing">Tracing</h2><p>Tracing is very similar to telemetry, but gives you some additional hooks to <code class="inline">set_span_context()</code> and <code class="inline">get_span_context()</code>. This allows you to &quot;move&quot; some piece of context between two processes. Ash will call this whenever it starts a new process to do anything. What this means is that if you are using a tracing tool or library you can ensure that any processes spawned by Ash are properly included in the trace. Additionally, you should be able to integrate a tracing library to include Ash actions/spans relatively easily by implementing the other callbacks.</p><p>A tracer can be configured globally in application config.</p><pre><code class="makeup elixir" translate="no"><span class="n">config</span><span class="w"> </span><span class="ss">:ash</span><span class="p">,</span><span class="w"> </span><span class="ss">:tracer</span><span class="p">,</span><span class="w"> </span><span class="nc">MyApp.Tracer</span></code></pre><p>Additionally, one can be provide when creating changesets or calling an action, i.e</p><pre><code class="makeup elixir" translate="no"><span class="nc">Resource</span><span class="w">
</span><span class="c1"># better to put it here, as changesets are traced as well. It will be carried over to the domain action</span><span class="w">
</span><span class="o">|&gt;</span><span class="w"> </span><span class="nc">Ash.Changeset</span><span class="o">.</span><span class="n">for_create</span><span class="p" data-group-id="4363828937-1">(</span><span class="ss">:create</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="4363828937-2">%{</span><span class="p" data-group-id="4363828937-2">}</span><span class="p">,</span><span class="w"> </span><span class="ss">tracer</span><span class="p">:</span><span class="w"> </span><span class="nc">MyApp.Tracer</span><span class="p" data-group-id="4363828937-1">)</span><span class="w">
</span><span class="c1"># but you can also pass it here.</span><span class="w">
</span><span class="o">|&gt;</span><span class="w"> </span><span class="nc">Ash</span><span class="o">.</span><span class="n">create!</span><span class="p" data-group-id="4363828937-3">(</span><span class="ss">tracer</span><span class="p">:</span><span class="w"> </span><span class="nc">MyApp.Tracer</span><span class="p" data-group-id="4363828937-3">)</span></code></pre><p>For customizing the names created for each span, see:</p><ul><li><code class="inline">d:Ash.Domain.Dsl.execution|trace_name</code></li><li><code class="inline">d:Ash.Resource.Dsl.resource|trace_name</code></li></ul><h3 id="trace-types">Trace types</h3><p>These are the list of trace types.</p><ul><li>:custom</li><li>:action</li><li>:changeset</li><li>:validation</li><li>:change</li><li>:calculation</li><li>:before_transaction</li><li>:before_action</li><li>:after_transaction</li><li>:after_action</li><li>:request_step</li><li>:query</li><li>:notifier</li><li>:preparation</li><li>:preparation</li></ul><h2 id="after-before-action-hooks">After/Before Action Hooks</h2><p>Due to the way before/after action hooks run, their execution time won't be included in the span created for the change. In practice, before/after action hooks are where the long running operations tend to be. We start a corresponding <code class="inline">span</code> and emit a telemetry event for before and after hooks, but they are only so useful. In a trace, they can highlight that &quot;some hook&quot; took a long time. In telemetry metrics they are of even less use. The cardinality of the metric would be extremely high, and we don't have a &quot;name&quot; or anything to distinguish them. To that end, you can use the macros &amp; functions available in <a href="Ash.Tracer.xhtml"><code class="inline">Ash.Tracer</code></a> to create custom spans and/or emit custom telemetry events from your hooks. They automatically handle cases where the provided tracer is <code class="inline">nil</code>, for convenience. For example:</p><pre><code class="makeup elixir" translate="no"><span class="kd">defmodule</span><span class="w"> </span><span class="nc">MyApp.CustomChange</span><span class="w"> </span><span class="k" data-group-id="7879520518-1">do</span><span class="w">
  </span><span class="kn">use</span><span class="w"> </span><span class="nc">Ash.Resource.Change</span><span class="w">

  </span><span class="kn">require</span><span class="w"> </span><span class="nc">Ash.Tracer</span><span class="w">

  </span><span class="kd">def</span><span class="w"> </span><span class="nf">change</span><span class="p" data-group-id="7879520518-2">(</span><span class="n">changeset</span><span class="p">,</span><span class="w"> </span><span class="bp">_</span><span class="p">,</span><span class="w"> </span><span class="bp">_</span><span class="p" data-group-id="7879520518-2">)</span><span class="w"> </span><span class="k" data-group-id="7879520518-3">do</span><span class="w">
    </span><span class="n">changeset</span><span class="w">
    </span><span class="o">|&gt;</span><span class="w"> </span><span class="nc">Ash.Changeset</span><span class="o">.</span><span class="n">before_action</span><span class="p" data-group-id="7879520518-4">(</span><span class="k" data-group-id="7879520518-5">fn</span><span class="w"> </span><span class="n">changeset</span><span class="w"> </span><span class="o">-&gt;</span><span class="w">
      </span><span class="nc">Ash.Tracer</span><span class="o">.</span><span class="n">span</span><span class="p" data-group-id="7879520518-6">(</span><span class="ss">:custom</span><span class="p">,</span><span class="w"> </span><span class="s">&quot;custom name&quot;</span><span class="p">,</span><span class="w"> </span><span class="n">changeset</span><span class="o">.</span><span class="n">context</span><span class="p" data-group-id="7879520518-7">[</span><span class="ss">:private</span><span class="p" data-group-id="7879520518-7">]</span><span class="p" data-group-id="7879520518-8">[</span><span class="ss">:tracer</span><span class="p" data-group-id="7879520518-8">]</span><span class="p" data-group-id="7879520518-6">)</span><span class="w"> </span><span class="k" data-group-id="7879520518-9">do</span><span class="w">
        </span><span class="c1"># optionally set some metadata</span><span class="w">
        </span><span class="n">metadata</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p" data-group-id="7879520518-10">%{</span><span class="n">...</span><span class="p" data-group-id="7879520518-10">}</span><span class="w">
        </span><span class="nc">Ash.Tracer</span><span class="o">.</span><span class="n">set_metadata</span><span class="p" data-group-id="7879520518-11">(</span><span class="n">changeset</span><span class="o">.</span><span class="n">context</span><span class="p" data-group-id="7879520518-12">[</span><span class="ss">:private</span><span class="p" data-group-id="7879520518-12">]</span><span class="p" data-group-id="7879520518-13">[</span><span class="ss">:tracer</span><span class="p" data-group-id="7879520518-13">]</span><span class="p">,</span><span class="w"> </span><span class="ss">:custom</span><span class="p">,</span><span class="w"> </span><span class="n">metadata</span><span class="p" data-group-id="7879520518-11">)</span><span class="w">
        </span><span class="c1"># will get `:start` and `:stop` suffixed events emitted</span><span class="w">
        </span><span class="nc">Ash.Tracer</span><span class="o">.</span><span class="n">telemetry_span</span><span class="p" data-group-id="7879520518-14">(</span><span class="p" data-group-id="7879520518-15">[</span><span class="ss">:telemetry</span><span class="p">,</span><span class="w"> </span><span class="ss">:event</span><span class="p">,</span><span class="w"> </span><span class="ss">:name</span><span class="p" data-group-id="7879520518-15">]</span><span class="p">,</span><span class="w"> </span><span class="n">metadata</span><span class="p" data-group-id="7879520518-14">)</span><span class="w"> </span><span class="k" data-group-id="7879520518-16">do</span><span class="w">
          </span><span class="c1">## Your logic here</span><span class="w">
        </span><span class="k" data-group-id="7879520518-16">end</span><span class="w">
      </span><span class="k" data-group-id="7879520518-9">end</span><span class="w">
    </span><span class="k" data-group-id="7879520518-5">end</span><span class="p" data-group-id="7879520518-4">)</span><span class="w">
  </span><span class="k" data-group-id="7879520518-3">end</span><span class="w">
</span><span class="k" data-group-id="7879520518-1">end</span></code></pre>

  </body>
</html>
