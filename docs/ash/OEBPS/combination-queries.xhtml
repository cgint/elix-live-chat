<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"
      xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>Combination Queries - ash v3.5.33</title>
    <meta name="generator" content="ExDoc v0.38.2" />
    <link type="text/css" rel="stylesheet" href="dist/epub-elixir-FNUUKFP7.css" />
    <script src="dist/epub-4WIP524F.js"></script>

  </head>
  <body class="content-inner">

    <h1 id="content">Combination Queries</h1>
<p>Ash Framework provides a powerful feature called &quot;combination queries&quot; that allows you to combine multiple queries into a single result set, giving you the ability to create complex data retrieval patterns with minimal effort. For SQL data-layers, this feature is implemented using SQL's UNION, INTERSECT, and EXCEPT operations.</p><h2 id="overview">Overview</h2><p>Combination queries let you:</p><ul><li>Combine multiple distinct queries into a single result set</li><li>Apply different filters, sorting, limits, and calculations to each subquery</li><li>Use operations like union, intersection, and exclusion to define how results should be combined</li><li>Create complex composite queries that would otherwise require multiple separate database calls</li></ul><h2 id="syntax">Syntax</h2><p>To use combination queries, you'll work with the following functions:</p><pre><code class="makeup elixir" translate="no"><span class="nc">Ash.Query</span><span class="o">.</span><span class="n">combination_of</span><span class="p" data-group-id="3114254179-1">(</span><span class="n">query</span><span class="p">,</span><span class="w"> </span><span class="n">combinations</span><span class="p" data-group-id="3114254179-1">)</span></code></pre><p>Where <code class="inline">combinations</code> is a list of combination specifications starting with a base query, followed by additional operations:</p><ul><li><a href="Ash.Query.Combination.xhtml#base/1"><code class="inline">Ash.Query.Combination.base/1</code></a>: The starting point for your combined query</li><li><a href="Ash.Query.Combination.xhtml#union/1"><code class="inline">Ash.Query.Combination.union/1</code></a>: Combine with the previous results, removing duplicates</li><li><a href="Ash.Query.Combination.xhtml#union_all/1"><code class="inline">Ash.Query.Combination.union_all/1</code></a>: Combine with the previous results, keeping duplicates</li><li><a href="Ash.Query.Combination.xhtml#intersect/1"><code class="inline">Ash.Query.Combination.intersect/1</code></a>: Keep only records that appear in both the previous results and this query</li><li><a href="Ash.Query.Combination.xhtml#except/1"><code class="inline">Ash.Query.Combination.except/1</code></a>: Remove records from the previous results that appear in this query</li></ul><h2 id="basic-example">Basic Example</h2><p>Here's a simple example that combines users who meet different criteria:</p><pre><code class="makeup elixir" translate="no"><span class="n">read</span><span class="w"> </span><span class="ss">:best_and_worst_users</span><span class="w"> </span><span class="k" data-group-id="1813759079-1">do</span><span class="w">
  </span><span class="n">description</span><span class="w"> </span><span class="s">&quot;&quot;&quot;
  Returns the top 10 active users who are not on a losing streak
  (sorted by score descending) and the bottom 10 active users who are not on a
  winning streak (sorted by score ascending)
  &quot;&quot;&quot;</span><span class="w">

  </span><span class="n">filter</span><span class="w"> </span><span class="n">expr</span><span class="p" data-group-id="1813759079-2">(</span><span class="n">active</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="no">true</span><span class="p" data-group-id="1813759079-2">)</span><span class="w">

  </span><span class="n">prepare</span><span class="w"> </span><span class="k" data-group-id="1813759079-3">fn</span><span class="w"> </span><span class="n">query</span><span class="p">,</span><span class="w"> </span><span class="bp">_</span><span class="w"> </span><span class="o">-&gt;</span><span class="w">
    </span><span class="nc">Ash.Query</span><span class="o">.</span><span class="n">combination_of</span><span class="p" data-group-id="1813759079-4">(</span><span class="n">query</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="1813759079-5">[</span><span class="w">
      </span><span class="c1"># Must always begin with a base combination</span><span class="w">
      </span><span class="nc">Ash.Query.Combination</span><span class="o">.</span><span class="n">base</span><span class="p" data-group-id="1813759079-6">(</span><span class="w">
        </span><span class="ss">filter</span><span class="p">:</span><span class="w"> </span><span class="n">expr</span><span class="p" data-group-id="1813759079-7">(</span><span class="ow">not</span><span class="p" data-group-id="1813759079-8">(</span><span class="n">on_a_losing_streak</span><span class="p" data-group-id="1813759079-8">)</span><span class="p" data-group-id="1813759079-7">)</span><span class="p">,</span><span class="w">
        </span><span class="ss">sort</span><span class="p">:</span><span class="w"> </span><span class="p" data-group-id="1813759079-9">[</span><span class="ss">score</span><span class="p">:</span><span class="w"> </span><span class="ss">:desc</span><span class="p" data-group-id="1813759079-9">]</span><span class="p">,</span><span class="w">
        </span><span class="ss">limit</span><span class="p">:</span><span class="w"> </span><span class="mi">10</span><span class="w">
      </span><span class="p" data-group-id="1813759079-6">)</span><span class="p">,</span><span class="w">
      </span><span class="nc">Ash.Query.Combination</span><span class="o">.</span><span class="n">union</span><span class="p" data-group-id="1813759079-10">(</span><span class="w">
        </span><span class="ss">filter</span><span class="p">:</span><span class="w"> </span><span class="n">expr</span><span class="p" data-group-id="1813759079-11">(</span><span class="ow">not</span><span class="p" data-group-id="1813759079-12">(</span><span class="n">on_a_winning_streak</span><span class="p" data-group-id="1813759079-12">)</span><span class="p" data-group-id="1813759079-11">)</span><span class="p">,</span><span class="w">
        </span><span class="ss">sort</span><span class="p">:</span><span class="w"> </span><span class="p" data-group-id="1813759079-13">[</span><span class="ss">score</span><span class="p">:</span><span class="w"> </span><span class="ss">:asc</span><span class="p" data-group-id="1813759079-13">]</span><span class="p">,</span><span class="w">
        </span><span class="ss">limit</span><span class="p">:</span><span class="w"> </span><span class="mi">10</span><span class="w">
      </span><span class="p" data-group-id="1813759079-10">)</span><span class="w">
    </span><span class="p" data-group-id="1813759079-5">]</span><span class="p" data-group-id="1813759079-4">)</span><span class="w">
  </span><span class="k" data-group-id="1813759079-3">end</span><span class="w">
</span><span class="k" data-group-id="1813759079-1">end</span></code></pre><p>This query would return:</p><ul><li>The top 10 active users who are not on a losing streak (sorted by score descending)</li><li>Union with the bottom 10 active users who are not on a winning streak (sorted by score ascending)</li></ul><h2 id="using-calculations-in-combinations">Using Calculations in Combinations</h2><p>One of the most powerful features of combination queries is the ability to create calculations that can be referenced across the combinations:</p><pre><code class="makeup elixir" translate="no"><span class="n">query</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s">&quot;fred&quot;</span><span class="w">

</span><span class="nc">User</span><span class="w">
</span><span class="o">|&gt;</span><span class="w"> </span><span class="nc">Ash.Query</span><span class="o">.</span><span class="n">filter</span><span class="p" data-group-id="4997330598-1">(</span><span class="n">active</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="no">true</span><span class="p" data-group-id="4997330598-1">)</span><span class="w">
</span><span class="o">|&gt;</span><span class="w"> </span><span class="nc">Ash.Query</span><span class="o">.</span><span class="n">combination_of</span><span class="p" data-group-id="4997330598-2">(</span><span class="p" data-group-id="4997330598-3">[</span><span class="w">
  </span><span class="nc">Ash.Query.Combination</span><span class="o">.</span><span class="n">base</span><span class="p" data-group-id="4997330598-4">(</span><span class="w">
    </span><span class="ss">filter</span><span class="p">:</span><span class="w"> </span><span class="n">expr</span><span class="p" data-group-id="4997330598-5">(</span><span class="n">trigram_similarity</span><span class="p" data-group-id="4997330598-6">(</span><span class="n">user_name</span><span class="p">,</span><span class="w"> </span><span class="o">^</span><span class="n">query</span><span class="p" data-group-id="4997330598-6">)</span><span class="w"> </span><span class="o">&gt;=</span><span class="w"> </span><span class="mf">0.5</span><span class="p" data-group-id="4997330598-5">)</span><span class="p">,</span><span class="w">
    </span><span class="ss">calculations</span><span class="p">:</span><span class="w"> </span><span class="p" data-group-id="4997330598-7">%{</span><span class="w">
      </span><span class="ss">match_score</span><span class="p">:</span><span class="w"> </span><span class="n">calc</span><span class="p" data-group-id="4997330598-8">(</span><span class="n">trigram_similarity</span><span class="p" data-group-id="4997330598-9">(</span><span class="n">user_name</span><span class="p">,</span><span class="w"> </span><span class="o">^</span><span class="n">query</span><span class="p" data-group-id="4997330598-9">)</span><span class="p">,</span><span class="w"> </span><span class="ss">type</span><span class="p">:</span><span class="w"> </span><span class="ss">:float</span><span class="p" data-group-id="4997330598-8">)</span><span class="w">
    </span><span class="p" data-group-id="4997330598-7">}</span><span class="p">,</span><span class="w">
    </span><span class="ss">sort</span><span class="p">:</span><span class="w"> </span><span class="p" data-group-id="4997330598-10">[</span><span class="w">
      </span><span class="p" data-group-id="4997330598-11">{</span><span class="n">calc</span><span class="p" data-group-id="4997330598-12">(</span><span class="n">trigram_similarity</span><span class="p" data-group-id="4997330598-13">(</span><span class="n">user_name</span><span class="p">,</span><span class="w"> </span><span class="o">^</span><span class="n">query</span><span class="p" data-group-id="4997330598-13">)</span><span class="p">,</span><span class="w"> </span><span class="ss">type</span><span class="p">:</span><span class="w"> </span><span class="ss">:float</span><span class="p" data-group-id="4997330598-12">)</span><span class="p">,</span><span class="w"> </span><span class="ss">:desc</span><span class="p" data-group-id="4997330598-11">}</span><span class="w">
    </span><span class="p" data-group-id="4997330598-10">]</span><span class="p">,</span><span class="w">
    </span><span class="ss">limit</span><span class="p">:</span><span class="w"> </span><span class="mi">10</span><span class="w">
  </span><span class="p" data-group-id="4997330598-4">)</span><span class="p">,</span><span class="w">
  </span><span class="nc">Ash.Query.Combination</span><span class="o">.</span><span class="n">union</span><span class="p" data-group-id="4997330598-14">(</span><span class="w">
    </span><span class="ss">filter</span><span class="p">:</span><span class="w"> </span><span class="n">expr</span><span class="p" data-group-id="4997330598-15">(</span><span class="n">trigram_similarity</span><span class="p" data-group-id="4997330598-16">(</span><span class="n">email</span><span class="p">,</span><span class="w"> </span><span class="o">^</span><span class="n">query</span><span class="p" data-group-id="4997330598-16">)</span><span class="w"> </span><span class="o">&gt;=</span><span class="w"> </span><span class="mf">0.5</span><span class="p" data-group-id="4997330598-15">)</span><span class="p">,</span><span class="w">
    </span><span class="ss">calculations</span><span class="p">:</span><span class="w"> </span><span class="p" data-group-id="4997330598-17">%{</span><span class="w">
      </span><span class="ss">match_score</span><span class="p">:</span><span class="w"> </span><span class="n">calc</span><span class="p" data-group-id="4997330598-18">(</span><span class="n">trigram_similarity</span><span class="p" data-group-id="4997330598-19">(</span><span class="n">email</span><span class="p">,</span><span class="w"> </span><span class="o">^</span><span class="n">query</span><span class="p" data-group-id="4997330598-19">)</span><span class="p">,</span><span class="w"> </span><span class="ss">type</span><span class="p">:</span><span class="w"> </span><span class="ss">:float</span><span class="p" data-group-id="4997330598-18">)</span><span class="w">
    </span><span class="p" data-group-id="4997330598-17">}</span><span class="p">,</span><span class="w">
    </span><span class="ss">sort</span><span class="p">:</span><span class="w"> </span><span class="p" data-group-id="4997330598-20">[</span><span class="w">
      </span><span class="p" data-group-id="4997330598-21">{</span><span class="n">calc</span><span class="p" data-group-id="4997330598-22">(</span><span class="n">trigram_similarity</span><span class="p" data-group-id="4997330598-23">(</span><span class="n">email</span><span class="p">,</span><span class="w"> </span><span class="o">^</span><span class="n">query</span><span class="p" data-group-id="4997330598-23">)</span><span class="p">,</span><span class="w"> </span><span class="ss">type</span><span class="p">:</span><span class="w"> </span><span class="ss">:float</span><span class="p" data-group-id="4997330598-22">)</span><span class="p">,</span><span class="w"> </span><span class="ss">:desc</span><span class="p" data-group-id="4997330598-21">}</span><span class="w">
    </span><span class="p" data-group-id="4997330598-20">]</span><span class="p">,</span><span class="w">
    </span><span class="ss">limit</span><span class="p">:</span><span class="w"> </span><span class="mi">10</span><span class="w">
  </span><span class="p" data-group-id="4997330598-14">)</span><span class="w">
</span><span class="p" data-group-id="4997330598-3">]</span><span class="p" data-group-id="4997330598-2">)</span><span class="w">
</span><span class="o">|&gt;</span><span class="w"> </span><span class="nc">Ash</span><span class="o">.</span><span class="n">read!</span><span class="p" data-group-id="4997330598-24">(</span><span class="p" data-group-id="4997330598-24">)</span></code></pre><p>When you add calculations to a combination query, they behave differently depending on the name of the calculation. If the name matches the name of an attribute, calculation or aggregate on the resource, then the value is placed in that key. Otherwise, it will be placed into the <code class="inline">calculations</code> key.</p><p>This example searches for users where either their name or email matches &quot;fred&quot; with a similarity score of at least 0.5, and returns the top 10 matches of each type sorted by their match score.</p><h2 id="accessing-combination-values">Accessing Combination Values</h2><p>To access values from combination queries in your main query, use the <code class="inline">combinations/1</code> function in your expressions:</p><pre><code class="makeup elixir" translate="no"><span class="nc">User</span><span class="w">
</span><span class="o">|&gt;</span><span class="w"> </span><span class="nc">Ash.Query</span><span class="o">.</span><span class="n">combination_of</span><span class="p" data-group-id="8460634699-1">(</span><span class="p" data-group-id="8460634699-2">[</span><span class="w">
  </span><span class="nc">Ash.Query.Combination</span><span class="o">.</span><span class="n">base</span><span class="p" data-group-id="8460634699-3">(</span><span class="w">
    </span><span class="ss">filter</span><span class="p">:</span><span class="w"> </span><span class="n">expr</span><span class="p" data-group-id="8460634699-4">(</span><span class="n">organization</span><span class="o">.</span><span class="n">name</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s">&quot;bar&quot;</span><span class="p" data-group-id="8460634699-4">)</span><span class="p">,</span><span class="w">
    </span><span class="ss">calculations</span><span class="p">:</span><span class="w"> </span><span class="p" data-group-id="8460634699-5">%{</span><span class="w">
      </span><span class="ss">domain</span><span class="p">:</span><span class="w"> </span><span class="n">calc</span><span class="p" data-group-id="8460634699-6">(</span><span class="s">&quot;bar&quot;</span><span class="p">,</span><span class="w"> </span><span class="ss">type</span><span class="p">:</span><span class="w"> </span><span class="ss">:string</span><span class="p" data-group-id="8460634699-6">)</span><span class="p">,</span><span class="w">
      </span><span class="ss">full_name</span><span class="p">:</span><span class="w"> </span><span class="n">calc</span><span class="p" data-group-id="8460634699-7">(</span><span class="n">name</span><span class="w"> </span><span class="o">&lt;&gt;</span><span class="w"> </span><span class="s">&quot;@bar&quot;</span><span class="p">,</span><span class="w"> </span><span class="ss">type</span><span class="p">:</span><span class="w"> </span><span class="ss">:string</span><span class="p" data-group-id="8460634699-7">)</span><span class="w">
    </span><span class="p" data-group-id="8460634699-5">}</span><span class="w">
  </span><span class="p" data-group-id="8460634699-3">)</span><span class="p">,</span><span class="w">
  </span><span class="nc">Ash.Query.Combination</span><span class="o">.</span><span class="n">union_all</span><span class="p" data-group-id="8460634699-8">(</span><span class="w">
    </span><span class="ss">filter</span><span class="p">:</span><span class="w"> </span><span class="n">expr</span><span class="p" data-group-id="8460634699-9">(</span><span class="n">organization</span><span class="o">.</span><span class="n">name</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s">&quot;baz&quot;</span><span class="p" data-group-id="8460634699-9">)</span><span class="p">,</span><span class="w">
    </span><span class="ss">calculations</span><span class="p">:</span><span class="w"> </span><span class="p" data-group-id="8460634699-10">%{</span><span class="w">
      </span><span class="ss">domain</span><span class="p">:</span><span class="w"> </span><span class="n">calc</span><span class="p" data-group-id="8460634699-11">(</span><span class="s">&quot;baz&quot;</span><span class="p">,</span><span class="w"> </span><span class="ss">type</span><span class="p">:</span><span class="w"> </span><span class="ss">:string</span><span class="p" data-group-id="8460634699-11">)</span><span class="p">,</span><span class="w">
      </span><span class="ss">full_name</span><span class="p">:</span><span class="w"> </span><span class="n">calc</span><span class="p" data-group-id="8460634699-12">(</span><span class="n">name</span><span class="w"> </span><span class="o">&lt;&gt;</span><span class="w"> </span><span class="s">&quot;@baz&quot;</span><span class="p">,</span><span class="w"> </span><span class="ss">type</span><span class="p">:</span><span class="w"> </span><span class="ss">:string</span><span class="p" data-group-id="8460634699-12">)</span><span class="w">
    </span><span class="p" data-group-id="8460634699-10">}</span><span class="w">
  </span><span class="p" data-group-id="8460634699-8">)</span><span class="w">
</span><span class="p" data-group-id="8460634699-2">]</span><span class="p" data-group-id="8460634699-1">)</span><span class="w">
</span><span class="o">|&gt;</span><span class="w"> </span><span class="nc">Ash.Query</span><span class="o">.</span><span class="n">calculate</span><span class="p" data-group-id="8460634699-13">(</span><span class="ss">:email_domain</span><span class="p">,</span><span class="w"> </span><span class="ss">:string</span><span class="p">,</span><span class="w"> </span><span class="n">expr</span><span class="p" data-group-id="8460634699-14">(</span><span class="o">^</span><span class="n">combinations</span><span class="p" data-group-id="8460634699-15">(</span><span class="ss">:domain</span><span class="p" data-group-id="8460634699-15">)</span><span class="p" data-group-id="8460634699-14">)</span><span class="p" data-group-id="8460634699-13">)</span><span class="w">
</span><span class="o">|&gt;</span><span class="w"> </span><span class="nc">Ash.Query</span><span class="o">.</span><span class="n">calculate</span><span class="p" data-group-id="8460634699-16">(</span><span class="ss">:display_name</span><span class="p">,</span><span class="w"> </span><span class="ss">:string</span><span class="p">,</span><span class="w"> </span><span class="n">expr</span><span class="p" data-group-id="8460634699-17">(</span><span class="o">^</span><span class="n">combinations</span><span class="p" data-group-id="8460634699-18">(</span><span class="ss">:full_name</span><span class="p" data-group-id="8460634699-18">)</span><span class="p" data-group-id="8460634699-17">)</span><span class="p" data-group-id="8460634699-16">)</span><span class="w">
</span><span class="o">|&gt;</span><span class="w"> </span><span class="nc">Ash</span><span class="o">.</span><span class="n">read!</span><span class="p" data-group-id="8460634699-19">(</span><span class="p" data-group-id="8460634699-19">)</span></code></pre><p>In this example, the <code class="inline">combinations(:domain)</code> and <code class="inline">combinations(:full_name)</code> references allow the outer query to access the calculation values from the inner combinations.</p><h2 id="sorting-and-distinct-operations">Sorting and Distinct Operations</h2><p>You can sort and filter the combined results using the calculations from your combinations:</p><pre><code class="makeup elixir" translate="no"><span class="nc">User</span><span class="w">
</span><span class="o">|&gt;</span><span class="w"> </span><span class="nc">Ash.Query</span><span class="o">.</span><span class="n">combination_of</span><span class="p" data-group-id="6563101624-1">(</span><span class="p" data-group-id="6563101624-2">[</span><span class="w">
  </span><span class="nc">Ash.Query.Combination</span><span class="o">.</span><span class="n">base</span><span class="p" data-group-id="6563101624-3">(</span><span class="ss">calculations</span><span class="p">:</span><span class="w"> </span><span class="p" data-group-id="6563101624-4">%{</span><span class="ss">sort_order</span><span class="p">:</span><span class="w"> </span><span class="n">calc</span><span class="p" data-group-id="6563101624-5">(</span><span class="mi">3</span><span class="p">,</span><span class="w"> </span><span class="ss">type</span><span class="p">:</span><span class="w"> </span><span class="ss">:integer</span><span class="p" data-group-id="6563101624-5">)</span><span class="p" data-group-id="6563101624-4">}</span><span class="p" data-group-id="6563101624-3">)</span><span class="p">,</span><span class="w">
  </span><span class="nc">Ash.Query.Combination</span><span class="o">.</span><span class="n">union_all</span><span class="p" data-group-id="6563101624-6">(</span><span class="w">
    </span><span class="ss">filter</span><span class="p">:</span><span class="w"> </span><span class="n">expr</span><span class="p" data-group-id="6563101624-7">(</span><span class="n">name</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s">&quot;alice&quot;</span><span class="p" data-group-id="6563101624-7">)</span><span class="p">,</span><span class="w">
    </span><span class="ss">calculations</span><span class="p">:</span><span class="w"> </span><span class="p" data-group-id="6563101624-8">%{</span><span class="ss">sort_order</span><span class="p">:</span><span class="w"> </span><span class="n">calc</span><span class="p" data-group-id="6563101624-9">(</span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="ss">type</span><span class="p">:</span><span class="w"> </span><span class="ss">:integer</span><span class="p" data-group-id="6563101624-9">)</span><span class="p" data-group-id="6563101624-8">}</span><span class="w">
  </span><span class="p" data-group-id="6563101624-6">)</span><span class="p">,</span><span class="w">
  </span><span class="nc">Ash.Query.Combination</span><span class="o">.</span><span class="n">union_all</span><span class="p" data-group-id="6563101624-10">(</span><span class="w">
    </span><span class="ss">filter</span><span class="p">:</span><span class="w"> </span><span class="n">expr</span><span class="p" data-group-id="6563101624-11">(</span><span class="n">name</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s">&quot;john&quot;</span><span class="p" data-group-id="6563101624-11">)</span><span class="p">,</span><span class="w">
    </span><span class="ss">calculations</span><span class="p">:</span><span class="w"> </span><span class="p" data-group-id="6563101624-12">%{</span><span class="ss">sort_order</span><span class="p">:</span><span class="w"> </span><span class="n">calc</span><span class="p" data-group-id="6563101624-13">(</span><span class="mi">2</span><span class="p">,</span><span class="w"> </span><span class="ss">type</span><span class="p">:</span><span class="w"> </span><span class="ss">:integer</span><span class="p" data-group-id="6563101624-13">)</span><span class="p" data-group-id="6563101624-12">}</span><span class="w">
  </span><span class="p" data-group-id="6563101624-10">)</span><span class="w">
</span><span class="p" data-group-id="6563101624-2">]</span><span class="p" data-group-id="6563101624-1">)</span><span class="w">
</span><span class="o">|&gt;</span><span class="w"> </span><span class="nc">Ash.Query</span><span class="o">.</span><span class="n">sort</span><span class="p" data-group-id="6563101624-14">(</span><span class="p" data-group-id="6563101624-15">[</span><span class="p" data-group-id="6563101624-16">{</span><span class="n">calc</span><span class="p" data-group-id="6563101624-17">(</span><span class="o">^</span><span class="n">combinations</span><span class="p" data-group-id="6563101624-18">(</span><span class="ss">:sort_order</span><span class="p" data-group-id="6563101624-18">)</span><span class="p" data-group-id="6563101624-17">)</span><span class="p">,</span><span class="w"> </span><span class="ss">:asc</span><span class="p" data-group-id="6563101624-16">}</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="6563101624-19">{</span><span class="ss">:name</span><span class="p">,</span><span class="w"> </span><span class="ss">:asc</span><span class="p" data-group-id="6563101624-19">}</span><span class="p" data-group-id="6563101624-15">]</span><span class="p" data-group-id="6563101624-14">)</span><span class="w">
</span><span class="o">|&gt;</span><span class="w"> </span><span class="nc">Ash.Query</span><span class="o">.</span><span class="n">distinct</span><span class="p" data-group-id="6563101624-20">(</span><span class="ss">:name</span><span class="p" data-group-id="6563101624-20">)</span><span class="w">
</span><span class="o">|&gt;</span><span class="w"> </span><span class="nc">Ash</span><span class="o">.</span><span class="n">read!</span><span class="p" data-group-id="6563101624-21">(</span><span class="p" data-group-id="6563101624-21">)</span></code></pre><p>This will return results in the order: Alice, John, and then all other users, thanks to the custom sort_order calculation.</p><h2 id="important-rules-and-limitations">Important Rules and Limitations</h2><ol><li><p><strong>This is an internal power tool</strong>: No public interfaces like <code class="inline">AshJsonApi</code>/<code class="inline">AshGraphql</code> will be
 updated to allow this sort of query to be built &quot;from the outside&quot;. It is designed to be implemented
 within an action, &quot;under the hood&quot;.</p></li><li><p><strong>Base Combination Required</strong>: Your list of combinations must always start with <a href="Ash.Query.Combination.xhtml#base/1"><code class="inline">Ash.Query.Combination.base/1</code></a>.</p></li><li><p><strong>Field Consistency</strong>: All combinations must produce the same set of fields. This means:</p><ul><li>If one combination has a calculation, all combinations need that calculation</li><li>Select statements should be consistent across combinations</li><li>If a calculation added to a combination has the same name as an attribute, then it will
be used by <code class="inline">combinations(:that_field)</code>, allowing for combinations to &quot;override&quot; attribute
values.</li></ul></li><li><p><strong>Primary Keys</strong>: When adding runtime calculations or loading related data with <a href="Ash.Query.xhtml#load/2"><code class="inline">Ash.Query.load/2</code></a>, all fieldsets must include the primary key of the resource. If this is not the case, the query will fail.</p></li><li><p><strong>Type Specification</strong>: When referencing calculation values with <code class="inline">combinations/1</code>, the calculation must have been added with a specified type on the <code class="inline">base</code> query at a minimum:</p><pre><code class="makeup elixir" translate="no"><span class="c1"># Correct - type is specified</span><span class="w">
</span><span class="n">calc</span><span class="p" data-group-id="2783827771-1">(</span><span class="n">expression</span><span class="p">,</span><span class="w"> </span><span class="ss">type</span><span class="p">:</span><span class="w"> </span><span class="ss">:string</span><span class="p" data-group-id="2783827771-1">)</span><span class="w">

</span><span class="c1"># Incorrect - will raise an error when referenced</span><span class="w">
</span><span class="n">calc</span><span class="p" data-group-id="2783827771-2">(</span><span class="n">expression</span><span class="p" data-group-id="2783827771-2">)</span></code></pre></li></ol><h2 id="data-layer-support">Data Layer Support</h2><p>Combination queries depend on data layer support. The implementation in this release includes support for ETS data layer, with implementation for SQL and Postgres to be added in future releases.</p><h2 id="performance-considerations">Performance Considerations</h2><p>Combination queries can be more efficient than multiple separate queries, especially when:</p><ul><li>You need to apply complex ordering or pagination to combined datasets</li><li>You want to deduplicate results across multiple selection criteria</li><li>You need to perform operations like intersection or exclusion between sets</li></ul><p>However, be mindful that complex combinations can generate equally complex SQL queries, so monitor performance in production scenarios.</p><h2 id="practical-examples">Practical Examples</h2><h3 id="example-1-search-across-multiple-fields">Example 1: Search across multiple fields</h3><pre><code class="makeup elixir" translate="no"><span class="nc">Post</span><span class="w">
</span><span class="o">|&gt;</span><span class="w"> </span><span class="nc">Ash.Query</span><span class="o">.</span><span class="n">combination_of</span><span class="p" data-group-id="2990166235-1">(</span><span class="p" data-group-id="2990166235-2">[</span><span class="w">
  </span><span class="nc">Ash.Query.Combination</span><span class="o">.</span><span class="n">base</span><span class="p" data-group-id="2990166235-3">(</span><span class="w">
    </span><span class="ss">filter</span><span class="p">:</span><span class="w"> </span><span class="n">expr</span><span class="p" data-group-id="2990166235-4">(</span><span class="n">ilike</span><span class="p" data-group-id="2990166235-5">(</span><span class="n">title</span><span class="p">,</span><span class="w"> </span><span class="o">^</span><span class="p" data-group-id="2990166235-6">(</span><span class="s">&quot;%&quot;</span><span class="w"> </span><span class="o">&lt;&gt;</span><span class="w"> </span><span class="n">search_term</span><span class="w"> </span><span class="o">&lt;&gt;</span><span class="w"> </span><span class="s">&quot;%&quot;</span><span class="p" data-group-id="2990166235-6">)</span><span class="p" data-group-id="2990166235-5">)</span><span class="p" data-group-id="2990166235-4">)</span><span class="p">,</span><span class="w">
    </span><span class="ss">calculations</span><span class="p">:</span><span class="w"> </span><span class="p" data-group-id="2990166235-7">%{</span><span class="ss">match_type</span><span class="p">:</span><span class="w"> </span><span class="n">calc</span><span class="p" data-group-id="2990166235-8">(</span><span class="s">&quot;title&quot;</span><span class="p">,</span><span class="w"> </span><span class="ss">type</span><span class="p">:</span><span class="w"> </span><span class="ss">:string</span><span class="p" data-group-id="2990166235-8">)</span><span class="p" data-group-id="2990166235-7">}</span><span class="p">,</span><span class="w">
    </span><span class="ss">sort</span><span class="p">:</span><span class="w"> </span><span class="p" data-group-id="2990166235-9">[</span><span class="ss">published_at</span><span class="p">:</span><span class="w"> </span><span class="ss">:desc</span><span class="p" data-group-id="2990166235-9">]</span><span class="p">,</span><span class="w">
    </span><span class="ss">limit</span><span class="p">:</span><span class="w"> </span><span class="mi">10</span><span class="w">
  </span><span class="p" data-group-id="2990166235-3">)</span><span class="p">,</span><span class="w">
  </span><span class="nc">Ash.Query.Combination</span><span class="o">.</span><span class="n">union</span><span class="p" data-group-id="2990166235-10">(</span><span class="w">
    </span><span class="ss">filter</span><span class="p">:</span><span class="w"> </span><span class="n">expr</span><span class="p" data-group-id="2990166235-11">(</span><span class="n">ilike</span><span class="p" data-group-id="2990166235-12">(</span><span class="n">body</span><span class="p">,</span><span class="w"> </span><span class="o">^</span><span class="p" data-group-id="2990166235-13">(</span><span class="s">&quot;%&quot;</span><span class="w"> </span><span class="o">&lt;&gt;</span><span class="w"> </span><span class="n">search_term</span><span class="w"> </span><span class="o">&lt;&gt;</span><span class="w"> </span><span class="s">&quot;%&quot;</span><span class="p" data-group-id="2990166235-13">)</span><span class="p" data-group-id="2990166235-12">)</span><span class="p" data-group-id="2990166235-11">)</span><span class="p">,</span><span class="w">
    </span><span class="ss">calculations</span><span class="p">:</span><span class="w"> </span><span class="p" data-group-id="2990166235-14">%{</span><span class="ss">match_type</span><span class="p">:</span><span class="w"> </span><span class="n">calc</span><span class="p" data-group-id="2990166235-15">(</span><span class="s">&quot;body&quot;</span><span class="p">,</span><span class="w"> </span><span class="ss">type</span><span class="p">:</span><span class="w"> </span><span class="ss">:string</span><span class="p" data-group-id="2990166235-15">)</span><span class="p" data-group-id="2990166235-14">}</span><span class="p">,</span><span class="w">
    </span><span class="ss">sort</span><span class="p">:</span><span class="w"> </span><span class="p" data-group-id="2990166235-16">[</span><span class="ss">published_at</span><span class="p">:</span><span class="w"> </span><span class="ss">:desc</span><span class="p" data-group-id="2990166235-16">]</span><span class="p">,</span><span class="w">
    </span><span class="ss">limit</span><span class="p">:</span><span class="w"> </span><span class="mi">10</span><span class="w">
  </span><span class="p" data-group-id="2990166235-10">)</span><span class="w">
</span><span class="p" data-group-id="2990166235-2">]</span><span class="p" data-group-id="2990166235-1">)</span><span class="w">
</span><span class="o">|&gt;</span><span class="w"> </span><span class="nc">Ash.Query</span><span class="o">.</span><span class="n">sort</span><span class="p" data-group-id="2990166235-17">(</span><span class="p" data-group-id="2990166235-18">[</span><span class="ss">published_at</span><span class="p">:</span><span class="w"> </span><span class="ss">:desc</span><span class="p" data-group-id="2990166235-18">]</span><span class="p" data-group-id="2990166235-17">)</span><span class="w">
</span><span class="o">|&gt;</span><span class="w"> </span><span class="nc">Ash.Query</span><span class="o">.</span><span class="n">calculate</span><span class="p" data-group-id="2990166235-19">(</span><span class="ss">:matched_in</span><span class="p">,</span><span class="w"> </span><span class="ss">:string</span><span class="p">,</span><span class="w"> </span><span class="n">expr</span><span class="p" data-group-id="2990166235-20">(</span><span class="o">^</span><span class="n">combinations</span><span class="p" data-group-id="2990166235-21">(</span><span class="ss">:match_type</span><span class="p" data-group-id="2990166235-21">)</span><span class="p" data-group-id="2990166235-20">)</span><span class="p" data-group-id="2990166235-19">)</span><span class="w">
</span><span class="o">|&gt;</span><span class="w"> </span><span class="nc">Ash</span><span class="o">.</span><span class="n">read!</span><span class="p" data-group-id="2990166235-22">(</span><span class="p" data-group-id="2990166235-22">)</span></code></pre><h3 id="example-2-complex-filtering-with-intersection">Example 2: Complex filtering with intersection</h3><pre><code class="makeup elixir" translate="no"><span class="nc">User</span><span class="w">
</span><span class="o">|&gt;</span><span class="w"> </span><span class="nc">Ash.Query</span><span class="o">.</span><span class="n">combination_of</span><span class="p" data-group-id="6985868556-1">(</span><span class="p" data-group-id="6985868556-2">[</span><span class="w">
  </span><span class="nc">Ash.Query.Combination</span><span class="o">.</span><span class="n">base</span><span class="p" data-group-id="6985868556-3">(</span><span class="ss">filter</span><span class="p">:</span><span class="w"> </span><span class="n">expr</span><span class="p" data-group-id="6985868556-4">(</span><span class="n">role</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s">&quot;admin&quot;</span><span class="p" data-group-id="6985868556-4">)</span><span class="p" data-group-id="6985868556-3">)</span><span class="p">,</span><span class="w">
  </span><span class="nc">Ash.Query.Combination</span><span class="o">.</span><span class="n">intersect</span><span class="p" data-group-id="6985868556-5">(</span><span class="ss">filter</span><span class="p">:</span><span class="w"> </span><span class="n">expr</span><span class="p" data-group-id="6985868556-6">(</span><span class="n">last_login</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="o">^</span><span class="n">one_month_ago</span><span class="p" data-group-id="6985868556-6">)</span><span class="p" data-group-id="6985868556-5">)</span><span class="w">
</span><span class="p" data-group-id="6985868556-2">]</span><span class="p" data-group-id="6985868556-1">)</span><span class="w">
</span><span class="o">|&gt;</span><span class="w"> </span><span class="nc">Ash</span><span class="o">.</span><span class="n">read!</span><span class="p" data-group-id="6985868556-7">(</span><span class="p" data-group-id="6985868556-7">)</span></code></pre><p>This returns all admin users who have logged in within the last month.</p><h2 id="summary">Summary</h2><p>Combination queries provide a powerful tool for creating complex data retrieval patterns in Ash. By combining multiple queries with different filters, sorts, and calculations, you can build sophisticated interfaces that would otherwise require multiple database queries and application-level merging of results.</p><p>This feature is particularly valuable for search interfaces, reporting tools, and anywhere you need to blend data from different filter conditions in a single, cohesive result set.</p>

  </body>
</html>
