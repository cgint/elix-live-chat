<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"
      xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>Uploads - Phoenix LiveView v1.1.2</title>
    <meta name="generator" content="ExDoc v0.38.2" />
    <link type="text/css" rel="stylesheet" href="dist/epub-elixir-FNUUKFP7.css" />
    <script src="dist/epub-4WIP524F.js"></script>

  </head>
  <body class="content-inner">

    <h1 id="content">Uploads</h1>
<p>LiveView supports interactive file uploads with progress for
both direct to server uploads as well as direct-to-cloud
<a href="external-uploads.html">external uploads</a> on the client.</p><h2 id="built-in-features">Built-in Features</h2><ul><li><p>Accept specification - Define accepted file types, max
number of entries, max file size, etc. When the client
selects file(s), the file metadata is automatically
validated against the specification. See
<a href="Phoenix.LiveView.xhtml#allow_upload/3"><code class="inline">Phoenix.LiveView.allow_upload/3</code></a>.</p></li><li><p>Reactive entries - Uploads are populated in an
<code class="inline">@uploads</code> assign in the socket. Entries automatically
respond to progress, errors, cancellation, etc.</p></li><li><p>Drag and drop - Use the <code class="inline">phx-drop-target</code> attribute to
enable. See <a href="Phoenix.Component.xhtml#live_file_input/1"><code class="inline">Phoenix.Component.live_file_input/1</code></a>.</p></li></ul><h2 id="allow-uploads">Allow uploads</h2><p>You enable an upload, typically on mount, via <a href="Phoenix.LiveView.xhtml#allow_upload/3" title=""><code class="inline">allow_upload/3</code></a>.</p><p>For this example, we will also keep a list of uploaded files in
a new assign named <code class="inline">uploaded_files</code>, but you could name it
something else if you wanted.</p><pre><code class="makeup elixir" translate="no"><span class="na">@impl</span><span class="w"> </span><span class="nc">Phoenix.LiveView</span><span class="w">
</span><span class="kd">def</span><span class="w"> </span><span class="nf">mount</span><span class="p" data-group-id="1520907294-1">(</span><span class="c">_params</span><span class="p">,</span><span class="w"> </span><span class="c">_session</span><span class="p">,</span><span class="w"> </span><span class="n">socket</span><span class="p" data-group-id="1520907294-1">)</span><span class="w"> </span><span class="k" data-group-id="1520907294-2">do</span><span class="w">
  </span><span class="p" data-group-id="1520907294-3">{</span><span class="ss">:ok</span><span class="p">,</span><span class="w">
   </span><span class="n">socket</span><span class="w">
   </span><span class="o">|&gt;</span><span class="w"> </span><span class="n">assign</span><span class="p" data-group-id="1520907294-4">(</span><span class="ss">:uploaded_files</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="1520907294-5">[</span><span class="p" data-group-id="1520907294-5">]</span><span class="p" data-group-id="1520907294-4">)</span><span class="w">
   </span><span class="o">|&gt;</span><span class="w"> </span><span class="n">allow_upload</span><span class="p" data-group-id="1520907294-6">(</span><span class="ss">:avatar</span><span class="p">,</span><span class="w"> </span><span class="ss">accept</span><span class="p">:</span><span class="w"> </span><span class="sx">~w(.jpg .jpeg)</span><span class="p">,</span><span class="w"> </span><span class="ss">max_entries</span><span class="p">:</span><span class="w"> </span><span class="mi">2</span><span class="p" data-group-id="1520907294-6">)</span><span class="p" data-group-id="1520907294-3">}</span><span class="w">
</span><span class="k" data-group-id="1520907294-2">end</span></code></pre><p>That's it for now! We will come back to the LiveView to
implement some form- and upload-related callbacks later, but
most of the functionality around uploads takes place in the
template.</p><h2 id="render-reactive-elements">Render reactive elements</h2><p>Use the <a href="Phoenix.Component.xhtml#live_file_input/1"><code class="inline">Phoenix.Component.live_file_input/1</code></a> component
to render a file input for the upload:</p><pre><code class="makeup heex" translate="no"><span class="c">&lt;%!-- lib/my_app_web/live/upload_live.html.heex --%&gt;</span><span class="w">
</span><span class="w">
</span><span class="p">&lt;</span><span class="nt">form</span><span class="w"> </span><span class="na">id</span><span class="p">=</span><span class="p">&quot;</span><span class="s2">u</span><span class="s2">p</span><span class="s2">l</span><span class="s2">o</span><span class="s2">a</span><span class="s2">d</span><span class="s2">-</span><span class="s2">f</span><span class="s2">o</span><span class="s2">r</span><span class="s2">m</span><span class="p">&quot;</span><span class="w"> </span><span class="na">phx-submit</span><span class="p">=</span><span class="p">&quot;</span><span class="s2">save</span><span class="p">&quot;</span><span class="w"> </span><span class="na">phx-change</span><span class="p">=</span><span class="p">&quot;</span><span class="s2">validate</span><span class="p">&quot;</span><span class="p">&gt;</span><span class="w">
</span><span class="w">  </span><span class="p">&lt;</span><span class="nf">.live_file_input</span><span class="w"> </span><span class="na">upload</span><span class="p">=</span><span class="p" data-group-id="0523751173-1">{</span><span class="na">@uploads</span><span class="o">.</span><span class="n">avatar</span><span class="p" data-group-id="0523751173-1">}</span><span class="w"> </span><span class="p">/&gt;</span><span class="w">
</span><span class="w">  </span><span class="p">&lt;</span><span class="nt">button</span><span class="w"> </span><span class="na">type</span><span class="p">=</span><span class="p">&quot;</span><span class="s2">submit</span><span class="p">&quot;</span><span class="p">&gt;</span><span class="n">Upload</span><span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span><span class="w">
</span><span class="p">&lt;/</span><span class="nt">form</span><span class="p">&gt;</span></code></pre><blockquote><p><strong>Important:</strong> You must bind <code class="inline">phx-submit</code> and <code class="inline">phx-change</code> on the form.</p></blockquote><p>Note that while <a href="Phoenix.Component.xhtml#live_file_input/1" title=""><code class="inline">live_file_input/1</code></a>
allows you to set additional attributes on the file input,
many attributes such as <code class="inline">id</code>, <code class="inline">accept</code>, and <code class="inline">multiple</code> will
be set automatically based on the <a href="Phoenix.LiveView.xhtml#allow_upload/3" title=""><code class="inline">allow_upload/3</code></a> spec.</p><p>Reactive updates to the template will occur as the end-user
interacts with the file input.</p><h3 id="upload-entries">Upload entries</h3><p>Uploads are populated in an <code class="inline">@uploads</code> assign in the socket.
Each allowed upload contains a <em>list</em> of entries,
irrespective of the <code class="inline">:max_entries</code> value in the
<a href="Phoenix.LiveView.xhtml#allow_upload/3" title=""><code class="inline">allow_upload/3</code></a> spec. These entry structs contain all the
information about an upload, including progress, client file
info, errors, etc.</p><p>Let's look at an annotated example:</p><pre><code class="makeup heex" translate="no"><span class="c">&lt;%!-- lib/my_app_web/live/upload_live.html.heex --%&gt;</span><span class="w">
</span><span class="w">
</span><span class="c">&lt;%!-- use phx-drop-target with the upload ref to enable file drag and drop --%&gt;</span><span class="w">
</span><span class="p">&lt;</span><span class="nt">section</span><span class="w"> </span><span class="na">phx-drop-target</span><span class="p">=</span><span class="p" data-group-id="2547191339-1">{</span><span class="na">@uploads</span><span class="o">.</span><span class="n">avatar</span><span class="o">.</span><span class="n">ref</span><span class="p" data-group-id="2547191339-1">}</span><span class="p">&gt;</span><span class="w">
</span><span class="w">  </span><span class="c">&lt;%!-- render each avatar entry --%&gt;</span><span class="w">
</span><span class="w">  </span><span class="p">&lt;</span><span class="nt">article</span><span class="w"> </span><span class="na">:for</span><span class="p">=</span><span class="p" data-group-id="2547191339-2">{</span><span class="n">entry</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="na">@uploads</span><span class="o">.</span><span class="n">avatar</span><span class="o">.</span><span class="n">entries</span><span class="p" data-group-id="2547191339-2">}</span><span class="w"> </span><span class="na">class</span><span class="p">=</span><span class="p">&quot;</span><span class="s2">u</span><span class="s2">p</span><span class="s2">l</span><span class="s2">o</span><span class="s2">a</span><span class="s2">d</span><span class="s2">-</span><span class="s2">e</span><span class="s2">n</span><span class="s2">t</span><span class="s2">r</span><span class="s2">y</span><span class="p">&quot;</span><span class="p">&gt;</span><span class="w">
</span><span class="w">    </span><span class="p">&lt;</span><span class="nt">figure</span><span class="p">&gt;</span><span class="w">
</span><span class="w">      </span><span class="p">&lt;</span><span class="nf">.live_img_preview</span><span class="w"> </span><span class="na">entry</span><span class="p">=</span><span class="p" data-group-id="2547191339-3">{</span><span class="n">entry</span><span class="p" data-group-id="2547191339-3">}</span><span class="w"> </span><span class="p">/&gt;</span><span class="w">
</span><span class="w">      </span><span class="p">&lt;</span><span class="nt">figcaption</span><span class="p">&gt;</span><span class="p" data-group-id="2547191339-4">{</span><span class="n">entry</span><span class="o">.</span><span class="n">client_name</span><span class="p" data-group-id="2547191339-4">}</span><span class="p">&lt;/</span><span class="nt">figcaption</span><span class="p">&gt;</span><span class="w">
</span><span class="w">    </span><span class="p">&lt;/</span><span class="nt">figure</span><span class="p">&gt;</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="c">&lt;%!-- entry.progress will update automatically for in-flight entries --%&gt;</span><span class="w">
</span><span class="w">    </span><span class="p">&lt;</span><span class="nt">progress</span><span class="w"> </span><span class="na">value</span><span class="p">=</span><span class="p" data-group-id="2547191339-5">{</span><span class="n">entry</span><span class="o">.</span><span class="n">progress</span><span class="p" data-group-id="2547191339-5">}</span><span class="w"> </span><span class="na">max</span><span class="p">=</span><span class="p">&quot;</span><span class="s2">100</span><span class="p">&quot;</span><span class="p">&gt;</span><span class="n"> </span><span class="p" data-group-id="2547191339-6">{</span><span class="n">entry</span><span class="o">.</span><span class="n">progress</span><span class="p" data-group-id="2547191339-6">}</span><span class="n">% </span><span class="p">&lt;/</span><span class="nt">progress</span><span class="p">&gt;</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="c">&lt;%!-- a regular click event whose handler will invoke Phoenix.LiveView.cancel_upload/3 --%&gt;</span><span class="w">
</span><span class="w">    </span><span class="p">&lt;</span><span class="nt">button</span><span class="w"> </span><span class="na">type</span><span class="p">=</span><span class="p">&quot;</span><span class="s2">button</span><span class="p">&quot;</span><span class="w"> </span><span class="na">phx-click</span><span class="p">=</span><span class="p">&quot;</span><span class="s2">cancel-upload</span><span class="p">&quot;</span><span class="w"> </span><span class="na">phx-value-ref</span><span class="p">=</span><span class="p" data-group-id="2547191339-7">{</span><span class="n">entry</span><span class="o">.</span><span class="n">ref</span><span class="p" data-group-id="2547191339-7">}</span><span class="w"> </span><span class="na">aria-label</span><span class="p">=</span><span class="p">&quot;</span><span class="s2">cancel</span><span class="p">&quot;</span><span class="p">&gt;</span><span class="no">&amp;</span><span class="no">times</span><span class="no">;</span><span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="c">&lt;%!-- Phoenix.Component.upload_errors/2 returns a list of error atoms --%&gt;</span><span class="w">
</span><span class="w">    </span><span class="p">&lt;</span><span class="nt">p</span><span class="w"> </span><span class="na">:for</span><span class="p">=</span><span class="p" data-group-id="2547191339-8">{</span><span class="n">err</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">upload_errors</span><span class="p" data-group-id="2547191339-ex-1">(</span><span class="na">@uploads</span><span class="o">.</span><span class="n">avatar</span><span class="p">,</span><span class="w"> </span><span class="n">entry</span><span class="p" data-group-id="2547191339-ex-1">)</span><span class="p" data-group-id="2547191339-8">}</span><span class="w"> </span><span class="na">class</span><span class="p">=</span><span class="p">&quot;</span><span class="s2">a</span><span class="s2">l</span><span class="s2">e</span><span class="s2">r</span><span class="s2">t </span><span class="s2">a</span><span class="s2">l</span><span class="s2">e</span><span class="s2">r</span><span class="s2">t</span><span class="s2">-</span><span class="s2">d</span><span class="s2">a</span><span class="s2">n</span><span class="s2">g</span><span class="s2">e</span><span class="s2">r</span><span class="p">&quot;</span><span class="p">&gt;</span><span class="p" data-group-id="2547191339-9">{</span><span class="n">error_to_string</span><span class="p" data-group-id="2547191339-ex-2">(</span><span class="n">err</span><span class="p" data-group-id="2547191339-ex-2">)</span><span class="p" data-group-id="2547191339-9">}</span><span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span><span class="w">
</span><span class="w">  </span><span class="p">&lt;/</span><span class="nt">article</span><span class="p">&gt;</span><span class="w">
</span><span class="w">
</span><span class="w">  </span><span class="c">&lt;%!-- Phoenix.Component.upload_errors/1 returns a list of error atoms --%&gt;</span><span class="w">
</span><span class="w">  </span><span class="p">&lt;</span><span class="nt">p</span><span class="w"> </span><span class="na">:for</span><span class="p">=</span><span class="p" data-group-id="2547191339-10">{</span><span class="n">err</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">upload_errors</span><span class="p" data-group-id="2547191339-ex-3">(</span><span class="na">@uploads</span><span class="o">.</span><span class="n">avatar</span><span class="p" data-group-id="2547191339-ex-3">)</span><span class="p" data-group-id="2547191339-10">}</span><span class="w"> </span><span class="na">class</span><span class="p">=</span><span class="p">&quot;</span><span class="s2">a</span><span class="s2">l</span><span class="s2">e</span><span class="s2">r</span><span class="s2">t </span><span class="s2">a</span><span class="s2">l</span><span class="s2">e</span><span class="s2">r</span><span class="s2">t</span><span class="s2">-</span><span class="s2">d</span><span class="s2">a</span><span class="s2">n</span><span class="s2">g</span><span class="s2">e</span><span class="s2">r</span><span class="p">&quot;</span><span class="p">&gt;</span><span class="w">
</span><span class="w">    </span><span class="p" data-group-id="2547191339-11">{</span><span class="n">error_to_string</span><span class="p" data-group-id="2547191339-ex-4">(</span><span class="n">err</span><span class="p" data-group-id="2547191339-ex-4">)</span><span class="p" data-group-id="2547191339-11">}</span><span class="w">
</span><span class="w">  </span><span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span><span class="w">
</span><span class="p">&lt;/</span><span class="nt">section</span><span class="p">&gt;</span></code></pre><p>The <code class="inline">section</code> element in the example acts as the
<code class="inline">phx-drop-target</code> for the <code class="inline">:avatar</code> upload. Users can interact
with the file input or they can drop files over the element
to add new entries.</p><p>Upload entries are created when a file is added to the form
input and each will exist until it has been consumed,
following a successfully completed upload.</p><h3 id="entry-validation">Entry validation</h3><p>Validation occurs automatically based on any conditions
that were specified in <a href="Phoenix.LiveView.xhtml#allow_upload/3" title=""><code class="inline">allow_upload/3</code></a> however, as
mentioned previously you are required to bind <code class="inline">phx-change</code>
on the form in order for the validation to be performed.
Therefore you must implement at least a minimal callback:</p><pre><code class="makeup elixir" translate="no"><span class="na">@impl</span><span class="w"> </span><span class="nc">Phoenix.LiveView</span><span class="w">
</span><span class="kd">def</span><span class="w"> </span><span class="nf">handle_event</span><span class="p" data-group-id="1835402742-1">(</span><span class="s">&quot;validate&quot;</span><span class="p">,</span><span class="w"> </span><span class="c">_params</span><span class="p">,</span><span class="w"> </span><span class="n">socket</span><span class="p" data-group-id="1835402742-1">)</span><span class="w"> </span><span class="k" data-group-id="1835402742-2">do</span><span class="w">
  </span><span class="p" data-group-id="1835402742-3">{</span><span class="ss">:noreply</span><span class="p">,</span><span class="w"> </span><span class="n">socket</span><span class="p" data-group-id="1835402742-3">}</span><span class="w">
</span><span class="k" data-group-id="1835402742-2">end</span></code></pre><p>Entries for files that do not match the <a href="Phoenix.LiveView.xhtml#allow_upload/3" title=""><code class="inline">allow_upload/3</code></a>
spec will contain errors. Use
<a href="Phoenix.Component.xhtml#upload_errors/2"><code class="inline">Phoenix.Component.upload_errors/2</code></a> and your own
helper function to render a friendly error message:</p><pre><code class="makeup elixir" translate="no"><span class="kd">defp</span><span class="w"> </span><span class="nf">error_to_string</span><span class="p" data-group-id="8490879999-1">(</span><span class="ss">:too_large</span><span class="p" data-group-id="8490879999-1">)</span><span class="p">,</span><span class="w"> </span><span class="ss">do</span><span class="p">:</span><span class="w"> </span><span class="s">&quot;Too large&quot;</span><span class="w">
</span><span class="kd">defp</span><span class="w"> </span><span class="nf">error_to_string</span><span class="p" data-group-id="8490879999-2">(</span><span class="ss">:not_accepted</span><span class="p" data-group-id="8490879999-2">)</span><span class="p">,</span><span class="w"> </span><span class="ss">do</span><span class="p">:</span><span class="w"> </span><span class="s">&quot;You have selected an unacceptable file type&quot;</span></code></pre><p>For error messages that affect all entries, use
<a href="Phoenix.Component.xhtml#upload_errors/1"><code class="inline">Phoenix.Component.upload_errors/1</code></a>, and your own
helper function to render a friendly error message:</p><pre><code class="makeup elixir" translate="no"><span class="kd">defp</span><span class="w"> </span><span class="nf">error_to_string</span><span class="p" data-group-id="0454472405-1">(</span><span class="ss">:too_many_files</span><span class="p" data-group-id="0454472405-1">)</span><span class="p">,</span><span class="w"> </span><span class="ss">do</span><span class="p">:</span><span class="w"> </span><span class="s">&quot;You have selected too many files&quot;</span></code></pre><h3 id="cancel-an-entry">Cancel an entry</h3><p>Upload entries may also be canceled, either programmatically
or as a result of a user action. For instance, to handle the
click event in the template above, you could do the following:</p><pre><code class="makeup elixir" translate="no"><span class="na">@impl</span><span class="w"> </span><span class="nc">Phoenix.LiveView</span><span class="w">
</span><span class="kd">def</span><span class="w"> </span><span class="nf">handle_event</span><span class="p" data-group-id="8692179205-1">(</span><span class="s">&quot;cancel-upload&quot;</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="8692179205-2">%{</span><span class="s">&quot;ref&quot;</span><span class="w"> </span><span class="p">=&gt;</span><span class="w"> </span><span class="n">ref</span><span class="p" data-group-id="8692179205-2">}</span><span class="p">,</span><span class="w"> </span><span class="n">socket</span><span class="p" data-group-id="8692179205-1">)</span><span class="w"> </span><span class="k" data-group-id="8692179205-3">do</span><span class="w">
  </span><span class="p" data-group-id="8692179205-4">{</span><span class="ss">:noreply</span><span class="p">,</span><span class="w"> </span><span class="n">cancel_upload</span><span class="p" data-group-id="8692179205-5">(</span><span class="n">socket</span><span class="p">,</span><span class="w"> </span><span class="ss">:avatar</span><span class="p">,</span><span class="w"> </span><span class="n">ref</span><span class="p" data-group-id="8692179205-5">)</span><span class="p" data-group-id="8692179205-4">}</span><span class="w">
</span><span class="k" data-group-id="8692179205-3">end</span></code></pre><h2 id="consume-uploaded-entries">Consume uploaded entries</h2><p>When the end-user submits a form containing a <a href="Phoenix.Component.xhtml#live_file_input/1" title=""><code class="inline">live_file_input/1</code></a>,
the JavaScript client first uploads the file(s) before
invoking the callback for the form's <code class="inline">phx-submit</code> event.</p><p>Within the callback for the <code class="inline">phx-submit</code> event, you invoke
the <a href="Phoenix.LiveView.xhtml#consume_uploaded_entries/3"><code class="inline">Phoenix.LiveView.consume_uploaded_entries/3</code></a> function
to process the completed uploads, persisting the relevant
upload data alongside the form data:</p><pre><code class="makeup elixir" translate="no"><span class="na">@impl</span><span class="w"> </span><span class="nc">Phoenix.LiveView</span><span class="w">
</span><span class="kd">def</span><span class="w"> </span><span class="nf">handle_event</span><span class="p" data-group-id="1168466324-1">(</span><span class="s">&quot;save&quot;</span><span class="p">,</span><span class="w"> </span><span class="c">_params</span><span class="p">,</span><span class="w"> </span><span class="n">socket</span><span class="p" data-group-id="1168466324-1">)</span><span class="w"> </span><span class="k" data-group-id="1168466324-2">do</span><span class="w">
  </span><span class="n">uploaded_files</span><span class="w"> </span><span class="o">=</span><span class="w">
    </span><span class="n">consume_uploaded_entries</span><span class="p" data-group-id="1168466324-3">(</span><span class="n">socket</span><span class="p">,</span><span class="w"> </span><span class="ss">:avatar</span><span class="p">,</span><span class="w"> </span><span class="k" data-group-id="1168466324-4">fn</span><span class="w"> </span><span class="p" data-group-id="1168466324-5">%{</span><span class="ss">path</span><span class="p">:</span><span class="w"> </span><span class="n">path</span><span class="p" data-group-id="1168466324-5">}</span><span class="p">,</span><span class="w"> </span><span class="c">_entry</span><span class="w"> </span><span class="o">-&gt;</span><span class="w">
      </span><span class="n">dest</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nc">Path</span><span class="o">.</span><span class="n">join</span><span class="p" data-group-id="1168466324-6">(</span><span class="nc">Application</span><span class="o">.</span><span class="n">app_dir</span><span class="p" data-group-id="1168466324-7">(</span><span class="ss">:my_app</span><span class="p">,</span><span class="w"> </span><span class="s">&quot;priv/static/uploads&quot;</span><span class="p" data-group-id="1168466324-7">)</span><span class="p">,</span><span class="w"> </span><span class="nc">Path</span><span class="o">.</span><span class="n">basename</span><span class="p" data-group-id="1168466324-8">(</span><span class="n">path</span><span class="p" data-group-id="1168466324-8">)</span><span class="p" data-group-id="1168466324-6">)</span><span class="w">
      </span><span class="c1"># You will need to create `priv/static/uploads` for `File.cp!/2` to work.</span><span class="w">
      </span><span class="nc">File</span><span class="o">.</span><span class="n">cp!</span><span class="p" data-group-id="1168466324-9">(</span><span class="n">path</span><span class="p">,</span><span class="w"> </span><span class="n">dest</span><span class="p" data-group-id="1168466324-9">)</span><span class="w">
      </span><span class="p" data-group-id="1168466324-10">{</span><span class="ss">:ok</span><span class="p">,</span><span class="w"> </span><span class="sx">~p&quot;/uploads/</span><span class="si" data-group-id="1168466324-11">#{</span><span class="nc">Path</span><span class="o">.</span><span class="n">basename</span><span class="p" data-group-id="1168466324-12">(</span><span class="n">dest</span><span class="p" data-group-id="1168466324-12">)</span><span class="si" data-group-id="1168466324-11">}</span><span class="sx">&quot;</span><span class="p" data-group-id="1168466324-10">}</span><span class="w">
    </span><span class="k" data-group-id="1168466324-4">end</span><span class="p" data-group-id="1168466324-3">)</span><span class="w">

  </span><span class="p" data-group-id="1168466324-13">{</span><span class="ss">:noreply</span><span class="p">,</span><span class="w"> </span><span class="n">update</span><span class="p" data-group-id="1168466324-14">(</span><span class="n">socket</span><span class="p">,</span><span class="w"> </span><span class="ss">:uploaded_files</span><span class="p">,</span><span class="w"> </span><span class="o">&amp;</span><span class="p" data-group-id="1168466324-15">(</span><span class="ni">&amp;1</span><span class="w"> </span><span class="o">++</span><span class="w"> </span><span class="n">uploaded_files</span><span class="p" data-group-id="1168466324-15">)</span><span class="p" data-group-id="1168466324-14">)</span><span class="p" data-group-id="1168466324-13">}</span><span class="w">
</span><span class="k" data-group-id="1168466324-2">end</span></code></pre><blockquote><p><strong>Note</strong>: While client metadata cannot be trusted, max file size validations
are enforced as each chunk is received when performing direct to server uploads.</p></blockquote><p>This example writes the file directly to disk, under the <code class="inline">priv</code> folder.
In order to access your upload, for example in an <code class="inline">&lt;img /&gt;</code> tag, you need
to add the <code class="inline">uploads</code> directory to <code class="inline">static_paths/0</code>.  In a vanilla Phoenix
project, this is found in <code class="inline">lib/my_app_web.ex</code>.</p><p>Another thing to be aware of is that in development, changes to
<code class="inline">priv/static/uploads</code> will be picked up by <code class="inline">live_reload</code>.  This means that as
soon as your upload succeeds, your app will be reloaded in the browser.  This
can be temporarily disabled by setting <code class="inline">code_reloader: false</code> in <code class="inline">config/dev.exs</code>.</p><p>Besides the above, this approach also has limitations in production. If you are
running multiple instances of your application, the uploaded file will be stored
only in one of the instances. Any request routed to the other machine will
ultimately fail.</p><p>For these reasons, it is best if uploads are stored elsewhere, such as the
database (depending on the size and contents) or a separate storage service.
For more information on implementing client-side, direct-to-cloud uploads,
see the <a href="external-uploads.xhtml">External uploads guide</a> for details.</p><h2 id="appendix-a-uploadlive">Appendix A: UploadLive</h2><p>A complete example of the LiveView from this guide:</p><pre><code class="makeup elixir" translate="no"><span class="c1"># lib/my_app_web/live/upload_live.ex</span><span class="w">
</span><span class="kd">defmodule</span><span class="w"> </span><span class="nc">MyAppWeb.UploadLive</span><span class="w"> </span><span class="k" data-group-id="4118797081-1">do</span><span class="w">
  </span><span class="kn">use</span><span class="w"> </span><span class="nc">MyAppWeb</span><span class="p">,</span><span class="w"> </span><span class="ss">:live_view</span><span class="w">

  </span><span class="na">@impl</span><span class="w"> </span><span class="nc">Phoenix.LiveView</span><span class="w">
  </span><span class="kd">def</span><span class="w"> </span><span class="nf">mount</span><span class="p" data-group-id="4118797081-2">(</span><span class="c">_params</span><span class="p">,</span><span class="w"> </span><span class="c">_session</span><span class="p">,</span><span class="w"> </span><span class="n">socket</span><span class="p" data-group-id="4118797081-2">)</span><span class="w"> </span><span class="k" data-group-id="4118797081-3">do</span><span class="w">
    </span><span class="p" data-group-id="4118797081-4">{</span><span class="ss">:ok</span><span class="p">,</span><span class="w">
    </span><span class="n">socket</span><span class="w">
    </span><span class="o">|&gt;</span><span class="w"> </span><span class="n">assign</span><span class="p" data-group-id="4118797081-5">(</span><span class="ss">:uploaded_files</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="4118797081-6">[</span><span class="p" data-group-id="4118797081-6">]</span><span class="p" data-group-id="4118797081-5">)</span><span class="w">
    </span><span class="o">|&gt;</span><span class="w"> </span><span class="n">allow_upload</span><span class="p" data-group-id="4118797081-7">(</span><span class="ss">:avatar</span><span class="p">,</span><span class="w"> </span><span class="ss">accept</span><span class="p">:</span><span class="w"> </span><span class="sx">~w(.jpg .jpeg)</span><span class="p">,</span><span class="w"> </span><span class="ss">max_entries</span><span class="p">:</span><span class="w"> </span><span class="mi">2</span><span class="p" data-group-id="4118797081-7">)</span><span class="p" data-group-id="4118797081-4">}</span><span class="w">
  </span><span class="k" data-group-id="4118797081-3">end</span><span class="w">

  </span><span class="na">@impl</span><span class="w"> </span><span class="nc">Phoenix.LiveView</span><span class="w">
  </span><span class="kd">def</span><span class="w"> </span><span class="nf">handle_event</span><span class="p" data-group-id="4118797081-8">(</span><span class="s">&quot;validate&quot;</span><span class="p">,</span><span class="w"> </span><span class="c">_params</span><span class="p">,</span><span class="w"> </span><span class="n">socket</span><span class="p" data-group-id="4118797081-8">)</span><span class="w"> </span><span class="k" data-group-id="4118797081-9">do</span><span class="w">
    </span><span class="p" data-group-id="4118797081-10">{</span><span class="ss">:noreply</span><span class="p">,</span><span class="w"> </span><span class="n">socket</span><span class="p" data-group-id="4118797081-10">}</span><span class="w">
  </span><span class="k" data-group-id="4118797081-9">end</span><span class="w">

  </span><span class="na">@impl</span><span class="w"> </span><span class="nc">Phoenix.LiveView</span><span class="w">
  </span><span class="kd">def</span><span class="w"> </span><span class="nf">handle_event</span><span class="p" data-group-id="4118797081-11">(</span><span class="s">&quot;cancel-upload&quot;</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="4118797081-12">%{</span><span class="s">&quot;ref&quot;</span><span class="w"> </span><span class="p">=&gt;</span><span class="w"> </span><span class="n">ref</span><span class="p" data-group-id="4118797081-12">}</span><span class="p">,</span><span class="w"> </span><span class="n">socket</span><span class="p" data-group-id="4118797081-11">)</span><span class="w"> </span><span class="k" data-group-id="4118797081-13">do</span><span class="w">
    </span><span class="p" data-group-id="4118797081-14">{</span><span class="ss">:noreply</span><span class="p">,</span><span class="w"> </span><span class="n">cancel_upload</span><span class="p" data-group-id="4118797081-15">(</span><span class="n">socket</span><span class="p">,</span><span class="w"> </span><span class="ss">:avatar</span><span class="p">,</span><span class="w"> </span><span class="n">ref</span><span class="p" data-group-id="4118797081-15">)</span><span class="p" data-group-id="4118797081-14">}</span><span class="w">
  </span><span class="k" data-group-id="4118797081-13">end</span><span class="w">

  </span><span class="na">@impl</span><span class="w"> </span><span class="nc">Phoenix.LiveView</span><span class="w">
  </span><span class="kd">def</span><span class="w"> </span><span class="nf">handle_event</span><span class="p" data-group-id="4118797081-16">(</span><span class="s">&quot;save&quot;</span><span class="p">,</span><span class="w"> </span><span class="c">_params</span><span class="p">,</span><span class="w"> </span><span class="n">socket</span><span class="p" data-group-id="4118797081-16">)</span><span class="w"> </span><span class="k" data-group-id="4118797081-17">do</span><span class="w">
    </span><span class="n">uploaded_files</span><span class="w"> </span><span class="o">=</span><span class="w">
      </span><span class="n">consume_uploaded_entries</span><span class="p" data-group-id="4118797081-18">(</span><span class="n">socket</span><span class="p">,</span><span class="w"> </span><span class="ss">:avatar</span><span class="p">,</span><span class="w"> </span><span class="k" data-group-id="4118797081-19">fn</span><span class="w"> </span><span class="p" data-group-id="4118797081-20">%{</span><span class="ss">path</span><span class="p">:</span><span class="w"> </span><span class="n">path</span><span class="p" data-group-id="4118797081-20">}</span><span class="p">,</span><span class="w"> </span><span class="c">_entry</span><span class="w"> </span><span class="o">-&gt;</span><span class="w">
        </span><span class="n">dest</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nc">Path</span><span class="o">.</span><span class="n">join</span><span class="p" data-group-id="4118797081-21">(</span><span class="p" data-group-id="4118797081-22">[</span><span class="nc">:code</span><span class="o">.</span><span class="n">priv_dir</span><span class="p" data-group-id="4118797081-23">(</span><span class="ss">:my_app</span><span class="p" data-group-id="4118797081-23">)</span><span class="p">,</span><span class="w"> </span><span class="s">&quot;static&quot;</span><span class="p">,</span><span class="w"> </span><span class="s">&quot;uploads&quot;</span><span class="p">,</span><span class="w"> </span><span class="nc">Path</span><span class="o">.</span><span class="n">basename</span><span class="p" data-group-id="4118797081-24">(</span><span class="n">path</span><span class="p" data-group-id="4118797081-24">)</span><span class="p" data-group-id="4118797081-22">]</span><span class="p" data-group-id="4118797081-21">)</span><span class="w">
        </span><span class="c1"># You will need to create `priv/static/uploads` for `File.cp!/2` to work.</span><span class="w">
        </span><span class="nc">File</span><span class="o">.</span><span class="n">cp!</span><span class="p" data-group-id="4118797081-25">(</span><span class="n">path</span><span class="p">,</span><span class="w"> </span><span class="n">dest</span><span class="p" data-group-id="4118797081-25">)</span><span class="w">
        </span><span class="p" data-group-id="4118797081-26">{</span><span class="ss">:ok</span><span class="p">,</span><span class="w"> </span><span class="sx">~p&quot;/uploads/</span><span class="si" data-group-id="4118797081-27">#{</span><span class="nc">Path</span><span class="o">.</span><span class="n">basename</span><span class="p" data-group-id="4118797081-28">(</span><span class="n">dest</span><span class="p" data-group-id="4118797081-28">)</span><span class="si" data-group-id="4118797081-27">}</span><span class="sx">&quot;</span><span class="p" data-group-id="4118797081-26">}</span><span class="w">
      </span><span class="k" data-group-id="4118797081-19">end</span><span class="p" data-group-id="4118797081-18">)</span><span class="w">

    </span><span class="p" data-group-id="4118797081-29">{</span><span class="ss">:noreply</span><span class="p">,</span><span class="w"> </span><span class="n">update</span><span class="p" data-group-id="4118797081-30">(</span><span class="n">socket</span><span class="p">,</span><span class="w"> </span><span class="ss">:uploaded_files</span><span class="p">,</span><span class="w"> </span><span class="o">&amp;</span><span class="p" data-group-id="4118797081-31">(</span><span class="ni">&amp;1</span><span class="w"> </span><span class="o">++</span><span class="w"> </span><span class="n">uploaded_files</span><span class="p" data-group-id="4118797081-31">)</span><span class="p" data-group-id="4118797081-30">)</span><span class="p" data-group-id="4118797081-29">}</span><span class="w">
  </span><span class="k" data-group-id="4118797081-17">end</span><span class="w">

  </span><span class="kd">defp</span><span class="w"> </span><span class="nf">error_to_string</span><span class="p" data-group-id="4118797081-32">(</span><span class="ss">:too_large</span><span class="p" data-group-id="4118797081-32">)</span><span class="p">,</span><span class="w"> </span><span class="ss">do</span><span class="p">:</span><span class="w"> </span><span class="s">&quot;Too large&quot;</span><span class="w">
  </span><span class="kd">defp</span><span class="w"> </span><span class="nf">error_to_string</span><span class="p" data-group-id="4118797081-33">(</span><span class="ss">:too_many_files</span><span class="p" data-group-id="4118797081-33">)</span><span class="p">,</span><span class="w"> </span><span class="ss">do</span><span class="p">:</span><span class="w"> </span><span class="s">&quot;You have selected too many files&quot;</span><span class="w">
  </span><span class="kd">defp</span><span class="w"> </span><span class="nf">error_to_string</span><span class="p" data-group-id="4118797081-34">(</span><span class="ss">:not_accepted</span><span class="p" data-group-id="4118797081-34">)</span><span class="p">,</span><span class="w"> </span><span class="ss">do</span><span class="p">:</span><span class="w"> </span><span class="s">&quot;You have selected an unacceptable file type&quot;</span><span class="w">
</span><span class="k" data-group-id="4118797081-1">end</span></code></pre><p>To access your uploads via your app, make sure to add <code class="inline">uploads</code> to
<code class="inline">MyAppWeb.static_paths/0</code>.</p>

  </body>
</html>
