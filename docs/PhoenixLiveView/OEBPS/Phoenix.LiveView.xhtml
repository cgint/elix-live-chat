<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"
      xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>Phoenix.LiveView - Phoenix LiveView v1.1.2</title>
    <meta name="generator" content="ExDoc v0.38.2" />
    <link type="text/css" rel="stylesheet" href="dist/epub-elixir-FNUUKFP7.css" />
    <script src="dist/epub-4WIP524F.js"></script>

  </head>
  <body class="content-inner">

    <h1 id="content">
Phoenix.LiveView <small>behaviour</small>
    </h1>


      <section id="moduledoc" class="docstring">
<p>A LiveView is a process that receives events, updates
its state, and renders updates to a page as diffs.</p><p>To get started, see <a href="welcome.xhtml">the Welcome guide</a>.
This module provides advanced documentation and features
about using LiveView.</p><h2 id="module-life-cycle">Life-cycle</h2><p>A LiveView begins as a regular HTTP request and HTML response,
and then upgrades to a stateful view on client connect,
guaranteeing a regular HTML page even if JavaScript is disabled.
Any time a stateful view changes or updates its socket assigns, it is
automatically re-rendered and the updates are pushed to the client.</p><p>Socket assigns are stateful values kept on the server side in
<a href="Phoenix.LiveView.Socket.xhtml"><code class="inline">Phoenix.LiveView.Socket</code></a>. This is different from the common stateless
HTTP pattern of sending the connection state to the client in the form
of a token or cookie and rebuilding the state on the server to service
every request.</p><p>You begin by rendering a LiveView typically from your router.
When LiveView is first rendered, the <a href="#c:mount/3"><code class="inline">mount/3</code></a> callback is invoked
with the current params, the current session and the LiveView socket.
As in a regular request, <code class="inline">params</code> contains public data that can be
modified by the user. The <code class="inline">session</code> always contains private data set
by the application itself. The <a href="#c:mount/3"><code class="inline">mount/3</code></a> callback wires up socket
assigns necessary for rendering the view. After mounting, <a href="#c:handle_params/3"><code class="inline">handle_params/3</code></a>
is invoked so uri and query params are handled. Finally, <a href="#c:render/1"><code class="inline">render/1</code></a>
is invoked and the HTML is sent as a regular HTML response to the
client.</p><p>After rendering the static page, LiveView connects from the client
to the server where stateful views are spawned to push rendered updates
to the browser, and receive client events via <code class="inline">phx-</code> bindings. Just like
the first rendering, <a href="#c:mount/3"><code class="inline">mount/3</code></a>, is invoked  with params, session,
and socket state. However in the connected client case, a LiveView process
is spawned on the server, runs <a href="#c:handle_params/3"><code class="inline">handle_params/3</code></a> again and then pushes
the result of <a href="#c:render/1"><code class="inline">render/1</code></a> to the client and continues on for the duration
of the connection. If at any point during the stateful life-cycle a crash
is encountered, or the client connection drops, the client gracefully
reconnects to the server, calling <a href="#c:mount/3"><code class="inline">mount/3</code></a> and <a href="#c:handle_params/3"><code class="inline">handle_params/3</code></a> again.</p><p>LiveView also allows attaching hooks to specific life-cycle stages with
<a href="#attach_hook/4"><code class="inline">attach_hook/4</code></a>.</p><h2 id="module-template-collocation">Template collocation</h2><p>There are two possible ways of rendering content in a LiveView. The first
one is by explicitly defining a render function, which receives <code class="inline">assigns</code>
and returns a <code class="inline">HEEx</code> template defined with <a href="Phoenix.Component.xhtml#sigil_H/2">the <code class="inline">~H</code> sigil</a>.</p><pre><code class="makeup elixir" translate="no"><samp class="kd">defmodule</samp><samp class="w"> </samp><samp class="nc">MyAppWeb.DemoLive</samp><samp class="w"> </samp><samp class="k" data-group-id="9397809968-1">do</samp><samp class="w">
  </samp><samp class="c1"># In a typical Phoenix app, the following line would usually be `use MyAppWeb, :live_view`</samp><samp class="w">
  </samp><samp class="kn">use</samp><samp class="w"> </samp><samp class="nc">Phoenix.LiveView</samp><samp class="w">

  </samp><samp class="kd">def</samp><samp class="w"> </samp><samp class="nf">render</samp><samp class="p" data-group-id="9397809968-2">(</samp><samp class="n">assigns</samp><samp class="p" data-group-id="9397809968-2">)</samp><samp class="w"> </samp><samp class="k" data-group-id="9397809968-3">do</samp><samp class="w">
    </samp><samp class="sx">~H&quot;&quot;&quot;</samp><samp class="w">
</samp><samp class="n">    Hello world!
</samp><samp class="w">    </samp><samp class="sx">&quot;&quot;&quot;</samp><samp class="w">
  </samp><samp class="k" data-group-id="9397809968-3">end</samp><samp class="w">
</samp><samp class="k" data-group-id="9397809968-1">end</samp></code></pre><p>For larger templates, you can place them in a file in the same directory
and same name as the LiveView. For example, if the file above is placed
at <code class="inline">lib/my_app_web/live/demo_live.ex</code>, you can also remove the
<code class="inline">render/1</code> function altogether and put the template code at
<code class="inline">lib/my_app_web/live/demo_live.html.heex</code>.</p><h2 id="module-async-operations">Async Operations</h2><p>Performing asynchronous work is common in LiveViews and LiveComponents.
It allows the user to get a working UI quickly while the system fetches some
data in the background or talks to an external service, without blocking the
render or event handling. For async work, you also typically need to handle
the different states of the async operation, such as loading, error, and the
successful result. You also want to catch any errors or exits and translate it
to a meaningful update in the UI rather than crashing the user experience.</p><h3 id="module-async-assigns">Async assigns</h3><p>The <a href="#assign_async/3"><code class="inline">assign_async/3</code></a> function takes the socket, a key or list of keys which will be assigned
asynchronously, and a function. This function will be wrapped in a <code class="inline">task</code> by
<code class="inline">assign_async</code>, making it easy for you to return the result. This function must
return an <code class="inline">{:ok, assigns}</code> or <code class="inline">{:error, reason}</code> tuple, where <code class="inline">assigns</code> is a map
of the keys passed to <code class="inline">assign_async</code>.
If the function returns anything else, an error is raised.</p><p>The task is only started when the socket is connected.</p><p>For example, let's say we want to async fetch a user's organization from the database,
as well as their profile and rank:</p><pre><code class="makeup elixir" translate="no"><samp class="kd">def</samp><samp class="w"> </samp><samp class="nf">mount</samp><samp class="p" data-group-id="4472471797-1">(</samp><samp class="p" data-group-id="4472471797-2">%{</samp><samp class="s">&quot;slug&quot;</samp><samp class="w"> </samp><samp class="p">=&gt;</samp><samp class="w"> </samp><samp class="n">slug</samp><samp class="p" data-group-id="4472471797-2">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="bp">_</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">socket</samp><samp class="p" data-group-id="4472471797-1">)</samp><samp class="w"> </samp><samp class="k" data-group-id="4472471797-3">do</samp><samp class="w">
  </samp><samp class="p" data-group-id="4472471797-4">{</samp><samp class="ss">:ok</samp><samp class="p">,</samp><samp class="w">
   </samp><samp class="n">socket</samp><samp class="w">
   </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="n">assign</samp><samp class="p" data-group-id="4472471797-5">(</samp><samp class="ss">:foo</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;bar&quot;</samp><samp class="p" data-group-id="4472471797-5">)</samp><samp class="w">
   </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="n">assign_async</samp><samp class="p" data-group-id="4472471797-6">(</samp><samp class="ss">:org</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="k" data-group-id="4472471797-7">fn</samp><samp class="w"> </samp><samp class="o">-&gt;</samp><samp class="w"> </samp><samp class="p" data-group-id="4472471797-8">{</samp><samp class="ss">:ok</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="4472471797-9">%{</samp><samp class="ss">org</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="n">fetch_org!</samp><samp class="p" data-group-id="4472471797-10">(</samp><samp class="n">slug</samp><samp class="p" data-group-id="4472471797-10">)</samp><samp class="p" data-group-id="4472471797-9">}</samp><samp class="p" data-group-id="4472471797-8">}</samp><samp class="w"> </samp><samp class="k" data-group-id="4472471797-7">end</samp><samp class="p" data-group-id="4472471797-6">)</samp><samp class="w">
   </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="n">assign_async</samp><samp class="p" data-group-id="4472471797-11">(</samp><samp class="p" data-group-id="4472471797-12">[</samp><samp class="ss">:profile</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:rank</samp><samp class="p" data-group-id="4472471797-12">]</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="k" data-group-id="4472471797-13">fn</samp><samp class="w"> </samp><samp class="o">-&gt;</samp><samp class="w"> </samp><samp class="p" data-group-id="4472471797-14">{</samp><samp class="ss">:ok</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="4472471797-15">%{</samp><samp class="ss">profile</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="n">...</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">rank</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="n">...</samp><samp class="p" data-group-id="4472471797-15">}</samp><samp class="p" data-group-id="4472471797-14">}</samp><samp class="w"> </samp><samp class="k" data-group-id="4472471797-13">end</samp><samp class="p" data-group-id="4472471797-11">)</samp><samp class="p" data-group-id="4472471797-4">}</samp><samp class="w">
</samp><samp class="k" data-group-id="4472471797-3">end</samp></code></pre><section role="note" class="admonition warning"><h3 id="module-warning" class="admonition-title warning">Warning</h3><p>When using async operations it is important to not pass the socket into the function
as it will copy the whole socket struct to the Task process, which can be very expensive.</p><p>Instead of:</p><pre><code class="makeup elixir" translate="no"><samp class="n">assign_async</samp><samp class="p" data-group-id="2944725025-1">(</samp><samp class="ss">:org</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="k" data-group-id="2944725025-2">fn</samp><samp class="w"> </samp><samp class="o">-&gt;</samp><samp class="w"> </samp><samp class="p" data-group-id="2944725025-3">{</samp><samp class="ss">:ok</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="2944725025-4">%{</samp><samp class="ss">org</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="n">fetch_org</samp><samp class="p" data-group-id="2944725025-5">(</samp><samp class="n">socket</samp><samp class="o">.</samp><samp class="n">assigns</samp><samp class="o">.</samp><samp class="n">slug</samp><samp class="p" data-group-id="2944725025-5">)</samp><samp class="p" data-group-id="2944725025-4">}</samp><samp class="p" data-group-id="2944725025-3">}</samp><samp class="w"> </samp><samp class="k" data-group-id="2944725025-2">end</samp><samp class="p" data-group-id="2944725025-1">)</samp></code></pre><p>We should do:</p><pre><code class="makeup elixir" translate="no"><samp class="n">slug</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="n">socket</samp><samp class="o">.</samp><samp class="n">assigns</samp><samp class="o">.</samp><samp class="n">slug</samp><samp class="w">
</samp><samp class="n">assign_async</samp><samp class="p" data-group-id="5176784709-1">(</samp><samp class="ss">:org</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="k" data-group-id="5176784709-2">fn</samp><samp class="w"> </samp><samp class="o">-&gt;</samp><samp class="w"> </samp><samp class="p" data-group-id="5176784709-3">{</samp><samp class="ss">:ok</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="5176784709-4">%{</samp><samp class="ss">org</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="n">fetch_org</samp><samp class="p" data-group-id="5176784709-5">(</samp><samp class="n">slug</samp><samp class="p" data-group-id="5176784709-5">)</samp><samp class="p" data-group-id="5176784709-4">}</samp><samp class="p" data-group-id="5176784709-3">}</samp><samp class="w"> </samp><samp class="k" data-group-id="5176784709-2">end</samp><samp class="p" data-group-id="5176784709-1">)</samp></code></pre><p>See: <a href="https://hexdocs.pm/elixir/process-anti-patterns.html#sending-unnecessary-data">https://hexdocs.pm/elixir/process-anti-patterns.html#sending-unnecessary-data</a></p></section><p>The state of the async operation is stored in the socket assigns within an
<a href="Phoenix.LiveView.AsyncResult.xhtml"><code class="inline">Phoenix.LiveView.AsyncResult</code></a>. It carries the loading and failed states, as
well as the result. For example, if we wanted to show the loading states in
the UI for the <code class="inline">:org</code>, our template could conditionally render the states:</p><pre><code class="makeup heex" translate="no"><samp class="p">&lt;</samp><samp class="nt">div</samp><samp class="w"> </samp><samp class="na">:if</samp><samp class="p">=</samp><samp class="p" data-group-id="7405404005-1">{</samp><samp class="na">@org</samp><samp class="o">.</samp><samp class="n">loading</samp><samp class="p" data-group-id="7405404005-1">}</samp><samp class="p">&gt;</samp><samp class="n">Loading organization...</samp><samp class="p">&lt;/</samp><samp class="nt">div</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="p">&lt;</samp><samp class="nt">div</samp><samp class="w"> </samp><samp class="na">:if</samp><samp class="p">=</samp><samp class="p" data-group-id="7405404005-2">{</samp><samp class="n">org</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="na">@org</samp><samp class="o">.</samp><samp class="n">ok?</samp><samp class="w"> </samp><samp class="o">&amp;&amp;</samp><samp class="w"> </samp><samp class="na">@org</samp><samp class="o">.</samp><samp class="n">result</samp><samp class="p" data-group-id="7405404005-2">}</samp><samp class="p">&gt;</samp><samp class="p" data-group-id="7405404005-3">{</samp><samp class="n">org</samp><samp class="o">.</samp><samp class="n">name</samp><samp class="p" data-group-id="7405404005-3">}</samp><samp class="n"> loaded!</samp><samp class="p">&lt;/</samp><samp class="nt">div</samp><samp class="p">&gt;</samp></code></pre><p>The <a href="Phoenix.Component.xhtml#async_result/1"><code class="inline">Phoenix.Component.async_result/1</code></a> function component can also be used to
declaratively render the different states using slots:</p><pre><code class="makeup heex" translate="no"><samp class="p">&lt;</samp><samp class="nf">.async_result</samp><samp class="w"> </samp><samp class="na">:let</samp><samp class="p">=</samp><samp class="p" data-group-id="6296169232-1">{</samp><samp class="n">org</samp><samp class="p" data-group-id="6296169232-1">}</samp><samp class="w"> </samp><samp class="na">assign</samp><samp class="p">=</samp><samp class="p" data-group-id="6296169232-2">{</samp><samp class="na">@org</samp><samp class="p" data-group-id="6296169232-2">}</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="w">  </samp><samp class="p">&lt;</samp><samp class="ss">:loading</samp><samp class="p">&gt;</samp><samp class="n">Loading organization...</samp><samp class="p">&lt;/</samp><samp class="ss">:loading</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="w">  </samp><samp class="p">&lt;</samp><samp class="ss">:failed</samp><samp class="w"> </samp><samp class="na">:let</samp><samp class="p">=</samp><samp class="p" data-group-id="6296169232-3">{</samp><samp class="c">_failure</samp><samp class="p" data-group-id="6296169232-3">}</samp><samp class="p">&gt;</samp><samp class="n">there was an error loading the organization</samp><samp class="p">&lt;/</samp><samp class="ss">:failed</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="w">  </samp><samp class="p" data-group-id="6296169232-4">{</samp><samp class="n">org</samp><samp class="o">.</samp><samp class="n">name</samp><samp class="p" data-group-id="6296169232-4">}</samp><samp class="w">
</samp><samp class="p">&lt;/</samp><samp class="nf">.async_result</samp><samp class="p">&gt;</samp></code></pre><h3 id="module-arbitrary-async-operations">Arbitrary async operations</h3><p>Sometimes you need lower level control of asynchronous operations, while
still receiving process isolation and error handling. For this, you can use
<a href="#start_async/3"><code class="inline">start_async/3</code></a> and the <a href="Phoenix.LiveView.AsyncResult.xhtml"><code class="inline">Phoenix.LiveView.AsyncResult</code></a> module directly:</p><pre><code class="makeup elixir" translate="no"><samp class="kd">def</samp><samp class="w"> </samp><samp class="nf">mount</samp><samp class="p" data-group-id="4117321822-1">(</samp><samp class="p" data-group-id="4117321822-2">%{</samp><samp class="s">&quot;id&quot;</samp><samp class="w"> </samp><samp class="p">=&gt;</samp><samp class="w"> </samp><samp class="n">id</samp><samp class="p" data-group-id="4117321822-2">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="bp">_</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">socket</samp><samp class="p" data-group-id="4117321822-1">)</samp><samp class="w"> </samp><samp class="k" data-group-id="4117321822-3">do</samp><samp class="w">
  </samp><samp class="p" data-group-id="4117321822-4">{</samp><samp class="ss">:ok</samp><samp class="p">,</samp><samp class="w">
   </samp><samp class="n">socket</samp><samp class="w">
   </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="n">assign</samp><samp class="p" data-group-id="4117321822-5">(</samp><samp class="ss">:org</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="nc">AsyncResult</samp><samp class="o">.</samp><samp class="n">loading</samp><samp class="p" data-group-id="4117321822-6">(</samp><samp class="p" data-group-id="4117321822-6">)</samp><samp class="p" data-group-id="4117321822-5">)</samp><samp class="w">
   </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="n">start_async</samp><samp class="p" data-group-id="4117321822-7">(</samp><samp class="ss">:my_task</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="k" data-group-id="4117321822-8">fn</samp><samp class="w"> </samp><samp class="o">-&gt;</samp><samp class="w"> </samp><samp class="n">fetch_org!</samp><samp class="p" data-group-id="4117321822-9">(</samp><samp class="n">id</samp><samp class="p" data-group-id="4117321822-9">)</samp><samp class="w"> </samp><samp class="k" data-group-id="4117321822-8">end</samp><samp class="p" data-group-id="4117321822-7">)</samp><samp class="p" data-group-id="4117321822-4">}</samp><samp class="w">
</samp><samp class="k" data-group-id="4117321822-3">end</samp><samp class="w">

</samp><samp class="kd">def</samp><samp class="w"> </samp><samp class="nf">handle_async</samp><samp class="p" data-group-id="4117321822-10">(</samp><samp class="ss">:my_task</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="4117321822-11">{</samp><samp class="ss">:ok</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">fetched_org</samp><samp class="p" data-group-id="4117321822-11">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">socket</samp><samp class="p" data-group-id="4117321822-10">)</samp><samp class="w"> </samp><samp class="k" data-group-id="4117321822-12">do</samp><samp class="w">
  </samp><samp class="p" data-group-id="4117321822-13">%{</samp><samp class="ss">org</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="n">org</samp><samp class="p" data-group-id="4117321822-13">}</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="n">socket</samp><samp class="o">.</samp><samp class="n">assigns</samp><samp class="w">
  </samp><samp class="p" data-group-id="4117321822-14">{</samp><samp class="ss">:noreply</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">assign</samp><samp class="p" data-group-id="4117321822-15">(</samp><samp class="n">socket</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:org</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="nc">AsyncResult</samp><samp class="o">.</samp><samp class="n">ok</samp><samp class="p" data-group-id="4117321822-16">(</samp><samp class="n">org</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">fetched_org</samp><samp class="p" data-group-id="4117321822-16">)</samp><samp class="p" data-group-id="4117321822-15">)</samp><samp class="p" data-group-id="4117321822-14">}</samp><samp class="w">
</samp><samp class="k" data-group-id="4117321822-12">end</samp><samp class="w">

</samp><samp class="kd">def</samp><samp class="w"> </samp><samp class="nf">handle_async</samp><samp class="p" data-group-id="4117321822-17">(</samp><samp class="ss">:my_task</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="4117321822-18">{</samp><samp class="ss">:exit</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">reason</samp><samp class="p" data-group-id="4117321822-18">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">socket</samp><samp class="p" data-group-id="4117321822-17">)</samp><samp class="w"> </samp><samp class="k" data-group-id="4117321822-19">do</samp><samp class="w">
  </samp><samp class="p" data-group-id="4117321822-20">%{</samp><samp class="ss">org</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="n">org</samp><samp class="p" data-group-id="4117321822-20">}</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="n">socket</samp><samp class="o">.</samp><samp class="n">assigns</samp><samp class="w">
  </samp><samp class="p" data-group-id="4117321822-21">{</samp><samp class="ss">:noreply</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">assign</samp><samp class="p" data-group-id="4117321822-22">(</samp><samp class="n">socket</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:org</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="nc">AsyncResult</samp><samp class="o">.</samp><samp class="n">failed</samp><samp class="p" data-group-id="4117321822-23">(</samp><samp class="n">org</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="4117321822-24">{</samp><samp class="ss">:exit</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">reason</samp><samp class="p" data-group-id="4117321822-24">}</samp><samp class="p" data-group-id="4117321822-23">)</samp><samp class="p" data-group-id="4117321822-22">)</samp><samp class="p" data-group-id="4117321822-21">}</samp><samp class="w">
</samp><samp class="k" data-group-id="4117321822-19">end</samp></code></pre><p><a href="#start_async/3"><code class="inline">start_async/3</code></a> is used to fetch the organization asynchronously. The
<a href="#c:handle_async/3"><code class="inline">handle_async/3</code></a> callback is called when the task completes or exits,
with the results wrapped in either <code class="inline">{:ok, result}</code> or <code class="inline">{:exit, reason}</code>.
The <code class="inline">AsyncResult</code> module provides functions to update the state of the
async operation, but you can also assign any value directly to the socket
if you want to handle the state yourself.</p><h2 id="module-endpoint-configuration">Endpoint configuration</h2><p>LiveView accepts the following configuration in your endpoint under
the <code class="inline">:live_view</code> key:</p><ul><li><p><code class="inline">:signing_salt</code> (required) - the salt used to sign data sent
to the client</p></li><li><p><code class="inline">:hibernate_after</code> (optional) - the idle time in milliseconds allowed in
the LiveView before compressing its own memory and state.
Defaults to 15000ms (15 seconds)</p></li></ul>
      </section>


      <section id="summary" class="details-list">
        <h1 class="section-heading">Summary</h1>
<div class="summary-types summary">
  <h2>
    <a href="#types">Types</a>
  </h2>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#t:unsigned_params/0" data-no-tooltip="" translate="no">unsigned_params()</a>

      </div>

    </div>

</div>
<div class="summary-callbacks summary">
  <h2>
    <a href="#callbacks">Callbacks</a>
  </h2>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#c:handle_async/3" data-no-tooltip="" translate="no">handle_async(name, async_fun_result, socket)</a>

      </div>

        <div class="summary-synopsis"><p>Invoked when the result of an <a><code class="inline">start_async/3</code></a> operation is available.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#c:handle_call/3" data-no-tooltip="" translate="no">handle_call(msg, {}, socket)</a>

      </div>

        <div class="summary-synopsis"><p>Invoked to handle calls from other Elixir processes.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#c:handle_cast/2" data-no-tooltip="" translate="no">handle_cast(msg, socket)</a>

      </div>

        <div class="summary-synopsis"><p>Invoked to handle casts from other Elixir processes.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#c:handle_event/3" data-no-tooltip="" translate="no">handle_event(event, unsigned_params, socket)</a>

      </div>

        <div class="summary-synopsis"><p>Invoked to handle events sent by the client.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#c:handle_info/2" data-no-tooltip="" translate="no">handle_info(msg, socket)</a>

      </div>

        <div class="summary-synopsis"><p>Invoked to handle messages from other Elixir processes.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#c:handle_params/3" data-no-tooltip="" translate="no">handle_params(unsigned_params, uri, socket)</a>

      </div>

        <div class="summary-synopsis"><p>Invoked after mount and whenever there is a live patch event.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#c:mount/3" data-no-tooltip="" translate="no">mount(params, session, socket)</a>

      </div>

        <div class="summary-synopsis"><p>The LiveView entry-point.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#c:render/1" data-no-tooltip="" translate="no">render(assigns)</a>

      </div>

        <div class="summary-synopsis"><p>Renders a template.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#c:terminate/2" data-no-tooltip="" translate="no">terminate(reason, socket)</a>

      </div>

        <div class="summary-synopsis"><p>Invoked when the LiveView is terminating.</p></div>

    </div>

</div>
<div class="summary-functions summary">
  <h2>
    <a href="#functions">Functions</a>
  </h2>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#__live__/1" data-no-tooltip="" translate="no">__live__(opts \\ [])</a>

      </div>

        <div class="summary-synopsis"><p>Defines metadata for a LiveView.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#__using__/1" data-no-tooltip="" translate="no">__using__(opts)</a>

      </div>

        <div class="summary-synopsis"><p>Uses LiveView in the current module to mark it a LiveView.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#allow_upload/3" data-no-tooltip="" translate="no">allow_upload(socket, name, options)</a>

      </div>

        <div class="summary-synopsis"><p>Allows an upload for the provided name.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#assign_async/4" data-no-tooltip="" translate="no">assign_async(socket, key_or_keys, func, opts \\ [])</a>

      </div>

        <div class="summary-synopsis"><p>Assigns keys asynchronously.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#attach_hook/4" data-no-tooltip="" translate="no">attach_hook(socket, name, stage, fun)</a>

      </div>

        <div class="summary-synopsis"><p>Attaches the given <code class="inline">fun</code> by <code class="inline">name</code> for the lifecycle <code class="inline">stage</code> into <code class="inline">socket</code>.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#cancel_async/3" data-no-tooltip="" translate="no">cancel_async(socket, async_or_keys, reason \\ {:shutdown, :cancel})</a>

      </div>

        <div class="summary-synopsis"><p>Cancels an async operation if one exists.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#cancel_upload/3" data-no-tooltip="" translate="no">cancel_upload(socket, name, entry_ref)</a>

      </div>

        <div class="summary-synopsis"><p>Cancels an upload for the given entry.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#clear_flash/1" data-no-tooltip="" translate="no">clear_flash(socket)</a>

      </div>

        <div class="summary-synopsis"><p>Clears the flash.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#clear_flash/2" data-no-tooltip="" translate="no">clear_flash(socket, key)</a>

      </div>

        <div class="summary-synopsis"><p>Clears a key from the flash.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#connected?/1" data-no-tooltip="" translate="no">connected?(socket)</a>

      </div>

        <div class="summary-synopsis"><p>Returns true if the socket is connected.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#consume_uploaded_entries/3" data-no-tooltip="" translate="no">consume_uploaded_entries(socket, name, func)</a>

      </div>

        <div class="summary-synopsis"><p>Consumes the uploaded entries.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#consume_uploaded_entry/3" data-no-tooltip="" translate="no">consume_uploaded_entry(socket, entry, func)</a>

      </div>

        <div class="summary-synopsis"><p>Consumes an individual uploaded entry.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#detach_hook/3" data-no-tooltip="" translate="no">detach_hook(socket, name, stage)</a>

      </div>

        <div class="summary-synopsis"><p>Detaches a hook with the given <code class="inline">name</code> from the lifecycle <code class="inline">stage</code>.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#disallow_upload/2" data-no-tooltip="" translate="no">disallow_upload(socket, name)</a>

      </div>

        <div class="summary-synopsis"><p>Revokes a previously allowed upload from <a><code class="inline">allow_upload/3</code></a>.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#get_connect_info/2" data-no-tooltip="" translate="no">get_connect_info(socket, key)</a>

      </div>

        <div class="summary-synopsis"><p>Accesses a given connect info key from the socket.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#get_connect_params/1" data-no-tooltip="" translate="no">get_connect_params(socket)</a>

      </div>

        <div class="summary-synopsis"><p>Accesses the connect params sent by the client for use on connected mount.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#on_mount/1" data-no-tooltip="" translate="no">on_mount(mod_or_mod_arg)</a>

      </div>

        <div class="summary-synopsis"><p>Declares a module callback to be invoked on the LiveView's mount.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#push_event/3" data-no-tooltip="" translate="no">push_event(socket, event, payload)</a>

      </div>

        <div class="summary-synopsis"><p>Pushes an event to the client.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#push_navigate/2" data-no-tooltip="" translate="no">push_navigate(socket, opts)</a>

      </div>

        <div class="summary-synopsis"><p>Annotates the socket for navigation to another LiveView in the same <code class="inline">live_session</code>.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#push_patch/2" data-no-tooltip="" translate="no">push_patch(socket, opts)</a>

      </div>

        <div class="summary-synopsis"><p>Annotates the socket for navigation within the current LiveView.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#put_flash/3" data-no-tooltip="" translate="no">put_flash(socket, kind, msg)</a>

      </div>

        <div class="summary-synopsis"><p>Adds a flash message to the socket to be displayed.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#put_private/3" data-no-tooltip="" translate="no">put_private(socket, key, value)</a>

      </div>

        <div class="summary-synopsis"><p>Puts a new private key and value in the socket.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#redirect/2" data-no-tooltip="" translate="no">redirect(socket, opts \\ [])</a>

      </div>

        <div class="summary-synopsis"><p>Annotates the socket for redirect to a destination path.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#render_with/2" data-no-tooltip="" translate="no">render_with(socket, component)</a>

      </div>

        <div class="summary-synopsis"><p>Configures which function to use to render a LiveView/LiveComponent.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#send_update/3" data-no-tooltip="" translate="no">send_update(pid \\ self(), module_or_cid, assigns)</a>

      </div>

        <div class="summary-synopsis"><p>Asynchronously updates a <a><code class="inline">Phoenix.LiveComponent</code></a> with new assigns.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#send_update_after/4" data-no-tooltip="" translate="no">send_update_after(pid \\ self(), module_or_cid, assigns, time_in_milliseconds)</a>

      </div>

        <div class="summary-synopsis"><p>Similar to <a><code class="inline">send_update/3</code></a> but the update will be delayed according to the given <code class="inline">time_in_milliseconds</code>.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#start_async/4" data-no-tooltip="" translate="no">start_async(socket, name, func, opts \\ [])</a>

      </div>

        <div class="summary-synopsis"><p>Wraps your function in an asynchronous task and invokes a callback <code class="inline">name</code> to
handle the result.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#static_changed?/1" data-no-tooltip="" translate="no">static_changed?(socket)</a>

      </div>

        <div class="summary-synopsis"><p>Returns true if the socket is connected and the tracked static assets have changed.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#stream/4" data-no-tooltip="" translate="no">stream(socket, name, items, opts \\ [])</a>

      </div>

        <div class="summary-synopsis"><p>Assigns a new stream to the socket or inserts items into an existing stream.
Returns an updated <code class="inline">socket</code>.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#stream_configure/3" data-no-tooltip="" translate="no">stream_configure(socket, name, opts)</a>

      </div>

        <div class="summary-synopsis"><p>Configures a stream.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#stream_delete/3" data-no-tooltip="" translate="no">stream_delete(socket, name, item)</a>

      </div>

        <div class="summary-synopsis"><p>Deletes an item from the stream.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#stream_delete_by_dom_id/3" data-no-tooltip="" translate="no">stream_delete_by_dom_id(socket, name, id)</a>

      </div>

        <div class="summary-synopsis"><p>Deletes an item from the stream given its computed DOM id.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#stream_insert/4" data-no-tooltip="" translate="no">stream_insert(socket, name, item, opts \\ [])</a>

      </div>

        <div class="summary-synopsis"><p>Inserts a new item or updates an existing item in the stream.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#transport_pid/1" data-no-tooltip="" translate="no">transport_pid(socket)</a>

      </div>

        <div class="summary-synopsis"><p>Returns the transport pid of the socket.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#uploaded_entries/2" data-no-tooltip="" translate="no">uploaded_entries(socket, name)</a>

      </div>

        <div class="summary-synopsis"><p>Returns the completed and in progress entries for the upload.</p></div>

    </div>

</div>

      </section>


      <section id="types" class="details-list">
        <h1 class="section-heading">Types</h1>
        <div class="types-list">
<section class="detail" id="t:unsigned_params/0">

  <div class="detail-header">
    <a href="#t:unsigned_params/0" class="detail-link" data-no-tooltip="" aria-label="Link to this type">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">unsigned_params()</h1>


        <a href="https://github.com/phoenixframework/phoenix_live_view/blob/v1.1.2/lib/phoenix_live_view.ex#L191" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@type</span> unsigned_params() :: <a href="https://hexdocs.pm/elixir/typespecs.html#basic-types">map</a>()</pre>

      </div>


  </section>
</section>

        </div>
      </section>

      <section id="callbacks" class="details-list">
        <h1 class="section-heading">Callbacks</h1>
        <div class="callbacks-list">
<section class="detail" id="c:handle_async/3">

  <div class="detail-header">
    <a href="#c:handle_async/3" class="detail-link" data-no-tooltip="" aria-label="Link to this callback">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">handle_async(name, async_fun_result, socket)</h1>

        <span class="note">(optional)</span>


        <a href="https://github.com/phoenixframework/phoenix_live_view/blob/v1.1.2/lib/phoenix_live_view.ex#L324" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@callback</span> handle_async(
  name :: <a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types">term</a>(),
  async_fun_result :: {:ok, <a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types">term</a>()} | {:exit, <a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types">term</a>()},
  socket :: <a href="Phoenix.LiveView.Socket.xhtml#t:t/0">Phoenix.LiveView.Socket.t</a>()
) :: {:noreply, <a href="Phoenix.LiveView.Socket.xhtml#t:t/0">Phoenix.LiveView.Socket.t</a>()}</pre>

      </div>

<p>Invoked when the result of an <a href="#start_async/3"><code class="inline">start_async/3</code></a> operation is available.</p><p>For a deeper understanding of using this callback,
refer to the <a href="#module-arbitrary-async-operations">&quot;Arbitrary async operations&quot;</a> section.</p>
  </section>
</section>
<section class="detail" id="c:handle_call/3">

  <div class="detail-header">
    <a href="#c:handle_call/3" class="detail-link" data-no-tooltip="" aria-label="Link to this callback">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">handle_call(msg, {}, socket)</h1>

        <span class="note">(optional)</span>


        <a href="https://github.com/phoenixframework/phoenix_live_view/blob/v1.1.2/lib/phoenix_live_view.ex#L293" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@callback</span> handle_call(
  msg :: <a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types">term</a>(),
  {<a href="https://hexdocs.pm/elixir/typespecs.html#basic-types">pid</a>(), <a href="https://hexdocs.pm/elixir/typespecs.html#basic-types">reference</a>()},
  socket :: <a href="Phoenix.LiveView.Socket.xhtml#t:t/0">Phoenix.LiveView.Socket.t</a>()
) ::
  {:noreply, <a href="Phoenix.LiveView.Socket.xhtml#t:t/0">Phoenix.LiveView.Socket.t</a>()}
  | {:reply, <a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types">term</a>(), <a href="Phoenix.LiveView.Socket.xhtml#t:t/0">Phoenix.LiveView.Socket.t</a>()}</pre>

      </div>

<p>Invoked to handle calls from other Elixir processes.</p><p>See <a href="https://hexdocs.pm/elixir/GenServer.html#call/3"><code class="inline">GenServer.call/3</code></a> and <a href="https://hexdocs.pm/elixir/GenServer.html#c:handle_call/3"><code class="inline">GenServer.handle_call/3</code></a>
for more information.</p>
  </section>
</section>
<section class="detail" id="c:handle_cast/2">

  <div class="detail-header">
    <a href="#c:handle_cast/2" class="detail-link" data-no-tooltip="" aria-label="Link to this callback">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">handle_cast(msg, socket)</h1>

        <span class="note">(optional)</span>


        <a href="https://github.com/phoenixframework/phoenix_live_view/blob/v1.1.2/lib/phoenix_live_view.ex#L304" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@callback</span> handle_cast(msg :: <a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types">term</a>(), socket :: <a href="Phoenix.LiveView.Socket.xhtml#t:t/0">Phoenix.LiveView.Socket.t</a>()) ::
  {:noreply, <a href="Phoenix.LiveView.Socket.xhtml#t:t/0">Phoenix.LiveView.Socket.t</a>()}</pre>

      </div>

<p>Invoked to handle casts from other Elixir processes.</p><p>See <a href="https://hexdocs.pm/elixir/GenServer.html#cast/2"><code class="inline">GenServer.cast/2</code></a> and <a href="https://hexdocs.pm/elixir/GenServer.html#c:handle_cast/2"><code class="inline">GenServer.handle_cast/2</code></a>
for more information. It must always return <code class="inline">{:noreply, socket}</code>,
where <code class="inline">:noreply</code> means no additional information is sent
to the process which cast the message.</p>
  </section>
</section>
<section class="detail" id="c:handle_event/3">

  <div class="detail-header">
    <a href="#c:handle_event/3" class="detail-link" data-no-tooltip="" aria-label="Link to this callback">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">handle_event(event, unsigned_params, socket)</h1>

        <span class="note">(optional)</span>


        <a href="https://github.com/phoenixframework/phoenix_live_view/blob/v1.1.2/lib/phoenix_live_view.ex#L284" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@callback</span> handle_event(
  event :: <a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types">binary</a>(),
  <a href="#t:unsigned_params/0">unsigned_params</a>(),
  socket :: <a href="Phoenix.LiveView.Socket.xhtml#t:t/0">Phoenix.LiveView.Socket.t</a>()
) ::
  {:noreply, <a href="Phoenix.LiveView.Socket.xhtml#t:t/0">Phoenix.LiveView.Socket.t</a>()}
  | {:reply, <a href="https://hexdocs.pm/elixir/typespecs.html#basic-types">map</a>(), <a href="Phoenix.LiveView.Socket.xhtml#t:t/0">Phoenix.LiveView.Socket.t</a>()}</pre>

      </div>

<p>Invoked to handle events sent by the client.</p><p>It receives the <code class="inline">event</code> name, the event payload as a map,
and the socket.</p><p>It must return <code class="inline">{:noreply, socket}</code>, where <code class="inline">:noreply</code> means
no additional information is sent to the client, or
<code class="inline">{:reply, map(), socket}</code>, where the given <code class="inline">map()</code> is encoded
and sent as a reply to the client.</p>
  </section>
</section>
<section class="detail" id="c:handle_info/2">

  <div class="detail-header">
    <a href="#c:handle_info/2" class="detail-link" data-no-tooltip="" aria-label="Link to this callback">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">handle_info(msg, socket)</h1>

        <span class="note">(optional)</span>


        <a href="https://github.com/phoenixframework/phoenix_live_view/blob/v1.1.2/lib/phoenix_live_view.ex#L315" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@callback</span> handle_info(msg :: <a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types">term</a>(), socket :: <a href="Phoenix.LiveView.Socket.xhtml#t:t/0">Phoenix.LiveView.Socket.t</a>()) ::
  {:noreply, <a href="Phoenix.LiveView.Socket.xhtml#t:t/0">Phoenix.LiveView.Socket.t</a>()}</pre>

      </div>

<p>Invoked to handle messages from other Elixir processes.</p><p>See <a href="https://hexdocs.pm/elixir/Kernel.html#send/2"><code class="inline">Kernel.send/2</code></a> and <a href="https://hexdocs.pm/elixir/GenServer.html#c:handle_info/2"><code class="inline">GenServer.handle_info/2</code></a>
for more information. It must always return <code class="inline">{:noreply, socket}</code>,
where <code class="inline">:noreply</code> means no additional information is sent
to the process which sent the message.</p>
  </section>
</section>
<section class="detail" id="c:handle_params/3">

  <div class="detail-header">
    <a href="#c:handle_params/3" class="detail-link" data-no-tooltip="" aria-label="Link to this callback">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">handle_params(unsigned_params, uri, socket)</h1>

        <span class="note">(optional)</span>


        <a href="https://github.com/phoenixframework/phoenix_live_view/blob/v1.1.2/lib/phoenix_live_view.ex#L270" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@callback</span> handle_params(
  <a href="#t:unsigned_params/0">unsigned_params</a>(),
  uri :: <a href="https://hexdocs.pm/elixir/String.html#t:t/0">String.t</a>(),
  socket :: <a href="Phoenix.LiveView.Socket.xhtml#t:t/0">Phoenix.LiveView.Socket.t</a>()
) ::
  {:noreply, <a href="Phoenix.LiveView.Socket.xhtml#t:t/0">Phoenix.LiveView.Socket.t</a>()}</pre>

      </div>

<p>Invoked after mount and whenever there is a live patch event.</p><p>It receives the current <code class="inline">params</code>, including parameters from
the router, the current <code class="inline">uri</code> from the client and the <code class="inline">socket</code>.
It is invoked after mount or whenever there is a live navigation
event caused by <a href="#push_patch/2"><code class="inline">push_patch/2</code></a> or <code class="inline">&lt;.link patch={...}&gt;</code>.</p><p>It must always return <code class="inline">{:noreply, socket}</code>, where <code class="inline">:noreply</code>
means no additional information is sent to the client.</p><section role="note" class="admonition warning"><h4 class="admonition-title warning">Note</h4><p><code class="inline">handle_params</code> is only allowed on LiveViews mounted at the router,
as it takes the current url of the page as the second parameter.</p></section>
  </section>
</section>
<section class="detail" id="c:mount/3">

  <div class="detail-header">
    <a href="#c:mount/3" class="detail-link" data-no-tooltip="" aria-label="Link to this callback">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">mount(params, session, socket)</h1>

        <span class="note">(optional)</span>


        <a href="https://github.com/phoenixframework/phoenix_live_view/blob/v1.1.2/lib/phoenix_live_view.ex#L221" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@callback</span> mount(
  params :: <a href="#t:unsigned_params/0">unsigned_params</a>() | :not_mounted_at_router,
  session :: <a href="https://hexdocs.pm/elixir/typespecs.html#basic-types">map</a>(),
  socket :: <a href="Phoenix.LiveView.Socket.xhtml#t:t/0">Phoenix.LiveView.Socket.t</a>()
) ::
  {:ok, <a href="Phoenix.LiveView.Socket.xhtml#t:t/0">Phoenix.LiveView.Socket.t</a>()}
  | {:ok, <a href="Phoenix.LiveView.Socket.xhtml#t:t/0">Phoenix.LiveView.Socket.t</a>(), <a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types">keyword</a>()}</pre>

      </div>

<p>The LiveView entry-point.</p><p>For each LiveView in the root of a template, <a href="#c:mount/3"><code class="inline">mount/3</code></a> is invoked twice:
once to do the initial page load and again to establish the live socket.</p><p>It expects three arguments:</p><ul><li><code class="inline">params</code> - a map of string keys which contain public information that
can be set by the user. The map contains the query params as well as any
router path parameter. If the LiveView was not mounted at the router,
this argument is the atom <code class="inline">:not_mounted_at_router</code></li><li><code class="inline">session</code> - the connection session</li><li><code class="inline">socket</code> - the LiveView socket</li></ul><p>It must return either <code class="inline">{:ok, socket}</code> or <code class="inline">{:ok, socket, options}</code>, where
<code class="inline">options</code> is one of:</p><ul><li><p><code class="inline">:temporary_assigns</code> - a keyword list of assigns that are temporary
and must be reset to their value after every render. Note that once
the value is reset, it won't be re-rendered again until it is explicitly
assigned</p></li><li><p><code class="inline">:layout</code> - the optional layout to be used by the LiveView. Setting
this option will override any layout previously set via
<a href="Phoenix.LiveView.Router.xhtml#live_session/2"><code class="inline">Phoenix.LiveView.Router.live_session/2</code></a> or on <code class="inline">use Phoenix.LiveView</code></p></li></ul>
  </section>
</section>
<section class="detail" id="c:render/1">

  <div class="detail-header">
    <a href="#c:render/1" class="detail-link" data-no-tooltip="" aria-label="Link to this callback">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">render(assigns)</h1>

        <span class="note">(optional)</span>


        <a href="https://github.com/phoenixframework/phoenix_live_view/blob/v1.1.2/lib/phoenix_live_view.ex#L243" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@callback</span> render(assigns :: <a href="Phoenix.LiveView.Socket.xhtml#t:assigns/0">Phoenix.LiveView.Socket.assigns</a>()) ::
  <a href="Phoenix.LiveView.Rendered.xhtml#t:t/0">Phoenix.LiveView.Rendered.t</a>()</pre>

      </div>

<p>Renders a template.</p><p>This callback is invoked whenever LiveView detects
new content must be rendered and sent to the client.</p><p>If you define this function, it must return a template
defined via the <a href="Phoenix.Component.xhtml#sigil_H/2"><code class="inline">Phoenix.Component.sigil_H/2</code></a>.</p><p>If you don't define this function, LiveView will attempt
to render a template in the same directory as your LiveView.
For example, if you have a LiveView named <code class="inline">MyApp.MyCustomView</code>
inside <code class="inline">lib/my_app/live_views/my_custom_view.ex</code>, Phoenix
will look for a template at <code class="inline">lib/my_app/live_views/my_custom_view.html.heex</code>.</p>
  </section>
</section>
<section class="detail" id="c:terminate/2">

  <div class="detail-header">
    <a href="#c:terminate/2" class="detail-link" data-no-tooltip="" aria-label="Link to this callback">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">terminate(reason, socket)</h1>

        <span class="note">(optional)</span>


        <a href="https://github.com/phoenixframework/phoenix_live_view/blob/v1.1.2/lib/phoenix_live_view.ex#L251" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@callback</span> terminate(reason, socket :: <a href="Phoenix.LiveView.Socket.xhtml#t:t/0">Phoenix.LiveView.Socket.t</a>()) :: <a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types">term</a>()
when reason: :normal | :shutdown | {:shutdown, :left | :closed | <a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types">term</a>()}</pre>

      </div>

<p>Invoked when the LiveView is terminating.</p><p>In case of errors, this callback is only invoked if the LiveView
is trapping exits. See <a href="https://hexdocs.pm/elixir/GenServer.html#c:terminate/2"><code class="inline">GenServer.terminate/2</code></a> for more info.</p>
  </section>
</section>

        </div>
      </section>

      <section id="functions" class="details-list">
        <h1 class="section-heading">Functions</h1>
        <div class="functions-list">
<section class="detail" id="__live__/1">

    <span id="__live__/0"></span>

  <div class="detail-header">
    <a href="#__live__/1" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">__live__(opts \\ [])</h1>


        <a href="https://github.com/phoenixframework/phoenix_live_view/blob/v1.1.2/lib/phoenix_live_view.ex#L431" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

<p>Defines metadata for a LiveView.</p><p>This must be returned from the <code class="inline">__live__</code> callback.</p><p>It accepts:</p><ul><li><p><code class="inline">:container</code> - an optional tuple for the HTML tag and DOM attributes to
be used for the LiveView container. For example: <code class="inline">{:li, style: &quot;color: blue;&quot;}</code>.</p></li><li><p><code class="inline">:layout</code> - configures the layout the LiveView will be rendered in.
This layout can be overridden by on <a href="#c:mount/3"><code class="inline">mount/3</code></a> or via the <code class="inline">:layout</code>
option in <a href="Phoenix.LiveView.Router.xhtml#live_session/2"><code class="inline">Phoenix.LiveView.Router.live_session/2</code></a></p></li><li><p><code class="inline">:log</code> - configures the log level for the LiveView, either <code class="inline">false</code>
or a log level</p></li><li><p><code class="inline">:on_mount</code> - a list of tuples with module names and argument to be invoked
as <code class="inline">on_mount</code> hooks</p></li></ul>
  </section>
</section>
<section class="detail" id="__using__/1">

  <div class="detail-header">
    <a href="#__using__/1" class="detail-link" data-no-tooltip="" aria-label="Link to this macro">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">__using__(opts)</h1>

        <span class="note">(macro)</span>


        <a href="https://github.com/phoenixframework/phoenix_live_view/blob/v1.1.2/lib/phoenix_live_view.ex#L367" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

<p>Uses LiveView in the current module to mark it a LiveView.</p><pre><code class="makeup elixir" translate="no"><samp class="kn">use</samp><samp class="w"> </samp><samp class="nc">Phoenix.LiveView</samp><samp class="p">,</samp><samp class="w">
  </samp><samp class="ss">container</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="8244725718-1">{</samp><samp class="ss">:tr</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">class</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;colorized&quot;</samp><samp class="p" data-group-id="8244725718-1">}</samp><samp class="p">,</samp><samp class="w">
  </samp><samp class="ss">layout</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="8244725718-2">{</samp><samp class="nc">MyAppWeb.Layouts</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:app</samp><samp class="p" data-group-id="8244725718-2">}</samp><samp class="p">,</samp><samp class="w">
  </samp><samp class="ss">log</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="ss">:info</samp></code></pre><h2 id="__using__/1-options" class="section-heading"><a href="#__using__/1-options" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Options</span></h2><ul><li><p><code class="inline">:container</code> - an optional tuple for the HTML tag and DOM attributes to
be used for the LiveView container. For example: <code class="inline">{:li, style: &quot;color: blue;&quot;}</code>.
See <a href="Phoenix.Component.xhtml#live_render/3"><code class="inline">Phoenix.Component.live_render/3</code></a> for more information and examples.</p></li><li><p><code class="inline">:global_prefixes</code> - the global prefixes to use for components. See
<code class="inline">Global Attributes</code> in <a href="Phoenix.Component.xhtml"><code class="inline">Phoenix.Component</code></a> for more information.</p></li><li><p><code class="inline">:layout</code> - configures the layout the LiveView will be rendered in.
This layout can be overridden by on <a href="#c:mount/3"><code class="inline">mount/3</code></a> or via the <code class="inline">:layout</code>
option in <a href="Phoenix.LiveView.Router.xhtml#live_session/2"><code class="inline">Phoenix.LiveView.Router.live_session/2</code></a></p></li><li><p><code class="inline">:log</code> - configures the log level for the LiveView, either <code class="inline">false</code>
or a log level</p></li></ul>
  </section>
</section>
<section class="detail" id="allow_upload/3">

  <div class="detail-header">
    <a href="#allow_upload/3" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">allow_upload(socket, name, options)</h1>


        <a href="https://github.com/phoenixframework/phoenix_live_view/blob/v1.1.2/lib/phoenix_live_view.ex#L847" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

<p>Allows an upload for the provided name.</p><h2 id="allow_upload/3-options" class="section-heading"><a href="#allow_upload/3-options" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Options</span></h2><ul><li><p><code class="inline">:accept</code> - Required. A list of unique file extensions (such as &quot;.jpeg&quot;) or
mime type (such as &quot;image/jpeg&quot; or &quot;image/*&quot;). You may also pass the atom
<code class="inline">:any</code> instead of a list to support to allow any kind of file.
For example, <code class="inline">[&quot;.jpeg&quot;]</code>, <code class="inline">:any</code>, etc.</p></li><li><p><code class="inline">:max_entries</code> - The maximum number of selected files to allow per
file input. Defaults to 1.</p></li><li><p><code class="inline">:max_file_size</code> - The maximum file size in bytes to allow to be uploaded.
Defaults 8MB. For example, <code class="inline">12_000_000</code>.</p></li><li><p><code class="inline">:chunk_size</code> - The chunk size in bytes to send when uploading.
Defaults <code class="inline">64_000</code>.</p></li><li><p><code class="inline">:chunk_timeout</code> - The time in milliseconds to wait before closing the
upload channel when a new chunk has not been received. Defaults to <code class="inline">10_000</code>.</p></li><li><p><code class="inline">:external</code> - A 2-arity function for generating metadata for external
client uploaders. This function must return either <code class="inline">{:ok, meta, socket}</code>
or <code class="inline">{:error, meta, socket}</code> where meta is a map. See the Uploads section
for example usage.</p></li><li><p><code class="inline">:progress</code> - An optional 3-arity function for receiving progress events.</p></li><li><p><code class="inline">:auto_upload</code> - Instructs the client to upload the file automatically
on file selection instead of waiting for form submits. Defaults to <code class="inline">false</code>.</p></li><li><p><code class="inline">:writer</code> - A module implementing the <a href="Phoenix.LiveView.UploadWriter.xhtml"><code class="inline">Phoenix.LiveView.UploadWriter</code></a>
behaviour to use for writing the uploaded chunks. Defaults to writing to a
temporary file for consumption. See the <a href="Phoenix.LiveView.UploadWriter.xhtml"><code class="inline">Phoenix.LiveView.UploadWriter</code></a> docs
for custom usage.</p></li></ul><p>Raises when a previously allowed upload under the same name is still active.</p><h2 id="allow_upload/3-examples" class="section-heading"><a href="#allow_upload/3-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="n">allow_upload</samp><samp class="p" data-group-id="9251025839-1">(</samp><samp class="n">socket</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:avatar</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">accept</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="sx">~w(.jpg .jpeg)</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">max_entries</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">2</samp><samp class="p" data-group-id="9251025839-1">)</samp><samp class="w">
</samp><samp class="n">allow_upload</samp><samp class="p" data-group-id="9251025839-2">(</samp><samp class="n">socket</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:avatar</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">accept</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="ss">:any</samp><samp class="p" data-group-id="9251025839-2">)</samp></code></pre><p>For consuming files automatically as they are uploaded, you can pair <code class="inline">auto_upload: true</code> with
a custom progress function to consume the entries as they are completed. For example:</p><pre><code class="makeup elixir" translate="no"><samp class="n">allow_upload</samp><samp class="p" data-group-id="1299818385-1">(</samp><samp class="n">socket</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:avatar</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">accept</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="ss">:any</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">progress</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="o">&amp;</samp><samp class="n">handle_progress</samp><samp class="o">/</samp><samp class="mi">3</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">auto_upload</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">true</samp><samp class="p" data-group-id="1299818385-1">)</samp><samp class="w">

</samp><samp class="kd">defp</samp><samp class="w"> </samp><samp class="nf">handle_progress</samp><samp class="p" data-group-id="1299818385-2">(</samp><samp class="ss">:avatar</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">entry</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">socket</samp><samp class="p" data-group-id="1299818385-2">)</samp><samp class="w"> </samp><samp class="k" data-group-id="1299818385-3">do</samp><samp class="w">
  </samp><samp class="k">if</samp><samp class="w"> </samp><samp class="n">entry</samp><samp class="o">.</samp><samp class="n">done?</samp><samp class="w"> </samp><samp class="k" data-group-id="1299818385-4">do</samp><samp class="w">
    </samp><samp class="n">uploaded_file</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w">
      </samp><samp class="n">consume_uploaded_entry</samp><samp class="p" data-group-id="1299818385-5">(</samp><samp class="n">socket</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">entry</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="k" data-group-id="1299818385-6">fn</samp><samp class="w"> </samp><samp class="p" data-group-id="1299818385-7">%{</samp><samp class="p" data-group-id="1299818385-7">}</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="n">meta</samp><samp class="w"> </samp><samp class="o">-&gt;</samp><samp class="w">
        </samp><samp class="p" data-group-id="1299818385-8">{</samp><samp class="ss">:ok</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">...</samp><samp class="p" data-group-id="1299818385-8">}</samp><samp class="w">
      </samp><samp class="k" data-group-id="1299818385-6">end</samp><samp class="p" data-group-id="1299818385-5">)</samp><samp class="w">

    </samp><samp class="p" data-group-id="1299818385-9">{</samp><samp class="ss">:noreply</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">put_flash</samp><samp class="p" data-group-id="1299818385-10">(</samp><samp class="n">socket</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:info</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;file </samp><samp class="si" data-group-id="1299818385-11">#{</samp><samp class="n">uploaded_file</samp><samp class="o">.</samp><samp class="n">name</samp><samp class="si" data-group-id="1299818385-11">}</samp><samp class="s"> uploaded&quot;</samp><samp class="p" data-group-id="1299818385-10">)</samp><samp class="p" data-group-id="1299818385-9">}</samp><samp class="w">
  </samp><samp class="k" data-group-id="1299818385-4">else</samp><samp class="w">
    </samp><samp class="p" data-group-id="1299818385-12">{</samp><samp class="ss">:noreply</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">socket</samp><samp class="p" data-group-id="1299818385-12">}</samp><samp class="w">
  </samp><samp class="k" data-group-id="1299818385-4">end</samp><samp class="w">
</samp><samp class="k" data-group-id="1299818385-3">end</samp></code></pre>
  </section>
</section>
<section class="detail" id="assign_async/4">

    <span id="assign_async/3"></span>

  <div class="detail-header">
    <a href="#assign_async/4" class="detail-link" data-no-tooltip="" aria-label="Link to this macro">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">assign_async(socket, key_or_keys, func, opts \\ [])</h1>

        <span class="note">(macro)</span>


        <a href="https://github.com/phoenixframework/phoenix_live_view/blob/v1.1.2/lib/phoenix_live_view.ex#L2205" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

<p>Assigns keys asynchronously.</p><p>Wraps your function in a task linked to the caller, errors are wrapped.
Each key passed to <a href="#assign_async/3"><code class="inline">assign_async/3</code></a> will be assigned to
an <a href="Phoenix.LiveView.AsyncResult.xhtml"><code class="inline">Phoenix.LiveView.AsyncResult</code></a> struct holding the status of the operation
and the result when the function completes.</p><p>The task is only started when the socket is connected.</p><h2 id="assign_async/4-options" class="section-heading"><a href="#assign_async/4-options" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Options</span></h2><ul><li><code class="inline">:supervisor</code> - allows you to specify a <a href="https://hexdocs.pm/elixir/Task.Supervisor.html"><code class="inline">Task.Supervisor</code></a> to supervise the task.</li><li><code class="inline">:reset</code> - remove previous results during async operation when true. Possible values are
<code class="inline">true</code>, <code class="inline">false</code>, or a list of keys to reset. Defaults to <code class="inline">false</code>.</li></ul><h2 id="assign_async/4-examples" class="section-heading"><a href="#assign_async/4-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="kd">def</samp><samp class="w"> </samp><samp class="nf">mount</samp><samp class="p" data-group-id="8236582419-1">(</samp><samp class="p" data-group-id="8236582419-2">%{</samp><samp class="s">&quot;slug&quot;</samp><samp class="w"> </samp><samp class="p">=&gt;</samp><samp class="w"> </samp><samp class="n">slug</samp><samp class="p" data-group-id="8236582419-2">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="bp">_</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">socket</samp><samp class="p" data-group-id="8236582419-1">)</samp><samp class="w"> </samp><samp class="k" data-group-id="8236582419-3">do</samp><samp class="w">
  </samp><samp class="p" data-group-id="8236582419-4">{</samp><samp class="ss">:ok</samp><samp class="p">,</samp><samp class="w">
    </samp><samp class="n">socket</samp><samp class="w">
    </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="n">assign</samp><samp class="p" data-group-id="8236582419-5">(</samp><samp class="ss">:foo</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;bar&quot;</samp><samp class="p" data-group-id="8236582419-5">)</samp><samp class="w">
    </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="n">assign_async</samp><samp class="p" data-group-id="8236582419-6">(</samp><samp class="ss">:org</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="k" data-group-id="8236582419-7">fn</samp><samp class="w"> </samp><samp class="o">-&gt;</samp><samp class="w"> </samp><samp class="p" data-group-id="8236582419-8">{</samp><samp class="ss">:ok</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="8236582419-9">%{</samp><samp class="ss">org</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="n">fetch_org!</samp><samp class="p" data-group-id="8236582419-10">(</samp><samp class="n">slug</samp><samp class="p" data-group-id="8236582419-10">)</samp><samp class="p" data-group-id="8236582419-9">}</samp><samp class="p" data-group-id="8236582419-8">}</samp><samp class="w"> </samp><samp class="k" data-group-id="8236582419-7">end</samp><samp class="p" data-group-id="8236582419-6">)</samp><samp class="w">
    </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="n">assign_async</samp><samp class="p" data-group-id="8236582419-11">(</samp><samp class="p" data-group-id="8236582419-12">[</samp><samp class="ss">:profile</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:rank</samp><samp class="p" data-group-id="8236582419-12">]</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="k" data-group-id="8236582419-13">fn</samp><samp class="w"> </samp><samp class="o">-&gt;</samp><samp class="w"> </samp><samp class="p" data-group-id="8236582419-14">{</samp><samp class="ss">:ok</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="8236582419-15">%{</samp><samp class="ss">profile</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="n">...</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">rank</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="n">...</samp><samp class="p" data-group-id="8236582419-15">}</samp><samp class="p" data-group-id="8236582419-14">}</samp><samp class="w"> </samp><samp class="k" data-group-id="8236582419-13">end</samp><samp class="p" data-group-id="8236582419-11">)</samp><samp class="p" data-group-id="8236582419-4">}</samp><samp class="w">
</samp><samp class="k" data-group-id="8236582419-3">end</samp></code></pre><p>See <a href="#module-async-operations">Async Operations</a> for more information.</p><h2 id="assign_async/4-assign_async-3-and-send_update-3" class="section-heading"><a href="#assign_async/4-assign_async-3-and-send_update-3" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text"><a href="#assign_async/3"><code class="inline">assign_async/3</code></a> and <a href="#send_update/3"><code class="inline">send_update/3</code></a></span></h2><p>Since the code inside <a href="#assign_async/3"><code class="inline">assign_async/3</code></a> runs in a separate process,
<code class="inline">send_update(Component, data)</code> does not work inside <a href="#assign_async/3"><code class="inline">assign_async/3</code></a>,
since <a href="#send_update/2"><code class="inline">send_update/2</code></a> assumes it is running inside the LiveView process.
The solution is to explicitly send the update to the LiveView:</p><pre><code class="makeup elixir" translate="no"><samp class="n">parent</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="n">self</samp><samp class="p" data-group-id="6444039153-1">(</samp><samp class="p" data-group-id="6444039153-1">)</samp><samp class="w">
</samp><samp class="n">assign_async</samp><samp class="p" data-group-id="6444039153-2">(</samp><samp class="n">socket</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:org</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="k" data-group-id="6444039153-3">fn</samp><samp class="w"> </samp><samp class="o">-&gt;</samp><samp class="w">
  </samp><samp class="c1"># ...</samp><samp class="w">
  </samp><samp class="n">send_update</samp><samp class="p" data-group-id="6444039153-4">(</samp><samp class="n">parent</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="nc">Component</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">data</samp><samp class="p" data-group-id="6444039153-4">)</samp><samp class="w">
</samp><samp class="k" data-group-id="6444039153-3">end</samp><samp class="p" data-group-id="6444039153-2">)</samp></code></pre><h2 id="assign_async/4-testing-async-operations" class="section-heading"><a href="#assign_async/4-testing-async-operations" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Testing async operations</span></h2><p>When testing LiveViews and LiveComponents with async assigns, use
<a href="Phoenix.LiveViewTest.xhtml#render_async/2"><code class="inline">Phoenix.LiveViewTest.render_async/2</code></a> to ensure the test waits until the async operations
are complete before proceeding with assertions or before ending the test. For example:</p><pre><code class="makeup elixir" translate="no"><samp class="p" data-group-id="1854567972-1">{</samp><samp class="ss">:ok</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">view</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="c">_html</samp><samp class="p" data-group-id="1854567972-1">}</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="n">live</samp><samp class="p" data-group-id="1854567972-2">(</samp><samp class="n">conn</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;/my_live_view&quot;</samp><samp class="p" data-group-id="1854567972-2">)</samp><samp class="w">
</samp><samp class="n">html</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="n">render_async</samp><samp class="p" data-group-id="1854567972-3">(</samp><samp class="n">view</samp><samp class="p" data-group-id="1854567972-3">)</samp><samp class="w">
</samp><samp class="n">assert</samp><samp class="w"> </samp><samp class="n">html</samp><samp class="w"> </samp><samp class="o">=~</samp><samp class="w"> </samp><samp class="s">&quot;My assertion&quot;</samp></code></pre><p>Not calling <code class="inline">render_async/2</code> to ensure all async assigns have finished might result in errors in
cases where your process has side effects:</p><pre><code class="makeup elixir" translate="no"><samp class="p" data-group-id="2180584050-1">[</samp><samp class="n">error</samp><samp class="p" data-group-id="2180584050-1">]</samp><samp class="w"> </samp><samp class="nc">MyXQL.Connection</samp><samp class="w"> </samp><samp class="p" data-group-id="2180584050-2">(</samp><samp class="p" data-group-id="2180584050-3">#</samp><samp class="nc" data-group-id="2180584050-3">PID</samp><samp class="p" data-group-id="2180584050-3">&lt;</samp><samp class="mi">0</samp><samp class="o">.</samp><samp class="mi">308</samp><samp class="o">.</samp><samp class="mi">0</samp><samp class="p" data-group-id="2180584050-3">&gt;</samp><samp class="p" data-group-id="2180584050-2">)</samp><samp class="w"> </samp><samp class="ss">disconnected</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="o">*</samp><samp class="o">*</samp><samp class="w"> </samp><samp class="p" data-group-id="2180584050-4">(</samp><samp class="nc">DBConnection.ConnectionError</samp><samp class="p" data-group-id="2180584050-4">)</samp><samp class="w"> </samp><samp class="n">client</samp><samp class="w"> </samp><samp class="p" data-group-id="2180584050-5">#</samp><samp class="nc" data-group-id="2180584050-5">PID</samp><samp class="p" data-group-id="2180584050-5">&lt;</samp><samp class="mi">0</samp><samp class="o">.</samp><samp class="mi">794</samp><samp class="o">.</samp><samp class="mi">0</samp><samp class="p" data-group-id="2180584050-5">&gt;</samp></code></pre>
  </section>
</section>
<section class="detail" id="attach_hook/4">

  <div class="detail-header">
    <a href="#attach_hook/4" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">attach_hook(socket, name, stage, fun)</h1>


        <a href="https://github.com/phoenixframework/phoenix_live_view/blob/v1.1.2/lib/phoenix_live_view.ex#L1664" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

<p>Attaches the given <code class="inline">fun</code> by <code class="inline">name</code> for the lifecycle <code class="inline">stage</code> into <code class="inline">socket</code>.</p><blockquote><p>Note: This function is for server-side lifecycle callbacks.
For client-side hooks, see the
<a href="js-interop.html#client-hooks-via-phx-hook">JS Interop guide</a>.</p></blockquote><p>Hooks provide a mechanism to tap into key stages of the LiveView
lifecycle in order to bind/update assigns, intercept events,
patches, and regular messages when necessary, and to inject
common functionality. Use <a href="#attach_hook/4"><code class="inline">attach_hook/4</code></a> on any of the following
lifecycle stages: <code class="inline">:handle_params</code>, <code class="inline">:handle_event</code>, <code class="inline">:handle_info</code>, <code class="inline">:handle_async</code>, and
<code class="inline">:after_render</code>. To attach a hook to the <code class="inline">:mount</code> stage, use <a href="#on_mount/1"><code class="inline">on_mount/1</code></a>.</p><blockquote><p>Note: only <code class="inline">:after_render</code> and <code class="inline">:handle_event</code> hooks are currently supported in
LiveComponents.</p></blockquote><h2 id="attach_hook/4-return-values" class="section-heading"><a href="#attach_hook/4-return-values" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Return Values</span></h2><p>Lifecycle hooks take place immediately before a given lifecycle
callback is invoked on the LiveView. With the exception of <code class="inline">:after_render</code>,
a hook may return <code class="inline">{:halt, socket}</code> to halt the reduction, otherwise
it must return <code class="inline">{:cont, socket}</code> so the operation may continue until
all hooks have been invoked for the current stage.</p><p>For <code class="inline">:after_render</code> hooks, the <code class="inline">socket</code> itself must be returned.
Any updates to the socket assigns <em>will not</em> trigger a new render
or diff calculation to the client.</p><h2 id="attach_hook/4-halting-the-lifecycle" class="section-heading"><a href="#attach_hook/4-halting-the-lifecycle" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Halting the lifecycle</span></h2><p>Note that halting from a hook <em>will halt the entire lifecycle stage</em>.
This means that when a hook returns <code class="inline">{:halt, socket}</code> then the
LiveView callback will <strong>not</strong> be invoked. This has some
implications.</p><h3 id="attach_hook/4-implications-for-plugin-authors" class="section-heading"><a href="#attach_hook/4-implications-for-plugin-authors" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Implications for plugin authors</span></h3><p>When defining a plugin that matches on specific callbacks, you <strong>must</strong>
define a catch-all clause, as your hook will be invoked even for events
you may not be interested in.</p><h3 id="attach_hook/4-implications-for-end-users" class="section-heading"><a href="#attach_hook/4-implications-for-end-users" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Implications for end-users</span></h3><p>Allowing a hook to halt the invocation of the callback means that you can
attach hooks to intercept specific events before detaching themselves,
while allowing other events to continue normally.</p><h2 id="attach_hook/4-replying-to-events" class="section-heading"><a href="#attach_hook/4-replying-to-events" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Replying to events</span></h2><p>Hooks attached to the <code class="inline">:handle_event</code> stage are able to reply to client events
by returning <code class="inline">{:halt, reply, socket}</code>. This is useful especially for <a href="js-interop.html#client-hooks-via-phx-hook">JavaScript
interoperability</a> because a client hook
can push an event and receive a reply.</p><h2 id="attach_hook/4-sharing-event-handling-logic" class="section-heading"><a href="#attach_hook/4-sharing-event-handling-logic" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Sharing event handling logic</span></h2><p>Lifecycle hooks are an excellent way to extract related events out of the parent LiveView and
into separate modules without resorting unnecessarily to LiveComponents for organization.</p><pre><code class="makeup elixir" translate="no"><samp class="kd">defmodule</samp><samp class="w"> </samp><samp class="nc">DemoLive</samp><samp class="w"> </samp><samp class="k" data-group-id="7271995673-1">do</samp><samp class="w">
  </samp><samp class="kn">use</samp><samp class="w"> </samp><samp class="nc">Phoenix.LiveView</samp><samp class="w">

  </samp><samp class="kd">def</samp><samp class="w"> </samp><samp class="nf">render</samp><samp class="p" data-group-id="7271995673-2">(</samp><samp class="n">assigns</samp><samp class="p" data-group-id="7271995673-2">)</samp><samp class="w"> </samp><samp class="k" data-group-id="7271995673-3">do</samp><samp class="w">
    </samp><samp class="sx">~H&quot;&quot;&quot;</samp><samp class="w">
</samp><samp class="w">    </samp><samp class="p">&lt;</samp><samp class="nt">div</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="w">      </samp><samp class="p">&lt;</samp><samp class="nt">div</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="n">        Counter: </samp><samp class="p" data-group-id="2042896510-1">{</samp><samp class="na">@counter</samp><samp class="p" data-group-id="2042896510-1">}</samp><samp class="n">
</samp><samp class="w">        </samp><samp class="p">&lt;</samp><samp class="nt">button</samp><samp class="w"> </samp><samp class="na">phx-click</samp><samp class="p">=</samp><samp class="p">&quot;</samp><samp class="s2">inc</samp><samp class="p">&quot;</samp><samp class="p">&gt;</samp><samp class="n">+</samp><samp class="p">&lt;/</samp><samp class="nt">button</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="w">      </samp><samp class="p">&lt;/</samp><samp class="nt">div</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="w">
</samp><samp class="w">      </samp><samp class="p">&lt;</samp><samp class="nc">MySortComponent</samp><samp class="o">.</samp><samp class="n">display</samp><samp class="w"> </samp><samp class="na">lists</samp><samp class="p">=</samp><samp class="p" data-group-id="2042896510-2">{</samp><samp class="p" data-group-id="7271995673-4">[</samp><samp class="ss">first_list</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="na">@first_list</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">second_list</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="na">@second_list</samp><samp class="p" data-group-id="7271995673-4">]</samp><samp class="p" data-group-id="2042896510-2">}</samp><samp class="w"> </samp><samp class="p">/&gt;</samp><samp class="w">
</samp><samp class="w">    </samp><samp class="p">&lt;/</samp><samp class="nt">div</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="w">    </samp><samp class="sx">&quot;&quot;&quot;</samp><samp class="w">
  </samp><samp class="k" data-group-id="7271995673-3">end</samp><samp class="w">

  </samp><samp class="kd">def</samp><samp class="w"> </samp><samp class="nf">mount</samp><samp class="p" data-group-id="7271995673-5">(</samp><samp class="c">_params</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="c">_session</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">socket</samp><samp class="p" data-group-id="7271995673-5">)</samp><samp class="w"> </samp><samp class="k" data-group-id="7271995673-6">do</samp><samp class="w">
    </samp><samp class="n">first_list</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="k">for</samp><samp class="p" data-group-id="7271995673-7">(</samp><samp class="n">i</samp><samp class="w"> </samp><samp class="o">&lt;-</samp><samp class="w"> </samp><samp class="mi">1</samp><samp class="o">..</samp><samp class="mi">9</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">do</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;First List </samp><samp class="si" data-group-id="7271995673-8">#{</samp><samp class="n">i</samp><samp class="si" data-group-id="7271995673-8">}</samp><samp class="s">&quot;</samp><samp class="p" data-group-id="7271995673-7">)</samp><samp class="w"> </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Enum</samp><samp class="o">.</samp><samp class="n">shuffle</samp><samp class="p" data-group-id="7271995673-9">(</samp><samp class="p" data-group-id="7271995673-9">)</samp><samp class="w">
    </samp><samp class="n">second_list</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="k">for</samp><samp class="p" data-group-id="7271995673-10">(</samp><samp class="n">i</samp><samp class="w"> </samp><samp class="o">&lt;-</samp><samp class="w"> </samp><samp class="mi">1</samp><samp class="o">..</samp><samp class="mi">9</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">do</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;Second List </samp><samp class="si" data-group-id="7271995673-11">#{</samp><samp class="n">i</samp><samp class="si" data-group-id="7271995673-11">}</samp><samp class="s">&quot;</samp><samp class="p" data-group-id="7271995673-10">)</samp><samp class="w"> </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Enum</samp><samp class="o">.</samp><samp class="n">shuffle</samp><samp class="p" data-group-id="7271995673-12">(</samp><samp class="p" data-group-id="7271995673-12">)</samp><samp class="w">

    </samp><samp class="n">socket</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w">
      </samp><samp class="n">socket</samp><samp class="w">
      </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="n">assign</samp><samp class="p" data-group-id="7271995673-13">(</samp><samp class="ss">:counter</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">0</samp><samp class="p" data-group-id="7271995673-13">)</samp><samp class="w">
      </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="n">assign</samp><samp class="p" data-group-id="7271995673-14">(</samp><samp class="ss">first_list</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="n">first_list</samp><samp class="p" data-group-id="7271995673-14">)</samp><samp class="w">
      </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="n">assign</samp><samp class="p" data-group-id="7271995673-15">(</samp><samp class="ss">second_list</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="n">second_list</samp><samp class="p" data-group-id="7271995673-15">)</samp><samp class="w">
      </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="n">attach_hook</samp><samp class="p" data-group-id="7271995673-16">(</samp><samp class="ss">:sort</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:handle_event</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="o">&amp;</samp><samp class="nc">MySortComponent</samp><samp class="o">.</samp><samp class="n">hooked_event</samp><samp class="o">/</samp><samp class="mi">3</samp><samp class="p" data-group-id="7271995673-16">)</samp><samp class="w">  </samp><samp class="c1"># 2) Delegated events</samp><samp class="w">
    </samp><samp class="p" data-group-id="7271995673-17">{</samp><samp class="ss">:ok</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">socket</samp><samp class="p" data-group-id="7271995673-17">}</samp><samp class="w">
  </samp><samp class="k" data-group-id="7271995673-6">end</samp><samp class="w">

  </samp><samp class="c1"># 1) Normal event</samp><samp class="w">
  </samp><samp class="kd">def</samp><samp class="w"> </samp><samp class="nf">handle_event</samp><samp class="p" data-group-id="7271995673-18">(</samp><samp class="s">&quot;inc&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="c">_params</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">socket</samp><samp class="p" data-group-id="7271995673-18">)</samp><samp class="w"> </samp><samp class="k" data-group-id="7271995673-19">do</samp><samp class="w">
    </samp><samp class="p" data-group-id="7271995673-20">{</samp><samp class="ss">:noreply</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">update</samp><samp class="p" data-group-id="7271995673-21">(</samp><samp class="n">socket</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:counter</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="o">&amp;</samp><samp class="p" data-group-id="7271995673-22">(</samp><samp class="ni">&amp;1</samp><samp class="w"> </samp><samp class="o">+</samp><samp class="w"> </samp><samp class="mi">1</samp><samp class="p" data-group-id="7271995673-22">)</samp><samp class="p" data-group-id="7271995673-21">)</samp><samp class="p" data-group-id="7271995673-20">}</samp><samp class="w">
  </samp><samp class="k" data-group-id="7271995673-19">end</samp><samp class="w">
</samp><samp class="k" data-group-id="7271995673-1">end</samp><samp class="w">

</samp><samp class="kd">defmodule</samp><samp class="w"> </samp><samp class="nc">MySortComponent</samp><samp class="w"> </samp><samp class="k" data-group-id="7271995673-23">do</samp><samp class="w">
  </samp><samp class="kn">use</samp><samp class="w"> </samp><samp class="nc">Phoenix.Component</samp><samp class="w">

  </samp><samp class="kd">def</samp><samp class="w"> </samp><samp class="nf">display</samp><samp class="p" data-group-id="7271995673-24">(</samp><samp class="n">assigns</samp><samp class="p" data-group-id="7271995673-24">)</samp><samp class="w"> </samp><samp class="k" data-group-id="7271995673-25">do</samp><samp class="w">
    </samp><samp class="sx">~H&quot;&quot;&quot;</samp><samp class="w">
</samp><samp class="w">    </samp><samp class="p">&lt;</samp><samp class="nt">div</samp><samp class="w"> </samp><samp class="na">:for</samp><samp class="p">=</samp><samp class="p" data-group-id="7271970103-1">{</samp><samp class="p" data-group-id="7271995673-26">{</samp><samp class="n">key</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">list</samp><samp class="p" data-group-id="7271995673-26">}</samp><samp class="w"> </samp><samp class="o">&lt;-</samp><samp class="w"> </samp><samp class="na">@lists</samp><samp class="p" data-group-id="7271970103-1">}</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="w">      </samp><samp class="p">&lt;</samp><samp class="nt">ul</samp><samp class="p">&gt;</samp><samp class="p">&lt;</samp><samp class="nt">li</samp><samp class="w"> </samp><samp class="na">:for</samp><samp class="p">=</samp><samp class="p" data-group-id="7271970103-2">{</samp><samp class="n">item</samp><samp class="w"> </samp><samp class="o">&lt;-</samp><samp class="w"> </samp><samp class="n">list</samp><samp class="p" data-group-id="7271970103-2">}</samp><samp class="p">&gt;</samp><samp class="p" data-group-id="7271970103-3">{</samp><samp class="n">item</samp><samp class="p" data-group-id="7271970103-3">}</samp><samp class="p">&lt;/</samp><samp class="nt">li</samp><samp class="p">&gt;</samp><samp class="p">&lt;/</samp><samp class="nt">ul</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="w">      </samp><samp class="p">&lt;</samp><samp class="nt">button</samp><samp class="w"> </samp><samp class="na">phx-click</samp><samp class="p">=</samp><samp class="p">&quot;</samp><samp class="s2">shuffle</samp><samp class="p">&quot;</samp><samp class="w"> </samp><samp class="na">phx-value-list</samp><samp class="p">=</samp><samp class="p" data-group-id="7271970103-4">{</samp><samp class="n">key</samp><samp class="p" data-group-id="7271970103-4">}</samp><samp class="p">&gt;</samp><samp class="n">Shuffle</samp><samp class="p">&lt;/</samp><samp class="nt">button</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="w">      </samp><samp class="p">&lt;</samp><samp class="nt">button</samp><samp class="w"> </samp><samp class="na">phx-click</samp><samp class="p">=</samp><samp class="p">&quot;</samp><samp class="s2">sort</samp><samp class="p">&quot;</samp><samp class="w"> </samp><samp class="na">phx-value-list</samp><samp class="p">=</samp><samp class="p" data-group-id="7271970103-5">{</samp><samp class="n">key</samp><samp class="p" data-group-id="7271970103-5">}</samp><samp class="p">&gt;</samp><samp class="n">Sort</samp><samp class="p">&lt;/</samp><samp class="nt">button</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="w">    </samp><samp class="p">&lt;/</samp><samp class="nt">div</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="w">    </samp><samp class="sx">&quot;&quot;&quot;</samp><samp class="w">
  </samp><samp class="k" data-group-id="7271995673-25">end</samp><samp class="w">

  </samp><samp class="kd">def</samp><samp class="w"> </samp><samp class="nf">hooked_event</samp><samp class="p" data-group-id="7271995673-27">(</samp><samp class="s">&quot;shuffle&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="7271995673-28">%{</samp><samp class="s">&quot;list&quot;</samp><samp class="w"> </samp><samp class="p">=&gt;</samp><samp class="w"> </samp><samp class="n">key</samp><samp class="p" data-group-id="7271995673-28">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">socket</samp><samp class="p" data-group-id="7271995673-27">)</samp><samp class="w"> </samp><samp class="k" data-group-id="7271995673-29">do</samp><samp class="w">
    </samp><samp class="n">key</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">to_existing_atom</samp><samp class="p" data-group-id="7271995673-30">(</samp><samp class="n">key</samp><samp class="p" data-group-id="7271995673-30">)</samp><samp class="w">
    </samp><samp class="n">shuffled</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="nc">Enum</samp><samp class="o">.</samp><samp class="n">shuffle</samp><samp class="p" data-group-id="7271995673-31">(</samp><samp class="n">socket</samp><samp class="o">.</samp><samp class="n">assigns</samp><samp class="p" data-group-id="7271995673-32">[</samp><samp class="n">key</samp><samp class="p" data-group-id="7271995673-32">]</samp><samp class="p" data-group-id="7271995673-31">)</samp><samp class="w">

    </samp><samp class="p" data-group-id="7271995673-33">{</samp><samp class="ss">:halt</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">assign</samp><samp class="p" data-group-id="7271995673-34">(</samp><samp class="n">socket</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">key</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">shuffled</samp><samp class="p" data-group-id="7271995673-34">)</samp><samp class="p" data-group-id="7271995673-33">}</samp><samp class="w">
  </samp><samp class="k" data-group-id="7271995673-29">end</samp><samp class="w">

  </samp><samp class="kd">def</samp><samp class="w"> </samp><samp class="nf">hooked_event</samp><samp class="p" data-group-id="7271995673-35">(</samp><samp class="s">&quot;sort&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="7271995673-36">%{</samp><samp class="s">&quot;list&quot;</samp><samp class="w"> </samp><samp class="p">=&gt;</samp><samp class="w"> </samp><samp class="n">key</samp><samp class="p" data-group-id="7271995673-36">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">socket</samp><samp class="p" data-group-id="7271995673-35">)</samp><samp class="w"> </samp><samp class="k" data-group-id="7271995673-37">do</samp><samp class="w">
    </samp><samp class="n">key</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="nc">String</samp><samp class="o">.</samp><samp class="n">to_existing_atom</samp><samp class="p" data-group-id="7271995673-38">(</samp><samp class="n">key</samp><samp class="p" data-group-id="7271995673-38">)</samp><samp class="w">
    </samp><samp class="n">sorted</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="nc">Enum</samp><samp class="o">.</samp><samp class="n">sort</samp><samp class="p" data-group-id="7271995673-39">(</samp><samp class="n">socket</samp><samp class="o">.</samp><samp class="n">assigns</samp><samp class="p" data-group-id="7271995673-40">[</samp><samp class="n">key</samp><samp class="p" data-group-id="7271995673-40">]</samp><samp class="p" data-group-id="7271995673-39">)</samp><samp class="w">

    </samp><samp class="p" data-group-id="7271995673-41">{</samp><samp class="ss">:halt</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">assign</samp><samp class="p" data-group-id="7271995673-42">(</samp><samp class="n">socket</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">key</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">sorted</samp><samp class="p" data-group-id="7271995673-42">)</samp><samp class="p" data-group-id="7271995673-41">}</samp><samp class="w">
  </samp><samp class="k" data-group-id="7271995673-37">end</samp><samp class="w">

  </samp><samp class="kd">def</samp><samp class="w"> </samp><samp class="nf">hooked_event</samp><samp class="p" data-group-id="7271995673-43">(</samp><samp class="c">_event</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="c">_params</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">socket</samp><samp class="p" data-group-id="7271995673-43">)</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">do</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="7271995673-44">{</samp><samp class="ss">:cont</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">socket</samp><samp class="p" data-group-id="7271995673-44">}</samp><samp class="w">
</samp><samp class="k" data-group-id="7271995673-23">end</samp></code></pre><h2 id="attach_hook/4-other-examples" class="section-heading"><a href="#attach_hook/4-other-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Other examples</span></h2><p>Attaching and detaching a hook:</p><pre><code class="makeup elixir" translate="no"><samp class="kd">def</samp><samp class="w"> </samp><samp class="nf">mount</samp><samp class="p" data-group-id="9870957965-1">(</samp><samp class="c">_params</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="c">_session</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">socket</samp><samp class="p" data-group-id="9870957965-1">)</samp><samp class="w"> </samp><samp class="k" data-group-id="9870957965-2">do</samp><samp class="w">
  </samp><samp class="n">socket</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w">
    </samp><samp class="n">attach_hook</samp><samp class="p" data-group-id="9870957965-3">(</samp><samp class="n">socket</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:my_hook</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:handle_event</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="k" data-group-id="9870957965-4">fn</samp><samp class="w">
      </samp><samp class="s">&quot;very-special-event&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="c">_params</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">socket</samp><samp class="w"> </samp><samp class="o">-&gt;</samp><samp class="w">
        </samp><samp class="c1"># Handle the very special event and then detach the hook</samp><samp class="w">
        </samp><samp class="p" data-group-id="9870957965-5">{</samp><samp class="ss">:halt</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">detach_hook</samp><samp class="p" data-group-id="9870957965-6">(</samp><samp class="n">socket</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:my_hook</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:handle_event</samp><samp class="p" data-group-id="9870957965-6">)</samp><samp class="p" data-group-id="9870957965-5">}</samp><samp class="w">

      </samp><samp class="c">_event</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="c">_params</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">socket</samp><samp class="w"> </samp><samp class="o">-&gt;</samp><samp class="w">
        </samp><samp class="p" data-group-id="9870957965-7">{</samp><samp class="ss">:cont</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">socket</samp><samp class="p" data-group-id="9870957965-7">}</samp><samp class="w">
    </samp><samp class="k" data-group-id="9870957965-4">end</samp><samp class="p" data-group-id="9870957965-3">)</samp><samp class="w">

  </samp><samp class="p" data-group-id="9870957965-8">{</samp><samp class="ss">:ok</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">socket</samp><samp class="p" data-group-id="9870957965-8">}</samp><samp class="w">
</samp><samp class="k" data-group-id="9870957965-2">end</samp></code></pre><p>Replying to a client event:</p><pre><code class="makeup javascript" translate="no"><samp class="sd">/**</samp><samp class="w">
</samp><samp class="w"> </samp><samp class="sd">*</samp><samp class="sd"> @type {import(&quot;phoenix_live_view&quot;).HooksOption}
</samp><samp class="w"> </samp><samp class="sd">*/</samp><samp class="w">
</samp><samp class="kt">let</samp><samp class="w"> </samp><samp class="no">Hooks</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="p">{</samp><samp class="p">}</samp><samp class="w">
</samp><samp class="bp">Hooks</samp><samp class="p">.</samp><samp class="n">ClientHook</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="p">{</samp><samp class="w">
</samp><samp class="w">  </samp><samp class="nf">mounted</samp><samp class="p">(</samp><samp class="p">)</samp><samp class="w"> </samp><samp class="p">{</samp><samp class="w">
</samp><samp class="w">    </samp><samp class="nb">this</samp><samp class="p">.</samp><samp class="nf">pushEvent</samp><samp class="p">(</samp><samp class="p">&quot;</samp><samp class="s2">ClientHook:mounted</samp><samp class="p">&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p">{</samp><samp class="n">hello</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p">&quot;</samp><samp class="s2">world</samp><samp class="p">&quot;</samp><samp class="p">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p">(</samp><samp class="nv">reply</samp><samp class="p">)</samp><samp class="w"> </samp><samp class="kt">=&gt;</samp><samp class="w"> </samp><samp class="p">{</samp><samp class="w">
</samp><samp class="w">      </samp><samp class="nb">console</samp><samp class="p">.</samp><samp class="nf">log</samp><samp class="p">(</samp><samp class="p">&quot;</samp><samp class="s2">received reply:</samp><samp class="p">&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="nv">reply</samp><samp class="p">)</samp><samp class="w">
</samp><samp class="w">    </samp><samp class="p">}</samp><samp class="p">)</samp><samp class="w">
</samp><samp class="w">  </samp><samp class="p">}</samp><samp class="w">
</samp><samp class="p">}</samp><samp class="w">
</samp><samp class="kt">let</samp><samp class="w"> </samp><samp class="nv">liveSocket</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="ow">new</samp><samp class="w"> </samp><samp class="nv">LiveSocket</samp><samp class="p">(</samp><samp class="p">&quot;</samp><samp class="s2">/live</samp><samp class="p">&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="no">Socket</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p">{</samp><samp class="n">hooks</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">Hooks</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="o">...</samp><samp class="p">}</samp><samp class="p">)</samp></code></pre><pre><code class="makeup elixir" translate="no"><samp class="kd">def</samp><samp class="w"> </samp><samp class="nf">render</samp><samp class="p" data-group-id="6157964901-1">(</samp><samp class="n">assigns</samp><samp class="p" data-group-id="6157964901-1">)</samp><samp class="w"> </samp><samp class="k" data-group-id="6157964901-2">do</samp><samp class="w">
  </samp><samp class="sx">~H&quot;&quot;&quot;</samp><samp class="w">
</samp><samp class="w">  </samp><samp class="p">&lt;</samp><samp class="nt">div</samp><samp class="w"> </samp><samp class="na">id</samp><samp class="p">=</samp><samp class="p">&quot;</samp><samp class="s2">m</samp><samp class="s2">y</samp><samp class="s2">-</samp><samp class="s2">c</samp><samp class="s2">l</samp><samp class="s2">i</samp><samp class="s2">e</samp><samp class="s2">n</samp><samp class="s2">t</samp><samp class="s2">-</samp><samp class="s2">h</samp><samp class="s2">o</samp><samp class="s2">o</samp><samp class="s2">k</samp><samp class="p">&quot;</samp><samp class="w"> </samp><samp class="na">phx-hook</samp><samp class="p">=</samp><samp class="p">&quot;</samp><samp class="s2">ClientHook</samp><samp class="p">&quot;</samp><samp class="p">&gt;</samp><samp class="p">&lt;/</samp><samp class="nt">div</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="w">  </samp><samp class="sx">&quot;&quot;&quot;</samp><samp class="w">
</samp><samp class="k" data-group-id="6157964901-2">end</samp><samp class="w">

</samp><samp class="kd">def</samp><samp class="w"> </samp><samp class="nf">mount</samp><samp class="p" data-group-id="6157964901-3">(</samp><samp class="c">_params</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="c">_session</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">socket</samp><samp class="p" data-group-id="6157964901-3">)</samp><samp class="w"> </samp><samp class="k" data-group-id="6157964901-4">do</samp><samp class="w">
  </samp><samp class="n">socket</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w">
    </samp><samp class="n">attach_hook</samp><samp class="p" data-group-id="6157964901-5">(</samp><samp class="n">socket</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:reply_on_client_hook_mounted</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:handle_event</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="k" data-group-id="6157964901-6">fn</samp><samp class="w">
      </samp><samp class="s">&quot;ClientHook:mounted&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">params</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">socket</samp><samp class="w"> </samp><samp class="o">-&gt;</samp><samp class="w">
        </samp><samp class="p" data-group-id="6157964901-7">{</samp><samp class="ss">:halt</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">params</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">socket</samp><samp class="p" data-group-id="6157964901-7">}</samp><samp class="w">

      </samp><samp class="bp">_</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="bp">_</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">socket</samp><samp class="w"> </samp><samp class="o">-&gt;</samp><samp class="w">
        </samp><samp class="p" data-group-id="6157964901-8">{</samp><samp class="ss">:cont</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">socket</samp><samp class="p" data-group-id="6157964901-8">}</samp><samp class="w">
    </samp><samp class="k" data-group-id="6157964901-6">end</samp><samp class="p" data-group-id="6157964901-5">)</samp><samp class="w">

  </samp><samp class="p" data-group-id="6157964901-9">{</samp><samp class="ss">:ok</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">socket</samp><samp class="p" data-group-id="6157964901-9">}</samp><samp class="w">
</samp><samp class="k" data-group-id="6157964901-4">end</samp></code></pre>
  </section>
</section>
<section class="detail" id="cancel_async/3">

    <span id="cancel_async/2"></span>

  <div class="detail-header">
    <a href="#cancel_async/3" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">cancel_async(socket, async_or_keys, reason \\ {:shutdown, :cancel})</h1>


        <a href="https://github.com/phoenixframework/phoenix_live_view/blob/v1.1.2/lib/phoenix_live_view.ex#L2272" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

<p>Cancels an async operation if one exists.</p><p>Accepts either the <code class="inline">%AsyncResult{}</code> when using <a href="#assign_async/3"><code class="inline">assign_async/3</code></a> or
the key passed to <a href="#start_async/3"><code class="inline">start_async/3</code></a>.</p><p>The underlying process will be killed with the provided reason, or
with <code class="inline">{:shutdown, :cancel}</code> if no reason is passed. For <a href="#assign_async/3"><code class="inline">assign_async/3</code></a>
operations, the <code class="inline">:failed</code> field will be set to <code class="inline">{:exit, reason}</code>.
For <a href="#start_async/3"><code class="inline">start_async/3</code></a>, the <a href="#c:handle_async/3"><code class="inline">handle_async/3</code></a> callback will receive
<code class="inline">{:exit, reason}</code> as the result.</p><p>Returns the <code class="inline">%Phoenix.LiveView.Socket{}</code>.</p><h2 id="cancel_async/3-examples" class="section-heading"><a href="#cancel_async/3-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="n">cancel_async</samp><samp class="p" data-group-id="7956650972-1">(</samp><samp class="n">socket</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:preview</samp><samp class="p" data-group-id="7956650972-1">)</samp><samp class="w">
</samp><samp class="n">cancel_async</samp><samp class="p" data-group-id="7956650972-2">(</samp><samp class="n">socket</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:preview</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:my_reason</samp><samp class="p" data-group-id="7956650972-2">)</samp><samp class="w">
</samp><samp class="n">cancel_async</samp><samp class="p" data-group-id="7956650972-3">(</samp><samp class="n">socket</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">socket</samp><samp class="o">.</samp><samp class="n">assigns</samp><samp class="o">.</samp><samp class="n">preview</samp><samp class="p" data-group-id="7956650972-3">)</samp></code></pre>
  </section>
</section>
<section class="detail" id="cancel_upload/3">

  <div class="detail-header">
    <a href="#cancel_upload/3" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">cancel_upload(socket, name, entry_ref)</h1>


        <a href="https://github.com/phoenixframework/phoenix_live_view/blob/v1.1.2/lib/phoenix_live_view.ex#L874" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

<p>Cancels an upload for the given entry.</p><h2 id="cancel_upload/3-examples" class="section-heading"><a href="#cancel_upload/3-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup heex" translate="no"><samp class="p" data-group-id="0828411706-1">&lt;%=</samp><samp class="w"> </samp><samp class="k">for</samp><samp class="w"> </samp><samp class="n">entry</samp><samp class="w"> </samp><samp class="o">&lt;-</samp><samp class="w"> </samp><samp class="na">@uploads</samp><samp class="o">.</samp><samp class="n">avatar</samp><samp class="o">.</samp><samp class="n">entries</samp><samp class="w"> </samp><samp class="k" data-group-id="0828411706-ex-1">do</samp><samp class="w"> </samp><samp class="p" data-group-id="0828411706-1">%&gt;</samp><samp class="w">
</samp><samp class="n">  ...
</samp><samp class="w">  </samp><samp class="p">&lt;</samp><samp class="nt">button</samp><samp class="w"> </samp><samp class="na">phx-click</samp><samp class="p">=</samp><samp class="p">&quot;</samp><samp class="s2">cancel-upload</samp><samp class="p">&quot;</samp><samp class="w"> </samp><samp class="na">phx-value-ref</samp><samp class="p">=</samp><samp class="p" data-group-id="0828411706-2">{</samp><samp class="n">entry</samp><samp class="o">.</samp><samp class="n">ref</samp><samp class="p" data-group-id="0828411706-2">}</samp><samp class="p">&gt;</samp><samp class="n">cancel</samp><samp class="p">&lt;/</samp><samp class="nt">button</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="p" data-group-id="0828411706-3">&lt;%</samp><samp class="w"> </samp><samp class="k" data-group-id="0828411706-ex-1">end</samp><samp class="w"> </samp><samp class="p" data-group-id="0828411706-3">%&gt;</samp></code></pre><pre><code class="makeup elixir" translate="no"><samp class="kd">def</samp><samp class="w"> </samp><samp class="nf">handle_event</samp><samp class="p" data-group-id="0082432041-1">(</samp><samp class="s">&quot;cancel-upload&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="0082432041-2">%{</samp><samp class="s">&quot;ref&quot;</samp><samp class="w"> </samp><samp class="p">=&gt;</samp><samp class="w"> </samp><samp class="n">ref</samp><samp class="p" data-group-id="0082432041-2">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">socket</samp><samp class="p" data-group-id="0082432041-1">)</samp><samp class="w"> </samp><samp class="k" data-group-id="0082432041-3">do</samp><samp class="w">
  </samp><samp class="p" data-group-id="0082432041-4">{</samp><samp class="ss">:noreply</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">cancel_upload</samp><samp class="p" data-group-id="0082432041-5">(</samp><samp class="n">socket</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:avatar</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">ref</samp><samp class="p" data-group-id="0082432041-5">)</samp><samp class="p" data-group-id="0082432041-4">}</samp><samp class="w">
</samp><samp class="k" data-group-id="0082432041-3">end</samp></code></pre>
  </section>
</section>
<section class="detail" id="clear_flash/1">

  <div class="detail-header">
    <a href="#clear_flash/1" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">clear_flash(socket)</h1>


        <a href="https://github.com/phoenixframework/phoenix_live_view/blob/v1.1.2/lib/phoenix_live_view.ex#L715" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

<p>Clears the flash.</p><h2 id="clear_flash/1-examples" class="section-heading"><a href="#clear_flash/1-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="n">clear_flash</samp><samp class="p" data-group-id="4927146712-1">(</samp><samp class="n">socket</samp><samp class="p" data-group-id="4927146712-1">)</samp></code></pre><p>Clearing the flash can also be triggered on the client and natively handled by LiveView using the <code class="inline">lv:clear-flash</code> event.</p><p>For example:</p><pre><code class="makeup heex" translate="no"><samp class="p">&lt;</samp><samp class="nt">p</samp><samp class="w"> </samp><samp class="na">class</samp><samp class="p">=</samp><samp class="p">&quot;</samp><samp class="s2">a</samp><samp class="s2">l</samp><samp class="s2">e</samp><samp class="s2">r</samp><samp class="s2">t</samp><samp class="p">&quot;</samp><samp class="w"> </samp><samp class="na">phx-click</samp><samp class="p">=</samp><samp class="p">&quot;</samp><samp class="s2">lv:clear-flash</samp><samp class="p">&quot;</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="w">  </samp><samp class="p" data-group-id="5506851510-1">{</samp><samp class="nc">Phoenix.Flash</samp><samp class="o">.</samp><samp class="n">get</samp><samp class="p" data-group-id="5506851510-ex-1">(</samp><samp class="na">@flash</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:info</samp><samp class="p" data-group-id="5506851510-ex-1">)</samp><samp class="p" data-group-id="5506851510-1">}</samp><samp class="w">
</samp><samp class="p">&lt;/</samp><samp class="nt">p</samp><samp class="p">&gt;</samp></code></pre>
  </section>
</section>
<section class="detail" id="clear_flash/2">

  <div class="detail-header">
    <a href="#clear_flash/2" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">clear_flash(socket, key)</h1>


        <a href="https://github.com/phoenixframework/phoenix_live_view/blob/v1.1.2/lib/phoenix_live_view.ex#L734" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

<p>Clears a key from the flash.</p><h2 id="clear_flash/2-examples" class="section-heading"><a href="#clear_flash/2-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="n">clear_flash</samp><samp class="p" data-group-id="4626237863-1">(</samp><samp class="n">socket</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:info</samp><samp class="p" data-group-id="4626237863-1">)</samp></code></pre><p>Clearing the flash can also be triggered on the client and natively handled by LiveView using the <code class="inline">lv:clear-flash</code> event.</p><p>For example:</p><pre><code class="makeup heex" translate="no"><samp class="p">&lt;</samp><samp class="nt">p</samp><samp class="w"> </samp><samp class="na">class</samp><samp class="p">=</samp><samp class="p">&quot;</samp><samp class="s2">a</samp><samp class="s2">l</samp><samp class="s2">e</samp><samp class="s2">r</samp><samp class="s2">t</samp><samp class="p">&quot;</samp><samp class="w"> </samp><samp class="na">phx-click</samp><samp class="p">=</samp><samp class="p">&quot;</samp><samp class="s2">lv:clear-flash</samp><samp class="p">&quot;</samp><samp class="w"> </samp><samp class="na">phx-value-key</samp><samp class="p">=</samp><samp class="p">&quot;</samp><samp class="s2">info</samp><samp class="p">&quot;</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="w">  </samp><samp class="p" data-group-id="3815457514-1">{</samp><samp class="nc">Phoenix.Flash</samp><samp class="o">.</samp><samp class="n">get</samp><samp class="p" data-group-id="3815457514-ex-1">(</samp><samp class="na">@flash</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:info</samp><samp class="p" data-group-id="3815457514-ex-1">)</samp><samp class="p" data-group-id="3815457514-1">}</samp><samp class="w">
</samp><samp class="p">&lt;/</samp><samp class="nt">p</samp><samp class="p">&gt;</samp></code></pre>
  </section>
</section>
<section class="detail" id="connected?/1">

  <div class="detail-header">
    <a href="#connected?/1" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">connected?(socket)</h1>


        <a href="https://github.com/phoenixframework/phoenix_live_view/blob/v1.1.2/lib/phoenix_live_view.ex#L595" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

<p>Returns true if the socket is connected.</p><p>Useful for checking the connectivity status when mounting the view.
For example, on initial page render, the view is mounted statically,
rendered, and the HTML is sent to the client. Once the client
connects to the server, a LiveView is then spawned and mounted
statefully within a process. Use <a href="#connected?/1"><code class="inline">connected?/1</code></a> to conditionally
perform stateful work, such as subscribing to pubsub topics,
sending messages, etc.</p><h2 id="connected?/1-examples" class="section-heading"><a href="#connected?/1-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="kd">defmodule</samp><samp class="w"> </samp><samp class="nc">DemoWeb.ClockLive</samp><samp class="w"> </samp><samp class="k" data-group-id="6863473479-1">do</samp><samp class="w">
  </samp><samp class="kn">use</samp><samp class="w"> </samp><samp class="nc">Phoenix.LiveView</samp><samp class="w">
  </samp><samp class="n">...</samp><samp class="w">
  </samp><samp class="kd">def</samp><samp class="w"> </samp><samp class="nf">mount</samp><samp class="p" data-group-id="6863473479-2">(</samp><samp class="c">_params</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="c">_session</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">socket</samp><samp class="p" data-group-id="6863473479-2">)</samp><samp class="w"> </samp><samp class="k" data-group-id="6863473479-3">do</samp><samp class="w">
    </samp><samp class="k">if</samp><samp class="w"> </samp><samp class="n">connected?</samp><samp class="p" data-group-id="6863473479-4">(</samp><samp class="n">socket</samp><samp class="p" data-group-id="6863473479-4">)</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">do</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="nc">:timer</samp><samp class="o">.</samp><samp class="n">send_interval</samp><samp class="p" data-group-id="6863473479-5">(</samp><samp class="mi">1000</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">self</samp><samp class="p" data-group-id="6863473479-6">(</samp><samp class="p" data-group-id="6863473479-6">)</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:tick</samp><samp class="p" data-group-id="6863473479-5">)</samp><samp class="w">

    </samp><samp class="p" data-group-id="6863473479-7">{</samp><samp class="ss">:ok</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">assign</samp><samp class="p" data-group-id="6863473479-8">(</samp><samp class="n">socket</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">date</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="nc">:calendar</samp><samp class="o">.</samp><samp class="n">local_time</samp><samp class="p" data-group-id="6863473479-9">(</samp><samp class="p" data-group-id="6863473479-9">)</samp><samp class="p" data-group-id="6863473479-8">)</samp><samp class="p" data-group-id="6863473479-7">}</samp><samp class="w">
  </samp><samp class="k" data-group-id="6863473479-3">end</samp><samp class="w">

  </samp><samp class="kd">def</samp><samp class="w"> </samp><samp class="nf">handle_info</samp><samp class="p" data-group-id="6863473479-10">(</samp><samp class="ss">:tick</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">socket</samp><samp class="p" data-group-id="6863473479-10">)</samp><samp class="w"> </samp><samp class="k" data-group-id="6863473479-11">do</samp><samp class="w">
    </samp><samp class="p" data-group-id="6863473479-12">{</samp><samp class="ss">:noreply</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">assign</samp><samp class="p" data-group-id="6863473479-13">(</samp><samp class="n">socket</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">date</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="nc">:calendar</samp><samp class="o">.</samp><samp class="n">local_time</samp><samp class="p" data-group-id="6863473479-14">(</samp><samp class="p" data-group-id="6863473479-14">)</samp><samp class="p" data-group-id="6863473479-13">)</samp><samp class="p" data-group-id="6863473479-12">}</samp><samp class="w">
  </samp><samp class="k" data-group-id="6863473479-11">end</samp><samp class="w">
</samp><samp class="k" data-group-id="6863473479-1">end</samp></code></pre>
  </section>
</section>
<section class="detail" id="consume_uploaded_entries/3">

  <div class="detail-header">
    <a href="#consume_uploaded_entries/3" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">consume_uploaded_entries(socket, name, func)</h1>


        <a href="https://github.com/phoenixframework/phoenix_live_view/blob/v1.1.2/lib/phoenix_live_view.ex#L920" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

<p>Consumes the uploaded entries.</p><p>Raises when there are still entries in progress.
Typically called when submitting a form to handle the
uploaded entries alongside the form data. For form submissions,
it is guaranteed that all entries have completed before the submit event
is invoked. Once entries are consumed, they are removed from the upload.</p><p>The function passed to consume may return a tagged tuple of the form
<code class="inline">{:ok, my_result}</code> to collect results about the consumed entries, or
<code class="inline">{:postpone, my_result}</code> to collect results, but postpone the file
consumption to be performed later.</p><p>A list of all <code class="inline">my_result</code> values produced by the passed function is
returned, regardless of whether they were consumed or postponed.</p><h2 id="consume_uploaded_entries/3-examples" class="section-heading"><a href="#consume_uploaded_entries/3-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="kd">def</samp><samp class="w"> </samp><samp class="nf">handle_event</samp><samp class="p" data-group-id="1387017934-1">(</samp><samp class="s">&quot;save&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="c">_params</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">socket</samp><samp class="p" data-group-id="1387017934-1">)</samp><samp class="w"> </samp><samp class="k" data-group-id="1387017934-2">do</samp><samp class="w">
  </samp><samp class="n">uploaded_files</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w">
    </samp><samp class="n">consume_uploaded_entries</samp><samp class="p" data-group-id="1387017934-3">(</samp><samp class="n">socket</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:avatar</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="k" data-group-id="1387017934-4">fn</samp><samp class="w"> </samp><samp class="p" data-group-id="1387017934-5">%{</samp><samp class="ss">path</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="n">path</samp><samp class="p" data-group-id="1387017934-5">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="c">_entry</samp><samp class="w"> </samp><samp class="o">-&gt;</samp><samp class="w">
      </samp><samp class="n">dest</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="nc">Path</samp><samp class="o">.</samp><samp class="n">join</samp><samp class="p" data-group-id="1387017934-6">(</samp><samp class="s">&quot;priv/static/uploads&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="nc">Path</samp><samp class="o">.</samp><samp class="n">basename</samp><samp class="p" data-group-id="1387017934-7">(</samp><samp class="n">path</samp><samp class="p" data-group-id="1387017934-7">)</samp><samp class="p" data-group-id="1387017934-6">)</samp><samp class="w">
      </samp><samp class="nc">File</samp><samp class="o">.</samp><samp class="n">cp!</samp><samp class="p" data-group-id="1387017934-8">(</samp><samp class="n">path</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">dest</samp><samp class="p" data-group-id="1387017934-8">)</samp><samp class="w">
      </samp><samp class="p" data-group-id="1387017934-9">{</samp><samp class="ss">:ok</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="sx">~p&quot;/uploads/</samp><samp class="si" data-group-id="1387017934-10">#{</samp><samp class="nc">Path</samp><samp class="o">.</samp><samp class="n">basename</samp><samp class="p" data-group-id="1387017934-11">(</samp><samp class="n">dest</samp><samp class="p" data-group-id="1387017934-11">)</samp><samp class="si" data-group-id="1387017934-10">}</samp><samp class="sx">&quot;</samp><samp class="p" data-group-id="1387017934-9">}</samp><samp class="w">
    </samp><samp class="k" data-group-id="1387017934-4">end</samp><samp class="p" data-group-id="1387017934-3">)</samp><samp class="w">
  </samp><samp class="p" data-group-id="1387017934-12">{</samp><samp class="ss">:noreply</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">update</samp><samp class="p" data-group-id="1387017934-13">(</samp><samp class="n">socket</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:uploaded_files</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="o">&amp;</samp><samp class="p" data-group-id="1387017934-14">(</samp><samp class="ni">&amp;1</samp><samp class="w"> </samp><samp class="o">++</samp><samp class="w"> </samp><samp class="n">uploaded_files</samp><samp class="p" data-group-id="1387017934-14">)</samp><samp class="p" data-group-id="1387017934-13">)</samp><samp class="p" data-group-id="1387017934-12">}</samp><samp class="w">
</samp><samp class="k" data-group-id="1387017934-2">end</samp></code></pre>
  </section>
</section>
<section class="detail" id="consume_uploaded_entry/3">

  <div class="detail-header">
    <a href="#consume_uploaded_entry/3" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">consume_uploaded_entry(socket, entry, func)</h1>


        <a href="https://github.com/phoenixframework/phoenix_live_view/blob/v1.1.2/lib/phoenix_live_view.ex#L957" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

<p>Consumes an individual uploaded entry.</p><p>Raises when the entry is still in progress.
Typically called when submitting a form to handle the
uploaded entries alongside the form data. Once entries are consumed,
they are removed from the upload.</p><p>This is a lower-level feature than <a href="#consume_uploaded_entries/3"><code class="inline">consume_uploaded_entries/3</code></a> and useful
for scenarios where you want to consume entries as they are individually completed.</p><p>Like <a href="#consume_uploaded_entries/3"><code class="inline">consume_uploaded_entries/3</code></a>, the function passed to consume may return
a tagged tuple of the form <code class="inline">{:ok, my_result}</code> to collect results about the
consumed entries, or <code class="inline">{:postpone, my_result}</code> to collect results,
but postpone the file consumption to be performed later.</p><h2 id="consume_uploaded_entry/3-examples" class="section-heading"><a href="#consume_uploaded_entry/3-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="kd">def</samp><samp class="w"> </samp><samp class="nf">handle_event</samp><samp class="p" data-group-id="8711843655-1">(</samp><samp class="s">&quot;save&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="c">_params</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">socket</samp><samp class="p" data-group-id="8711843655-1">)</samp><samp class="w"> </samp><samp class="k" data-group-id="8711843655-2">do</samp><samp class="w">
  </samp><samp class="k">case</samp><samp class="w"> </samp><samp class="n">uploaded_entries</samp><samp class="p" data-group-id="8711843655-3">(</samp><samp class="n">socket</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:avatar</samp><samp class="p" data-group-id="8711843655-3">)</samp><samp class="w"> </samp><samp class="k" data-group-id="8711843655-4">do</samp><samp class="w">
    </samp><samp class="p" data-group-id="8711843655-5">{</samp><samp class="p" data-group-id="8711843655-6">[</samp><samp class="bp">_</samp><samp class="o">|</samp><samp class="bp">_</samp><samp class="p" data-group-id="8711843655-6">]</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="n">entries</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="8711843655-7">[</samp><samp class="p" data-group-id="8711843655-7">]</samp><samp class="p" data-group-id="8711843655-5">}</samp><samp class="w"> </samp><samp class="o">-&gt;</samp><samp class="w">
      </samp><samp class="n">uploaded_files</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="k">for</samp><samp class="w"> </samp><samp class="n">entry</samp><samp class="w"> </samp><samp class="o">&lt;-</samp><samp class="w"> </samp><samp class="n">entries</samp><samp class="w"> </samp><samp class="k" data-group-id="8711843655-8">do</samp><samp class="w">
        </samp><samp class="n">consume_uploaded_entry</samp><samp class="p" data-group-id="8711843655-9">(</samp><samp class="n">socket</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">entry</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="k" data-group-id="8711843655-10">fn</samp><samp class="w"> </samp><samp class="p" data-group-id="8711843655-11">%{</samp><samp class="ss">path</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="n">path</samp><samp class="p" data-group-id="8711843655-11">}</samp><samp class="w"> </samp><samp class="o">-&gt;</samp><samp class="w">
          </samp><samp class="n">dest</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="nc">Path</samp><samp class="o">.</samp><samp class="n">join</samp><samp class="p" data-group-id="8711843655-12">(</samp><samp class="s">&quot;priv/static/uploads&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="nc">Path</samp><samp class="o">.</samp><samp class="n">basename</samp><samp class="p" data-group-id="8711843655-13">(</samp><samp class="n">path</samp><samp class="p" data-group-id="8711843655-13">)</samp><samp class="p" data-group-id="8711843655-12">)</samp><samp class="w">
          </samp><samp class="nc">File</samp><samp class="o">.</samp><samp class="n">cp!</samp><samp class="p" data-group-id="8711843655-14">(</samp><samp class="n">path</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">dest</samp><samp class="p" data-group-id="8711843655-14">)</samp><samp class="w">
          </samp><samp class="p" data-group-id="8711843655-15">{</samp><samp class="ss">:ok</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="sx">~p&quot;/uploads/</samp><samp class="si" data-group-id="8711843655-16">#{</samp><samp class="nc">Path</samp><samp class="o">.</samp><samp class="n">basename</samp><samp class="p" data-group-id="8711843655-17">(</samp><samp class="n">dest</samp><samp class="p" data-group-id="8711843655-17">)</samp><samp class="si" data-group-id="8711843655-16">}</samp><samp class="sx">&quot;</samp><samp class="p" data-group-id="8711843655-15">}</samp><samp class="w">
        </samp><samp class="k" data-group-id="8711843655-10">end</samp><samp class="p" data-group-id="8711843655-9">)</samp><samp class="w">
      </samp><samp class="k" data-group-id="8711843655-8">end</samp><samp class="w">
      </samp><samp class="p" data-group-id="8711843655-18">{</samp><samp class="ss">:noreply</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">update</samp><samp class="p" data-group-id="8711843655-19">(</samp><samp class="n">socket</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:uploaded_files</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="o">&amp;</samp><samp class="p" data-group-id="8711843655-20">(</samp><samp class="ni">&amp;1</samp><samp class="w"> </samp><samp class="o">++</samp><samp class="w"> </samp><samp class="n">uploaded_files</samp><samp class="p" data-group-id="8711843655-20">)</samp><samp class="p" data-group-id="8711843655-19">)</samp><samp class="p" data-group-id="8711843655-18">}</samp><samp class="w">

    </samp><samp class="bp">_</samp><samp class="w"> </samp><samp class="o">-&gt;</samp><samp class="w">
      </samp><samp class="p" data-group-id="8711843655-21">{</samp><samp class="ss">:noreply</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">socket</samp><samp class="p" data-group-id="8711843655-21">}</samp><samp class="w">
  </samp><samp class="k" data-group-id="8711843655-4">end</samp><samp class="w">
</samp><samp class="k" data-group-id="8711843655-2">end</samp></code></pre>
  </section>
</section>
<section class="detail" id="detach_hook/3">

  <div class="detail-header">
    <a href="#detach_hook/3" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">detach_hook(socket, name, stage)</h1>


        <a href="https://github.com/phoenixframework/phoenix_live_view/blob/v1.1.2/lib/phoenix_live_view.ex#L1681" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

<p>Detaches a hook with the given <code class="inline">name</code> from the lifecycle <code class="inline">stage</code>.</p><blockquote><p>Note: This function is for server-side lifecycle callbacks.
For client-side hooks, see the
<a href="js-interop.html#client-hooks-via-phx-hook">JS Interop guide</a>.</p></blockquote><p>If no hook is found, this function is a no-op.</p><h2 id="detach_hook/3-examples" class="section-heading"><a href="#detach_hook/3-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="kd">def</samp><samp class="w"> </samp><samp class="nf">handle_event</samp><samp class="p" data-group-id="4848039454-1">(</samp><samp class="bp">_</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">socket</samp><samp class="p" data-group-id="4848039454-1">)</samp><samp class="w"> </samp><samp class="k" data-group-id="4848039454-2">do</samp><samp class="w">
  </samp><samp class="p" data-group-id="4848039454-3">{</samp><samp class="ss">:noreply</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">detach_hook</samp><samp class="p" data-group-id="4848039454-4">(</samp><samp class="n">socket</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:hook_that_was_attached</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:handle_event</samp><samp class="p" data-group-id="4848039454-4">)</samp><samp class="p" data-group-id="4848039454-3">}</samp><samp class="w">
</samp><samp class="k" data-group-id="4848039454-2">end</samp></code></pre>
  </section>
</section>
<section class="detail" id="disallow_upload/2">

  <div class="detail-header">
    <a href="#disallow_upload/2" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">disallow_upload(socket, name)</h1>


        <a href="https://github.com/phoenixframework/phoenix_live_view/blob/v1.1.2/lib/phoenix_live_view.ex#L856" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

<p>Revokes a previously allowed upload from <a href="#allow_upload/3"><code class="inline">allow_upload/3</code></a>.</p><h2 id="disallow_upload/2-examples" class="section-heading"><a href="#disallow_upload/2-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="n">disallow_upload</samp><samp class="p" data-group-id="7162555388-1">(</samp><samp class="n">socket</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:avatar</samp><samp class="p" data-group-id="7162555388-1">)</samp></code></pre>
  </section>
</section>
<section class="detail" id="get_connect_info/2">

  <div class="detail-header">
    <a href="#get_connect_info/2" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">get_connect_info(socket, key)</h1>


        <a href="https://github.com/phoenixframework/phoenix_live_view/blob/v1.1.2/lib/phoenix_live_view.ex#L1209" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

<p>Accesses a given connect info key from the socket.</p><p>The following keys are supported: <code class="inline">:peer_data</code>, <code class="inline">:trace_context_headers</code>,
<code class="inline">:x_headers</code>, <code class="inline">:uri</code>, and <code class="inline">:user_agent</code>.</p><p>The connect information is available only during mount. During disconnected
render, all keys are available. On connected render, only the keys explicitly
declared in your socket are available. See <a href="https://hexdocs.pm/phoenix/1.8.0-rc.4/Phoenix.Endpoint.html#socket/3"><code class="inline">Phoenix.Endpoint.socket/3</code></a> for
a complete description of the keys.</p><h2 id="get_connect_info/2-examples" class="section-heading"><a href="#get_connect_info/2-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><p>The first step is to declare the <code class="inline">connect_info</code> you want to receive.
Typically, it includes at least the session, but you must include all
other keys you want to access on connected mount, such as <code class="inline">:peer_data</code>:</p><pre><code class="makeup elixir" translate="no"><samp class="n">socket</samp><samp class="w"> </samp><samp class="s">&quot;/live&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="nc">Phoenix.LiveView.Socket</samp><samp class="p">,</samp><samp class="w">
  </samp><samp class="ss">websocket</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="7656893591-1">[</samp><samp class="ss">connect_info</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="7656893591-2">[</samp><samp class="ss">:peer_data</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">session</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="na">@session_options</samp><samp class="p" data-group-id="7656893591-2">]</samp><samp class="p" data-group-id="7656893591-1">]</samp></code></pre><p>Those values can now be accessed on the connected mount as
<a href="#get_connect_info/2"><code class="inline">get_connect_info/2</code></a>:</p><pre><code class="makeup elixir" translate="no"><samp class="kd">def</samp><samp class="w"> </samp><samp class="nf">mount</samp><samp class="p" data-group-id="9374660792-1">(</samp><samp class="c">_params</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="c">_session</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">socket</samp><samp class="p" data-group-id="9374660792-1">)</samp><samp class="w"> </samp><samp class="k" data-group-id="9374660792-2">do</samp><samp class="w">
  </samp><samp class="n">peer_data</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="n">get_connect_info</samp><samp class="p" data-group-id="9374660792-3">(</samp><samp class="n">socket</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:peer_data</samp><samp class="p" data-group-id="9374660792-3">)</samp><samp class="w">
  </samp><samp class="p" data-group-id="9374660792-4">{</samp><samp class="ss">:ok</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">assign</samp><samp class="p" data-group-id="9374660792-5">(</samp><samp class="n">socket</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">ip</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="n">peer_data</samp><samp class="o">.</samp><samp class="n">address</samp><samp class="p" data-group-id="9374660792-5">)</samp><samp class="p" data-group-id="9374660792-4">}</samp><samp class="w">
</samp><samp class="k" data-group-id="9374660792-2">end</samp></code></pre><p>If the key is not available, usually because it was not specified
in <code class="inline">connect_info</code>, it returns nil.</p>
  </section>
</section>
<section class="detail" id="get_connect_params/1">

  <div class="detail-header">
    <a href="#get_connect_params/1" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">get_connect_params(socket)</h1>


        <a href="https://github.com/phoenixframework/phoenix_live_view/blob/v1.1.2/lib/phoenix_live_view.ex#L1170" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

<p>Accesses the connect params sent by the client for use on connected mount.</p><p>Connect params are sent from the client on every connection and reconnection.
The parameters in the client can be computed dynamically, allowing you to pass
client state to the server. For example, you could use it to compute and pass
the user time zone from a JavaScript client:</p><pre><code class="makeup javascript" translate="no"><samp class="kt">let</samp><samp class="w"> </samp><samp class="nv">liveSocket</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="ow">new</samp><samp class="w"> </samp><samp class="nv">LiveSocket</samp><samp class="p">(</samp><samp class="p">&quot;</samp><samp class="s2">/live</samp><samp class="p">&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="no">Socket</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p">{</samp><samp class="w">
</samp><samp class="w">  </samp><samp class="n">longPollFallbackMs</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">2500</samp><samp class="p">,</samp><samp class="w">
</samp><samp class="w">  </samp><samp class="nf">params</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p">(</samp><samp class="nv">_liveViewName</samp><samp class="p">)</samp><samp class="w"> </samp><samp class="kt">=&gt;</samp><samp class="w"> </samp><samp class="p">{</samp><samp class="w">
</samp><samp class="w">    </samp><samp class="k">return</samp><samp class="w"> </samp><samp class="p">{</samp><samp class="w">
</samp><samp class="w">      </samp><samp class="n">_csrf_token</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="nv">csrfToken</samp><samp class="p">,</samp><samp class="w">
</samp><samp class="w">      </samp><samp class="n">time_zone</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="bp">Intl</samp><samp class="p">.</samp><samp class="nf">DateTimeFormat</samp><samp class="p">(</samp><samp class="p">)</samp><samp class="p">.</samp><samp class="nf">resolvedOptions</samp><samp class="p">(</samp><samp class="p">)</samp><samp class="p">.</samp><samp class="n">timeZone</samp><samp class="w">
</samp><samp class="w">    </samp><samp class="p">}</samp><samp class="w">
</samp><samp class="w">  </samp><samp class="p">}</samp><samp class="w">
</samp><samp class="p">}</samp><samp class="p">)</samp></code></pre><p>By computing the parameters with a function, reconnections will reevalute
the code, allowing you to fetch the latest data.</p><p>On the LiveView, you will use <a href="#get_connect_params/1"><code class="inline">get_connect_params/1</code></a> to read the data,
which only remains available during mount. <code class="inline">nil</code> is returned when called
in a disconnected state and a <a href="https://hexdocs.pm/elixir/RuntimeError.html"><code class="inline">RuntimeError</code></a> is raised if called after
mount.</p><h2 id="get_connect_params/1-reserved-params" class="section-heading"><a href="#get_connect_params/1-reserved-params" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Reserved params</span></h2><p>The following params have special meaning in LiveView:</p><ul><li><code class="inline">&quot;_csrf_token&quot;</code> - the CSRF Token which must be explicitly set by the user
when connecting</li><li><code class="inline">&quot;_mounts&quot;</code> - the number of times the current LiveView is mounted.
It is 0 on first mount, then increases on each reconnect. It resets
when navigating away from the current LiveView or on errors</li><li><code class="inline">&quot;_track_static&quot;</code> - set automatically with a list of all href/src from
tags with the <code class="inline">phx-track-static</code> annotation in them. If there are no
such tags, nothing is sent</li><li><code class="inline">&quot;_live_referer&quot;</code> - sent by the client as the referer URL when a
live navigation has occurred from <code class="inline">push_navigate</code> or client link navigate.</li></ul><h2 id="get_connect_params/1-examples" class="section-heading"><a href="#get_connect_params/1-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="kd">def</samp><samp class="w"> </samp><samp class="nf">mount</samp><samp class="p" data-group-id="4182945542-1">(</samp><samp class="c">_params</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="c">_session</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">socket</samp><samp class="p" data-group-id="4182945542-1">)</samp><samp class="w"> </samp><samp class="k" data-group-id="4182945542-2">do</samp><samp class="w">
  </samp><samp class="p" data-group-id="4182945542-3">{</samp><samp class="ss">:ok</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">assign</samp><samp class="p" data-group-id="4182945542-4">(</samp><samp class="n">socket</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">width</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="n">get_connect_params</samp><samp class="p" data-group-id="4182945542-5">(</samp><samp class="n">socket</samp><samp class="p" data-group-id="4182945542-5">)</samp><samp class="p" data-group-id="4182945542-6">[</samp><samp class="s">&quot;width&quot;</samp><samp class="p" data-group-id="4182945542-6">]</samp><samp class="w"> </samp><samp class="o">||</samp><samp class="w"> </samp><samp class="na">@width</samp><samp class="p" data-group-id="4182945542-4">)</samp><samp class="p" data-group-id="4182945542-3">}</samp><samp class="w">
</samp><samp class="k" data-group-id="4182945542-2">end</samp></code></pre>
  </section>
</section>
<section class="detail" id="on_mount/1">

  <div class="detail-header">
    <a href="#on_mount/1" class="detail-link" data-no-tooltip="" aria-label="Link to this macro">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">on_mount(mod_or_mod_arg)</h1>

        <span class="note">(macro)</span>


        <a href="https://github.com/phoenixframework/phoenix_live_view/blob/v1.1.2/lib/phoenix_live_view.ex#L544" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

<p>Declares a module callback to be invoked on the LiveView's mount.</p><p>The function within the given module, which must be named <code class="inline">on_mount</code>,
will be invoked before both disconnected and connected mounts. The hook
has the option to either halt or continue the mounting process as usual.
If you wish to redirect the LiveView, you <strong>must</strong> halt, otherwise an error
will be raised.</p><p>Tip: if you need to define multiple <code class="inline">on_mount</code> callbacks, avoid defining
multiple modules. Instead, pass a tuple and use pattern matching to handle
different cases:</p><pre><code class="makeup elixir" translate="no"><samp class="kd">def</samp><samp class="w"> </samp><samp class="nf">on_mount</samp><samp class="p" data-group-id="3086872241-1">(</samp><samp class="ss">:admin</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="c">_params</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="c">_session</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">socket</samp><samp class="p" data-group-id="3086872241-1">)</samp><samp class="w"> </samp><samp class="k" data-group-id="3086872241-2">do</samp><samp class="w">
  </samp><samp class="p" data-group-id="3086872241-3">{</samp><samp class="ss">:cont</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">socket</samp><samp class="p" data-group-id="3086872241-3">}</samp><samp class="w">
</samp><samp class="k" data-group-id="3086872241-2">end</samp><samp class="w">

</samp><samp class="kd">def</samp><samp class="w"> </samp><samp class="nf">on_mount</samp><samp class="p" data-group-id="3086872241-4">(</samp><samp class="ss">:user</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="c">_params</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="c">_session</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">socket</samp><samp class="p" data-group-id="3086872241-4">)</samp><samp class="w"> </samp><samp class="k" data-group-id="3086872241-5">do</samp><samp class="w">
  </samp><samp class="p" data-group-id="3086872241-6">{</samp><samp class="ss">:cont</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">socket</samp><samp class="p" data-group-id="3086872241-6">}</samp><samp class="w">
</samp><samp class="k" data-group-id="3086872241-5">end</samp></code></pre><p>And then invoke it as:</p><pre><code class="makeup elixir" translate="no"><samp class="n">on_mount</samp><samp class="w"> </samp><samp class="p" data-group-id="1626963898-1">{</samp><samp class="nc">MyAppWeb.SomeHook</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:admin</samp><samp class="p" data-group-id="1626963898-1">}</samp><samp class="w">
</samp><samp class="n">on_mount</samp><samp class="w"> </samp><samp class="p" data-group-id="1626963898-2">{</samp><samp class="nc">MyAppWeb.SomeHook</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:user</samp><samp class="p" data-group-id="1626963898-2">}</samp></code></pre><p>Registering <code class="inline">on_mount</code> hooks can be useful to perform authentication
as well as add custom behaviour to other callbacks via <a href="#attach_hook/4"><code class="inline">attach_hook/4</code></a>.</p><p>The <code class="inline">on_mount</code> callback can return a keyword list of options as a third
element in the return tuple. These options are identical to what can
optionally be returned in <a href="#c:mount/3"><code class="inline">mount/3</code></a>.</p><h2 id="on_mount/1-examples" class="section-heading"><a href="#on_mount/1-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><p>The following is an example of attaching a hook via
<a href="Phoenix.LiveView.Router.xhtml#live_session/3"><code class="inline">Phoenix.LiveView.Router.live_session/3</code></a>:</p><pre><code class="makeup elixir" translate="no"><samp class="c1"># lib/my_app_web/live/init_assigns.ex</samp><samp class="w">
</samp><samp class="kd">defmodule</samp><samp class="w"> </samp><samp class="nc">MyAppWeb.InitAssigns</samp><samp class="w"> </samp><samp class="k" data-group-id="3477075797-1">do</samp><samp class="w">
  </samp><samp class="na">@moduledoc</samp><samp class="w"> </samp><samp class="s">&quot;&quot;&quot;
  Ensures common `assigns` are applied to all LiveViews attaching this hook.
  &quot;&quot;&quot;</samp><samp class="w">
  </samp><samp class="kn">import</samp><samp class="w"> </samp><samp class="nc">Phoenix.LiveView</samp><samp class="w">
  </samp><samp class="kn">import</samp><samp class="w"> </samp><samp class="nc">Phoenix.Component</samp><samp class="w">

  </samp><samp class="kd">def</samp><samp class="w"> </samp><samp class="nf">on_mount</samp><samp class="p" data-group-id="3477075797-2">(</samp><samp class="ss">:default</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="c">_params</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="c">_session</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">socket</samp><samp class="p" data-group-id="3477075797-2">)</samp><samp class="w"> </samp><samp class="k" data-group-id="3477075797-3">do</samp><samp class="w">
    </samp><samp class="p" data-group-id="3477075797-4">{</samp><samp class="ss">:cont</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">assign</samp><samp class="p" data-group-id="3477075797-5">(</samp><samp class="n">socket</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:page_title</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;DemoWeb&quot;</samp><samp class="p" data-group-id="3477075797-5">)</samp><samp class="p" data-group-id="3477075797-4">}</samp><samp class="w">
  </samp><samp class="k" data-group-id="3477075797-3">end</samp><samp class="w">

  </samp><samp class="kd">def</samp><samp class="w"> </samp><samp class="nf">on_mount</samp><samp class="p" data-group-id="3477075797-6">(</samp><samp class="ss">:user</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">params</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">session</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">socket</samp><samp class="p" data-group-id="3477075797-6">)</samp><samp class="w"> </samp><samp class="k" data-group-id="3477075797-7">do</samp><samp class="w">
    </samp><samp class="c1"># code</samp><samp class="w">
  </samp><samp class="k" data-group-id="3477075797-7">end</samp><samp class="w">

  </samp><samp class="kd">def</samp><samp class="w"> </samp><samp class="nf">on_mount</samp><samp class="p" data-group-id="3477075797-8">(</samp><samp class="ss">:admin</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="c">_params</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="c">_session</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">socket</samp><samp class="p" data-group-id="3477075797-8">)</samp><samp class="w"> </samp><samp class="k" data-group-id="3477075797-9">do</samp><samp class="w">
    </samp><samp class="p" data-group-id="3477075797-10">{</samp><samp class="ss">:cont</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">socket</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">layout</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="3477075797-11">{</samp><samp class="nc">DemoWeb.Layouts</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:admin</samp><samp class="p" data-group-id="3477075797-11">}</samp><samp class="p" data-group-id="3477075797-10">}</samp><samp class="w">
  </samp><samp class="k" data-group-id="3477075797-9">end</samp><samp class="w">
</samp><samp class="k" data-group-id="3477075797-1">end</samp><samp class="w">

</samp><samp class="c1"># lib/my_app_web/router.ex</samp><samp class="w">
</samp><samp class="kd">defmodule</samp><samp class="w"> </samp><samp class="nc">MyAppWeb.Router</samp><samp class="w"> </samp><samp class="k" data-group-id="3477075797-12">do</samp><samp class="w">
  </samp><samp class="kn">use</samp><samp class="w"> </samp><samp class="nc">MyAppWeb</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:router</samp><samp class="w">

  </samp><samp class="c1"># pipelines, plugs, etc.</samp><samp class="w">

  </samp><samp class="n">live_session</samp><samp class="w"> </samp><samp class="ss">:default</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">on_mount</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="nc">MyAppWeb.InitAssigns</samp><samp class="w"> </samp><samp class="k" data-group-id="3477075797-13">do</samp><samp class="w">
    </samp><samp class="n">scope</samp><samp class="w"> </samp><samp class="s">&quot;/&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="nc">MyAppWeb</samp><samp class="w"> </samp><samp class="k" data-group-id="3477075797-14">do</samp><samp class="w">
      </samp><samp class="n">pipe_through</samp><samp class="w"> </samp><samp class="ss">:browser</samp><samp class="w">
      </samp><samp class="n">live</samp><samp class="w"> </samp><samp class="s">&quot;/&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="nc">PageLive</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:index</samp><samp class="w">
    </samp><samp class="k" data-group-id="3477075797-14">end</samp><samp class="w">
  </samp><samp class="k" data-group-id="3477075797-13">end</samp><samp class="w">

  </samp><samp class="n">live_session</samp><samp class="w"> </samp><samp class="ss">:authenticated</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">on_mount</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="3477075797-15">{</samp><samp class="nc">MyAppWeb.InitAssigns</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:user</samp><samp class="p" data-group-id="3477075797-15">}</samp><samp class="w"> </samp><samp class="k" data-group-id="3477075797-16">do</samp><samp class="w">
    </samp><samp class="n">scope</samp><samp class="w"> </samp><samp class="s">&quot;/&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="nc">MyAppWeb</samp><samp class="w"> </samp><samp class="k" data-group-id="3477075797-17">do</samp><samp class="w">
      </samp><samp class="n">pipe_through</samp><samp class="w"> </samp><samp class="p" data-group-id="3477075797-18">[</samp><samp class="ss">:browser</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:require_user</samp><samp class="p" data-group-id="3477075797-18">]</samp><samp class="w">
      </samp><samp class="n">live</samp><samp class="w"> </samp><samp class="s">&quot;/profile&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="nc">UserLive.Profile</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:index</samp><samp class="w">
    </samp><samp class="k" data-group-id="3477075797-17">end</samp><samp class="w">
  </samp><samp class="k" data-group-id="3477075797-16">end</samp><samp class="w">

  </samp><samp class="n">live_session</samp><samp class="w"> </samp><samp class="ss">:admins</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">on_mount</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="3477075797-19">{</samp><samp class="nc">MyAppWeb.InitAssigns</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:admin</samp><samp class="p" data-group-id="3477075797-19">}</samp><samp class="w"> </samp><samp class="k" data-group-id="3477075797-20">do</samp><samp class="w">
    </samp><samp class="n">scope</samp><samp class="w"> </samp><samp class="s">&quot;/admin&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="nc">MyAppWeb.Admin</samp><samp class="w"> </samp><samp class="k" data-group-id="3477075797-21">do</samp><samp class="w">
      </samp><samp class="n">pipe_through</samp><samp class="w"> </samp><samp class="p" data-group-id="3477075797-22">[</samp><samp class="ss">:browser</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:require_user</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:require_admin</samp><samp class="p" data-group-id="3477075797-22">]</samp><samp class="w">
      </samp><samp class="n">live</samp><samp class="w"> </samp><samp class="s">&quot;/&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="nc">AdminLive.Index</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:index</samp><samp class="w">
    </samp><samp class="k" data-group-id="3477075797-21">end</samp><samp class="w">
  </samp><samp class="k" data-group-id="3477075797-20">end</samp><samp class="w">
</samp><samp class="k" data-group-id="3477075797-12">end</samp></code></pre>
  </section>
</section>
<section class="detail" id="push_event/3">

  <div class="detail-header">
    <a href="#push_event/3" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">push_event(socket, event, payload)</h1>


        <a href="https://github.com/phoenixframework/phoenix_live_view/blob/v1.1.2/lib/phoenix_live_view.ex#L783" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

<p>Pushes an event to the client.</p><p>Events can be handled in two ways:</p><ol><li><p>They can be handled on <code class="inline">window</code> via <code class="inline">addEventListener</code>.
A &quot;phx:&quot; prefix will be added to the event name.</p></li><li><p>They can be handled inside a hook via <code class="inline">handleEvent</code>.</p></li></ol><p>Events are dispatched to all active hooks on the client who are
handling the given <code class="inline">event</code>. If you need to scope events, then
this must be done by namespacing them.</p><p>Events pushed during <code class="inline">push_navigate</code> are currently discarded,
as the LiveView is immediately dismounted.</p><h2 id="push_event/3-hook-example" class="section-heading"><a href="#push_event/3-hook-example" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Hook example</span></h2><p>If you push a &quot;scores&quot; event from your LiveView:</p><pre><code class="makeup elixir" translate="no"><samp class="p" data-group-id="7500438077-1">{</samp><samp class="ss">:noreply</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">push_event</samp><samp class="p" data-group-id="7500438077-2">(</samp><samp class="n">socket</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;scores&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="7500438077-3">%{</samp><samp class="ss">points</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">100</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">user</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;josé&quot;</samp><samp class="p" data-group-id="7500438077-3">}</samp><samp class="p" data-group-id="7500438077-2">)</samp><samp class="p" data-group-id="7500438077-1">}</samp></code></pre><p>A hook declared via <code class="inline">phx-hook</code> can handle it via <code class="inline">handleEvent</code>:</p><pre><code class="makeup javascript" translate="no"><samp class="nb">this</samp><samp class="p">.</samp><samp class="nf">handleEvent</samp><samp class="p">(</samp><samp class="p">&quot;</samp><samp class="s2">scores</samp><samp class="p">&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="nv">data</samp><samp class="w"> </samp><samp class="kt">=&gt;</samp><samp class="w"> </samp><samp class="o">...</samp><samp class="p">)</samp></code></pre><h2 id="push_event/3-window-example" class="section-heading"><a href="#push_event/3-window-example" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text"><code class="inline">window</code> example</span></h2><p>All events are also dispatched on the <code class="inline">window</code>. This means you can handle
them by adding listeners. For example, if you want to remove an element
from the page, you can do this:</p><pre><code class="makeup elixir" translate="no"><samp class="p" data-group-id="5524853725-1">{</samp><samp class="ss">:noreply</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">push_event</samp><samp class="p" data-group-id="5524853725-2">(</samp><samp class="n">socket</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;remove-el&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="5524853725-3">%{</samp><samp class="ss">id</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;foo-bar&quot;</samp><samp class="p" data-group-id="5524853725-3">}</samp><samp class="p" data-group-id="5524853725-2">)</samp><samp class="p" data-group-id="5524853725-1">}</samp></code></pre><p>And now in your app.js you can register and handle it:</p><pre><code class="makeup javascript" translate="no"><samp class="nb">window</samp><samp class="p">.</samp><samp class="nf">addEventListener</samp><samp class="p">(</samp><samp class="w">
</samp><samp class="w">  </samp><samp class="p">&quot;</samp><samp class="s2">phx:remove-el</samp><samp class="p">&quot;</samp><samp class="p">,</samp><samp class="w">
</samp><samp class="w">  </samp><samp class="nv">e</samp><samp class="w"> </samp><samp class="kt">=&gt;</samp><samp class="w"> </samp><samp class="nb">document</samp><samp class="p">.</samp><samp class="nf">getElementById</samp><samp class="p">(</samp><samp class="nv">e</samp><samp class="p">.</samp><samp class="n">detail</samp><samp class="p">.</samp><samp class="n">id</samp><samp class="p">)</samp><samp class="p">.</samp><samp class="nf">remove</samp><samp class="p">(</samp><samp class="p">)</samp><samp class="w">
</samp><samp class="p">)</samp></code></pre>
  </section>
</section>
<section class="detail" id="push_navigate/2">

  <div class="detail-header">
    <a href="#push_navigate/2" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">push_navigate(socket, opts)</h1>


        <a href="https://github.com/phoenixframework/phoenix_live_view/blob/v1.1.2/lib/phoenix_live_view.ex#L1072" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

<p>Annotates the socket for navigation to another LiveView in the same <code class="inline">live_session</code>.</p><p>The current LiveView will be shutdown and a new one will be mounted
in its place, without reloading the whole page. This can
also be used to remount the same LiveView, in case you want to start
fresh. If you want to navigate to the same LiveView without remounting
it, use <a href="#push_patch/2"><code class="inline">push_patch/2</code></a> instead.</p><h2 id="push_navigate/2-options" class="section-heading"><a href="#push_navigate/2-options" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Options</span></h2><ul><li><code class="inline">:to</code> - the required path to link to. It must always be a local path</li><li><code class="inline">:replace</code> - the flag to replace the current history or push a new state.
Defaults <code class="inline">false</code>.</li></ul><h2 id="push_navigate/2-examples" class="section-heading"><a href="#push_navigate/2-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="p" data-group-id="5707247951-1">{</samp><samp class="ss">:noreply</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">push_navigate</samp><samp class="p" data-group-id="5707247951-2">(</samp><samp class="n">socket</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">to</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;/&quot;</samp><samp class="p" data-group-id="5707247951-2">)</samp><samp class="p" data-group-id="5707247951-1">}</samp><samp class="w">
</samp><samp class="p" data-group-id="5707247951-3">{</samp><samp class="ss">:noreply</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">push_navigate</samp><samp class="p" data-group-id="5707247951-4">(</samp><samp class="n">socket</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">to</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;/&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">replace</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">true</samp><samp class="p" data-group-id="5707247951-4">)</samp><samp class="p" data-group-id="5707247951-3">}</samp></code></pre>
  </section>
</section>
<section class="detail" id="push_patch/2">

  <div class="detail-header">
    <a href="#push_patch/2" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">push_patch(socket, opts)</h1>


        <a href="https://github.com/phoenixframework/phoenix_live_view/blob/v1.1.2/lib/phoenix_live_view.ex#L1046" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

<p>Annotates the socket for navigation within the current LiveView.</p><p>When navigating to the current LiveView, <a href="#c:handle_params/3"><code class="inline">handle_params/3</code></a> is
immediately invoked to handle the change of params and URL state.
Then the new state is pushed to the client, without reloading the
whole page while also maintaining the current scroll position.
For live navigation to another LiveView in the same <code class="inline">live_session</code>,
use <a href="#push_navigate/2"><code class="inline">push_navigate/2</code></a>. Otherwise, use <a href="#redirect/2"><code class="inline">redirect/2</code></a>.</p><h2 id="push_patch/2-options" class="section-heading"><a href="#push_patch/2-options" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Options</span></h2><ul><li><code class="inline">:to</code> - the required path to link to. It must always be a local path</li><li><code class="inline">:replace</code> - the flag to replace the current history or push a new state.
Defaults <code class="inline">false</code>.</li></ul><h2 id="push_patch/2-examples" class="section-heading"><a href="#push_patch/2-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="p" data-group-id="6573820291-1">{</samp><samp class="ss">:noreply</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">push_patch</samp><samp class="p" data-group-id="6573820291-2">(</samp><samp class="n">socket</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">to</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;/&quot;</samp><samp class="p" data-group-id="6573820291-2">)</samp><samp class="p" data-group-id="6573820291-1">}</samp><samp class="w">
</samp><samp class="p" data-group-id="6573820291-3">{</samp><samp class="ss">:noreply</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">push_patch</samp><samp class="p" data-group-id="6573820291-4">(</samp><samp class="n">socket</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">to</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;/&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">replace</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">true</samp><samp class="p" data-group-id="6573820291-4">)</samp><samp class="p" data-group-id="6573820291-3">}</samp></code></pre>
  </section>
</section>
<section class="detail" id="put_flash/3">

  <div class="detail-header">
    <a href="#put_flash/3" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">put_flash(socket, kind, msg)</h1>


        <a href="https://github.com/phoenixframework/phoenix_live_view/blob/v1.1.2/lib/phoenix_live_view.ex#L696" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

<p>Adds a flash message to the socket to be displayed.</p><p>The flash message will stick around until it is read.
If you perform a redirect or a navigation event, the message will be
signed and temporarily stored in the client. Therefore it is important
to use flash messages only for user-facing notifications. Do not store
sensitive information in flash messages.</p><p>In a typical LiveView application, the message will be rendered by the
CoreComponents’ <code class="inline">flash/1</code> component. It is up to this function to determine
what kind of messages it supports. By default, the <code class="inline">:info</code> and <code class="inline">:error</code>
kinds are handled.</p><p><em>Note</em>: You must also place the <a href="Phoenix.LiveView.Router.xhtml#fetch_live_flash/2"><code class="inline">Phoenix.LiveView.Router.fetch_live_flash/2</code></a>
plug in your browser's pipeline in place of <code class="inline">fetch_flash</code> for LiveView flash
messages be supported, for example:</p><pre><code class="makeup elixir" translate="no"><samp class="kn">import</samp><samp class="w"> </samp><samp class="nc">Phoenix.LiveView.Router</samp><samp class="w">

</samp><samp class="n">pipeline</samp><samp class="w"> </samp><samp class="ss">:browser</samp><samp class="w"> </samp><samp class="k" data-group-id="6222896628-1">do</samp><samp class="w">
  </samp><samp class="n">...</samp><samp class="w">
  </samp><samp class="n">plug</samp><samp class="w"> </samp><samp class="ss">:fetch_live_flash</samp><samp class="w">
</samp><samp class="k" data-group-id="6222896628-1">end</samp></code></pre><h2 id="put_flash/3-examples" class="section-heading"><a href="#put_flash/3-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="n">put_flash</samp><samp class="p" data-group-id="2743987928-1">(</samp><samp class="n">socket</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:info</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;It worked!&quot;</samp><samp class="p" data-group-id="2743987928-1">)</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="n">put_flash</samp><samp class="p" data-group-id="2743987928-2">(</samp><samp class="n">socket</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:error</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;You can&#39;t access that page&quot;</samp><samp class="p" data-group-id="2743987928-2">)</samp></code></pre><h2 id="put_flash/3-inside-components" class="section-heading"><a href="#put_flash/3-inside-components" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Inside components</span></h2><p>You can use <a href="#put_flash/3"><code class="inline">put_flash/3</code></a> inside a <a href="Phoenix.LiveComponent.xhtml"><code class="inline">Phoenix.LiveComponent</code></a> and
components have their own <code class="inline">@flash</code> assigns. The <code class="inline">@flash</code> assign
in a component is only copied to its parent LiveView if the component
calls <a href="#push_navigate/2"><code class="inline">push_navigate/2</code></a> or <a href="#push_patch/2"><code class="inline">push_patch/2</code></a>.</p>
  </section>
</section>
<section class="detail" id="put_private/3">

  <div class="detail-header">
    <a href="#put_private/3" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">put_private(socket, key, value)</h1>


        <a href="https://github.com/phoenixframework/phoenix_live_view/blob/v1.1.2/lib/phoenix_live_view.ex#L651" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

<p>Puts a new private key and value in the socket.</p><p>Privates are <em>not change tracked</em>. This storage is meant to be used by
users and libraries to hold state that doesn't require
change tracking. The keys should be prefixed with the app/library name.</p><h2 id="put_private/3-examples" class="section-heading"><a href="#put_private/3-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><p>Key values can be placed in private:</p><pre><code class="makeup elixir" translate="no"><samp class="n">put_private</samp><samp class="p" data-group-id="0136436150-1">(</samp><samp class="n">socket</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:myapp_meta</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="0136436150-2">%{</samp><samp class="ss">foo</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;bar&quot;</samp><samp class="p" data-group-id="0136436150-2">}</samp><samp class="p" data-group-id="0136436150-1">)</samp></code></pre><p>And then retrieved:</p><pre><code class="makeup elixir" translate="no"><samp class="n">socket</samp><samp class="o">.</samp><samp class="n">private</samp><samp class="p" data-group-id="6359558170-1">[</samp><samp class="ss">:myapp_meta</samp><samp class="p" data-group-id="6359558170-1">]</samp></code></pre>
  </section>
</section>
<section class="detail" id="redirect/2">

    <span id="redirect/1"></span>

  <div class="detail-header">
    <a href="#redirect/2" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">redirect(socket, opts \\ [])</h1>


        <a href="https://github.com/phoenixframework/phoenix_live_view/blob/v1.1.2/lib/phoenix_live_view.ex#L981" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

<p>Annotates the socket for redirect to a destination path.</p><p><em>Note</em>: LiveView redirects rely on instructing client
to perform a <code class="inline">window.location</code> update on the provided
redirect location. The whole page will be reloaded and
all state will be discarded.</p><h2 id="redirect/2-options" class="section-heading"><a href="#redirect/2-options" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Options</span></h2><ul><li><code class="inline">:to</code> - the path to redirect to. It must always be a local path</li><li><code class="inline">:status</code> - the HTTP status code to use for the redirect. Defaults to 302.</li><li><code class="inline">:external</code> - an external path to redirect to. Either a string
or <code class="inline">{scheme, url}</code> to redirect to a custom scheme</li></ul><h2 id="redirect/2-examples" class="section-heading"><a href="#redirect/2-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="p" data-group-id="5322678169-1">{</samp><samp class="ss">:noreply</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">redirect</samp><samp class="p" data-group-id="5322678169-2">(</samp><samp class="n">socket</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">to</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;/&quot;</samp><samp class="p" data-group-id="5322678169-2">)</samp><samp class="p" data-group-id="5322678169-1">}</samp><samp class="w">
</samp><samp class="p" data-group-id="5322678169-3">{</samp><samp class="ss">:noreply</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">redirect</samp><samp class="p" data-group-id="5322678169-4">(</samp><samp class="n">socket</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">to</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;/&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">status</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">301</samp><samp class="p" data-group-id="5322678169-4">)</samp><samp class="p" data-group-id="5322678169-3">}</samp><samp class="w">
</samp><samp class="p" data-group-id="5322678169-5">{</samp><samp class="ss">:noreply</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">redirect</samp><samp class="p" data-group-id="5322678169-6">(</samp><samp class="n">socket</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">external</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;https://example.com&quot;</samp><samp class="p" data-group-id="5322678169-6">)</samp><samp class="p" data-group-id="5322678169-5">}</samp></code></pre>
  </section>
</section>
<section class="detail" id="render_with/2">

  <div class="detail-header">
    <a href="#render_with/2" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">render_with(socket, component)</h1>


        <a href="https://github.com/phoenixframework/phoenix_live_view/blob/v1.1.2/lib/phoenix_live_view.ex#L619" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

<p>Configures which function to use to render a LiveView/LiveComponent.</p><p>By default, LiveView invokes the <code class="inline">render/1</code> function in the same module
the LiveView/LiveComponent is defined, passing <code class="inline">assigns</code> as its sole
argument. This function allows you to set a different rendering function.</p><p>One possible use case for this function is to set a different template
on disconnected render. When the user first accesses a LiveView, we will
perform a disconnected render to send to the browser. This is useful for
several reasons, such as reducing the time to first paint and for search
engine indexing.</p><p>However, when LiveView is gated behind an authentication page, it may be
useful to render a placeholder on disconnected render and perform the
full render once the WebSocket connects. This can be achieved with
<a href="#render_with/2"><code class="inline">render_with/2</code></a> and is particularly useful on complex pages (such as
dashboards and reports).</p><p>To do so, you must simply invoke <code class="inline">render_with(socket, &amp;some_function_component/1)</code>,
configuring your socket with a new rendering function.</p>
  </section>
</section>
<section class="detail" id="send_update/3">

    <span id="send_update/2"></span>

  <div class="detail-header">
    <a href="#send_update/3" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">send_update(pid \\ self(), module_or_cid, assigns)</h1>


        <a href="https://github.com/phoenixframework/phoenix_live_view/blob/v1.1.2/lib/phoenix_live_view.ex#L1403" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

<p>Asynchronously updates a <a href="Phoenix.LiveComponent.xhtml"><code class="inline">Phoenix.LiveComponent</code></a> with new assigns.</p><p>The <code class="inline">pid</code> argument is optional and it defaults to the current process,
which means the update instruction will be sent to a component running
on the same LiveView. If the current process is not a LiveView or you
want to send updates to a live component running on another LiveView,
you should explicitly pass the LiveView's pid instead.</p><p>The second argument can be either the value of the <code class="inline">@myself</code> or the module of
the live component. If you pass the module, then the <code class="inline">:id</code> that identifies
the component must be passed as part of the assigns.</p><p>When the component receives the update,
<a href="Phoenix.LiveComponent.xhtml#c:update_many/1"><code class="inline">update_many/1</code></a> will be invoked if
it is defined, otherwise <a href="Phoenix.LiveComponent.xhtml#c:update/2"><code class="inline">update/2</code></a> is
invoked with the new assigns.  If
<a href="Phoenix.LiveComponent.xhtml#c:update/2"><code class="inline">update/2</code></a> is not defined all assigns
are simply merged into the socket. The assigns received as the first argument
of the <a href="Phoenix.LiveComponent.xhtml#c:update/2"><code class="inline">update/2</code></a> callback will only
include the <em>new</em> assigns passed from this function.  Pre-existing assigns may
be found in <code class="inline">socket.assigns</code>.</p><p>While a component may always be updated from the parent by updating some
parent assigns which will re-render the child, thus invoking
<a href="Phoenix.LiveComponent.xhtml#c:update/2"><code class="inline">update/2</code></a> on the child component,
<a href="#send_update/3"><code class="inline">send_update/3</code></a> is useful for updating a component that entirely manages its
own state, as well as messaging between components mounted in the same
LiveView.</p><h2 id="send_update/3-examples" class="section-heading"><a href="#send_update/3-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="kd">def</samp><samp class="w"> </samp><samp class="nf">handle_event</samp><samp class="p" data-group-id="0620357879-1">(</samp><samp class="s">&quot;cancel-order&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="bp">_</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">socket</samp><samp class="p" data-group-id="0620357879-1">)</samp><samp class="w"> </samp><samp class="k" data-group-id="0620357879-2">do</samp><samp class="w">
  </samp><samp class="n">...</samp><samp class="w">
  </samp><samp class="n">send_update</samp><samp class="p" data-group-id="0620357879-3">(</samp><samp class="nc">Cart</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">id</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;cart&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">status</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;cancelled&quot;</samp><samp class="p" data-group-id="0620357879-3">)</samp><samp class="w">
  </samp><samp class="p" data-group-id="0620357879-4">{</samp><samp class="ss">:noreply</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">socket</samp><samp class="p" data-group-id="0620357879-4">}</samp><samp class="w">
</samp><samp class="k" data-group-id="0620357879-2">end</samp><samp class="w">

</samp><samp class="kd">def</samp><samp class="w"> </samp><samp class="nf">handle_event</samp><samp class="p" data-group-id="0620357879-5">(</samp><samp class="s">&quot;cancel-order-asynchronously&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="bp">_</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">socket</samp><samp class="p" data-group-id="0620357879-5">)</samp><samp class="w"> </samp><samp class="k" data-group-id="0620357879-6">do</samp><samp class="w">
  </samp><samp class="n">...</samp><samp class="w">
  </samp><samp class="n">pid</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="n">self</samp><samp class="p" data-group-id="0620357879-7">(</samp><samp class="p" data-group-id="0620357879-7">)</samp><samp class="w">

  </samp><samp class="nc">Task.Supervisor</samp><samp class="o">.</samp><samp class="n">start_child</samp><samp class="p" data-group-id="0620357879-8">(</samp><samp class="nc">MyTaskSup</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="k" data-group-id="0620357879-9">fn</samp><samp class="w"> </samp><samp class="o">-&gt;</samp><samp class="w">
    </samp><samp class="c1"># Do something asynchronously</samp><samp class="w">
    </samp><samp class="n">send_update</samp><samp class="p" data-group-id="0620357879-10">(</samp><samp class="n">pid</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="nc">Cart</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">id</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;cart&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">status</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;cancelled&quot;</samp><samp class="p" data-group-id="0620357879-10">)</samp><samp class="w">
  </samp><samp class="k" data-group-id="0620357879-9">end</samp><samp class="p" data-group-id="0620357879-8">)</samp><samp class="w">

  </samp><samp class="p" data-group-id="0620357879-11">{</samp><samp class="ss">:noreply</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">socket</samp><samp class="p" data-group-id="0620357879-11">}</samp><samp class="w">
</samp><samp class="k" data-group-id="0620357879-6">end</samp><samp class="w">

</samp><samp class="kd">def</samp><samp class="w"> </samp><samp class="nf">render</samp><samp class="p" data-group-id="0620357879-12">(</samp><samp class="n">assigns</samp><samp class="p" data-group-id="0620357879-12">)</samp><samp class="w"> </samp><samp class="k" data-group-id="0620357879-13">do</samp><samp class="w">
  </samp><samp class="sx">~H&quot;&quot;&quot;</samp><samp class="w">
</samp><samp class="w">  </samp><samp class="p">&lt;</samp><samp class="nf">.some_component</samp><samp class="w"> </samp><samp class="na">on_complete</samp><samp class="p">=</samp><samp class="p" data-group-id="5277089039-1">{</samp><samp class="o">&amp;</samp><samp class="n">send_update</samp><samp class="p" data-group-id="0620357879-14">(</samp><samp class="na">@myself</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">completed</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="ni">&amp;1</samp><samp class="p" data-group-id="0620357879-14">)</samp><samp class="p" data-group-id="5277089039-1">}</samp><samp class="w"> </samp><samp class="p">/&gt;</samp><samp class="w">
</samp><samp class="w">  </samp><samp class="sx">&quot;&quot;&quot;</samp><samp class="w">
</samp><samp class="k" data-group-id="0620357879-13">end</samp></code></pre>
  </section>
</section>
<section class="detail" id="send_update_after/4">

    <span id="send_update_after/3"></span>

  <div class="detail-header">
    <a href="#send_update_after/4" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">send_update_after(pid \\ self(), module_or_cid, assigns, time_in_milliseconds)</h1>


        <a href="https://github.com/phoenixframework/phoenix_live_view/blob/v1.1.2/lib/phoenix_live_view.ex#L1446" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

<p>Similar to <a href="#send_update/3"><code class="inline">send_update/3</code></a> but the update will be delayed according to the given <code class="inline">time_in_milliseconds</code>.</p><p>It returns a reference which can be cancelled with <a href="https://hexdocs.pm/elixir/Process.html#cancel_timer/1"><code class="inline">Process.cancel_timer/1</code></a>.</p><h2 id="send_update_after/4-examples" class="section-heading"><a href="#send_update_after/4-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="kd">def</samp><samp class="w"> </samp><samp class="nf">handle_event</samp><samp class="p" data-group-id="0853979481-1">(</samp><samp class="s">&quot;cancel-order&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="bp">_</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">socket</samp><samp class="p" data-group-id="0853979481-1">)</samp><samp class="w"> </samp><samp class="k" data-group-id="0853979481-2">do</samp><samp class="w">
  </samp><samp class="n">...</samp><samp class="w">
  </samp><samp class="n">send_update_after</samp><samp class="p" data-group-id="0853979481-3">(</samp><samp class="nc">Cart</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="0853979481-4">[</samp><samp class="ss">id</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;cart&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">status</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;cancelled&quot;</samp><samp class="p" data-group-id="0853979481-4">]</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">3000</samp><samp class="p" data-group-id="0853979481-3">)</samp><samp class="w">
  </samp><samp class="p" data-group-id="0853979481-5">{</samp><samp class="ss">:noreply</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">socket</samp><samp class="p" data-group-id="0853979481-5">}</samp><samp class="w">
</samp><samp class="k" data-group-id="0853979481-2">end</samp><samp class="w">

</samp><samp class="kd">def</samp><samp class="w"> </samp><samp class="nf">handle_event</samp><samp class="p" data-group-id="0853979481-6">(</samp><samp class="s">&quot;cancel-order-asynchronously&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="bp">_</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">socket</samp><samp class="p" data-group-id="0853979481-6">)</samp><samp class="w"> </samp><samp class="k" data-group-id="0853979481-7">do</samp><samp class="w">
  </samp><samp class="n">...</samp><samp class="w">
  </samp><samp class="n">pid</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="n">self</samp><samp class="p" data-group-id="0853979481-8">(</samp><samp class="p" data-group-id="0853979481-8">)</samp><samp class="w">

  </samp><samp class="nc">Task</samp><samp class="o">.</samp><samp class="n">start</samp><samp class="p" data-group-id="0853979481-9">(</samp><samp class="k" data-group-id="0853979481-10">fn</samp><samp class="w"> </samp><samp class="o">-&gt;</samp><samp class="w">
    </samp><samp class="c1"># Do something asynchronously</samp><samp class="w">
    </samp><samp class="n">send_update_after</samp><samp class="p" data-group-id="0853979481-11">(</samp><samp class="n">pid</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="nc">Cart</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="0853979481-12">[</samp><samp class="ss">id</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;cart&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">status</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;cancelled&quot;</samp><samp class="p" data-group-id="0853979481-12">]</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="mi">3000</samp><samp class="p" data-group-id="0853979481-11">)</samp><samp class="w">
  </samp><samp class="k" data-group-id="0853979481-10">end</samp><samp class="p" data-group-id="0853979481-9">)</samp><samp class="w">

  </samp><samp class="p" data-group-id="0853979481-13">{</samp><samp class="ss">:noreply</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">socket</samp><samp class="p" data-group-id="0853979481-13">}</samp><samp class="w">
</samp><samp class="k" data-group-id="0853979481-7">end</samp></code></pre>
  </section>
</section>
<section class="detail" id="start_async/4">

    <span id="start_async/3"></span>

  <div class="detail-header">
    <a href="#start_async/4" class="detail-link" data-no-tooltip="" aria-label="Link to this macro">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">start_async(socket, name, func, opts \\ [])</h1>

        <span class="note">(macro)</span>


        <a href="https://github.com/phoenixframework/phoenix_live_view/blob/v1.1.2/lib/phoenix_live_view.ex#L2248" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

<p>Wraps your function in an asynchronous task and invokes a callback <code class="inline">name</code> to
handle the result.</p><p>The task is linked to the caller and errors/exits are wrapped.
The result of the task is sent to the <a href="#c:handle_async/3"><code class="inline">handle_async/3</code></a> callback
of the caller LiveView or LiveComponent.</p><p>If there is an in-flight task with the same <code class="inline">name</code>, the later <code class="inline">start_async</code> wins and the previous task’s result is ignored.
If you wish to replace an existing task, you can use <a href="#cancel_async/3"><code class="inline">cancel_async/3</code></a> before <a href="#start_async/3"><code class="inline">start_async/3</code></a>.
You are not restricted to just atoms for <code class="inline">name</code>, it can be any term such as a tuple.</p><p>The task is only started when the socket is connected.</p><h2 id="start_async/4-options" class="section-heading"><a href="#start_async/4-options" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Options</span></h2><ul><li><code class="inline">:supervisor</code> - allows you to specify a <a href="https://hexdocs.pm/elixir/Task.Supervisor.html"><code class="inline">Task.Supervisor</code></a> to supervise the task.</li></ul><h2 id="start_async/4-examples" class="section-heading"><a href="#start_async/4-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="kd">def</samp><samp class="w"> </samp><samp class="nf">mount</samp><samp class="p" data-group-id="7494814152-1">(</samp><samp class="p" data-group-id="7494814152-2">%{</samp><samp class="s">&quot;id&quot;</samp><samp class="w"> </samp><samp class="p">=&gt;</samp><samp class="w"> </samp><samp class="n">id</samp><samp class="p" data-group-id="7494814152-2">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="bp">_</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">socket</samp><samp class="p" data-group-id="7494814152-1">)</samp><samp class="w"> </samp><samp class="k" data-group-id="7494814152-3">do</samp><samp class="w">
  </samp><samp class="p" data-group-id="7494814152-4">{</samp><samp class="ss">:ok</samp><samp class="p">,</samp><samp class="w">
   </samp><samp class="n">socket</samp><samp class="w">
   </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="n">assign</samp><samp class="p" data-group-id="7494814152-5">(</samp><samp class="ss">:org</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="nc">AsyncResult</samp><samp class="o">.</samp><samp class="n">loading</samp><samp class="p" data-group-id="7494814152-6">(</samp><samp class="p" data-group-id="7494814152-6">)</samp><samp class="p" data-group-id="7494814152-5">)</samp><samp class="w">
   </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="n">start_async</samp><samp class="p" data-group-id="7494814152-7">(</samp><samp class="ss">:my_task</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="k" data-group-id="7494814152-8">fn</samp><samp class="w"> </samp><samp class="o">-&gt;</samp><samp class="w"> </samp><samp class="n">fetch_org!</samp><samp class="p" data-group-id="7494814152-9">(</samp><samp class="n">id</samp><samp class="p" data-group-id="7494814152-9">)</samp><samp class="w"> </samp><samp class="k" data-group-id="7494814152-8">end</samp><samp class="p" data-group-id="7494814152-7">)</samp><samp class="p" data-group-id="7494814152-4">}</samp><samp class="w">
</samp><samp class="k" data-group-id="7494814152-3">end</samp><samp class="w">

</samp><samp class="kd">def</samp><samp class="w"> </samp><samp class="nf">handle_async</samp><samp class="p" data-group-id="7494814152-10">(</samp><samp class="ss">:my_task</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="7494814152-11">{</samp><samp class="ss">:ok</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">fetched_org</samp><samp class="p" data-group-id="7494814152-11">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">socket</samp><samp class="p" data-group-id="7494814152-10">)</samp><samp class="w"> </samp><samp class="k" data-group-id="7494814152-12">do</samp><samp class="w">
  </samp><samp class="p" data-group-id="7494814152-13">%{</samp><samp class="ss">org</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="n">org</samp><samp class="p" data-group-id="7494814152-13">}</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="n">socket</samp><samp class="o">.</samp><samp class="n">assigns</samp><samp class="w">
  </samp><samp class="p" data-group-id="7494814152-14">{</samp><samp class="ss">:noreply</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">assign</samp><samp class="p" data-group-id="7494814152-15">(</samp><samp class="n">socket</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:org</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="nc">AsyncResult</samp><samp class="o">.</samp><samp class="n">ok</samp><samp class="p" data-group-id="7494814152-16">(</samp><samp class="n">org</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">fetched_org</samp><samp class="p" data-group-id="7494814152-16">)</samp><samp class="p" data-group-id="7494814152-15">)</samp><samp class="p" data-group-id="7494814152-14">}</samp><samp class="w">
</samp><samp class="k" data-group-id="7494814152-12">end</samp><samp class="w">

</samp><samp class="kd">def</samp><samp class="w"> </samp><samp class="nf">handle_async</samp><samp class="p" data-group-id="7494814152-17">(</samp><samp class="ss">:my_task</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="7494814152-18">{</samp><samp class="ss">:exit</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">reason</samp><samp class="p" data-group-id="7494814152-18">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">socket</samp><samp class="p" data-group-id="7494814152-17">)</samp><samp class="w"> </samp><samp class="k" data-group-id="7494814152-19">do</samp><samp class="w">
  </samp><samp class="p" data-group-id="7494814152-20">%{</samp><samp class="ss">org</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="n">org</samp><samp class="p" data-group-id="7494814152-20">}</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="n">socket</samp><samp class="o">.</samp><samp class="n">assigns</samp><samp class="w">
  </samp><samp class="p" data-group-id="7494814152-21">{</samp><samp class="ss">:noreply</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">assign</samp><samp class="p" data-group-id="7494814152-22">(</samp><samp class="n">socket</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:org</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="nc">AsyncResult</samp><samp class="o">.</samp><samp class="n">failed</samp><samp class="p" data-group-id="7494814152-23">(</samp><samp class="n">org</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="7494814152-24">{</samp><samp class="ss">:exit</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">reason</samp><samp class="p" data-group-id="7494814152-24">}</samp><samp class="p" data-group-id="7494814152-23">)</samp><samp class="p" data-group-id="7494814152-22">)</samp><samp class="p" data-group-id="7494814152-21">}</samp><samp class="w">
</samp><samp class="k" data-group-id="7494814152-19">end</samp></code></pre><p>See the moduledoc for more information.</p>
  </section>
</section>
<section class="detail" id="static_changed?/1">

  <div class="detail-header">
    <a href="#static_changed?/1" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">static_changed?(socket)</h1>


        <a href="https://github.com/phoenixframework/phoenix_live_view/blob/v1.1.2/lib/phoenix_live_view.ex#L1304" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

<p>Returns true if the socket is connected and the tracked static assets have changed.</p><p>This function is useful to detect if the client is running on an outdated
version of the marked static files. It works by comparing the static paths
sent by the client with the one on the server.</p><p><strong>Note:</strong> this functionality requires Phoenix v1.5.2 or later.</p><p>To use this functionality, the first step is to annotate which static files
you want to be tracked by LiveView, with the <code class="inline">phx-track-static</code>. For example:</p><pre><code class="makeup heex" translate="no"><samp class="p">&lt;</samp><samp class="nt">link</samp><samp class="w"> </samp><samp class="na">phx-track-static</samp><samp class="w"> </samp><samp class="na">rel</samp><samp class="p">=</samp><samp class="p">&quot;</samp><samp class="s2">stylesheet</samp><samp class="p">&quot;</samp><samp class="w"> </samp><samp class="na">href</samp><samp class="p">=</samp><samp class="p" data-group-id="7199419236-1">{</samp><samp class="sx">~p&quot;/assets/app.css&quot;</samp><samp class="p" data-group-id="7199419236-1">}</samp><samp class="w"> </samp><samp class="p">/&gt;</samp><samp class="w">
</samp><samp class="p">&lt;</samp><samp class="nt">script</samp><samp class="w"> </samp><samp class="na">defer</samp><samp class="w"> </samp><samp class="na">phx-track-static</samp><samp class="w"> </samp><samp class="na">type</samp><samp class="p">=</samp><samp class="p">&quot;</samp><samp class="s2">text/javascript</samp><samp class="p">&quot;</samp><samp class="w"> </samp><samp class="na">src</samp><samp class="p">=</samp><samp class="p" data-group-id="7199419236-2">{</samp><samp class="sx">~p&quot;/assets/app.js&quot;</samp><samp class="p" data-group-id="7199419236-2">}</samp><samp class="p">&gt;</samp><samp class="p">&lt;/</samp><samp class="nt">script</samp><samp class="p">&gt;</samp></code></pre><p>Now, whenever LiveView connects to the server, it will send a copy <code class="inline">src</code>
or <code class="inline">href</code> attributes of all tracked statics and compare those values with
the latest entries computed by <a href="https://hexdocs.pm/phoenix/1.8.0-rc.4/Mix.Tasks.Phx.Digest.html"><code class="inline">mix phx.digest</code></a> in the server.</p><p>The tracked statics on the client will match the ones on the server the
huge majority of times. However, if there is a new deployment, those values
may differ. You can use this function to detect those cases and show a
banner to the user, asking them to reload the page. To do so, first set the
assign on mount:</p><pre><code class="makeup elixir" translate="no"><samp class="kd">def</samp><samp class="w"> </samp><samp class="nf">mount</samp><samp class="p" data-group-id="2207784931-1">(</samp><samp class="n">params</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">session</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">socket</samp><samp class="p" data-group-id="2207784931-1">)</samp><samp class="w"> </samp><samp class="k" data-group-id="2207784931-2">do</samp><samp class="w">
  </samp><samp class="p" data-group-id="2207784931-3">{</samp><samp class="ss">:ok</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">assign</samp><samp class="p" data-group-id="2207784931-4">(</samp><samp class="n">socket</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">static_changed?</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="n">static_changed?</samp><samp class="p" data-group-id="2207784931-5">(</samp><samp class="n">socket</samp><samp class="p" data-group-id="2207784931-5">)</samp><samp class="p" data-group-id="2207784931-4">)</samp><samp class="p" data-group-id="2207784931-3">}</samp><samp class="w">
</samp><samp class="k" data-group-id="2207784931-2">end</samp></code></pre><p>And then in your views:</p><pre><code class="makeup heex" translate="no"><samp class="p">&lt;</samp><samp class="nt">div</samp><samp class="w"> </samp><samp class="na">:if</samp><samp class="p">=</samp><samp class="p" data-group-id="2767873877-1">{</samp><samp class="na">@static_changed?</samp><samp class="p" data-group-id="2767873877-1">}</samp><samp class="w"> </samp><samp class="na">id</samp><samp class="p">=</samp><samp class="p">&quot;</samp><samp class="s2">r</samp><samp class="s2">e</samp><samp class="s2">l</samp><samp class="s2">o</samp><samp class="s2">a</samp><samp class="s2">d</samp><samp class="s2">-</samp><samp class="s2">s</samp><samp class="s2">t</samp><samp class="s2">a</samp><samp class="s2">t</samp><samp class="s2">i</samp><samp class="s2">c</samp><samp class="p">&quot;</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="n">  The app has been updated. Click here to </samp><samp class="p">&lt;</samp><samp class="nt">a</samp><samp class="w"> </samp><samp class="na">href</samp><samp class="p">=</samp><samp class="p">&quot;</samp><samp class="s2">#</samp><samp class="p">&quot;</samp><samp class="w"> </samp><samp class="na">onclick</samp><samp class="p">=</samp><samp class="p">&quot;</samp><samp class="nb">window</samp><samp class="o">.</samp><samp class="na">location</samp><samp class="o">.</samp><samp class="nf">reload</samp><samp class="n">()</samp><samp class="p">&quot;</samp><samp class="p">&gt;</samp><samp class="n">reload</samp><samp class="p">&lt;/</samp><samp class="nt">a</samp><samp class="p">&gt;</samp><samp class="n">.
</samp><samp class="p">&lt;/</samp><samp class="nt">div</samp><samp class="p">&gt;</samp></code></pre><p>If you prefer, you can also send a JavaScript script that immediately
reloads the page.</p><p><strong>Note:</strong> only set <code class="inline">phx-track-static</code> on your own assets. For example, do
not set it in external JavaScript files:</p><pre><code class="makeup heex" translate="no"><samp class="p">&lt;</samp><samp class="nt">script</samp><samp class="w"> </samp><samp class="na">defer</samp><samp class="w"> </samp><samp class="na">phx-track-static</samp><samp class="w"> </samp><samp class="na">type</samp><samp class="p">=</samp><samp class="p">&quot;</samp><samp class="s2">text/javascript</samp><samp class="p">&quot;</samp><samp class="w"> </samp><samp class="na">src</samp><samp class="p">=</samp><samp class="p">&quot;</samp><samp class="s2">https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js</samp><samp class="p">&quot;</samp><samp class="p">&gt;</samp><samp class="p">&lt;/</samp><samp class="nt">script</samp><samp class="p">&gt;</samp></code></pre><p>Because you don't actually serve the file above, LiveView will interpret
the static above as missing, and this function will return true.</p>
  </section>
</section>
<section class="detail" id="stream/4">

    <span id="stream/3"></span>

  <div class="detail-header">
    <a href="#stream/4" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">stream(socket, name, items, opts \\ [])</h1>


        <a href="https://github.com/phoenixframework/phoenix_live_view/blob/v1.1.2/lib/phoenix_live_view.ex#L1868" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> stream(
  socket :: <a href="Phoenix.LiveView.Socket.xhtml#t:t/0">Phoenix.LiveView.Socket.t</a>(),
  name :: <a href="https://hexdocs.pm/elixir/typespecs.html#basic-types">atom</a>() | <a href="https://hexdocs.pm/elixir/String.html#t:t/0">String.t</a>(),
  items :: <a href="https://hexdocs.pm/elixir/Enumerable.html#t:t/0">Enumerable.t</a>(),
  opts :: <a href="https://hexdocs.pm/elixir/Keyword.html#t:t/0">Keyword.t</a>()
) :: <a href="Phoenix.LiveView.Socket.xhtml#t:t/0">Phoenix.LiveView.Socket.t</a>()</pre>

      </div>

<p>Assigns a new stream to the socket or inserts items into an existing stream.
Returns an updated <code class="inline">socket</code>.</p><p>Streams are a mechanism for managing large collections on the client without
keeping the resources on the server.</p><ul><li><code class="inline">name</code> - A string or atom name of the key to place under the
<code class="inline">@streams</code> assign.</li><li><code class="inline">items</code> - An enumerable of items to insert.</li></ul><p>The following options are supported:</p><ul><li><p><code class="inline">:at</code> - The index to insert or update the items in the
collection on the client. By default <code class="inline">-1</code> is used, which appends the items
to the parent DOM container. A value of <code class="inline">0</code> prepends the items.</p><p>Note that this operation is equal to inserting the items one by one, each at
the given index. Therefore, when inserting multiple items at an index other than <code class="inline">-1</code>,
the UI will display the items in reverse order:</p><pre><code class="makeup elixir" translate="no"><samp class="n">stream</samp><samp class="p" data-group-id="4473862771-1">(</samp><samp class="n">socket</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:songs</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="4473862771-2">[</samp><samp class="n">song1</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">song2</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">song3</samp><samp class="p" data-group-id="4473862771-2">]</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">at</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">0</samp><samp class="p" data-group-id="4473862771-1">)</samp></code></pre><p>In this case the UI will prepend <code class="inline">song1</code>, then <code class="inline">song2</code> and then <code class="inline">song3</code>, so it will show
<code class="inline">song3</code>, <code class="inline">song2</code>, <code class="inline">song1</code> and then any previously inserted items.</p><p>To insert in the order of the list, use <a href="https://hexdocs.pm/elixir/Enum.html#reverse/1"><code class="inline">Enum.reverse/1</code></a>:</p><pre><code class="makeup elixir" translate="no"><samp class="n">stream</samp><samp class="p" data-group-id="6456796667-1">(</samp><samp class="n">socket</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:songs</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="nc">Enum</samp><samp class="o">.</samp><samp class="n">reverse</samp><samp class="p" data-group-id="6456796667-2">(</samp><samp class="p" data-group-id="6456796667-3">[</samp><samp class="n">song1</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">song2</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">song3</samp><samp class="p" data-group-id="6456796667-3">]</samp><samp class="p" data-group-id="6456796667-2">)</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">at</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">0</samp><samp class="p" data-group-id="6456796667-1">)</samp></code></pre></li><li><p><code class="inline">:reset</code> - A boolean to reset the stream on the client or not. Defaults
to <code class="inline">false</code>.</p></li><li><p><code class="inline">:limit</code> - An optional positive or negative number of results to limit
on the UI on the client. As new items are streamed, the UI will remove existing
items to maintain the limit. For example, to limit the stream to the last 10 items
in the UI while appending new items, pass a negative value:</p><pre><code class="makeup elixir" translate="no"><samp class="n">stream</samp><samp class="p" data-group-id="9974945070-1">(</samp><samp class="n">socket</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:songs</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">songs</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">at</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="o">-</samp><samp class="mi">1</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">limit</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="o">-</samp><samp class="mi">10</samp><samp class="p" data-group-id="9974945070-1">)</samp></code></pre><p>Likewise, to limit the stream to the first 10 items, while prepending new items,
pass a positive value:</p><pre><code class="makeup elixir" translate="no"><samp class="n">stream</samp><samp class="p" data-group-id="6990989960-1">(</samp><samp class="n">socket</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:songs</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">songs</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">at</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">0</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">limit</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">10</samp><samp class="p" data-group-id="6990989960-1">)</samp></code></pre></li></ul><p>Once a stream is defined, a new <code class="inline">@streams</code> assign is available containing
the name of the defined streams. For example, in the above definition, the
stream may be referenced as <code class="inline">@streams.songs</code> in your template. Stream items
are temporary and freed from socket state immediately after the <code class="inline">render/1</code>
function is invoked (or a template is rendered from disk).</p><p>By default, calling <a href="#stream/4"><code class="inline">stream/4</code></a> on an existing stream will bulk insert the new items
on the client while leaving the existing items in place. Streams may also be reset
when calling <a href="#stream/4"><code class="inline">stream/4</code></a>, which we discuss below.</p><h2 id="stream/4-resetting-a-stream" class="section-heading"><a href="#stream/4-resetting-a-stream" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Resetting a stream</span></h2><p>To empty a stream container on the client, you can pass <code class="inline">:reset</code> with an empty list:</p><pre><code class="makeup elixir" translate="no"><samp class="n">stream</samp><samp class="p" data-group-id="0316129887-1">(</samp><samp class="n">socket</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:songs</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="0316129887-2">[</samp><samp class="p" data-group-id="0316129887-2">]</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">reset</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">true</samp><samp class="p" data-group-id="0316129887-1">)</samp></code></pre><p>Or you can replace the entire stream on the client with a new collection:</p><pre><code class="makeup elixir" translate="no"><samp class="n">stream</samp><samp class="p" data-group-id="8451454065-1">(</samp><samp class="n">socket</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:songs</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">new_songs</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">reset</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">true</samp><samp class="p" data-group-id="8451454065-1">)</samp></code></pre><h2 id="stream/4-limiting-a-stream" class="section-heading"><a href="#stream/4-limiting-a-stream" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Limiting a stream</span></h2><p>It is often useful to limit the number of items in the UI while allowing the
server to stream new items in a fire-and-forget fashion. This prevents
the server from overwhelming the client with new results while also opening up
powerful features like virtualized infinite scrolling. See a complete
bidirectional infinite scrolling example with stream limits in the
<a href="bindings.xhtml#scroll-events-and-infinite-pagination">scroll events guide</a></p><p>When a stream exceeds the limit on the client, the existing items will be pruned
based on the number of items in the stream container and the limit direction. A
positive limit will prune items from the end of the container, while a negative
limit will prune items from the beginning of the container.</p><p>Note that the limit is not enforced on the first <a href="#c:mount/3"><code class="inline">mount/3</code></a> render (when no websocket
connection was established yet), as it means more data than necessary has been
loaded. In such cases, you should only load and pass the desired amount of items
to the stream.</p><p>When inserting single items using <a href="#stream_insert/4"><code class="inline">stream_insert/4</code></a>, the limit needs to be passed
as an option for it to be enforced on the client:</p><pre><code class="makeup elixir" translate="no"><samp class="n">stream_insert</samp><samp class="p" data-group-id="2400042584-1">(</samp><samp class="n">socket</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:songs</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">song</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">limit</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="o">-</samp><samp class="mi">10</samp><samp class="p" data-group-id="2400042584-1">)</samp></code></pre><h2 id="stream/4-required-dom-attributes" class="section-heading"><a href="#stream/4-required-dom-attributes" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Required DOM attributes</span></h2><p>For stream items to be trackable on the client, the following requirements
must be met:</p><ol><li>The parent DOM container must include a <code class="inline">phx-update=&quot;stream&quot;</code> attribute,
along with a unique DOM id.</li><li>Each stream item must include its DOM id on the item's element.</li></ol><section role="note" class="admonition warning"><h4 class="admonition-title warning">Note</h4><p>Failing to place <code class="inline">phx-update=&quot;stream&quot;</code> on the <strong>immediate parent</strong> for
<strong>each stream</strong> will result in broken behavior.</p><p>Also, do not alter the generated DOM ids, e.g., by prefixing them. Doing so will
result in broken behavior.</p></section><p>When consuming a stream in a template, the DOM id and item is passed as a tuple,
allowing convenient inclusion of the DOM id for each item. For example:</p><pre><code class="makeup heex" translate="no"><samp class="p">&lt;</samp><samp class="nt">table</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="w">  </samp><samp class="p">&lt;</samp><samp class="nt">tbody</samp><samp class="w"> </samp><samp class="na">id</samp><samp class="p">=</samp><samp class="p">&quot;</samp><samp class="s2">s</samp><samp class="s2">o</samp><samp class="s2">n</samp><samp class="s2">g</samp><samp class="s2">s</samp><samp class="p">&quot;</samp><samp class="w"> </samp><samp class="na">phx-update</samp><samp class="p">=</samp><samp class="p">&quot;</samp><samp class="s2">stream</samp><samp class="p">&quot;</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="w">    </samp><samp class="p">&lt;</samp><samp class="nt">tr</samp><samp class="w">
</samp><samp class="w">      </samp><samp class="na">:for</samp><samp class="p">=</samp><samp class="p" data-group-id="8557557336-1">{</samp><samp class="p" data-group-id="8557557336-ex-1">{</samp><samp class="n">dom_id</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">song</samp><samp class="p" data-group-id="8557557336-ex-1">}</samp><samp class="w"> </samp><samp class="o">&lt;-</samp><samp class="w"> </samp><samp class="na">@streams</samp><samp class="o">.</samp><samp class="n">songs</samp><samp class="p" data-group-id="8557557336-1">}</samp><samp class="w">
</samp><samp class="w">      </samp><samp class="na">id</samp><samp class="p">=</samp><samp class="p" data-group-id="8557557336-2">{</samp><samp class="n">dom_id</samp><samp class="p" data-group-id="8557557336-2">}</samp><samp class="w">
</samp><samp class="w">    </samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="w">      </samp><samp class="p">&lt;</samp><samp class="nt">td</samp><samp class="p">&gt;</samp><samp class="p" data-group-id="8557557336-3">{</samp><samp class="n">song</samp><samp class="o">.</samp><samp class="n">title</samp><samp class="p" data-group-id="8557557336-3">}</samp><samp class="p">&lt;/</samp><samp class="nt">td</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="w">      </samp><samp class="p">&lt;</samp><samp class="nt">td</samp><samp class="p">&gt;</samp><samp class="p" data-group-id="8557557336-4">{</samp><samp class="n">song</samp><samp class="o">.</samp><samp class="n">duration</samp><samp class="p" data-group-id="8557557336-4">}</samp><samp class="p">&lt;/</samp><samp class="nt">td</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="w">    </samp><samp class="p">&lt;/</samp><samp class="nt">tr</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="w">  </samp><samp class="p">&lt;/</samp><samp class="nt">tbody</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="p">&lt;/</samp><samp class="nt">table</samp><samp class="p">&gt;</samp></code></pre><p>We consume the stream in a for comprehension by referencing the
<code class="inline">@streams.songs</code> assign. We used the computed DOM id to populate
the <code class="inline">&lt;tr&gt;</code> id, then we render the table row as usual.</p><p>Now <a href="#stream_insert/3"><code class="inline">stream_insert/3</code></a> and <a href="#stream_delete/3"><code class="inline">stream_delete/3</code></a> may be issued and new rows will
be inserted or deleted from the client.</p><h2 id="stream/4-handling-the-empty-case" class="section-heading"><a href="#stream/4-handling-the-empty-case" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Handling the empty case</span></h2><p>When rendering a list of items, it is common to show a message for the empty case.
But when using streams, we cannot rely on <a href="https://hexdocs.pm/elixir/Enum.html#empty?/1"><code class="inline">Enum.empty?/1</code></a> or similar approaches to
check if the list is empty. Instead we can use the CSS <code class="inline">:only-child</code> selector
and show the message client side:</p><pre><code class="makeup heex" translate="no"><samp class="p">&lt;</samp><samp class="nt">table</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="w">  </samp><samp class="p">&lt;</samp><samp class="nt">tbody</samp><samp class="w"> </samp><samp class="na">id</samp><samp class="p">=</samp><samp class="p">&quot;</samp><samp class="s2">s</samp><samp class="s2">o</samp><samp class="s2">n</samp><samp class="s2">g</samp><samp class="s2">s</samp><samp class="p">&quot;</samp><samp class="w"> </samp><samp class="na">phx-update</samp><samp class="p">=</samp><samp class="p">&quot;</samp><samp class="s2">stream</samp><samp class="p">&quot;</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="w">    </samp><samp class="p">&lt;</samp><samp class="nt">tr</samp><samp class="w"> </samp><samp class="na">id</samp><samp class="p">=</samp><samp class="p">&quot;</samp><samp class="s2">s</samp><samp class="s2">o</samp><samp class="s2">n</samp><samp class="s2">g</samp><samp class="s2">s</samp><samp class="s2">-</samp><samp class="s2">e</samp><samp class="s2">m</samp><samp class="s2">p</samp><samp class="s2">t</samp><samp class="s2">y</samp><samp class="p">&quot;</samp><samp class="w"> </samp><samp class="na">class</samp><samp class="p">=</samp><samp class="p">&quot;</samp><samp class="s2">o</samp><samp class="s2">n</samp><samp class="s2">l</samp><samp class="s2">y</samp><samp class="s2">:</samp><samp class="s2">t</samp><samp class="s2">a</samp><samp class="s2">b</samp><samp class="s2">l</samp><samp class="s2">e</samp><samp class="s2">-</samp><samp class="s2">r</samp><samp class="s2">o</samp><samp class="s2">w </samp><samp class="s2">h</samp><samp class="s2">i</samp><samp class="s2">d</samp><samp class="s2">d</samp><samp class="s2">e</samp><samp class="s2">n</samp><samp class="p">&quot;</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="w">      </samp><samp class="p">&lt;</samp><samp class="nt">td</samp><samp class="w"> </samp><samp class="na">colspan</samp><samp class="p">=</samp><samp class="p">&quot;</samp><samp class="s2">2</samp><samp class="p">&quot;</samp><samp class="p">&gt;</samp><samp class="n">No songs found</samp><samp class="p">&lt;/</samp><samp class="nt">td</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="w">    </samp><samp class="p">&lt;/</samp><samp class="nt">tr</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="w">    </samp><samp class="p">&lt;</samp><samp class="nt">tr</samp><samp class="w">
</samp><samp class="w">      </samp><samp class="na">:for</samp><samp class="p">=</samp><samp class="p" data-group-id="3504430667-1">{</samp><samp class="p" data-group-id="3504430667-ex-1">{</samp><samp class="n">dom_id</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">song</samp><samp class="p" data-group-id="3504430667-ex-1">}</samp><samp class="w"> </samp><samp class="o">&lt;-</samp><samp class="w"> </samp><samp class="na">@streams</samp><samp class="o">.</samp><samp class="n">songs</samp><samp class="p" data-group-id="3504430667-1">}</samp><samp class="w">
</samp><samp class="w">      </samp><samp class="na">id</samp><samp class="p">=</samp><samp class="p" data-group-id="3504430667-2">{</samp><samp class="n">dom_id</samp><samp class="p" data-group-id="3504430667-2">}</samp><samp class="w">
</samp><samp class="w">    </samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="w">      </samp><samp class="p">&lt;</samp><samp class="nt">td</samp><samp class="p">&gt;</samp><samp class="p" data-group-id="3504430667-3">{</samp><samp class="n">song</samp><samp class="o">.</samp><samp class="n">title</samp><samp class="p" data-group-id="3504430667-3">}</samp><samp class="p">&lt;/</samp><samp class="nt">td</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="w">      </samp><samp class="p">&lt;</samp><samp class="nt">td</samp><samp class="p">&gt;</samp><samp class="p" data-group-id="3504430667-4">{</samp><samp class="n">song</samp><samp class="o">.</samp><samp class="n">duration</samp><samp class="p" data-group-id="3504430667-4">}</samp><samp class="p">&lt;/</samp><samp class="nt">td</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="w">    </samp><samp class="p">&lt;/</samp><samp class="nt">tr</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="w">  </samp><samp class="p">&lt;/</samp><samp class="nt">tbody</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="p">&lt;/</samp><samp class="nt">table</samp><samp class="p">&gt;</samp></code></pre><p>It is important to set a unique ID on the empty row, otherwise it cannot be tracked
in the stream container and subsequent patches will duplicate the node.</p><h2 id="stream/4-non-stream-items-in-stream-containers" class="section-heading"><a href="#stream/4-non-stream-items-in-stream-containers" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Non-stream items in stream containers</span></h2><p>In the section on handling the empty case, we showed how to render a message when
the stream is empty by rendering a non-stream item inside the stream container.</p><p>Note that for non-stream items inside a <code class="inline">phx-update=&quot;stream&quot;</code> container, the following
needs to be considered:</p><ol><li><p>Non-stream items must have a unique DOM id.</p></li><li><p>Items can be added and updated, but not removed, even if the stream is reset.</p><p>This means that if you try to conditionally render a non-stream item inside a stream container,
it won't be removed if it was rendered once.</p></li><li><p>Items are affected by the <code class="inline">:at</code> option.</p><p>For example, when you render a non-stream item at the beginning of the stream container and then
prepend items (with <code class="inline">at: 0</code>) to the stream, the non-stream item will be pushed down.</p></li></ol>
  </section>
</section>
<section class="detail" id="stream_configure/3">

  <div class="detail-header">
    <a href="#stream_configure/3" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">stream_configure(socket, name, opts)</h1>


        <a href="https://github.com/phoenixframework/phoenix_live_view/blob/v1.1.2/lib/phoenix_live_view.ex#L1907" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> stream_configure(
  socket :: <a href="Phoenix.LiveView.Socket.xhtml#t:t/0">Phoenix.LiveView.Socket.t</a>(),
  name :: <a href="https://hexdocs.pm/elixir/typespecs.html#basic-types">atom</a>() | <a href="https://hexdocs.pm/elixir/String.html#t:t/0">String.t</a>(),
  opts :: <a href="https://hexdocs.pm/elixir/Keyword.html#t:t/0">Keyword.t</a>()
) :: <a href="Phoenix.LiveView.Socket.xhtml#t:t/0">Phoenix.LiveView.Socket.t</a>()</pre>

      </div>

<p>Configures a stream.</p><p>The following options are supported:</p><ul><li><p><code class="inline">:dom_id</code> - An optional function to generate each stream item's DOM id.
The function accepts each stream item and converts the item to a string id.
By default, the <code class="inline">:id</code> field of a map or struct will be used if the item has
such a field, and will be prefixed by the <code class="inline">name</code> hyphenated with the id.
For example, the following examples are equivalent:</p><pre><code class="makeup elixir" translate="no"><samp class="n">stream</samp><samp class="p" data-group-id="9286833814-1">(</samp><samp class="n">socket</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:songs</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">songs</samp><samp class="p" data-group-id="9286833814-1">)</samp><samp class="w">

</samp><samp class="n">socket</samp><samp class="w">
</samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="n">stream_configure</samp><samp class="p" data-group-id="9286833814-2">(</samp><samp class="ss">:songs</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">dom_id</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="o">&amp;</samp><samp class="p" data-group-id="9286833814-3">(</samp><samp class="s">&quot;songs-</samp><samp class="si" data-group-id="9286833814-4">#{</samp><samp class="ni">&amp;1</samp><samp class="o">.</samp><samp class="n">id</samp><samp class="si" data-group-id="9286833814-4">}</samp><samp class="s">&quot;</samp><samp class="p" data-group-id="9286833814-3">)</samp><samp class="p" data-group-id="9286833814-2">)</samp><samp class="w">
</samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="n">stream</samp><samp class="p" data-group-id="9286833814-5">(</samp><samp class="ss">:songs</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">songs</samp><samp class="p" data-group-id="9286833814-5">)</samp></code></pre></li></ul><p>A stream must be configured before items are inserted, and once configured,
a stream may not be re-configured. To ensure a stream is only configured a
single time in a LiveComponent, use the <code class="inline">mount/1</code> callback. For example:</p><pre><code class="makeup elixir" translate="no"><samp class="kd">def</samp><samp class="w"> </samp><samp class="nf">mount</samp><samp class="p" data-group-id="8685824623-1">(</samp><samp class="n">socket</samp><samp class="p" data-group-id="8685824623-1">)</samp><samp class="w"> </samp><samp class="k" data-group-id="8685824623-2">do</samp><samp class="w">
  </samp><samp class="p" data-group-id="8685824623-3">{</samp><samp class="ss">:ok</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">stream_configure</samp><samp class="p" data-group-id="8685824623-4">(</samp><samp class="n">socket</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:songs</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">dom_id</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="o">&amp;</samp><samp class="p" data-group-id="8685824623-5">(</samp><samp class="s">&quot;songs-</samp><samp class="si" data-group-id="8685824623-6">#{</samp><samp class="ni">&amp;1</samp><samp class="o">.</samp><samp class="n">id</samp><samp class="si" data-group-id="8685824623-6">}</samp><samp class="s">&quot;</samp><samp class="p" data-group-id="8685824623-5">)</samp><samp class="p" data-group-id="8685824623-4">)</samp><samp class="p" data-group-id="8685824623-3">}</samp><samp class="w">
</samp><samp class="k" data-group-id="8685824623-2">end</samp><samp class="w">

</samp><samp class="kd">def</samp><samp class="w"> </samp><samp class="nf">update</samp><samp class="p" data-group-id="8685824623-7">(</samp><samp class="n">assigns</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">socket</samp><samp class="p" data-group-id="8685824623-7">)</samp><samp class="w"> </samp><samp class="k" data-group-id="8685824623-8">do</samp><samp class="w">
  </samp><samp class="p" data-group-id="8685824623-9">{</samp><samp class="ss">:ok</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">stream</samp><samp class="p" data-group-id="8685824623-10">(</samp><samp class="n">socket</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:songs</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">...</samp><samp class="p" data-group-id="8685824623-10">)</samp><samp class="p" data-group-id="8685824623-9">}</samp><samp class="w">
</samp><samp class="k" data-group-id="8685824623-8">end</samp></code></pre><p>Returns an updated <code class="inline">socket</code>.</p>
  </section>
</section>
<section class="detail" id="stream_delete/3">

  <div class="detail-header">
    <a href="#stream_delete/3" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">stream_delete(socket, name, item)</h1>


        <a href="https://github.com/phoenixframework/phoenix_live_view/blob/v1.1.2/lib/phoenix_live_view.ex#L2038" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> stream_delete(
  socket :: <a href="Phoenix.LiveView.Socket.xhtml#t:t/0">Phoenix.LiveView.Socket.t</a>(),
  name :: <a href="https://hexdocs.pm/elixir/typespecs.html#basic-types">atom</a>() | <a href="https://hexdocs.pm/elixir/String.html#t:t/0">String.t</a>(),
  item :: <a href="https://hexdocs.pm/elixir/typespecs.html#basic-types">any</a>()
) ::
  <a href="Phoenix.LiveView.Socket.xhtml#t:t/0">Phoenix.LiveView.Socket.t</a>()</pre>

      </div>

<p>Deletes an item from the stream.</p><p>The item's DOM is computed from the <code class="inline">:dom_id</code> provided in the <a href="#stream/3"><code class="inline">stream/3</code></a> definition.
Delete information for this DOM id is sent to the client and the item's element
is removed from the DOM, following the same behavior of element removal, such as
invoking <code class="inline">phx-remove</code> commands and executing client hook <code class="inline">destroyed()</code> callbacks.</p><h2 id="stream_delete/3-examples" class="section-heading"><a href="#stream_delete/3-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="kd">def</samp><samp class="w"> </samp><samp class="nf">handle_event</samp><samp class="p" data-group-id="4541592388-1">(</samp><samp class="s">&quot;delete&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="4541592388-2">%{</samp><samp class="s">&quot;id&quot;</samp><samp class="w"> </samp><samp class="p">=&gt;</samp><samp class="w"> </samp><samp class="n">id</samp><samp class="p" data-group-id="4541592388-2">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">socket</samp><samp class="p" data-group-id="4541592388-1">)</samp><samp class="w"> </samp><samp class="k" data-group-id="4541592388-3">do</samp><samp class="w">
  </samp><samp class="n">song</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="n">get_song!</samp><samp class="p" data-group-id="4541592388-4">(</samp><samp class="n">id</samp><samp class="p" data-group-id="4541592388-4">)</samp><samp class="w">
  </samp><samp class="p" data-group-id="4541592388-5">{</samp><samp class="ss">:noreply</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">stream_delete</samp><samp class="p" data-group-id="4541592388-6">(</samp><samp class="n">socket</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:songs</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">song</samp><samp class="p" data-group-id="4541592388-6">)</samp><samp class="p" data-group-id="4541592388-5">}</samp><samp class="w">
</samp><samp class="k" data-group-id="4541592388-3">end</samp></code></pre><p>See <a href="#stream_delete_by_dom_id/3"><code class="inline">stream_delete_by_dom_id/3</code></a> to remove an item without requiring the
original data structure.</p><p>Returns an updated <code class="inline">socket</code>.</p>
  </section>
</section>
<section class="detail" id="stream_delete_by_dom_id/3">

  <div class="detail-header">
    <a href="#stream_delete_by_dom_id/3" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">stream_delete_by_dom_id(socket, name, id)</h1>


        <a href="https://github.com/phoenixframework/phoenix_live_view/blob/v1.1.2/lib/phoenix_live_view.ex#L2075" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> stream_delete_by_dom_id(
  socket :: <a href="Phoenix.LiveView.Socket.xhtml#t:t/0">Phoenix.LiveView.Socket.t</a>(),
  name :: <a href="https://hexdocs.pm/elixir/typespecs.html#basic-types">atom</a>() | <a href="https://hexdocs.pm/elixir/String.html#t:t/0">String.t</a>(),
  id :: <a href="https://hexdocs.pm/elixir/String.html#t:t/0">String.t</a>()
) :: <a href="Phoenix.LiveView.Socket.xhtml#t:t/0">Phoenix.LiveView.Socket.t</a>()</pre>

      </div>

<p>Deletes an item from the stream given its computed DOM id.</p><p>Returns an updated <code class="inline">socket</code>.</p><p>Behaves just like <a href="#stream_delete/3"><code class="inline">stream_delete/3</code></a>, but accept the precomputed DOM id,
which allows deleting from a stream without fetching or building the original
stream data structure.</p><h2 id="stream_delete_by_dom_id/3-examples" class="section-heading"><a href="#stream_delete_by_dom_id/3-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="kd">def</samp><samp class="w"> </samp><samp class="nf">render</samp><samp class="p" data-group-id="9815090241-1">(</samp><samp class="n">assigns</samp><samp class="p" data-group-id="9815090241-1">)</samp><samp class="w"> </samp><samp class="k" data-group-id="9815090241-2">do</samp><samp class="w">
  </samp><samp class="sx">~H&quot;&quot;&quot;</samp><samp class="w">
</samp><samp class="w">  </samp><samp class="p">&lt;</samp><samp class="nt">table</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="w">    </samp><samp class="p">&lt;</samp><samp class="nt">tbody</samp><samp class="w"> </samp><samp class="na">id</samp><samp class="p">=</samp><samp class="p">&quot;</samp><samp class="s2">s</samp><samp class="s2">o</samp><samp class="s2">n</samp><samp class="s2">g</samp><samp class="s2">s</samp><samp class="p">&quot;</samp><samp class="w"> </samp><samp class="na">phx-update</samp><samp class="p">=</samp><samp class="p">&quot;</samp><samp class="s2">stream</samp><samp class="p">&quot;</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="w">      </samp><samp class="p">&lt;</samp><samp class="nt">tr</samp><samp class="w">
</samp><samp class="w">        </samp><samp class="na">:for</samp><samp class="p">=</samp><samp class="p" data-group-id="5789077675-1">{</samp><samp class="p" data-group-id="9815090241-3">{</samp><samp class="n">dom_id</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">song</samp><samp class="p" data-group-id="9815090241-3">}</samp><samp class="w"> </samp><samp class="o">&lt;-</samp><samp class="w"> </samp><samp class="na">@streams</samp><samp class="o">.</samp><samp class="n">songs</samp><samp class="p" data-group-id="5789077675-1">}</samp><samp class="w">
</samp><samp class="w">        </samp><samp class="na">id</samp><samp class="p">=</samp><samp class="p" data-group-id="5789077675-2">{</samp><samp class="n">dom_id</samp><samp class="p" data-group-id="5789077675-2">}</samp><samp class="w">
</samp><samp class="w">      </samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="w">        </samp><samp class="p">&lt;</samp><samp class="nt">td</samp><samp class="p">&gt;</samp><samp class="p" data-group-id="5789077675-3">{</samp><samp class="n">song</samp><samp class="o">.</samp><samp class="n">title</samp><samp class="p" data-group-id="5789077675-3">}</samp><samp class="p">&lt;/</samp><samp class="nt">td</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="w">        </samp><samp class="p">&lt;</samp><samp class="nt">td</samp><samp class="p">&gt;</samp><samp class="p">&lt;</samp><samp class="nt">button</samp><samp class="w"> </samp><samp class="na">phx-click</samp><samp class="p">=</samp><samp class="p" data-group-id="5789077675-4">{</samp><samp class="nc">JS</samp><samp class="o">.</samp><samp class="n">push</samp><samp class="p" data-group-id="9815090241-4">(</samp><samp class="s">&quot;delete&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">value</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="9815090241-5">%{</samp><samp class="ss">id</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="n">dom_id</samp><samp class="p" data-group-id="9815090241-5">}</samp><samp class="p" data-group-id="9815090241-4">)</samp><samp class="p" data-group-id="5789077675-4">}</samp><samp class="p">&gt;</samp><samp class="n">delete</samp><samp class="p">&lt;/</samp><samp class="nt">button</samp><samp class="p">&gt;</samp><samp class="p">&lt;/</samp><samp class="nt">td</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="w">      </samp><samp class="p">&lt;/</samp><samp class="nt">tr</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="w">    </samp><samp class="p">&lt;/</samp><samp class="nt">tbody</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="w">  </samp><samp class="p">&lt;/</samp><samp class="nt">table</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="w">  </samp><samp class="sx">&quot;&quot;&quot;</samp><samp class="w">
</samp><samp class="k" data-group-id="9815090241-2">end</samp><samp class="w">

</samp><samp class="kd">def</samp><samp class="w"> </samp><samp class="nf">handle_event</samp><samp class="p" data-group-id="9815090241-6">(</samp><samp class="s">&quot;delete&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="9815090241-7">%{</samp><samp class="s">&quot;id&quot;</samp><samp class="w"> </samp><samp class="p">=&gt;</samp><samp class="w"> </samp><samp class="n">dom_id</samp><samp class="p" data-group-id="9815090241-7">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">socket</samp><samp class="p" data-group-id="9815090241-6">)</samp><samp class="w"> </samp><samp class="k" data-group-id="9815090241-8">do</samp><samp class="w">
  </samp><samp class="p" data-group-id="9815090241-9">{</samp><samp class="ss">:noreply</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">stream_delete_by_dom_id</samp><samp class="p" data-group-id="9815090241-10">(</samp><samp class="n">socket</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:songs</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">dom_id</samp><samp class="p" data-group-id="9815090241-10">)</samp><samp class="p" data-group-id="9815090241-9">}</samp><samp class="w">
</samp><samp class="k" data-group-id="9815090241-8">end</samp></code></pre>
  </section>
</section>
<section class="detail" id="stream_insert/4">

    <span id="stream_insert/3"></span>

  <div class="detail-header">
    <a href="#stream_insert/4" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">stream_insert(socket, name, item, opts \\ [])</h1>


        <a href="https://github.com/phoenixframework/phoenix_live_view/blob/v1.1.2/lib/phoenix_live_view.ex#L2009" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> stream_insert(
  socket :: <a href="Phoenix.LiveView.Socket.xhtml#t:t/0">Phoenix.LiveView.Socket.t</a>(),
  name :: <a href="https://hexdocs.pm/elixir/typespecs.html#basic-types">atom</a>() | <a href="https://hexdocs.pm/elixir/String.html#t:t/0">String.t</a>(),
  item :: <a href="https://hexdocs.pm/elixir/typespecs.html#basic-types">any</a>(),
  opts :: <a href="https://hexdocs.pm/elixir/Keyword.html#t:t/0">Keyword.t</a>()
) :: <a href="Phoenix.LiveView.Socket.xhtml#t:t/0">Phoenix.LiveView.Socket.t</a>()</pre>

      </div>

<p>Inserts a new item or updates an existing item in the stream.</p><p>Returns an updated <code class="inline">socket</code>.</p><p>See <a href="#stream/4"><code class="inline">stream/4</code></a> for inserting multiple items at once.</p><p>The following options are supported:</p><ul><li><p><code class="inline">:at</code> - The index to insert or update the item in the collection on the client.
By default, the item is appended to the parent DOM container. This is the same as
passing a value of <code class="inline">-1</code>.
If the item already exists in the parent DOM container then it will be
updated in place.</p></li><li><p><code class="inline">:limit</code> - A limit of items to maintain in the UI. A limit passed to <a href="#stream/4"><code class="inline">stream/4</code></a> does
not affect subsequent calls to <a href="#stream_insert/4"><code class="inline">stream_insert/4</code></a>, therefore the limit must be passed
here as well in order to be enforced. See <a href="#stream/4"><code class="inline">stream/4</code></a> for more information on
limiting streams.</p></li><li><p><code class="inline">:update_only</code> - A boolean to only update the item in the stream. If the item does not
exist on the client, it will not be inserted. Defaults to <code class="inline">false</code>.</p></li></ul><h2 id="stream_insert/4-examples" class="section-heading"><a href="#stream_insert/4-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><p>Imagine you define a stream on mount with a single item:</p><pre><code class="makeup elixir" translate="no"><samp class="n">stream</samp><samp class="p" data-group-id="9054482036-1">(</samp><samp class="n">socket</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:songs</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="9054482036-2">[</samp><samp class="p" data-group-id="9054482036-3">%</samp><samp class="nc" data-group-id="9054482036-3">Song</samp><samp class="p" data-group-id="9054482036-3">{</samp><samp class="ss">id</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">1</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">title</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;Song 1&quot;</samp><samp class="p" data-group-id="9054482036-3">}</samp><samp class="p" data-group-id="9054482036-2">]</samp><samp class="p" data-group-id="9054482036-1">)</samp></code></pre><p>Then, in a callback such as <code class="inline">handle_info</code> or <code class="inline">handle_event</code>, you
can append a new song:</p><pre><code class="makeup elixir" translate="no"><samp class="n">stream_insert</samp><samp class="p" data-group-id="9486248026-1">(</samp><samp class="n">socket</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:songs</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="9486248026-2">%</samp><samp class="nc" data-group-id="9486248026-2">Song</samp><samp class="p" data-group-id="9486248026-2">{</samp><samp class="ss">id</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">2</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">title</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;Song 2&quot;</samp><samp class="p" data-group-id="9486248026-2">}</samp><samp class="p" data-group-id="9486248026-1">)</samp></code></pre><p>Or prepend a new song with <code class="inline">at: 0</code>:</p><pre><code class="makeup elixir" translate="no"><samp class="n">stream_insert</samp><samp class="p" data-group-id="1834419956-1">(</samp><samp class="n">socket</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:songs</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="1834419956-2">%</samp><samp class="nc" data-group-id="1834419956-2">Song</samp><samp class="p" data-group-id="1834419956-2">{</samp><samp class="ss">id</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">2</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">title</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;Song 2&quot;</samp><samp class="p" data-group-id="1834419956-2">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">at</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">0</samp><samp class="p" data-group-id="1834419956-1">)</samp></code></pre><p>Or update an existing song (in this case the <code class="inline">:at</code> option has no effect):</p><pre><code class="makeup elixir" translate="no"><samp class="n">stream_insert</samp><samp class="p" data-group-id="1328892712-1">(</samp><samp class="n">socket</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:songs</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="1328892712-2">%</samp><samp class="nc" data-group-id="1328892712-2">Song</samp><samp class="p" data-group-id="1328892712-2">{</samp><samp class="ss">id</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">1</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">title</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;Song 1 updated&quot;</samp><samp class="p" data-group-id="1328892712-2">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">at</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">0</samp><samp class="p" data-group-id="1328892712-1">)</samp></code></pre><p>Or append a new song while limiting the stream to the last 10 items:</p><pre><code class="makeup elixir" translate="no"><samp class="n">stream_insert</samp><samp class="p" data-group-id="5961605650-1">(</samp><samp class="n">socket</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:songs</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="5961605650-2">%</samp><samp class="nc" data-group-id="5961605650-2">Song</samp><samp class="p" data-group-id="5961605650-2">{</samp><samp class="ss">id</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">2</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">title</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;Song 2&quot;</samp><samp class="p" data-group-id="5961605650-2">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">limit</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="o">-</samp><samp class="mi">10</samp><samp class="p" data-group-id="5961605650-1">)</samp></code></pre><h2 id="stream_insert/4-updating-items" class="section-heading"><a href="#stream_insert/4-updating-items" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Updating Items</span></h2><p>As shown, an existing item on the client can be updated by issuing a <code class="inline">stream_insert</code>
for the existing item. When the client updates an existing item, the item will remain
in the same location as it was previously, and will not be moved to the end of the
parent children. To both update an existing item and move it to another position,
issue a <code class="inline">stream_delete</code>, followed by a <code class="inline">stream_insert</code>. For example:</p><pre><code class="makeup elixir" translate="no"><samp class="n">song</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="n">get_song!</samp><samp class="p" data-group-id="7237626662-1">(</samp><samp class="n">id</samp><samp class="p" data-group-id="7237626662-1">)</samp><samp class="w">

</samp><samp class="n">socket</samp><samp class="w">
</samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="n">stream_delete</samp><samp class="p" data-group-id="7237626662-2">(</samp><samp class="ss">:songs</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">song</samp><samp class="p" data-group-id="7237626662-2">)</samp><samp class="w">
</samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="n">stream_insert</samp><samp class="p" data-group-id="7237626662-3">(</samp><samp class="ss">:songs</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">song</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">at</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="o">-</samp><samp class="mi">1</samp><samp class="p" data-group-id="7237626662-3">)</samp></code></pre><p>See <a href="#stream_delete/3"><code class="inline">stream_delete/3</code></a> for more information on deleting items.</p>
  </section>
</section>
<section class="detail" id="transport_pid/1">

  <div class="detail-header">
    <a href="#transport_pid/1" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">transport_pid(socket)</h1>


        <a href="https://github.com/phoenixframework/phoenix_live_view/blob/v1.1.2/lib/phoenix_live_view.ex#L1476" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

<p>Returns the transport pid of the socket.</p><p>Raises <a href="https://hexdocs.pm/elixir/ArgumentError.html"><code class="inline">ArgumentError</code></a> if the socket is not connected.</p><h2 id="transport_pid/1-examples" class="section-heading"><a href="#transport_pid/1-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="n">transport_pid</samp><samp class="p" data-group-id="0146233530-1">(</samp><samp class="n">socket</samp><samp class="p" data-group-id="0146233530-1">)</samp><samp class="w">
</samp><samp class="p" data-group-id="0146233530-2">#</samp><samp class="nc" data-group-id="0146233530-2">PID</samp><samp class="p" data-group-id="0146233530-2">&lt;</samp><samp class="mi">0</samp><samp class="o">.</samp><samp class="mi">107</samp><samp class="o">.</samp><samp class="mi">0</samp><samp class="p" data-group-id="0146233530-2">&gt;</samp></code></pre>
  </section>
</section>
<section class="detail" id="uploaded_entries/2">

  <div class="detail-header">
    <a href="#uploaded_entries/2" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">uploaded_entries(socket, name)</h1>


        <a href="https://github.com/phoenixframework/phoenix_live_view/blob/v1.1.2/lib/phoenix_live_view.ex#L889" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

<p>Returns the completed and in progress entries for the upload.</p><h2 id="uploaded_entries/2-examples" class="section-heading"><a href="#uploaded_entries/2-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="k">case</samp><samp class="w"> </samp><samp class="n">uploaded_entries</samp><samp class="p" data-group-id="9380452615-1">(</samp><samp class="n">socket</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:photos</samp><samp class="p" data-group-id="9380452615-1">)</samp><samp class="w"> </samp><samp class="k" data-group-id="9380452615-2">do</samp><samp class="w">
  </samp><samp class="p" data-group-id="9380452615-3">{</samp><samp class="p" data-group-id="9380452615-4">[</samp><samp class="bp">_</samp><samp class="w"> </samp><samp class="o">|</samp><samp class="w"> </samp><samp class="bp">_</samp><samp class="p" data-group-id="9380452615-4">]</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="n">completed</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="9380452615-5">[</samp><samp class="p" data-group-id="9380452615-5">]</samp><samp class="p" data-group-id="9380452615-3">}</samp><samp class="w"> </samp><samp class="o">-&gt;</samp><samp class="w">
    </samp><samp class="c1"># all entries are completed</samp><samp class="w">

  </samp><samp class="p" data-group-id="9380452615-6">{</samp><samp class="p" data-group-id="9380452615-7">[</samp><samp class="p" data-group-id="9380452615-7">]</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="9380452615-8">[</samp><samp class="bp">_</samp><samp class="w"> </samp><samp class="o">|</samp><samp class="w"> </samp><samp class="bp">_</samp><samp class="p" data-group-id="9380452615-8">]</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="n">in_progress</samp><samp class="p" data-group-id="9380452615-6">}</samp><samp class="w"> </samp><samp class="o">-&gt;</samp><samp class="w">
    </samp><samp class="c1"># all entries are still in progress</samp><samp class="w">
</samp><samp class="k" data-group-id="9380452615-2">end</samp></code></pre>
  </section>
</section>

        </div>
      </section>


  </body>
</html>
