<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"
      xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>Form bindings - Phoenix LiveView v1.1.2</title>
    <meta name="generator" content="ExDoc v0.38.2" />
    <link type="text/css" rel="stylesheet" href="dist/epub-elixir-FNUUKFP7.css" />
    <script src="dist/epub-4WIP524F.js"></script>

  </head>
  <body class="content-inner">

    <h1 id="content">Form bindings</h1>
<h2 id="form-events">Form events</h2><p>To handle form changes and submissions, use the <code class="inline">phx-change</code> and <code class="inline">phx-submit</code>
events. In general, it is preferred to handle input changes at the form level,
where all form fields are passed to the LiveView's callback given any
single input change. For example, to handle real-time form validation and
saving, your form would use both <code class="inline">phx-change</code> and <code class="inline">phx-submit</code> bindings.
Let's get started with an example:</p><pre><code class="makeup heex" translate="no"><span class="p">&lt;</span><span class="nf">.form</span><span class="w"> </span><span class="na">for</span><span class="p">=</span><span class="p" data-group-id="8188885565-1">{</span><span class="na">@form</span><span class="p" data-group-id="8188885565-1">}</span><span class="w"> </span><span class="na">phx-change</span><span class="p">=</span><span class="p">&quot;</span><span class="s2">validate</span><span class="p">&quot;</span><span class="w"> </span><span class="na">phx-submit</span><span class="p">=</span><span class="p">&quot;</span><span class="s2">save</span><span class="p">&quot;</span><span class="p">&gt;</span><span class="w">
</span><span class="w">  </span><span class="p">&lt;</span><span class="nf">.input</span><span class="w"> </span><span class="na">type</span><span class="p">=</span><span class="p">&quot;</span><span class="s2">text</span><span class="p">&quot;</span><span class="w"> </span><span class="na">field</span><span class="p">=</span><span class="p" data-group-id="8188885565-2">{</span><span class="na">@form</span><span class="p" data-group-id="8188885565-ex-1">[</span><span class="ss">:username</span><span class="p" data-group-id="8188885565-ex-1">]</span><span class="p" data-group-id="8188885565-2">}</span><span class="w"> </span><span class="p">/&gt;</span><span class="w">
</span><span class="w">  </span><span class="p">&lt;</span><span class="nf">.input</span><span class="w"> </span><span class="na">type</span><span class="p">=</span><span class="p">&quot;</span><span class="s2">email</span><span class="p">&quot;</span><span class="w"> </span><span class="na">field</span><span class="p">=</span><span class="p" data-group-id="8188885565-3">{</span><span class="na">@form</span><span class="p" data-group-id="8188885565-ex-2">[</span><span class="ss">:email</span><span class="p" data-group-id="8188885565-ex-2">]</span><span class="p" data-group-id="8188885565-3">}</span><span class="w"> </span><span class="p">/&gt;</span><span class="w">
</span><span class="w">  </span><span class="p">&lt;</span><span class="nt">button</span><span class="p">&gt;</span><span class="n">Save</span><span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span><span class="w">
</span><span class="p">&lt;/</span><span class="nf">.form</span><span class="p">&gt;</span></code></pre><p><code class="inline">.form</code> is the function component defined in <a href="Phoenix.Component.xhtml#form/1"><code class="inline">Phoenix.Component.form/1</code></a>,
we recommend reading its documentation for more details on how it works
and all supported options. <code class="inline">.form</code> expects a <code class="inline">@form</code> assign, which can
be created from a changeset or user parameters via <a href="Phoenix.Component.xhtml#to_form/1"><code class="inline">Phoenix.Component.to_form/1</code></a>.</p><p><code class="inline">input/1</code> is a function component for rendering inputs, most often
defined in your own application, often encapsulating labelling,
error handling, and more. Here is a simple version to get started with:</p><pre><code class="makeup elixir" translate="no"><span class="n">attr</span><span class="w"> </span><span class="ss">:field</span><span class="p">,</span><span class="w"> </span><span class="nc">Phoenix.HTML.FormField</span><span class="w">
</span><span class="n">attr</span><span class="w"> </span><span class="ss">:rest</span><span class="p">,</span><span class="w"> </span><span class="ss">:global</span><span class="p">,</span><span class="w"> </span><span class="ss">include</span><span class="p">:</span><span class="w"> </span><span class="sx">~w(type)</span><span class="w">
</span><span class="kd">def</span><span class="w"> </span><span class="nf">input</span><span class="p" data-group-id="2044332120-1">(</span><span class="n">assigns</span><span class="p" data-group-id="2044332120-1">)</span><span class="w"> </span><span class="k" data-group-id="2044332120-2">do</span><span class="w">
  </span><span class="sx">~H&quot;&quot;&quot;</span><span class="w">
</span><span class="w">  </span><span class="p">&lt;</span><span class="nt">input</span><span class="w"> </span><span class="na">id</span><span class="p">=</span><span class="p" data-group-id="7041037978-1">{</span><span class="na">@field</span><span class="o">.</span><span class="n">id</span><span class="p" data-group-id="7041037978-1">}</span><span class="w"> </span><span class="na">name</span><span class="p">=</span><span class="p" data-group-id="7041037978-2">{</span><span class="na">@field</span><span class="o">.</span><span class="n">name</span><span class="p" data-group-id="7041037978-2">}</span><span class="w"> </span><span class="na">value</span><span class="p">=</span><span class="p" data-group-id="7041037978-3">{</span><span class="na">@field</span><span class="o">.</span><span class="n">value</span><span class="p" data-group-id="7041037978-3">}</span><span class="w"> </span><span class="p" data-group-id="7041037978-4">{</span><span class="na">@rest</span><span class="p" data-group-id="7041037978-4">}</span><span class="w"> </span><span class="p">/&gt;</span><span class="w">
</span><span class="w">  </span><span class="sx">&quot;&quot;&quot;</span><span class="w">
</span><span class="k" data-group-id="2044332120-2">end</span></code></pre><section role="note" class="admonition info"><h3 id="the-corecomponents-module" class="admonition-title info">The <code class="inline">CoreComponents</code> module</h3><p>If your application was generated with Phoenix v1.7, then <a href="https://hexdocs.pm/phx_new/Mix.Tasks.Phx.New.html"><code class="inline">mix phx.new</code></a>
automatically imports many ready-to-use function components, such as
<code class="inline">.input</code> component with built-in features and styles.</p></section><p>With the form rendered, your LiveView picks up the events in <code class="inline">handle_event</code>
callbacks, to validate and attempt to save the parameter accordingly:</p><pre><code class="makeup elixir" translate="no"><span class="kd">def</span><span class="w"> </span><span class="nf">render</span><span class="p" data-group-id="9876907035-1">(</span><span class="n">assigns</span><span class="p" data-group-id="9876907035-1">)</span><span class="w"> </span><span class="n">...</span><span class="w">

</span><span class="kd">def</span><span class="w"> </span><span class="nf">mount</span><span class="p" data-group-id="9876907035-2">(</span><span class="c">_params</span><span class="p">,</span><span class="w"> </span><span class="c">_session</span><span class="p">,</span><span class="w"> </span><span class="n">socket</span><span class="p" data-group-id="9876907035-2">)</span><span class="w"> </span><span class="k" data-group-id="9876907035-3">do</span><span class="w">
  </span><span class="p" data-group-id="9876907035-4">{</span><span class="ss">:ok</span><span class="p">,</span><span class="w"> </span><span class="n">assign</span><span class="p" data-group-id="9876907035-5">(</span><span class="n">socket</span><span class="p">,</span><span class="w"> </span><span class="ss">form</span><span class="p">:</span><span class="w"> </span><span class="n">to_form</span><span class="p" data-group-id="9876907035-6">(</span><span class="nc">Accounts</span><span class="o">.</span><span class="n">change_user</span><span class="p" data-group-id="9876907035-7">(</span><span class="p" data-group-id="9876907035-8">%</span><span class="nc" data-group-id="9876907035-8">User</span><span class="p" data-group-id="9876907035-8">{</span><span class="p" data-group-id="9876907035-8">}</span><span class="p" data-group-id="9876907035-7">)</span><span class="p" data-group-id="9876907035-6">)</span><span class="p" data-group-id="9876907035-5">)</span><span class="p" data-group-id="9876907035-4">}</span><span class="w">
</span><span class="k" data-group-id="9876907035-3">end</span><span class="w">

</span><span class="kd">def</span><span class="w"> </span><span class="nf">handle_event</span><span class="p" data-group-id="9876907035-9">(</span><span class="s">&quot;validate&quot;</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="9876907035-10">%{</span><span class="s">&quot;user&quot;</span><span class="w"> </span><span class="p">=&gt;</span><span class="w"> </span><span class="n">params</span><span class="p" data-group-id="9876907035-10">}</span><span class="p">,</span><span class="w"> </span><span class="n">socket</span><span class="p" data-group-id="9876907035-9">)</span><span class="w"> </span><span class="k" data-group-id="9876907035-11">do</span><span class="w">
  </span><span class="n">form</span><span class="w"> </span><span class="o">=</span><span class="w">
    </span><span class="p" data-group-id="9876907035-12">%</span><span class="nc" data-group-id="9876907035-12">User</span><span class="p" data-group-id="9876907035-12">{</span><span class="p" data-group-id="9876907035-12">}</span><span class="w">
    </span><span class="o">|&gt;</span><span class="w"> </span><span class="nc">Accounts</span><span class="o">.</span><span class="n">change_user</span><span class="p" data-group-id="9876907035-13">(</span><span class="n">params</span><span class="p" data-group-id="9876907035-13">)</span><span class="w">
    </span><span class="o">|&gt;</span><span class="w"> </span><span class="n">to_form</span><span class="p" data-group-id="9876907035-14">(</span><span class="ss">action</span><span class="p">:</span><span class="w"> </span><span class="ss">:validate</span><span class="p" data-group-id="9876907035-14">)</span><span class="w">

  </span><span class="p" data-group-id="9876907035-15">{</span><span class="ss">:noreply</span><span class="p">,</span><span class="w"> </span><span class="n">assign</span><span class="p" data-group-id="9876907035-16">(</span><span class="n">socket</span><span class="p">,</span><span class="w"> </span><span class="ss">form</span><span class="p">:</span><span class="w"> </span><span class="n">form</span><span class="p" data-group-id="9876907035-16">)</span><span class="p" data-group-id="9876907035-15">}</span><span class="w">
</span><span class="k" data-group-id="9876907035-11">end</span><span class="w">

</span><span class="kd">def</span><span class="w"> </span><span class="nf">handle_event</span><span class="p" data-group-id="9876907035-17">(</span><span class="s">&quot;save&quot;</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="9876907035-18">%{</span><span class="s">&quot;user&quot;</span><span class="w"> </span><span class="p">=&gt;</span><span class="w"> </span><span class="n">user_params</span><span class="p" data-group-id="9876907035-18">}</span><span class="p">,</span><span class="w"> </span><span class="n">socket</span><span class="p" data-group-id="9876907035-17">)</span><span class="w"> </span><span class="k" data-group-id="9876907035-19">do</span><span class="w">
  </span><span class="k">case</span><span class="w"> </span><span class="nc">Accounts</span><span class="o">.</span><span class="n">create_user</span><span class="p" data-group-id="9876907035-20">(</span><span class="n">user_params</span><span class="p" data-group-id="9876907035-20">)</span><span class="w"> </span><span class="k" data-group-id="9876907035-21">do</span><span class="w">
    </span><span class="p" data-group-id="9876907035-22">{</span><span class="ss">:ok</span><span class="p">,</span><span class="w"> </span><span class="n">user</span><span class="p" data-group-id="9876907035-22">}</span><span class="w"> </span><span class="o">-&gt;</span><span class="w">
      </span><span class="p" data-group-id="9876907035-23">{</span><span class="ss">:noreply</span><span class="p">,</span><span class="w">
       </span><span class="n">socket</span><span class="w">
       </span><span class="o">|&gt;</span><span class="w"> </span><span class="n">put_flash</span><span class="p" data-group-id="9876907035-24">(</span><span class="ss">:info</span><span class="p">,</span><span class="w"> </span><span class="s">&quot;user created&quot;</span><span class="p" data-group-id="9876907035-24">)</span><span class="w">
       </span><span class="o">|&gt;</span><span class="w"> </span><span class="n">redirect</span><span class="p" data-group-id="9876907035-25">(</span><span class="ss">to</span><span class="p">:</span><span class="w"> </span><span class="sx">~p&quot;/users/</span><span class="si" data-group-id="9876907035-26">#{</span><span class="n">user</span><span class="si" data-group-id="9876907035-26">}</span><span class="sx">&quot;</span><span class="p" data-group-id="9876907035-25">)</span><span class="p" data-group-id="9876907035-23">}</span><span class="w">

    </span><span class="p" data-group-id="9876907035-27">{</span><span class="ss">:error</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="9876907035-28">%</span><span class="nc" data-group-id="9876907035-28">Ecto.Changeset</span><span class="p" data-group-id="9876907035-28">{</span><span class="p" data-group-id="9876907035-28">}</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">changeset</span><span class="p" data-group-id="9876907035-27">}</span><span class="w"> </span><span class="o">-&gt;</span><span class="w">
      </span><span class="p" data-group-id="9876907035-29">{</span><span class="ss">:noreply</span><span class="p">,</span><span class="w"> </span><span class="n">assign</span><span class="p" data-group-id="9876907035-30">(</span><span class="n">socket</span><span class="p">,</span><span class="w"> </span><span class="ss">form</span><span class="p">:</span><span class="w"> </span><span class="n">to_form</span><span class="p" data-group-id="9876907035-31">(</span><span class="n">changeset</span><span class="p" data-group-id="9876907035-31">)</span><span class="p" data-group-id="9876907035-30">)</span><span class="p" data-group-id="9876907035-29">}</span><span class="w">
  </span><span class="k" data-group-id="9876907035-21">end</span><span class="w">
</span><span class="k" data-group-id="9876907035-19">end</span></code></pre><p>The validate callback simply updates the changeset based on all form input
values, then convert the changeset to a form and assign it to the socket.
If the form changes, such as generating new errors, <a href="Phoenix.LiveView.xhtml#c:render/1"><code class="inline">render/1</code></a>
is invoked and the form is re-rendered.</p><p>Likewise for <code class="inline">phx-submit</code> bindings, the same callback is invoked and
persistence is attempted. On success, a <code class="inline">:noreply</code> tuple is returned and the
socket is annotated for redirect with <a href="Phoenix.LiveView.xhtml#redirect/2"><code class="inline">Phoenix.LiveView.redirect/2</code></a> to
the new user page, otherwise the socket assigns are updated with the errored
changeset to be re-rendered for the client.</p><p>You may wish for an individual input to use its own change event or to target
a different component. This can be accomplished by annotating the input itself
with <code class="inline">phx-change</code>, for example:</p><pre><code class="makeup heex" translate="no"><span class="p">&lt;</span><span class="nf">.form</span><span class="w"> </span><span class="na">for</span><span class="p">=</span><span class="p" data-group-id="0531919321-1">{</span><span class="na">@form</span><span class="p" data-group-id="0531919321-1">}</span><span class="w"> </span><span class="na">phx-change</span><span class="p">=</span><span class="p">&quot;</span><span class="s2">validate</span><span class="p">&quot;</span><span class="w"> </span><span class="na">phx-submit</span><span class="p">=</span><span class="p">&quot;</span><span class="s2">save</span><span class="p">&quot;</span><span class="p">&gt;</span><span class="w">
</span><span class="n">  ...
</span><span class="w">  </span><span class="p">&lt;</span><span class="nf">.input</span><span class="w"> </span><span class="na">field</span><span class="p">=</span><span class="p" data-group-id="0531919321-2">{</span><span class="na">@form</span><span class="p" data-group-id="0531919321-ex-1">[</span><span class="ss">:email</span><span class="p" data-group-id="0531919321-ex-1">]</span><span class="p" data-group-id="0531919321-2">}</span><span class="w">  </span><span class="na">phx-change</span><span class="p">=</span><span class="p">&quot;</span><span class="s2">email_changed</span><span class="p">&quot;</span><span class="w"> </span><span class="na">phx-target</span><span class="p">=</span><span class="p" data-group-id="0531919321-3">{</span><span class="na">@myself</span><span class="p" data-group-id="0531919321-3">}</span><span class="w"> </span><span class="p">/&gt;</span><span class="w">
</span><span class="p">&lt;/</span><span class="nf">.form</span><span class="p">&gt;</span></code></pre><p>Then your LiveView or LiveComponent would handle the event:</p><pre><code class="makeup elixir" translate="no"><span class="kd">def</span><span class="w"> </span><span class="nf">handle_event</span><span class="p" data-group-id="2225913619-1">(</span><span class="s">&quot;email_changed&quot;</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="2225913619-2">%{</span><span class="s">&quot;user&quot;</span><span class="w"> </span><span class="p">=&gt;</span><span class="w"> </span><span class="p" data-group-id="2225913619-3">%{</span><span class="s">&quot;email&quot;</span><span class="w"> </span><span class="p">=&gt;</span><span class="w"> </span><span class="n">email</span><span class="p" data-group-id="2225913619-3">}</span><span class="p" data-group-id="2225913619-2">}</span><span class="p">,</span><span class="w"> </span><span class="n">socket</span><span class="p" data-group-id="2225913619-1">)</span><span class="w"> </span><span class="k" data-group-id="2225913619-4">do</span><span class="w">
  </span><span class="n">...</span><span class="w">
</span><span class="k" data-group-id="2225913619-4">end</span></code></pre><section role="note" class="admonition warning"><h4 class="admonition-title warning">Note</h4><ol><li>Only the individual input is sent as params for an input marked with <code class="inline">phx-change</code>.</li><li>While it is possible to use <code class="inline">phx-change</code> on individual inputs, those inputs
must still be within a form.</li></ol></section><h2 id="error-feedback">Error feedback</h2><p>For proper error feedback on form updates, LiveView sends special parameters on form events
starting with <code class="inline">_unused_</code> to indicate that the input for the specific field has not been interacted with yet.</p><p>When creating a form from these parameters through <a href="Phoenix.Component.xhtml#to_form/2"><code class="inline">Phoenix.Component.to_form/2</code></a> or <a href="Phoenix.Component.xhtml#form/1"><code class="inline">Phoenix.Component.form/1</code></a>,
<a href="Phoenix.Component.xhtml#used_input?/1"><code class="inline">Phoenix.Component.used_input?/1</code></a> can be used to filter error messages.</p><p>For example, your <code class="inline">MyAppWeb.CoreComponents</code> may use this function:</p><pre><code class="makeup elixir" translate="no"><span class="kd">def</span><span class="w"> </span><span class="nf">input</span><span class="p" data-group-id="1397444117-1">(</span><span class="p" data-group-id="1397444117-2">%{</span><span class="ss">field</span><span class="p">:</span><span class="w"> </span><span class="p" data-group-id="1397444117-3">%</span><span class="nc" data-group-id="1397444117-3">Phoenix.HTML.FormField</span><span class="p" data-group-id="1397444117-3">{</span><span class="p" data-group-id="1397444117-3">}</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">field</span><span class="p" data-group-id="1397444117-2">}</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">assigns</span><span class="p" data-group-id="1397444117-1">)</span><span class="w"> </span><span class="k" data-group-id="1397444117-4">do</span><span class="w">
  </span><span class="n">errors</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">if</span><span class="w"> </span><span class="nc">Phoenix.Component</span><span class="o">.</span><span class="n">used_input?</span><span class="p" data-group-id="1397444117-5">(</span><span class="n">field</span><span class="p" data-group-id="1397444117-5">)</span><span class="p">,</span><span class="w"> </span><span class="ss">do</span><span class="p">:</span><span class="w"> </span><span class="n">field</span><span class="o">.</span><span class="n">errors</span><span class="p">,</span><span class="w"> </span><span class="ss">else</span><span class="p">:</span><span class="w"> </span><span class="p" data-group-id="1397444117-6">[</span><span class="p" data-group-id="1397444117-6">]</span><span class="w">

  </span><span class="n">assigns</span><span class="w">
  </span><span class="o">|&gt;</span><span class="w"> </span><span class="n">assign</span><span class="p" data-group-id="1397444117-7">(</span><span class="ss">field</span><span class="p">:</span><span class="w"> </span><span class="no">nil</span><span class="p">,</span><span class="w"> </span><span class="ss">id</span><span class="p">:</span><span class="w"> </span><span class="n">assigns</span><span class="o">.</span><span class="n">id</span><span class="w"> </span><span class="o">||</span><span class="w"> </span><span class="n">field</span><span class="o">.</span><span class="n">id</span><span class="p" data-group-id="1397444117-7">)</span><span class="w">
  </span><span class="o">|&gt;</span><span class="w"> </span><span class="n">assign</span><span class="p" data-group-id="1397444117-8">(</span><span class="ss">:errors</span><span class="p">,</span><span class="w"> </span><span class="nc">Enum</span><span class="o">.</span><span class="n">map</span><span class="p" data-group-id="1397444117-9">(</span><span class="n">errors</span><span class="p">,</span><span class="w"> </span><span class="o">&amp;</span><span class="n">translate_error</span><span class="p" data-group-id="1397444117-10">(</span><span class="ni">&amp;1</span><span class="p" data-group-id="1397444117-10">)</span><span class="p" data-group-id="1397444117-9">)</span><span class="p" data-group-id="1397444117-8">)</span></code></pre><p>Now only errors for fields that were interacted with are shown.</p><h2 id="number-inputs">Number inputs</h2><p>Number inputs are a special case in LiveView forms. On programmatic updates,
some browsers will clear invalid inputs. So LiveView will not send change events
from the client when an input is invalid, instead allowing the browser's native
validation UI to drive user interaction. Once the input becomes valid, change and
submit events will be sent normally.</p><pre><code class="makeup heex" translate="no"><span class="p">&lt;</span><span class="nt">input</span><span class="w"> </span><span class="na">type</span><span class="p">=</span><span class="p">&quot;</span><span class="s2">number</span><span class="p">&quot;</span><span class="p">&gt;</span></code></pre><p>This is known to have a plethora of problems including accessibility, large numbers
are converted to exponential notation, and scrolling can accidentally increase or
decrease the number.</p><p>One alternative is the <code class="inline">inputmode</code> attribute, which may serve your application's needs
and users much better. According to <a href="https://caniuse.com/#search=inputmode">Can I Use?</a>,
the following is supported by 94% of the global market (as of Nov 2024):</p><pre><code class="makeup heex" translate="no"><span class="p">&lt;</span><span class="nt">input</span><span class="w"> </span><span class="na">type</span><span class="p">=</span><span class="p">&quot;</span><span class="s2">text</span><span class="p">&quot;</span><span class="w"> </span><span class="na">inputmode</span><span class="p">=</span><span class="p">&quot;</span><span class="s2">numeric</span><span class="p">&quot;</span><span class="w"> </span><span class="na">pattern</span><span class="p">=</span><span class="p">&quot;</span><span class="s2">[0-9]*</span><span class="p">&quot;</span><span class="p">&gt;</span></code></pre><h2 id="password-inputs">Password inputs</h2><p>Password inputs are also special cased in <a href="https://hexdocs.pm/phoenix_html/4.2.1/Phoenix.HTML.html"><code class="inline">Phoenix.HTML</code></a>. For security reasons,
password field values are not reused when rendering a password input tag. This
requires explicitly setting the <code class="inline">:value</code> in your markup, for example:</p><pre><code class="makeup heex" translate="no"><span class="p">&lt;</span><span class="nf">.input</span><span class="w"> </span><span class="na">field</span><span class="p">=</span><span class="p" data-group-id="1421024393-1">{</span><span class="n">f</span><span class="p" data-group-id="1421024393-ex-1">[</span><span class="ss">:password</span><span class="p" data-group-id="1421024393-ex-1">]</span><span class="p" data-group-id="1421024393-1">}</span><span class="w"> </span><span class="na">value</span><span class="p">=</span><span class="p" data-group-id="1421024393-2">{</span><span class="n">input_value</span><span class="p" data-group-id="1421024393-ex-2">(</span><span class="n">f</span><span class="p" data-group-id="1421024393-ex-3">[</span><span class="ss">:password</span><span class="p" data-group-id="1421024393-ex-3">]</span><span class="o">.</span><span class="n">value</span><span class="p" data-group-id="1421024393-ex-2">)</span><span class="p" data-group-id="1421024393-2">}</span><span class="w"> </span><span class="p">/&gt;</span><span class="w">
</span><span class="p">&lt;</span><span class="nf">.input</span><span class="w"> </span><span class="na">field</span><span class="p">=</span><span class="p" data-group-id="1421024393-3">{</span><span class="n">f</span><span class="p" data-group-id="1421024393-ex-4">[</span><span class="ss">:password_confirmation</span><span class="p" data-group-id="1421024393-ex-4">]</span><span class="p" data-group-id="1421024393-3">}</span><span class="w"> </span><span class="na">value</span><span class="p">=</span><span class="p" data-group-id="1421024393-4">{</span><span class="n">input_value</span><span class="p" data-group-id="1421024393-ex-5">(</span><span class="n">f</span><span class="p" data-group-id="1421024393-ex-6">[</span><span class="ss">:password_confirmation</span><span class="p" data-group-id="1421024393-ex-6">]</span><span class="o">.</span><span class="n">value</span><span class="p" data-group-id="1421024393-ex-5">)</span><span class="p" data-group-id="1421024393-4">}</span><span class="w"> </span><span class="p">/&gt;</span></code></pre><h2 id="nested-inputs">Nested inputs</h2><p>Nested inputs are handled using <code class="inline">.inputs_for</code> function component. By default
it will add the necessary hidden input fields for tracking ids of Ecto associations.</p><pre><code class="makeup heex" translate="no"><span class="p">&lt;</span><span class="nf">.inputs_for</span><span class="w"> </span><span class="na">:let</span><span class="p">=</span><span class="p" data-group-id="2290997391-1">{</span><span class="n">fp</span><span class="p" data-group-id="2290997391-1">}</span><span class="w"> </span><span class="na">field</span><span class="p">=</span><span class="p" data-group-id="2290997391-2">{</span><span class="n">f</span><span class="p" data-group-id="2290997391-ex-1">[</span><span class="ss">:friends</span><span class="p" data-group-id="2290997391-ex-1">]</span><span class="p" data-group-id="2290997391-2">}</span><span class="p">&gt;</span><span class="w">
</span><span class="w">  </span><span class="p">&lt;</span><span class="nf">.input</span><span class="w"> </span><span class="na">field</span><span class="p">=</span><span class="p" data-group-id="2290997391-3">{</span><span class="n">fp</span><span class="p" data-group-id="2290997391-ex-2">[</span><span class="ss">:name</span><span class="p" data-group-id="2290997391-ex-2">]</span><span class="p" data-group-id="2290997391-3">}</span><span class="w"> </span><span class="na">type</span><span class="p">=</span><span class="p">&quot;</span><span class="s2">text</span><span class="p">&quot;</span><span class="w"> </span><span class="p">/&gt;</span><span class="w">
</span><span class="p">&lt;/</span><span class="nf">.inputs_for</span><span class="p">&gt;</span></code></pre><h2 id="file-inputs">File inputs</h2><p>LiveView forms support <a href="uploads.xhtml">reactive file inputs</a>,
including drag and drop support via the <code class="inline">phx-drop-target</code>
attribute:</p><pre><code class="makeup heex" translate="no"><span class="p">&lt;</span><span class="nt">div</span><span class="w"> </span><span class="na">class</span><span class="p">=</span><span class="p">&quot;</span><span class="s2">c</span><span class="s2">o</span><span class="s2">n</span><span class="s2">t</span><span class="s2">a</span><span class="s2">i</span><span class="s2">n</span><span class="s2">e</span><span class="s2">r</span><span class="p">&quot;</span><span class="w"> </span><span class="na">phx-drop-target</span><span class="p">=</span><span class="p" data-group-id="8034875979-1">{</span><span class="na">@uploads</span><span class="o">.</span><span class="n">avatar</span><span class="o">.</span><span class="n">ref</span><span class="p" data-group-id="8034875979-1">}</span><span class="p">&gt;</span><span class="w">
</span><span class="n">  ...
</span><span class="w">  </span><span class="p">&lt;</span><span class="nf">.live_file_input</span><span class="w"> </span><span class="na">upload</span><span class="p">=</span><span class="p" data-group-id="8034875979-2">{</span><span class="na">@uploads</span><span class="o">.</span><span class="n">avatar</span><span class="p" data-group-id="8034875979-2">}</span><span class="w"> </span><span class="p">/&gt;</span><span class="w">
</span><span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span></code></pre><p>See <a href="Phoenix.Component.xhtml#live_file_input/1"><code class="inline">Phoenix.Component.live_file_input/1</code></a> for more.</p><h2 id="submitting-the-form-action-over-http">Submitting the form action over HTTP</h2><p>The <code class="inline">phx-trigger-action</code> attribute can be added to a form to trigger a standard
form submit on DOM patch to the URL specified in the form's standard <code class="inline">action</code>
attribute. This is useful to perform pre-final validation of a LiveView form
submit before posting to a controller route for operations that require
Plug session mutation. For example, in your LiveView template you can
annotate the <code class="inline">phx-trigger-action</code> with a boolean assign:</p><pre><code class="makeup heex" translate="no"><span class="p">&lt;</span><span class="nf">.form</span><span class="w"> </span><span class="na">:let</span><span class="p">=</span><span class="p" data-group-id="5100986953-1">{</span><span class="n">f</span><span class="p" data-group-id="5100986953-1">}</span><span class="w"> </span><span class="na">for</span><span class="p">=</span><span class="p" data-group-id="5100986953-2">{</span><span class="na">@changeset</span><span class="p" data-group-id="5100986953-2">}</span><span class="w">
</span><span class="w">  </span><span class="na">action</span><span class="p">=</span><span class="p" data-group-id="5100986953-3">{</span><span class="sx">~p&quot;/users/reset_password&quot;</span><span class="p" data-group-id="5100986953-3">}</span><span class="w">
</span><span class="w">  </span><span class="na">phx-submit</span><span class="p">=</span><span class="p">&quot;</span><span class="s2">save</span><span class="p">&quot;</span><span class="w">
</span><span class="w">  </span><span class="na">phx-trigger-action</span><span class="p">=</span><span class="p" data-group-id="5100986953-4">{</span><span class="na">@trigger_submit</span><span class="p" data-group-id="5100986953-4">}</span><span class="p">&gt;</span></code></pre><p>Then in your LiveView, you can toggle the assign to trigger the form with the current
fields on next render:</p><pre><code class="makeup elixir" translate="no"><span class="kd">def</span><span class="w"> </span><span class="nf">handle_event</span><span class="p" data-group-id="9063998366-1">(</span><span class="s">&quot;save&quot;</span><span class="p">,</span><span class="w"> </span><span class="n">params</span><span class="p">,</span><span class="w"> </span><span class="n">socket</span><span class="p" data-group-id="9063998366-1">)</span><span class="w"> </span><span class="k" data-group-id="9063998366-2">do</span><span class="w">
  </span><span class="k">case</span><span class="w"> </span><span class="n">validate_change_password</span><span class="p" data-group-id="9063998366-3">(</span><span class="n">socket</span><span class="o">.</span><span class="n">assigns</span><span class="o">.</span><span class="n">user</span><span class="p">,</span><span class="w"> </span><span class="n">params</span><span class="p" data-group-id="9063998366-3">)</span><span class="w"> </span><span class="k" data-group-id="9063998366-4">do</span><span class="w">
    </span><span class="p" data-group-id="9063998366-5">{</span><span class="ss">:ok</span><span class="p">,</span><span class="w"> </span><span class="n">changeset</span><span class="p" data-group-id="9063998366-5">}</span><span class="w"> </span><span class="o">-&gt;</span><span class="w">
      </span><span class="p" data-group-id="9063998366-6">{</span><span class="ss">:noreply</span><span class="p">,</span><span class="w"> </span><span class="n">assign</span><span class="p" data-group-id="9063998366-7">(</span><span class="n">socket</span><span class="p">,</span><span class="w"> </span><span class="ss">changeset</span><span class="p">:</span><span class="w"> </span><span class="n">changeset</span><span class="p">,</span><span class="w"> </span><span class="ss">trigger_submit</span><span class="p">:</span><span class="w"> </span><span class="no">true</span><span class="p" data-group-id="9063998366-7">)</span><span class="p" data-group-id="9063998366-6">}</span><span class="w">

    </span><span class="p" data-group-id="9063998366-8">{</span><span class="ss">:error</span><span class="p">,</span><span class="w"> </span><span class="n">changeset</span><span class="p" data-group-id="9063998366-8">}</span><span class="w"> </span><span class="o">-&gt;</span><span class="w">
      </span><span class="p" data-group-id="9063998366-9">{</span><span class="ss">:noreply</span><span class="p">,</span><span class="w"> </span><span class="n">assign</span><span class="p" data-group-id="9063998366-10">(</span><span class="n">socket</span><span class="p">,</span><span class="w"> </span><span class="ss">changeset</span><span class="p">:</span><span class="w"> </span><span class="n">changeset</span><span class="p" data-group-id="9063998366-10">)</span><span class="p" data-group-id="9063998366-9">}</span><span class="w">
  </span><span class="k" data-group-id="9063998366-4">end</span><span class="w">
</span><span class="k" data-group-id="9063998366-2">end</span></code></pre><p>Once <code class="inline">phx-trigger-action</code> is true, LiveView disconnects and then submits the form.</p><h2 id="recovery-following-crashes-or-disconnects">Recovery following crashes or disconnects</h2><p>By default, all forms marked with <code class="inline">phx-change</code> and having <code class="inline">id</code>
attribute will recover input values automatically after the user has
reconnected or the LiveView has remounted after a crash. This is
achieved by the client triggering the same <code class="inline">phx-change</code> to the server
as soon as the mount has been completed.</p><p><strong>Note:</strong> if you want to see form recovery working in development, please
make sure to disable live reloading in development by commenting out the
LiveReload plug in your <code class="inline">endpoint.ex</code> file or by setting <code class="inline">code_reloader: false</code>
in your <code class="inline">config/dev.exs</code>. Otherwise live reloading may cause the current page
to be reloaded whenever you restart the server, which will discard all form
state.</p><p>For most use cases, this is all you need and form recovery will happen
without consideration. In some cases, where forms are built step-by-step in a
stateful fashion, it may require extra recovery handling on the server outside
of your existing <code class="inline">phx-change</code> callback code. To enable specialized recovery,
provide a <code class="inline">phx-auto-recover</code> binding on the form to specify a different event
to trigger for recovery, which will receive the form params as usual. For example,
imagine a LiveView wizard form where the form is stateful and built based on what
step the user is on and by prior selections:</p><pre><code class="makeup heex" translate="no"><span class="p">&lt;</span><span class="nt">form</span><span class="w"> </span><span class="na">id</span><span class="p">=</span><span class="p">&quot;</span><span class="s2">w</span><span class="s2">i</span><span class="s2">z</span><span class="s2">a</span><span class="s2">r</span><span class="s2">d</span><span class="p">&quot;</span><span class="w"> </span><span class="na">phx-change</span><span class="p">=</span><span class="p">&quot;</span><span class="s2">validate_wizard_step</span><span class="p">&quot;</span><span class="w"> </span><span class="na">phx-auto-recover</span><span class="p">=</span><span class="p">&quot;</span><span class="s2">recover_wizard</span><span class="p">&quot;</span><span class="p">&gt;</span></code></pre><p>On the server, the <code class="inline">&quot;validate_wizard_step&quot;</code> event is only concerned with the
current client form data, but the server maintains the entire state of the wizard.
To recover in this scenario, you can specify a recovery event, such as <code class="inline">&quot;recover_wizard&quot;</code>
above, which would wire up to the following server callbacks in your LiveView:</p><pre><code class="makeup elixir" translate="no"><span class="kd">def</span><span class="w"> </span><span class="nf">handle_event</span><span class="p" data-group-id="7325231907-1">(</span><span class="s">&quot;validate_wizard_step&quot;</span><span class="p">,</span><span class="w"> </span><span class="n">params</span><span class="p">,</span><span class="w"> </span><span class="n">socket</span><span class="p" data-group-id="7325231907-1">)</span><span class="w"> </span><span class="k" data-group-id="7325231907-2">do</span><span class="w">
  </span><span class="c1"># regular validations for current step</span><span class="w">
  </span><span class="p" data-group-id="7325231907-3">{</span><span class="ss">:noreply</span><span class="p">,</span><span class="w"> </span><span class="n">socket</span><span class="p" data-group-id="7325231907-3">}</span><span class="w">
</span><span class="k" data-group-id="7325231907-2">end</span><span class="w">

</span><span class="kd">def</span><span class="w"> </span><span class="nf">handle_event</span><span class="p" data-group-id="7325231907-4">(</span><span class="s">&quot;recover_wizard&quot;</span><span class="p">,</span><span class="w"> </span><span class="n">params</span><span class="p">,</span><span class="w"> </span><span class="n">socket</span><span class="p" data-group-id="7325231907-4">)</span><span class="w"> </span><span class="k" data-group-id="7325231907-5">do</span><span class="w">
  </span><span class="c1"># rebuild state based on client input data up to the current step</span><span class="w">
  </span><span class="p" data-group-id="7325231907-6">{</span><span class="ss">:noreply</span><span class="p">,</span><span class="w"> </span><span class="n">socket</span><span class="p" data-group-id="7325231907-6">}</span><span class="w">
</span><span class="k" data-group-id="7325231907-5">end</span></code></pre><p>To forgo automatic form recovery, set <code class="inline">phx-auto-recover=&quot;ignore&quot;</code>.</p><h2 id="resetting-forms">Resetting forms</h2><p>To reset a LiveView form, you can use the standard <code class="inline">type=&quot;reset&quot;</code> on a
form button or input. When clicked, the form inputs will be reset to their
original values.
After the form is reset, a <code class="inline">phx-change</code> event is emitted with the <code class="inline">_target</code> param
containing the reset <code class="inline">name</code>. For example, the following element:</p><pre><code class="makeup heex" translate="no"><span class="p">&lt;</span><span class="nt">form</span><span class="w"> </span><span class="na">phx-change</span><span class="p">=</span><span class="p">&quot;</span><span class="s2">changed</span><span class="p">&quot;</span><span class="p">&gt;</span><span class="w">
</span><span class="n">  ...
</span><span class="w">  </span><span class="p">&lt;</span><span class="nt">button</span><span class="w"> </span><span class="na">type</span><span class="p">=</span><span class="p">&quot;</span><span class="s2">reset</span><span class="p">&quot;</span><span class="w"> </span><span class="na">name</span><span class="p">=</span><span class="p">&quot;</span><span class="s2">reset</span><span class="p">&quot;</span><span class="p">&gt;</span><span class="n">Reset</span><span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span><span class="w">
</span><span class="p">&lt;/</span><span class="nt">form</span><span class="p">&gt;</span></code></pre><p>Can be handled on the server differently from your regular change function:</p><pre><code class="makeup elixir" translate="no"><span class="kd">def</span><span class="w"> </span><span class="nf">handle_event</span><span class="p" data-group-id="2923302921-1">(</span><span class="s">&quot;changed&quot;</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="2923302921-2">%{</span><span class="s">&quot;_target&quot;</span><span class="w"> </span><span class="p">=&gt;</span><span class="w"> </span><span class="p" data-group-id="2923302921-3">[</span><span class="s">&quot;reset&quot;</span><span class="p" data-group-id="2923302921-3">]</span><span class="p" data-group-id="2923302921-2">}</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">params</span><span class="p">,</span><span class="w"> </span><span class="n">socket</span><span class="p" data-group-id="2923302921-1">)</span><span class="w"> </span><span class="k" data-group-id="2923302921-4">do</span><span class="w">
  </span><span class="c1"># handle form reset</span><span class="w">
</span><span class="k" data-group-id="2923302921-4">end</span><span class="w">

</span><span class="kd">def</span><span class="w"> </span><span class="nf">handle_event</span><span class="p" data-group-id="2923302921-5">(</span><span class="s">&quot;changed&quot;</span><span class="p">,</span><span class="w"> </span><span class="n">params</span><span class="p">,</span><span class="w"> </span><span class="n">socket</span><span class="p" data-group-id="2923302921-5">)</span><span class="w"> </span><span class="k" data-group-id="2923302921-6">do</span><span class="w">
  </span><span class="c1"># handle regular form change</span><span class="w">
</span><span class="k" data-group-id="2923302921-6">end</span></code></pre><h2 id="javascript-client-specifics">JavaScript client specifics</h2><p>The JavaScript client is always the source of truth for current input values.
For any given input with focus, LiveView will never overwrite the input's current
value, even if it deviates from the server's rendered updates. This works well
for updates where major side effects are not expected, such as form validation
errors, or additive UX around the user's input values as they fill out a form.</p><p>For these use cases, the <code class="inline">phx-change</code> input does not concern itself with disabling
input editing while an event to the server is in flight. When a <code class="inline">phx-change</code> event
is sent to the server, the input tag and parent form tag receive the
<code class="inline">phx-change-loading</code> CSS class, then the payload is pushed to the server with a
<code class="inline">&quot;_target&quot;</code> param in the root payload containing the keyspace of the input name
which triggered the change event.</p><p>For example, if the following input triggered a change event:</p><pre><code class="makeup heex" translate="no"><span class="p">&lt;</span><span class="nt">input</span><span class="w"> </span><span class="na">name</span><span class="p">=</span><span class="p">&quot;</span><span class="s2">user[username]</span><span class="p">&quot;</span><span class="p">/&gt;</span></code></pre><p>The server's <code class="inline">handle_event/3</code> would receive a payload:</p><pre><code class="makeup elixir" translate="no"><span class="p" data-group-id="4551531615-1">%{</span><span class="s">&quot;_target&quot;</span><span class="w"> </span><span class="p">=&gt;</span><span class="w"> </span><span class="p" data-group-id="4551531615-2">[</span><span class="s">&quot;user&quot;</span><span class="p">,</span><span class="w"> </span><span class="s">&quot;username&quot;</span><span class="p" data-group-id="4551531615-2">]</span><span class="p">,</span><span class="w"> </span><span class="s">&quot;user&quot;</span><span class="w"> </span><span class="p">=&gt;</span><span class="w"> </span><span class="p" data-group-id="4551531615-3">%{</span><span class="s">&quot;username&quot;</span><span class="w"> </span><span class="p">=&gt;</span><span class="w"> </span><span class="s">&quot;Name&quot;</span><span class="p" data-group-id="4551531615-3">}</span><span class="p" data-group-id="4551531615-1">}</span></code></pre><p>The <code class="inline">phx-submit</code> event is used for form submissions where major side effects
typically happen, such as rendering new containers, calling an external
service, or redirecting to a new page.</p><p>On submission of a form bound with a <code class="inline">phx-submit</code> event:</p><ol><li>The form's inputs are set to <code class="inline">readonly</code></li><li>Any submit button on the form is disabled</li><li>The form receives the <code class="inline">&quot;phx-submit-loading&quot;</code> class</li></ol><p>On completion of server processing of the <code class="inline">phx-submit</code> event:</p><ol><li>The submitted form is reactivated and loses the <code class="inline">&quot;phx-submit-loading&quot;</code> class</li><li>The last input with focus is restored (unless another input has received focus)</li><li>Updates are patched to the DOM as usual</li></ol><p>To handle latent events, the <code class="inline">&lt;button&gt;</code> tag of a form can be annotated with
<code class="inline">phx-disable-with</code>, which swaps the element's <code class="inline">innerText</code> with the provided
value during event submission. For example, the following code would change
the &quot;Save&quot; button to &quot;Saving...&quot;, and restore it to &quot;Save&quot; on acknowledgment:</p><pre><code class="makeup heex" translate="no"><span class="p">&lt;</span><span class="nt">button</span><span class="w"> </span><span class="na">type</span><span class="p">=</span><span class="p">&quot;</span><span class="s2">submit</span><span class="p">&quot;</span><span class="w"> </span><span class="na">phx-disable-with</span><span class="p">=</span><span class="p">&quot;</span><span class="s2">Saving...</span><span class="p">&quot;</span><span class="p">&gt;</span><span class="n">Save</span><span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span></code></pre><section role="note" class="admonition info"><h4 class="admonition-title info">A note on disabled buttons</h4><p>By default, LiveView only disables submit buttons and inputs within forms
while waiting for a server acknowledgement. If you want a button outside of
a form to be disabled without changing its text, you can add <code class="inline">phx-disable-with</code>
without a value:</p><pre><code class="makeup heex" translate="no"><span class="w"> </span><span class="p">&lt;</span><span class="nt">button</span><span class="w"> </span><span class="na">type</span><span class="p">=</span><span class="p">&quot;</span><span class="s2">button</span><span class="p">&quot;</span><span class="w"> </span><span class="na">phx-disable-with</span><span class="p">&gt;</span><span class="n">...</span><span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span></code></pre><p>Note also that LiveView ignores clicks on elements that are currently awaiting
an acknowledgement from the server. This means that although a regular button
without <code class="inline">phx-disable-with</code> is not semantically disabled while waiting for a
server response, it will not trigger duplicate events.</p><p>Finally, <code class="inline">phx-disable-with</code> works with an element‘s <code class="inline">innerText</code>,
therefore nested DOM elements, like <code class="inline">svg</code> or icons, won't be preserved.
See &quot;CSS loading states&quot; for alternative approaches to this.</p></section><p>You may also take advantage of LiveView's CSS loading state classes to
swap out your form content while the form is submitting. For example,
with the following rules in your <code class="inline">app.css</code>:</p><pre><code class="makeup css" translate="no"><span class="na">.</span><span class="na">while-submitting</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="nb">display</span><span class="p">:</span><span class="w"> </span><span class="no">none</span><span class="p">;</span><span class="w"> </span><span class="p">}</span><span class="w">
</span><span class="na">.</span><span class="na">inputs</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="nb">display</span><span class="p">:</span><span class="w"> </span><span class="no">block</span><span class="p">;</span><span class="w"> </span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="na">.</span><span class="na">phx-submit-loading</span><span class="w"> </span><span class="na">.</span><span class="na">while-submitting</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="nb">display</span><span class="p">:</span><span class="w"> </span><span class="no">block</span><span class="p">;</span><span class="w"> </span><span class="p">}</span><span class="w">
</span><span class="na">.</span><span class="na">phx-submit-loading</span><span class="w"> </span><span class="na">.</span><span class="na">inputs</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="nb">display</span><span class="p">:</span><span class="w"> </span><span class="no">none</span><span class="p">;</span><span class="w"> </span><span class="p">}</span></code></pre><p>You can show and hide content with the following markup:</p><pre><code class="makeup heex" translate="no"><span class="p">&lt;</span><span class="nt">form</span><span class="w"> </span><span class="na">phx-change</span><span class="p">=</span><span class="p">&quot;</span><span class="s2">update</span><span class="p">&quot;</span><span class="p">&gt;</span><span class="w">
</span><span class="w">  </span><span class="p">&lt;</span><span class="nt">div</span><span class="w"> </span><span class="na">class</span><span class="p">=</span><span class="p">&quot;</span><span class="s2">w</span><span class="s2">h</span><span class="s2">i</span><span class="s2">l</span><span class="s2">e</span><span class="s2">-</span><span class="s2">s</span><span class="s2">u</span><span class="s2">b</span><span class="s2">m</span><span class="s2">i</span><span class="s2">t</span><span class="s2">t</span><span class="s2">i</span><span class="s2">n</span><span class="s2">g</span><span class="p">&quot;</span><span class="p">&gt;</span><span class="n">Please wait while we save our content...</span><span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span><span class="w">
</span><span class="w">  </span><span class="p">&lt;</span><span class="nt">div</span><span class="w"> </span><span class="na">class</span><span class="p">=</span><span class="p">&quot;</span><span class="s2">i</span><span class="s2">n</span><span class="s2">p</span><span class="s2">u</span><span class="s2">t</span><span class="s2">s</span><span class="p">&quot;</span><span class="p">&gt;</span><span class="w">
</span><span class="w">    </span><span class="p">&lt;</span><span class="nt">input</span><span class="w"> </span><span class="na">type</span><span class="p">=</span><span class="p">&quot;</span><span class="s2">text</span><span class="p">&quot;</span><span class="w"> </span><span class="na">name</span><span class="p">=</span><span class="p">&quot;</span><span class="s2">text</span><span class="p">&quot;</span><span class="w"> </span><span class="na">value</span><span class="p">=</span><span class="p" data-group-id="0552160652-1">{</span><span class="na">@text</span><span class="p" data-group-id="0552160652-1">}</span><span class="p">&gt;</span><span class="w">
</span><span class="w">  </span><span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span><span class="w">
</span><span class="p">&lt;/</span><span class="nt">form</span><span class="p">&gt;</span></code></pre><p>Additionally, we strongly recommend including a unique HTML &quot;id&quot; attribute on the form.
When DOM siblings change, elements without an ID will be replaced rather than moved,
which can cause issues such as form fields losing focus.</p><h2 id="triggering-phx-form-events-with-javascript">Triggering <code class="inline">phx-</code> form events with JavaScript</h2><p>Often it is desirable to trigger an event on a DOM element without explicit
user interaction on the element. For example, a custom form element such as a
date picker or custom select input which utilizes a hidden input element to
store the selected state.</p><p>In these cases, the event functions on the DOM API can be used, for example
to trigger a <code class="inline">phx-change</code> event:</p><pre><code class="makeup javascript" translate="no"><span class="nb">document</span><span class="p">.</span><span class="nf">getElementById</span><span class="p">(</span><span class="p">&quot;</span><span class="s2">my-select</span><span class="p">&quot;</span><span class="p">)</span><span class="p">.</span><span class="nf">dispatchEvent</span><span class="p">(</span><span class="w">
</span><span class="w">  </span><span class="ow">new</span><span class="w"> </span><span class="nv">Event</span><span class="p">(</span><span class="p">&quot;</span><span class="s2">input</span><span class="p">&quot;</span><span class="p">,</span><span class="w"> </span><span class="p">{</span><span class="n">bubbles</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">}</span><span class="p">)</span><span class="w">
</span><span class="p">)</span></code></pre><p>When using a client hook, <code class="inline">this.el</code> can be used to determine the element as
outlined in the &quot;Client hooks&quot; documentation.</p><p>It is also possible to trigger a <code class="inline">phx-submit</code> using a &quot;submit&quot; event:</p><pre><code class="makeup javascript" translate="no"><span class="nb">document</span><span class="p">.</span><span class="nf">getElementById</span><span class="p">(</span><span class="p">&quot;</span><span class="s2">my-form</span><span class="p">&quot;</span><span class="p">)</span><span class="p">.</span><span class="nf">dispatchEvent</span><span class="p">(</span><span class="w">
</span><span class="w">  </span><span class="ow">new</span><span class="w"> </span><span class="nv">Event</span><span class="p">(</span><span class="p">&quot;</span><span class="s2">submit</span><span class="p">&quot;</span><span class="p">,</span><span class="w"> </span><span class="p">{</span><span class="n">bubbles</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w"> </span><span class="n">cancelable</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">}</span><span class="p">)</span><span class="w">
</span><span class="p">)</span></code></pre><h2 id="preventing-form-submission-with-javascript">Preventing form submission with JavaScript</h2><p>In some cases, you may want to conditionally prevent form submission based on client-side validation or other business logic before allowing a <code class="inline">phx-submit</code> to be processed by the server.</p><p>JavaScript can be used to prevent the default form submission behavior, for example with a <a href="js-interop.xhtml#client-hooks-via-phx-hook">hook</a>:</p><pre><code class="makeup javascript" translate="no"><span class="sd">/**</span><span class="w">
</span><span class="w"> </span><span class="sd">*</span><span class="sd"> @type {import(&quot;phoenix_live_view&quot;).HooksOptions}
</span><span class="w"> </span><span class="sd">*/</span><span class="w">
</span><span class="kt">let</span><span class="w"> </span><span class="no">Hooks</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="p">}</span><span class="w">
</span><span class="bp">Hooks</span><span class="p">.</span><span class="n">CustomFormSubmission</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">  </span><span class="nf">mounted</span><span class="p">(</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="nb">this</span><span class="p">.</span><span class="n">el</span><span class="p">.</span><span class="nf">addEventListener</span><span class="p">(</span><span class="p">&quot;</span><span class="s2">submit</span><span class="p">&quot;</span><span class="p">,</span><span class="w"> </span><span class="p">(</span><span class="nv">event</span><span class="p">)</span><span class="w"> </span><span class="kt">=&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">      </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="o">!</span><span class="nb">this</span><span class="p">.</span><span class="nf">shouldSubmit</span><span class="p">(</span><span class="p">)</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="cm">//</span><span class="cm"> prevent the event from bubbling to the default LiveView handler
</span><span class="w">        </span><span class="nv">event</span><span class="p">.</span><span class="nf">stopPropagation</span><span class="p">(</span><span class="p">)</span><span class="w">
</span><span class="w">        </span><span class="cm">//</span><span class="cm"> prevent the default browser behavior (submitting the form over HTTP)
</span><span class="w">        </span><span class="nv">event</span><span class="p">.</span><span class="nf">preventDefault</span><span class="p">(</span><span class="p">)</span><span class="w">
</span><span class="w">      </span><span class="p">}</span><span class="w">
</span><span class="w">    </span><span class="p">}</span><span class="p">)</span><span class="w">
</span><span class="w">  </span><span class="p">}</span><span class="p">,</span><span class="w">
</span><span class="w">  </span><span class="nf">shouldSubmit</span><span class="p">(</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="cm">//</span><span class="cm"> Check if we should submit the form
</span><span class="w">    </span><span class="o">...</span><span class="w">
</span><span class="w">  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span></code></pre><p>This hook can be set on your form as such:</p><pre><code class="makeup heex" translate="no"><span class="p">&lt;</span><span class="nt">form</span><span class="w"> </span><span class="na">phx-hook</span><span class="p">=</span><span class="p">&quot;</span><span class="s2">CustomFormSubmission</span><span class="p">&quot;</span><span class="p">&gt;</span><span class="w">
</span><span class="w">  </span><span class="p">&lt;</span><span class="nt">input</span><span class="w"> </span><span class="na">type</span><span class="p">=</span><span class="p">&quot;</span><span class="s2">text</span><span class="p">&quot;</span><span class="w"> </span><span class="na">name</span><span class="p">=</span><span class="p">&quot;</span><span class="s2">text</span><span class="p">&quot;</span><span class="w"> </span><span class="na">value</span><span class="p">=</span><span class="p" data-group-id="5386887929-1">{</span><span class="na">@text</span><span class="p" data-group-id="5386887929-1">}</span><span class="p">&gt;</span><span class="w">
</span><span class="p">&lt;/</span><span class="nt">form</span><span class="p">&gt;</span></code></pre>

  </body>
</html>
