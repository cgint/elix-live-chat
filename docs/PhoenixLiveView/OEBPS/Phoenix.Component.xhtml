<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"
      xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>Phoenix.Component - Phoenix LiveView v1.1.2</title>
    <meta name="generator" content="ExDoc v0.38.2" />
    <link type="text/css" rel="stylesheet" href="dist/epub-elixir-FNUUKFP7.css" />
    <script src="dist/epub-4WIP524F.js"></script>

  </head>
  <body class="content-inner">

    <h1 id="content">
Phoenix.Component 
    </h1>


      <section id="moduledoc" class="docstring">
<p>Define reusable function components with HEEx templates.</p><p>A function component is any function that receives an assigns
map as an argument and returns a rendered struct built with
<a href="#sigil_H/2">the <code class="inline">~H</code> sigil</a>:</p><pre><code class="makeup elixir" translate="no"><samp class="kd">defmodule</samp><samp class="w"> </samp><samp class="nc">MyComponent</samp><samp class="w"> </samp><samp class="k" data-group-id="8795648543-1">do</samp><samp class="w">
  </samp><samp class="c1"># In Phoenix apps, the line is typically: use MyAppWeb, :html</samp><samp class="w">
  </samp><samp class="kn">use</samp><samp class="w"> </samp><samp class="nc">Phoenix.Component</samp><samp class="w">

  </samp><samp class="kd">def</samp><samp class="w"> </samp><samp class="nf">greet</samp><samp class="p" data-group-id="8795648543-2">(</samp><samp class="n">assigns</samp><samp class="p" data-group-id="8795648543-2">)</samp><samp class="w"> </samp><samp class="k" data-group-id="8795648543-3">do</samp><samp class="w">
    </samp><samp class="sx">~H&quot;&quot;&quot;</samp><samp class="w">
</samp><samp class="w">    </samp><samp class="p">&lt;</samp><samp class="nt">p</samp><samp class="p">&gt;</samp><samp class="n">Hello, </samp><samp class="p" data-group-id="0878146457-1">{</samp><samp class="na">@name</samp><samp class="p" data-group-id="0878146457-1">}</samp><samp class="n">!</samp><samp class="p">&lt;/</samp><samp class="nt">p</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="w">    </samp><samp class="sx">&quot;&quot;&quot;</samp><samp class="w">
  </samp><samp class="k" data-group-id="8795648543-3">end</samp><samp class="w">
</samp><samp class="k" data-group-id="8795648543-1">end</samp></code></pre><p>This function uses the <code class="inline">~H</code> sigil to return a rendered template.
<code class="inline">~H</code> stands for HEEx (HTML + EEx). HEEx is a template language for
writing HTML mixed with Elixir interpolation. We can write Elixir
code inside <code class="inline">{...}</code> for HTML-aware interpolation inside tag attributes
and the body. We can also interpolate arbitrary HEEx blocks using <code class="inline">&lt;%= ... %&gt;</code>
We use <code class="inline">@name</code> to access the key <code class="inline">name</code> defined inside <code class="inline">assigns</code>.</p><p>When invoked within a <code class="inline">~H</code> sigil or HEEx template file:</p><pre><code class="makeup heex" translate="no"><samp class="p">&lt;</samp><samp class="nc">MyComponent</samp><samp class="o">.</samp><samp class="n">greet</samp><samp class="w"> </samp><samp class="na">name</samp><samp class="p">=</samp><samp class="p">&quot;</samp><samp class="s2">Jane</samp><samp class="p">&quot;</samp><samp class="w"> </samp><samp class="p">/&gt;</samp></code></pre><p>The following HTML is rendered:</p><pre><code class="makeup html" translate="no"><samp class="p">&lt;</samp><samp class="nt">p</samp><samp class="p">&gt;</samp><samp class="n">Hello, Jane!</samp><samp class="p">&lt;/</samp><samp class="nt">p</samp><samp class="p">&gt;</samp></code></pre><p>If the function component is defined locally, or its module is imported,
then the caller can invoke the function directly without specifying the module:</p><pre><code class="makeup heex" translate="no"><samp class="p">&lt;</samp><samp class="nf">.greet</samp><samp class="w"> </samp><samp class="na">name</samp><samp class="p">=</samp><samp class="p">&quot;</samp><samp class="s2">Jane</samp><samp class="p">&quot;</samp><samp class="w"> </samp><samp class="p">/&gt;</samp></code></pre><p>For dynamic values, you can interpolate Elixir expressions into a function component:</p><pre><code class="makeup heex" translate="no"><samp class="p">&lt;</samp><samp class="nf">.greet</samp><samp class="w"> </samp><samp class="na">name</samp><samp class="p">=</samp><samp class="p" data-group-id="9685391354-1">{</samp><samp class="na">@user</samp><samp class="o">.</samp><samp class="n">name</samp><samp class="p" data-group-id="9685391354-1">}</samp><samp class="w"> </samp><samp class="p">/&gt;</samp></code></pre><p>Function components can also accept blocks of HEEx content (more on this later):</p><pre><code class="makeup heex" translate="no"><samp class="p">&lt;</samp><samp class="nf">.card</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="w">  </samp><samp class="p">&lt;</samp><samp class="nt">p</samp><samp class="p">&gt;</samp><samp class="n">This is the body of my card!</samp><samp class="p">&lt;/</samp><samp class="nt">p</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="p">&lt;/</samp><samp class="nf">.card</samp><samp class="p">&gt;</samp></code></pre><p>In this module we will learn how to build rich and composable components to
use in our applications.</p><h2 id="module-attributes">Attributes</h2><p><a href="Phoenix.Component.xhtml"><code class="inline">Phoenix.Component</code></a> provides the <a href="#attr/3"><code class="inline">attr/3</code></a> macro to declare what attributes the proceeding function
component expects to receive when invoked:</p><pre><code class="makeup elixir" translate="no"><samp class="n">attr</samp><samp class="w"> </samp><samp class="ss">:name</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:string</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">required</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">true</samp><samp class="w">

</samp><samp class="kd">def</samp><samp class="w"> </samp><samp class="nf">greet</samp><samp class="p" data-group-id="0562531711-1">(</samp><samp class="n">assigns</samp><samp class="p" data-group-id="0562531711-1">)</samp><samp class="w"> </samp><samp class="k" data-group-id="0562531711-2">do</samp><samp class="w">
  </samp><samp class="sx">~H&quot;&quot;&quot;</samp><samp class="w">
</samp><samp class="w">  </samp><samp class="p">&lt;</samp><samp class="nt">p</samp><samp class="p">&gt;</samp><samp class="n">Hello, </samp><samp class="p" data-group-id="7330278623-1">{</samp><samp class="na">@name</samp><samp class="p" data-group-id="7330278623-1">}</samp><samp class="n">!</samp><samp class="p">&lt;/</samp><samp class="nt">p</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="w">  </samp><samp class="sx">&quot;&quot;&quot;</samp><samp class="w">
</samp><samp class="k" data-group-id="0562531711-2">end</samp></code></pre><p>By calling <a href="#attr/3"><code class="inline">attr/3</code></a>, it is now clear that <code class="inline">greet/1</code> requires a string attribute called <code class="inline">name</code>
present in its assigns map to properly render. Failing to do so will result in a compilation
warning:</p><pre><code class="makeup heex" translate="no"><samp class="p">&lt;</samp><samp class="nc">MyComponent</samp><samp class="o">.</samp><samp class="n">greet</samp><samp class="w"> </samp><samp class="p">/&gt;</samp><samp class="w">
</samp><samp class="w">  </samp><samp class="cm">&lt;!--</samp><samp class="cm"> warning: missing required attribute &quot;name&quot; for component MyAppWeb.MyComponent.greet/1
</samp><samp class="cm">           lib/app_web/my_component.ex:15 </samp><samp class="cm">--&gt;</samp></code></pre><p>Attributes can provide default values that are automatically merged into the assigns map:</p><pre><code class="makeup elixir" translate="no"><samp class="n">attr</samp><samp class="w"> </samp><samp class="ss">:name</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:string</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">default</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;Bob&quot;</samp></code></pre><p>Now you can invoke the function component without providing a value for <code class="inline">name</code>:</p><pre><code class="makeup heex" translate="no"><samp class="p">&lt;</samp><samp class="nf">.greet</samp><samp class="w"> </samp><samp class="p">/&gt;</samp></code></pre><p>Rendering the following HTML:</p><pre><code class="makeup html" translate="no"><samp class="p">&lt;</samp><samp class="nt">p</samp><samp class="p">&gt;</samp><samp class="n">Hello, Bob!</samp><samp class="p">&lt;/</samp><samp class="nt">p</samp><samp class="p">&gt;</samp></code></pre><p>Accessing an attribute which is required and does not have a default value will fail.
You must explicitly declare <code class="inline">default: nil</code> or assign a value programmatically with the
<a href="#assign_new/3"><code class="inline">assign_new/3</code></a> function.</p><p>Multiple attributes can be declared for the same function component:</p><pre><code class="makeup elixir" translate="no"><samp class="n">attr</samp><samp class="w"> </samp><samp class="ss">:name</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:string</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">required</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">true</samp><samp class="w">
</samp><samp class="n">attr</samp><samp class="w"> </samp><samp class="ss">:age</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:integer</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">required</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">true</samp><samp class="w">

</samp><samp class="kd">def</samp><samp class="w"> </samp><samp class="nf">celebrate</samp><samp class="p" data-group-id="7833525652-1">(</samp><samp class="n">assigns</samp><samp class="p" data-group-id="7833525652-1">)</samp><samp class="w"> </samp><samp class="k" data-group-id="7833525652-2">do</samp><samp class="w">
  </samp><samp class="sx">~H&quot;&quot;&quot;</samp><samp class="w">
</samp><samp class="w">  </samp><samp class="p">&lt;</samp><samp class="nt">p</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="n">    Happy birthday </samp><samp class="p" data-group-id="4641050264-1">{</samp><samp class="na">@name</samp><samp class="p" data-group-id="4641050264-1">}</samp><samp class="n">!
</samp><samp class="n">    You are </samp><samp class="p" data-group-id="4641050264-2">{</samp><samp class="na">@age</samp><samp class="p" data-group-id="4641050264-2">}</samp><samp class="n"> years old.
</samp><samp class="w">  </samp><samp class="p">&lt;/</samp><samp class="nt">p</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="w">  </samp><samp class="sx">&quot;&quot;&quot;</samp><samp class="w">
</samp><samp class="k" data-group-id="7833525652-2">end</samp></code></pre><p>Allowing the caller to pass multiple values:</p><pre><code class="makeup heex" translate="no"><samp class="p">&lt;</samp><samp class="nf">.celebrate</samp><samp class="w"> </samp><samp class="na">name</samp><samp class="p">=</samp><samp class="p" data-group-id="9587870889-1">{</samp><samp class="s">&quot;Genevieve&quot;</samp><samp class="p" data-group-id="9587870889-1">}</samp><samp class="w"> </samp><samp class="na">age</samp><samp class="p">=</samp><samp class="p" data-group-id="9587870889-2">{</samp><samp class="mi">34</samp><samp class="p" data-group-id="9587870889-2">}</samp><samp class="w"> </samp><samp class="p">/&gt;</samp></code></pre><p>Rendering the following HTML:</p><pre><code class="makeup html" translate="no"><samp class="p">&lt;</samp><samp class="nt">p</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="n">  Happy birthday Genevieve!
</samp><samp class="n">  You are 34 years old.
</samp><samp class="p">&lt;/</samp><samp class="nt">p</samp><samp class="p">&gt;</samp></code></pre><p>Multiple function components can be defined in the same module, with different attributes. In the
following example, <code class="inline">&lt;Components.greet/&gt;</code> requires a <code class="inline">name</code>, but <em>does not</em> require a <code class="inline">title</code>, and
<code class="inline">&lt;Components.heading&gt;</code> requires a <code class="inline">title</code>, but <em>does not</em> require a <code class="inline">name</code>.</p><pre><code class="makeup elixir" translate="no"><samp class="kd">defmodule</samp><samp class="w"> </samp><samp class="nc">Components</samp><samp class="w"> </samp><samp class="k" data-group-id="0226954405-1">do</samp><samp class="w">
  </samp><samp class="c1"># In Phoenix apps, the line is typically: use MyAppWeb, :html</samp><samp class="w">
  </samp><samp class="kn">use</samp><samp class="w"> </samp><samp class="nc">Phoenix.Component</samp><samp class="w">

  </samp><samp class="n">attr</samp><samp class="w"> </samp><samp class="ss">:title</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:string</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">required</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">true</samp><samp class="w">

  </samp><samp class="kd">def</samp><samp class="w"> </samp><samp class="nf">heading</samp><samp class="p" data-group-id="0226954405-2">(</samp><samp class="n">assigns</samp><samp class="p" data-group-id="0226954405-2">)</samp><samp class="w"> </samp><samp class="k" data-group-id="0226954405-3">do</samp><samp class="w">
    </samp><samp class="sx">~H&quot;&quot;&quot;</samp><samp class="w">
</samp><samp class="w">    </samp><samp class="p">&lt;</samp><samp class="nt">h1</samp><samp class="p">&gt;</samp><samp class="p" data-group-id="8352176352-1">{</samp><samp class="na">@title</samp><samp class="p" data-group-id="8352176352-1">}</samp><samp class="p">&lt;/</samp><samp class="nt">h1</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="w">    </samp><samp class="sx">&quot;&quot;&quot;</samp><samp class="w">
  </samp><samp class="k" data-group-id="0226954405-3">end</samp><samp class="w">

  </samp><samp class="n">attr</samp><samp class="w"> </samp><samp class="ss">:name</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:string</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">required</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">true</samp><samp class="w">

  </samp><samp class="kd">def</samp><samp class="w"> </samp><samp class="nf">greet</samp><samp class="p" data-group-id="0226954405-4">(</samp><samp class="n">assigns</samp><samp class="p" data-group-id="0226954405-4">)</samp><samp class="w"> </samp><samp class="k" data-group-id="0226954405-5">do</samp><samp class="w">
    </samp><samp class="sx">~H&quot;&quot;&quot;</samp><samp class="w">
</samp><samp class="w">    </samp><samp class="p">&lt;</samp><samp class="nt">p</samp><samp class="p">&gt;</samp><samp class="n">Hello </samp><samp class="p" data-group-id="7024086621-1">{</samp><samp class="na">@name</samp><samp class="p" data-group-id="7024086621-1">}</samp><samp class="p">&lt;/</samp><samp class="nt">p</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="w">    </samp><samp class="sx">&quot;&quot;&quot;</samp><samp class="w">
  </samp><samp class="k" data-group-id="0226954405-5">end</samp><samp class="w">
</samp><samp class="k" data-group-id="0226954405-1">end</samp></code></pre><p>With the <a href="#attr/3"><code class="inline">attr/3</code></a> macro you have the core ingredients to create reusable function components.
But what if you need your function components to support dynamic attributes, such as common HTML
attributes to mix into a component's container?</p><h2 id="module-global-attributes">Global attributes</h2><p>Global attributes are a set of attributes that a function component can accept when it
declares an attribute of type <code class="inline">:global</code>. By default, the set of attributes accepted are those
attributes common to all standard HTML tags.
See <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes">Global attributes</a>
for a complete list of attributes.</p><p>Once a global attribute is declared, any number of attributes in the set can be passed by
the caller without having to modify the function component itself.</p><p>Below is an example of a function component that accepts a dynamic number of global attributes:</p><pre><code class="makeup elixir" translate="no"><samp class="n">attr</samp><samp class="w"> </samp><samp class="ss">:message</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:string</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">required</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">true</samp><samp class="w">
</samp><samp class="n">attr</samp><samp class="w"> </samp><samp class="ss">:rest</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:global</samp><samp class="w">

</samp><samp class="kd">def</samp><samp class="w"> </samp><samp class="nf">notification</samp><samp class="p" data-group-id="6308114109-1">(</samp><samp class="n">assigns</samp><samp class="p" data-group-id="6308114109-1">)</samp><samp class="w"> </samp><samp class="k" data-group-id="6308114109-2">do</samp><samp class="w">
  </samp><samp class="sx">~H&quot;&quot;&quot;</samp><samp class="w">
</samp><samp class="w">  </samp><samp class="p">&lt;</samp><samp class="nt">span</samp><samp class="w"> </samp><samp class="p" data-group-id="2193683360-1">{</samp><samp class="na">@rest</samp><samp class="p" data-group-id="2193683360-1">}</samp><samp class="p">&gt;</samp><samp class="p" data-group-id="2193683360-2">{</samp><samp class="na">@message</samp><samp class="p" data-group-id="2193683360-2">}</samp><samp class="p">&lt;/</samp><samp class="nt">span</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="w">  </samp><samp class="sx">&quot;&quot;&quot;</samp><samp class="w">
</samp><samp class="k" data-group-id="6308114109-2">end</samp></code></pre><p>The caller can pass multiple global attributes (such as <code class="inline">phx-*</code> bindings or the <code class="inline">class</code> attribute):</p><pre><code class="makeup heex" translate="no"><samp class="p">&lt;</samp><samp class="nf">.notification</samp><samp class="w"> </samp><samp class="na">message</samp><samp class="p">=</samp><samp class="p">&quot;</samp><samp class="s2">You&#39;ve got mail!</samp><samp class="p">&quot;</samp><samp class="w"> </samp><samp class="na">class</samp><samp class="p">=</samp><samp class="p">&quot;</samp><samp class="s2">b</samp><samp class="s2">g</samp><samp class="s2">-</samp><samp class="s2">g</samp><samp class="s2">r</samp><samp class="s2">e</samp><samp class="s2">e</samp><samp class="s2">n</samp><samp class="s2">-</samp><samp class="s2">2</samp><samp class="s2">0</samp><samp class="s2">0</samp><samp class="p">&quot;</samp><samp class="w"> </samp><samp class="na">phx-click</samp><samp class="p">=</samp><samp class="p">&quot;</samp><samp class="s2">close</samp><samp class="p">&quot;</samp><samp class="w"> </samp><samp class="p">/&gt;</samp></code></pre><p>Rendering the following HTML:</p><pre><code class="makeup html" translate="no"><samp class="p">&lt;</samp><samp class="nt">span</samp><samp class="w"> </samp><samp class="na">class</samp><samp class="p">=</samp><samp class="p">&quot;</samp><samp class="s2">b</samp><samp class="s2">g</samp><samp class="s2">-</samp><samp class="s2">g</samp><samp class="s2">r</samp><samp class="s2">e</samp><samp class="s2">e</samp><samp class="s2">n</samp><samp class="s2">-</samp><samp class="s2">2</samp><samp class="s2">0</samp><samp class="s2">0</samp><samp class="p">&quot;</samp><samp class="w"> </samp><samp class="na">phx-click</samp><samp class="p">=</samp><samp class="p">&quot;</samp><samp class="s2">close</samp><samp class="p">&quot;</samp><samp class="p">&gt;</samp><samp class="n">You&#39;ve got mail!</samp><samp class="p">&lt;/</samp><samp class="nt">span</samp><samp class="p">&gt;</samp></code></pre><p>Note that the function component did not have to explicitly declare a <code class="inline">class</code> or <code class="inline">phx-click</code>
attribute in order to render.</p><p>Global attributes can define defaults which are merged with attributes provided by the caller.
For example, you may declare a default <code class="inline">class</code> if the caller does not provide one:</p><pre><code class="makeup elixir" translate="no"><samp class="n">attr</samp><samp class="w"> </samp><samp class="ss">:rest</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:global</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">default</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="5080504821-1">%{</samp><samp class="ss">class</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;bg-blue-200&quot;</samp><samp class="p" data-group-id="5080504821-1">}</samp></code></pre><p>Now you can call the function component without a <code class="inline">class</code> attribute:</p><pre><code class="makeup heex" translate="no"><samp class="p">&lt;</samp><samp class="nf">.notification</samp><samp class="w"> </samp><samp class="na">message</samp><samp class="p">=</samp><samp class="p">&quot;</samp><samp class="s2">You&#39;ve got mail!</samp><samp class="p">&quot;</samp><samp class="w"> </samp><samp class="na">phx-click</samp><samp class="p">=</samp><samp class="p">&quot;</samp><samp class="s2">close</samp><samp class="p">&quot;</samp><samp class="w"> </samp><samp class="p">/&gt;</samp></code></pre><p>Rendering the following HTML:</p><pre><code class="makeup html" translate="no"><samp class="p">&lt;</samp><samp class="nt">span</samp><samp class="w"> </samp><samp class="na">class</samp><samp class="p">=</samp><samp class="p">&quot;</samp><samp class="s2">b</samp><samp class="s2">g</samp><samp class="s2">-</samp><samp class="s2">b</samp><samp class="s2">l</samp><samp class="s2">u</samp><samp class="s2">e</samp><samp class="s2">-</samp><samp class="s2">2</samp><samp class="s2">0</samp><samp class="s2">0</samp><samp class="p">&quot;</samp><samp class="w"> </samp><samp class="na">phx-click</samp><samp class="p">=</samp><samp class="p">&quot;</samp><samp class="s2">close</samp><samp class="p">&quot;</samp><samp class="p">&gt;</samp><samp class="n">You&#39;ve got mail!</samp><samp class="p">&lt;/</samp><samp class="nt">span</samp><samp class="p">&gt;</samp></code></pre><p>Note that the global attribute cannot be provided directly and doing so will emit
a warning. In other words, this is invalid:</p><pre><code class="makeup heex" translate="no"><samp class="p">&lt;</samp><samp class="nf">.notification</samp><samp class="w"> </samp><samp class="na">message</samp><samp class="p">=</samp><samp class="p">&quot;</samp><samp class="s2">You&#39;ve got mail!</samp><samp class="p">&quot;</samp><samp class="w"> </samp><samp class="na">rest</samp><samp class="p">=</samp><samp class="p" data-group-id="7590223917-1">{</samp><samp class="p" data-group-id="7590223917-ex-1">%{</samp><samp class="s">&quot;phx-click&quot;</samp><samp class="w"> </samp><samp class="p">=&gt;</samp><samp class="w"> </samp><samp class="s">&quot;close&quot;</samp><samp class="p" data-group-id="7590223917-ex-1">}</samp><samp class="p" data-group-id="7590223917-1">}</samp><samp class="w"> </samp><samp class="p">/&gt;</samp></code></pre><h3 id="module-included-globals">Included globals</h3><p>You may also specify which attributes are included in addition to the known globals
with the <code class="inline">:include</code> option. For example to support the <code class="inline">form</code> attribute on a button
component:</p><pre><code class="makeup elixir" translate="no"><samp class="c1"># &lt;.button form=&quot;my-form&quot;/&gt;</samp><samp class="w">
</samp><samp class="n">attr</samp><samp class="w"> </samp><samp class="ss">:rest</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:global</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">include</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="sx">~w(form)</samp><samp class="w">
</samp><samp class="n">slot</samp><samp class="w"> </samp><samp class="ss">:inner_block</samp><samp class="w">
</samp><samp class="kd">def</samp><samp class="w"> </samp><samp class="nf">button</samp><samp class="p" data-group-id="7735332658-1">(</samp><samp class="n">assigns</samp><samp class="p" data-group-id="7735332658-1">)</samp><samp class="w"> </samp><samp class="k" data-group-id="7735332658-2">do</samp><samp class="w">
  </samp><samp class="sx">~H&quot;&quot;&quot;</samp><samp class="w">
</samp><samp class="w">  </samp><samp class="p">&lt;</samp><samp class="nt">button</samp><samp class="w"> </samp><samp class="p" data-group-id="8912679437-1">{</samp><samp class="na">@rest</samp><samp class="p" data-group-id="8912679437-1">}</samp><samp class="p">&gt;</samp><samp class="p" data-group-id="8912679437-2">{</samp><samp class="n">render_slot</samp><samp class="p" data-group-id="7735332658-3">(</samp><samp class="na">@inner_block</samp><samp class="p" data-group-id="7735332658-3">)</samp><samp class="p" data-group-id="8912679437-2">}</samp><samp class="p">&lt;/</samp><samp class="nt">button</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="w">  </samp><samp class="sx">&quot;&quot;&quot;</samp><samp class="w">
</samp><samp class="k" data-group-id="7735332658-2">end</samp></code></pre><p>The <code class="inline">:include</code> option is useful to apply global additions on a case-by-case basis,
but sometimes you want to extend existing components with new global attributes,
such as Alpine.js' <code class="inline">x-</code> prefixes, which we'll outline next.</p><h3 id="module-custom-global-attribute-prefixes">Custom global attribute prefixes</h3><p>You can extend the set of global attributes by providing a list of attribute prefixes to
<code class="inline">use Phoenix.Component</code>. Like the default attributes common to all HTML elements,
any number of attributes that start with a global prefix will be accepted by function
components invoked by the current module. By default, the following prefixes are supported:
<code class="inline">phx-</code>, <code class="inline">aria-</code>, and <code class="inline">data-</code>. For example, to support the <code class="inline">x-</code> prefix used by
<a href="https://alpinejs.dev/">Alpine.js</a>, you can pass the <code class="inline">:global_prefixes</code> option to
<code class="inline">use Phoenix.Component</code>:</p><pre><code class="makeup elixir" translate="no"><samp class="kn">use</samp><samp class="w"> </samp><samp class="nc">Phoenix.Component</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">global_prefixes</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="sx">~w(x-)</samp></code></pre><p>In your Phoenix application, this is typically done in your
<code class="inline">lib/my_app_web.ex</code> file, inside the <code class="inline">def html</code> definition:</p><pre><code class="makeup elixir" translate="no"><samp class="kd">def</samp><samp class="w"> </samp><samp class="nf">html</samp><samp class="w"> </samp><samp class="k" data-group-id="7403801159-1">do</samp><samp class="w">
  </samp><samp class="k">quote</samp><samp class="w"> </samp><samp class="k" data-group-id="7403801159-2">do</samp><samp class="w">
    </samp><samp class="kn">use</samp><samp class="w"> </samp><samp class="nc">Phoenix.Component</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">global_prefixes</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="sx">~w(x-)</samp><samp class="w">
    </samp><samp class="c1"># ...</samp><samp class="w">
  </samp><samp class="k" data-group-id="7403801159-2">end</samp><samp class="w">
</samp><samp class="k" data-group-id="7403801159-1">end</samp></code></pre><p>Now all function components invoked by this module will accept any number of attributes
prefixed with <code class="inline">x-</code>, in addition to the default global prefixes.</p><p>You can learn more about attributes by reading the documentation for <a href="#attr/3"><code class="inline">attr/3</code></a>.</p><h2 id="module-slots">Slots</h2><p>In addition to attributes, function components can accept blocks of HEEx content, referred to
as slots. Slots enable further customization of the rendered HTML, as the caller can pass the
function component HEEx content they want the component to render. <a href="Phoenix.Component.xhtml"><code class="inline">Phoenix.Component</code></a> provides
the <a href="#slot/3"><code class="inline">slot/3</code></a> macro used to declare slots for function components:</p><pre><code class="makeup elixir" translate="no"><samp class="n">slot</samp><samp class="w"> </samp><samp class="ss">:inner_block</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">required</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">true</samp><samp class="w">

</samp><samp class="kd">def</samp><samp class="w"> </samp><samp class="nf">button</samp><samp class="p" data-group-id="7618599224-1">(</samp><samp class="n">assigns</samp><samp class="p" data-group-id="7618599224-1">)</samp><samp class="w"> </samp><samp class="k" data-group-id="7618599224-2">do</samp><samp class="w">
  </samp><samp class="sx">~H&quot;&quot;&quot;</samp><samp class="w">
</samp><samp class="w">  </samp><samp class="p">&lt;</samp><samp class="nt">button</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="w">    </samp><samp class="p" data-group-id="6386074797-1">{</samp><samp class="n">render_slot</samp><samp class="p" data-group-id="7618599224-3">(</samp><samp class="na">@inner_block</samp><samp class="p" data-group-id="7618599224-3">)</samp><samp class="p" data-group-id="6386074797-1">}</samp><samp class="w">
</samp><samp class="w">  </samp><samp class="p">&lt;/</samp><samp class="nt">button</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="w">  </samp><samp class="sx">&quot;&quot;&quot;</samp><samp class="w">
</samp><samp class="k" data-group-id="7618599224-2">end</samp></code></pre><p>The expression <code class="inline">render_slot(@inner_block)</code> renders the HEEx content. You can invoke this function
component like so:</p><pre><code class="makeup heex" translate="no"><samp class="p">&lt;</samp><samp class="nf">.button</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="n">  This renders </samp><samp class="p">&lt;</samp><samp class="nt">strong</samp><samp class="p">&gt;</samp><samp class="n">inside</samp><samp class="p">&lt;/</samp><samp class="nt">strong</samp><samp class="p">&gt;</samp><samp class="n"> the button!
</samp><samp class="p">&lt;/</samp><samp class="nf">.button</samp><samp class="p">&gt;</samp></code></pre><p>Which renders the following HTML:</p><pre><code class="makeup html" translate="no"><samp class="p">&lt;</samp><samp class="nt">button</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="n">  This renders </samp><samp class="p">&lt;</samp><samp class="nt">strong</samp><samp class="p">&gt;</samp><samp class="n">inside</samp><samp class="p">&lt;/</samp><samp class="nt">strong</samp><samp class="p">&gt;</samp><samp class="n"> the button!
</samp><samp class="p">&lt;/</samp><samp class="nt">button</samp><samp class="p">&gt;</samp></code></pre><p>Like the <a href="#attr/3"><code class="inline">attr/3</code></a> macro, using the <a href="#slot/3"><code class="inline">slot/3</code></a> macro will provide compile-time validations.
For example, invoking <code class="inline">button/1</code> without a slot of HEEx content will result in a compilation
warning being emitted:</p><pre><code class="makeup heex" translate="no"><samp class="p">&lt;</samp><samp class="nf">.button</samp><samp class="w"> </samp><samp class="p">/&gt;</samp><samp class="w">
</samp><samp class="w">  </samp><samp class="cm">&lt;!--</samp><samp class="cm"> warning: missing required slot &quot;inner_block&quot; for component MyAppWeb.MyComponent.button/1
</samp><samp class="cm">           lib/app_web/my_component.ex:15 </samp><samp class="cm">--&gt;</samp></code></pre><h3 id="module-the-default-slot">The default slot</h3><p>The example above uses the default slot, accessible as an assign named <code class="inline">@inner_block</code>, to render
HEEx content via the <a href="#render_slot/1"><code class="inline">render_slot/1</code></a> function.</p><p>If the values rendered in the slot need to be dynamic, you can pass a second value back to the
HEEx content by calling <a href="#render_slot/2"><code class="inline">render_slot/2</code></a>:</p><pre><code class="makeup elixir" translate="no"><samp class="n">slot</samp><samp class="w"> </samp><samp class="ss">:inner_block</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">required</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">true</samp><samp class="w">

</samp><samp class="n">attr</samp><samp class="w"> </samp><samp class="ss">:entries</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:list</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">default</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="7626596428-1">[</samp><samp class="p" data-group-id="7626596428-1">]</samp><samp class="w">

</samp><samp class="kd">def</samp><samp class="w"> </samp><samp class="nf">unordered_list</samp><samp class="p" data-group-id="7626596428-2">(</samp><samp class="n">assigns</samp><samp class="p" data-group-id="7626596428-2">)</samp><samp class="w"> </samp><samp class="k" data-group-id="7626596428-3">do</samp><samp class="w">
  </samp><samp class="sx">~H&quot;&quot;&quot;</samp><samp class="w">
</samp><samp class="w">  </samp><samp class="p">&lt;</samp><samp class="nt">ul</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="w">    </samp><samp class="p">&lt;</samp><samp class="nt">li</samp><samp class="w"> </samp><samp class="na">:for</samp><samp class="p">=</samp><samp class="p" data-group-id="6349764867-1">{</samp><samp class="n">entry</samp><samp class="w"> </samp><samp class="o">&lt;-</samp><samp class="w"> </samp><samp class="na">@entries</samp><samp class="p" data-group-id="6349764867-1">}</samp><samp class="p">&gt;</samp><samp class="p" data-group-id="6349764867-2">{</samp><samp class="n">render_slot</samp><samp class="p" data-group-id="7626596428-4">(</samp><samp class="na">@inner_block</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">entry</samp><samp class="p" data-group-id="7626596428-4">)</samp><samp class="p" data-group-id="6349764867-2">}</samp><samp class="p">&lt;/</samp><samp class="nt">li</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="w">  </samp><samp class="p">&lt;/</samp><samp class="nt">ul</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="w">  </samp><samp class="sx">&quot;&quot;&quot;</samp><samp class="w">
</samp><samp class="k" data-group-id="7626596428-3">end</samp></code></pre><p>When invoking the function component, you can use the special attribute <code class="inline">:let</code> to take the value
that the function component passes back and bind it to a variable:</p><pre><code class="makeup heex" translate="no"><samp class="p">&lt;</samp><samp class="nf">.unordered_list</samp><samp class="w"> </samp><samp class="na">:let</samp><samp class="p">=</samp><samp class="p" data-group-id="6616648245-1">{</samp><samp class="n">fruit</samp><samp class="p" data-group-id="6616648245-1">}</samp><samp class="w"> </samp><samp class="na">entries</samp><samp class="p">=</samp><samp class="p" data-group-id="6616648245-2">{</samp><samp class="sx">~w(apples bananas cherries)</samp><samp class="p" data-group-id="6616648245-2">}</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="n">  I like </samp><samp class="p">&lt;</samp><samp class="nt">b</samp><samp class="p">&gt;</samp><samp class="p" data-group-id="6616648245-3">{</samp><samp class="n">fruit</samp><samp class="p" data-group-id="6616648245-3">}</samp><samp class="p">&lt;/</samp><samp class="nt">b</samp><samp class="p">&gt;</samp><samp class="n">!
</samp><samp class="p">&lt;/</samp><samp class="nf">.unordered_list</samp><samp class="p">&gt;</samp></code></pre><p>Rendering the following HTML:</p><pre><code class="makeup html" translate="no"><samp class="p">&lt;</samp><samp class="nt">ul</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="w">  </samp><samp class="p">&lt;</samp><samp class="nt">li</samp><samp class="p">&gt;</samp><samp class="n">I like </samp><samp class="p">&lt;</samp><samp class="nt">b</samp><samp class="p">&gt;</samp><samp class="n">apples</samp><samp class="p">&lt;/</samp><samp class="nt">b</samp><samp class="p">&gt;</samp><samp class="n">!</samp><samp class="p">&lt;/</samp><samp class="nt">li</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="w">  </samp><samp class="p">&lt;</samp><samp class="nt">li</samp><samp class="p">&gt;</samp><samp class="n">I like </samp><samp class="p">&lt;</samp><samp class="nt">b</samp><samp class="p">&gt;</samp><samp class="n">bananas</samp><samp class="p">&lt;/</samp><samp class="nt">b</samp><samp class="p">&gt;</samp><samp class="n">!</samp><samp class="p">&lt;/</samp><samp class="nt">li</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="w">  </samp><samp class="p">&lt;</samp><samp class="nt">li</samp><samp class="p">&gt;</samp><samp class="n">I like </samp><samp class="p">&lt;</samp><samp class="nt">b</samp><samp class="p">&gt;</samp><samp class="n">cherries</samp><samp class="p">&lt;/</samp><samp class="nt">b</samp><samp class="p">&gt;</samp><samp class="n">!</samp><samp class="p">&lt;/</samp><samp class="nt">li</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="p">&lt;/</samp><samp class="nt">ul</samp><samp class="p">&gt;</samp></code></pre><p>Now the separation of concerns is maintained: the caller can specify multiple values in a list
attribute without having to specify the HEEx content that surrounds and separates them.</p><h3 id="module-named-slots">Named slots</h3><p>In addition to the default slot, function components can accept multiple, named slots of HEEx
content. For example, imagine you want to create a modal that has a header, body, and footer:</p><pre><code class="makeup elixir" translate="no"><samp class="n">slot</samp><samp class="w"> </samp><samp class="ss">:header</samp><samp class="w">
</samp><samp class="n">slot</samp><samp class="w"> </samp><samp class="ss">:inner_block</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">required</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">true</samp><samp class="w">
</samp><samp class="n">slot</samp><samp class="w"> </samp><samp class="ss">:footer</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">required</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">true</samp><samp class="w">

</samp><samp class="kd">def</samp><samp class="w"> </samp><samp class="nf">modal</samp><samp class="p" data-group-id="6290971434-1">(</samp><samp class="n">assigns</samp><samp class="p" data-group-id="6290971434-1">)</samp><samp class="w"> </samp><samp class="k" data-group-id="6290971434-2">do</samp><samp class="w">
  </samp><samp class="sx">~H&quot;&quot;&quot;</samp><samp class="w">
</samp><samp class="w">  </samp><samp class="p">&lt;</samp><samp class="nt">div</samp><samp class="w"> </samp><samp class="na">class</samp><samp class="p">=</samp><samp class="p">&quot;</samp><samp class="s2">m</samp><samp class="s2">o</samp><samp class="s2">d</samp><samp class="s2">a</samp><samp class="s2">l</samp><samp class="p">&quot;</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="w">    </samp><samp class="p">&lt;</samp><samp class="nt">div</samp><samp class="w"> </samp><samp class="na">class</samp><samp class="p">=</samp><samp class="p">&quot;</samp><samp class="s2">m</samp><samp class="s2">o</samp><samp class="s2">d</samp><samp class="s2">a</samp><samp class="s2">l</samp><samp class="s2">-</samp><samp class="s2">h</samp><samp class="s2">e</samp><samp class="s2">a</samp><samp class="s2">d</samp><samp class="s2">e</samp><samp class="s2">r</samp><samp class="p">&quot;</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="w">      </samp><samp class="p" data-group-id="1573224205-1">{</samp><samp class="n">render_slot</samp><samp class="p" data-group-id="6290971434-3">(</samp><samp class="na">@header</samp><samp class="p" data-group-id="6290971434-3">)</samp><samp class="w"> </samp><samp class="o">||</samp><samp class="w"> </samp><samp class="s">&quot;Modal&quot;</samp><samp class="p" data-group-id="1573224205-1">}</samp><samp class="w">
</samp><samp class="w">    </samp><samp class="p">&lt;/</samp><samp class="nt">div</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="w">    </samp><samp class="p">&lt;</samp><samp class="nt">div</samp><samp class="w"> </samp><samp class="na">class</samp><samp class="p">=</samp><samp class="p">&quot;</samp><samp class="s2">m</samp><samp class="s2">o</samp><samp class="s2">d</samp><samp class="s2">a</samp><samp class="s2">l</samp><samp class="s2">-</samp><samp class="s2">b</samp><samp class="s2">o</samp><samp class="s2">d</samp><samp class="s2">y</samp><samp class="p">&quot;</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="w">      </samp><samp class="p" data-group-id="1573224205-2">{</samp><samp class="n">render_slot</samp><samp class="p" data-group-id="6290971434-4">(</samp><samp class="na">@inner_block</samp><samp class="p" data-group-id="6290971434-4">)</samp><samp class="p" data-group-id="1573224205-2">}</samp><samp class="w">
</samp><samp class="w">    </samp><samp class="p">&lt;/</samp><samp class="nt">div</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="w">    </samp><samp class="p">&lt;</samp><samp class="nt">div</samp><samp class="w"> </samp><samp class="na">class</samp><samp class="p">=</samp><samp class="p">&quot;</samp><samp class="s2">m</samp><samp class="s2">o</samp><samp class="s2">d</samp><samp class="s2">a</samp><samp class="s2">l</samp><samp class="s2">-</samp><samp class="s2">f</samp><samp class="s2">o</samp><samp class="s2">o</samp><samp class="s2">t</samp><samp class="s2">e</samp><samp class="s2">r</samp><samp class="p">&quot;</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="w">      </samp><samp class="p" data-group-id="1573224205-3">{</samp><samp class="n">render_slot</samp><samp class="p" data-group-id="6290971434-5">(</samp><samp class="na">@footer</samp><samp class="p" data-group-id="6290971434-5">)</samp><samp class="p" data-group-id="1573224205-3">}</samp><samp class="w">
</samp><samp class="w">    </samp><samp class="p">&lt;/</samp><samp class="nt">div</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="w">  </samp><samp class="p">&lt;/</samp><samp class="nt">div</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="w">  </samp><samp class="sx">&quot;&quot;&quot;</samp><samp class="w">
</samp><samp class="k" data-group-id="6290971434-2">end</samp></code></pre><p>You can invoke this function component using the named slot HEEx syntax:</p><pre><code class="makeup heex" translate="no"><samp class="p">&lt;</samp><samp class="nf">.modal</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="n">  This is the body, everything not in a named slot is rendered in the default slot.
</samp><samp class="w">  </samp><samp class="p">&lt;</samp><samp class="ss">:footer</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="n">    This is the bottom of the modal.
</samp><samp class="w">  </samp><samp class="p">&lt;/</samp><samp class="ss">:footer</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="p">&lt;/</samp><samp class="nf">.modal</samp><samp class="p">&gt;</samp></code></pre><p>Rendering the following HTML:</p><pre><code class="makeup html" translate="no"><samp class="p">&lt;</samp><samp class="nt">div</samp><samp class="w"> </samp><samp class="na">class</samp><samp class="p">=</samp><samp class="p">&quot;</samp><samp class="s2">m</samp><samp class="s2">o</samp><samp class="s2">d</samp><samp class="s2">a</samp><samp class="s2">l</samp><samp class="p">&quot;</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="w">  </samp><samp class="p">&lt;</samp><samp class="nt">div</samp><samp class="w"> </samp><samp class="na">class</samp><samp class="p">=</samp><samp class="p">&quot;</samp><samp class="s2">m</samp><samp class="s2">o</samp><samp class="s2">d</samp><samp class="s2">a</samp><samp class="s2">l</samp><samp class="s2">-</samp><samp class="s2">h</samp><samp class="s2">e</samp><samp class="s2">a</samp><samp class="s2">d</samp><samp class="s2">e</samp><samp class="s2">r</samp><samp class="p">&quot;</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="n">    Modal.
</samp><samp class="w">  </samp><samp class="p">&lt;/</samp><samp class="nt">div</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="w">  </samp><samp class="p">&lt;</samp><samp class="nt">div</samp><samp class="w"> </samp><samp class="na">class</samp><samp class="p">=</samp><samp class="p">&quot;</samp><samp class="s2">m</samp><samp class="s2">o</samp><samp class="s2">d</samp><samp class="s2">a</samp><samp class="s2">l</samp><samp class="s2">-</samp><samp class="s2">b</samp><samp class="s2">o</samp><samp class="s2">d</samp><samp class="s2">y</samp><samp class="p">&quot;</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="n">    This is the body, everything not in a named slot is rendered in the default slot.
</samp><samp class="w">  </samp><samp class="p">&lt;/</samp><samp class="nt">div</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="w">  </samp><samp class="p">&lt;</samp><samp class="nt">div</samp><samp class="w"> </samp><samp class="na">class</samp><samp class="p">=</samp><samp class="p">&quot;</samp><samp class="s2">m</samp><samp class="s2">o</samp><samp class="s2">d</samp><samp class="s2">a</samp><samp class="s2">l</samp><samp class="s2">-</samp><samp class="s2">f</samp><samp class="s2">o</samp><samp class="s2">o</samp><samp class="s2">t</samp><samp class="s2">e</samp><samp class="s2">r</samp><samp class="p">&quot;</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="n">    This is the bottom of the modal.
</samp><samp class="w">  </samp><samp class="p">&lt;/</samp><samp class="nt">div</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="p">&lt;/</samp><samp class="nt">div</samp><samp class="p">&gt;</samp></code></pre><p>As shown in the example above, <a href="#render_slot/1"><code class="inline">render_slot/1</code></a> returns <code class="inline">nil</code> when an optional slot
is declared and none is given. This can be used to attach default behaviour.</p><h3 id="module-slot-attributes">Slot attributes</h3><p>Unlike the default slot, it is possible to pass a named slot multiple pieces of HEEx content.
Named slots can also accept attributes, defined by passing a block to the <a href="#slot/3"><code class="inline">slot/3</code></a> macro.
If multiple pieces of content are passed, <a href="#render_slot/2"><code class="inline">render_slot/2</code></a> will merge and render all the values.</p><p>Below is a table component illustrating multiple named slots with attributes:</p><pre><code class="makeup elixir" translate="no"><samp class="n">slot</samp><samp class="w"> </samp><samp class="ss">:column</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">doc</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;Columns with column labels&quot;</samp><samp class="w"> </samp><samp class="k" data-group-id="2243434668-1">do</samp><samp class="w">
  </samp><samp class="n">attr</samp><samp class="w"> </samp><samp class="ss">:label</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:string</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">required</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">true</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">doc</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;Column label&quot;</samp><samp class="w">
</samp><samp class="k" data-group-id="2243434668-1">end</samp><samp class="w">

</samp><samp class="n">attr</samp><samp class="w"> </samp><samp class="ss">:rows</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:list</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">default</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="2243434668-2">[</samp><samp class="p" data-group-id="2243434668-2">]</samp><samp class="w">

</samp><samp class="kd">def</samp><samp class="w"> </samp><samp class="nf">table</samp><samp class="p" data-group-id="2243434668-3">(</samp><samp class="n">assigns</samp><samp class="p" data-group-id="2243434668-3">)</samp><samp class="w"> </samp><samp class="k" data-group-id="2243434668-4">do</samp><samp class="w">
  </samp><samp class="sx">~H&quot;&quot;&quot;</samp><samp class="w">
</samp><samp class="w">  </samp><samp class="p">&lt;</samp><samp class="nt">table</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="w">    </samp><samp class="p">&lt;</samp><samp class="nt">tr</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="w">      </samp><samp class="p">&lt;</samp><samp class="nt">th</samp><samp class="w"> </samp><samp class="na">:for</samp><samp class="p">=</samp><samp class="p" data-group-id="1052346426-1">{</samp><samp class="n">col</samp><samp class="w"> </samp><samp class="o">&lt;-</samp><samp class="w"> </samp><samp class="na">@column</samp><samp class="p" data-group-id="1052346426-1">}</samp><samp class="p">&gt;</samp><samp class="p" data-group-id="1052346426-2">{</samp><samp class="n">col</samp><samp class="o">.</samp><samp class="n">label</samp><samp class="p" data-group-id="1052346426-2">}</samp><samp class="p">&lt;/</samp><samp class="nt">th</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="w">    </samp><samp class="p">&lt;/</samp><samp class="nt">tr</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="w">    </samp><samp class="p">&lt;</samp><samp class="nt">tr</samp><samp class="w"> </samp><samp class="na">:for</samp><samp class="p">=</samp><samp class="p" data-group-id="1052346426-3">{</samp><samp class="n">row</samp><samp class="w"> </samp><samp class="o">&lt;-</samp><samp class="w"> </samp><samp class="na">@rows</samp><samp class="p" data-group-id="1052346426-3">}</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="w">      </samp><samp class="p">&lt;</samp><samp class="nt">td</samp><samp class="w"> </samp><samp class="na">:for</samp><samp class="p">=</samp><samp class="p" data-group-id="1052346426-4">{</samp><samp class="n">col</samp><samp class="w"> </samp><samp class="o">&lt;-</samp><samp class="w"> </samp><samp class="na">@column</samp><samp class="p" data-group-id="1052346426-4">}</samp><samp class="p">&gt;</samp><samp class="p" data-group-id="1052346426-5">{</samp><samp class="n">render_slot</samp><samp class="p" data-group-id="2243434668-5">(</samp><samp class="n">col</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">row</samp><samp class="p" data-group-id="2243434668-5">)</samp><samp class="p" data-group-id="1052346426-5">}</samp><samp class="p">&lt;/</samp><samp class="nt">td</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="w">    </samp><samp class="p">&lt;/</samp><samp class="nt">tr</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="w">  </samp><samp class="p">&lt;/</samp><samp class="nt">table</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="w">  </samp><samp class="sx">&quot;&quot;&quot;</samp><samp class="w">
</samp><samp class="k" data-group-id="2243434668-4">end</samp></code></pre><p>You can invoke this function component like so:</p><pre><code class="makeup heex" translate="no"><samp class="p">&lt;</samp><samp class="nf">.table</samp><samp class="w"> </samp><samp class="na">rows</samp><samp class="p">=</samp><samp class="p" data-group-id="9908110501-1">{</samp><samp class="p" data-group-id="9908110501-ex-1">[</samp><samp class="p" data-group-id="9908110501-ex-2">%{</samp><samp class="ss">name</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;Jane&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">age</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;34&quot;</samp><samp class="p" data-group-id="9908110501-ex-2">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="9908110501-ex-3">%{</samp><samp class="ss">name</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;Bob&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">age</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;51&quot;</samp><samp class="p" data-group-id="9908110501-ex-3">}</samp><samp class="p" data-group-id="9908110501-ex-1">]</samp><samp class="p" data-group-id="9908110501-1">}</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="w">  </samp><samp class="p">&lt;</samp><samp class="ss">:column</samp><samp class="w"> </samp><samp class="na">:let</samp><samp class="p">=</samp><samp class="p" data-group-id="9908110501-2">{</samp><samp class="n">user</samp><samp class="p" data-group-id="9908110501-2">}</samp><samp class="w"> </samp><samp class="na">label</samp><samp class="p">=</samp><samp class="p">&quot;</samp><samp class="s2">Name</samp><samp class="p">&quot;</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="w">    </samp><samp class="p" data-group-id="9908110501-3">{</samp><samp class="n">user</samp><samp class="o">.</samp><samp class="n">name</samp><samp class="p" data-group-id="9908110501-3">}</samp><samp class="w">
</samp><samp class="w">  </samp><samp class="p">&lt;/</samp><samp class="ss">:column</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="w">  </samp><samp class="p">&lt;</samp><samp class="ss">:column</samp><samp class="w"> </samp><samp class="na">:let</samp><samp class="p">=</samp><samp class="p" data-group-id="9908110501-4">{</samp><samp class="n">user</samp><samp class="p" data-group-id="9908110501-4">}</samp><samp class="w"> </samp><samp class="na">label</samp><samp class="p">=</samp><samp class="p">&quot;</samp><samp class="s2">Age</samp><samp class="p">&quot;</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="w">    </samp><samp class="p" data-group-id="9908110501-5">{</samp><samp class="n">user</samp><samp class="o">.</samp><samp class="n">age</samp><samp class="p" data-group-id="9908110501-5">}</samp><samp class="w">
</samp><samp class="w">  </samp><samp class="p">&lt;/</samp><samp class="ss">:column</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="p">&lt;/</samp><samp class="nf">.table</samp><samp class="p">&gt;</samp></code></pre><p>Rendering the following HTML:</p><pre><code class="makeup html" translate="no"><samp class="p">&lt;</samp><samp class="nt">table</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="w">  </samp><samp class="p">&lt;</samp><samp class="nt">tr</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="w">    </samp><samp class="p">&lt;</samp><samp class="nt">th</samp><samp class="p">&gt;</samp><samp class="n">Name</samp><samp class="p">&lt;/</samp><samp class="nt">th</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="w">    </samp><samp class="p">&lt;</samp><samp class="nt">th</samp><samp class="p">&gt;</samp><samp class="n">Age</samp><samp class="p">&lt;/</samp><samp class="nt">th</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="w">  </samp><samp class="p">&lt;/</samp><samp class="nt">tr</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="w">  </samp><samp class="p">&lt;</samp><samp class="nt">tr</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="w">    </samp><samp class="p">&lt;</samp><samp class="nt">td</samp><samp class="p">&gt;</samp><samp class="n">Jane</samp><samp class="p">&lt;/</samp><samp class="nt">td</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="w">    </samp><samp class="p">&lt;</samp><samp class="nt">td</samp><samp class="p">&gt;</samp><samp class="n">34</samp><samp class="p">&lt;/</samp><samp class="nt">td</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="w">  </samp><samp class="p">&lt;/</samp><samp class="nt">tr</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="w">  </samp><samp class="p">&lt;</samp><samp class="nt">tr</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="w">    </samp><samp class="p">&lt;</samp><samp class="nt">td</samp><samp class="p">&gt;</samp><samp class="n">Bob</samp><samp class="p">&lt;/</samp><samp class="nt">td</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="w">    </samp><samp class="p">&lt;</samp><samp class="nt">td</samp><samp class="p">&gt;</samp><samp class="n">51</samp><samp class="p">&lt;/</samp><samp class="nt">td</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="w">  </samp><samp class="p">&lt;/</samp><samp class="nt">tr</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="p">&lt;/</samp><samp class="nt">table</samp><samp class="p">&gt;</samp></code></pre><p>You can learn more about slots and the <a href="#slot/3"><code class="inline">slot/3</code></a> macro <a href="#slot/3">in its documentation</a>.</p><h2 id="module-embedding-external-template-files">Embedding external template files</h2><p>The <a href="#embed_templates/1"><code class="inline">embed_templates/1</code></a> macro can be used to embed <code class="inline">.html.heex</code> files
as function components. The directory path is based on the current
module (<code class="inline">__DIR__</code>), and a wildcard pattern may be used to select all
files within a directory tree. For example, imagine a directory listing:</p><pre><code class="plain">├── components.ex
├── cards
│   ├── pricing_card.html.heex
│   └── features_card.html.heex</code></pre><p>Then you can embed the page templates in your <code class="inline">components.ex</code> module
and call them like any other function component:</p><pre><code class="makeup elixir" translate="no"><samp class="kd">defmodule</samp><samp class="w"> </samp><samp class="nc">MyAppWeb.Components</samp><samp class="w"> </samp><samp class="k" data-group-id="9837855927-1">do</samp><samp class="w">
  </samp><samp class="kn">use</samp><samp class="w"> </samp><samp class="nc">Phoenix.Component</samp><samp class="w">

  </samp><samp class="n">embed_templates</samp><samp class="w"> </samp><samp class="s">&quot;cards/*&quot;</samp><samp class="w">

  </samp><samp class="kd">def</samp><samp class="w"> </samp><samp class="nf">landing_hero</samp><samp class="p" data-group-id="9837855927-2">(</samp><samp class="n">assigns</samp><samp class="p" data-group-id="9837855927-2">)</samp><samp class="w"> </samp><samp class="k" data-group-id="9837855927-3">do</samp><samp class="w">
    </samp><samp class="sx">~H&quot;&quot;&quot;</samp><samp class="w">
</samp><samp class="w">    </samp><samp class="p">&lt;</samp><samp class="nf">.pricing_card</samp><samp class="w"> </samp><samp class="p">/&gt;</samp><samp class="w">
</samp><samp class="w">    </samp><samp class="p">&lt;</samp><samp class="nf">.features_card</samp><samp class="w"> </samp><samp class="p">/&gt;</samp><samp class="w">
</samp><samp class="w">    </samp><samp class="sx">&quot;&quot;&quot;</samp><samp class="w">
  </samp><samp class="k" data-group-id="9837855927-3">end</samp><samp class="w">
</samp><samp class="k" data-group-id="9837855927-1">end</samp></code></pre><p>See <a href="#embed_templates/1"><code class="inline">embed_templates/1</code></a> for more information, including declarative
assigns support for embedded templates.</p><h2 id="module-debug-information">Debug information</h2><p>HEEx templates support adding annotations and locations to the rendered
page, which are special HTML comments and attributes that help you identify
where markup in your HTML document is rendered within your function component
tree.</p><p>For example, imagine the following HEEx template:</p><pre><code class="makeup heex" translate="no"><samp class="p">&lt;</samp><samp class="nf">.header</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="w">  </samp><samp class="p">&lt;</samp><samp class="nf">.button</samp><samp class="p">&gt;</samp><samp class="n">Click</samp><samp class="p">&lt;/</samp><samp class="nf">.button</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="p">&lt;/</samp><samp class="nf">.header</samp><samp class="p">&gt;</samp></code></pre><p>By turning on <code class="inline">debug_heex_annotations</code>, the HTML document would receive the
following comments when debug annotations are enabled:</p><pre><code class="makeup html" translate="no"><samp class="cm">&lt;!--</samp><samp class="cm"> @caller lib/app_web/home_live.ex:20 </samp><samp class="cm">--&gt;</samp><samp class="w">
</samp><samp class="cm">&lt;!--</samp><samp class="cm"> &lt;AppWeb.CoreComponents.header&gt; lib/app_web/core_components.ex:123 </samp><samp class="cm">--&gt;</samp><samp class="w">
</samp><samp class="p">&lt;</samp><samp class="nt">header</samp><samp class="w"> </samp><samp class="na">class</samp><samp class="p">=</samp><samp class="p">&quot;</samp><samp class="s2">p</samp><samp class="s2">-</samp><samp class="s2">5</samp><samp class="p">&quot;</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="w">  </samp><samp class="cm">&lt;!--</samp><samp class="cm"> @caller lib/app_web/home_live.ex:48 </samp><samp class="cm">--&gt;</samp><samp class="w">
</samp><samp class="w">  </samp><samp class="cm">&lt;!--</samp><samp class="cm"> &lt;AppWeb.CoreComponents.button&gt; lib/app_web/core_components.ex:456 </samp><samp class="cm">--&gt;</samp><samp class="w">
</samp><samp class="w">  </samp><samp class="p">&lt;</samp><samp class="nt">button</samp><samp class="w"> </samp><samp class="na">class</samp><samp class="p">=</samp><samp class="p">&quot;</samp><samp class="s2">p</samp><samp class="s2">x</samp><samp class="s2">-</samp><samp class="s2">2 </samp><samp class="s2">b</samp><samp class="s2">g</samp><samp class="s2">-</samp><samp class="s2">i</samp><samp class="s2">n</samp><samp class="s2">d</samp><samp class="s2">i</samp><samp class="s2">g</samp><samp class="s2">o</samp><samp class="s2">-</samp><samp class="s2">5</samp><samp class="s2">0</samp><samp class="s2">0 </samp><samp class="s2">t</samp><samp class="s2">e</samp><samp class="s2">x</samp><samp class="s2">t</samp><samp class="s2">-</samp><samp class="s2">w</samp><samp class="s2">h</samp><samp class="s2">i</samp><samp class="s2">t</samp><samp class="s2">e</samp><samp class="p">&quot;</samp><samp class="p">&gt;</samp><samp class="n">Click</samp><samp class="p">&lt;/</samp><samp class="nt">button</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="w">  </samp><samp class="cm">&lt;!--</samp><samp class="cm"> &lt;/AppWeb.CoreComponents.button&gt; </samp><samp class="cm">--&gt;</samp><samp class="w">
</samp><samp class="p">&lt;/</samp><samp class="nt">header</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="cm">&lt;!--</samp><samp class="cm"> &lt;/AppWeb.CoreComponents.header&gt; </samp><samp class="cm">--&gt;</samp></code></pre><p>Similarly, you can also turn on <code class="inline">:debug_attributes</code>, which adds a
<code class="inline">data-phx-loc</code> attribute with the line of where each HTML tag is defined
(as well as <code class="inline">data-phx-pid</code> to the LiveView container):</p><pre><code class="makeup html" translate="no"><samp class="p">&lt;</samp><samp class="nt">header</samp><samp class="w"> </samp><samp class="na">data-phx-loc</samp><samp class="p">=</samp><samp class="p">&quot;</samp><samp class="s2">125</samp><samp class="p">&quot;</samp><samp class="w"> </samp><samp class="na">class</samp><samp class="p">=</samp><samp class="p">&quot;</samp><samp class="s2">p</samp><samp class="s2">-</samp><samp class="s2">5</samp><samp class="p">&quot;</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="w">  </samp><samp class="p">&lt;</samp><samp class="nt">button</samp><samp class="w"> </samp><samp class="na">data-phx-loc</samp><samp class="p">=</samp><samp class="p">&quot;</samp><samp class="s2">458</samp><samp class="p">&quot;</samp><samp class="w"> </samp><samp class="na">class</samp><samp class="p">=</samp><samp class="p">&quot;</samp><samp class="s2">p</samp><samp class="s2">x</samp><samp class="s2">-</samp><samp class="s2">2 </samp><samp class="s2">b</samp><samp class="s2">g</samp><samp class="s2">-</samp><samp class="s2">i</samp><samp class="s2">n</samp><samp class="s2">d</samp><samp class="s2">i</samp><samp class="s2">g</samp><samp class="s2">o</samp><samp class="s2">-</samp><samp class="s2">5</samp><samp class="s2">0</samp><samp class="s2">0 </samp><samp class="s2">t</samp><samp class="s2">e</samp><samp class="s2">x</samp><samp class="s2">t</samp><samp class="s2">-</samp><samp class="s2">w</samp><samp class="s2">h</samp><samp class="s2">i</samp><samp class="s2">t</samp><samp class="s2">e</samp><samp class="p">&quot;</samp><samp class="p">&gt;</samp><samp class="n">Click</samp><samp class="p">&lt;/</samp><samp class="nt">button</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="p">&lt;/</samp><samp class="nt">header</samp><samp class="p">&gt;</samp></code></pre><p>These features work on any <code class="inline">~H</code> or <code class="inline">.html.heex</code> template. They can be enabled
globally with the following configuration in your <code class="inline">config/dev.exs</code> file:</p><pre><code class="makeup elixir" translate="no"><samp class="n">config</samp><samp class="w"> </samp><samp class="ss">:phoenix_live_view</samp><samp class="p">,</samp><samp class="w">
  </samp><samp class="ss">debug_heex_annotations</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">true</samp><samp class="p">,</samp><samp class="w">
  </samp><samp class="ss">debug_attributes</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">true</samp></code></pre><p>Changing this configuration will require <a href="https://hexdocs.pm/mix/Mix.Tasks.Clean.html"><code class="inline">mix clean</code></a> and a full recompile.</p><h2 id="module-dynamic-component-rendering">Dynamic Component Rendering</h2><p>Sometimes you might need to decide at runtime which component to render.
Because function components are just regular functions, we can leverage
Elixir's <a href="https://hexdocs.pm/elixir/Kernel.html#apply/3"><code class="inline">apply/3</code></a> function to dynamically call a module and/or function passed
in as an assign.</p><p>For example, using the following function component definition:</p><pre><code class="makeup elixir" translate="no"><samp class="n">attr</samp><samp class="w"> </samp><samp class="ss">:module</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:atom</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">required</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">true</samp><samp class="w">
</samp><samp class="n">attr</samp><samp class="w"> </samp><samp class="ss">:function</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:atom</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">required</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">true</samp><samp class="w">
</samp><samp class="c1"># any shared attributes</samp><samp class="w">
</samp><samp class="n">attr</samp><samp class="w"> </samp><samp class="ss">:shared</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:string</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">required</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">true</samp><samp class="w">

</samp><samp class="c1"># any shared slots</samp><samp class="w">
</samp><samp class="n">slot</samp><samp class="w"> </samp><samp class="ss">:named_slot</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">required</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">true</samp><samp class="w">
</samp><samp class="n">slot</samp><samp class="w"> </samp><samp class="ss">:inner_block</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">required</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">true</samp><samp class="w">

</samp><samp class="kd">def</samp><samp class="w"> </samp><samp class="nf">dynamic_component</samp><samp class="p" data-group-id="4367297733-1">(</samp><samp class="n">assigns</samp><samp class="p" data-group-id="4367297733-1">)</samp><samp class="w"> </samp><samp class="k" data-group-id="4367297733-2">do</samp><samp class="w">
  </samp><samp class="p" data-group-id="4367297733-3">{</samp><samp class="n">mod</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">assigns</samp><samp class="p" data-group-id="4367297733-3">}</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="nc">Map</samp><samp class="o">.</samp><samp class="n">pop</samp><samp class="p" data-group-id="4367297733-4">(</samp><samp class="n">assigns</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:module</samp><samp class="p" data-group-id="4367297733-4">)</samp><samp class="w">
  </samp><samp class="p" data-group-id="4367297733-5">{</samp><samp class="n">func</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">assigns</samp><samp class="p" data-group-id="4367297733-5">}</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="nc">Map</samp><samp class="o">.</samp><samp class="n">pop</samp><samp class="p" data-group-id="4367297733-6">(</samp><samp class="n">assigns</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:function</samp><samp class="p" data-group-id="4367297733-6">)</samp><samp class="w">

  </samp><samp class="n">apply</samp><samp class="p" data-group-id="4367297733-7">(</samp><samp class="n">mod</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">func</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="4367297733-8">[</samp><samp class="n">assigns</samp><samp class="p" data-group-id="4367297733-8">]</samp><samp class="p" data-group-id="4367297733-7">)</samp><samp class="w">
</samp><samp class="k" data-group-id="4367297733-2">end</samp></code></pre><p>Then you can use the <code class="inline">dynamic_component</code> function like so:</p><pre><code class="makeup heex" translate="no"><samp class="p">&lt;</samp><samp class="nf">.dynamic_component</samp><samp class="w">
</samp><samp class="w">  </samp><samp class="na">module</samp><samp class="p">=</samp><samp class="p" data-group-id="9071167219-1">{</samp><samp class="nc">MyAppWeb.MyModule</samp><samp class="p" data-group-id="9071167219-1">}</samp><samp class="w">
</samp><samp class="w">  </samp><samp class="na">function</samp><samp class="p">=</samp><samp class="p" data-group-id="9071167219-2">{</samp><samp class="ss">:my_function</samp><samp class="p" data-group-id="9071167219-2">}</samp><samp class="w">
</samp><samp class="w">  </samp><samp class="na">shared</samp><samp class="p">=</samp><samp class="p">&quot;</samp><samp class="s2">Yay Elixir!</samp><samp class="p">&quot;</samp><samp class="w">
</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="w">  </samp><samp class="p">&lt;</samp><samp class="nt">p</samp><samp class="p">&gt;</samp><samp class="n">Howdy from the inner block!</samp><samp class="p">&lt;/</samp><samp class="nt">p</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="w">  </samp><samp class="p">&lt;</samp><samp class="ss">:named_slot</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="w">    </samp><samp class="p">&lt;</samp><samp class="nt">p</samp><samp class="p">&gt;</samp><samp class="n">Howdy from the named slot!</samp><samp class="p">&lt;/</samp><samp class="nt">p</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="w">  </samp><samp class="p">&lt;/</samp><samp class="ss">:named_slot</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="p">&lt;/</samp><samp class="nf">.dynamic_component</samp><samp class="p">&gt;</samp></code></pre><p>This will call the <code class="inline">MyAppWeb.MyModule.my_function/1</code> function passing in the remaining assigns.</p><pre><code class="makeup elixir" translate="no"><samp class="kd">defmodule</samp><samp class="w"> </samp><samp class="nc">MyAppWeb.MyModule</samp><samp class="w"> </samp><samp class="k" data-group-id="8336180757-1">do</samp><samp class="w">
  </samp><samp class="n">attr</samp><samp class="w"> </samp><samp class="ss">:shared</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:string</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">required</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">true</samp><samp class="w">

  </samp><samp class="n">slot</samp><samp class="w"> </samp><samp class="ss">:named_slot</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">required</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">true</samp><samp class="w">
  </samp><samp class="n">slot</samp><samp class="w"> </samp><samp class="ss">:inner_block</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">required</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">true</samp><samp class="w">

  </samp><samp class="kd">def</samp><samp class="w"> </samp><samp class="nf">my_function</samp><samp class="p" data-group-id="8336180757-2">(</samp><samp class="n">assigns</samp><samp class="p" data-group-id="8336180757-2">)</samp><samp class="w"> </samp><samp class="k" data-group-id="8336180757-3">do</samp><samp class="w">
    </samp><samp class="sx">~H&quot;&quot;&quot;</samp><samp class="w">
</samp><samp class="w">    </samp><samp class="p">&lt;</samp><samp class="nt">p</samp><samp class="p">&gt;</samp><samp class="n">Dynamic component with shared assigns: </samp><samp class="p" data-group-id="8948276697-1">{</samp><samp class="na">@shared</samp><samp class="p" data-group-id="8948276697-1">}</samp><samp class="p">&lt;/</samp><samp class="nt">p</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="w">    </samp><samp class="p" data-group-id="8948276697-2">{</samp><samp class="n">render_slot</samp><samp class="p" data-group-id="8336180757-4">(</samp><samp class="na">@inner_block</samp><samp class="p" data-group-id="8336180757-4">)</samp><samp class="p" data-group-id="8948276697-2">}</samp><samp class="w">
</samp><samp class="w">    </samp><samp class="p" data-group-id="8948276697-3">{</samp><samp class="n">render_slot</samp><samp class="p" data-group-id="8336180757-5">(</samp><samp class="na">@named_slot</samp><samp class="p" data-group-id="8336180757-5">)</samp><samp class="p" data-group-id="8948276697-3">}</samp><samp class="w">
</samp><samp class="w">    </samp><samp class="sx">&quot;&quot;&quot;</samp><samp class="w">
  </samp><samp class="k" data-group-id="8336180757-3">end</samp><samp class="w">
</samp><samp class="k" data-group-id="8336180757-1">end</samp></code></pre><p>Resulting in the following HTML:</p><pre><code class="makeup html" translate="no"><samp class="p">&lt;</samp><samp class="nt">p</samp><samp class="p">&gt;</samp><samp class="n">Dynamic component with shared assigns: Yay Elixir!</samp><samp class="p">&lt;/</samp><samp class="nt">p</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="p">&lt;</samp><samp class="nt">p</samp><samp class="p">&gt;</samp><samp class="n">Howdy from the inner block!</samp><samp class="p">&lt;/</samp><samp class="nt">p</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="p">&lt;</samp><samp class="nt">p</samp><samp class="p">&gt;</samp><samp class="n">Howdy from the named slot!</samp><samp class="p">&lt;/</samp><samp class="nt">p</samp><samp class="p">&gt;</samp></code></pre><p>Note that to get the most out of <a href="Phoenix.Component.xhtml"><code class="inline">Phoenix.Component</code></a>'s compile-time validations, it is beneficial to
define such a <code class="inline">dynamic_component</code> for a specific set of components sharing the same API, instead of
defining it for the general case.
In this example, we defined our <code class="inline">dynamic_component</code> to expect an assign called <code class="inline">shared</code>, as well as
two slots that all components we want to use with it must implement.
The called <code class="inline">my_function</code> component's attribute and slot definitions cannot be validated through the apply call.</p>
      </section>


      <section id="summary" class="details-list">
        <h1 class="section-heading">Summary</h1>
<div class="summary-components summary">
  <h2>
    <a href="#components">Components</a>
  </h2>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#async_result/1" data-no-tooltip="" translate="no">async_result(assigns)</a>

      </div>

        <div class="summary-synopsis"><p>Renders a <a><code class="inline">Phoenix.LiveView.AsyncResult</code></a> struct (e.g. from <a><code class="inline">Phoenix.LiveView.assign_async/4</code></a>)
with slots for the different loading states.
The result state takes precedence over subsequent loading and failed
states.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#dynamic_tag/1" data-no-tooltip="" translate="no">dynamic_tag(assigns)</a>

      </div>

        <div class="summary-synopsis"><p>Generates a dynamically named HTML tag.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#focus_wrap/1" data-no-tooltip="" translate="no">focus_wrap(assigns)</a>

      </div>

        <div class="summary-synopsis"><p>Wraps tab focus around a container for accessibility.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#form/1" data-no-tooltip="" translate="no">form(assigns)</a>

      </div>

        <div class="summary-synopsis"><p>Renders a form.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#inputs_for/1" data-no-tooltip="" translate="no">inputs_for(assigns)</a>

      </div>

        <div class="summary-synopsis"><p>Renders nested form inputs for associations or embeds.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#intersperse/1" data-no-tooltip="" translate="no">intersperse(assigns)</a>

      </div>

        <div class="summary-synopsis"><p>Intersperses separator slot between an enumerable.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#link/1" data-no-tooltip="" translate="no">link(assigns)</a>

      </div>

        <div class="summary-synopsis"><p>Generates a link to a given route.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#live_component/1" data-no-tooltip="" translate="no">live_component(assigns)</a>

      </div>

        <div class="summary-synopsis"><p>A function component for rendering <a><code class="inline">Phoenix.LiveComponent</code></a> within a parent LiveView.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#live_file_input/1" data-no-tooltip="" translate="no">live_file_input(assigns)</a>

      </div>

        <div class="summary-synopsis"><p>Builds a file input tag for a LiveView upload.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#live_img_preview/1" data-no-tooltip="" translate="no">live_img_preview(assigns)</a>

      </div>

        <div class="summary-synopsis"><p>Generates an image preview on the client for a selected file.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#live_title/1" data-no-tooltip="" translate="no">live_title(assigns)</a>

      </div>

        <div class="summary-synopsis"><p>Renders a title with automatic prefix/suffix on <code class="inline">@page_title</code> updates.</p></div>

    </div>

</div>
<div class="summary-macros summary">
  <h2>
    <a href="#macros">Macros</a>
  </h2>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#attr/3" data-no-tooltip="" translate="no">attr(name, type, opts \\ [])</a>

      </div>

        <div class="summary-synopsis"><p>Declares attributes for a HEEx function components.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#embed_templates/2" data-no-tooltip="" translate="no">embed_templates(pattern, opts \\ [])</a>

      </div>

        <div class="summary-synopsis"><p>Embeds external template files into the module as function components.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#sigil_H/2" data-no-tooltip="" translate="no">sigil_H(arg, modifiers)</a>

      </div>

        <div class="summary-synopsis"><p>The <code class="inline">~H</code> sigil for writing HEEx templates inside source files.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#slot/2" data-no-tooltip="" translate="no">slot(name, opts \\ [])</a>

      </div>

        <div class="summary-synopsis"><p>Declares a slot. See <a><code class="inline">slot/3</code></a> for more information.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#slot/3" data-no-tooltip="" translate="no">slot(name, opts, block)</a>

      </div>

        <div class="summary-synopsis"><p>Declares a function component slot.</p></div>

    </div>

</div>
<div class="summary-functions summary">
  <h2>
    <a href="#functions">Functions</a>
  </h2>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#assign/2" data-no-tooltip="" translate="no">assign(socket_or_assigns, keyword_or_map)</a>

      </div>

        <div class="summary-synopsis"><p>Adds key-value pairs to assigns.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#assign/3" data-no-tooltip="" translate="no">assign(socket_or_assigns, key, value)</a>

      </div>

        <div class="summary-synopsis"><p>Adds a <code class="inline">key</code>-<code class="inline">value</code> pair to <code class="inline">socket_or_assigns</code>.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#assign_new/3" data-no-tooltip="" translate="no">assign_new(socket_or_assigns, key, fun)</a>

      </div>

        <div class="summary-synopsis"><p>Assigns the given <code class="inline">key</code> with value from <code class="inline">fun</code> into <code class="inline">socket_or_assigns</code> if one does not yet exist.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#assigns_to_attributes/2" data-no-tooltip="" translate="no">assigns_to_attributes(assigns, exclude \\ [])</a>

      </div>

        <div class="summary-synopsis"><p>Filters the assigns as a list of keywords for use in dynamic tag attributes.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#changed?/2" data-no-tooltip="" translate="no">changed?(socket_or_assigns, key)</a>

      </div>

        <div class="summary-synopsis"><p>Checks if the given key changed in <code class="inline">socket_or_assigns</code>.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#live_flash/2" data-no-tooltip="" translate="no">live_flash(other, key)</a>

          <span class="deprecated" title="Use Phoenix.Flash.get/2 in Phoenix v1.7+">deprecated</span>

      </div>

        <div class="summary-synopsis"><p>Returns the flash message from the LiveView flash assign.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#live_render/3" data-no-tooltip="" translate="no">live_render(conn_or_socket, view, opts \\ [])</a>

      </div>

        <div class="summary-synopsis"><p>Renders a LiveView within a template.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#portal/1" data-no-tooltip="" translate="no">portal(assigns)</a>

      </div>

        <div class="summary-synopsis"><p>Renders a portal.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#render_slot/2" data-no-tooltip="" translate="no">render_slot(slot, argument \\ nil)</a>

      </div>

        <div class="summary-synopsis"><p>Renders a slot entry with the given optional <code class="inline">argument</code>.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#to_form/2" data-no-tooltip="" translate="no">to_form(data_or_params, options \\ [])</a>

      </div>

        <div class="summary-synopsis"><p>Converts a given data structure to a <a><code class="inline">Phoenix.HTML.Form</code></a>.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#update/3" data-no-tooltip="" translate="no">update(socket_or_assigns, key, fun)</a>

      </div>

        <div class="summary-synopsis"><p>Updates an existing <code class="inline">key</code> with <code class="inline">fun</code> in the given <code class="inline">socket_or_assigns</code>.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#upload_errors/1" data-no-tooltip="" translate="no">upload_errors(conf)</a>

      </div>

        <div class="summary-synopsis"><p>Returns errors for the upload as a whole.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#upload_errors/2" data-no-tooltip="" translate="no">upload_errors(conf, entry)</a>

      </div>

        <div class="summary-synopsis"><p>Returns errors for the upload entry.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#used_input?/1" data-no-tooltip="" translate="no">used_input?(form_field)</a>

      </div>

        <div class="summary-synopsis"><p>Checks if the input field was used by the client.</p></div>

    </div>

</div>

      </section>


      <section id="components" class="details-list">
        <h1 class="section-heading">Components</h1>
        <div class="components-list">
<section class="detail" id="async_result/1">

  <div class="detail-header">
    <a href="#async_result/1" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">async_result(assigns)</h1>


        <a href="https://github.com/phoenixframework/phoenix_live_view/blob/v1.1.2/lib/phoenix_component.ex#L3497" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

<p>Renders a <a href="Phoenix.LiveView.AsyncResult.xhtml"><code class="inline">Phoenix.LiveView.AsyncResult</code></a> struct (e.g. from <a href="Phoenix.LiveView.xhtml#assign_async/4"><code class="inline">Phoenix.LiveView.assign_async/4</code></a>)
with slots for the different loading states.
The result state takes precedence over subsequent loading and failed
states.</p><section role="note" class="admonition info"><h4 class="admonition-title info">Note</h4><p>The inner block receives the result of the async assign as a <code class="inline">:let</code>.
The let is only accessible to the inner block and is not in scope to the
other slots.</p></section><h2 id="async_result/1-examples" class="section-heading"><a href="#async_result/1-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="kd">def</samp><samp class="w"> </samp><samp class="nf">mount</samp><samp class="p" data-group-id="2655263406-1">(</samp><samp class="p" data-group-id="2655263406-2">%{</samp><samp class="s">&quot;slug&quot;</samp><samp class="w"> </samp><samp class="p">=&gt;</samp><samp class="w"> </samp><samp class="n">slug</samp><samp class="p" data-group-id="2655263406-2">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="bp">_</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">socket</samp><samp class="p" data-group-id="2655263406-1">)</samp><samp class="w"> </samp><samp class="k" data-group-id="2655263406-3">do</samp><samp class="w">
  </samp><samp class="p" data-group-id="2655263406-4">{</samp><samp class="ss">:ok</samp><samp class="p">,</samp><samp class="w">
    </samp><samp class="n">socket</samp><samp class="w">
    </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="n">assign_async</samp><samp class="p" data-group-id="2655263406-5">(</samp><samp class="ss">:org</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="k" data-group-id="2655263406-6">fn</samp><samp class="w"> </samp><samp class="o">-&gt;</samp><samp class="w"> </samp><samp class="p" data-group-id="2655263406-7">{</samp><samp class="ss">:ok</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="2655263406-8">%{</samp><samp class="ss">org</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="n">fetch_org!</samp><samp class="p" data-group-id="2655263406-9">(</samp><samp class="n">slug</samp><samp class="p" data-group-id="2655263406-9">)</samp><samp class="p" data-group-id="2655263406-8">}</samp><samp class="p" data-group-id="2655263406-7">}</samp><samp class="w"> </samp><samp class="k" data-group-id="2655263406-6">end</samp><samp class="p" data-group-id="2655263406-5">)</samp><samp class="p" data-group-id="2655263406-4">}</samp><samp class="w">
</samp><samp class="k" data-group-id="2655263406-3">end</samp></code></pre><pre><code class="makeup heex" translate="no"><samp class="p">&lt;</samp><samp class="nf">.async_result</samp><samp class="w"> </samp><samp class="na">:let</samp><samp class="p">=</samp><samp class="p" data-group-id="8817051170-1">{</samp><samp class="n">org</samp><samp class="p" data-group-id="8817051170-1">}</samp><samp class="w"> </samp><samp class="na">assign</samp><samp class="p">=</samp><samp class="p" data-group-id="8817051170-2">{</samp><samp class="na">@org</samp><samp class="p" data-group-id="8817051170-2">}</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="w">  </samp><samp class="p">&lt;</samp><samp class="ss">:loading</samp><samp class="p">&gt;</samp><samp class="n">Loading organization...</samp><samp class="p">&lt;/</samp><samp class="ss">:loading</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="w">  </samp><samp class="p">&lt;</samp><samp class="ss">:failed</samp><samp class="w"> </samp><samp class="na">:let</samp><samp class="p">=</samp><samp class="p" data-group-id="8817051170-3">{</samp><samp class="c">_failure</samp><samp class="p" data-group-id="8817051170-3">}</samp><samp class="p">&gt;</samp><samp class="n">there was an error loading the organization</samp><samp class="p">&lt;/</samp><samp class="ss">:failed</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="w">  </samp><samp class="p" data-group-id="8817051170-4">&lt;%=</samp><samp class="w"> </samp><samp class="k">if</samp><samp class="w"> </samp><samp class="n">org</samp><samp class="w"> </samp><samp class="k" data-group-id="8817051170-ex-1">do</samp><samp class="w"> </samp><samp class="p" data-group-id="8817051170-4">%&gt;</samp><samp class="w">
</samp><samp class="w">    </samp><samp class="p" data-group-id="8817051170-5">{</samp><samp class="n">org</samp><samp class="o">.</samp><samp class="n">name</samp><samp class="p" data-group-id="8817051170-5">}</samp><samp class="w">
</samp><samp class="w">  </samp><samp class="p" data-group-id="8817051170-6">&lt;%</samp><samp class="w"> </samp><samp class="k" data-group-id="8817051170-ex-1">else</samp><samp class="w"> </samp><samp class="p" data-group-id="8817051170-6">%&gt;</samp><samp class="w">
</samp><samp class="n">    You don&#39;t have an organization yet.
</samp><samp class="w">  </samp><samp class="p" data-group-id="8817051170-7">&lt;%</samp><samp class="w"> </samp><samp class="k" data-group-id="8817051170-ex-1">end</samp><samp class="w"> </samp><samp class="p" data-group-id="8817051170-7">%&gt;</samp><samp class="w">
</samp><samp class="p">&lt;/</samp><samp class="nf">.async_result</samp><samp class="p">&gt;</samp></code></pre><p>See <a href="Phoenix.LiveView.xhtml#module-async-operations">Async Operations</a> for more information.</p><p>To display loading and failed states again on subsequent <code class="inline">assign_async</code> calls,
reset the assign to a result-free <code class="inline">%AsyncResult{}</code>:</p><pre><code class="makeup elixir" translate="no"><samp class="p" data-group-id="2475701593-1">{</samp><samp class="ss">:noreply</samp><samp class="p">,</samp><samp class="w">
  </samp><samp class="n">socket</samp><samp class="w">
  </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="n">assign_async</samp><samp class="p" data-group-id="2475701593-2">(</samp><samp class="ss">:page</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:data</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="o">&amp;</samp><samp class="n">reload_data</samp><samp class="o">/</samp><samp class="mi">0</samp><samp class="p" data-group-id="2475701593-2">)</samp><samp class="w">
  </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="n">assign</samp><samp class="p" data-group-id="2475701593-3">(</samp><samp class="ss">:page</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="nc">AsyncResult</samp><samp class="o">.</samp><samp class="n">loading</samp><samp class="p" data-group-id="2475701593-4">(</samp><samp class="p" data-group-id="2475701593-4">)</samp><samp class="p" data-group-id="2475701593-3">)</samp><samp class="p" data-group-id="2475701593-1">}</samp></code></pre><h2 id="async_result/1-attributes" class="section-heading"><a href="#async_result/1-attributes" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Attributes</span></h2><ul><li><code class="inline">assign</code> (<a href="Phoenix.LiveView.AsyncResult.xhtml"><code class="inline">Phoenix.LiveView.AsyncResult</code></a>) (required)</li></ul><h2 id="async_result/1-slots" class="section-heading"><a href="#async_result/1-slots" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Slots</span></h2><ul><li><code class="inline">loading</code> - rendered while the assign is loading for the first time.</li><li><code class="inline">failed</code> - rendered when an error or exit is caught or assign_async returns <code class="inline">{:error, reason}</code> for the first time. Receives the error as a <code class="inline">:let</code>.</li><li><code class="inline">inner_block</code> - rendered when the assign is loaded successfully via <code class="inline">AsyncResult.ok/2</code>. Receives the result as a <code class="inline">:let</code>.</li></ul>
  </section>
</section>
<section class="detail" id="dynamic_tag/1">

  <div class="detail-header">
    <a href="#dynamic_tag/1" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">dynamic_tag(assigns)</h1>


        <a href="https://github.com/phoenixframework/phoenix_live_view/blob/v1.1.2/lib/phoenix_component.ex#L3214" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

<p>Generates a dynamically named HTML tag.</p><p>Raises an <a href="https://hexdocs.pm/elixir/ArgumentError.html"><code class="inline">ArgumentError</code></a> if the tag name is found to be unsafe HTML.</p><h2 id="dynamic_tag/1-attributes" class="section-heading"><a href="#dynamic_tag/1-attributes" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Attributes</span></h2><ul><li><code class="inline">tag_name</code> (<code class="inline">:string</code>) (required) - The name of the tag, such as <code class="inline">div</code>.</li><li><code class="inline">name</code> (<code class="inline">:string</code>) - Deprecated: use tag_name instead. If tag_name is used, passed to the tag. Otherwise the name of the tag, such as <code class="inline">div</code>.</li><li>Global attributes are accepted. Additional HTML attributes to add to the tag, ensuring proper escaping.</li></ul><h2 id="dynamic_tag/1-slots" class="section-heading"><a href="#dynamic_tag/1-slots" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Slots</span></h2><ul><li><code class="inline">inner_block</code></li></ul><h2 id="dynamic_tag/1-examples" class="section-heading"><a href="#dynamic_tag/1-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup heex" translate="no"><samp class="p">&lt;</samp><samp class="nf">.dynamic_tag</samp><samp class="w"> </samp><samp class="na">tag_name</samp><samp class="p">=</samp><samp class="p">&quot;</samp><samp class="s2">input</samp><samp class="p">&quot;</samp><samp class="w"> </samp><samp class="na">name</samp><samp class="p">=</samp><samp class="p">&quot;</samp><samp class="s2">my-input</samp><samp class="p">&quot;</samp><samp class="w"> </samp><samp class="na">type</samp><samp class="p">=</samp><samp class="p">&quot;</samp><samp class="s2">text</samp><samp class="p">&quot;</samp><samp class="p">/&gt;</samp></code></pre><pre><code class="makeup html" translate="no"><samp class="p">&lt;</samp><samp class="nt">input</samp><samp class="w"> </samp><samp class="na">name</samp><samp class="p">=</samp><samp class="p">&quot;</samp><samp class="s2">my-input</samp><samp class="p">&quot;</samp><samp class="w"> </samp><samp class="na">type</samp><samp class="p">=</samp><samp class="p">&quot;</samp><samp class="s2">text</samp><samp class="p">&quot;</samp><samp class="p">/&gt;</samp></code></pre><pre><code class="makeup heex" translate="no"><samp class="p">&lt;</samp><samp class="nf">.dynamic_tag</samp><samp class="w"> </samp><samp class="na">tag_name</samp><samp class="p">=</samp><samp class="p">&quot;</samp><samp class="s2">p</samp><samp class="p">&quot;</samp><samp class="p">&gt;</samp><samp class="n">content</samp><samp class="p">&lt;/</samp><samp class="nf">.dynamic_tag</samp><samp class="p">&gt;</samp></code></pre><pre><code class="makeup html" translate="no"><samp class="p">&lt;</samp><samp class="nt">p</samp><samp class="p">&gt;</samp><samp class="n">content</samp><samp class="p">&lt;/</samp><samp class="nt">p</samp><samp class="p">&gt;</samp></code></pre>
  </section>
</section>
<section class="detail" id="focus_wrap/1">

  <div class="detail-header">
    <a href="#focus_wrap/1" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">focus_wrap(assigns)</h1>


        <a href="https://github.com/phoenixframework/phoenix_live_view/blob/v1.1.2/lib/phoenix_component.ex#L3162" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

<p>Wraps tab focus around a container for accessibility.</p><p>This is an essential accessibility feature for interfaces such as modals, dialogs, and menus.</p><h2 id="focus_wrap/1-attributes" class="section-heading"><a href="#focus_wrap/1-attributes" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Attributes</span></h2><ul><li><code class="inline">id</code> (<code class="inline">:string</code>) (required) - The DOM identifier of the container tag.</li><li>Global attributes are accepted. Additional HTML attributes to add to the container tag.</li></ul><h2 id="focus_wrap/1-slots" class="section-heading"><a href="#focus_wrap/1-slots" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Slots</span></h2><ul><li><code class="inline">inner_block</code> (required) - The content rendered inside of the container tag.</li></ul><h2 id="focus_wrap/1-examples" class="section-heading"><a href="#focus_wrap/1-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><p>Simply render your inner content within this component and focus will be wrapped around the
container as the user tabs through the containers content:</p><pre><code class="makeup heex" translate="no"><samp class="p">&lt;</samp><samp class="nf">.focus_wrap</samp><samp class="w"> </samp><samp class="na">id</samp><samp class="p">=</samp><samp class="p">&quot;</samp><samp class="s2">m</samp><samp class="s2">y</samp><samp class="s2">-</samp><samp class="s2">m</samp><samp class="s2">o</samp><samp class="s2">d</samp><samp class="s2">a</samp><samp class="s2">l</samp><samp class="p">&quot;</samp><samp class="w"> </samp><samp class="na">class</samp><samp class="p">=</samp><samp class="p">&quot;</samp><samp class="s2">b</samp><samp class="s2">g</samp><samp class="s2">-</samp><samp class="s2">w</samp><samp class="s2">h</samp><samp class="s2">i</samp><samp class="s2">t</samp><samp class="s2">e</samp><samp class="p">&quot;</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="w">  </samp><samp class="p">&lt;</samp><samp class="nt">div</samp><samp class="w"> </samp><samp class="na">id</samp><samp class="p">=</samp><samp class="p">&quot;</samp><samp class="s2">m</samp><samp class="s2">o</samp><samp class="s2">d</samp><samp class="s2">a</samp><samp class="s2">l</samp><samp class="s2">-</samp><samp class="s2">c</samp><samp class="s2">o</samp><samp class="s2">n</samp><samp class="s2">t</samp><samp class="s2">e</samp><samp class="s2">n</samp><samp class="s2">t</samp><samp class="p">&quot;</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="n">    Are you sure?
</samp><samp class="w">    </samp><samp class="p">&lt;</samp><samp class="nt">button</samp><samp class="w"> </samp><samp class="na">phx-click</samp><samp class="p">=</samp><samp class="p">&quot;</samp><samp class="s2">cancel</samp><samp class="p">&quot;</samp><samp class="p">&gt;</samp><samp class="n">Cancel</samp><samp class="p">&lt;/</samp><samp class="nt">button</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="w">    </samp><samp class="p">&lt;</samp><samp class="nt">button</samp><samp class="w"> </samp><samp class="na">phx-click</samp><samp class="p">=</samp><samp class="p">&quot;</samp><samp class="s2">confirm</samp><samp class="p">&quot;</samp><samp class="p">&gt;</samp><samp class="n">OK</samp><samp class="p">&lt;/</samp><samp class="nt">button</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="w">  </samp><samp class="p">&lt;/</samp><samp class="nt">div</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="p">&lt;/</samp><samp class="nf">.focus_wrap</samp><samp class="p">&gt;</samp></code></pre>
  </section>
</section>
<section class="detail" id="form/1">

  <div class="detail-header">
    <a href="#form/1" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">form(assigns)</h1>


        <a href="https://github.com/phoenixframework/phoenix_live_view/blob/v1.1.2/lib/phoenix_component.ex#L2474" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

<p>Renders a form.</p><p>This function receives a <a href="https://hexdocs.pm/phoenix_html/4.2.1/Phoenix.HTML.Form.html"><code class="inline">Phoenix.HTML.Form</code></a> struct, generally created with
<a href="#to_form/2"><code class="inline">to_form/2</code></a>, and generates the relevant form tags. It can be used either
inside LiveView or outside.</p><blockquote><p>To see how forms work in practice, you can run
<code class="inline">mix phx.gen.live Blog Post posts title body:text</code> inside your Phoenix
application, which will setup the necessary database tables and LiveViews
to manage your data.</p></blockquote><h2 id="form/1-examples-inside-liveview" class="section-heading"><a href="#form/1-examples-inside-liveview" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples: inside LiveView</span></h2><p>Inside LiveViews, this function component is typically called with
as <code class="inline">for={@form}</code>, where <code class="inline">@form</code> is the result of the <a href="#to_form/1"><code class="inline">to_form/1</code></a> function.
<a href="#to_form/1"><code class="inline">to_form/1</code></a> expects either a map or an <a href="https://hexdocs.pm/ecto/Ecto.Changeset.html"><code class="inline">Ecto.Changeset</code></a>
as the source of data and normalizes it into <a href="https://hexdocs.pm/phoenix_html/4.2.1/Phoenix.HTML.Form.html"><code class="inline">Phoenix.HTML.Form</code></a> structure.</p><p>For example, you may use the parameters received in a
<a href="Phoenix.LiveView.xhtml#c:handle_event/3"><code class="inline">Phoenix.LiveView.handle_event/3</code></a> callback to create an Ecto changeset
and then use <a href="#to_form/1"><code class="inline">to_form/1</code></a> to convert it to a form. Then, in your templates,
you pass the <code class="inline">@form</code> as argument to <code class="inline">:for</code>:</p><pre><code class="makeup heex" translate="no"><samp class="p">&lt;</samp><samp class="nf">.form</samp><samp class="w">
</samp><samp class="w">  </samp><samp class="na">for</samp><samp class="p">=</samp><samp class="p" data-group-id="0091003558-1">{</samp><samp class="na">@form</samp><samp class="p" data-group-id="0091003558-1">}</samp><samp class="w">
</samp><samp class="w">  </samp><samp class="na">phx-change</samp><samp class="p">=</samp><samp class="p">&quot;</samp><samp class="s2">change_name</samp><samp class="p">&quot;</samp><samp class="w">
</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="w">  </samp><samp class="p">&lt;</samp><samp class="nf">.input</samp><samp class="w"> </samp><samp class="na">field</samp><samp class="p">=</samp><samp class="p" data-group-id="0091003558-2">{</samp><samp class="na">@form</samp><samp class="p" data-group-id="0091003558-ex-1">[</samp><samp class="ss">:email</samp><samp class="p" data-group-id="0091003558-ex-1">]</samp><samp class="p" data-group-id="0091003558-2">}</samp><samp class="w"> </samp><samp class="p">/&gt;</samp><samp class="w">
</samp><samp class="p">&lt;/</samp><samp class="nf">.form</samp><samp class="p">&gt;</samp></code></pre><p>The <code class="inline">.input</code> component is generally defined as part of your own application
and adds all styling necessary:</p><pre><code class="makeup heex" translate="no"><samp class="n">def input(assigns) do
</samp><samp class="n">  ~H&quot;&quot;&quot;
</samp><samp class="w">  </samp><samp class="p">&lt;</samp><samp class="nt">input</samp><samp class="w"> </samp><samp class="na">type</samp><samp class="p">=</samp><samp class="p">&quot;</samp><samp class="s2">text</samp><samp class="p">&quot;</samp><samp class="w"> </samp><samp class="na">name</samp><samp class="p">=</samp><samp class="p" data-group-id="8763836101-1">{</samp><samp class="na">@field</samp><samp class="o">.</samp><samp class="n">name</samp><samp class="p" data-group-id="8763836101-1">}</samp><samp class="w"> </samp><samp class="na">id</samp><samp class="p">=</samp><samp class="p" data-group-id="8763836101-2">{</samp><samp class="na">@field</samp><samp class="o">.</samp><samp class="n">id</samp><samp class="p" data-group-id="8763836101-2">}</samp><samp class="w"> </samp><samp class="na">value</samp><samp class="p">=</samp><samp class="p" data-group-id="8763836101-3">{</samp><samp class="na">@field</samp><samp class="o">.</samp><samp class="n">value</samp><samp class="p" data-group-id="8763836101-3">}</samp><samp class="w"> </samp><samp class="na">class</samp><samp class="p">=</samp><samp class="p">&quot;</samp><samp class="s2">.</samp><samp class="s2">.</samp><samp class="s2">.</samp><samp class="p">&quot;</samp><samp class="w"> </samp><samp class="p">/&gt;</samp><samp class="w">
</samp><samp class="n">  &quot;&quot;&quot;
</samp><samp class="n">end</samp></code></pre><p>A form accepts multiple options. For example, if you are doing file uploads
and you want to capture submissions, you might write instead:</p><pre><code class="makeup heex" translate="no"><samp class="p">&lt;</samp><samp class="nf">.form</samp><samp class="w">
</samp><samp class="w">  </samp><samp class="na">for</samp><samp class="p">=</samp><samp class="p" data-group-id="0696846770-1">{</samp><samp class="na">@form</samp><samp class="p" data-group-id="0696846770-1">}</samp><samp class="w">
</samp><samp class="w">  </samp><samp class="na">multipart</samp><samp class="w">
</samp><samp class="w">  </samp><samp class="na">phx-change</samp><samp class="p">=</samp><samp class="p">&quot;</samp><samp class="s2">change_user</samp><samp class="p">&quot;</samp><samp class="w">
</samp><samp class="w">  </samp><samp class="na">phx-submit</samp><samp class="p">=</samp><samp class="p">&quot;</samp><samp class="s2">save_user</samp><samp class="p">&quot;</samp><samp class="w">
</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="n">  ...
</samp><samp class="w">  </samp><samp class="p">&lt;</samp><samp class="nt">input</samp><samp class="w"> </samp><samp class="na">type</samp><samp class="p">=</samp><samp class="p">&quot;</samp><samp class="s2">submit</samp><samp class="p">&quot;</samp><samp class="w"> </samp><samp class="na">value</samp><samp class="p">=</samp><samp class="p">&quot;</samp><samp class="s2">Save</samp><samp class="p">&quot;</samp><samp class="w"> </samp><samp class="p">/&gt;</samp><samp class="w">
</samp><samp class="p">&lt;/</samp><samp class="nf">.form</samp><samp class="p">&gt;</samp></code></pre><p>Notice how both examples use <code class="inline">phx-change</code>. The LiveView must implement the
<code class="inline">phx-change</code> event and store the input values as they arrive on change.
This is important because, if an unrelated change happens on the page,
LiveView should re-render the inputs with their updated values. Without <code class="inline">phx-change</code>,
the inputs would otherwise be cleared. Alternatively, you can use <code class="inline">phx-update=&quot;ignore&quot;</code>
on the form to discard any updates.</p><h3 id="form/1-using-the-for-attribute" class="section-heading"><a href="#form/1-using-the-for-attribute" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Using the <code class="inline">for</code> attribute</span></h3><p>The <code class="inline">for</code> attribute can also be a map or an Ecto.Changeset. In such cases,
a form will be created on the fly, and you can capture it using <code class="inline">:let</code>:</p><pre><code class="makeup heex" translate="no"><samp class="p">&lt;</samp><samp class="nf">.form</samp><samp class="w">
</samp><samp class="w">  </samp><samp class="na">:let</samp><samp class="p">=</samp><samp class="p" data-group-id="2209845555-1">{</samp><samp class="n">form</samp><samp class="p" data-group-id="2209845555-1">}</samp><samp class="w">
</samp><samp class="w">  </samp><samp class="na">for</samp><samp class="p">=</samp><samp class="p" data-group-id="2209845555-2">{</samp><samp class="na">@changeset</samp><samp class="p" data-group-id="2209845555-2">}</samp><samp class="w">
</samp><samp class="w">  </samp><samp class="na">phx-change</samp><samp class="p">=</samp><samp class="p">&quot;</samp><samp class="s2">change_user</samp><samp class="p">&quot;</samp><samp class="w">
</samp><samp class="p">&gt;</samp></code></pre><p>However, such approach is discouraged in LiveView for two reasons:</p><ul><li><p>LiveView can better optimize your code if you access the form fields
using <code class="inline">@form[:field]</code> rather than through the let-variable <code class="inline">form</code></p></li><li><p>Ecto changesets are meant to be single use. By never storing the changeset
in the assign, you will be less tempted to use it across operations</p></li></ul><h3 id="form/1-a-note-on-errors" class="section-heading"><a href="#form/1-a-note-on-errors" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">A note on <code class="inline">:errors</code></span></h3><p>Even if <code class="inline">changeset.errors</code> is non-empty, errors will not be displayed in a
form if <a href="https://hexdocs.pm/ecto/Ecto.Changeset.html#module-changeset-actions">the changeset
<code class="inline">:action</code></a>
is <code class="inline">nil</code> or <code class="inline">:ignore</code>.</p><p>This is useful for things like validation hints on form fields, e.g. an empty
changeset for a new form. That changeset isn't valid, but we don't want to
show errors until an actual user action has been performed.</p><p>For example, if the user submits and a <code class="inline">Repo.insert/1</code> is called and fails on
changeset validation, the action will be set to <code class="inline">:insert</code> to show that an
insert was attempted, and the presence of that action will cause errors to be
displayed. The same is true for Repo.update/delete.</p><p>Error visibility is handled by providing the action to <a href="#to_form/2"><code class="inline">to_form/2</code></a>, which will
set the underlying changeset action. You can also set the action manually by
directly updating on the <code class="inline">Ecto.Changeset</code> struct field, or by using
<code class="inline">Ecto.Changeset.apply_action/2</code>. Since the action can be arbitrary, you can
set it to <code class="inline">:validate</code> or anything else to avoid giving the impression that a
database operation has actually been attempted.</p><h3 id="form/1-displaying-errors-on-used-and-unused-input-fields" class="section-heading"><a href="#form/1-displaying-errors-on-used-and-unused-input-fields" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Displaying errors on used and unused input fields</span></h3><p>Used inputs are only those inputs that have been focused, interacted with, or
submitted by the client. In most cases, a user shouldn't receive error feedback
for forms they haven't yet interacted with, until they submit the form. Filtering
the errors based on used input fields can be done with <a href="#used_input?/1"><code class="inline">used_input?/1</code></a>.</p><h2 id="form/1-example-outside-liveview-regular-http-requests" class="section-heading"><a href="#form/1-example-outside-liveview-regular-http-requests" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Example: outside LiveView (regular HTTP requests)</span></h2><p>The <code class="inline">form</code> component can still be used to submit forms outside of LiveView.
In such cases, the standard HTML <code class="inline">action</code> attribute MUST be given.
Without said attribute, the <code class="inline">form</code> method and csrf token are discarded.</p><pre><code class="makeup heex" translate="no"><samp class="p">&lt;</samp><samp class="nf">.form</samp><samp class="w"> </samp><samp class="na">:let</samp><samp class="p">=</samp><samp class="p" data-group-id="6751420574-1">{</samp><samp class="n">f</samp><samp class="p" data-group-id="6751420574-1">}</samp><samp class="w"> </samp><samp class="na">for</samp><samp class="p">=</samp><samp class="p" data-group-id="6751420574-2">{</samp><samp class="na">@changeset</samp><samp class="p" data-group-id="6751420574-2">}</samp><samp class="w"> </samp><samp class="na">action</samp><samp class="p">=</samp><samp class="p" data-group-id="6751420574-3">{</samp><samp class="sx">~p&quot;/comments/</samp><samp class="si" data-group-id="6751420574-ex-1">#{</samp><samp class="na">@comment</samp><samp class="si" data-group-id="6751420574-ex-1">}</samp><samp class="sx">&quot;</samp><samp class="p" data-group-id="6751420574-3">}</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="w">  </samp><samp class="p">&lt;</samp><samp class="nf">.input</samp><samp class="w"> </samp><samp class="na">field</samp><samp class="p">=</samp><samp class="p" data-group-id="6751420574-4">{</samp><samp class="n">f</samp><samp class="p" data-group-id="6751420574-ex-2">[</samp><samp class="ss">:body</samp><samp class="p" data-group-id="6751420574-ex-2">]</samp><samp class="p" data-group-id="6751420574-4">}</samp><samp class="w"> </samp><samp class="p">/&gt;</samp><samp class="w">
</samp><samp class="p">&lt;/</samp><samp class="nf">.form</samp><samp class="p">&gt;</samp></code></pre><p>In the example above, we passed a changeset to <code class="inline">for</code> and captured
the value using <code class="inline">:let={f}</code>. This approach is ok outside of LiveViews,
as there are no change tracking optimizations to consider.</p><h3 id="form/1-csrf-protection" class="section-heading"><a href="#form/1-csrf-protection" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">CSRF protection</span></h3><p>CSRF protection is a mechanism to ensure that the user who rendered
the form is the one actually submitting it. This module generates a
CSRF token by default. Your application should check this token on
the server to avoid attackers from making requests on your server on
behalf of other users. Phoenix by default checks this token.</p><p>When posting a form with a host in its address, such as &quot;//host.com/path&quot;
instead of only &quot;/path&quot;, Phoenix will include the host signature in the
token and validate the token only if the accessed host is the same as
the host in the token. This is to avoid tokens from leaking to third
party applications. If this behaviour is problematic, you can generate
a non-host specific token with <a href="https://hexdocs.pm/plug/1.18.1/Plug.CSRFProtection.html#get_csrf_token/0"><code class="inline">Plug.CSRFProtection.get_csrf_token/0</code></a> and
pass it to the form generator via the <code class="inline">:csrf_token</code> option.</p><h2 id="form/1-attributes" class="section-heading"><a href="#form/1-attributes" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Attributes</span></h2><ul><li><p><code class="inline">for</code> (<code class="inline">:any</code>) (required) - An existing form or the form source data.</p></li><li><p><code class="inline">action</code> (<code class="inline">:string</code>) - The action to submit the form on.
This attribute must be given if you intend to submit the form to a URL without LiveView.</p></li><li><p><code class="inline">as</code> (<code class="inline">:atom</code>) - The prefix to be used in names and IDs generated by the form.
For example, setting <code class="inline">as: :user_params</code> means the parameters
will be nested &quot;user_params&quot; in your <code class="inline">handle_event</code> or
<code class="inline">conn.params[&quot;user_params&quot;]</code> for regular HTTP requests.
If you set this option, you must capture the form with <code class="inline">:let</code>.</p></li><li><p><code class="inline">csrf_token</code> (<code class="inline">:any</code>) - A token to authenticate the validity of requests.
One is automatically generated when an action is given and the method is not <code class="inline">get</code>.
When set to <code class="inline">false</code>, no token is generated.</p></li><li><p><code class="inline">errors</code> (<code class="inline">:list</code>) - Use this to manually pass a keyword list of errors to the form.
This option is useful when a regular map is given as the form
source and it will make the errors available under <code class="inline">f.errors</code>.
If you set this option, you must capture the form with <code class="inline">:let</code>.</p></li><li><p><code class="inline">method</code> (<code class="inline">:string</code>) - The HTTP method.
It is only used if an <code class="inline">:action</code> is given. If the method is not <code class="inline">get</code> nor <code class="inline">post</code>,
an input tag with name <code class="inline">_method</code> is generated alongside the form tag.
If an <code class="inline">:action</code> is given with no method, the method will default to the return value
of <a href="https://hexdocs.pm/phoenix_html/4.2.1/Phoenix.HTML.FormData.html#to_form/2"><code class="inline">Phoenix.HTML.FormData.to_form/2</code></a> (usually <code class="inline">post</code>).</p></li><li><p><code class="inline">multipart</code> (<code class="inline">:boolean</code>) - Sets <code class="inline">enctype</code> to <code class="inline">multipart/form-data</code>.
Required when uploading files.</p><p>Defaults to <code class="inline">false</code>.</p></li><li><p>Global attributes are accepted. Additional HTML attributes to add to the form tag. Supports all globals plus: <code class="inline">[&quot;autocomplete&quot;, &quot;name&quot;, &quot;rel&quot;, &quot;enctype&quot;, &quot;novalidate&quot;, &quot;target&quot;]</code>.</p></li></ul><h2 id="form/1-slots" class="section-heading"><a href="#form/1-slots" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Slots</span></h2><ul><li><code class="inline">inner_block</code> (required) - The content rendered inside of the form tag.</li></ul>
  </section>
</section>
<section class="detail" id="inputs_for/1">

  <div class="detail-header">
    <a href="#inputs_for/1" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">inputs_for(assigns)</h1>


        <a href="https://github.com/phoenixframework/phoenix_live_view/blob/v1.1.2/lib/phoenix_component.ex#L2797" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

<p>Renders nested form inputs for associations or embeds.</p><h2 id="inputs_for/1-attributes" class="section-heading"><a href="#inputs_for/1-attributes" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Attributes</span></h2><ul><li><p><code class="inline">field</code> (<a href="https://hexdocs.pm/phoenix_html/4.2.1/Phoenix.HTML.FormField.html"><code class="inline">Phoenix.HTML.FormField</code></a>) (required) - A %Phoenix.HTML.Form{}/field name tuple, for example: {@form[:email]}.</p></li><li><p><code class="inline">id</code> (<code class="inline">:string</code>) - The id base to be used in the form inputs. Defaults to the parent form id. The computed
id will be the concatenation of the base id with the field name, along with a book keeping
index for each input in the list.</p></li><li><p><code class="inline">as</code> (<code class="inline">:atom</code>) - The name to be used in the form, defaults to the concatenation of the given
field to the parent form name.</p></li><li><p><code class="inline">default</code> (<code class="inline">:any</code>) - The value to use if none is available.</p></li><li><p><code class="inline">prepend</code> (<code class="inline">:list</code>) - The values to prepend when rendering. This only applies if the field value
is a list and no parameters were sent through the form.</p></li><li><p><code class="inline">append</code> (<code class="inline">:list</code>) - The values to append when rendering. This only applies if the field value
is a list and no parameters were sent through the form.</p></li><li><p><code class="inline">skip_hidden</code> (<code class="inline">:boolean</code>) - Skip the automatic rendering of hidden fields to allow for more tight control
over the generated markup.</p><p>Defaults to <code class="inline">false</code>.</p></li><li><p><code class="inline">skip_persistent_id</code> (<code class="inline">:boolean</code>) - Skip the automatic rendering of hidden _persistent_id fields used for reordering
inputs.</p><p>Defaults to <code class="inline">false</code>.</p></li><li><p><code class="inline">options</code> (<code class="inline">:list</code>) - Any additional options for the <a href="https://hexdocs.pm/phoenix_html/4.2.1/Phoenix.HTML.FormData.html"><code class="inline">Phoenix.HTML.FormData</code></a> protocol
implementation.</p><p>Defaults to <code class="inline">[]</code>.</p></li></ul><h2 id="inputs_for/1-slots" class="section-heading"><a href="#inputs_for/1-slots" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Slots</span></h2><ul><li><code class="inline">inner_block</code> (required) - The content rendered for each nested form.</li></ul><h2 id="inputs_for/1-examples" class="section-heading"><a href="#inputs_for/1-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup heex" translate="no"><samp class="p">&lt;</samp><samp class="nf">.form</samp><samp class="w">
</samp><samp class="w">  </samp><samp class="na">for</samp><samp class="p">=</samp><samp class="p" data-group-id="8086935578-1">{</samp><samp class="na">@form</samp><samp class="p" data-group-id="8086935578-1">}</samp><samp class="w">
</samp><samp class="w">  </samp><samp class="na">phx-change</samp><samp class="p">=</samp><samp class="p">&quot;</samp><samp class="s2">change_name</samp><samp class="p">&quot;</samp><samp class="w">
</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="w">  </samp><samp class="p">&lt;</samp><samp class="nf">.inputs_for</samp><samp class="w"> </samp><samp class="na">:let</samp><samp class="p">=</samp><samp class="p" data-group-id="8086935578-2">{</samp><samp class="n">f_nested</samp><samp class="p" data-group-id="8086935578-2">}</samp><samp class="w"> </samp><samp class="na">field</samp><samp class="p">=</samp><samp class="p" data-group-id="8086935578-3">{</samp><samp class="na">@form</samp><samp class="p" data-group-id="8086935578-ex-1">[</samp><samp class="ss">:nested</samp><samp class="p" data-group-id="8086935578-ex-1">]</samp><samp class="p" data-group-id="8086935578-3">}</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="w">    </samp><samp class="p">&lt;</samp><samp class="nf">.input</samp><samp class="w"> </samp><samp class="na">type</samp><samp class="p">=</samp><samp class="p">&quot;</samp><samp class="s2">text</samp><samp class="p">&quot;</samp><samp class="w"> </samp><samp class="na">field</samp><samp class="p">=</samp><samp class="p" data-group-id="8086935578-4">{</samp><samp class="n">f_nested</samp><samp class="p" data-group-id="8086935578-ex-2">[</samp><samp class="ss">:name</samp><samp class="p" data-group-id="8086935578-ex-2">]</samp><samp class="p" data-group-id="8086935578-4">}</samp><samp class="w"> </samp><samp class="p">/&gt;</samp><samp class="w">
</samp><samp class="w">  </samp><samp class="p">&lt;/</samp><samp class="nf">.inputs_for</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="p">&lt;/</samp><samp class="nf">.form</samp><samp class="p">&gt;</samp></code></pre><h2 id="inputs_for/1-dynamically-adding-and-removing-inputs" class="section-heading"><a href="#inputs_for/1-dynamically-adding-and-removing-inputs" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Dynamically adding and removing inputs</span></h2><p>Dynamically adding and removing inputs is supported by rendering named buttons for
inserts and removals. Like inputs, buttons with name/value pairs are serialized with
form data on change and submit events. Libraries such as Ecto, or custom param
filtering can then inspect the parameters and handle the added or removed fields.
This can be combined with <code class="inline">Ecto.Changeset.cast_assoc/3</code>'s <code class="inline">:sort_param</code> and <code class="inline">:drop_param</code>
options. For example, imagine a parent with an <code class="inline">:emails</code> <code class="inline">has_many</code> or <code class="inline">embeds_many</code>
association. To cast the user input from a nested form, one simply needs to configure
the options:</p><pre><code class="makeup elixir" translate="no"><samp class="n">schema</samp><samp class="w"> </samp><samp class="s">&quot;mailing_lists&quot;</samp><samp class="w"> </samp><samp class="k" data-group-id="2711488313-1">do</samp><samp class="w">
  </samp><samp class="n">field</samp><samp class="w"> </samp><samp class="ss">:title</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:string</samp><samp class="w">

  </samp><samp class="n">embeds_many</samp><samp class="w"> </samp><samp class="ss">:emails</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="nc">EmailNotification</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">on_replace</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="ss">:delete</samp><samp class="w"> </samp><samp class="k" data-group-id="2711488313-2">do</samp><samp class="w">
    </samp><samp class="n">field</samp><samp class="w"> </samp><samp class="ss">:email</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:string</samp><samp class="w">
    </samp><samp class="n">field</samp><samp class="w"> </samp><samp class="ss">:name</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:string</samp><samp class="w">
  </samp><samp class="k" data-group-id="2711488313-2">end</samp><samp class="w">
</samp><samp class="k" data-group-id="2711488313-1">end</samp><samp class="w">

</samp><samp class="kd">def</samp><samp class="w"> </samp><samp class="nf">changeset</samp><samp class="p" data-group-id="2711488313-3">(</samp><samp class="n">list</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">attrs</samp><samp class="p" data-group-id="2711488313-3">)</samp><samp class="w"> </samp><samp class="k" data-group-id="2711488313-4">do</samp><samp class="w">
  </samp><samp class="n">list</samp><samp class="w">
  </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="n">cast</samp><samp class="p" data-group-id="2711488313-5">(</samp><samp class="n">attrs</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="2711488313-6">[</samp><samp class="ss">:title</samp><samp class="p" data-group-id="2711488313-6">]</samp><samp class="p" data-group-id="2711488313-5">)</samp><samp class="w">
  </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="n">cast_embed</samp><samp class="p" data-group-id="2711488313-7">(</samp><samp class="ss">:emails</samp><samp class="p">,</samp><samp class="w">
    </samp><samp class="ss">with</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="o">&amp;</samp><samp class="n">email_changeset</samp><samp class="o">/</samp><samp class="mi">2</samp><samp class="p">,</samp><samp class="w">
    </samp><samp class="ss">sort_param</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="ss">:emails_sort</samp><samp class="p">,</samp><samp class="w">
    </samp><samp class="ss">drop_param</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="ss">:emails_drop</samp><samp class="w">
  </samp><samp class="p" data-group-id="2711488313-7">)</samp><samp class="w">
</samp><samp class="k" data-group-id="2711488313-4">end</samp></code></pre><p>Here we see the <code class="inline">:sort_param</code> and <code class="inline">:drop_param</code> options in action.</p><blockquote><p>Note: <code class="inline">on_replace: :delete</code> on the <code class="inline">has_many</code> and <code class="inline">embeds_many</code> is required
when using these options.</p></blockquote><p>When Ecto sees the specified sort or drop parameter from the form, it will sort
the children based on the order they appear in the form, add new children it hasn't
seen, or drop children if the parameter instructs it to do so.</p><p>The markup for such a schema and association would look like this:</p><pre><code class="makeup heex" translate="no"><samp class="p">&lt;</samp><samp class="nf">.inputs_for</samp><samp class="w"> </samp><samp class="na">:let</samp><samp class="p">=</samp><samp class="p" data-group-id="1231212039-1">{</samp><samp class="n">ef</samp><samp class="p" data-group-id="1231212039-1">}</samp><samp class="w"> </samp><samp class="na">field</samp><samp class="p">=</samp><samp class="p" data-group-id="1231212039-2">{</samp><samp class="na">@form</samp><samp class="p" data-group-id="1231212039-ex-1">[</samp><samp class="ss">:emails</samp><samp class="p" data-group-id="1231212039-ex-1">]</samp><samp class="p" data-group-id="1231212039-2">}</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="w">  </samp><samp class="p">&lt;</samp><samp class="nt">input</samp><samp class="w"> </samp><samp class="na">type</samp><samp class="p">=</samp><samp class="p">&quot;</samp><samp class="s2">hidden</samp><samp class="p">&quot;</samp><samp class="w"> </samp><samp class="na">name</samp><samp class="p">=</samp><samp class="p">&quot;</samp><samp class="s2">mailing_list[emails_sort][]</samp><samp class="p">&quot;</samp><samp class="w"> </samp><samp class="na">value</samp><samp class="p">=</samp><samp class="p" data-group-id="1231212039-3">{</samp><samp class="n">ef</samp><samp class="o">.</samp><samp class="n">index</samp><samp class="p" data-group-id="1231212039-3">}</samp><samp class="w"> </samp><samp class="p">/&gt;</samp><samp class="w">
</samp><samp class="w">  </samp><samp class="p">&lt;</samp><samp class="nf">.input</samp><samp class="w"> </samp><samp class="na">type</samp><samp class="p">=</samp><samp class="p">&quot;</samp><samp class="s2">text</samp><samp class="p">&quot;</samp><samp class="w"> </samp><samp class="na">field</samp><samp class="p">=</samp><samp class="p" data-group-id="1231212039-4">{</samp><samp class="n">ef</samp><samp class="p" data-group-id="1231212039-ex-2">[</samp><samp class="ss">:email</samp><samp class="p" data-group-id="1231212039-ex-2">]</samp><samp class="p" data-group-id="1231212039-4">}</samp><samp class="w"> </samp><samp class="na">placeholder</samp><samp class="p">=</samp><samp class="p">&quot;</samp><samp class="s2">email</samp><samp class="p">&quot;</samp><samp class="w"> </samp><samp class="p">/&gt;</samp><samp class="w">
</samp><samp class="w">  </samp><samp class="p">&lt;</samp><samp class="nf">.input</samp><samp class="w"> </samp><samp class="na">type</samp><samp class="p">=</samp><samp class="p">&quot;</samp><samp class="s2">text</samp><samp class="p">&quot;</samp><samp class="w"> </samp><samp class="na">field</samp><samp class="p">=</samp><samp class="p" data-group-id="1231212039-5">{</samp><samp class="n">ef</samp><samp class="p" data-group-id="1231212039-ex-3">[</samp><samp class="ss">:name</samp><samp class="p" data-group-id="1231212039-ex-3">]</samp><samp class="p" data-group-id="1231212039-5">}</samp><samp class="w"> </samp><samp class="na">placeholder</samp><samp class="p">=</samp><samp class="p">&quot;</samp><samp class="s2">name</samp><samp class="p">&quot;</samp><samp class="w"> </samp><samp class="p">/&gt;</samp><samp class="w">
</samp><samp class="w">  </samp><samp class="p">&lt;</samp><samp class="nt">button</samp><samp class="w">
</samp><samp class="w">    </samp><samp class="na">type</samp><samp class="p">=</samp><samp class="p">&quot;</samp><samp class="s2">button</samp><samp class="p">&quot;</samp><samp class="w">
</samp><samp class="w">    </samp><samp class="na">name</samp><samp class="p">=</samp><samp class="p">&quot;</samp><samp class="s2">mailing_list[emails_drop][]</samp><samp class="p">&quot;</samp><samp class="w">
</samp><samp class="w">    </samp><samp class="na">value</samp><samp class="p">=</samp><samp class="p" data-group-id="1231212039-6">{</samp><samp class="n">ef</samp><samp class="o">.</samp><samp class="n">index</samp><samp class="p" data-group-id="1231212039-6">}</samp><samp class="w">
</samp><samp class="w">    </samp><samp class="na">phx-click</samp><samp class="p">=</samp><samp class="p" data-group-id="1231212039-7">{</samp><samp class="nc">JS</samp><samp class="o">.</samp><samp class="n">dispatch</samp><samp class="p" data-group-id="1231212039-ex-4">(</samp><samp class="s">&quot;change&quot;</samp><samp class="p" data-group-id="1231212039-ex-4">)</samp><samp class="p" data-group-id="1231212039-7">}</samp><samp class="w">
</samp><samp class="w">  </samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="w">    </samp><samp class="p">&lt;</samp><samp class="nf">.icon</samp><samp class="w"> </samp><samp class="na">name</samp><samp class="p">=</samp><samp class="p">&quot;</samp><samp class="s2">hero-x-mark</samp><samp class="p">&quot;</samp><samp class="w"> </samp><samp class="na">class</samp><samp class="p">=</samp><samp class="p">&quot;</samp><samp class="s2">w</samp><samp class="s2">-</samp><samp class="s2">6 </samp><samp class="s2">h</samp><samp class="s2">-</samp><samp class="s2">6 </samp><samp class="s2">r</samp><samp class="s2">e</samp><samp class="s2">l</samp><samp class="s2">a</samp><samp class="s2">t</samp><samp class="s2">i</samp><samp class="s2">v</samp><samp class="s2">e </samp><samp class="s2">t</samp><samp class="s2">o</samp><samp class="s2">p</samp><samp class="s2">-</samp><samp class="s2">2</samp><samp class="p">&quot;</samp><samp class="w"> </samp><samp class="p">/&gt;</samp><samp class="w">
</samp><samp class="w">  </samp><samp class="p">&lt;/</samp><samp class="nt">button</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="p">&lt;/</samp><samp class="nf">.inputs_for</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="w">
</samp><samp class="p">&lt;</samp><samp class="nt">input</samp><samp class="w"> </samp><samp class="na">type</samp><samp class="p">=</samp><samp class="p">&quot;</samp><samp class="s2">hidden</samp><samp class="p">&quot;</samp><samp class="w"> </samp><samp class="na">name</samp><samp class="p">=</samp><samp class="p">&quot;</samp><samp class="s2">mailing_list[emails_drop][]</samp><samp class="p">&quot;</samp><samp class="w"> </samp><samp class="p">/&gt;</samp><samp class="w">
</samp><samp class="w">
</samp><samp class="p">&lt;</samp><samp class="nt">button</samp><samp class="w"> </samp><samp class="na">type</samp><samp class="p">=</samp><samp class="p">&quot;</samp><samp class="s2">button</samp><samp class="p">&quot;</samp><samp class="w"> </samp><samp class="na">name</samp><samp class="p">=</samp><samp class="p">&quot;</samp><samp class="s2">mailing_list[emails_sort][]</samp><samp class="p">&quot;</samp><samp class="w"> </samp><samp class="na">value</samp><samp class="p">=</samp><samp class="p">&quot;</samp><samp class="s2">new</samp><samp class="p">&quot;</samp><samp class="w"> </samp><samp class="na">phx-click</samp><samp class="p">=</samp><samp class="p" data-group-id="1231212039-8">{</samp><samp class="nc">JS</samp><samp class="o">.</samp><samp class="n">dispatch</samp><samp class="p" data-group-id="1231212039-ex-5">(</samp><samp class="s">&quot;change&quot;</samp><samp class="p" data-group-id="1231212039-ex-5">)</samp><samp class="p" data-group-id="1231212039-8">}</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="n">  add more
</samp><samp class="p">&lt;/</samp><samp class="nt">button</samp><samp class="p">&gt;</samp></code></pre><p>We used <code class="inline">inputs_for</code> to render inputs for the <code class="inline">:emails</code> association, which
contains an email address and name input for each child. Within the nested inputs,
we render a hidden <code class="inline">mailing_list[emails_sort][]</code> input, which is set to the index of the
given child. This tells Ecto's cast operation how to sort existing children, or
where to insert new children. Next, we render the email and name inputs as usual.
Then we render a button containing the &quot;delete&quot; text with the name <code class="inline">mailing_list[emails_drop][]</code>,
containing the index of the child as its value.</p><p>Like before, this tells Ecto to delete the child at this index when the button is
clicked. We use <code class="inline">phx-click={JS.dispatch(&quot;change&quot;)}</code> on the button to tell LiveView
to treat this button click as a change event, rather than a submit event on the form,
which invokes our form's <code class="inline">phx-change</code> binding.</p><p>Outside the <code class="inline">inputs_for</code>, we render an empty <code class="inline">mailing_list[emails_drop][]</code> input,
to ensure that all children are deleted when saving a form where the user
dropped all entries. This hidden input is required whenever dropping associations.</p><p>Finally, we also render another button with the sort param name <code class="inline">mailing_list[emails_sort][]</code>
and <code class="inline">value=&quot;new&quot;</code> name with accompanied &quot;add more&quot; text. Please note that this button must
have <code class="inline">type=&quot;button&quot;</code> to prevent it from submitting the form.
Ecto will treat unknown sort params as new children and build a new child.
This button is optional and only necessary if you want to dynamically add entries.
You can optionally add a similar button before the <code class="inline">&lt;.inputs_for&gt;</code>, in the case you want
to prepend entries.</p><section role="note" class="admonition warning"><h3 id="inputs_for/1-a-note-on-accessing-a-field-s-value" class="admonition-title warning section-heading"><a href="#inputs_for/1-a-note-on-accessing-a-field-s-value" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">A note on accessing a field's <code class="inline">value</code></span></h3><p>You may be tempted to access <code class="inline">form[:field].value</code> or attempt to manipulate
the form metadata in your templates. However, bear in mind that the <code class="inline">form[:field]</code>
value reflects the most recent changes. For example, an <code class="inline">:integer</code> field may
either contain integer values, but it may also hold a string, if the form has
been submitted.</p><p>This is particularly noticeable when using <code class="inline">inputs_for</code>. Accessing the <code class="inline">.value</code>
of a nested field may either return a struct, a changeset, or raw parameters
sent by the client (when using <code class="inline">drop_param</code>). This makes the <code class="inline">form[:field].value</code>
impractical for deriving or computing other properties.</p><p>The correct way to approach this problem is by computing any property either in
your LiveViews, by traversing the relevant changesets and data structures, or by
moving the logic to the <code class="inline">Ecto.Changeset</code> itself.</p><p>As an example, imagine you are building a time tracking application where:</p><ul><li>users enter the total work time for a day</li><li>individual activities are tracked as embeds</li><li>the sum of all activities should match the total time</li><li>the form should display the remaining time</li></ul><p>Instead of trying to calculate the remaining time in your template by
doing something like <code class="inline">calculate_remaining(@form)</code> and accessing
<code class="inline">form[:activities].value</code>, calculate the remaining time based
on the changeset in your <code class="inline">handle_event</code> instead:</p><pre><code class="makeup elixir" translate="no"><samp class="kd">def</samp><samp class="w"> </samp><samp class="nf">handle_event</samp><samp class="p" data-group-id="6671606432-1">(</samp><samp class="s">&quot;validate&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="6671606432-2">%{</samp><samp class="s">&quot;tracked_day&quot;</samp><samp class="w"> </samp><samp class="p">=&gt;</samp><samp class="w"> </samp><samp class="n">params</samp><samp class="p" data-group-id="6671606432-2">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">socket</samp><samp class="p" data-group-id="6671606432-1">)</samp><samp class="w"> </samp><samp class="k" data-group-id="6671606432-3">do</samp><samp class="w">
  </samp><samp class="n">changeset</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="nc">TrackedDay</samp><samp class="o">.</samp><samp class="n">changeset</samp><samp class="p" data-group-id="6671606432-4">(</samp><samp class="n">socket</samp><samp class="o">.</samp><samp class="n">assigns</samp><samp class="o">.</samp><samp class="n">tracked_day</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">params</samp><samp class="p" data-group-id="6671606432-4">)</samp><samp class="w">
  </samp><samp class="n">remaining</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="n">calculate_remaining</samp><samp class="p" data-group-id="6671606432-5">(</samp><samp class="n">changeset</samp><samp class="p" data-group-id="6671606432-5">)</samp><samp class="w">
  </samp><samp class="p" data-group-id="6671606432-6">{</samp><samp class="ss">:noreply</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">assign</samp><samp class="p" data-group-id="6671606432-7">(</samp><samp class="n">socket</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">form</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="n">to_form</samp><samp class="p" data-group-id="6671606432-8">(</samp><samp class="n">changeset</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">action</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="ss">:validate</samp><samp class="p" data-group-id="6671606432-8">)</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">remaining</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="n">remaining</samp><samp class="p" data-group-id="6671606432-7">)</samp><samp class="p" data-group-id="6671606432-6">}</samp><samp class="w">
</samp><samp class="k" data-group-id="6671606432-3">end</samp><samp class="w">

</samp><samp class="c1"># Helper function to calculate remaining time</samp><samp class="w">
</samp><samp class="kd">defp</samp><samp class="w"> </samp><samp class="nf">calculate_remaining</samp><samp class="p" data-group-id="6671606432-9">(</samp><samp class="n">changeset</samp><samp class="p" data-group-id="6671606432-9">)</samp><samp class="w"> </samp><samp class="k" data-group-id="6671606432-10">do</samp><samp class="w">
  </samp><samp class="n">total</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="nc">Ecto.Changeset</samp><samp class="o">.</samp><samp class="n">get_field</samp><samp class="p" data-group-id="6671606432-11">(</samp><samp class="n">changeset</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:total</samp><samp class="p" data-group-id="6671606432-11">)</samp><samp class="w">
  </samp><samp class="n">activities</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="nc">Ecto.Changeset</samp><samp class="o">.</samp><samp class="n">get_embed</samp><samp class="p" data-group-id="6671606432-12">(</samp><samp class="n">changeset</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:activities</samp><samp class="p" data-group-id="6671606432-12">)</samp><samp class="w">

  </samp><samp class="nc">Enum</samp><samp class="o">.</samp><samp class="n">reduce</samp><samp class="p" data-group-id="6671606432-13">(</samp><samp class="n">activities</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">total</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="k" data-group-id="6671606432-14">fn</samp><samp class="w"> </samp><samp class="n">activity</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">acc</samp><samp class="w"> </samp><samp class="o">-&gt;</samp><samp class="w">
    </samp><samp class="n">duration</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w">
      </samp><samp class="k">case</samp><samp class="w"> </samp><samp class="n">activity</samp><samp class="w"> </samp><samp class="k" data-group-id="6671606432-15">do</samp><samp class="w">
        </samp><samp class="p" data-group-id="6671606432-16">%{</samp><samp class="ss">valid?</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">true</samp><samp class="p" data-group-id="6671606432-16">}</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="n">changeset</samp><samp class="w"> </samp><samp class="o">-&gt;</samp><samp class="w"> </samp><samp class="nc">Ecto.Changeset</samp><samp class="o">.</samp><samp class="n">get_field</samp><samp class="p" data-group-id="6671606432-17">(</samp><samp class="n">changeset</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:duration</samp><samp class="p" data-group-id="6671606432-17">)</samp><samp class="w">
        </samp><samp class="c1"># if the activity is invalid, we don&#39;t include its duration in the calculation</samp><samp class="w">
        </samp><samp class="bp">_</samp><samp class="w"> </samp><samp class="o">-&gt;</samp><samp class="w"> </samp><samp class="mi">0</samp><samp class="w">
      </samp><samp class="k" data-group-id="6671606432-15">end</samp><samp class="w">

    </samp><samp class="n">acc</samp><samp class="w"> </samp><samp class="o">-</samp><samp class="w"> </samp><samp class="n">length</samp><samp class="w">
  </samp><samp class="k" data-group-id="6671606432-14">end</samp><samp class="p" data-group-id="6671606432-13">)</samp><samp class="w">
</samp><samp class="k" data-group-id="6671606432-10">end</samp></code></pre><p>This logic might also be implemented directly in your schema module and, if you
often need the <code class="inline">:remaining</code> value, you could also add it as a <code class="inline">:virtual</code> field to
your schema and run the calculation when validating the changeset:</p><pre><code class="makeup elixir" translate="no"><samp class="kd">def</samp><samp class="w"> </samp><samp class="nf">changeset</samp><samp class="p" data-group-id="1081386710-1">(</samp><samp class="n">tracked_day</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">attrs</samp><samp class="p" data-group-id="1081386710-1">)</samp><samp class="w"> </samp><samp class="k" data-group-id="1081386710-2">do</samp><samp class="w">
  </samp><samp class="n">tracked_day</samp><samp class="w">
  </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="n">cast</samp><samp class="p" data-group-id="1081386710-3">(</samp><samp class="n">attrs</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="1081386710-4">[</samp><samp class="ss">:total_duration</samp><samp class="p" data-group-id="1081386710-4">]</samp><samp class="p" data-group-id="1081386710-3">)</samp><samp class="w">
  </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="n">cast_embed</samp><samp class="p" data-group-id="1081386710-5">(</samp><samp class="ss">:activities</samp><samp class="p" data-group-id="1081386710-5">)</samp><samp class="w">
  </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="n">validate_required</samp><samp class="p" data-group-id="1081386710-6">(</samp><samp class="p" data-group-id="1081386710-7">[</samp><samp class="ss">:total_duration</samp><samp class="p" data-group-id="1081386710-7">]</samp><samp class="p" data-group-id="1081386710-6">)</samp><samp class="w">
  </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="n">validate_number</samp><samp class="p" data-group-id="1081386710-8">(</samp><samp class="ss">:total_duration</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">greater_than</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">0</samp><samp class="p" data-group-id="1081386710-8">)</samp><samp class="w">
  </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="n">validate_and_put_remaining_time</samp><samp class="p" data-group-id="1081386710-9">(</samp><samp class="p" data-group-id="1081386710-9">)</samp><samp class="w">
</samp><samp class="k" data-group-id="1081386710-2">end</samp><samp class="w">

</samp><samp class="kd">defp</samp><samp class="w"> </samp><samp class="nf">validate_and_put_remaining_time</samp><samp class="p" data-group-id="1081386710-10">(</samp><samp class="n">changeset</samp><samp class="p" data-group-id="1081386710-10">)</samp><samp class="w"> </samp><samp class="k" data-group-id="1081386710-11">do</samp><samp class="w">
  </samp><samp class="n">remaining</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="n">calculate_remaining</samp><samp class="p" data-group-id="1081386710-12">(</samp><samp class="n">changeset</samp><samp class="p" data-group-id="1081386710-12">)</samp><samp class="w">
  </samp><samp class="n">put_change</samp><samp class="p" data-group-id="1081386710-13">(</samp><samp class="n">changeset</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:remaining</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">remaining</samp><samp class="p" data-group-id="1081386710-13">)</samp><samp class="w">
</samp><samp class="k" data-group-id="1081386710-11">end</samp></code></pre><p>By using this approach, you can safely render the remaining time in your template
using <code class="inline">@form[:remaining].value</code>, avoiding the pitfalls of directly accessing complex field values.</p></section>
  </section>
</section>
<section class="detail" id="intersperse/1">

  <div class="detail-header">
    <a href="#intersperse/1" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">intersperse(assigns)</h1>


        <a href="https://github.com/phoenixframework/phoenix_live_view/blob/v1.1.2/lib/phoenix_component.ex#L3425" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

<p>Intersperses separator slot between an enumerable.</p><p>Useful when you need to add a separator between items such as when
rendering breadcrumbs for navigation. Provides each item to the
inner block.</p><h2 id="intersperse/1-examples" class="section-heading"><a href="#intersperse/1-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup heex" translate="no"><samp class="p">&lt;</samp><samp class="nf">.intersperse</samp><samp class="w"> </samp><samp class="na">:let</samp><samp class="p">=</samp><samp class="p" data-group-id="3976074001-1">{</samp><samp class="n">item</samp><samp class="p" data-group-id="3976074001-1">}</samp><samp class="w"> </samp><samp class="na">enum</samp><samp class="p">=</samp><samp class="p" data-group-id="3976074001-2">{</samp><samp class="p" data-group-id="3976074001-ex-1">[</samp><samp class="s">&quot;home&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;profile&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;settings&quot;</samp><samp class="p" data-group-id="3976074001-ex-1">]</samp><samp class="p" data-group-id="3976074001-2">}</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="w">  </samp><samp class="p">&lt;</samp><samp class="ss">:separator</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="w">    </samp><samp class="p">&lt;</samp><samp class="nt">span</samp><samp class="w"> </samp><samp class="na">class</samp><samp class="p">=</samp><samp class="p">&quot;</samp><samp class="s2">s</samp><samp class="s2">e</samp><samp class="s2">p</samp><samp class="p">&quot;</samp><samp class="p">&gt;</samp><samp class="n">|</samp><samp class="p">&lt;/</samp><samp class="nt">span</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="w">  </samp><samp class="p">&lt;/</samp><samp class="ss">:separator</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="w">  </samp><samp class="p" data-group-id="3976074001-3">{</samp><samp class="n">item</samp><samp class="p" data-group-id="3976074001-3">}</samp><samp class="w">
</samp><samp class="p">&lt;/</samp><samp class="nf">.intersperse</samp><samp class="p">&gt;</samp></code></pre><p>Renders the following markup:</p><pre><code class="makeup html" translate="no"><samp class="n">home </samp><samp class="p">&lt;</samp><samp class="nt">span</samp><samp class="w"> </samp><samp class="na">class</samp><samp class="p">=</samp><samp class="p">&quot;</samp><samp class="s2">s</samp><samp class="s2">e</samp><samp class="s2">p</samp><samp class="p">&quot;</samp><samp class="p">&gt;</samp><samp class="n">|</samp><samp class="p">&lt;/</samp><samp class="nt">span</samp><samp class="p">&gt;</samp><samp class="n"> profile </samp><samp class="p">&lt;</samp><samp class="nt">span</samp><samp class="w"> </samp><samp class="na">class</samp><samp class="p">=</samp><samp class="p">&quot;</samp><samp class="s2">s</samp><samp class="s2">e</samp><samp class="s2">p</samp><samp class="p">&quot;</samp><samp class="p">&gt;</samp><samp class="n">|</samp><samp class="p">&lt;/</samp><samp class="nt">span</samp><samp class="p">&gt;</samp><samp class="n"> settings</samp></code></pre><h2 id="intersperse/1-attributes" class="section-heading"><a href="#intersperse/1-attributes" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Attributes</span></h2><ul><li><code class="inline">enum</code> (<code class="inline">:any</code>) (required) - the enumerable to intersperse with separators.</li></ul><h2 id="intersperse/1-slots" class="section-heading"><a href="#intersperse/1-slots" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Slots</span></h2><ul><li><code class="inline">inner_block</code> (required) - the inner_block to render for each item.</li><li><code class="inline">separator</code> (required) - the slot for the separator.</li></ul>
  </section>
</section>
<section class="detail" id="link/1">

  <div class="detail-header">
    <a href="#link/1" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">link(assigns)</h1>


        <a href="https://github.com/phoenixframework/phoenix_live_view/blob/v1.1.2/lib/phoenix_component.ex#L3083" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

<p>Generates a link to a given route.</p><p>It is typically used with one of the three attributes:</p><ul><li><code class="inline">patch</code> - on click, it patches the current LiveView with the given path</li><li><code class="inline">navigate</code> - on click, it navigates to a new LiveView at the given path</li><li><code class="inline">href</code> - on click, it performs traditional browser navigation (as any <code class="inline">&lt;a&gt;</code> tag)</li></ul><h2 id="link/1-attributes" class="section-heading"><a href="#link/1-attributes" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Attributes</span></h2><ul><li><p><code class="inline">navigate</code> (<code class="inline">:string</code>) - Navigates to a LiveView.
When redirecting across LiveViews, the browser page is kept, but a new LiveView process
is mounted and its contents is loaded on the page. It is only possible to navigate
between LiveViews declared under the same router
<a href="Phoenix.LiveView.Router.xhtml#live_session/3"><code class="inline">live_session</code></a>.
When used outside of a LiveView or across live sessions, it behaves like a regular
browser redirect.</p></li><li><p><code class="inline">patch</code> (<code class="inline">:string</code>) - Patches the current LiveView.
The <code class="inline">handle_params</code> callback of the current LiveView will be invoked and the minimum content
will be sent over the wire, as any other LiveView diff.</p></li><li><p><code class="inline">href</code> (<code class="inline">:any</code>) - Uses traditional browser navigation to the new location.
This means the whole page is reloaded on the browser.</p></li><li><p><code class="inline">replace</code> (<code class="inline">:boolean</code>) - When using <code class="inline">:patch</code> or <code class="inline">:navigate</code>,
should the browser's history be replaced with <code class="inline">pushState</code>?</p><p>Defaults to <code class="inline">false</code>.</p></li><li><p><code class="inline">method</code> (<code class="inline">:string</code>) - The HTTP method to use with the link. This is intended for usage outside of LiveView
and therefore only works with the <code class="inline">href={...}</code> attribute. It has no effect on <code class="inline">patch</code>
and <code class="inline">navigate</code> instructions.</p><p>In case the method is not <code class="inline">get</code>, the link is generated inside the form which sets the proper
information. In order to submit the form, JavaScript must be enabled in the browser.</p><p>Defaults to <code class="inline">&quot;get&quot;</code>.</p></li><li><p><code class="inline">csrf_token</code> (<code class="inline">:any</code>) - A boolean or custom token to use for links with an HTTP method other than <code class="inline">get</code>. Defaults to <code class="inline">true</code>.</p></li><li><p>Global attributes are accepted. Additional HTML attributes added to the <code class="inline">a</code> tag. Supports all globals plus: <code class="inline">[&quot;download&quot;, &quot;hreflang&quot;, &quot;referrerpolicy&quot;, &quot;rel&quot;, &quot;target&quot;, &quot;type&quot;]</code>.</p></li></ul><h2 id="link/1-slots" class="section-heading"><a href="#link/1-slots" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Slots</span></h2><ul><li><code class="inline">inner_block</code> (required) - The content rendered inside of the <code class="inline">a</code> tag.</li></ul><h2 id="link/1-examples" class="section-heading"><a href="#link/1-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup heex" translate="no"><samp class="p">&lt;</samp><samp class="nf">.link</samp><samp class="w"> </samp><samp class="na">href</samp><samp class="p">=</samp><samp class="p">&quot;</samp><samp class="s2">/</samp><samp class="p">&quot;</samp><samp class="p">&gt;</samp><samp class="n">Regular anchor link</samp><samp class="p">&lt;/</samp><samp class="nf">.link</samp><samp class="p">&gt;</samp></code></pre><pre><code class="makeup heex" translate="no"><samp class="p">&lt;</samp><samp class="nf">.link</samp><samp class="w"> </samp><samp class="na">navigate</samp><samp class="p">=</samp><samp class="p" data-group-id="3432294554-1">{</samp><samp class="sx">~p&quot;/&quot;</samp><samp class="p" data-group-id="3432294554-1">}</samp><samp class="w"> </samp><samp class="na">class</samp><samp class="p">=</samp><samp class="p">&quot;</samp><samp class="s2">u</samp><samp class="s2">n</samp><samp class="s2">d</samp><samp class="s2">e</samp><samp class="s2">r</samp><samp class="s2">l</samp><samp class="s2">i</samp><samp class="s2">n</samp><samp class="s2">e</samp><samp class="p">&quot;</samp><samp class="p">&gt;</samp><samp class="n">home</samp><samp class="p">&lt;/</samp><samp class="nf">.link</samp><samp class="p">&gt;</samp></code></pre><pre><code class="makeup heex" translate="no"><samp class="p">&lt;</samp><samp class="nf">.link</samp><samp class="w"> </samp><samp class="na">navigate</samp><samp class="p">=</samp><samp class="p" data-group-id="7888509551-1">{</samp><samp class="sx">~p&quot;/?sort=asc&quot;</samp><samp class="p" data-group-id="7888509551-1">}</samp><samp class="w"> </samp><samp class="na">replace</samp><samp class="p">=</samp><samp class="p" data-group-id="7888509551-2">{</samp><samp class="no">false</samp><samp class="p" data-group-id="7888509551-2">}</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="n">  Sort By Price
</samp><samp class="p">&lt;/</samp><samp class="nf">.link</samp><samp class="p">&gt;</samp></code></pre><pre><code class="makeup heex" translate="no"><samp class="p">&lt;</samp><samp class="nf">.link</samp><samp class="w"> </samp><samp class="na">patch</samp><samp class="p">=</samp><samp class="p" data-group-id="5421363641-1">{</samp><samp class="sx">~p&quot;/details&quot;</samp><samp class="p" data-group-id="5421363641-1">}</samp><samp class="p">&gt;</samp><samp class="n">view details</samp><samp class="p">&lt;/</samp><samp class="nf">.link</samp><samp class="p">&gt;</samp></code></pre><pre><code class="makeup heex" translate="no"><samp class="p">&lt;</samp><samp class="nf">.link</samp><samp class="w"> </samp><samp class="na">href</samp><samp class="p">=</samp><samp class="p" data-group-id="8621635985-1">{</samp><samp class="nc">URI</samp><samp class="o">.</samp><samp class="n">parse</samp><samp class="p" data-group-id="8621635985-ex-1">(</samp><samp class="s">&quot;https://elixir-lang.org&quot;</samp><samp class="p" data-group-id="8621635985-ex-1">)</samp><samp class="p" data-group-id="8621635985-1">}</samp><samp class="p">&gt;</samp><samp class="n">hello</samp><samp class="p">&lt;/</samp><samp class="nf">.link</samp><samp class="p">&gt;</samp></code></pre><pre><code class="makeup heex" translate="no"><samp class="p">&lt;</samp><samp class="nf">.link</samp><samp class="w"> </samp><samp class="na">href</samp><samp class="p">=</samp><samp class="p">&quot;</samp><samp class="s2">/the_world</samp><samp class="p">&quot;</samp><samp class="w"> </samp><samp class="na">method</samp><samp class="p">=</samp><samp class="p">&quot;</samp><samp class="s2">delete</samp><samp class="p">&quot;</samp><samp class="w"> </samp><samp class="na">data-confirm</samp><samp class="p">=</samp><samp class="p">&quot;</samp><samp class="s2">Really?</samp><samp class="p">&quot;</samp><samp class="p">&gt;</samp><samp class="n">delete</samp><samp class="p">&lt;/</samp><samp class="nf">.link</samp><samp class="p">&gt;</samp></code></pre><h2 id="link/1-javascript-dependency" class="section-heading"><a href="#link/1-javascript-dependency" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">JavaScript dependency</span></h2><p>In order to support links where <code class="inline">:method</code> is not <code class="inline">&quot;get&quot;</code> or use the above data attributes,
<a href="https://hexdocs.pm/phoenix_html/4.2.1/Phoenix.HTML.html"><code class="inline">Phoenix.HTML</code></a> relies on JavaScript. You can load <code class="inline">priv/static/phoenix_html.js</code> into your
build tool.</p><h3 id="link/1-data-attributes" class="section-heading"><a href="#link/1-data-attributes" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Data attributes</span></h3><p>Data attributes are added as a keyword list passed to the <code class="inline">data</code> key. The following data
attributes are supported:</p><ul><li><code class="inline">data-confirm</code> - shows a confirmation prompt before generating and submitting the form when
<code class="inline">:method</code> is not <code class="inline">&quot;get&quot;</code>.</li></ul><h3 id="link/1-overriding-the-default-confirm-behaviour" class="section-heading"><a href="#link/1-overriding-the-default-confirm-behaviour" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Overriding the default confirm behaviour</span></h3><p><code class="inline">phoenix_html.js</code> does trigger a custom event <code class="inline">phoenix.link.click</code> on the clicked DOM element
when a click happened. This allows you to intercept the event on its way bubbling up
to <code class="inline">window</code> and do your own custom logic to enhance or replace how the <code class="inline">data-confirm</code>
attribute is handled. You could for example replace the browsers <code class="inline">confirm()</code> behavior with
a custom javascript implementation:</p><pre><code class="makeup javascript" translate="no"><samp class="c1">//</samp><samp class="c1"> Compared to a javascript window.confirm, the custom dialog does not block
</samp><samp class="c1">//</samp><samp class="c1"> javascript execution. Therefore to make this work as expected we store
</samp><samp class="c1">//</samp><samp class="c1"> the successful confirmation as an attribute and re-trigger the click event.
</samp><samp class="c1">//</samp><samp class="c1"> On the second click, the `data-confirm-resolved` attribute is set and we proceed.
</samp><samp class="kt">const</samp><samp class="w"> </samp><samp class="no">RESOLVED_ATTRIBUTE</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="p">&quot;</samp><samp class="s2">data-confirm-resolved</samp><samp class="p">&quot;</samp><samp class="p">;</samp><samp class="w">
</samp><samp class="c1">//</samp><samp class="c1"> listen on document.body, so it&#39;s executed before the default of
</samp><samp class="c1">//</samp><samp class="c1"> phoenix_html, which is listening on the window object
</samp><samp class="nb">document</samp><samp class="p">.</samp><samp class="n">body</samp><samp class="p">.</samp><samp class="nf">addEventListener</samp><samp class="p">(</samp><samp class="p">&#39;</samp><samp class="s1">phoenix.link.click</samp><samp class="p">&#39;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="kt">function</samp><samp class="w"> </samp><samp class="p">(</samp><samp class="nv">e</samp><samp class="p">)</samp><samp class="w"> </samp><samp class="p">{</samp><samp class="w">
</samp><samp class="w">  </samp><samp class="cm">//</samp><samp class="cm"> Prevent default implementation
</samp><samp class="w">  </samp><samp class="nv">e</samp><samp class="p">.</samp><samp class="nf">stopPropagation</samp><samp class="p">(</samp><samp class="p">)</samp><samp class="p">;</samp><samp class="w">
</samp><samp class="w">  </samp><samp class="cm">//</samp><samp class="cm"> Introduce alternative implementation
</samp><samp class="w">  </samp><samp class="kt">var</samp><samp class="w"> </samp><samp class="nv">message</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="nv">e</samp><samp class="p">.</samp><samp class="n">target</samp><samp class="p">.</samp><samp class="nf">getAttribute</samp><samp class="p">(</samp><samp class="p">&quot;</samp><samp class="s2">data-confirm</samp><samp class="p">&quot;</samp><samp class="p">)</samp><samp class="p">;</samp><samp class="w">
</samp><samp class="w">  </samp><samp class="k">if</samp><samp class="p">(</samp><samp class="o">!</samp><samp class="nv">message</samp><samp class="p">)</samp><samp class="p">{</samp><samp class="w"> </samp><samp class="k">return</samp><samp class="p">;</samp><samp class="w"> </samp><samp class="p">}</samp><samp class="w">
</samp><samp class="w">
</samp><samp class="w">  </samp><samp class="cm">//</samp><samp class="cm"> Confirm is resolved execute the click event
</samp><samp class="w">  </samp><samp class="k">if</samp><samp class="w"> </samp><samp class="p">(</samp><samp class="nv">e</samp><samp class="p">.</samp><samp class="n">target</samp><samp class="o">?</samp><samp class="p">.</samp><samp class="nf">hasAttribute</samp><samp class="p">(</samp><samp class="no">RESOLVED_ATTRIBUTE</samp><samp class="p">)</samp><samp class="p">)</samp><samp class="w"> </samp><samp class="p">{</samp><samp class="w">
</samp><samp class="w">    </samp><samp class="nv">e</samp><samp class="p">.</samp><samp class="n">target</samp><samp class="p">.</samp><samp class="nf">removeAttribute</samp><samp class="p">(</samp><samp class="no">RESOLVED_ATTRIBUTE</samp><samp class="p">)</samp><samp class="p">;</samp><samp class="w">
</samp><samp class="w">    </samp><samp class="k">return</samp><samp class="p">;</samp><samp class="w">
</samp><samp class="w">  </samp><samp class="p">}</samp><samp class="w">
</samp><samp class="w">
</samp><samp class="w">  </samp><samp class="cm">//</samp><samp class="cm"> Confirm is needed, preventDefault and show your modal
</samp><samp class="w">  </samp><samp class="nv">e</samp><samp class="p">.</samp><samp class="nf">preventDefault</samp><samp class="p">(</samp><samp class="p">)</samp><samp class="p">;</samp><samp class="w">
</samp><samp class="w">  </samp><samp class="nv">e</samp><samp class="p">.</samp><samp class="n">target</samp><samp class="o">?</samp><samp class="p">.</samp><samp class="nf">setAttribute</samp><samp class="p">(</samp><samp class="no">RESOLVED_ATTRIBUTE</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p">&quot;</samp><samp class="p">&quot;</samp><samp class="p">)</samp><samp class="p">;</samp><samp class="w">
</samp><samp class="w">
</samp><samp class="w">  </samp><samp class="nv">vex</samp><samp class="p">.</samp><samp class="n">dialog</samp><samp class="p">.</samp><samp class="nf">confirm</samp><samp class="p">(</samp><samp class="p">{</samp><samp class="w">
</samp><samp class="w">    </samp><samp class="n">message</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="nv">message</samp><samp class="p">,</samp><samp class="w">
</samp><samp class="w">    </samp><samp class="nf">callback</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="kt">function</samp><samp class="w"> </samp><samp class="p">(</samp><samp class="nv">value</samp><samp class="p">)</samp><samp class="w"> </samp><samp class="p">{</samp><samp class="w">
</samp><samp class="w">      </samp><samp class="k">if</samp><samp class="w"> </samp><samp class="p">(</samp><samp class="nv">value</samp><samp class="w"> </samp><samp class="o">==</samp><samp class="w"> </samp><samp class="kc">true</samp><samp class="p">)</samp><samp class="w"> </samp><samp class="p">{</samp><samp class="w">
</samp><samp class="w">        </samp><samp class="cm">//</samp><samp class="cm"> Customer confirmed, re-trigger the click event.
</samp><samp class="w">        </samp><samp class="nv">e</samp><samp class="p">.</samp><samp class="n">target</samp><samp class="o">?</samp><samp class="p">.</samp><samp class="nf">click</samp><samp class="p">(</samp><samp class="p">)</samp><samp class="p">;</samp><samp class="w">
</samp><samp class="w">      </samp><samp class="p">}</samp><samp class="w"> </samp><samp class="k">else</samp><samp class="w"> </samp><samp class="p">{</samp><samp class="w">
</samp><samp class="w">        </samp><samp class="cm">//</samp><samp class="cm"> Customer canceled
</samp><samp class="w">        </samp><samp class="nv">e</samp><samp class="p">.</samp><samp class="n">target</samp><samp class="o">?</samp><samp class="p">.</samp><samp class="nf">removeAttribute</samp><samp class="p">(</samp><samp class="no">RESOLVED_ATTRIBUTE</samp><samp class="p">)</samp><samp class="p">;</samp><samp class="w">
</samp><samp class="w">      </samp><samp class="p">}</samp><samp class="w">
</samp><samp class="w">    </samp><samp class="p">}</samp><samp class="w">
</samp><samp class="w">  </samp><samp class="p">}</samp><samp class="p">)</samp><samp class="w">
</samp><samp class="p">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="kc">false</samp><samp class="p">)</samp><samp class="p">;</samp></code></pre><p>Or you could attach your own custom behavior.</p><pre><code class="makeup javascript" translate="no"><samp class="nb">window</samp><samp class="p">.</samp><samp class="nf">addEventListener</samp><samp class="p">(</samp><samp class="p">&#39;</samp><samp class="s1">phoenix.link.click</samp><samp class="p">&#39;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="kt">function</samp><samp class="w"> </samp><samp class="p">(</samp><samp class="nv">e</samp><samp class="p">)</samp><samp class="w"> </samp><samp class="p">{</samp><samp class="w">
</samp><samp class="w">  </samp><samp class="cm">//</samp><samp class="cm"> Introduce custom behaviour
</samp><samp class="w">  </samp><samp class="kt">var</samp><samp class="w"> </samp><samp class="nv">message</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="nv">e</samp><samp class="p">.</samp><samp class="n">target</samp><samp class="p">.</samp><samp class="nf">getAttribute</samp><samp class="p">(</samp><samp class="p">&quot;</samp><samp class="s2">data-prompt</samp><samp class="p">&quot;</samp><samp class="p">)</samp><samp class="p">;</samp><samp class="w">
</samp><samp class="w">  </samp><samp class="kt">var</samp><samp class="w"> </samp><samp class="nv">answer</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="nv">e</samp><samp class="p">.</samp><samp class="n">target</samp><samp class="p">.</samp><samp class="nf">getAttribute</samp><samp class="p">(</samp><samp class="p">&quot;</samp><samp class="s2">data-prompt-answer</samp><samp class="p">&quot;</samp><samp class="p">)</samp><samp class="p">;</samp><samp class="w">
</samp><samp class="w">  </samp><samp class="k">if</samp><samp class="p">(</samp><samp class="nv">message</samp><samp class="w"> </samp><samp class="o">&amp;&amp;</samp><samp class="w"> </samp><samp class="nv">answer</samp><samp class="w"> </samp><samp class="o">&amp;&amp;</samp><samp class="w"> </samp><samp class="p">(</samp><samp class="nv">answer</samp><samp class="w"> </samp><samp class="o">!=</samp><samp class="w"> </samp><samp class="nb">window</samp><samp class="p">.</samp><samp class="nf">prompt</samp><samp class="p">(</samp><samp class="nv">message</samp><samp class="p">)</samp><samp class="p">)</samp><samp class="p">)</samp><samp class="w"> </samp><samp class="p">{</samp><samp class="w">
</samp><samp class="w">    </samp><samp class="nv">e</samp><samp class="p">.</samp><samp class="nf">preventDefault</samp><samp class="p">(</samp><samp class="p">)</samp><samp class="p">;</samp><samp class="w">
</samp><samp class="w">  </samp><samp class="p">}</samp><samp class="w">
</samp><samp class="p">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="kc">false</samp><samp class="p">)</samp><samp class="p">;</samp></code></pre><p>The latter could also be bound to any <code class="inline">click</code> event, but this way you can be sure your custom
code is only executed when the code of <code class="inline">phoenix_html.js</code> is run.</p><h2 id="link/1-csrf-protection" class="section-heading"><a href="#link/1-csrf-protection" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">CSRF Protection</span></h2><p>By default, CSRF tokens are generated through <a href="https://hexdocs.pm/plug/1.18.1/Plug.CSRFProtection.html"><code class="inline">Plug.CSRFProtection</code></a>.</p>
  </section>
</section>
<section class="detail" id="live_component/1">

  <div class="detail-header">
    <a href="#live_component/1" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">live_component(assigns)</h1>


        <a href="https://github.com/phoenixframework/phoenix_live_view/blob/v1.1.2/lib/phoenix_component.ex#L2178" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

<p>A function component for rendering <a href="Phoenix.LiveComponent.xhtml"><code class="inline">Phoenix.LiveComponent</code></a> within a parent LiveView.</p><p>While LiveViews can be nested, each LiveView starts its own process. A LiveComponent provides
similar functionality to LiveView, except they run in the same process as the LiveView,
with its own encapsulated state. That's why they are called stateful components.</p><h2 id="live_component/1-attributes" class="section-heading"><a href="#live_component/1-attributes" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Attributes</span></h2><ul><li><p><code class="inline">id</code> (<code class="inline">:string</code>) (required) - A unique identifier for the LiveComponent. Note the <code class="inline">id</code> won't
necessarily be used as the DOM <code class="inline">id</code>. That is up to the component to decide.</p></li><li><p><code class="inline">module</code> (<code class="inline">:atom</code>) (required) - The LiveComponent module to render.</p></li></ul><p>Any additional attributes provided will be passed to the LiveComponent as a map of assigns.
See <a href="Phoenix.LiveComponent.xhtml"><code class="inline">Phoenix.LiveComponent</code></a> for more information.</p><h2 id="live_component/1-examples" class="section-heading"><a href="#live_component/1-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup heex" translate="no"><samp class="p">&lt;</samp><samp class="nf">.live_component</samp><samp class="w"> </samp><samp class="na">module</samp><samp class="p">=</samp><samp class="p" data-group-id="4081281209-1">{</samp><samp class="nc">MyApp.WeatherComponent</samp><samp class="p" data-group-id="4081281209-1">}</samp><samp class="w"> </samp><samp class="na">id</samp><samp class="p">=</samp><samp class="p">&quot;</samp><samp class="s2">t</samp><samp class="s2">h</samp><samp class="s2">e</samp><samp class="s2">r</samp><samp class="s2">m</samp><samp class="s2">o</samp><samp class="s2">s</samp><samp class="s2">t</samp><samp class="s2">a</samp><samp class="s2">t</samp><samp class="p">&quot;</samp><samp class="w"> </samp><samp class="na">city</samp><samp class="p">=</samp><samp class="p">&quot;</samp><samp class="s2">Kraków</samp><samp class="p">&quot;</samp><samp class="w"> </samp><samp class="p">/&gt;</samp></code></pre>
  </section>
</section>
<section class="detail" id="live_file_input/1">

  <div class="detail-header">
    <a href="#live_file_input/1" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">live_file_input(assigns)</h1>


        <a href="https://github.com/phoenixframework/phoenix_live_view/blob/v1.1.2/lib/phoenix_component.ex#L3323" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

<p>Builds a file input tag for a LiveView upload.</p><h2 id="live_file_input/1-attributes" class="section-heading"><a href="#live_file_input/1-attributes" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Attributes</span></h2><ul><li><code class="inline">upload</code> (<a href="Phoenix.LiveView.UploadConfig.xhtml"><code class="inline">Phoenix.LiveView.UploadConfig</code></a>) (required) - The <a href="Phoenix.LiveView.UploadConfig.xhtml"><code class="inline">Phoenix.LiveView.UploadConfig</code></a> struct.</li><li><code class="inline">accept</code> (<code class="inline">:string</code>) - the optional override for the accept attribute. Defaults to :accept specified by allow_upload.</li><li>Global attributes are accepted. Supports all globals plus: <code class="inline">[&quot;webkitdirectory&quot;, &quot;required&quot;, &quot;disabled&quot;, &quot;capture&quot;, &quot;form&quot;]</code>.</li></ul><h2 id="live_file_input/1-customizing-the-label" class="section-heading"><a href="#live_file_input/1-customizing-the-label" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Customizing the Label</span></h2><p>The <code class="inline">id</code> attribute cannot be overwritten, but you can create a label with a <code class="inline">for</code> attribute
pointing to the UploadConfig <code class="inline">ref</code>:</p><pre><code class="makeup heex" translate="no"><samp class="p">&lt;</samp><samp class="nt">label</samp><samp class="w"> </samp><samp class="na">for</samp><samp class="p">=</samp><samp class="p" data-group-id="5421610820-1">{</samp><samp class="na">@uploads</samp><samp class="o">.</samp><samp class="n">avatar</samp><samp class="o">.</samp><samp class="n">ref</samp><samp class="p" data-group-id="5421610820-1">}</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="w">  </samp><samp class="p">&lt;</samp><samp class="nf">.live_file_input</samp><samp class="w"> </samp><samp class="na">upload</samp><samp class="p">=</samp><samp class="p" data-group-id="5421610820-2">{</samp><samp class="na">@uploads</samp><samp class="o">.</samp><samp class="n">avatar</samp><samp class="p" data-group-id="5421610820-2">}</samp><samp class="w"> </samp><samp class="p">/&gt;</samp><samp class="w">
</samp><samp class="p">&lt;/</samp><samp class="nt">label</samp><samp class="p">&gt;</samp></code></pre><h2 id="live_file_input/1-drag-and-drop" class="section-heading"><a href="#live_file_input/1-drag-and-drop" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Drag and Drop</span></h2><p>Drag and drop is supported by annotating the droppable container with a <code class="inline">phx-drop-target</code>
attribute pointing to the UploadConfig <code class="inline">ref</code>, so the following markup is all that is required
for drag and drop support:</p><pre><code class="makeup heex" translate="no"><samp class="p">&lt;</samp><samp class="nt">label</samp><samp class="w"> </samp><samp class="na">for</samp><samp class="p">=</samp><samp class="p" data-group-id="7049294173-1">{</samp><samp class="na">@uploads</samp><samp class="o">.</samp><samp class="n">avatar</samp><samp class="o">.</samp><samp class="n">ref</samp><samp class="p" data-group-id="7049294173-1">}</samp><samp class="w"> </samp><samp class="na">phx-drop-target</samp><samp class="p">=</samp><samp class="p" data-group-id="7049294173-2">{</samp><samp class="na">@uploads</samp><samp class="o">.</samp><samp class="n">avatar</samp><samp class="o">.</samp><samp class="n">ref</samp><samp class="p" data-group-id="7049294173-2">}</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="w">  </samp><samp class="p">&lt;</samp><samp class="nf">.live_file_input</samp><samp class="w"> </samp><samp class="na">upload</samp><samp class="p">=</samp><samp class="p" data-group-id="7049294173-3">{</samp><samp class="na">@uploads</samp><samp class="o">.</samp><samp class="n">avatar</samp><samp class="p" data-group-id="7049294173-3">}</samp><samp class="w"> </samp><samp class="p">/&gt;</samp><samp class="w">
</samp><samp class="p">&lt;/</samp><samp class="nt">label</samp><samp class="p">&gt;</samp></code></pre><h2 id="live_file_input/1-examples" class="section-heading"><a href="#live_file_input/1-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><p>Rendering a file input:</p><pre><code class="makeup heex" translate="no"><samp class="p">&lt;</samp><samp class="nf">.live_file_input</samp><samp class="w"> </samp><samp class="na">upload</samp><samp class="p">=</samp><samp class="p" data-group-id="4248143076-1">{</samp><samp class="na">@uploads</samp><samp class="o">.</samp><samp class="n">avatar</samp><samp class="p" data-group-id="4248143076-1">}</samp><samp class="w"> </samp><samp class="p">/&gt;</samp></code></pre><p>Rendering a file input with a label:</p><pre><code class="makeup heex" translate="no"><samp class="p">&lt;</samp><samp class="nt">label</samp><samp class="w"> </samp><samp class="na">for</samp><samp class="p">=</samp><samp class="p" data-group-id="3319589221-1">{</samp><samp class="na">@uploads</samp><samp class="o">.</samp><samp class="n">avatar</samp><samp class="o">.</samp><samp class="n">ref</samp><samp class="p" data-group-id="3319589221-1">}</samp><samp class="p">&gt;</samp><samp class="n">Avatar</samp><samp class="p">&lt;/</samp><samp class="nt">label</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="p">&lt;</samp><samp class="nf">.live_file_input</samp><samp class="w"> </samp><samp class="na">upload</samp><samp class="p">=</samp><samp class="p" data-group-id="3319589221-2">{</samp><samp class="na">@uploads</samp><samp class="o">.</samp><samp class="n">avatar</samp><samp class="p" data-group-id="3319589221-2">}</samp><samp class="w"> </samp><samp class="p">/&gt;</samp></code></pre>
  </section>
</section>
<section class="detail" id="live_img_preview/1">

  <div class="detail-header">
    <a href="#live_img_preview/1" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">live_img_preview(assigns)</h1>


        <a href="https://github.com/phoenixframework/phoenix_live_view/blob/v1.1.2/lib/phoenix_component.ex#L3382" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

<p>Generates an image preview on the client for a selected file.</p><h2 id="live_img_preview/1-attributes" class="section-heading"><a href="#live_img_preview/1-attributes" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Attributes</span></h2><ul><li><code class="inline">entry</code> (<a href="Phoenix.LiveView.UploadEntry.xhtml"><code class="inline">Phoenix.LiveView.UploadEntry</code></a>) (required) - The <a href="Phoenix.LiveView.UploadEntry.xhtml"><code class="inline">Phoenix.LiveView.UploadEntry</code></a> struct.</li><li><code class="inline">id</code> (<code class="inline">:string</code>) - the id of the img tag. Derived by default from the entry ref, but can be overridden as needed if you need to render a preview of the same entry multiple times on the same page. Defaults to <code class="inline">nil</code>.</li><li>Global attributes are accepted.</li></ul><h2 id="live_img_preview/1-examples" class="section-heading"><a href="#live_img_preview/1-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup heex" translate="no"><samp class="p">&lt;</samp><samp class="nf">.live_img_preview</samp><samp class="w"> </samp><samp class="na">:for</samp><samp class="p">=</samp><samp class="p" data-group-id="5508321325-1">{</samp><samp class="n">entry</samp><samp class="w"> </samp><samp class="o">&lt;-</samp><samp class="w"> </samp><samp class="na">@uploads</samp><samp class="o">.</samp><samp class="n">avatar</samp><samp class="o">.</samp><samp class="n">entries</samp><samp class="p" data-group-id="5508321325-1">}</samp><samp class="w"> </samp><samp class="na">entry</samp><samp class="p">=</samp><samp class="p" data-group-id="5508321325-2">{</samp><samp class="n">entry</samp><samp class="p" data-group-id="5508321325-2">}</samp><samp class="w"> </samp><samp class="na">width</samp><samp class="p">=</samp><samp class="p">&quot;</samp><samp class="s2">75</samp><samp class="p">&quot;</samp><samp class="w"> </samp><samp class="p">/&gt;</samp></code></pre><p>When you need to use it multiple times, make sure that they have distinct ids</p><pre><code class="makeup heex" translate="no"><samp class="p">&lt;</samp><samp class="nf">.live_img_preview</samp><samp class="w"> </samp><samp class="na">:for</samp><samp class="p">=</samp><samp class="p" data-group-id="8822112564-1">{</samp><samp class="n">entry</samp><samp class="w"> </samp><samp class="o">&lt;-</samp><samp class="w"> </samp><samp class="na">@uploads</samp><samp class="o">.</samp><samp class="n">avatar</samp><samp class="o">.</samp><samp class="n">entries</samp><samp class="p" data-group-id="8822112564-1">}</samp><samp class="w"> </samp><samp class="na">entry</samp><samp class="p">=</samp><samp class="p" data-group-id="8822112564-2">{</samp><samp class="n">entry</samp><samp class="p" data-group-id="8822112564-2">}</samp><samp class="w"> </samp><samp class="na">width</samp><samp class="p">=</samp><samp class="p">&quot;</samp><samp class="s2">75</samp><samp class="p">&quot;</samp><samp class="w"> </samp><samp class="p">/&gt;</samp><samp class="w">
</samp><samp class="w">
</samp><samp class="p">&lt;</samp><samp class="nf">.live_img_preview</samp><samp class="w"> </samp><samp class="na">:for</samp><samp class="p">=</samp><samp class="p" data-group-id="8822112564-3">{</samp><samp class="n">entry</samp><samp class="w"> </samp><samp class="o">&lt;-</samp><samp class="w"> </samp><samp class="na">@uploads</samp><samp class="o">.</samp><samp class="n">avatar</samp><samp class="o">.</samp><samp class="n">entries</samp><samp class="p" data-group-id="8822112564-3">}</samp><samp class="w"> </samp><samp class="na">id</samp><samp class="p">=</samp><samp class="p" data-group-id="8822112564-4">{</samp><samp class="s">&quot;modal-</samp><samp class="si" data-group-id="8822112564-ex-1">#{</samp><samp class="n">entry</samp><samp class="o">.</samp><samp class="n">ref</samp><samp class="si" data-group-id="8822112564-ex-1">}</samp><samp class="s">&quot;</samp><samp class="p" data-group-id="8822112564-4">}</samp><samp class="w"> </samp><samp class="na">entry</samp><samp class="p">=</samp><samp class="p" data-group-id="8822112564-5">{</samp><samp class="n">entry</samp><samp class="p" data-group-id="8822112564-5">}</samp><samp class="w"> </samp><samp class="na">width</samp><samp class="p">=</samp><samp class="p">&quot;</samp><samp class="s2">500</samp><samp class="p">&quot;</samp><samp class="w"> </samp><samp class="p">/&gt;</samp></code></pre>
  </section>
</section>
<section class="detail" id="live_title/1">

  <div class="detail-header">
    <a href="#live_title/1" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">live_title(assigns)</h1>


        <a href="https://github.com/phoenixframework/phoenix_live_view/blob/v1.1.2/lib/phoenix_component.ex#L2242" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

<p>Renders a title with automatic prefix/suffix on <code class="inline">@page_title</code> updates.</p><h2 id="live_title/1-attributes" class="section-heading"><a href="#live_title/1-attributes" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Attributes</span></h2><ul><li><code class="inline">prefix</code> (<code class="inline">:string</code>) - A prefix added before the content of <code class="inline">inner_block</code>. Defaults to <code class="inline">nil</code>.</li><li><code class="inline">default</code> (<code class="inline">:string</code>) - The default title to use if the inner block is empty on regular or connected mounts. <em>Note</em>: empty titles, such as <code class="inline">nil</code> or an empty string, fall back to the default value. Defaults to <code class="inline">nil</code>.</li><li><code class="inline">suffix</code> (<code class="inline">:string</code>) - A suffix added after the content of <code class="inline">inner_block</code>. Defaults to <code class="inline">nil</code>.</li></ul><h2 id="live_title/1-slots" class="section-heading"><a href="#live_title/1-slots" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Slots</span></h2><ul><li><code class="inline">inner_block</code> (required) - Content rendered inside the <code class="inline">title</code> tag.</li></ul><h2 id="live_title/1-examples" class="section-heading"><a href="#live_title/1-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup heex" translate="no"><samp class="p">&lt;</samp><samp class="nf">.live_title</samp><samp class="w"> </samp><samp class="na">default</samp><samp class="p">=</samp><samp class="p">&quot;</samp><samp class="s2">Welcome</samp><samp class="p">&quot;</samp><samp class="w"> </samp><samp class="na">prefix</samp><samp class="p">=</samp><samp class="p">&quot;</samp><samp class="s2">MyApp · </samp><samp class="p">&quot;</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="w">  </samp><samp class="p" data-group-id="2031309042-1">{</samp><samp class="n">assigns</samp><samp class="p" data-group-id="2031309042-ex-1">[</samp><samp class="ss">:page_title</samp><samp class="p" data-group-id="2031309042-ex-1">]</samp><samp class="p" data-group-id="2031309042-1">}</samp><samp class="w">
</samp><samp class="p">&lt;/</samp><samp class="nf">.live_title</samp><samp class="p">&gt;</samp></code></pre><pre><code class="makeup heex" translate="no"><samp class="p">&lt;</samp><samp class="nf">.live_title</samp><samp class="w"> </samp><samp class="na">default</samp><samp class="p">=</samp><samp class="p">&quot;</samp><samp class="s2">Welcome</samp><samp class="p">&quot;</samp><samp class="w"> </samp><samp class="na">suffix</samp><samp class="p">=</samp><samp class="p">&quot;</samp><samp class="s2"> · MyApp</samp><samp class="p">&quot;</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="w">  </samp><samp class="p" data-group-id="4672798671-1">{</samp><samp class="n">assigns</samp><samp class="p" data-group-id="4672798671-ex-1">[</samp><samp class="ss">:page_title</samp><samp class="p" data-group-id="4672798671-ex-1">]</samp><samp class="p" data-group-id="4672798671-1">}</samp><samp class="w">
</samp><samp class="p">&lt;/</samp><samp class="nf">.live_title</samp><samp class="p">&gt;</samp></code></pre>
  </section>
</section>

        </div>
      </section>

      <section id="macros" class="details-list">
        <h1 class="section-heading">Macros</h1>
        <div class="macros-list">
<section class="detail" id="attr/3">

    <span id="attr/2"></span>

  <div class="detail-header">
    <a href="#attr/3" class="detail-link" data-no-tooltip="" aria-label="Link to this macro">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">attr(name, type, opts \\ [])</h1>

        <span class="note">(macro)</span>


        <a href="https://github.com/phoenixframework/phoenix_live_view/blob/v1.1.2/lib/phoenix_component.ex#L2121" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

<p>Declares attributes for a HEEx function components.</p><h2 id="attr/3-arguments" class="section-heading"><a href="#attr/3-arguments" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Arguments</span></h2><ul><li><p><code class="inline">name</code> - an atom defining the name of the attribute. Note that attributes cannot define the
same name as any other attributes or slots declared for the same component.</p></li><li><p><code class="inline">type</code> - an atom defining the type of the attribute.</p></li><li><p><code class="inline">opts</code> - a keyword list of options. Defaults to <code class="inline">[]</code>.</p></li></ul><h3 id="attr/3-types" class="section-heading"><a href="#attr/3-types" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Types</span></h3><p>An attribute is declared by its name, type, and options. The following types are supported:</p><table><thead><tr><th style="text-align: left;">Name</th><th style="text-align: left;">Description</th></tr></thead><tbody><tr><td style="text-align: left;"><code class="inline">:any</code></td><td style="text-align: left;">any term (including <code class="inline">nil</code>)</td></tr><tr><td style="text-align: left;"><code class="inline">:string</code></td><td style="text-align: left;">any binary string</td></tr><tr><td style="text-align: left;"><code class="inline">:atom</code></td><td style="text-align: left;">any atom (including <code class="inline">true</code>, <code class="inline">false</code>, and <code class="inline">nil</code>)</td></tr><tr><td style="text-align: left;"><code class="inline">:boolean</code></td><td style="text-align: left;">any boolean</td></tr><tr><td style="text-align: left;"><code class="inline">:integer</code></td><td style="text-align: left;">any integer</td></tr><tr><td style="text-align: left;"><code class="inline">:float</code></td><td style="text-align: left;">any float</td></tr><tr><td style="text-align: left;"><code class="inline">:list</code></td><td style="text-align: left;">any list of any arbitrary types</td></tr><tr><td style="text-align: left;"><code class="inline">:map</code></td><td style="text-align: left;">any map of any arbitrary types</td></tr><tr><td style="text-align: left;"><code class="inline">:fun</code></td><td style="text-align: left;">any function</td></tr><tr><td style="text-align: left;"><code class="inline">{:fun, arity}</code></td><td style="text-align: left;">any function of arity</td></tr><tr><td style="text-align: left;"><code class="inline">:global</code></td><td style="text-align: left;">any common HTML attributes, plus those defined by <code class="inline">:global_prefixes</code></td></tr><tr><td style="text-align: left;">A struct module</td><td style="text-align: left;">any module that defines a struct with <a href="https://hexdocs.pm/elixir/Kernel.html#defstruct/1"><code class="inline">defstruct/1</code></a></td></tr></tbody></table><p>Note only <code class="inline">:any</code> and <code class="inline">:atom</code> expect the value to be set to <code class="inline">nil</code>.</p><h3 id="attr/3-options" class="section-heading"><a href="#attr/3-options" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Options</span></h3><ul><li><p><code class="inline">:required</code> - marks an attribute as required. If a caller does not pass the given attribute,
a compile warning is issued.</p></li><li><p><code class="inline">:default</code> - the default value for the attribute if not provided. If this option is
not set and the attribute is not given, accessing the attribute will fail unless a
value is explicitly set with <a href="#assign_new/3"><code class="inline">assign_new/3</code></a>.</p></li><li><p><code class="inline">:examples</code> - a non-exhaustive list of values accepted by the attribute, used for documentation
purposes.</p></li><li><p><code class="inline">:values</code> - an exhaustive list of values accepted by the attributes. If a caller passes a literal
not contained in this list, a compile warning is issued.</p></li><li><p><code class="inline">:doc</code> - documentation for the attribute.</p></li></ul><h2 id="attr/3-compile-time-validations" class="section-heading"><a href="#attr/3-compile-time-validations" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Compile-Time Validations</span></h2><p>LiveView performs some validation of attributes via the <code class="inline">:phoenix_live_view</code> compiler.
When attributes are defined, LiveView will warn at compilation time on the caller if:</p><ul><li><p>A required attribute of a component is missing.</p></li><li><p>An unknown attribute is given.</p></li><li><p>You specify a literal attribute (such as <code class="inline">value=&quot;string&quot;</code> or <code class="inline">value</code>, but not <code class="inline">value={expr}</code>)
and the type does not match. The following types currently support literal validation:
<code class="inline">:string</code>, <code class="inline">:atom</code>, <code class="inline">:boolean</code>, <code class="inline">:integer</code>, <code class="inline">:float</code>, <code class="inline">:map</code> and <code class="inline">:list</code>.</p></li><li><p>You specify a literal attribute and it is not a member of the <code class="inline">:values</code> list.</p></li></ul><p>LiveView does not perform any validation at runtime. This means the type information is mostly
used for documentation and reflection purposes.</p><p>On the side of the LiveView component itself, defining attributes provides the following quality
of life improvements:</p><ul><li><p>The default value of all attributes will be added to the <code class="inline">assigns</code> map upfront.</p></li><li><p>Attribute documentation is generated for the component.</p></li><li><p>Required struct types are annotated and emit compilation warnings. For example, if you specify
<code class="inline">attr :user, User, required: true</code> and then you write <code class="inline">@user.non_valid_field</code> in your template,
a warning will be emitted.</p></li><li><p>Calls made to the component are tracked for reflection and validation purposes.</p></li></ul><h2 id="attr/3-documentation-generation" class="section-heading"><a href="#attr/3-documentation-generation" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Documentation Generation</span></h2><p>Public function components that define attributes will have their attribute
types and docs injected into the function's documentation, depending on the
value of the <code class="inline">@doc</code> module attribute:</p><ul><li><p>if <code class="inline">@doc</code> is a string, the attribute docs are injected into that string. The optional
placeholder <code class="inline">[INSERT LVATTRDOCS]</code> can be used to specify where in the string the docs are
injected. Otherwise, the docs are appended to the end of the <code class="inline">@doc</code> string.</p></li><li><p>if <code class="inline">@doc</code> is unspecified, the attribute docs are used as the default <code class="inline">@doc</code> string.</p></li><li><p>if <code class="inline">@doc</code> is <code class="inline">false</code>, the attribute docs are omitted entirely.</p></li></ul><p>The injected attribute docs are formatted as a markdown list:</p><ul><li><code class="inline">name</code> (<code class="inline">:type</code>) (required) - attr docs. Defaults to <code class="inline">:default</code>.</li></ul><p>By default, all attributes will have their types and docs injected into the function <code class="inline">@doc</code>
string. To hide a specific attribute, you can set the value of <code class="inline">:doc</code> to <code class="inline">false</code>.</p><h2 id="attr/3-example" class="section-heading"><a href="#attr/3-example" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Example</span></h2><pre><code class="makeup elixir" translate="no"><samp class="n">attr</samp><samp class="w"> </samp><samp class="ss">:name</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:string</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">required</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">true</samp><samp class="w">
</samp><samp class="n">attr</samp><samp class="w"> </samp><samp class="ss">:age</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:integer</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">required</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">true</samp><samp class="w">

</samp><samp class="kd">def</samp><samp class="w"> </samp><samp class="nf">celebrate</samp><samp class="p" data-group-id="6604161370-1">(</samp><samp class="n">assigns</samp><samp class="p" data-group-id="6604161370-1">)</samp><samp class="w"> </samp><samp class="k" data-group-id="6604161370-2">do</samp><samp class="w">
  </samp><samp class="sx">~H&quot;&quot;&quot;</samp><samp class="w">
</samp><samp class="w">  </samp><samp class="p">&lt;</samp><samp class="nt">p</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="n">    Happy birthday </samp><samp class="p" data-group-id="1548253877-1">{</samp><samp class="na">@name</samp><samp class="p" data-group-id="1548253877-1">}</samp><samp class="n">!
</samp><samp class="n">    You are </samp><samp class="p" data-group-id="1548253877-2">{</samp><samp class="na">@age</samp><samp class="p" data-group-id="1548253877-2">}</samp><samp class="n"> years old.
</samp><samp class="w">  </samp><samp class="p">&lt;/</samp><samp class="nt">p</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="w">  </samp><samp class="sx">&quot;&quot;&quot;</samp><samp class="w">
</samp><samp class="k" data-group-id="6604161370-2">end</samp></code></pre>
  </section>
</section>
<section class="detail" id="embed_templates/2">

    <span id="embed_templates/1"></span>

  <div class="detail-header">
    <a href="#embed_templates/2" class="detail-link" data-no-tooltip="" aria-label="Link to this macro">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">embed_templates(pattern, opts \\ [])</h1>

        <span class="note">(macro)</span>


        <a href="https://github.com/phoenixframework/phoenix_live_view/blob/v1.1.2/lib/phoenix_component.ex#L1824" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

<p>Embeds external template files into the module as function components.</p><h2 id="embed_templates/2-options" class="section-heading"><a href="#embed_templates/2-options" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Options</span></h2><ul><li><code class="inline">:root</code> - The root directory to embed files. Defaults to the current
module's directory (<code class="inline">__DIR__</code>)</li><li><code class="inline">:suffix</code> - A string value to append to embedded function names. By
default, function names will be the name of the template file excluding
the format and engine.</li></ul><p>A wildcard pattern may be used to select all files within a directory tree.
For example, imagine a directory listing:</p><pre><code class="plain">├── components.ex
├── pages
│   ├── about_page.html.heex
│   └── welcome_page.html.heex</code></pre><p>Then to embed the page templates in your <code class="inline">components.ex</code> module:</p><pre><code class="makeup elixir" translate="no"><samp class="kd">defmodule</samp><samp class="w"> </samp><samp class="nc">MyAppWeb.Components</samp><samp class="w"> </samp><samp class="k" data-group-id="5031595578-1">do</samp><samp class="w">
  </samp><samp class="kn">use</samp><samp class="w"> </samp><samp class="nc">Phoenix.Component</samp><samp class="w">

  </samp><samp class="n">embed_templates</samp><samp class="w"> </samp><samp class="s">&quot;pages/*&quot;</samp><samp class="w">
</samp><samp class="k" data-group-id="5031595578-1">end</samp></code></pre><p>Now, your module will have an <code class="inline">about_page/1</code> and <code class="inline">welcome_page/1</code> function
component defined. Embedded templates also support declarative assigns
via bodyless function definitions, for example:</p><pre><code class="makeup elixir" translate="no"><samp class="kd">defmodule</samp><samp class="w"> </samp><samp class="nc">MyAppWeb.Components</samp><samp class="w"> </samp><samp class="k" data-group-id="9084982517-1">do</samp><samp class="w">
  </samp><samp class="kn">use</samp><samp class="w"> </samp><samp class="nc">Phoenix.Component</samp><samp class="w">

  </samp><samp class="n">embed_templates</samp><samp class="w"> </samp><samp class="s">&quot;pages/*&quot;</samp><samp class="w">

  </samp><samp class="n">attr</samp><samp class="w"> </samp><samp class="ss">:name</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:string</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">required</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">true</samp><samp class="w">
  </samp><samp class="kd">def</samp><samp class="w"> </samp><samp class="nf">welcome_page</samp><samp class="p" data-group-id="9084982517-2">(</samp><samp class="n">assigns</samp><samp class="p" data-group-id="9084982517-2">)</samp><samp class="w">

  </samp><samp class="n">slot</samp><samp class="w"> </samp><samp class="ss">:header</samp><samp class="w">
  </samp><samp class="kd">def</samp><samp class="w"> </samp><samp class="nf">about_page</samp><samp class="p" data-group-id="9084982517-3">(</samp><samp class="n">assigns</samp><samp class="p" data-group-id="9084982517-3">)</samp><samp class="w">
</samp><samp class="k" data-group-id="9084982517-1">end</samp></code></pre><p>Multiple invocations of <code class="inline">embed_templates</code> is also supported, which can be
useful if you have more than one template format. For example:</p><pre><code class="makeup elixir" translate="no"><samp class="kd">defmodule</samp><samp class="w"> </samp><samp class="nc">MyAppWeb.Emails</samp><samp class="w"> </samp><samp class="k" data-group-id="1670951079-1">do</samp><samp class="w">
  </samp><samp class="kn">use</samp><samp class="w"> </samp><samp class="nc">Phoenix.Component</samp><samp class="w">

  </samp><samp class="n">embed_templates</samp><samp class="w"> </samp><samp class="s">&quot;emails/*.html&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">suffix</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;_html&quot;</samp><samp class="w">
  </samp><samp class="n">embed_templates</samp><samp class="w"> </samp><samp class="s">&quot;emails/*.text&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">suffix</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;_text&quot;</samp><samp class="w">
</samp><samp class="k" data-group-id="1670951079-1">end</samp></code></pre><p>Note: this function is the same as <a href="https://hexdocs.pm/phoenix_template/1.0.4/Phoenix.Template.html#embed_templates/2"><code class="inline">Phoenix.Template.embed_templates/2</code></a>.
It is also provided here for convenience and documentation purposes.
Therefore, if you want to embed templates for other formats, which are
not related to <a href="Phoenix.Component.xhtml"><code class="inline">Phoenix.Component</code></a>, prefer to
<code class="inline">import Phoenix.Template, only: [embed_templates: 1]</code> than this module.</p>
  </section>
</section>
<section class="detail" id="sigil_H/2">

  <div class="detail-header">
    <a href="#sigil_H/2" class="detail-link" data-no-tooltip="" aria-label="Link to this macro">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">sigil_H(arg, modifiers)</h1>

        <span class="note">(macro)</span>


        <a href="https://github.com/phoenixframework/phoenix_live_view/blob/v1.1.2/lib/phoenix_component.ex#L914" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

<p>The <code class="inline">~H</code> sigil for writing HEEx templates inside source files.</p><p><code class="inline">HEEx</code> is a HTML-aware and component-friendly extension of Elixir Embedded
language (<a href="https://hexdocs.pm/eex/EEx.html"><code class="inline">EEx</code></a>) that provides:</p><ul><li><p>Built-in handling of HTML attributes</p></li><li><p>An HTML-like notation for injecting function components</p></li><li><p>Compile-time validation of the structure of the template</p></li><li><p>The ability to minimize the amount of data sent over the wire</p></li><li><p>Out-of-the-box code formatting via <a href="https://hexdocs.pm/mix/Mix.Tasks.Format.html"><code class="inline">mix format</code></a></p></li></ul><h2 id="sigil_H/2-example" class="section-heading"><a href="#sigil_H/2-example" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Example</span></h2><pre><code class="makeup elixir" translate="no"><samp class="sx">~H&quot;&quot;&quot;</samp><samp class="w">
</samp><samp class="p">&lt;</samp><samp class="nt">div</samp><samp class="w"> </samp><samp class="na">title</samp><samp class="p">=</samp><samp class="p">&quot;</samp><samp class="s2">My div</samp><samp class="p">&quot;</samp><samp class="w"> </samp><samp class="na">class</samp><samp class="p">=</samp><samp class="p" data-group-id="8449948670-1">{</samp><samp class="na">@class</samp><samp class="p" data-group-id="8449948670-1">}</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="w">  </samp><samp class="p">&lt;</samp><samp class="nt">p</samp><samp class="p">&gt;</samp><samp class="n">Hello </samp><samp class="p" data-group-id="8449948670-2">{</samp><samp class="na">@name</samp><samp class="p" data-group-id="8449948670-2">}</samp><samp class="p">&lt;/</samp><samp class="nt">p</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="w">  </samp><samp class="p">&lt;</samp><samp class="nc">MyApp.Weather</samp><samp class="o">.</samp><samp class="n">city</samp><samp class="w"> </samp><samp class="na">name</samp><samp class="p">=</samp><samp class="p">&quot;</samp><samp class="s2">Kraków</samp><samp class="p">&quot;</samp><samp class="p">/&gt;</samp><samp class="w">
</samp><samp class="p">&lt;/</samp><samp class="nt">div</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="sx">&quot;&quot;&quot;</samp></code></pre><h2 id="sigil_H/2-syntax" class="section-heading"><a href="#sigil_H/2-syntax" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Syntax</span></h2><p><code class="inline">HEEx</code> is built on top of Embedded Elixir (<a href="https://hexdocs.pm/eex/EEx.html"><code class="inline">EEx</code></a>). In this section, we are going to
cover the basic constructs in <code class="inline">HEEx</code> templates as well as its syntax extensions.</p><h3 id="sigil_H/2-interpolation" class="section-heading"><a href="#sigil_H/2-interpolation" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Interpolation</span></h3><p><code class="inline">HEEx</code> allows using <code class="inline">{...}</code> for HTML-aware interpolation, inside tag attributes
as well as the body:</p><pre><code class="makeup heex" translate="no"><samp class="p">&lt;</samp><samp class="nt">p</samp><samp class="p">&gt;</samp><samp class="n">Hello, </samp><samp class="p" data-group-id="2252411655-1">{</samp><samp class="na">@name</samp><samp class="p" data-group-id="2252411655-1">}</samp><samp class="p">&lt;/</samp><samp class="nt">p</samp><samp class="p">&gt;</samp></code></pre><p>If you want to interpolate an attribute, you write:</p><pre><code class="makeup heex" translate="no"><samp class="p">&lt;</samp><samp class="nt">div</samp><samp class="w"> </samp><samp class="na">class</samp><samp class="p">=</samp><samp class="p" data-group-id="7306446975-1">{</samp><samp class="na">@class</samp><samp class="p" data-group-id="7306446975-1">}</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="n">  ...
</samp><samp class="p">&lt;/</samp><samp class="nt">div</samp><samp class="p">&gt;</samp></code></pre><p>You can put any Elixir expression between <code class="inline">{ ... }</code>. For example, if you want
to set classes, where some are static and others are dynamic, you can using
string interpolation:</p><pre><code class="makeup heex" translate="no"><samp class="p">&lt;</samp><samp class="nt">div</samp><samp class="w"> </samp><samp class="na">class</samp><samp class="p">=</samp><samp class="p" data-group-id="8364830219-1">{</samp><samp class="s">&quot;btn btn-</samp><samp class="si" data-group-id="8364830219-ex-1">#{</samp><samp class="na">@type</samp><samp class="si" data-group-id="8364830219-ex-1">}</samp><samp class="s">&quot;</samp><samp class="p" data-group-id="8364830219-1">}</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="n">  ...
</samp><samp class="p">&lt;/</samp><samp class="nt">div</samp><samp class="p">&gt;</samp></code></pre><p>The following attribute values have special meaning on HTML tags:</p><ul><li><p><code class="inline">true</code> - if a value is <code class="inline">true</code>, the attribute is rendered with no value at all.
For example, <code class="inline">&lt;input required={true}&gt;</code> is the same as <code class="inline">&lt;input required&gt;</code>;</p></li><li><p><code class="inline">false</code> or <code class="inline">nil</code> - if a value is <code class="inline">false</code> or <code class="inline">nil</code>, the attribute is omitted.
Note the <code class="inline">class</code> and <code class="inline">style</code> attributes will be rendered as empty strings,
instead of ommitted, which has the same effect as not rendering them, but
allows for rendering optimizations.</p></li><li><p><code class="inline">list</code> (only for the <code class="inline">class</code> attribute) - each element of the list is processed
as a different class. <code class="inline">nil</code> and <code class="inline">false</code> elements are discarded. Nested lists
are supported and flattened.</p></li></ul><p>For multiple dynamic attributes, you can use the same notation but without
assigning the expression to any specific attribute:</p><pre><code class="makeup heex" translate="no"><samp class="p">&lt;</samp><samp class="nt">div</samp><samp class="w"> </samp><samp class="p" data-group-id="9128436385-1">{</samp><samp class="na">@dynamic_attrs</samp><samp class="p" data-group-id="9128436385-1">}</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="n">  ...
</samp><samp class="p">&lt;/</samp><samp class="nt">div</samp><samp class="p">&gt;</samp></code></pre><p>In this case, the expression inside <code class="inline">{...}</code> must be either a keyword list or
a map containing the key-value pairs representing the dynamic attributes.
If using a map, ensure your keys are atoms.</p><h3 id="sigil_H/2-interpolating-blocks" class="section-heading"><a href="#sigil_H/2-interpolating-blocks" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Interpolating blocks</span></h3><p>The curly braces syntax is the default mechanism for interpolating code.
However, it cannot be used in all scenarios, in particular:</p><ul><li><p>Curly braces cannot be used inside <code class="inline">&lt;script&gt;</code> and <code class="inline">&lt;style&gt;</code> tags,
as that would make writing JS and CSS quite tedious. You can also
fully disable curly braces interpolation in a given tag and
its children by adding the <code class="inline">phx-no-curly-interpolation</code> attribute</p></li><li><p>it does not support multiline block constructs, such as <code class="inline">if</code>,
<code class="inline">case</code>, and similar</p></li></ul><p>For example, if you need to interpolate a string inside a script tag,
you could do:</p><pre><code class="makeup heex" translate="no"><samp class="p">&lt;</samp><samp class="nt">script</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="w">  </samp><samp class="nb">window</samp><samp class="o">.</samp><samp class="no">URL</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="p">&quot;</samp><samp class="p" data-group-id="8735624503-1">&lt;%=</samp><samp class="w"> </samp><samp class="na">@my_url</samp><samp class="w"> </samp><samp class="p" data-group-id="8735624503-1">%&gt;</samp><samp class="p">&quot;</samp><samp class="w">
</samp><samp class="p">&lt;/</samp><samp class="nt">script</samp><samp class="p">&gt;</samp></code></pre><p>Similarly, for block constructs in Elixir, you can write:</p><pre><code class="makeup heex" translate="no"><samp class="p" data-group-id="8711426461-1">&lt;%=</samp><samp class="w"> </samp><samp class="k">if</samp><samp class="w"> </samp><samp class="na">@show_greeting?</samp><samp class="w"> </samp><samp class="k" data-group-id="8711426461-ex-1">do</samp><samp class="w"> </samp><samp class="p" data-group-id="8711426461-1">%&gt;</samp><samp class="w">
</samp><samp class="w">  </samp><samp class="p">&lt;</samp><samp class="nt">p</samp><samp class="p">&gt;</samp><samp class="n">Hello, </samp><samp class="p" data-group-id="8711426461-2">{</samp><samp class="na">@name</samp><samp class="p" data-group-id="8711426461-2">}</samp><samp class="p">&lt;/</samp><samp class="nt">p</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="p" data-group-id="8711426461-3">&lt;%</samp><samp class="w"> </samp><samp class="k" data-group-id="8711426461-ex-1">end</samp><samp class="w"> </samp><samp class="p" data-group-id="8711426461-3">%&gt;</samp></code></pre><p>However, for conditionals and for-comprehensions, there are built-in constructs
in HEEx too, which we will explore next.</p><section role="note" class="admonition tip"><h4 class="admonition-title tip">Curly braces in text within tag bodies</h4><p>If you have text in your tag bodies, which includes curly braces you can use
<code class="inline">&amp;lbrace;</code> or <code class="inline">&lt;%= &quot;{&quot; %&gt;</code> to prevent them from being considered the start of
interpolation.</p></section><h3 id="sigil_H/2-special-attributes" class="section-heading"><a href="#sigil_H/2-special-attributes" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Special attributes</span></h3><p>Apart from normal HTML attributes, HEEx also supports some special attributes
such as <code class="inline">:let</code> and <code class="inline">:for</code>.</p><h4>:let</h4><p>This is used by components and slots that want to yield a value back to the
caller. For an example, see how <a href="#form/1"><code class="inline">form/1</code></a> works:</p><pre><code class="makeup heex" translate="no"><samp class="p">&lt;</samp><samp class="nf">.form</samp><samp class="w"> </samp><samp class="na">:let</samp><samp class="p">=</samp><samp class="p" data-group-id="5383210841-1">{</samp><samp class="n">f</samp><samp class="p" data-group-id="5383210841-1">}</samp><samp class="w"> </samp><samp class="na">for</samp><samp class="p">=</samp><samp class="p" data-group-id="5383210841-2">{</samp><samp class="na">@form</samp><samp class="p" data-group-id="5383210841-2">}</samp><samp class="w"> </samp><samp class="na">phx-change</samp><samp class="p">=</samp><samp class="p">&quot;</samp><samp class="s2">validate</samp><samp class="p">&quot;</samp><samp class="w"> </samp><samp class="na">phx-submit</samp><samp class="p">=</samp><samp class="p">&quot;</samp><samp class="s2">save</samp><samp class="p">&quot;</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="w">  </samp><samp class="p">&lt;</samp><samp class="nf">.input</samp><samp class="w"> </samp><samp class="na">field</samp><samp class="p">=</samp><samp class="p" data-group-id="5383210841-3">{</samp><samp class="n">f</samp><samp class="p" data-group-id="5383210841-ex-1">[</samp><samp class="ss">:username</samp><samp class="p" data-group-id="5383210841-ex-1">]</samp><samp class="p" data-group-id="5383210841-3">}</samp><samp class="w"> </samp><samp class="na">type</samp><samp class="p">=</samp><samp class="p">&quot;</samp><samp class="s2">text</samp><samp class="p">&quot;</samp><samp class="w"> </samp><samp class="p">/&gt;</samp><samp class="w">
</samp><samp class="n">  ...
</samp><samp class="p">&lt;/</samp><samp class="nf">.form</samp><samp class="p">&gt;</samp></code></pre><p>Notice how the variable <code class="inline">f</code>, defined by <code class="inline">.form</code> is used by your <code class="inline">input</code> component.
The <a href="Phoenix.Component.xhtml"><code class="inline">Phoenix.Component</code></a> module has detailed documentation on how to use and
implement such functionality.</p><h4>:if and :for</h4><p>It is a syntax sugar for <code class="inline">&lt;%= if .. do %&gt;</code> and <code class="inline">&lt;%= for .. do %&gt;</code> that can be
used in regular HTML, function components, and slots.</p><p>For example in an HTML tag:</p><pre><code class="makeup heex" translate="no"><samp class="p">&lt;</samp><samp class="nt">table</samp><samp class="w"> </samp><samp class="na">id</samp><samp class="p">=</samp><samp class="p">&quot;</samp><samp class="s2">a</samp><samp class="s2">d</samp><samp class="s2">m</samp><samp class="s2">i</samp><samp class="s2">n</samp><samp class="s2">-</samp><samp class="s2">t</samp><samp class="s2">a</samp><samp class="s2">b</samp><samp class="s2">l</samp><samp class="s2">e</samp><samp class="p">&quot;</samp><samp class="w"> </samp><samp class="na">:if</samp><samp class="p">=</samp><samp class="p" data-group-id="9445935943-1">{</samp><samp class="na">@admin?</samp><samp class="p" data-group-id="9445935943-1">}</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="w">  </samp><samp class="p">&lt;</samp><samp class="nt">tr</samp><samp class="w"> </samp><samp class="na">:for</samp><samp class="p">=</samp><samp class="p" data-group-id="9445935943-2">{</samp><samp class="n">user</samp><samp class="w"> </samp><samp class="o">&lt;-</samp><samp class="w"> </samp><samp class="na">@users</samp><samp class="p" data-group-id="9445935943-2">}</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="w">    </samp><samp class="p">&lt;</samp><samp class="nt">td</samp><samp class="p">&gt;</samp><samp class="p" data-group-id="9445935943-3">{</samp><samp class="n">user</samp><samp class="o">.</samp><samp class="n">name</samp><samp class="p" data-group-id="9445935943-3">}</samp><samp class="p">&lt;/</samp><samp class="nt">td</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="w">  </samp><samp class="p">&lt;/</samp><samp class="nt">tr</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="p">&lt;</samp><samp class="nt">table</samp><samp class="p">&gt;</samp></code></pre><p>The snippet above will only render the table if <code class="inline">@admin?</code> is true,
and generate a <code class="inline">tr</code> per user as you would expect from the collection.</p><p><code class="inline">:for</code> can be used similarly in function components:</p><pre><code class="makeup heex" translate="no"><samp class="p">&lt;</samp><samp class="nf">.error</samp><samp class="w"> </samp><samp class="na">:for</samp><samp class="p">=</samp><samp class="p" data-group-id="7185102713-1">{</samp><samp class="n">msg</samp><samp class="w"> </samp><samp class="o">&lt;-</samp><samp class="w"> </samp><samp class="na">@errors</samp><samp class="p" data-group-id="7185102713-1">}</samp><samp class="w"> </samp><samp class="na">message</samp><samp class="p">=</samp><samp class="p" data-group-id="7185102713-2">{</samp><samp class="n">msg</samp><samp class="p" data-group-id="7185102713-2">}</samp><samp class="p">/&gt;</samp></code></pre><p>Which is equivalent to writing:</p><pre><code class="makeup heex" translate="no"><samp class="p" data-group-id="6670216528-1">&lt;%=</samp><samp class="w"> </samp><samp class="k">for</samp><samp class="w"> </samp><samp class="n">msg</samp><samp class="w"> </samp><samp class="o">&lt;-</samp><samp class="w"> </samp><samp class="na">@errors</samp><samp class="w"> </samp><samp class="k" data-group-id="6670216528-ex-1">do</samp><samp class="w"> </samp><samp class="p" data-group-id="6670216528-1">%&gt;</samp><samp class="w">
</samp><samp class="w">  </samp><samp class="p">&lt;</samp><samp class="nf">.error</samp><samp class="w"> </samp><samp class="na">message</samp><samp class="p">=</samp><samp class="p" data-group-id="6670216528-2">{</samp><samp class="n">msg</samp><samp class="p" data-group-id="6670216528-2">}</samp><samp class="w"> </samp><samp class="p">/&gt;</samp><samp class="w">
</samp><samp class="p" data-group-id="6670216528-3">&lt;%</samp><samp class="w"> </samp><samp class="k" data-group-id="6670216528-ex-1">end</samp><samp class="w"> </samp><samp class="p" data-group-id="6670216528-3">%&gt;</samp></code></pre><p>And <code class="inline">:for</code> in slots behaves the same way:</p><pre><code class="makeup heex" translate="no"><samp class="p">&lt;</samp><samp class="nf">.table</samp><samp class="w"> </samp><samp class="na">id</samp><samp class="p">=</samp><samp class="p">&quot;</samp><samp class="s2">m</samp><samp class="s2">y</samp><samp class="s2">-</samp><samp class="s2">t</samp><samp class="s2">a</samp><samp class="s2">b</samp><samp class="s2">l</samp><samp class="s2">e</samp><samp class="p">&quot;</samp><samp class="w"> </samp><samp class="na">rows</samp><samp class="p">=</samp><samp class="p" data-group-id="7910716880-1">{</samp><samp class="na">@users</samp><samp class="p" data-group-id="7910716880-1">}</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="w">  </samp><samp class="p">&lt;</samp><samp class="ss">:col</samp><samp class="w"> </samp><samp class="na">:for</samp><samp class="p">=</samp><samp class="p" data-group-id="7910716880-2">{</samp><samp class="n">header</samp><samp class="w"> </samp><samp class="o">&lt;-</samp><samp class="w"> </samp><samp class="na">@headers</samp><samp class="p" data-group-id="7910716880-2">}</samp><samp class="w"> </samp><samp class="na">:let</samp><samp class="p">=</samp><samp class="p" data-group-id="7910716880-3">{</samp><samp class="n">user</samp><samp class="p" data-group-id="7910716880-3">}</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="w">    </samp><samp class="p">&lt;</samp><samp class="nt">td</samp><samp class="p">&gt;</samp><samp class="p" data-group-id="7910716880-4">{</samp><samp class="n">user</samp><samp class="p" data-group-id="7910716880-ex-1">[</samp><samp class="n">header</samp><samp class="p" data-group-id="7910716880-ex-1">]</samp><samp class="p" data-group-id="7910716880-4">}</samp><samp class="p">&lt;/</samp><samp class="nt">td</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="w">  </samp><samp class="p">&lt;/</samp><samp class="ss">:col</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="p">&lt;</samp><samp class="nf">.table</samp><samp class="p">&gt;</samp></code></pre><p>You can also combine <code class="inline">:for</code> and <code class="inline">:if</code> for tags, components, and slot to act as a filter:</p><pre><code class="makeup heex" translate="no"><samp class="p">&lt;</samp><samp class="nf">.error</samp><samp class="w"> </samp><samp class="na">:for</samp><samp class="p">=</samp><samp class="p" data-group-id="2011813019-1">{</samp><samp class="n">msg</samp><samp class="w"> </samp><samp class="o">&lt;-</samp><samp class="w"> </samp><samp class="na">@errors</samp><samp class="p" data-group-id="2011813019-1">}</samp><samp class="w"> </samp><samp class="na">:if</samp><samp class="p">=</samp><samp class="p" data-group-id="2011813019-2">{</samp><samp class="n">msg</samp><samp class="w"> </samp><samp class="o">!=</samp><samp class="w"> </samp><samp class="no">nil</samp><samp class="p" data-group-id="2011813019-2">}</samp><samp class="w"> </samp><samp class="na">message</samp><samp class="p">=</samp><samp class="p" data-group-id="2011813019-3">{</samp><samp class="n">msg</samp><samp class="p" data-group-id="2011813019-3">}</samp><samp class="w"> </samp><samp class="p">/&gt;</samp></code></pre><p>Note that unlike Elixir's regular <code class="inline">for</code>, HEEx' <code class="inline">:for</code> does not support multiple
generators in one expression. In such cases, you must use <a href="https://hexdocs.pm/eex/EEx.html"><code class="inline">EEx</code></a>'s blocks.</p><section role="note" class="admonition warning"><h4 class="admonition-title warning">Change tracking <code class="inline">:for</code> on slots</h4><p>Compared to regular HTML tags and components, LiveView does not
optimize comprehensions on slots.
This means that if <code class="inline">@headers</code> changes in the example above, all
headers are sent over the wire again.</p><p>Furthermore, <code class="inline">:key</code> (see below) is also not supported on slots
right now.</p></section><h4><code class="inline">:key</code>ed comprehensions</h4><p>When using <code class="inline">:for</code>, you can optionally provide a <code class="inline">:key</code> expression to perform
better change tracking inside the comprehension:</p><pre><code class="makeup heex" translate="no"><samp class="p">&lt;</samp><samp class="nt">ul</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="w">  </samp><samp class="p">&lt;</samp><samp class="nt">li</samp><samp class="w"> </samp><samp class="na">:for</samp><samp class="p">=</samp><samp class="p" data-group-id="0709990512-1">{</samp><samp class="p" data-group-id="0709990512-ex-1">%{</samp><samp class="ss">id</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="n">id</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">name</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="n">name</samp><samp class="p" data-group-id="0709990512-ex-1">}</samp><samp class="w"> </samp><samp class="o">&lt;-</samp><samp class="w"> </samp><samp class="na">@items</samp><samp class="p" data-group-id="0709990512-1">}</samp><samp class="w"> </samp><samp class="na">:key</samp><samp class="p">=</samp><samp class="p" data-group-id="0709990512-2">{</samp><samp class="n">id</samp><samp class="p" data-group-id="0709990512-2">}</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="n">    Count: </samp><samp class="p">&lt;</samp><samp class="nt">span</samp><samp class="p">&gt;</samp><samp class="p" data-group-id="0709990512-3">{</samp><samp class="na">@count</samp><samp class="p" data-group-id="0709990512-3">}</samp><samp class="p">&lt;/</samp><samp class="nt">span</samp><samp class="p">&gt;</samp><samp class="n">,
</samp><samp class="n">    item: </samp><samp class="p" data-group-id="0709990512-4">{</samp><samp class="n">name</samp><samp class="p" data-group-id="0709990512-4">}</samp><samp class="n">
</samp><samp class="w">  </samp><samp class="p">&lt;/</samp><samp class="nt">li</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="p">&lt;/</samp><samp class="nt">ul</samp><samp class="p">&gt;</samp></code></pre><p>By default, the index is used as a key, which means that appending an entry leads to
all items being considered changed. Therefore, we recommend to use a <code class="inline">:key</code> whenever possible.</p><p>Note that the <code class="inline">:key</code> has no effect when using <a href="Phoenix.LiveView.xhtml#stream/4">streams</a>.</p><h3 id="sigil_H/2-function-components" class="section-heading"><a href="#sigil_H/2-function-components" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Function components</span></h3><p>Function components are stateless components implemented as pure functions
with the help of the <a href="Phoenix.Component.xhtml"><code class="inline">Phoenix.Component</code></a> module. They can be either local
(same module) or remote (external module).</p><p><code class="inline">HEEx</code> allows invoking these function components directly in the template
using an HTML-like notation. For example, a remote function:</p><pre><code class="makeup heex" translate="no"><samp class="p">&lt;</samp><samp class="nc">MyApp.Weather</samp><samp class="o">.</samp><samp class="n">city</samp><samp class="w"> </samp><samp class="na">name</samp><samp class="p">=</samp><samp class="p">&quot;</samp><samp class="s2">Kraków</samp><samp class="p">&quot;</samp><samp class="p">/&gt;</samp></code></pre><p>A local function can be invoked with a leading dot:</p><pre><code class="makeup heex" translate="no"><samp class="p">&lt;</samp><samp class="nf">.city</samp><samp class="w"> </samp><samp class="na">name</samp><samp class="p">=</samp><samp class="p">&quot;</samp><samp class="s2">Kraków</samp><samp class="p">&quot;</samp><samp class="p">/&gt;</samp></code></pre><p>where the component could be defined as follows:</p><pre><code class="makeup elixir" translate="no"><samp class="kd">defmodule</samp><samp class="w"> </samp><samp class="nc">MyApp.Weather</samp><samp class="w"> </samp><samp class="k" data-group-id="6277773477-1">do</samp><samp class="w">
  </samp><samp class="kn">use</samp><samp class="w"> </samp><samp class="nc">Phoenix.Component</samp><samp class="w">

  </samp><samp class="kd">def</samp><samp class="w"> </samp><samp class="nf">city</samp><samp class="p" data-group-id="6277773477-2">(</samp><samp class="n">assigns</samp><samp class="p" data-group-id="6277773477-2">)</samp><samp class="w"> </samp><samp class="k" data-group-id="6277773477-3">do</samp><samp class="w">
    </samp><samp class="sx">~H&quot;&quot;&quot;</samp><samp class="w">
</samp><samp class="n">    The chosen city is: </samp><samp class="p" data-group-id="7902599983-1">{</samp><samp class="na">@name</samp><samp class="p" data-group-id="7902599983-1">}</samp><samp class="n">.
</samp><samp class="w">    </samp><samp class="sx">&quot;&quot;&quot;</samp><samp class="w">
  </samp><samp class="k" data-group-id="6277773477-3">end</samp><samp class="w">

  </samp><samp class="kd">def</samp><samp class="w"> </samp><samp class="nf">country</samp><samp class="p" data-group-id="6277773477-4">(</samp><samp class="n">assigns</samp><samp class="p" data-group-id="6277773477-4">)</samp><samp class="w"> </samp><samp class="k" data-group-id="6277773477-5">do</samp><samp class="w">
    </samp><samp class="sx">~H&quot;&quot;&quot;</samp><samp class="w">
</samp><samp class="n">    The chosen country is: </samp><samp class="p" data-group-id="9231489204-1">{</samp><samp class="na">@name</samp><samp class="p" data-group-id="9231489204-1">}</samp><samp class="n">.
</samp><samp class="w">    </samp><samp class="sx">&quot;&quot;&quot;</samp><samp class="w">
  </samp><samp class="k" data-group-id="6277773477-5">end</samp><samp class="w">
</samp><samp class="k" data-group-id="6277773477-1">end</samp></code></pre><p>It is typically best to group related functions into a single module, as
opposed to having many modules with a single <code class="inline">render/1</code> function. Function
components support other important features, such as slots. You can learn
more about components in <a href="Phoenix.Component.xhtml"><code class="inline">Phoenix.Component</code></a>.</p><h2 id="sigil_H/2-code-formatting" class="section-heading"><a href="#sigil_H/2-code-formatting" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Code formatting</span></h2><p>You can automatically format HEEx templates (.heex) and <code class="inline">~H</code> sigils
using <a href="Phoenix.LiveView.HTMLFormatter.xhtml"><code class="inline">Phoenix.LiveView.HTMLFormatter</code></a>. Please check that module
for more information.</p>
  </section>
</section>
<section class="detail" id="slot/2">

    <span id="slot/1"></span>

  <div class="detail-header">
    <a href="#slot/2" class="detail-link" data-no-tooltip="" aria-label="Link to this macro">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">slot(name, opts \\ [])</h1>

        <span class="note">(macro)</span>


        <a href="https://github.com/phoenixframework/phoenix_live_view/blob/v1.1.2/lib/phoenix_component.ex#L1989" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

<p>Declares a slot. See <a href="#slot/3"><code class="inline">slot/3</code></a> for more information.</p>
  </section>
</section>
<section class="detail" id="slot/3">

  <div class="detail-header">
    <a href="#slot/3" class="detail-link" data-no-tooltip="" aria-label="Link to this macro">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">slot(name, opts, block)</h1>

        <span class="note">(macro)</span>


        <a href="https://github.com/phoenixframework/phoenix_live_view/blob/v1.1.2/lib/phoenix_component.ex#L1970" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

<p>Declares a function component slot.</p><h2 id="slot/3-arguments" class="section-heading"><a href="#slot/3-arguments" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Arguments</span></h2><ul><li><p><code class="inline">name</code> - an atom defining the name of the slot. Note that slots cannot define the same name
as any other slots or attributes declared for the same component.</p></li><li><p><code class="inline">opts</code> - a keyword list of options. Defaults to <code class="inline">[]</code>.</p></li><li><p><code class="inline">block</code> - a code block containing calls to <a href="#attr/3"><code class="inline">attr/3</code></a>. Defaults to <code class="inline">nil</code>.</p></li></ul><h3 id="slot/3-options" class="section-heading"><a href="#slot/3-options" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Options</span></h3><ul><li><p><code class="inline">:required</code> - marks a slot as required. If a caller does not pass a value for a required slot,
a compilation warning is emitted. Otherwise, an omitted slot will default to <code class="inline">[]</code>.</p></li><li><p><code class="inline">:validate_attrs</code> - when set to <code class="inline">false</code>, no warning is emitted when a caller passes attributes
to a slot defined without a do block. If not set, defaults to <code class="inline">true</code>.</p></li><li><p><code class="inline">:doc</code> - documentation for the slot. Any slot attributes declared
will have their documentation listed alongside the slot.</p></li></ul><h3 id="slot/3-slot-attributes" class="section-heading"><a href="#slot/3-slot-attributes" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Slot Attributes</span></h3><p>A named slot may declare attributes by passing a block with calls to <a href="#attr/3"><code class="inline">attr/3</code></a>.</p><p>Unlike attributes, slot attributes cannot accept the <code class="inline">:default</code> option. Passing one
will result in a compile warning being issued.</p><h3 id="slot/3-the-default-slot" class="section-heading"><a href="#slot/3-the-default-slot" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">The Default Slot</span></h3><p>The default slot can be declared by passing <code class="inline">:inner_block</code> as the <code class="inline">name</code> of the slot.</p><p>Note that the <code class="inline">:inner_block</code> slot declaration cannot accept a block. Passing one will
result in a compilation error.</p><h2 id="slot/3-compile-time-validations" class="section-heading"><a href="#slot/3-compile-time-validations" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Compile-Time Validations</span></h2><p>LiveView performs some validation of slots via the <code class="inline">:phoenix_live_view</code> compiler.
When slots are defined, LiveView will warn at compilation time on the caller if:</p><ul><li><p>A required slot of a component is missing.</p></li><li><p>An unknown slot is given.</p></li><li><p>An unknown slot attribute is given.</p></li></ul><p>On the side of the function component itself, defining attributes provides the following
quality of life improvements:</p><ul><li><p>Slot documentation is generated for the component.</p></li><li><p>Calls made to the component are tracked for reflection and validation purposes.</p></li></ul><h2 id="slot/3-documentation-generation" class="section-heading"><a href="#slot/3-documentation-generation" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Documentation Generation</span></h2><p>Public function components that define slots will have their docs injected into the function's
documentation, depending on the value of the <code class="inline">@doc</code> module attribute:</p><ul><li><p>if <code class="inline">@doc</code> is a string, the slot docs are injected into that string. The optional placeholder
<code class="inline">[INSERT LVATTRDOCS]</code> can be used to specify where in the string the docs are injected.
Otherwise, the docs are appended to the end of the <code class="inline">@doc</code> string.</p></li><li><p>if <code class="inline">@doc</code> is unspecified, the slot docs are used as the default <code class="inline">@doc</code> string.</p></li><li><p>if <code class="inline">@doc</code> is <code class="inline">false</code>, the slot docs are omitted entirely.</p></li></ul><p>The injected slot docs are formatted as a markdown list:</p><ul><li><code class="inline">name</code> (required) - slot docs. Accepts attributes:<ul><li><code class="inline">name</code> (<code class="inline">:type</code>) (required) - attr docs. Defaults to <code class="inline">:default</code>.</li></ul></li></ul><p>By default, all slots will have their docs injected into the function <code class="inline">@doc</code> string.
To hide a specific slot, you can set the value of <code class="inline">:doc</code> to <code class="inline">false</code>.</p><h2 id="slot/3-example" class="section-heading"><a href="#slot/3-example" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Example</span></h2><pre><code class="makeup elixir" translate="no"><samp class="n">slot</samp><samp class="w"> </samp><samp class="ss">:header</samp><samp class="w">
</samp><samp class="n">slot</samp><samp class="w"> </samp><samp class="ss">:inner_block</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">required</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">true</samp><samp class="w">
</samp><samp class="n">slot</samp><samp class="w"> </samp><samp class="ss">:footer</samp><samp class="w">

</samp><samp class="kd">def</samp><samp class="w"> </samp><samp class="nf">modal</samp><samp class="p" data-group-id="1569114003-1">(</samp><samp class="n">assigns</samp><samp class="p" data-group-id="1569114003-1">)</samp><samp class="w"> </samp><samp class="k" data-group-id="1569114003-2">do</samp><samp class="w">
  </samp><samp class="sx">~H&quot;&quot;&quot;</samp><samp class="w">
</samp><samp class="w">  </samp><samp class="p">&lt;</samp><samp class="nt">div</samp><samp class="w"> </samp><samp class="na">class</samp><samp class="p">=</samp><samp class="p">&quot;</samp><samp class="s2">m</samp><samp class="s2">o</samp><samp class="s2">d</samp><samp class="s2">a</samp><samp class="s2">l</samp><samp class="p">&quot;</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="w">    </samp><samp class="p">&lt;</samp><samp class="nt">div</samp><samp class="w"> </samp><samp class="na">class</samp><samp class="p">=</samp><samp class="p">&quot;</samp><samp class="s2">m</samp><samp class="s2">o</samp><samp class="s2">d</samp><samp class="s2">a</samp><samp class="s2">l</samp><samp class="s2">-</samp><samp class="s2">h</samp><samp class="s2">e</samp><samp class="s2">a</samp><samp class="s2">d</samp><samp class="s2">e</samp><samp class="s2">r</samp><samp class="p">&quot;</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="w">      </samp><samp class="p" data-group-id="6907030554-1">{</samp><samp class="n">render_slot</samp><samp class="p" data-group-id="1569114003-3">(</samp><samp class="na">@header</samp><samp class="p" data-group-id="1569114003-3">)</samp><samp class="w"> </samp><samp class="o">||</samp><samp class="w"> </samp><samp class="s">&quot;Modal&quot;</samp><samp class="p" data-group-id="6907030554-1">}</samp><samp class="w">
</samp><samp class="w">    </samp><samp class="p">&lt;/</samp><samp class="nt">div</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="w">    </samp><samp class="p">&lt;</samp><samp class="nt">div</samp><samp class="w"> </samp><samp class="na">class</samp><samp class="p">=</samp><samp class="p">&quot;</samp><samp class="s2">m</samp><samp class="s2">o</samp><samp class="s2">d</samp><samp class="s2">a</samp><samp class="s2">l</samp><samp class="s2">-</samp><samp class="s2">b</samp><samp class="s2">o</samp><samp class="s2">d</samp><samp class="s2">y</samp><samp class="p">&quot;</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="w">      </samp><samp class="p" data-group-id="6907030554-2">{</samp><samp class="n">render_slot</samp><samp class="p" data-group-id="1569114003-4">(</samp><samp class="na">@inner_block</samp><samp class="p" data-group-id="1569114003-4">)</samp><samp class="p" data-group-id="6907030554-2">}</samp><samp class="w">
</samp><samp class="w">    </samp><samp class="p">&lt;/</samp><samp class="nt">div</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="w">    </samp><samp class="p">&lt;</samp><samp class="nt">div</samp><samp class="w"> </samp><samp class="na">class</samp><samp class="p">=</samp><samp class="p">&quot;</samp><samp class="s2">m</samp><samp class="s2">o</samp><samp class="s2">d</samp><samp class="s2">a</samp><samp class="s2">l</samp><samp class="s2">-</samp><samp class="s2">f</samp><samp class="s2">o</samp><samp class="s2">o</samp><samp class="s2">t</samp><samp class="s2">e</samp><samp class="s2">r</samp><samp class="p">&quot;</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="w">      </samp><samp class="p" data-group-id="6907030554-3">{</samp><samp class="n">render_slot</samp><samp class="p" data-group-id="1569114003-5">(</samp><samp class="na">@footer</samp><samp class="p" data-group-id="1569114003-5">)</samp><samp class="w"> </samp><samp class="o">||</samp><samp class="w"> </samp><samp class="n">submit_button</samp><samp class="p" data-group-id="1569114003-6">(</samp><samp class="p" data-group-id="1569114003-6">)</samp><samp class="p" data-group-id="6907030554-3">}</samp><samp class="w">
</samp><samp class="w">    </samp><samp class="p">&lt;/</samp><samp class="nt">div</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="w">  </samp><samp class="p">&lt;/</samp><samp class="nt">div</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="w">  </samp><samp class="sx">&quot;&quot;&quot;</samp><samp class="w">
</samp><samp class="k" data-group-id="1569114003-2">end</samp></code></pre><p>As shown in the example above, <a href="#render_slot/1"><code class="inline">render_slot/1</code></a> returns <code class="inline">nil</code> when an optional slot is declared
and none is given. This can be used to attach default behaviour.</p>
  </section>
</section>

        </div>
      </section>

      <section id="functions" class="details-list">
        <h1 class="section-heading">Functions</h1>
        <div class="functions-list">
<section class="detail" id="assign/2">

  <div class="detail-header">
    <a href="#assign/2" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">assign(socket_or_assigns, keyword_or_map)</h1>


        <a href="https://github.com/phoenixframework/phoenix_live_view/blob/v1.1.2/lib/phoenix_component.ex#L1444" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

<p>Adds key-value pairs to assigns.</p><p>The first argument is either a LiveView <code class="inline">socket</code> or an <code class="inline">assigns</code> map from function components.</p><p>A keyword list or a map of assigns must be given as argument to be merged into existing assigns.</p><h2 id="assign/2-examples" class="section-heading"><a href="#assign/2-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="n">assign</samp><samp class="p" data-group-id="0440142650-1">(</samp><samp class="n">socket</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">name</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;Elixir&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">logo</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;💧&quot;</samp><samp class="p" data-group-id="0440142650-1">)</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="n">assign</samp><samp class="p" data-group-id="0440142650-2">(</samp><samp class="n">socket</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="0440142650-3">%{</samp><samp class="ss">name</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;Elixir&quot;</samp><samp class="p" data-group-id="0440142650-3">}</samp><samp class="p" data-group-id="0440142650-2">)</samp></code></pre>
  </section>
</section>
<section class="detail" id="assign/3">

  <div class="detail-header">
    <a href="#assign/3" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">assign(socket_or_assigns, key, value)</h1>


        <a href="https://github.com/phoenixframework/phoenix_live_view/blob/v1.1.2/lib/phoenix_component.ex#L1406" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

<p>Adds a <code class="inline">key</code>-<code class="inline">value</code> pair to <code class="inline">socket_or_assigns</code>.</p><p>The first argument is either a LiveView <code class="inline">socket</code> or an <code class="inline">assigns</code> map from function components.</p><h2 id="assign/3-examples" class="section-heading"><a href="#assign/3-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="n">assign</samp><samp class="p" data-group-id="8697046451-1">(</samp><samp class="n">socket</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:name</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;Elixir&quot;</samp><samp class="p" data-group-id="8697046451-1">)</samp></code></pre>
  </section>
</section>
<section class="detail" id="assign_new/3">

  <div class="detail-header">
    <a href="#assign_new/3" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">assign_new(socket_or_assigns, key, fun)</h1>


        <a href="https://github.com/phoenixframework/phoenix_live_view/blob/v1.1.2/lib/phoenix_component.ex#L1339" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

<p>Assigns the given <code class="inline">key</code> with value from <code class="inline">fun</code> into <code class="inline">socket_or_assigns</code> if one does not yet exist.</p><p>The first argument is either a LiveView <code class="inline">socket</code> or an <code class="inline">assigns</code> map from function components.</p><p>This function is useful for lazily assigning values and sharing assigns.
We will cover both use cases next.</p><h2 id="assign_new/3-lazy-assigns" class="section-heading"><a href="#assign_new/3-lazy-assigns" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Lazy assigns</span></h2><p>Imagine you have a function component that accepts a color:</p><pre><code class="makeup heex" translate="no"><samp class="p">&lt;</samp><samp class="nf">.my_component</samp><samp class="w"> </samp><samp class="na">bg_color</samp><samp class="p">=</samp><samp class="p">&quot;</samp><samp class="s2">red</samp><samp class="p">&quot;</samp><samp class="w"> </samp><samp class="p">/&gt;</samp></code></pre><p>The color is also optional, so you can skip it:</p><pre><code class="makeup heex" translate="no"><samp class="p">&lt;</samp><samp class="nf">.my_component</samp><samp class="w"> </samp><samp class="p">/&gt;</samp></code></pre><p>In such cases, the implementation can use <code class="inline">assign_new</code> to lazily
assign a color if none is given. Let's make it so it picks a random one
when none is given:</p><pre><code class="makeup elixir" translate="no"><samp class="kd">def</samp><samp class="w"> </samp><samp class="nf">my_component</samp><samp class="p" data-group-id="4694236925-1">(</samp><samp class="n">assigns</samp><samp class="p" data-group-id="4694236925-1">)</samp><samp class="w"> </samp><samp class="k" data-group-id="4694236925-2">do</samp><samp class="w">
  </samp><samp class="n">assigns</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="n">assign_new</samp><samp class="p" data-group-id="4694236925-3">(</samp><samp class="n">assigns</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:bg_color</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="k" data-group-id="4694236925-4">fn</samp><samp class="w"> </samp><samp class="o">-&gt;</samp><samp class="w"> </samp><samp class="nc">Enum</samp><samp class="o">.</samp><samp class="n">random</samp><samp class="p" data-group-id="4694236925-5">(</samp><samp class="sx">~w(bg-red-200 bg-green-200 bg-blue-200)</samp><samp class="p" data-group-id="4694236925-5">)</samp><samp class="w"> </samp><samp class="k" data-group-id="4694236925-4">end</samp><samp class="p" data-group-id="4694236925-3">)</samp><samp class="w">

  </samp><samp class="sx">~H&quot;&quot;&quot;</samp><samp class="w">
</samp><samp class="w">  </samp><samp class="p">&lt;</samp><samp class="nt">div</samp><samp class="w"> </samp><samp class="na">class</samp><samp class="p">=</samp><samp class="p" data-group-id="5420527776-1">{</samp><samp class="na">@bg_color</samp><samp class="p" data-group-id="5420527776-1">}</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="n">    Example
</samp><samp class="w">  </samp><samp class="p">&lt;/</samp><samp class="nt">div</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="w">  </samp><samp class="sx">&quot;&quot;&quot;</samp><samp class="w">
</samp><samp class="k" data-group-id="4694236925-2">end</samp></code></pre><h2 id="assign_new/3-sharing-assigns" class="section-heading"><a href="#assign_new/3-sharing-assigns" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Sharing assigns</span></h2><p>It is possible to share assigns between the Plug pipeline and LiveView on disconnected render
and between parent-child LiveViews when connected.</p><h3 id="assign_new/3-when-disconnected" class="section-heading"><a href="#assign_new/3-when-disconnected" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">When disconnected</span></h3><p>When a user first accesses an application using LiveView, the LiveView is first rendered in its
disconnected state, as part of a regular HTML response. By using <code class="inline">assign_new</code> in the mount
callback of your LiveView, you can instruct LiveView to re-use any assigns already set in <code class="inline">conn</code>
during disconnected state.</p><p>Imagine you have a Plug that does:</p><pre><code class="makeup elixir" translate="no"><samp class="c1"># A plug</samp><samp class="w">
</samp><samp class="kd">def</samp><samp class="w"> </samp><samp class="nf">authenticate</samp><samp class="p" data-group-id="6033558314-1">(</samp><samp class="n">conn</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="c">_opts</samp><samp class="p" data-group-id="6033558314-1">)</samp><samp class="w"> </samp><samp class="k" data-group-id="6033558314-2">do</samp><samp class="w">
  </samp><samp class="k">if</samp><samp class="w"> </samp><samp class="n">user_id</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="n">get_session</samp><samp class="p" data-group-id="6033558314-3">(</samp><samp class="n">conn</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:user_id</samp><samp class="p" data-group-id="6033558314-3">)</samp><samp class="w"> </samp><samp class="k" data-group-id="6033558314-4">do</samp><samp class="w">
    </samp><samp class="n">assign</samp><samp class="p" data-group-id="6033558314-5">(</samp><samp class="n">conn</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:current_user</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="nc">Accounts</samp><samp class="o">.</samp><samp class="n">get_user!</samp><samp class="p" data-group-id="6033558314-6">(</samp><samp class="n">user_id</samp><samp class="p" data-group-id="6033558314-6">)</samp><samp class="p" data-group-id="6033558314-5">)</samp><samp class="w">
  </samp><samp class="k" data-group-id="6033558314-4">else</samp><samp class="w">
    </samp><samp class="n">send_resp</samp><samp class="p" data-group-id="6033558314-7">(</samp><samp class="n">conn</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:forbidden</samp><samp class="p" data-group-id="6033558314-7">)</samp><samp class="w">
  </samp><samp class="k" data-group-id="6033558314-4">end</samp><samp class="w">
</samp><samp class="k" data-group-id="6033558314-2">end</samp></code></pre><p>You can re-use the <code class="inline">:current_user</code> assign in your LiveView during the initial render:</p><pre><code class="makeup elixir" translate="no"><samp class="kd">def</samp><samp class="w"> </samp><samp class="nf">mount</samp><samp class="p" data-group-id="9664391453-1">(</samp><samp class="c">_params</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="9664391453-2">%{</samp><samp class="s">&quot;user_id&quot;</samp><samp class="w"> </samp><samp class="p">=&gt;</samp><samp class="w"> </samp><samp class="n">user_id</samp><samp class="p" data-group-id="9664391453-2">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">socket</samp><samp class="p" data-group-id="9664391453-1">)</samp><samp class="w"> </samp><samp class="k" data-group-id="9664391453-3">do</samp><samp class="w">
  </samp><samp class="p" data-group-id="9664391453-4">{</samp><samp class="ss">:ok</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">assign_new</samp><samp class="p" data-group-id="9664391453-5">(</samp><samp class="n">socket</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:current_user</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="k" data-group-id="9664391453-6">fn</samp><samp class="w"> </samp><samp class="o">-&gt;</samp><samp class="w"> </samp><samp class="nc">Accounts</samp><samp class="o">.</samp><samp class="n">get_user!</samp><samp class="p" data-group-id="9664391453-7">(</samp><samp class="n">user_id</samp><samp class="p" data-group-id="9664391453-7">)</samp><samp class="w"> </samp><samp class="k" data-group-id="9664391453-6">end</samp><samp class="p" data-group-id="9664391453-5">)</samp><samp class="p" data-group-id="9664391453-4">}</samp><samp class="w">
</samp><samp class="k" data-group-id="9664391453-3">end</samp></code></pre><p>In such case <code class="inline">conn.assigns.current_user</code> will be used if present. If there is no such
<code class="inline">:current_user</code> assign or the LiveView was mounted as part of the live navigation, where no Plug
pipelines are invoked, then the anonymous function is invoked to execute the query instead.</p><h3 id="assign_new/3-when-connected" class="section-heading"><a href="#assign_new/3-when-connected" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">When connected</span></h3><p>LiveView is also able to share assigns via <code class="inline">assign_new</code> with children LiveViews,
as long as the child LiveView is also mounted when the parent LiveView is mounted
and the child LiveView is not rendered with <code class="inline">sticky: true</code>. Let's see an example.</p><p>If the parent LiveView defines a <code class="inline">:current_user</code> assign and the child LiveView also
uses <a href="#assign_new/3"><code class="inline">assign_new/3</code></a> to fetch the <code class="inline">:current_user</code> in its <code class="inline">mount/3</code> callback, as in
the previous subsection, the assign will be fetched from the parent LiveView, once
again avoiding additional database queries.</p><p>Note that <code class="inline">fun</code> also provides access to the previously assigned values:</p><pre><code class="makeup elixir" translate="no"><samp class="n">assigns</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w">
  </samp><samp class="n">assigns</samp><samp class="w">
  </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="n">assign_new</samp><samp class="p" data-group-id="2998508183-1">(</samp><samp class="ss">:foo</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="k" data-group-id="2998508183-2">fn</samp><samp class="w"> </samp><samp class="o">-&gt;</samp><samp class="w"> </samp><samp class="s">&quot;foo&quot;</samp><samp class="w"> </samp><samp class="k" data-group-id="2998508183-2">end</samp><samp class="p" data-group-id="2998508183-1">)</samp><samp class="w">
  </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="n">assign_new</samp><samp class="p" data-group-id="2998508183-3">(</samp><samp class="ss">:bar</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="k" data-group-id="2998508183-4">fn</samp><samp class="w"> </samp><samp class="p" data-group-id="2998508183-5">%{</samp><samp class="ss">foo</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="n">foo</samp><samp class="p" data-group-id="2998508183-5">}</samp><samp class="w"> </samp><samp class="o">-&gt;</samp><samp class="w"> </samp><samp class="n">foo</samp><samp class="w"> </samp><samp class="o">&lt;&gt;</samp><samp class="w"> </samp><samp class="s">&quot;bar&quot;</samp><samp class="w"> </samp><samp class="k" data-group-id="2998508183-4">end</samp><samp class="p" data-group-id="2998508183-3">)</samp></code></pre><p>Assigns sharing is performed when possible but not guaranteed. Therefore, you must
ensure the result of the function given to <a href="#assign_new/3"><code class="inline">assign_new/3</code></a> is the same as if the value
was fetched from the parent. Otherwise consider passing values to the child LiveView
as part of its session.</p>
  </section>
</section>
<section class="detail" id="assigns_to_attributes/2">

    <span id="assigns_to_attributes/1"></span>

  <div class="detail-header">
    <a href="#assigns_to_attributes/2" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">assigns_to_attributes(assigns, exclude \\ [])</h1>


        <a href="https://github.com/phoenixframework/phoenix_live_view/blob/v1.1.2/lib/phoenix_component.ex#L977" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

<p>Filters the assigns as a list of keywords for use in dynamic tag attributes.</p><p>One should prefer to use declarative assigns and <code class="inline">:global</code> attributes
over this function.</p><h2 id="assigns_to_attributes/2-examples" class="section-heading"><a href="#assigns_to_attributes/2-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><p>Imagine the following <code class="inline">my_link</code> component which allows a caller
to pass a <code class="inline">new_window</code> assign, along with any other attributes they
would like to add to the element, such as class, data attributes, etc:</p><pre><code class="makeup heex" translate="no"><samp class="p">&lt;</samp><samp class="nf">.my_link</samp><samp class="w"> </samp><samp class="na">to</samp><samp class="p">=</samp><samp class="p">&quot;</samp><samp class="s2">/</samp><samp class="p">&quot;</samp><samp class="w"> </samp><samp class="na">id</samp><samp class="p">=</samp><samp class="p" data-group-id="2553676616-1">{</samp><samp class="na">@id</samp><samp class="p" data-group-id="2553676616-1">}</samp><samp class="w"> </samp><samp class="na">new_window</samp><samp class="p">=</samp><samp class="p" data-group-id="2553676616-2">{</samp><samp class="no">true</samp><samp class="p" data-group-id="2553676616-2">}</samp><samp class="w"> </samp><samp class="na">class</samp><samp class="p">=</samp><samp class="p">&quot;</samp><samp class="s2">m</samp><samp class="s2">y</samp><samp class="s2">-</samp><samp class="s2">c</samp><samp class="s2">l</samp><samp class="s2">a</samp><samp class="s2">s</samp><samp class="s2">s</samp><samp class="p">&quot;</samp><samp class="p">&gt;</samp><samp class="n">Home</samp><samp class="p">&lt;/</samp><samp class="nf">.my_link</samp><samp class="p">&gt;</samp></code></pre><p>We could support the dynamic attributes with the following component:</p><pre><code class="makeup elixir" translate="no"><samp class="kd">def</samp><samp class="w"> </samp><samp class="nf">my_link</samp><samp class="p" data-group-id="4728447951-1">(</samp><samp class="n">assigns</samp><samp class="p" data-group-id="4728447951-1">)</samp><samp class="w"> </samp><samp class="k" data-group-id="4728447951-2">do</samp><samp class="w">
  </samp><samp class="n">target</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="k">if</samp><samp class="w"> </samp><samp class="n">assigns</samp><samp class="p" data-group-id="4728447951-3">[</samp><samp class="ss">:new_window</samp><samp class="p" data-group-id="4728447951-3">]</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">do</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;_blank&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">else</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">false</samp><samp class="w">
  </samp><samp class="n">extra</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="n">assigns_to_attributes</samp><samp class="p" data-group-id="4728447951-4">(</samp><samp class="n">assigns</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="4728447951-5">[</samp><samp class="ss">:new_window</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:to</samp><samp class="p" data-group-id="4728447951-5">]</samp><samp class="p" data-group-id="4728447951-4">)</samp><samp class="w">

  </samp><samp class="n">assigns</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w">
    </samp><samp class="n">assigns</samp><samp class="w">
    </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="n">assign</samp><samp class="p" data-group-id="4728447951-6">(</samp><samp class="ss">:target</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">target</samp><samp class="p" data-group-id="4728447951-6">)</samp><samp class="w">
    </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="n">assign</samp><samp class="p" data-group-id="4728447951-7">(</samp><samp class="ss">:extra</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">extra</samp><samp class="p" data-group-id="4728447951-7">)</samp><samp class="w">

  </samp><samp class="sx">~H&quot;&quot;&quot;</samp><samp class="w">
</samp><samp class="w">  </samp><samp class="p">&lt;</samp><samp class="nt">a</samp><samp class="w"> </samp><samp class="na">href</samp><samp class="p">=</samp><samp class="p" data-group-id="7034174422-1">{</samp><samp class="na">@to</samp><samp class="p" data-group-id="7034174422-1">}</samp><samp class="w"> </samp><samp class="na">target</samp><samp class="p">=</samp><samp class="p" data-group-id="7034174422-2">{</samp><samp class="na">@target</samp><samp class="p" data-group-id="7034174422-2">}</samp><samp class="w"> </samp><samp class="p" data-group-id="7034174422-3">{</samp><samp class="na">@extra</samp><samp class="p" data-group-id="7034174422-3">}</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="w">    </samp><samp class="p" data-group-id="7034174422-4">{</samp><samp class="n">render_slot</samp><samp class="p" data-group-id="4728447951-8">(</samp><samp class="na">@inner_block</samp><samp class="p" data-group-id="4728447951-8">)</samp><samp class="p" data-group-id="7034174422-4">}</samp><samp class="w">
</samp><samp class="w">  </samp><samp class="p">&lt;/</samp><samp class="nt">a</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="w">  </samp><samp class="sx">&quot;&quot;&quot;</samp><samp class="w">
</samp><samp class="k" data-group-id="4728447951-2">end</samp></code></pre><p>The above would result in the following rendered HTML:</p><pre><code class="makeup heex" translate="no"><samp class="p">&lt;</samp><samp class="nt">a</samp><samp class="w"> </samp><samp class="na">href</samp><samp class="p">=</samp><samp class="p">&quot;</samp><samp class="s2">/</samp><samp class="p">&quot;</samp><samp class="w"> </samp><samp class="na">target</samp><samp class="p">=</samp><samp class="p">&quot;</samp><samp class="s2">_blank</samp><samp class="p">&quot;</samp><samp class="w"> </samp><samp class="na">id</samp><samp class="p">=</samp><samp class="p">&quot;</samp><samp class="s2">1</samp><samp class="p">&quot;</samp><samp class="w"> </samp><samp class="na">class</samp><samp class="p">=</samp><samp class="p">&quot;</samp><samp class="s2">m</samp><samp class="s2">y</samp><samp class="s2">-</samp><samp class="s2">c</samp><samp class="s2">l</samp><samp class="s2">a</samp><samp class="s2">s</samp><samp class="s2">s</samp><samp class="p">&quot;</samp><samp class="p">&gt;</samp><samp class="n">Home</samp><samp class="p">&lt;/</samp><samp class="nt">a</samp><samp class="p">&gt;</samp></code></pre><p>The second argument (optional) to <code class="inline">assigns_to_attributes</code> is a list of keys to
exclude. It typically includes reserved keys by the component itself, which either
do not belong in the markup, or are already handled explicitly by the component.</p>
  </section>
</section>
<section class="detail" id="changed?/2">

  <div class="detail-header">
    <a href="#changed?/2" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">changed?(socket_or_assigns, key)</h1>


        <a href="https://github.com/phoenixframework/phoenix_live_view/blob/v1.1.2/lib/phoenix_component.ex#L1526" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

<p>Checks if the given key changed in <code class="inline">socket_or_assigns</code>.</p><p>The first argument is either a LiveView <code class="inline">socket</code> or an <code class="inline">assigns</code> map from function components.</p><h2 id="changed?/2-examples" class="section-heading"><a href="#changed?/2-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="n">changed?</samp><samp class="p" data-group-id="0693322273-1">(</samp><samp class="n">socket</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:count</samp><samp class="p" data-group-id="0693322273-1">)</samp></code></pre>
  </section>
</section>
<section class="detail" id="live_flash/2">

  <div class="detail-header">
    <a href="#live_flash/2" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">live_flash(other, key)</h1>


        <a href="https://github.com/phoenixframework/phoenix_live_view/blob/v1.1.2/lib/phoenix_component.ex#L1183" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

    <div class="deprecated">
      This function is deprecated. Use Phoenix.Flash.get/2 in Phoenix v1.7+.
    </div>

  <section class="docstring">

<p>Returns the flash message from the LiveView flash assign.</p><h2 id="live_flash/2-examples" class="section-heading"><a href="#live_flash/2-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup heex" translate="no"><samp class="p">&lt;</samp><samp class="nt">p</samp><samp class="w"> </samp><samp class="na">class</samp><samp class="p">=</samp><samp class="p">&quot;</samp><samp class="s2">a</samp><samp class="s2">l</samp><samp class="s2">e</samp><samp class="s2">r</samp><samp class="s2">t </samp><samp class="s2">a</samp><samp class="s2">l</samp><samp class="s2">e</samp><samp class="s2">r</samp><samp class="s2">t</samp><samp class="s2">-</samp><samp class="s2">i</samp><samp class="s2">n</samp><samp class="s2">f</samp><samp class="s2">o</samp><samp class="p">&quot;</samp><samp class="p">&gt;</samp><samp class="p" data-group-id="9663039857-1">{</samp><samp class="n">live_flash</samp><samp class="p" data-group-id="9663039857-ex-1">(</samp><samp class="na">@flash</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:info</samp><samp class="p" data-group-id="9663039857-ex-1">)</samp><samp class="p" data-group-id="9663039857-1">}</samp><samp class="p">&lt;/</samp><samp class="nt">p</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="p">&lt;</samp><samp class="nt">p</samp><samp class="w"> </samp><samp class="na">class</samp><samp class="p">=</samp><samp class="p">&quot;</samp><samp class="s2">a</samp><samp class="s2">l</samp><samp class="s2">e</samp><samp class="s2">r</samp><samp class="s2">t </samp><samp class="s2">a</samp><samp class="s2">l</samp><samp class="s2">e</samp><samp class="s2">r</samp><samp class="s2">t</samp><samp class="s2">-</samp><samp class="s2">d</samp><samp class="s2">a</samp><samp class="s2">n</samp><samp class="s2">g</samp><samp class="s2">e</samp><samp class="s2">r</samp><samp class="p">&quot;</samp><samp class="p">&gt;</samp><samp class="p" data-group-id="9663039857-2">{</samp><samp class="n">live_flash</samp><samp class="p" data-group-id="9663039857-ex-2">(</samp><samp class="na">@flash</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:error</samp><samp class="p" data-group-id="9663039857-ex-2">)</samp><samp class="p" data-group-id="9663039857-2">}</samp><samp class="p">&lt;/</samp><samp class="nt">p</samp><samp class="p">&gt;</samp></code></pre>
  </section>
</section>
<section class="detail" id="live_render/3">

    <span id="live_render/2"></span>

  <div class="detail-header">
    <a href="#live_render/3" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">live_render(conn_or_socket, view, opts \\ [])</h1>


        <a href="https://github.com/phoenixframework/phoenix_live_view/blob/v1.1.2/lib/phoenix_component.ex#L1066" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

<p>Renders a LiveView within a template.</p><p>This is useful in two situations:</p><ul><li><p>When rendering a child LiveView inside a LiveView.</p></li><li><p>When rendering a LiveView inside a regular (non-live) controller/view.</p></li></ul><p>Most other cases for shared functionality, including state management and user interactions, can be
<a href="welcome.html#compartmentalize-state-markup-and-events-in-liveview">achieved with function components or LiveComponents</a></p><h2 id="live_render/3-options" class="section-heading"><a href="#live_render/3-options" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Options</span></h2><ul><li><p><code class="inline">:session</code> - a map of binary keys with extra session data to be serialized and sent
to the client. All session data currently in the connection is automatically available
in LiveViews. You can use this option to provide extra data. Remember all session data is
serialized and sent to the client, so you should always keep the data in the session
to a minimum. For example, instead of storing a User struct, you should store the &quot;user_id&quot;
and load the User when the LiveView mounts.</p></li><li><p><code class="inline">:container</code> - an optional tuple for the HTML tag and DOM attributes to be used for the
LiveView container. For example: <code class="inline">{:li, style: &quot;color: blue;&quot;}</code>. By default it uses the module
definition container. See the &quot;Containers&quot; section below for more information.</p></li><li><p><code class="inline">:id</code> - both the DOM ID and the ID to uniquely identify a LiveView. An <code class="inline">:id</code> is
automatically generated when rendering root LiveViews but it is a required option when
rendering a child LiveView.</p></li><li><p><code class="inline">:sticky</code> - an optional flag to maintain the LiveView across live redirects, even if it is
nested within another LiveView. Note that this only works for LiveViews that are in the same
<a href="Phoenix.LiveView.Router.xhtml#live_session/3">live_session</a>.
If you are rendering the sticky view within another LiveView, make sure that the sticky view
itself does not use the same layout. You can do so by returning <code class="inline">{:ok, socket, layout: false}</code>
from mount.</p></li></ul><h2 id="live_render/3-examples" class="section-heading"><a href="#live_render/3-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><p>When rendering from a controller/view, you can call:</p><pre><code class="makeup heex" translate="no"><samp class="p" data-group-id="6429310109-1">{</samp><samp class="n">live_render</samp><samp class="p" data-group-id="6429310109-ex-1">(</samp><samp class="na">@conn</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="nc">MyApp.ThermostatLive</samp><samp class="p" data-group-id="6429310109-ex-1">)</samp><samp class="p" data-group-id="6429310109-1">}</samp></code></pre><p>Or:</p><pre><code class="makeup heex" translate="no"><samp class="p" data-group-id="7216168361-1">{</samp><samp class="n">live_render</samp><samp class="p" data-group-id="7216168361-ex-1">(</samp><samp class="na">@conn</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="nc">MyApp.ThermostatLive</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">session</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="7216168361-ex-2">%{</samp><samp class="s">&quot;home_id&quot;</samp><samp class="w"> </samp><samp class="p">=&gt;</samp><samp class="w"> </samp><samp class="na">@home</samp><samp class="o">.</samp><samp class="n">id</samp><samp class="p" data-group-id="7216168361-ex-2">}</samp><samp class="p" data-group-id="7216168361-ex-1">)</samp><samp class="p" data-group-id="7216168361-1">}</samp></code></pre><p>Within another LiveView, you must pass the <code class="inline">:id</code> option:</p><pre><code class="makeup heex" translate="no"><samp class="p" data-group-id="7116746451-1">{</samp><samp class="n">live_render</samp><samp class="p" data-group-id="7116746451-ex-1">(</samp><samp class="na">@socket</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="nc">MyApp.ThermostatLive</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">id</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;thermostat&quot;</samp><samp class="p" data-group-id="7116746451-ex-1">)</samp><samp class="p" data-group-id="7116746451-1">}</samp></code></pre><h2 id="live_render/3-containers" class="section-heading"><a href="#live_render/3-containers" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Containers</span></h2><p>When a LiveView is rendered, its contents are wrapped in a container. By default,
the container is a <code class="inline">div</code> tag with a handful of LiveView-specific attributes.</p><p>The container can be customized in different ways:</p><ul><li><p>You can change the default <code class="inline">container</code> on <code class="inline">use Phoenix.LiveView</code>:</p><pre><code class="makeup elixir" translate="no"><samp class="kn">use</samp><samp class="w"> </samp><samp class="nc">Phoenix.LiveView</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">container</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="1973447841-1">{</samp><samp class="ss">:tr</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">id</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;foo-bar&quot;</samp><samp class="p" data-group-id="1973447841-1">}</samp></code></pre></li><li><p>You can override the container tag and pass extra attributes when calling <code class="inline">live_render</code>
(as well as on your <code class="inline">live</code> call in your router):</p><pre><code class="makeup elixir" translate="no"><samp class="n">live_render</samp><samp class="w"> </samp><samp class="n">socket</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="nc">MyLiveView</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">container</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="6791691387-1">{</samp><samp class="ss">:tr</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">class</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;highlight&quot;</samp><samp class="p" data-group-id="6791691387-1">}</samp></code></pre></li></ul><p>If you don't want the container to affect layout, you can use the CSS property
<code class="inline">display: contents</code> or a class that applies it, like Tailwind's <code class="inline">.contents</code>.</p><p>Beware if you set this to <code class="inline">:body</code>, as any content injected inside the body
(such as <code class="inline">Phoenix.LiveReload</code> features) will be discarded once the LiveView
connects</p><h2 id="live_render/3-testing" class="section-heading"><a href="#live_render/3-testing" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Testing</span></h2><p>Note that <code class="inline">render_click/1</code> and other testing functions will send events to the root LiveView, and you will want to
<code class="inline">find_live_child/2</code> to interact with nested LiveViews in your live tests.</p>
  </section>
</section>
<section class="detail" id="portal/1">

  <div class="detail-header">
    <a href="#portal/1" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">portal(assigns)</h1>


        <a href="https://github.com/phoenixframework/phoenix_live_view/blob/v1.1.2/lib/phoenix_component.ex#L3545" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

<p>Renders a portal.</p><p>A portal is a component that teleports its content to another place in the DOM.
It is useful in cases where you need to render some content in another place, for
example due to overflow or <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_positioned_layout/Stacking_context">stacking context</a>.</p><p>A portal consists of two parts:</p><ol><li>The portal source: the component that should be teleported.</li><li>The portal target: the DOM element that will render the content of the portal source.</li></ol><p>Any element can be a portal target. In most cases, the target would be rendered inside
the layout of your application. Portal sources must be defined with the <code class="inline">.portal</code> component.</p><h2 id="portal/1-examples" class="section-heading"><a href="#portal/1-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup heex" translate="no"><samp class="p">&lt;</samp><samp class="nf">.portal</samp><samp class="w"> </samp><samp class="na">id</samp><samp class="p">=</samp><samp class="p">&quot;</samp><samp class="s2">m</samp><samp class="s2">o</samp><samp class="s2">d</samp><samp class="s2">a</samp><samp class="s2">l</samp><samp class="p">&quot;</samp><samp class="w"> </samp><samp class="na">target</samp><samp class="p">=</samp><samp class="p">&quot;</samp><samp class="s2">body</samp><samp class="p">&quot;</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="n">  ...
</samp><samp class="p">&lt;/</samp><samp class="nf">.portal</samp><samp class="p">&gt;</samp></code></pre><h2 id="portal/1-attributes" class="section-heading"><a href="#portal/1-attributes" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Attributes</span></h2><ul><li><code class="inline">id</code> (<code class="inline">:string</code>) (required)</li><li><code class="inline">target</code> (<code class="inline">:string</code>) (required) - A CSS selector that identifies the target. The target must be unique.</li><li><code class="inline">class</code> (<code class="inline">:string</code>) - The class to apply to the portal wrapper. Defaults to <code class="inline">nil</code>.</li><li><code class="inline">container</code> (<code class="inline">:string</code>) - The HTML tag to use as the portal wrapper. Defaults to <code class="inline">&quot;div&quot;</code>.</li></ul><h2 id="portal/1-slots" class="section-heading"><a href="#portal/1-slots" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Slots</span></h2><ul><li><code class="inline">inner_block</code> (required)</li></ul>
  </section>
</section>
<section class="detail" id="render_slot/2">

    <span id="render_slot/1"></span>

  <div class="detail-header">
    <a href="#render_slot/2" class="detail-link" data-no-tooltip="" aria-label="Link to this macro">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">render_slot(slot, argument \\ nil)</h1>

        <span class="note">(macro)</span>


        <a href="https://github.com/phoenixframework/phoenix_live_view/blob/v1.1.2/lib/phoenix_component.ex#L1128" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

<p>Renders a slot entry with the given optional <code class="inline">argument</code>.</p><pre><code class="makeup heex" translate="no"><samp class="p" data-group-id="3357466400-1">{</samp><samp class="n">render_slot</samp><samp class="p" data-group-id="3357466400-ex-1">(</samp><samp class="na">@inner_block</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="na">@form</samp><samp class="p" data-group-id="3357466400-ex-1">)</samp><samp class="p" data-group-id="3357466400-1">}</samp></code></pre><p>If the slot has no entries, nil is returned.</p><p>If multiple slot entries are defined for the same slot,<a href="#render_slot/2"><code class="inline">render_slot/2</code></a> will automatically render
all entries, merging their contents. In case you want to use the entries' attributes, you need
to iterate over the list to access each slot individually.</p><p>For example, imagine a table component:</p><pre><code class="makeup heex" translate="no"><samp class="p">&lt;</samp><samp class="nf">.table</samp><samp class="w"> </samp><samp class="na">rows</samp><samp class="p">=</samp><samp class="p" data-group-id="5795679071-1">{</samp><samp class="na">@users</samp><samp class="p" data-group-id="5795679071-1">}</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="w">  </samp><samp class="p">&lt;</samp><samp class="ss">:col</samp><samp class="w"> </samp><samp class="na">:let</samp><samp class="p">=</samp><samp class="p" data-group-id="5795679071-2">{</samp><samp class="n">user</samp><samp class="p" data-group-id="5795679071-2">}</samp><samp class="w"> </samp><samp class="na">label</samp><samp class="p">=</samp><samp class="p">&quot;</samp><samp class="s2">Name</samp><samp class="p">&quot;</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="w">    </samp><samp class="p" data-group-id="5795679071-3">{</samp><samp class="n">user</samp><samp class="o">.</samp><samp class="n">name</samp><samp class="p" data-group-id="5795679071-3">}</samp><samp class="w">
</samp><samp class="w">  </samp><samp class="p">&lt;/</samp><samp class="ss">:col</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="w">
</samp><samp class="w">  </samp><samp class="p">&lt;</samp><samp class="ss">:col</samp><samp class="w"> </samp><samp class="na">:let</samp><samp class="p">=</samp><samp class="p" data-group-id="5795679071-4">{</samp><samp class="n">user</samp><samp class="p" data-group-id="5795679071-4">}</samp><samp class="w"> </samp><samp class="na">label</samp><samp class="p">=</samp><samp class="p">&quot;</samp><samp class="s2">Address</samp><samp class="p">&quot;</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="w">    </samp><samp class="p" data-group-id="5795679071-5">{</samp><samp class="n">user</samp><samp class="o">.</samp><samp class="n">address</samp><samp class="p" data-group-id="5795679071-5">}</samp><samp class="w">
</samp><samp class="w">  </samp><samp class="p">&lt;/</samp><samp class="ss">:col</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="p">&lt;/</samp><samp class="nf">.table</samp><samp class="p">&gt;</samp></code></pre><p>At the top level, we pass the rows as an assign and we define a <code class="inline">:col</code> slot for each column we
want in the table. Each column also has a <code class="inline">label</code>, which we are going to use in the table header.</p><p>Inside the component, you can render the table with headers, rows, and columns:</p><pre><code class="makeup elixir" translate="no"><samp class="kd">def</samp><samp class="w"> </samp><samp class="nf">table</samp><samp class="p" data-group-id="0317723595-1">(</samp><samp class="n">assigns</samp><samp class="p" data-group-id="0317723595-1">)</samp><samp class="w"> </samp><samp class="k" data-group-id="0317723595-2">do</samp><samp class="w">
  </samp><samp class="sx">~H&quot;&quot;&quot;</samp><samp class="w">
</samp><samp class="w">  </samp><samp class="p">&lt;</samp><samp class="nt">table</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="w">    </samp><samp class="p">&lt;</samp><samp class="nt">tr</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="w">      </samp><samp class="p">&lt;</samp><samp class="nt">th</samp><samp class="w"> </samp><samp class="na">:for</samp><samp class="p">=</samp><samp class="p" data-group-id="8208365114-1">{</samp><samp class="n">col</samp><samp class="w"> </samp><samp class="o">&lt;-</samp><samp class="w"> </samp><samp class="na">@col</samp><samp class="p" data-group-id="8208365114-1">}</samp><samp class="p">&gt;</samp><samp class="p" data-group-id="8208365114-2">{</samp><samp class="n">col</samp><samp class="o">.</samp><samp class="n">label</samp><samp class="p" data-group-id="8208365114-2">}</samp><samp class="p">&lt;/</samp><samp class="nt">th</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="w">    </samp><samp class="p">&lt;/</samp><samp class="nt">tr</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="w">    </samp><samp class="p">&lt;</samp><samp class="nt">tr</samp><samp class="w"> </samp><samp class="na">:for</samp><samp class="p">=</samp><samp class="p" data-group-id="8208365114-3">{</samp><samp class="n">row</samp><samp class="w"> </samp><samp class="o">&lt;-</samp><samp class="w"> </samp><samp class="na">@rows</samp><samp class="p" data-group-id="8208365114-3">}</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="w">      </samp><samp class="p">&lt;</samp><samp class="nt">td</samp><samp class="w"> </samp><samp class="na">:for</samp><samp class="p">=</samp><samp class="p" data-group-id="8208365114-4">{</samp><samp class="n">col</samp><samp class="w"> </samp><samp class="o">&lt;-</samp><samp class="w"> </samp><samp class="na">@col</samp><samp class="p" data-group-id="8208365114-4">}</samp><samp class="p">&gt;</samp><samp class="p" data-group-id="8208365114-5">{</samp><samp class="n">render_slot</samp><samp class="p" data-group-id="0317723595-3">(</samp><samp class="n">col</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">row</samp><samp class="p" data-group-id="0317723595-3">)</samp><samp class="p" data-group-id="8208365114-5">}</samp><samp class="p">&lt;/</samp><samp class="nt">td</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="w">    </samp><samp class="p">&lt;/</samp><samp class="nt">tr</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="w">  </samp><samp class="p">&lt;/</samp><samp class="nt">table</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="w">  </samp><samp class="sx">&quot;&quot;&quot;</samp><samp class="w">
</samp><samp class="k" data-group-id="0317723595-2">end</samp></code></pre>
  </section>
</section>
<section class="detail" id="to_form/2">

    <span id="to_form/1"></span>

  <div class="detail-header">
    <a href="#to_form/2" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">to_form(data_or_params, options \\ [])</h1>


        <a href="https://github.com/phoenixframework/phoenix_live_view/blob/v1.1.2/lib/phoenix_component.ex#L1617" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

<p>Converts a given data structure to a <a href="https://hexdocs.pm/phoenix_html/4.2.1/Phoenix.HTML.Form.html"><code class="inline">Phoenix.HTML.Form</code></a>.</p><p>This is commonly used to convert a map or an Ecto changeset
into a form to be given to the <a href="#form/1"><code class="inline">form/1</code></a> component.</p><h2 id="to_form/2-creating-a-form-from-params" class="section-heading"><a href="#to_form/2-creating-a-form-from-params" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Creating a form from params</span></h2><p>If you want to create a form based on <code class="inline">handle_event</code> parameters,
you could do:</p><pre><code class="makeup elixir" translate="no"><samp class="kd">def</samp><samp class="w"> </samp><samp class="nf">handle_event</samp><samp class="p" data-group-id="7982346780-1">(</samp><samp class="s">&quot;submitted&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">params</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">socket</samp><samp class="p" data-group-id="7982346780-1">)</samp><samp class="w"> </samp><samp class="k" data-group-id="7982346780-2">do</samp><samp class="w">
  </samp><samp class="p" data-group-id="7982346780-3">{</samp><samp class="ss">:noreply</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">assign</samp><samp class="p" data-group-id="7982346780-4">(</samp><samp class="n">socket</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">form</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="n">to_form</samp><samp class="p" data-group-id="7982346780-5">(</samp><samp class="n">params</samp><samp class="p" data-group-id="7982346780-5">)</samp><samp class="p" data-group-id="7982346780-4">)</samp><samp class="p" data-group-id="7982346780-3">}</samp><samp class="w">
</samp><samp class="k" data-group-id="7982346780-2">end</samp></code></pre><p>When you pass a map to <a href="#to_form/1"><code class="inline">to_form/1</code></a>, it assumes said map contains
the form parameters, which are expected to have string keys.</p><p>You can also specify a name to nest the parameters:</p><pre><code class="makeup elixir" translate="no"><samp class="kd">def</samp><samp class="w"> </samp><samp class="nf">handle_event</samp><samp class="p" data-group-id="9851966443-1">(</samp><samp class="s">&quot;submitted&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="9851966443-2">%{</samp><samp class="s">&quot;user&quot;</samp><samp class="w"> </samp><samp class="p">=&gt;</samp><samp class="w"> </samp><samp class="n">user_params</samp><samp class="p" data-group-id="9851966443-2">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">socket</samp><samp class="p" data-group-id="9851966443-1">)</samp><samp class="w"> </samp><samp class="k" data-group-id="9851966443-3">do</samp><samp class="w">
  </samp><samp class="p" data-group-id="9851966443-4">{</samp><samp class="ss">:noreply</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">assign</samp><samp class="p" data-group-id="9851966443-5">(</samp><samp class="n">socket</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">form</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="n">to_form</samp><samp class="p" data-group-id="9851966443-6">(</samp><samp class="n">user_params</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">as</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="ss">:user</samp><samp class="p" data-group-id="9851966443-6">)</samp><samp class="p" data-group-id="9851966443-5">)</samp><samp class="p" data-group-id="9851966443-4">}</samp><samp class="w">
</samp><samp class="k" data-group-id="9851966443-3">end</samp></code></pre><h2 id="to_form/2-creating-a-form-from-changesets" class="section-heading"><a href="#to_form/2-creating-a-form-from-changesets" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Creating a form from changesets</span></h2><p>When using changesets, the underlying data, form parameters, and
errors are retrieved from it. The <code class="inline">:as</code> option is automatically
computed too. For example, if you have a user schema:</p><pre><code class="makeup elixir" translate="no"><samp class="kd">defmodule</samp><samp class="w"> </samp><samp class="nc">MyApp.Users.User</samp><samp class="w"> </samp><samp class="k" data-group-id="0591133448-1">do</samp><samp class="w">
  </samp><samp class="kn">use</samp><samp class="w"> </samp><samp class="nc">Ecto.Schema</samp><samp class="w">

  </samp><samp class="n">schema</samp><samp class="w"> </samp><samp class="s">&quot;...&quot;</samp><samp class="w"> </samp><samp class="k" data-group-id="0591133448-2">do</samp><samp class="w">
    </samp><samp class="n">...</samp><samp class="w">
  </samp><samp class="k" data-group-id="0591133448-2">end</samp><samp class="w">
</samp><samp class="k" data-group-id="0591133448-1">end</samp></code></pre><p>And then you create a changeset that you pass to <code class="inline">to_form</code>:</p><pre><code class="makeup elixir" translate="no"><samp class="p" data-group-id="5355955440-1">%</samp><samp class="nc" data-group-id="5355955440-1">MyApp.Users.User</samp><samp class="p" data-group-id="5355955440-1">{</samp><samp class="p" data-group-id="5355955440-1">}</samp><samp class="w">
</samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="nc">Ecto.Changeset</samp><samp class="o">.</samp><samp class="n">change</samp><samp class="p" data-group-id="5355955440-2">(</samp><samp class="p" data-group-id="5355955440-2">)</samp><samp class="w">
</samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="n">to_form</samp><samp class="p" data-group-id="5355955440-3">(</samp><samp class="p" data-group-id="5355955440-3">)</samp></code></pre><p>In this case, once the form is submitted, the parameters will
be available under <code class="inline">%{&quot;user&quot; =&gt; user_params}</code>.</p><h2 id="to_form/2-options" class="section-heading"><a href="#to_form/2-options" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Options</span></h2><ul><li><code class="inline">:as</code> - the <code class="inline">name</code> prefix to be used in form inputs</li><li><code class="inline">:id</code> - the <code class="inline">id</code> prefix to be used in form inputs</li><li><code class="inline">:errors</code> - keyword list of errors (used by maps exclusively)</li><li><code class="inline">:action</code> - The action that was taken against the form. This value can be
used to distinguish between different operations such as the user typing
into a form for validation, or submitting a form for a database insert.
For example: <code class="inline">to_form(changeset, action: :validate)</code>,
or <code class="inline">to_form(changeset, action: :save)</code>. The provided action is passed
to the underlying <a href="https://hexdocs.pm/phoenix_html/4.2.1/Phoenix.HTML.FormData.html"><code class="inline">Phoenix.HTML.FormData</code></a> implementation options.</li></ul><p>The underlying data may accept additional options when
converted to forms. For example, a map accepts <code class="inline">:errors</code>
to list errors, but such option is not accepted by
changesets. <code class="inline">:errors</code> is a keyword of tuples in the shape
of <code class="inline">{error_message, options_list}</code>. Here is an example:</p><pre><code class="makeup elixir" translate="no"><samp class="n">to_form</samp><samp class="p" data-group-id="9597002136-1">(</samp><samp class="p" data-group-id="9597002136-2">%{</samp><samp class="s">&quot;search&quot;</samp><samp class="w"> </samp><samp class="p">=&gt;</samp><samp class="w"> </samp><samp class="no">nil</samp><samp class="p" data-group-id="9597002136-2">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">errors</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="9597002136-3">[</samp><samp class="ss">search</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="9597002136-4">{</samp><samp class="s">&quot;Can&#39;t be blank&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="9597002136-5">[</samp><samp class="p" data-group-id="9597002136-5">]</samp><samp class="p" data-group-id="9597002136-4">}</samp><samp class="p" data-group-id="9597002136-3">]</samp><samp class="p" data-group-id="9597002136-1">)</samp></code></pre><p>If an existing <a href="https://hexdocs.pm/phoenix_html/4.2.1/Phoenix.HTML.Form.html"><code class="inline">Phoenix.HTML.Form</code></a> struct is given, the
options above will override its existing values if given.
Then the remaining options are merged with the existing
form options.</p><p>Errors in a form are only displayed if the changeset's <code class="inline">action</code>
field is set (and it is not set to <code class="inline">:ignore</code>) and can be filtered
by whether the fields have been used on the client or not. Refer to
<a href="#form/1-a-note-on-errors">a note on :errors for more information</a>.</p>
  </section>
</section>
<section class="detail" id="update/3">

  <div class="detail-header">
    <a href="#update/3" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">update(socket_or_assigns, key, fun)</h1>


        <a href="https://github.com/phoenixframework/phoenix_live_view/blob/v1.1.2/lib/phoenix_component.ex#L1488" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

<p>Updates an existing <code class="inline">key</code> with <code class="inline">fun</code> in the given <code class="inline">socket_or_assigns</code>.</p><p>The first argument is either a LiveView <code class="inline">socket</code> or an <code class="inline">assigns</code> map from function components.</p><p>The update function receives the current key's value and returns the updated value.
Raises if the key does not exist.</p><p>The update function may also be of arity 2, in which case it receives the current key's value
as the first argument and the current assigns as the second argument.
Raises if the key does not exist.</p><h2 id="update/3-examples" class="section-heading"><a href="#update/3-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="n">update</samp><samp class="p" data-group-id="2727768782-1">(</samp><samp class="n">socket</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:count</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="k" data-group-id="2727768782-2">fn</samp><samp class="w"> </samp><samp class="n">count</samp><samp class="w"> </samp><samp class="o">-&gt;</samp><samp class="w"> </samp><samp class="n">count</samp><samp class="w"> </samp><samp class="o">+</samp><samp class="w"> </samp><samp class="mi">1</samp><samp class="w"> </samp><samp class="k" data-group-id="2727768782-2">end</samp><samp class="p" data-group-id="2727768782-1">)</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="n">update</samp><samp class="p" data-group-id="2727768782-3">(</samp><samp class="n">socket</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:count</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="o">&amp;</samp><samp class="p" data-group-id="2727768782-4">(</samp><samp class="ni">&amp;1</samp><samp class="w"> </samp><samp class="o">+</samp><samp class="w"> </samp><samp class="mi">1</samp><samp class="p" data-group-id="2727768782-4">)</samp><samp class="p" data-group-id="2727768782-3">)</samp><samp class="w">
</samp><samp class="gp unselectable">iex&gt; </samp><samp class="n">update</samp><samp class="p" data-group-id="2727768782-5">(</samp><samp class="n">socket</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:max_users_this_session</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="k" data-group-id="2727768782-6">fn</samp><samp class="w"> </samp><samp class="n">current_max</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="2727768782-7">%{</samp><samp class="ss">users</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="n">users</samp><samp class="p" data-group-id="2727768782-7">}</samp><samp class="w"> </samp><samp class="o">-&gt;</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="w">  </samp><samp class="n">max</samp><samp class="p" data-group-id="2727768782-8">(</samp><samp class="n">current_max</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">length</samp><samp class="p" data-group-id="2727768782-9">(</samp><samp class="n">users</samp><samp class="p" data-group-id="2727768782-9">)</samp><samp class="p" data-group-id="2727768782-8">)</samp><samp class="w">
</samp><samp class="gp unselectable">...&gt; </samp><samp class="k" data-group-id="2727768782-6">end</samp><samp class="p" data-group-id="2727768782-5">)</samp></code></pre>
  </section>
</section>
<section class="detail" id="upload_errors/1">

  <div class="detail-header">
    <a href="#upload_errors/1" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">upload_errors(conf)</h1>


        <a href="https://github.com/phoenixframework/phoenix_live_view/blob/v1.1.2/lib/phoenix_component.ex#L1208" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

<p>Returns errors for the upload as a whole.</p><p>For errors that apply to a specific upload entry, use <a href="#upload_errors/2"><code class="inline">upload_errors/2</code></a>.</p><p>The output is a list. The following error may be returned:</p><ul><li><code class="inline">:too_many_files</code> - The number of selected files exceeds the <code class="inline">:max_entries</code> constraint</li></ul><h2 id="upload_errors/1-examples" class="section-heading"><a href="#upload_errors/1-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="kd">def</samp><samp class="w"> </samp><samp class="nf">upload_error_to_string</samp><samp class="p" data-group-id="4586807792-1">(</samp><samp class="ss">:too_many_files</samp><samp class="p" data-group-id="4586807792-1">)</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">do</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;You have selected too many files&quot;</samp></code></pre><pre><code class="makeup heex" translate="no"><samp class="p">&lt;</samp><samp class="nt">div</samp><samp class="w"> </samp><samp class="na">:for</samp><samp class="p">=</samp><samp class="p" data-group-id="1619322777-1">{</samp><samp class="n">err</samp><samp class="w"> </samp><samp class="o">&lt;-</samp><samp class="w"> </samp><samp class="n">upload_errors</samp><samp class="p" data-group-id="1619322777-ex-1">(</samp><samp class="na">@uploads</samp><samp class="o">.</samp><samp class="n">avatar</samp><samp class="p" data-group-id="1619322777-ex-1">)</samp><samp class="p" data-group-id="1619322777-1">}</samp><samp class="w"> </samp><samp class="na">class</samp><samp class="p">=</samp><samp class="p">&quot;</samp><samp class="s2">a</samp><samp class="s2">l</samp><samp class="s2">e</samp><samp class="s2">r</samp><samp class="s2">t </samp><samp class="s2">a</samp><samp class="s2">l</samp><samp class="s2">e</samp><samp class="s2">r</samp><samp class="s2">t</samp><samp class="s2">-</samp><samp class="s2">d</samp><samp class="s2">a</samp><samp class="s2">n</samp><samp class="s2">g</samp><samp class="s2">e</samp><samp class="s2">r</samp><samp class="p">&quot;</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="w">  </samp><samp class="p" data-group-id="1619322777-2">{</samp><samp class="n">upload_error_to_string</samp><samp class="p" data-group-id="1619322777-ex-2">(</samp><samp class="n">err</samp><samp class="p" data-group-id="1619322777-ex-2">)</samp><samp class="p" data-group-id="1619322777-2">}</samp><samp class="w">
</samp><samp class="p">&lt;/</samp><samp class="nt">div</samp><samp class="p">&gt;</samp></code></pre>
  </section>
</section>
<section class="detail" id="upload_errors/2">

  <div class="detail-header">
    <a href="#upload_errors/2" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">upload_errors(conf, entry)</h1>


        <a href="https://github.com/phoenixframework/phoenix_live_view/blob/v1.1.2/lib/phoenix_component.ex#L1240" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

<p>Returns errors for the upload entry.</p><p>For errors that apply to the upload as a whole, use <a href="#upload_errors/1"><code class="inline">upload_errors/1</code></a>.</p><p>The output is a list. The following errors may be returned:</p><ul><li><code class="inline">:too_large</code> - The entry exceeds the <code class="inline">:max_file_size</code> constraint</li><li><code class="inline">:not_accepted</code> - The entry does not match the <code class="inline">:accept</code> MIME types</li><li><code class="inline">:external_client_failure</code> - When external upload fails</li><li><code class="inline">{:writer_failure, reason}</code> - When the custom writer fails with <code class="inline">reason</code></li></ul><h2 id="upload_errors/2-examples" class="section-heading"><a href="#upload_errors/2-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><pre><code class="makeup elixir" translate="no"><samp class="kd">defp</samp><samp class="w"> </samp><samp class="nf">upload_error_to_string</samp><samp class="p" data-group-id="5618321975-1">(</samp><samp class="ss">:too_large</samp><samp class="p" data-group-id="5618321975-1">)</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">do</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;The file is too large&quot;</samp><samp class="w">
</samp><samp class="kd">defp</samp><samp class="w"> </samp><samp class="nf">upload_error_to_string</samp><samp class="p" data-group-id="5618321975-2">(</samp><samp class="ss">:not_accepted</samp><samp class="p" data-group-id="5618321975-2">)</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">do</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;You have selected an unacceptable file type&quot;</samp><samp class="w">
</samp><samp class="kd">defp</samp><samp class="w"> </samp><samp class="nf">upload_error_to_string</samp><samp class="p" data-group-id="5618321975-3">(</samp><samp class="ss">:external_client_failure</samp><samp class="p" data-group-id="5618321975-3">)</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">do</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;Something went terribly wrong&quot;</samp></code></pre><pre><code class="makeup heex" translate="no"><samp class="p" data-group-id="5135939339-1">&lt;%=</samp><samp class="w"> </samp><samp class="k">for</samp><samp class="w"> </samp><samp class="n">entry</samp><samp class="w"> </samp><samp class="o">&lt;-</samp><samp class="w"> </samp><samp class="na">@uploads</samp><samp class="o">.</samp><samp class="n">avatar</samp><samp class="o">.</samp><samp class="n">entries</samp><samp class="w"> </samp><samp class="k" data-group-id="5135939339-ex-1">do</samp><samp class="w"> </samp><samp class="p" data-group-id="5135939339-1">%&gt;</samp><samp class="w">
</samp><samp class="w">  </samp><samp class="p">&lt;</samp><samp class="nt">div</samp><samp class="w"> </samp><samp class="na">:for</samp><samp class="p">=</samp><samp class="p" data-group-id="5135939339-2">{</samp><samp class="n">err</samp><samp class="w"> </samp><samp class="o">&lt;-</samp><samp class="w"> </samp><samp class="n">upload_errors</samp><samp class="p" data-group-id="5135939339-ex-2">(</samp><samp class="na">@uploads</samp><samp class="o">.</samp><samp class="n">avatar</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">entry</samp><samp class="p" data-group-id="5135939339-ex-2">)</samp><samp class="p" data-group-id="5135939339-2">}</samp><samp class="w"> </samp><samp class="na">class</samp><samp class="p">=</samp><samp class="p">&quot;</samp><samp class="s2">a</samp><samp class="s2">l</samp><samp class="s2">e</samp><samp class="s2">r</samp><samp class="s2">t </samp><samp class="s2">a</samp><samp class="s2">l</samp><samp class="s2">e</samp><samp class="s2">r</samp><samp class="s2">t</samp><samp class="s2">-</samp><samp class="s2">d</samp><samp class="s2">a</samp><samp class="s2">n</samp><samp class="s2">g</samp><samp class="s2">e</samp><samp class="s2">r</samp><samp class="p">&quot;</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="w">    </samp><samp class="p" data-group-id="5135939339-3">{</samp><samp class="n">upload_error_to_string</samp><samp class="p" data-group-id="5135939339-ex-3">(</samp><samp class="n">err</samp><samp class="p" data-group-id="5135939339-ex-3">)</samp><samp class="p" data-group-id="5135939339-3">}</samp><samp class="w">
</samp><samp class="w">  </samp><samp class="p">&lt;/</samp><samp class="nt">div</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="p" data-group-id="5135939339-4">&lt;%</samp><samp class="w"> </samp><samp class="k" data-group-id="5135939339-ex-1">end</samp><samp class="w"> </samp><samp class="p" data-group-id="5135939339-4">%&gt;</samp></code></pre>
  </section>
</section>
<section class="detail" id="used_input?/1">

  <div class="detail-header">
    <a href="#used_input?/1" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">used_input?(form_field)</h1>


        <a href="https://github.com/phoenixframework/phoenix_live_view/blob/v1.1.2/lib/phoenix_component.ex#L1737" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

<p>Checks if the input field was used by the client.</p><p>Used inputs are only those inputs that have been focused, interacted with, or
submitted by the client. For LiveView, this is used to filter errors from the
<a href="https://hexdocs.pm/phoenix_html/4.2.1/Phoenix.HTML.FormData.html"><code class="inline">Phoenix.HTML.FormData</code></a> implementation to avoid showing &quot;field can't be blank&quot;
in scenarios where the client hasn't yet interacted with specific fields.</p><p>Used inputs are tracked internally by the client sending a sibling key
derived from each input name, which indicates the inputs that remain  unused
on the client. For example, a form with email and title fields where only the
title has been modified so far on the client, would send the following payload:</p><pre><code class="makeup elixir" translate="no"><samp class="p" data-group-id="0474553346-1">%{</samp><samp class="w">
  </samp><samp class="s">&quot;title&quot;</samp><samp class="w"> </samp><samp class="p">=&gt;</samp><samp class="w"> </samp><samp class="s">&quot;new title&quot;</samp><samp class="p">,</samp><samp class="w">
  </samp><samp class="s">&quot;email&quot;</samp><samp class="w"> </samp><samp class="p">=&gt;</samp><samp class="w"> </samp><samp class="s">&quot;&quot;</samp><samp class="p">,</samp><samp class="w">
  </samp><samp class="s">&quot;_unused_email&quot;</samp><samp class="w"> </samp><samp class="p">=&gt;</samp><samp class="w"> </samp><samp class="s">&quot;&quot;</samp><samp class="w">
</samp><samp class="p" data-group-id="0474553346-1">}</samp></code></pre><p>The <code class="inline">_unused_email</code> key indicates that the email field has not been used by the
client, which is used to filter errors from the UI.</p><p>Nested fields are also supported. For example, a form with a nested datetime field
is considered used if any of the nested parameters are used.</p><pre><code class="makeup elixir" translate="no"><samp class="p" data-group-id="3238464777-1">%{</samp><samp class="w">
  </samp><samp class="s">&quot;bday&quot;</samp><samp class="w"> </samp><samp class="p">=&gt;</samp><samp class="w"> </samp><samp class="p" data-group-id="3238464777-2">%{</samp><samp class="w">
    </samp><samp class="s">&quot;year&quot;</samp><samp class="w"> </samp><samp class="p">=&gt;</samp><samp class="w"> </samp><samp class="s">&quot;&quot;</samp><samp class="p">,</samp><samp class="w">
    </samp><samp class="s">&quot;month&quot;</samp><samp class="w"> </samp><samp class="p">=&gt;</samp><samp class="w"> </samp><samp class="s">&quot;&quot;</samp><samp class="p">,</samp><samp class="w">
    </samp><samp class="s">&quot;day&quot;</samp><samp class="w"> </samp><samp class="p">=&gt;</samp><samp class="w"> </samp><samp class="s">&quot;&quot;</samp><samp class="p">,</samp><samp class="w">
    </samp><samp class="s">&quot;_unused_day&quot;</samp><samp class="w"> </samp><samp class="p">=&gt;</samp><samp class="w"> </samp><samp class="s">&quot;&quot;</samp><samp class="w">
  </samp><samp class="p" data-group-id="3238464777-2">}</samp><samp class="w">
</samp><samp class="p" data-group-id="3238464777-1">}</samp></code></pre><p>The <code class="inline">_unused_day</code> key indicates that the day field has not been used by the client,
but the year and month fields have been used, meaning the birthday field as a whole
was used.</p><h2 id="used_input?/1-examples" class="section-heading"><a href="#used_input?/1-examples" class="hover-link"><i class="ri-link-m" aria-hidden="true"></i></a><span class="text">Examples</span></h2><p>For example, imagine in your template you render a title and email input.
On initial load the end-user begins typing the title field. The client will send
the entire form payload to the server with the typed title and an empty email.</p><p>The <a href="https://hexdocs.pm/phoenix_html/4.2.1/Phoenix.HTML.FormData.html"><code class="inline">Phoenix.HTML.FormData</code></a> implementation will consider an empty email in
this scenario as invalid, but the user shouldn't see the error because they
haven't yet used the email input. To handle this, <a href="#used_input?/1"><code class="inline">used_input?/1</code></a> can be used to
filter errors from the client by referencing param metadata to distinguish between
used and unused input fields. For non-LiveViews, all inputs are considered used.</p><pre><code class="makeup heex" translate="no"><samp class="p">&lt;</samp><samp class="nt">input</samp><samp class="w"> </samp><samp class="na">type</samp><samp class="p">=</samp><samp class="p">&quot;</samp><samp class="s2">text</samp><samp class="p">&quot;</samp><samp class="w"> </samp><samp class="na">name</samp><samp class="p">=</samp><samp class="p" data-group-id="0973304513-1">{</samp><samp class="na">@form</samp><samp class="p" data-group-id="0973304513-ex-1">[</samp><samp class="ss">:title</samp><samp class="p" data-group-id="0973304513-ex-1">]</samp><samp class="o">.</samp><samp class="n">name</samp><samp class="p" data-group-id="0973304513-1">}</samp><samp class="w"> </samp><samp class="na">value</samp><samp class="p">=</samp><samp class="p" data-group-id="0973304513-2">{</samp><samp class="na">@form</samp><samp class="p" data-group-id="0973304513-ex-2">[</samp><samp class="ss">:title</samp><samp class="p" data-group-id="0973304513-ex-2">]</samp><samp class="o">.</samp><samp class="n">value</samp><samp class="p" data-group-id="0973304513-2">}</samp><samp class="w"> </samp><samp class="p">/&gt;</samp><samp class="w">
</samp><samp class="w">
</samp><samp class="p">&lt;</samp><samp class="nt">div</samp><samp class="w"> </samp><samp class="na">:if</samp><samp class="p">=</samp><samp class="p" data-group-id="0973304513-3">{</samp><samp class="n">used_input?</samp><samp class="p" data-group-id="0973304513-ex-3">(</samp><samp class="na">@form</samp><samp class="p" data-group-id="0973304513-ex-4">[</samp><samp class="ss">:title</samp><samp class="p" data-group-id="0973304513-ex-4">]</samp><samp class="p" data-group-id="0973304513-ex-3">)</samp><samp class="p" data-group-id="0973304513-3">}</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="w">  </samp><samp class="p">&lt;</samp><samp class="nt">p</samp><samp class="w"> </samp><samp class="na">:for</samp><samp class="p">=</samp><samp class="p" data-group-id="0973304513-4">{</samp><samp class="n">error</samp><samp class="w"> </samp><samp class="o">&lt;-</samp><samp class="w"> </samp><samp class="na">@form</samp><samp class="p" data-group-id="0973304513-ex-5">[</samp><samp class="ss">:title</samp><samp class="p" data-group-id="0973304513-ex-5">]</samp><samp class="o">.</samp><samp class="n">errors</samp><samp class="p" data-group-id="0973304513-4">}</samp><samp class="p">&gt;</samp><samp class="p" data-group-id="0973304513-5">{</samp><samp class="n">error</samp><samp class="p" data-group-id="0973304513-5">}</samp><samp class="p">&lt;/</samp><samp class="nt">p</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="p">&lt;/</samp><samp class="nt">div</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="w">
</samp><samp class="p">&lt;</samp><samp class="nt">input</samp><samp class="w"> </samp><samp class="na">type</samp><samp class="p">=</samp><samp class="p">&quot;</samp><samp class="s2">text</samp><samp class="p">&quot;</samp><samp class="w"> </samp><samp class="na">name</samp><samp class="p">=</samp><samp class="p" data-group-id="0973304513-6">{</samp><samp class="na">@form</samp><samp class="p" data-group-id="0973304513-ex-6">[</samp><samp class="ss">:email</samp><samp class="p" data-group-id="0973304513-ex-6">]</samp><samp class="o">.</samp><samp class="n">name</samp><samp class="p" data-group-id="0973304513-6">}</samp><samp class="w"> </samp><samp class="na">value</samp><samp class="p">=</samp><samp class="p" data-group-id="0973304513-7">{</samp><samp class="na">@form</samp><samp class="p" data-group-id="0973304513-ex-7">[</samp><samp class="ss">:email</samp><samp class="p" data-group-id="0973304513-ex-7">]</samp><samp class="o">.</samp><samp class="n">value</samp><samp class="p" data-group-id="0973304513-7">}</samp><samp class="w"> </samp><samp class="p">/&gt;</samp><samp class="w">
</samp><samp class="w">
</samp><samp class="p">&lt;</samp><samp class="nt">div</samp><samp class="w"> </samp><samp class="na">:if</samp><samp class="p">=</samp><samp class="p" data-group-id="0973304513-8">{</samp><samp class="n">used_input?</samp><samp class="p" data-group-id="0973304513-ex-8">(</samp><samp class="na">@form</samp><samp class="p" data-group-id="0973304513-ex-9">[</samp><samp class="ss">:email</samp><samp class="p" data-group-id="0973304513-ex-9">]</samp><samp class="p" data-group-id="0973304513-ex-8">)</samp><samp class="p" data-group-id="0973304513-8">}</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="w">  </samp><samp class="p">&lt;</samp><samp class="nt">p</samp><samp class="w"> </samp><samp class="na">:for</samp><samp class="p">=</samp><samp class="p" data-group-id="0973304513-9">{</samp><samp class="n">error</samp><samp class="w"> </samp><samp class="o">&lt;-</samp><samp class="w"> </samp><samp class="na">@form</samp><samp class="p" data-group-id="0973304513-ex-10">[</samp><samp class="ss">:email</samp><samp class="p" data-group-id="0973304513-ex-10">]</samp><samp class="o">.</samp><samp class="n">errors</samp><samp class="p" data-group-id="0973304513-9">}</samp><samp class="p">&gt;</samp><samp class="p" data-group-id="0973304513-10">{</samp><samp class="n">error</samp><samp class="p" data-group-id="0973304513-10">}</samp><samp class="p">&lt;/</samp><samp class="nt">p</samp><samp class="p">&gt;</samp><samp class="w">
</samp><samp class="p">&lt;/</samp><samp class="nt">div</samp><samp class="p">&gt;</samp></code></pre>
  </section>
</section>

        </div>
      </section>


  </body>
</html>
