<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"
      xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>JavaScript interoperability - Phoenix LiveView v1.1.2</title>
    <meta name="generator" content="ExDoc v0.38.2" />
    <link type="text/css" rel="stylesheet" href="dist/epub-elixir-FNUUKFP7.css" />
    <script src="dist/epub-4WIP524F.js"></script>

  </head>
  <body class="content-inner">

    <h1 id="content">JavaScript interoperability</h1>
<p>To enable LiveView client/server interaction, we instantiate a LiveSocket. For example:</p><pre><code class="makeup javascript" translate="no"><span class="k">import</span><span class="w"> </span><span class="p">{</span><span class="nv">Socket</span><span class="p">}</span><span class="w"> </span><span class="k">from</span><span class="w"> </span><span class="p">&quot;</span><span class="s2">phoenix</span><span class="p">&quot;</span><span class="w">
</span><span class="k">import</span><span class="w"> </span><span class="p">{</span><span class="nv">LiveSocket</span><span class="p">}</span><span class="w"> </span><span class="k">from</span><span class="w"> </span><span class="p">&quot;</span><span class="s2">phoenix_live_view</span><span class="p">&quot;</span><span class="w">
</span><span class="w">
</span><span class="kt">let</span><span class="w"> </span><span class="nv">csrfToken</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nb">document</span><span class="p">.</span><span class="nf">querySelector</span><span class="p">(</span><span class="p">&quot;</span><span class="s2">meta[name=&#39;csrf-token&#39;]</span><span class="p">&quot;</span><span class="p">)</span><span class="p">.</span><span class="nf">getAttribute</span><span class="p">(</span><span class="p">&quot;</span><span class="s2">content</span><span class="p">&quot;</span><span class="p">)</span><span class="w">
</span><span class="kt">let</span><span class="w"> </span><span class="nv">liveSocket</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="ow">new</span><span class="w"> </span><span class="nv">LiveSocket</span><span class="p">(</span><span class="p">&quot;</span><span class="s2">/live</span><span class="p">&quot;</span><span class="p">,</span><span class="w"> </span><span class="no">Socket</span><span class="p">,</span><span class="w"> </span><span class="p">{</span><span class="n">params</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="n">_csrf_token</span><span class="p">:</span><span class="w"> </span><span class="nv">csrfToken</span><span class="p">}</span><span class="p">}</span><span class="p">)</span><span class="w">
</span><span class="nv">liveSocket</span><span class="p">.</span><span class="nf">connect</span><span class="p">(</span><span class="p">)</span></code></pre><p>All options are passed directly to the <a href="https://hexdocs.pm/phoenix/1.8.0-rc.4/Phoenix.Socket.html"><code class="inline">Phoenix.Socket</code></a> constructor,
except for the following LiveView specific options:</p><ul><li><code class="inline">bindingPrefix</code> - the prefix to use for phoenix bindings. Defaults <code class="inline">&quot;phx-&quot;</code></li><li><code class="inline">params</code> - the <code class="inline">connect_params</code> to pass to the view's mount callback. May be
a literal object or closure returning an object. When a closure is provided,
the function receives the view's element.</li><li><code class="inline">hooks</code> - a reference to a user-defined hooks namespace, containing client
callbacks for server/client interop. See the <a href="#client-hooks-via-phx-hook">Client hooks</a>
section below for details.</li><li><code class="inline">uploaders</code> - a reference to a user-defined uploaders namespace, containing
client callbacks for client-side direct-to-cloud uploads. See the
<a href="external-uploads.xhtml">External uploads guide</a> for details.</li><li><code class="inline">metadata</code> - additional user-defined metadata that is sent along events to the server.
See the <a href="bindings.html#key-events">Key events</a> section in the bindings guide
for an example.</li></ul><p>The <code class="inline">liveSocket</code> instance exposes the following methods:</p><ul><li><code class="inline">connect()</code> - call this once after creation to connect to the server</li><li><code class="inline">enableDebug()</code> -  turns on debug logging, see <a href="#debugging-client-events">Debugging client events</a></li><li><code class="inline">disableDebug()</code> -  turns off debug logging</li><li><code class="inline">enableLatencySim(milliseconds)</code> - turns on latency simulation, see <a href="#simulating-latency">Simulating latency</a></li><li><code class="inline">disableLatencySim()</code> - turns off latency simulation</li><li><code class="inline">execJS(el, encodedJS)</code> - executes encoded JavaScript in the context of the element</li><li><code class="inline">js()</code> - returns an object with methods to manipluate the DOM and execute JavaScript. The applied changes integrate with server DOM patching. See <a href="#js-commands">JS commands</a>.</li></ul><h2 id="debugging-client-events">Debugging client events</h2><p>To aid debugging on the client when troubleshooting issues, the <code class="inline">enableDebug()</code>
and <code class="inline">disableDebug()</code> functions are exposed on the <code class="inline">LiveSocket</code> JavaScript instance.
Calling <code class="inline">enableDebug()</code> turns on debug logging which includes LiveView life-cycle and
payload events as they come and go from client to server. In practice, you can expose
your instance on <code class="inline">window</code> for quick access in the browser's web console, for example:</p><pre><code class="makeup javascript" translate="no"><span class="c1">//</span><span class="c1"> app.js
</span><span class="kt">let</span><span class="w"> </span><span class="nv">liveSocket</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="ow">new</span><span class="w"> </span><span class="nv">LiveSocket</span><span class="p">(</span><span class="o">...</span><span class="p">)</span><span class="w">
</span><span class="nv">liveSocket</span><span class="p">.</span><span class="nf">connect</span><span class="p">(</span><span class="p">)</span><span class="w">
</span><span class="nb">window</span><span class="p">.</span><span class="n">liveSocket</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nv">liveSocket</span><span class="w">
</span><span class="w">
</span><span class="c1">//</span><span class="c1"> in the browser&#39;s web console
</span><span class="o">&gt;&gt;</span><span class="w"> </span><span class="nv">liveSocket</span><span class="p">.</span><span class="nf">enableDebug</span><span class="p">(</span><span class="p">)</span></code></pre><p>The debug state uses the browser's built-in <code class="inline">sessionStorage</code>, so it will remain in effect
for as long as your browser session lasts.</p><h2 id="simulating-latency">Simulating Latency</h2><p>Proper handling of latency is critical for good UX. LiveView's CSS loading states allow
the client to provide user feedback while awaiting a server response. In development,
near zero latency on localhost does not allow latency to be easily represented or tested,
so LiveView includes a latency simulator with the JavaScript client to ensure your
application provides a pleasant experience. Like the <code class="inline">enableDebug()</code> function above,
the <code class="inline">LiveSocket</code> instance includes <code class="inline">enableLatencySim(milliseconds)</code> and <code class="inline">disableLatencySim()</code>
functions which apply throughout the current browser session. The <code class="inline">enableLatencySim</code> function
accepts an integer in milliseconds for the one-way latency to and from the server. For example:</p><pre><code class="makeup javascript" translate="no"><span class="c1">//</span><span class="c1"> app.js
</span><span class="kt">let</span><span class="w"> </span><span class="nv">liveSocket</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="ow">new</span><span class="w"> </span><span class="nv">LiveSocket</span><span class="p">(</span><span class="o">...</span><span class="p">)</span><span class="w">
</span><span class="nv">liveSocket</span><span class="p">.</span><span class="nf">connect</span><span class="p">(</span><span class="p">)</span><span class="w">
</span><span class="nb">window</span><span class="p">.</span><span class="n">liveSocket</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nv">liveSocket</span><span class="w">
</span><span class="w">
</span><span class="c1">//</span><span class="c1"> in the browser&#39;s web console
</span><span class="o">&gt;&gt;</span><span class="w"> </span><span class="nv">liveSocket</span><span class="p">.</span><span class="nf">enableLatencySim</span><span class="p">(</span><span class="mi">1000</span><span class="p">)</span><span class="w">
</span><span class="p">[</span><span class="no">Log</span><span class="p">]</span><span class="w"> </span><span class="nv">latency</span><span class="w"> </span><span class="nv">simulator</span><span class="w"> </span><span class="nv">enabled</span><span class="w"> </span><span class="k">for</span><span class="w"> </span><span class="nv">the</span><span class="w"> </span><span class="nv">duration</span><span class="w"> </span><span class="nv">of</span><span class="w"> </span><span class="nb">this</span><span class="w"> </span><span class="nv">browser</span><span class="w"> </span><span class="nv">session</span><span class="p">.</span><span class="w">
</span><span class="w">      </span><span class="n">Call</span><span class="w"> </span><span class="nf">disableLatencySim</span><span class="p">(</span><span class="p">)</span><span class="w"> </span><span class="nv">to</span><span class="w"> </span><span class="nv">disable</span></code></pre><h2 id="handling-server-pushed-events">Handling server-pushed events</h2><p>When the server uses <a href="Phoenix.LiveView.xhtml#push_event/3"><code class="inline">Phoenix.LiveView.push_event/3</code></a>, the event name
will be dispatched in the browser with the <code class="inline">phx:</code> prefix. For example,
imagine the following template where you want to highlight an existing
element from the server to draw the user's attention:</p><pre><code class="makeup heex" translate="no"><span class="p">&lt;</span><span class="nt">div</span><span class="w"> </span><span class="na">id</span><span class="p">=</span><span class="p" data-group-id="8975655383-1">{</span><span class="s">&quot;item-</span><span class="si" data-group-id="8975655383-ex-1">#{</span><span class="n">item</span><span class="o">.</span><span class="n">id</span><span class="si" data-group-id="8975655383-ex-1">}</span><span class="s">&quot;</span><span class="p" data-group-id="8975655383-1">}</span><span class="w"> </span><span class="na">class</span><span class="p">=</span><span class="p">&quot;</span><span class="s2">i</span><span class="s2">t</span><span class="s2">e</span><span class="s2">m</span><span class="p">&quot;</span><span class="p">&gt;</span><span class="w">
</span><span class="w">  </span><span class="p" data-group-id="8975655383-2">{</span><span class="n">item</span><span class="o">.</span><span class="n">title</span><span class="p" data-group-id="8975655383-2">}</span><span class="w">
</span><span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span></code></pre><p>Next, the server can issue a highlight using the standard <code class="inline">push_event</code>:</p><pre><code class="makeup elixir" translate="no"><span class="kd">def</span><span class="w"> </span><span class="nf">handle_info</span><span class="p" data-group-id="8508676599-1">(</span><span class="p" data-group-id="8508676599-2">{</span><span class="ss">:item_updated</span><span class="p">,</span><span class="w"> </span><span class="n">item</span><span class="p" data-group-id="8508676599-2">}</span><span class="p">,</span><span class="w"> </span><span class="n">socket</span><span class="p" data-group-id="8508676599-1">)</span><span class="w"> </span><span class="k" data-group-id="8508676599-3">do</span><span class="w">
  </span><span class="p" data-group-id="8508676599-4">{</span><span class="ss">:noreply</span><span class="p">,</span><span class="w"> </span><span class="n">push_event</span><span class="p" data-group-id="8508676599-5">(</span><span class="n">socket</span><span class="p">,</span><span class="w"> </span><span class="s">&quot;highlight&quot;</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="8508676599-6">%{</span><span class="ss">id</span><span class="p">:</span><span class="w"> </span><span class="s">&quot;item-</span><span class="si" data-group-id="8508676599-7">#{</span><span class="n">item</span><span class="o">.</span><span class="n">id</span><span class="si" data-group-id="8508676599-7">}</span><span class="s">&quot;</span><span class="p" data-group-id="8508676599-6">}</span><span class="p" data-group-id="8508676599-5">)</span><span class="p" data-group-id="8508676599-4">}</span><span class="w">
</span><span class="k" data-group-id="8508676599-3">end</span></code></pre><p>Finally, a window event listener can listen for the event and conditionally
execute the highlight command if the element matches:</p><pre><code class="makeup javascript" translate="no"><span class="kt">let</span><span class="w"> </span><span class="nv">liveSocket</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="ow">new</span><span class="w"> </span><span class="nv">LiveSocket</span><span class="p">(</span><span class="o">...</span><span class="p">)</span><span class="w">
</span><span class="nb">window</span><span class="p">.</span><span class="nf">addEventListener</span><span class="p">(</span><span class="p">&quot;</span><span class="s2">phx:highlight</span><span class="p">&quot;</span><span class="p">,</span><span class="w"> </span><span class="p">(</span><span class="nv">e</span><span class="p">)</span><span class="w"> </span><span class="kt">=&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">  </span><span class="kt">let</span><span class="w"> </span><span class="nv">el</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nb">document</span><span class="p">.</span><span class="nf">getElementById</span><span class="p">(</span><span class="nv">e</span><span class="p">.</span><span class="n">detail</span><span class="p">.</span><span class="n">id</span><span class="p">)</span><span class="w">
</span><span class="w">  </span><span class="k">if</span><span class="p">(</span><span class="nv">el</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="cm">//</span><span class="cm"> logic for highlighting
</span><span class="w">  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="p">)</span></code></pre><p>If you desire, you can also integrate this functionality with Phoenix'
JS commands, executing JS commands for the given element whenever highlight
is triggered. First, update the element to embed the JS command into a data
attribute:</p><pre><code class="makeup heex" translate="no"><span class="p">&lt;</span><span class="nt">div</span><span class="w"> </span><span class="na">id</span><span class="p">=</span><span class="p" data-group-id="7641782758-1">{</span><span class="s">&quot;item-</span><span class="si" data-group-id="7641782758-ex-1">#{</span><span class="n">item</span><span class="o">.</span><span class="n">id</span><span class="si" data-group-id="7641782758-ex-1">}</span><span class="s">&quot;</span><span class="p" data-group-id="7641782758-1">}</span><span class="w"> </span><span class="na">class</span><span class="p">=</span><span class="p">&quot;</span><span class="s2">i</span><span class="s2">t</span><span class="s2">e</span><span class="s2">m</span><span class="p">&quot;</span><span class="w"> </span><span class="na">data-highlight</span><span class="p">=</span><span class="p" data-group-id="7641782758-2">{</span><span class="nc">JS</span><span class="o">.</span><span class="n">transition</span><span class="p" data-group-id="7641782758-ex-2">(</span><span class="s">&quot;highlight&quot;</span><span class="p" data-group-id="7641782758-ex-2">)</span><span class="p" data-group-id="7641782758-2">}</span><span class="p">&gt;</span><span class="w">
</span><span class="w">  </span><span class="p" data-group-id="7641782758-3">{</span><span class="n">item</span><span class="o">.</span><span class="n">title</span><span class="p" data-group-id="7641782758-3">}</span><span class="w">
</span><span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span></code></pre><p>Now, in the event listener, use <code class="inline">LiveSocket.execJS</code> to trigger all JS
commands in the new attribute:</p><pre><code class="makeup javascript" translate="no"><span class="kt">let</span><span class="w"> </span><span class="nv">liveSocket</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="ow">new</span><span class="w"> </span><span class="nv">LiveSocket</span><span class="p">(</span><span class="o">...</span><span class="p">)</span><span class="w">
</span><span class="nb">window</span><span class="p">.</span><span class="nf">addEventListener</span><span class="p">(</span><span class="p">&quot;</span><span class="s2">phx:highlight</span><span class="p">&quot;</span><span class="p">,</span><span class="w"> </span><span class="p">(</span><span class="nv">e</span><span class="p">)</span><span class="w"> </span><span class="kt">=&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">  </span><span class="nb">document</span><span class="p">.</span><span class="nf">querySelectorAll</span><span class="p">(</span><span class="p">`</span><span class="s">[data-highlight]</span><span class="p">`</span><span class="p">)</span><span class="p">.</span><span class="nf">forEach</span><span class="p">(</span><span class="nv">el</span><span class="w"> </span><span class="kt">=&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="k">if</span><span class="p">(</span><span class="nv">el</span><span class="p">.</span><span class="n">id</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="nv">e</span><span class="p">.</span><span class="n">detail</span><span class="p">.</span><span class="n">id</span><span class="p">)</span><span class="p">{</span><span class="w">
</span><span class="w">      </span><span class="nv">liveSocket</span><span class="p">.</span><span class="nf">execJS</span><span class="p">(</span><span class="nv">el</span><span class="p">,</span><span class="w"> </span><span class="nv">el</span><span class="p">.</span><span class="nf">getAttribute</span><span class="p">(</span><span class="p">&quot;</span><span class="s2">data-highlight</span><span class="p">&quot;</span><span class="p">)</span><span class="p">)</span><span class="w">
</span><span class="w">    </span><span class="p">}</span><span class="w">
</span><span class="w">  </span><span class="p">}</span><span class="p">)</span><span class="w">
</span><span class="p">}</span><span class="p">)</span></code></pre><h2 id="client-hooks-via-phx-hook">Client hooks via <code class="inline">phx-hook</code></h2><p>To handle custom client-side JavaScript when an element is added, updated,
or removed by the server, a hook object may be provided via <code class="inline">phx-hook</code>.
<code class="inline">phx-hook</code> must point to an object with the following life-cycle callbacks:</p><ul><li><code class="inline">mounted</code> - the element has been added to the DOM and its server
LiveView has finished mounting</li><li><code class="inline">beforeUpdate</code> - the element is about to be updated in the DOM.
<em>Note</em>: any call here must be synchronous as the operation cannot
be deferred or cancelled.</li><li><code class="inline">updated</code> - the element has been updated in the DOM by the server</li><li><code class="inline">destroyed</code> - the element has been removed from the page, either
by a parent update, or by the parent being removed entirely</li><li><code class="inline">disconnected</code> - the element's parent LiveView has disconnected from the server</li><li><code class="inline">reconnected</code> - the element's parent LiveView has reconnected to the server</li></ul><p><em>Note:</em> When using hooks outside the context of a LiveView, <code class="inline">mounted</code> is the only
callback invoked, and only those elements on the page at DOM ready will be tracked.
For dynamic tracking of the DOM as elements are added, removed, and updated, a LiveView
should be used.</p><p>The above life-cycle callbacks have in-scope access to the following attributes:</p><ul><li><code class="inline">el</code> - attribute referencing the bound DOM node</li><li><code class="inline">liveSocket</code> - the reference to the underlying <code class="inline">LiveSocket</code> instance</li><li><code class="inline">pushEvent(event, payload, (reply, ref) =&gt; ...)</code> - method to push an event from the client to the LiveView server.
If no callback function is passed, a promise that resolves to the <code class="inline">reply</code> is returned.</li><li><code class="inline">pushEventTo(selectorOrTarget, event, payload, (reply, ref) =&gt; ...)</code> - method to push targeted events from the client
to LiveViews and LiveComponents. It sends the event to the LiveComponent or LiveView the <code class="inline">selectorOrTarget</code> is
defined in, where its value can be either a query selector or an actual DOM element. If the query selector returns
more than one element it will send the event to all of them, even if all the elements are in the same LiveComponent
or LiveView. <code class="inline">pushEventTo</code> supports passing the node element e.g. <code class="inline">this.el</code> instead of selector e.g. <code class="inline">&quot;#&quot; + this.el.id</code>
as the first parameter for target.
As there can be multiple targets, if no callback is passed, a promise is returned that matches the return value of
<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/allSettled#return_value"><code class="inline">Promise.allSettled()</code></a>. Individual fulfilled values are of the format <code class="inline">{ reply, ref }</code>.</li><li><code class="inline">handleEvent(event, (payload) =&gt; ...)</code> - method to handle an event pushed from the server. Returns a value that can be passed to <code class="inline">removeHandleEvent</code> to remove the event handler.</li><li><code class="inline">removeHandleEvent(ref)</code> - method to remove an event handler added via <code class="inline">handleEvent</code></li><li><code class="inline">upload(name, files)</code> - method to inject a list of file-like objects into an uploader.</li><li><code class="inline">uploadTo(selectorOrTarget, name, files)</code> - method to inject a list of file-like objects into an uploader.
The hook will send the files to the uploader with <code class="inline">name</code> defined by <a href="Phoenix.LiveView.xhtml#allow_upload/3"><code class="inline">allow_upload/3</code></a>
on the server-side. Dispatching new uploads triggers an input change event which will be sent to the
LiveComponent or LiveView the <code class="inline">selectorOrTarget</code> is defined in, where its value can be either a query selector or an
actual DOM element. If the query selector returns more than one live file input, an error will be logged.</li><li><code class="inline">js()</code> - returns an object with methods to manipluate the DOM and execute JavaScript. The applied changes integrate with server DOM patching. See <a href="#js-commands">JS commands</a>.</li></ul><p>For example, the markup for a controlled input for phone-number formatting could be written
like this:</p><pre><code class="makeup heex" translate="no"><span class="p">&lt;</span><span class="nt">input</span><span class="w"> </span><span class="na">type</span><span class="p">=</span><span class="p">&quot;</span><span class="s2">text</span><span class="p">&quot;</span><span class="w"> </span><span class="na">name</span><span class="p">=</span><span class="p">&quot;</span><span class="s2">user[phone_number]</span><span class="p">&quot;</span><span class="w"> </span><span class="na">id</span><span class="p">=</span><span class="p">&quot;</span><span class="s2">u</span><span class="s2">s</span><span class="s2">e</span><span class="s2">r</span><span class="s2">-</span><span class="s2">p</span><span class="s2">h</span><span class="s2">o</span><span class="s2">n</span><span class="s2">e</span><span class="s2">-</span><span class="s2">n</span><span class="s2">u</span><span class="s2">m</span><span class="s2">b</span><span class="s2">e</span><span class="s2">r</span><span class="p">&quot;</span><span class="w"> </span><span class="na">phx-hook</span><span class="p">=</span><span class="p">&quot;</span><span class="s2">PhoneNumber</span><span class="p">&quot;</span><span class="w"> </span><span class="p">/&gt;</span></code></pre><p>Then a hook callback object could be defined and passed to the socket:</p><pre><code class="makeup javascript" translate="no"><span class="sd">/**</span><span class="w">
</span><span class="w"> </span><span class="sd">*</span><span class="sd"> @type {import(&quot;phoenix_live_view&quot;).HooksOptions}
</span><span class="w"> </span><span class="sd">*/</span><span class="w">
</span><span class="kt">let</span><span class="w"> </span><span class="no">Hooks</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="p">}</span><span class="w">
</span><span class="bp">Hooks</span><span class="p">.</span><span class="n">PhoneNumber</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">  </span><span class="nf">mounted</span><span class="p">(</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="nb">this</span><span class="p">.</span><span class="n">el</span><span class="p">.</span><span class="nf">addEventListener</span><span class="p">(</span><span class="p">&quot;</span><span class="s2">input</span><span class="p">&quot;</span><span class="p">,</span><span class="w"> </span><span class="nv">e</span><span class="w"> </span><span class="kt">=&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">      </span><span class="kt">let</span><span class="w"> </span><span class="nv">match</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nb">this</span><span class="p">.</span><span class="n">el</span><span class="p">.</span><span class="n">value</span><span class="p">.</span><span class="nf">replace</span><span class="p">(</span><span class="p">/</span><span class="no">\D</span><span class="p">/</span><span class="k">g</span><span class="p">,</span><span class="w"> </span><span class="p">&quot;</span><span class="p">&quot;</span><span class="p">)</span><span class="p">.</span><span class="nf">match</span><span class="p">(</span><span class="p">/</span><span class="k">^</span><span class="p">(</span><span class="no">\d</span><span class="o">{</span><span class="m">3</span><span class="o">}</span><span class="p">)</span><span class="p">(</span><span class="no">\d</span><span class="o">{</span><span class="m">3</span><span class="o">}</span><span class="p">)</span><span class="p">(</span><span class="no">\d</span><span class="o">{</span><span class="m">4</span><span class="o">}</span><span class="p">)</span><span class="k">$</span><span class="p">/</span><span class="p">)</span><span class="w">
</span><span class="w">      </span><span class="k">if</span><span class="p">(</span><span class="nv">match</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="nb">this</span><span class="p">.</span><span class="n">el</span><span class="p">.</span><span class="n">value</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">`</span><span class="si">${</span><span class="nv">match</span><span class="si">[</span><span class="mi">1</span><span class="si">]</span><span class="si">}</span><span class="s">-</span><span class="si">${</span><span class="nv">match</span><span class="si">[</span><span class="mi">2</span><span class="si">]</span><span class="si">}</span><span class="s">-</span><span class="si">${</span><span class="nv">match</span><span class="si">[</span><span class="mi">3</span><span class="si">]</span><span class="si">}</span><span class="p">`</span><span class="w">
</span><span class="w">      </span><span class="p">}</span><span class="w">
</span><span class="w">    </span><span class="p">}</span><span class="p">)</span><span class="w">
</span><span class="w">  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="kt">let</span><span class="w"> </span><span class="nv">liveSocket</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="ow">new</span><span class="w"> </span><span class="nv">LiveSocket</span><span class="p">(</span><span class="p">&quot;</span><span class="s2">/live</span><span class="p">&quot;</span><span class="p">,</span><span class="w"> </span><span class="no">Socket</span><span class="p">,</span><span class="w"> </span><span class="p">{</span><span class="n">hooks</span><span class="p">:</span><span class="w"> </span><span class="no">Hooks</span><span class="p">,</span><span class="w"> </span><span class="o">...</span><span class="p">}</span><span class="p">)</span><span class="w">
</span><span class="p">.</span><span class="p">.</span><span class="p">.</span></code></pre><p><em>Note</em>: when using <code class="inline">phx-hook</code>, a unique DOM ID must always be set.</p><p>For integration with client-side libraries which require a broader access to full
DOM management, the <code class="inline">LiveSocket</code> constructor accepts a <code class="inline">dom</code> option with an
<code class="inline">onBeforeElUpdated</code> callback. The <code class="inline">fromEl</code> and <code class="inline">toEl</code> DOM nodes are passed to the
function just before the DOM patch operations occurs in LiveView. This allows external
libraries to (re)initialize DOM elements or copy attributes as necessary as LiveView
performs its own patch operations. The update operation cannot be cancelled or deferred,
and the return value is ignored.</p><p>For example, the following option could be used to guarantee that some attributes set on the client-side are kept intact:</p><pre><code class="makeup javascript" translate="no"><span class="o">...</span><span class="w">
</span><span class="nv">let</span><span class="w"> </span><span class="nv">liveSocket</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="ow">new</span><span class="w"> </span><span class="nv">LiveSocket</span><span class="p">(</span><span class="p">&quot;</span><span class="s2">/live</span><span class="p">&quot;</span><span class="p">,</span><span class="w"> </span><span class="no">Socket</span><span class="p">,</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">  </span><span class="n">params</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="n">_csrf_token</span><span class="p">:</span><span class="w"> </span><span class="nv">csrfToken</span><span class="p">}</span><span class="p">,</span><span class="w">
</span><span class="w">  </span><span class="n">hooks</span><span class="p">:</span><span class="w"> </span><span class="no">Hooks</span><span class="p">,</span><span class="w">
</span><span class="w">  </span><span class="n">dom</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="nf">onBeforeElUpdated</span><span class="p">(</span><span class="nv">from</span><span class="p">,</span><span class="w"> </span><span class="nv">to</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">      </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">const</span><span class="w"> </span><span class="nv">attr</span><span class="w"> </span><span class="ow">of</span><span class="w"> </span><span class="nv">from</span><span class="p">.</span><span class="n">attributes</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="nv">attr</span><span class="p">.</span><span class="n">name</span><span class="p">.</span><span class="nf">startsWith</span><span class="p">(</span><span class="p">&quot;</span><span class="s2">data-js-</span><span class="p">&quot;</span><span class="p">)</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">          </span><span class="nv">to</span><span class="p">.</span><span class="nf">setAttribute</span><span class="p">(</span><span class="nv">attr</span><span class="p">.</span><span class="n">name</span><span class="p">,</span><span class="w"> </span><span class="nv">attr</span><span class="p">.</span><span class="n">value</span><span class="p">)</span><span class="p">;</span><span class="w">
</span><span class="w">        </span><span class="p">}</span><span class="w">
</span><span class="w">      </span><span class="p">}</span><span class="w">
</span><span class="w">    </span><span class="p">}</span><span class="w">
</span><span class="w">  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="p">)</span></code></pre><p>In the example above, all attributes starting with <code class="inline">data-js-</code> won't be replaced when the DOM is patched by LiveView.</p><p>A hook can also be defined as a subclass of <code class="inline">ViewHook</code>:</p><pre><code class="makeup javascript" translate="no"><span class="k">import</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="nv">ViewHook</span><span class="w"> </span><span class="p">}</span><span class="w"> </span><span class="k">from</span><span class="w"> </span><span class="p">&quot;</span><span class="s2">phoenix_live_view</span><span class="p">&quot;</span><span class="w">
</span><span class="w">
</span><span class="kt">class</span><span class="w"> </span><span class="nc">MyHook</span><span class="w"> </span><span class="kd">extends</span><span class="w"> </span><span class="ni">ViewHook</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">  </span><span class="nf">mounted</span><span class="p">(</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="o">...</span><span class="w">
</span><span class="w">  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="kt">let</span><span class="w"> </span><span class="nv">liveSocket</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="ow">new</span><span class="w"> </span><span class="nv">LiveSocket</span><span class="p">(</span><span class="o">...</span><span class="p">,</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">  </span><span class="n">hooks</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="nv">MyHook</span><span class="w">
</span><span class="w">  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="p">)</span></code></pre><h3 id="colocated-hooks-colocated-javascript">Colocated Hooks / Colocated JavaScript</h3><p>When writing components that require some more control over the DOM, it often feels inconvenient to
have to write a hook in a separate file. Instead, one wants to have the hook logic right next to the component
code. For such cases, HEEx supports <a href="Phoenix.LiveView.ColocatedHook.xhtml"><code class="inline">Phoenix.LiveView.ColocatedHook</code></a> and <a href="Phoenix.LiveView.ColocatedJS.xhtml"><code class="inline">Phoenix.LiveView.ColocatedJS</code></a>.</p><p>Let's see an example:</p><pre><code class="makeup elixir" translate="no"><span class="kd">def</span><span class="w"> </span><span class="nf">phone_number_input</span><span class="p" data-group-id="2294445374-1">(</span><span class="n">assigns</span><span class="p" data-group-id="2294445374-1">)</span><span class="w"> </span><span class="k" data-group-id="2294445374-2">do</span><span class="w">
  </span><span class="sx">~H&quot;&quot;&quot;</span><span class="w">
</span><span class="w">  </span><span class="p">&lt;</span><span class="nt">input</span><span class="w"> </span><span class="na">type</span><span class="p">=</span><span class="p">&quot;</span><span class="s2">text</span><span class="p">&quot;</span><span class="w"> </span><span class="na">name</span><span class="p">=</span><span class="p">&quot;</span><span class="s2">user[phone_number]</span><span class="p">&quot;</span><span class="w"> </span><span class="na">id</span><span class="p">=</span><span class="p">&quot;</span><span class="s2">u</span><span class="s2">s</span><span class="s2">e</span><span class="s2">r</span><span class="s2">-</span><span class="s2">p</span><span class="s2">h</span><span class="s2">o</span><span class="s2">n</span><span class="s2">e</span><span class="s2">-</span><span class="s2">n</span><span class="s2">u</span><span class="s2">m</span><span class="s2">b</span><span class="s2">e</span><span class="s2">r</span><span class="p">&quot;</span><span class="w"> </span><span class="na">phx-hook</span><span class="p">=</span><span class="p">&quot;</span><span class="s2">.PhoneNumber</span><span class="p">&quot;</span><span class="w"> </span><span class="p">/&gt;</span><span class="w">
</span><span class="w">  </span><span class="p">&lt;</span><span class="nt">script</span><span class="w"> </span><span class="na">:type</span><span class="p">=</span><span class="p" data-group-id="0603797129-1">{</span><span class="nc">Phoenix.LiveView.ColocatedHook</span><span class="p" data-group-id="0603797129-1">}</span><span class="w"> </span><span class="na">name</span><span class="p">=</span><span class="p">&quot;</span><span class="s2">.PhoneNumber</span><span class="p">&quot;</span><span class="p">&gt;</span><span class="w">
</span><span class="w">    </span><span class="o">export</span><span class="w"> </span><span class="k">default</span><span class="w"> </span><span class="p" data-group-id="0603797129-2">{</span><span class="w">
      </span><span class="n">mounted</span><span class="p" data-group-id="2294445374-3">(</span><span class="p" data-group-id="2294445374-3">)</span><span class="w"> </span><span class="p" data-group-id="2294445374-4">{</span><span class="w">
        </span><span class="n">this</span><span class="o">.</span><span class="n">el</span><span class="o">.</span><span class="n">addEventListener</span><span class="p" data-group-id="2294445374-5">(</span><span class="s">&quot;input&quot;</span><span class="p">,</span><span class="w"> </span><span class="n">e</span><span class="w"> </span><span class="p">=&gt;</span><span class="w"> </span><span class="p" data-group-id="2294445374-6">{</span><span class="w">
          </span><span class="n">let</span><span class="w"> </span><span class="n">match</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">this</span><span class="o">.</span><span class="n">el</span><span class="o">.</span><span class="n">value</span><span class="o">.</span><span class="n">replace</span><span class="p" data-group-id="2294445374-7">(</span><span class="o">/</span><span class="err">\</span><span class="nc">D</span><span class="o">/</span><span class="n">g</span><span class="p">,</span><span class="w"> </span><span class="s">&quot;&quot;</span><span class="p" data-group-id="2294445374-7">)</span><span class="o">.</span><span class="n">match</span><span class="p" data-group-id="2294445374-8">(</span><span class="o">/</span><span class="o">^</span><span class="p" data-group-id="2294445374-9">(</span><span class="err">\</span><span class="n">d</span><span class="p" data-group-id="2294445374-10">{</span><span class="mi">3</span><span class="p" data-group-id="2294445374-10">}</span><span class="p" data-group-id="2294445374-9">)</span><span class="p" data-group-id="2294445374-11">(</span><span class="err">\</span><span class="n">d</span><span class="p" data-group-id="2294445374-12">{</span><span class="mi">3</span><span class="p" data-group-id="2294445374-12">}</span><span class="p" data-group-id="2294445374-11">)</span><span class="p" data-group-id="2294445374-13">(</span><span class="err">\</span><span class="n">d</span><span class="p" data-group-id="2294445374-14">{</span><span class="mi">4</span><span class="p" data-group-id="2294445374-14">}</span><span class="p" data-group-id="2294445374-13">)</span><span class="err">$</span><span class="o">/</span><span class="p" data-group-id="2294445374-8">)</span><span class="w">
          </span><span class="k">if</span><span class="p" data-group-id="2294445374-15">(</span><span class="n">match</span><span class="p" data-group-id="2294445374-15">)</span><span class="w"> </span><span class="p" data-group-id="2294445374-16">{</span><span class="w">
            </span><span class="n">this</span><span class="o">.</span><span class="n">el</span><span class="o">.</span><span class="n">value</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="err">`</span><span class="err">$</span><span class="p" data-group-id="2294445374-17">{</span><span class="n">match</span><span class="p" data-group-id="2294445374-18">[</span><span class="mi">1</span><span class="p" data-group-id="2294445374-18">]</span><span class="p" data-group-id="2294445374-17">}</span><span class="o">-</span><span class="err">$</span><span class="p" data-group-id="2294445374-19">{</span><span class="n">match</span><span class="p" data-group-id="2294445374-20">[</span><span class="mi">2</span><span class="p" data-group-id="2294445374-20">]</span><span class="p" data-group-id="2294445374-19">}</span><span class="o">-</span><span class="err">$</span><span class="p" data-group-id="2294445374-21">{</span><span class="n">match</span><span class="p" data-group-id="2294445374-22">[</span><span class="mi">3</span><span class="p" data-group-id="2294445374-22">]</span><span class="p" data-group-id="2294445374-21">}</span><span class="err">`</span><span class="w">
          </span><span class="p" data-group-id="2294445374-16">}</span><span class="w">
        </span><span class="p" data-group-id="2294445374-6">}</span><span class="p" data-group-id="2294445374-5">)</span><span class="w">
      </span><span class="p" data-group-id="2294445374-4">}</span><span class="w">
    </span><span class="p" data-group-id="0603797129-2">}</span><span class="w">
</span><span class="w">  </span><span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span><span class="w">
</span><span class="w">  </span><span class="sx">&quot;&quot;&quot;</span><span class="w">
</span><span class="k" data-group-id="2294445374-2">end</span></code></pre><p>When LiveView finds a <code class="inline">&lt;script&gt;</code> element with <code class="inline">:type={ColocatedHook}</code>, it will extract the
hook code at compile time and write it into a special folder inside the <code class="inline">_build/</code> directory.
To use the hooks, all that needs to be done is to import the manifest into your JS bundle,
which is automatically done in the <code class="inline">app.js</code> file generated by <a href="https://hexdocs.pm/phx_new/Mix.Tasks.Phx.New.html"><code class="inline">mix phx.new</code></a> for new Phoenix 1.8 apps:</p><pre><code class="makeup diff" translate="no"><span class="n">...
</span><span class="n">  import {Socket} from &quot;phoenix&quot;
</span><span class="n">  import {LiveSocket} from &quot;phoenix_live_view&quot;
</span><span class="n">  import topbar from &quot;../vendor/topbar&quot;
</span><span class="gi">+</span><span class="gi"> import {hooks as colocatedHooks} from &quot;phoenix-colocated/my_app&quot;
</span><span class="w">
</span><span class="n">  let csrfToken = document.querySelector(&quot;meta[name=&#39;csrf-token&#39;]&quot;).getAttribute(&quot;content&quot;)
</span><span class="n">  let liveSocket = new LiveSocket(&quot;/live&quot;, Socket, {
</span><span class="n">    longPollFallbackMs: 2500,
</span><span class="n">    params: {_csrf_token: csrfToken},
</span><span class="gi">+</span><span class="gi">   hooks: {...colocatedHooks}
</span><span class="n"> })</span></code></pre><p>The <code class="inline">&quot;phoenix-colocated&quot;</code> package is a folder inside the <code class="inline">Mix.Project.build_path()</code>,
which is included by default in the <a href="https://hexdocs.pm/esbuild"><code class="inline">esbuild</code></a> configuration of new
Phoenix projects (requires <code class="inline">{:esbuild, &quot;~&gt; 0.10&quot;}</code> or later):</p><pre><code class="makeup elixir" translate="no"><span class="n">config</span><span class="w"> </span><span class="ss">:esbuild</span><span class="p">,</span><span class="w">
  </span><span class="n">...</span><span class="w">
  </span><span class="ss">my_app</span><span class="p">:</span><span class="w"> </span><span class="p" data-group-id="2625918280-1">[</span><span class="w">
    </span><span class="ss">args</span><span class="p">:</span><span class="w">
      </span><span class="sx">~w(js/app.js --bundle --target=es2022 --outdir=../priv/static/assets/js --external:/fonts/* --external:/images/* --alias:@=.)</span><span class="p">,</span><span class="w">
    </span><span class="ss">cd</span><span class="p">:</span><span class="w"> </span><span class="nc">Path</span><span class="o">.</span><span class="n">expand</span><span class="p" data-group-id="2625918280-2">(</span><span class="s">&quot;../assets&quot;</span><span class="p">,</span><span class="w"> </span><span class="bp">__DIR__</span><span class="p" data-group-id="2625918280-2">)</span><span class="p">,</span><span class="w">
    </span><span class="ss">env</span><span class="p">:</span><span class="w"> </span><span class="p" data-group-id="2625918280-3">%{</span><span class="w">
      </span><span class="s">&quot;NODE_PATH&quot;</span><span class="w"> </span><span class="p">=&gt;</span><span class="w"> </span><span class="p" data-group-id="2625918280-4">[</span><span class="nc">Path</span><span class="o">.</span><span class="n">expand</span><span class="p" data-group-id="2625918280-5">(</span><span class="s">&quot;../deps&quot;</span><span class="p">,</span><span class="w"> </span><span class="bp">__DIR__</span><span class="p" data-group-id="2625918280-5">)</span><span class="p">,</span><span class="w"> </span><span class="nc">Mix.Project</span><span class="o">.</span><span class="n">build_path</span><span class="p" data-group-id="2625918280-6">(</span><span class="p" data-group-id="2625918280-6">)</span><span class="p" data-group-id="2625918280-4">]</span><span class="w">
    </span><span class="p" data-group-id="2625918280-3">}</span><span class="w">
  </span><span class="p" data-group-id="2625918280-1">]</span></code></pre><p>When rendering a component that includes a colocated hook, the <code class="inline">&lt;script&gt;</code> tag is omitted
from the rendered output. Furthermore, to prevent conflicts with other components, colocated hooks
require you to use the special dot syntax when naming the hook, as well as in the <code class="inline">phx-hook</code> attribute.
LiveView will prefix the hook name by the current module name at compile time. This also means
that in cases where a hook is meant to be used in multiple components across a project, the hook
should be defined as a regular, non-colocated hook instead.</p><p>You can read more about colocated hooks <a href="Phoenix.LiveView.ColocatedHook.xhtml">in the module documentation for <code class="inline">ColocatedHook</code></a>.
LiveView also supports colocating other JavaScript code, for more information, see <a href="Phoenix.LiveView.ColocatedJS.xhtml"><code class="inline">Phoenix.LiveView.ColocatedJS</code></a>.</p><h3 id="client-server-communication">Client-server communication</h3><p>A hook can push events to the LiveView by using the <code class="inline">pushEvent</code> function and receive a
reply from the server via a <code class="inline">{:reply, map, socket}</code> return value. The reply payload will be
passed to the optional <code class="inline">pushEvent</code> response callback.</p><p>Communication with the hook from the server can be done by reading data attributes on the
hook element or by using <a href="Phoenix.LiveView.xhtml#push_event/3"><code class="inline">Phoenix.LiveView.push_event/3</code></a> on the server and <code class="inline">handleEvent</code> on the client.</p><p>An example of responding with <code class="inline">:reply</code> might look like this.</p><pre><code class="makeup heex" translate="no"><span class="p">&lt;</span><span class="nt">div</span><span class="w"> </span><span class="na">phx-hook</span><span class="p">=</span><span class="p">&quot;</span><span class="s2">ClickMeHook</span><span class="p">&quot;</span><span class="w"> </span><span class="na">id</span><span class="p">=</span><span class="p">&quot;</span><span class="s2">c</span><span class="s2">l</span><span class="s2">i</span><span class="s2">c</span><span class="s2">k</span><span class="s2">-</span><span class="s2">m</span><span class="s2">e</span><span class="p">&quot;</span><span class="p">&gt;</span><span class="w">
</span><span class="n">  Click me for a message!
</span><span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span></code></pre><pre><code class="makeup javascript" translate="no"><span class="bp">Hooks</span><span class="p">.</span><span class="n">ClickMeHook</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">  </span><span class="nf">mounted</span><span class="p">(</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="nb">this</span><span class="p">.</span><span class="n">el</span><span class="p">.</span><span class="nf">addEventListener</span><span class="p">(</span><span class="p">&quot;</span><span class="s2">click</span><span class="p">&quot;</span><span class="p">,</span><span class="w"> </span><span class="p">(</span><span class="p">)</span><span class="w"> </span><span class="kt">=&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">      </span><span class="cm">//</span><span class="cm"> Push event to LiveView with callback for reply
</span><span class="w">      </span><span class="nb">this</span><span class="p">.</span><span class="nf">pushEvent</span><span class="p">(</span><span class="p">&quot;</span><span class="s2">get_message</span><span class="p">&quot;</span><span class="p">,</span><span class="w"> </span><span class="p">{</span><span class="p">}</span><span class="p">,</span><span class="w"> </span><span class="p">(</span><span class="nv">reply</span><span class="p">)</span><span class="w"> </span><span class="kt">=&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="nb">console</span><span class="p">.</span><span class="nf">debug</span><span class="p">(</span><span class="nv">reply</span><span class="p">.</span><span class="n">message</span><span class="p">)</span><span class="p">;</span><span class="w">
</span><span class="w">      </span><span class="p">}</span><span class="p">)</span><span class="p">;</span><span class="w">
</span><span class="w">    </span><span class="p">}</span><span class="p">)</span><span class="p">;</span><span class="w">
</span><span class="w">  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span></code></pre><p>Then in your callback you respond with <code class="inline">{:reply, map, socket}</code></p><pre><code class="makeup elixir" translate="no"><span class="kd">def</span><span class="w"> </span><span class="nf">handle_event</span><span class="p" data-group-id="0008864164-1">(</span><span class="s">&quot;get_message&quot;</span><span class="p">,</span><span class="w"> </span><span class="c">_params</span><span class="p">,</span><span class="w"> </span><span class="n">socket</span><span class="p" data-group-id="0008864164-1">)</span><span class="w"> </span><span class="k" data-group-id="0008864164-2">do</span><span class="w">
  </span><span class="c1"># Use :reply to respond to the pushEvent</span><span class="w">
  </span><span class="p" data-group-id="0008864164-3">{</span><span class="ss">:reply</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="0008864164-4">%{</span><span class="ss">message</span><span class="p">:</span><span class="w"> </span><span class="s">&quot;Hello from LiveView!&quot;</span><span class="p" data-group-id="0008864164-4">}</span><span class="p">,</span><span class="w"> </span><span class="n">socket</span><span class="p" data-group-id="0008864164-3">}</span><span class="w">
</span><span class="k" data-group-id="0008864164-2">end</span></code></pre><p>Another example, to implement infinite scrolling, one can pass the current page using data attributes:</p><pre><code class="makeup heex" translate="no"><span class="p">&lt;</span><span class="nt">div</span><span class="w"> </span><span class="na">id</span><span class="p">=</span><span class="p">&quot;</span><span class="s2">i</span><span class="s2">n</span><span class="s2">f</span><span class="s2">i</span><span class="s2">n</span><span class="s2">i</span><span class="s2">t</span><span class="s2">e</span><span class="s2">-</span><span class="s2">s</span><span class="s2">c</span><span class="s2">r</span><span class="s2">o</span><span class="s2">l</span><span class="s2">l</span><span class="p">&quot;</span><span class="w"> </span><span class="na">phx-hook</span><span class="p">=</span><span class="p">&quot;</span><span class="s2">InfiniteScroll</span><span class="p">&quot;</span><span class="w"> </span><span class="na">data-page</span><span class="p">=</span><span class="p" data-group-id="9761131692-1">{</span><span class="na">@page</span><span class="p" data-group-id="9761131692-1">}</span><span class="p">&gt;</span></code></pre><p>And then in the client:</p><pre><code class="makeup javascript" translate="no"><span class="sd">/**</span><span class="w">
</span><span class="w"> </span><span class="sd">*</span><span class="sd"> @type {import(&quot;phoenix_live_view&quot;).Hook}
</span><span class="w"> </span><span class="sd">*/</span><span class="w">
</span><span class="bp">Hooks</span><span class="p">.</span><span class="n">InfiniteScroll</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">  </span><span class="nf">page</span><span class="p">(</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="k">return</span><span class="w"> </span><span class="nb">this</span><span class="p">.</span><span class="n">el</span><span class="p">.</span><span class="n">dataset</span><span class="p">.</span><span class="n">page</span><span class="w"> </span><span class="p">}</span><span class="p">,</span><span class="w">
</span><span class="w">  </span><span class="nf">mounted</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="nb">this</span><span class="p">.</span><span class="n">pending</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nb">this</span><span class="p">.</span><span class="nf">page</span><span class="p">(</span><span class="p">)</span><span class="w">
</span><span class="w">    </span><span class="nb">window</span><span class="p">.</span><span class="nf">addEventListener</span><span class="p">(</span><span class="p">&quot;</span><span class="s2">scroll</span><span class="p">&quot;</span><span class="p">,</span><span class="w"> </span><span class="nv">e</span><span class="w"> </span><span class="kt">=&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">      </span><span class="k">if</span><span class="p">(</span><span class="nb">this</span><span class="p">.</span><span class="n">pending</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="nb">this</span><span class="p">.</span><span class="nf">page</span><span class="p">(</span><span class="p">)</span><span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span><span class="nf">scrollAt</span><span class="p">(</span><span class="p">)</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="mi">90</span><span class="p">)</span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="nb">this</span><span class="p">.</span><span class="n">pending</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nb">this</span><span class="p">.</span><span class="nf">page</span><span class="p">(</span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="mi">1</span><span class="w">
</span><span class="w">        </span><span class="nb">this</span><span class="p">.</span><span class="nf">pushEvent</span><span class="p">(</span><span class="p">&quot;</span><span class="s2">load-more</span><span class="p">&quot;</span><span class="p">,</span><span class="w"> </span><span class="p">{</span><span class="p">}</span><span class="p">)</span><span class="w">
</span><span class="w">      </span><span class="p">}</span><span class="w">
</span><span class="w">    </span><span class="p">}</span><span class="p">)</span><span class="w">
</span><span class="w">  </span><span class="p">}</span><span class="p">,</span><span class="w">
</span><span class="w">  </span><span class="nf">updated</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="w"> </span><span class="nb">this</span><span class="p">.</span><span class="n">pending</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nb">this</span><span class="p">.</span><span class="nf">page</span><span class="p">(</span><span class="p">)</span><span class="w"> </span><span class="p">}</span><span class="w">
</span><span class="p">}</span></code></pre><p>However, the data attribute approach is not a good approach if you need to frequently push data to the client. To push out-of-band events to the client, for example to render charting points, one could do:</p><pre><code class="makeup heex" translate="no"><span class="p">&lt;</span><span class="nt">div</span><span class="w"> </span><span class="na">id</span><span class="p">=</span><span class="p">&quot;</span><span class="s2">c</span><span class="s2">h</span><span class="s2">a</span><span class="s2">r</span><span class="s2">t</span><span class="p">&quot;</span><span class="w"> </span><span class="na">phx-hook</span><span class="p">=</span><span class="p">&quot;</span><span class="s2">Chart</span><span class="p">&quot;</span><span class="p">&gt;</span></code></pre><p>And then on the client:</p><pre><code class="makeup javascript" translate="no"><span class="sd">/**</span><span class="w">
</span><span class="w"> </span><span class="sd">*</span><span class="sd"> @type {import(&quot;phoenix_live_view&quot;).Hook}
</span><span class="w"> </span><span class="sd">*/</span><span class="w">
</span><span class="bp">Hooks</span><span class="p">.</span><span class="n">Chart</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">  </span><span class="nf">mounted</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="nb">this</span><span class="p">.</span><span class="nf">handleEvent</span><span class="p">(</span><span class="p">&quot;</span><span class="s2">points</span><span class="p">&quot;</span><span class="p">,</span><span class="w"> </span><span class="p">(</span><span class="p">{</span><span class="nv">points</span><span class="p">}</span><span class="p">)</span><span class="w"> </span><span class="kt">=&gt;</span><span class="w"> </span><span class="bp">MyChartLib</span><span class="p">.</span><span class="nf">addPoints</span><span class="p">(</span><span class="nv">points</span><span class="p">)</span><span class="p">)</span><span class="w">
</span><span class="w">  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span></code></pre><p>And then you can push events as:</p><pre><code class="makeup elixir" translate="no"><span class="p" data-group-id="5794825876-1">{</span><span class="ss">:noreply</span><span class="p">,</span><span class="w"> </span><span class="n">push_event</span><span class="p" data-group-id="5794825876-2">(</span><span class="n">socket</span><span class="p">,</span><span class="w"> </span><span class="s">&quot;points&quot;</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="5794825876-3">%{</span><span class="ss">points</span><span class="p">:</span><span class="w"> </span><span class="n">new_points</span><span class="p" data-group-id="5794825876-3">}</span><span class="p" data-group-id="5794825876-2">)</span><span class="p" data-group-id="5794825876-1">}</span></code></pre><p>Events pushed from the server via <code class="inline">push_event</code> are global and will be dispatched
to all active hooks on the client who are handling that event. If you need to scope events
(for example when pushing from a live component that has siblings on the current live view),
then this must be done by namespacing them:</p><pre><code class="makeup elixir" translate="no"><span class="kd">def</span><span class="w"> </span><span class="nf">update</span><span class="p" data-group-id="1719364632-1">(</span><span class="p" data-group-id="1719364632-2">%{</span><span class="ss">id</span><span class="p">:</span><span class="w"> </span><span class="n">id</span><span class="p">,</span><span class="w"> </span><span class="ss">points</span><span class="p">:</span><span class="w"> </span><span class="n">points</span><span class="p" data-group-id="1719364632-2">}</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">assigns</span><span class="p">,</span><span class="w"> </span><span class="n">socket</span><span class="p" data-group-id="1719364632-1">)</span><span class="w"> </span><span class="k" data-group-id="1719364632-3">do</span><span class="w">
  </span><span class="n">socket</span><span class="w"> </span><span class="o">=</span><span class="w">
    </span><span class="n">socket</span><span class="w">
    </span><span class="o">|&gt;</span><span class="w"> </span><span class="n">assign</span><span class="p" data-group-id="1719364632-4">(</span><span class="n">assigns</span><span class="p" data-group-id="1719364632-4">)</span><span class="w">
    </span><span class="o">|&gt;</span><span class="w"> </span><span class="n">push_event</span><span class="p" data-group-id="1719364632-5">(</span><span class="s">&quot;points-</span><span class="si" data-group-id="1719364632-6">#{</span><span class="n">id</span><span class="si" data-group-id="1719364632-6">}</span><span class="s">&quot;</span><span class="p">,</span><span class="w"> </span><span class="n">points</span><span class="p" data-group-id="1719364632-5">)</span><span class="w">

  </span><span class="p" data-group-id="1719364632-7">{</span><span class="ss">:ok</span><span class="p">,</span><span class="w"> </span><span class="n">socket</span><span class="p" data-group-id="1719364632-7">}</span><span class="w">
</span><span class="k" data-group-id="1719364632-3">end</span></code></pre><p>And then on the client:</p><pre><code class="makeup javascript" translate="no"><span class="bp">Hooks</span><span class="p">.</span><span class="n">Chart</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">  </span><span class="nf">mounted</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="nb">this</span><span class="p">.</span><span class="nf">handleEvent</span><span class="p">(</span><span class="p">`</span><span class="s">points-</span><span class="si">${</span><span class="nb">this</span><span class="si">.</span><span class="n">el</span><span class="si">.</span><span class="n">id</span><span class="si">}</span><span class="p">`</span><span class="p">,</span><span class="w"> </span><span class="p">(</span><span class="nv">points</span><span class="p">)</span><span class="w"> </span><span class="kt">=&gt;</span><span class="w"> </span><span class="bp">MyChartLib</span><span class="p">.</span><span class="nf">addPoints</span><span class="p">(</span><span class="nv">points</span><span class="p">)</span><span class="p">)</span><span class="p">;</span><span class="w">
</span><span class="w">  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span></code></pre><p><em>Note</em>: In case a LiveView pushes events and renders content, <code class="inline">handleEvent</code> callbacks are invoked after the page is updated. Therefore, if the LiveView redirects at the same time it pushes events, callbacks won't be invoked on the old page's elements. Callbacks would be invoked on the redirected page's newly mounted hook elements.</p><h2 id="js-commands">JS commands</h2><p><em>Note</em>: If possible, construct commands via Elixir using <a href="Phoenix.LiveView.JS.xhtml"><code class="inline">Phoenix.LiveView.JS</code></a> and trigger them via Phoenix DOM <a href="bindings.xhtml">Bindings</a>.</p><p>While <a href="Phoenix.LiveView.JS.xhtml"><code class="inline">Phoenix.LiveView.JS</code></a> allows you to construct a declarative representation of a command, it may not cover all use cases.
In addition, you can execute commands that integrate with server DOM patching via JavaScript using:</p><ul><li>Client hooks: <code class="inline">this.js()</code> or the</li><li>LiveSocket instance: <code class="inline">liveSocket.js()</code>.</li></ul><p>The command interface returned by <code class="inline">js()</code> above offers the following functions:</p><ul><li><code class="inline">show(el, opts = {})</code> - shows an element. Options: <code class="inline">display</code>, <code class="inline">transition</code>, <code class="inline">time</code>, <code class="inline">blocking</code>. For more details, see <a href="Phoenix.LiveView.JS.xhtml#show/1"><code class="inline">Phoenix.LiveView.JS.show/1</code></a>.</li><li><code class="inline">hide(el, opts = {})</code> - hides an element. Options: <code class="inline">transition</code>, <code class="inline">time</code>, <code class="inline">blocking</code>. For more details, see <a href="Phoenix.LiveView.JS.xhtml#hide/1"><code class="inline">Phoenix.LiveView.JS.hide/1</code></a>.</li><li><code class="inline">toggle(el, opts = {})</code> - toggles the visibility of an element. Options: <code class="inline">display</code>, <code class="inline">in</code>, <code class="inline">out</code>, <code class="inline">time</code>, <code class="inline">blocking</code>. For more details, see <a href="Phoenix.LiveView.JS.xhtml#toggle/1"><code class="inline">Phoenix.LiveView.JS.toggle/1</code></a>.</li><li><code class="inline">addClass(el, names, opts = {})</code> - adds CSS class(es) to an element. Options: <code class="inline">transition</code>, <code class="inline">time</code>, <code class="inline">blocking</code>. For more details, see <a href="Phoenix.LiveView.JS.xhtml#add_class/1"><code class="inline">Phoenix.LiveView.JS.add_class/1</code></a>.</li><li><code class="inline">removeClass(el, names, opts = {})</code> - removes CSS class(es) to an element. Options: <code class="inline">transition</code>, <code class="inline">time</code>, <code class="inline">blocking</code>. For more details, see <a href="Phoenix.LiveView.JS.xhtml#remove_class/1"><code class="inline">Phoenix.LiveView.JS.remove_class/1</code></a>.</li><li><code class="inline">toggleClass(el, names, opts = {})</code> - toggles CSS class(es) to an element. Options: <code class="inline">transition</code>, <code class="inline">time</code>, <code class="inline">blocking</code>. For more details, see <a href="Phoenix.LiveView.JS.xhtml#toggle_class/1"><code class="inline">Phoenix.LiveView.JS.toggle_class/1</code></a>.</li><li><code class="inline">transition(el, transition, opts = {})</code> - applies a CSS transition to an element. Options: <code class="inline">time</code>, <code class="inline">blocking</code>. For more details, see <a href="Phoenix.LiveView.JS.xhtml#transition/1"><code class="inline">Phoenix.LiveView.JS.transition/1</code></a>.</li><li><code class="inline">setAttribute(el, attr, val)</code> - sets an attribute on an element</li><li><code class="inline">removeAttribute(el, attr)</code> - removes an attribute from an element</li><li><code class="inline">toggleAttribute(el, attr, val1, val2)</code> - toggles an attribute on an element between two values</li><li><code class="inline">push(el, type, opts = {})</code> - pushes an event to the server. To target a LiveComponent by its ID, pass a separate <code class="inline">target</code> in the options. Options: <code class="inline">target</code>, <code class="inline">loading</code>, <code class="inline">page_loading</code>, <code class="inline">value</code>. For more details, see <a href="Phoenix.LiveView.JS.xhtml#push/1"><code class="inline">Phoenix.LiveView.JS.push/1</code></a>.</li><li><code class="inline">navigate(href, opts = {})</code> - sends a navigation event to the server and updates the browser's pushState history. Options: <code class="inline">replace</code>. For more details, see <a href="Phoenix.LiveView.JS.xhtml#navigate/1"><code class="inline">Phoenix.LiveView.JS.navigate/1</code></a>.</li><li><code class="inline">patch(href, opts = {})</code> - sends a patch event to the server and updates the browser's pushState history. Options: <code class="inline">replace</code>. For more details, see <a href="Phoenix.LiveView.JS.xhtml#patch/1"><code class="inline">Phoenix.LiveView.JS.patch/1</code></a>.</li><li><code class="inline">exec(encodedJS)</code> - <em>only via Client hook <code class="inline">this.js()</code></em>: executes encoded JavaScript in the context of the hook's root node. The encoded JS command should be constructed via <a href="Phoenix.LiveView.JS.xhtml"><code class="inline">Phoenix.LiveView.JS</code></a> and is usually stored as an HTML attribute. Example: <code class="inline">this.js().exec(this.el.getAttribute('phx-remove'))</code>.</li><li><code class="inline">exec(el, encodedJS)</code> - <em>only via <code class="inline">liveSocket.js()</code></em>: executes encoded JavaScript in the context of any element.</li></ul>

  </body>
</html>
