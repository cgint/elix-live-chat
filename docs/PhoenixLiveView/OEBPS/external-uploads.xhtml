<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"
      xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>External uploads - Phoenix LiveView v1.1.2</title>
    <meta name="generator" content="ExDoc v0.38.2" />
    <link type="text/css" rel="stylesheet" href="dist/epub-elixir-FNUUKFP7.css" />
    <script src="dist/epub-4WIP524F.js"></script>

  </head>
  <body class="content-inner">

    <h1 id="content">External uploads</h1>
<blockquote><p>This guide continues from the configuration started in the
server <a href="uploads.html">Uploads guide</a>.</p></blockquote><p>Uploads to external cloud providers, such as Amazon S3,
Google Cloud, etc., can be achieved by using the
<code class="inline">:external</code> option in <a href="Phoenix.LiveView.xhtml#allow_upload/3"><code class="inline">allow_upload/3</code></a>.</p><p>You provide a 2-arity function to allow the server to
generate metadata for each upload entry, which is passed to
a user-specified JavaScript function on the client.</p><p>Typically when your function is invoked, you will generate a
pre-signed URL, specific to your cloud storage provider, that
will provide temporary access for the end-user to upload data
directly to your cloud storage.</p><h2 id="chunked-http-uploads">Chunked HTTP Uploads</h2><p>For any service that supports large file
uploads via chunked HTTP requests with <code class="inline">Content-Range</code>
headers, you can use the UpChunk JS library by Mux to do all
the hard work of uploading the file. For small file uploads
or to get started quickly, consider <a href="#direct-to-s3">uploading directly to S3</a>
instead.</p><p>You only need to wire the UpChunk instance to the LiveView
UploadEntry callbacks, and LiveView will take care of the rest.</p><p>Install <a href="https://github.com/muxinc/upchunk">UpChunk</a> by
saving <a href="https://unpkg.com/@mux/upchunk@2">its contents</a>
to <code class="inline">assets/vendor/upchunk.js</code> or by installing it with <code class="inline">npm</code>:</p><pre><code class="makeup shell" translate="no"><span class="gp unselectable">$ </span><span class="">npm install --prefix assets --save @mux/upchunk
</span></code></pre><p>Configure your uploader on <a href="Phoenix.LiveView.xhtml#c:mount/3"><code class="inline">Phoenix.LiveView.mount/3</code></a>:</p><pre><code class="makeup elixir" translate="no"><span class="kd">def</span><span class="w"> </span><span class="nf">mount</span><span class="p" data-group-id="1787251021-1">(</span><span class="c">_params</span><span class="p">,</span><span class="w"> </span><span class="c">_session</span><span class="p">,</span><span class="w"> </span><span class="n">socket</span><span class="p" data-group-id="1787251021-1">)</span><span class="w"> </span><span class="k" data-group-id="1787251021-2">do</span><span class="w">
  </span><span class="p" data-group-id="1787251021-3">{</span><span class="ss">:ok</span><span class="p">,</span><span class="w">
   </span><span class="n">socket</span><span class="w">
   </span><span class="o">|&gt;</span><span class="w"> </span><span class="n">assign</span><span class="p" data-group-id="1787251021-4">(</span><span class="ss">:uploaded_files</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="1787251021-5">[</span><span class="p" data-group-id="1787251021-5">]</span><span class="p" data-group-id="1787251021-4">)</span><span class="w">
   </span><span class="o">|&gt;</span><span class="w"> </span><span class="n">allow_upload</span><span class="p" data-group-id="1787251021-6">(</span><span class="ss">:avatar</span><span class="p">,</span><span class="w"> </span><span class="ss">accept</span><span class="p">:</span><span class="w"> </span><span class="ss">:any</span><span class="p">,</span><span class="w"> </span><span class="ss">max_entries</span><span class="p">:</span><span class="w"> </span><span class="mi">3</span><span class="p">,</span><span class="w"> </span><span class="ss">external</span><span class="p">:</span><span class="w"> </span><span class="o">&amp;</span><span class="n">presign_upload</span><span class="o">/</span><span class="mi">2</span><span class="p" data-group-id="1787251021-6">)</span><span class="p" data-group-id="1787251021-3">}</span><span class="w">
</span><span class="k" data-group-id="1787251021-2">end</span></code></pre><p>Supply the <code class="inline">:external</code> option to
<a href="Phoenix.LiveView.xhtml#allow_upload/3"><code class="inline">Phoenix.LiveView.allow_upload/3</code></a>. It requires a 2-arity
function that generates a signed URL where the client will
push the bytes for the upload entry. This function must
return either <code class="inline">{:ok, meta, socket}</code> or <code class="inline">{:error, meta, socket}</code>,
where <code class="inline">meta</code> must be a map.</p><p>For example, if you were using a context that provided a
<a href="https://developers.google.com/youtube/v3/guides/using_resumable_upload_protocol##Start_Resumable_Session"><code class="inline">start_session</code></a>
function, you might write something like this:</p><pre><code class="makeup elixir" translate="no"><span class="kd">defp</span><span class="w"> </span><span class="nf">presign_upload</span><span class="p" data-group-id="0564438710-1">(</span><span class="n">entry</span><span class="p">,</span><span class="w"> </span><span class="n">socket</span><span class="p" data-group-id="0564438710-1">)</span><span class="w"> </span><span class="k" data-group-id="0564438710-2">do</span><span class="w">
  </span><span class="p" data-group-id="0564438710-3">{</span><span class="ss">:ok</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="0564438710-4">%{</span><span class="s">&quot;Location&quot;</span><span class="w"> </span><span class="p">=&gt;</span><span class="w"> </span><span class="n">link</span><span class="p" data-group-id="0564438710-4">}</span><span class="p" data-group-id="0564438710-3">}</span><span class="w"> </span><span class="o">=</span><span class="w">
    </span><span class="nc">SomeTube</span><span class="o">.</span><span class="n">start_session</span><span class="p" data-group-id="0564438710-5">(</span><span class="p" data-group-id="0564438710-6">%{</span><span class="w">
      </span><span class="s">&quot;uploadType&quot;</span><span class="w"> </span><span class="p">=&gt;</span><span class="w"> </span><span class="s">&quot;resumable&quot;</span><span class="p">,</span><span class="w">
      </span><span class="s">&quot;x-upload-content-length&quot;</span><span class="w"> </span><span class="p">=&gt;</span><span class="w"> </span><span class="n">entry</span><span class="o">.</span><span class="n">client_size</span><span class="w">
    </span><span class="p" data-group-id="0564438710-6">}</span><span class="p" data-group-id="0564438710-5">)</span><span class="w">

  </span><span class="p" data-group-id="0564438710-7">{</span><span class="ss">:ok</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="0564438710-8">%{</span><span class="ss">uploader</span><span class="p">:</span><span class="w"> </span><span class="s">&quot;UpChunk&quot;</span><span class="p">,</span><span class="w"> </span><span class="ss">entrypoint</span><span class="p">:</span><span class="w"> </span><span class="n">link</span><span class="p" data-group-id="0564438710-8">}</span><span class="p">,</span><span class="w"> </span><span class="n">socket</span><span class="p" data-group-id="0564438710-7">}</span><span class="w">
</span><span class="k" data-group-id="0564438710-2">end</span></code></pre><p>Finally, on the client-side, we use UpChunk to create an
upload from the temporary URL generated on the server and
attach listeners for its events to the entry's callbacks:</p><pre><code class="makeup javascript" translate="no"><span class="k">import</span><span class="w"> </span><span class="no">*</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="nv">UpChunk</span><span class="w"> </span><span class="k">from</span><span class="w"> </span><span class="p">&quot;</span><span class="s2">@mux/upchunk</span><span class="p">&quot;</span><span class="w">
</span><span class="w">
</span><span class="kt">let</span><span class="w"> </span><span class="no">Uploaders</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="bp">Uploaders</span><span class="p">.</span><span class="no">UpChunk</span><span class="w"> </span><span class="kd">=</span><span class="w"> </span><span class="kt">function</span><span class="p">(</span><span class="nv">entries</span><span class="p">,</span><span class="w"> </span><span class="nv">onViewError</span><span class="p">)</span><span class="p">{</span><span class="w">
</span><span class="w">  </span><span class="nv">entries</span><span class="p">.</span><span class="nf">forEach</span><span class="p">(</span><span class="nv">entry</span><span class="w"> </span><span class="kt">=&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="cm">//</span><span class="cm"> create the upload session with UpChunk
</span><span class="w">    </span><span class="kt">let</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="nv">file</span><span class="p">,</span><span class="w"> </span><span class="n">meta</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="nv">entrypoint</span><span class="w"> </span><span class="p">}</span><span class="w"> </span><span class="p">}</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nv">entry</span><span class="w">
</span><span class="w">    </span><span class="kt">let</span><span class="w"> </span><span class="nv">upload</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="bp">UpChunk</span><span class="p">.</span><span class="nf">createUpload</span><span class="p">(</span><span class="p">{</span><span class="w"> </span><span class="n">endpoint</span><span class="p">:</span><span class="w"> </span><span class="nv">entrypoint</span><span class="p">,</span><span class="w"> </span><span class="nv">file</span><span class="w"> </span><span class="p">}</span><span class="p">)</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="cm">//</span><span class="cm"> stop uploading in the event of a view error
</span><span class="w">    </span><span class="nf">onViewError</span><span class="p">(</span><span class="p">(</span><span class="p">)</span><span class="w"> </span><span class="kt">=&gt;</span><span class="w"> </span><span class="nv">upload</span><span class="p">.</span><span class="nf">pause</span><span class="p">(</span><span class="p">)</span><span class="p">)</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="cm">//</span><span class="cm"> upload error triggers LiveView error
</span><span class="w">    </span><span class="nv">upload</span><span class="p">.</span><span class="nf">on</span><span class="p">(</span><span class="p">&quot;</span><span class="s2">error</span><span class="p">&quot;</span><span class="p">,</span><span class="w"> </span><span class="p">(</span><span class="nv">e</span><span class="p">)</span><span class="w"> </span><span class="kt">=&gt;</span><span class="w"> </span><span class="nv">entry</span><span class="p">.</span><span class="nf">error</span><span class="p">(</span><span class="nv">e</span><span class="p">.</span><span class="n">detail</span><span class="p">.</span><span class="n">message</span><span class="p">)</span><span class="p">)</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="cm">//</span><span class="cm"> notify progress events to LiveView
</span><span class="w">    </span><span class="nv">upload</span><span class="p">.</span><span class="nf">on</span><span class="p">(</span><span class="p">&quot;</span><span class="s2">progress</span><span class="p">&quot;</span><span class="p">,</span><span class="w"> </span><span class="p">(</span><span class="nv">e</span><span class="p">)</span><span class="w"> </span><span class="kt">=&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">      </span><span class="k">if</span><span class="p">(</span><span class="nv">e</span><span class="p">.</span><span class="n">detail</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="mi">100</span><span class="p">)</span><span class="p">{</span><span class="w"> </span><span class="nv">entry</span><span class="p">.</span><span class="nf">progress</span><span class="p">(</span><span class="nv">e</span><span class="p">.</span><span class="n">detail</span><span class="p">)</span><span class="w"> </span><span class="p">}</span><span class="w">
</span><span class="w">    </span><span class="p">}</span><span class="p">)</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="cm">//</span><span class="cm"> success completes the UploadEntry
</span><span class="w">    </span><span class="nv">upload</span><span class="p">.</span><span class="nf">on</span><span class="p">(</span><span class="p">&quot;</span><span class="s2">success</span><span class="p">&quot;</span><span class="p">,</span><span class="w"> </span><span class="p">(</span><span class="p">)</span><span class="w"> </span><span class="kt">=&gt;</span><span class="w"> </span><span class="nv">entry</span><span class="p">.</span><span class="nf">progress</span><span class="p">(</span><span class="mi">100</span><span class="p">)</span><span class="p">)</span><span class="w">
</span><span class="w">  </span><span class="p">}</span><span class="p">)</span><span class="w">
</span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="c1">//</span><span class="c1"> Don&#39;t forget to assign Uploaders to the liveSocket
</span><span class="kt">let</span><span class="w"> </span><span class="nv">liveSocket</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="ow">new</span><span class="w"> </span><span class="nv">LiveSocket</span><span class="p">(</span><span class="p">&quot;</span><span class="s2">/live</span><span class="p">&quot;</span><span class="p">,</span><span class="w"> </span><span class="no">Socket</span><span class="p">,</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">  </span><span class="n">uploaders</span><span class="p">:</span><span class="w"> </span><span class="no">Uploaders</span><span class="p">,</span><span class="w">
</span><span class="w">  </span><span class="n">params</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="n">_csrf_token</span><span class="p">:</span><span class="w"> </span><span class="nv">csrfToken</span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="p">)</span></code></pre><h2 id="direct-to-s3">Direct to S3</h2><p>The largest object that can be uploaded to S3 in a single PUT is 5 GB
according to <a href="https://aws.amazon.com/s3/faqs/">S3 FAQ</a>. For larger file
uploads, consider using chunking as shown above.</p><p>This guide assumes an existing S3 bucket is set up with the correct CORS configuration
which allows uploading directly to the bucket.</p><p>An example CORS config is:</p><pre><code class="makeup json" translate="no"><span class="p">[</span><span class="w">
</span><span class="w">    </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="p">&quot;</span><span class="s2">AllowedHeaders</span><span class="p">&quot;</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w"> </span><span class="p">&quot;</span><span class="s2">*</span><span class="p">&quot;</span><span class="w"> </span><span class="p">]</span><span class="p">,</span><span class="w">
</span><span class="w">        </span><span class="p">&quot;</span><span class="s2">AllowedMethods</span><span class="p">&quot;</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w"> </span><span class="p">&quot;</span><span class="s2">PUT</span><span class="p">&quot;</span><span class="p">,</span><span class="w"> </span><span class="p">&quot;</span><span class="s2">POST</span><span class="p">&quot;</span><span class="w"> </span><span class="p">]</span><span class="p">,</span><span class="w">
</span><span class="w">        </span><span class="p">&quot;</span><span class="s2">AllowedOrigins</span><span class="p">&quot;</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w"> </span><span class="p">&quot;</span><span class="s2">*</span><span class="p">&quot;</span><span class="w"> </span><span class="p">]</span><span class="p">,</span><span class="w">
</span><span class="w">        </span><span class="p">&quot;</span><span class="s2">ExposeHeaders</span><span class="p">&quot;</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="p">]</span><span class="w">
</span><span class="w">    </span><span class="p">}</span><span class="w">
</span><span class="p">]</span></code></pre><p>You may put your domain in the &quot;allowedOrigins&quot; instead. More information on configuring CORS for
S3 buckets is <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/ManageCorsUsing.html">available on AWS</a>.</p><p>In order to enforce all of your file constraints when uploading to S3,
it is necessary to perform a multipart form POST with your file data.
You should have the following S3 information ready before proceeding:</p><ol><li>aws_access_key_id</li><li>aws_secret_access_key</li><li>bucket_name</li><li>region</li></ol><p>We will first implement the LiveView portion:</p><pre><code class="makeup elixir" translate="no"><span class="kd">def</span><span class="w"> </span><span class="nf">mount</span><span class="p" data-group-id="2923717201-1">(</span><span class="c">_params</span><span class="p">,</span><span class="w"> </span><span class="c">_session</span><span class="p">,</span><span class="w"> </span><span class="n">socket</span><span class="p" data-group-id="2923717201-1">)</span><span class="w"> </span><span class="k" data-group-id="2923717201-2">do</span><span class="w">
  </span><span class="p" data-group-id="2923717201-3">{</span><span class="ss">:ok</span><span class="p">,</span><span class="w">
    </span><span class="n">socket</span><span class="w">
    </span><span class="o">|&gt;</span><span class="w"> </span><span class="n">assign</span><span class="p" data-group-id="2923717201-4">(</span><span class="ss">:uploaded_files</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="2923717201-5">[</span><span class="p" data-group-id="2923717201-5">]</span><span class="p" data-group-id="2923717201-4">)</span><span class="w">
    </span><span class="o">|&gt;</span><span class="w"> </span><span class="n">allow_upload</span><span class="p" data-group-id="2923717201-6">(</span><span class="ss">:avatar</span><span class="p">,</span><span class="w"> </span><span class="ss">accept</span><span class="p">:</span><span class="w"> </span><span class="ss">:any</span><span class="p">,</span><span class="w"> </span><span class="ss">max_entries</span><span class="p">:</span><span class="w"> </span><span class="mi">3</span><span class="p">,</span><span class="w"> </span><span class="ss">external</span><span class="p">:</span><span class="w"> </span><span class="o">&amp;</span><span class="n">presign_upload</span><span class="o">/</span><span class="mi">2</span><span class="p" data-group-id="2923717201-6">)</span><span class="p" data-group-id="2923717201-3">}</span><span class="w">
</span><span class="k" data-group-id="2923717201-2">end</span><span class="w">

</span><span class="kd">defp</span><span class="w"> </span><span class="nf">presign_upload</span><span class="p" data-group-id="2923717201-7">(</span><span class="n">entry</span><span class="p">,</span><span class="w"> </span><span class="n">socket</span><span class="p" data-group-id="2923717201-7">)</span><span class="w"> </span><span class="k" data-group-id="2923717201-8">do</span><span class="w">
  </span><span class="n">uploads</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">socket</span><span class="o">.</span><span class="n">assigns</span><span class="o">.</span><span class="n">uploads</span><span class="w">
  </span><span class="n">bucket</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s">&quot;phx-upload-example&quot;</span><span class="w">
  </span><span class="n">key</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s">&quot;public/</span><span class="si" data-group-id="2923717201-9">#{</span><span class="n">entry</span><span class="o">.</span><span class="n">client_name</span><span class="si" data-group-id="2923717201-9">}</span><span class="s">&quot;</span><span class="w">

  </span><span class="n">config</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p" data-group-id="2923717201-10">%{</span><span class="w">
    </span><span class="ss">region</span><span class="p">:</span><span class="w"> </span><span class="s">&quot;us-east-1&quot;</span><span class="p">,</span><span class="w">
    </span><span class="ss">access_key_id</span><span class="p">:</span><span class="w"> </span><span class="nc">System</span><span class="o">.</span><span class="n">fetch_env!</span><span class="p" data-group-id="2923717201-11">(</span><span class="s">&quot;AWS_ACCESS_KEY_ID&quot;</span><span class="p" data-group-id="2923717201-11">)</span><span class="p">,</span><span class="w">
    </span><span class="ss">secret_access_key</span><span class="p">:</span><span class="w"> </span><span class="nc">System</span><span class="o">.</span><span class="n">fetch_env!</span><span class="p" data-group-id="2923717201-12">(</span><span class="s">&quot;AWS_SECRET_ACCESS_KEY&quot;</span><span class="p" data-group-id="2923717201-12">)</span><span class="w">
  </span><span class="p" data-group-id="2923717201-10">}</span><span class="w">

  </span><span class="p" data-group-id="2923717201-13">{</span><span class="ss">:ok</span><span class="p">,</span><span class="w"> </span><span class="n">fields</span><span class="p" data-group-id="2923717201-13">}</span><span class="w"> </span><span class="o">=</span><span class="w">
    </span><span class="nc">SimpleS3Upload</span><span class="o">.</span><span class="n">sign_form_upload</span><span class="p" data-group-id="2923717201-14">(</span><span class="n">config</span><span class="p">,</span><span class="w"> </span><span class="n">bucket</span><span class="p">,</span><span class="w">
      </span><span class="ss">key</span><span class="p">:</span><span class="w"> </span><span class="n">key</span><span class="p">,</span><span class="w">
      </span><span class="ss">content_type</span><span class="p">:</span><span class="w"> </span><span class="n">entry</span><span class="o">.</span><span class="n">client_type</span><span class="p">,</span><span class="w">
      </span><span class="ss">max_file_size</span><span class="p">:</span><span class="w"> </span><span class="n">uploads</span><span class="p" data-group-id="2923717201-15">[</span><span class="n">entry</span><span class="o">.</span><span class="n">upload_config</span><span class="p" data-group-id="2923717201-15">]</span><span class="o">.</span><span class="n">max_file_size</span><span class="p">,</span><span class="w">
      </span><span class="ss">expires_in</span><span class="p">:</span><span class="w"> </span><span class="nc">:timer</span><span class="o">.</span><span class="n">hours</span><span class="p" data-group-id="2923717201-16">(</span><span class="mi">1</span><span class="p" data-group-id="2923717201-16">)</span><span class="w">
    </span><span class="p" data-group-id="2923717201-14">)</span><span class="w">

  </span><span class="n">meta</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p" data-group-id="2923717201-17">%{</span><span class="ss">uploader</span><span class="p">:</span><span class="w"> </span><span class="s">&quot;S3&quot;</span><span class="p">,</span><span class="w"> </span><span class="ss">key</span><span class="p">:</span><span class="w"> </span><span class="n">key</span><span class="p">,</span><span class="w"> </span><span class="ss">url</span><span class="p">:</span><span class="w"> </span><span class="s">&quot;http://</span><span class="si" data-group-id="2923717201-18">#{</span><span class="n">bucket</span><span class="si" data-group-id="2923717201-18">}</span><span class="s">.s3-</span><span class="si" data-group-id="2923717201-19">#{</span><span class="n">config</span><span class="o">.</span><span class="n">region</span><span class="si" data-group-id="2923717201-19">}</span><span class="s">.amazonaws.com&quot;</span><span class="p">,</span><span class="w"> </span><span class="ss">fields</span><span class="p">:</span><span class="w"> </span><span class="n">fields</span><span class="p" data-group-id="2923717201-17">}</span><span class="w">
  </span><span class="p" data-group-id="2923717201-20">{</span><span class="ss">:ok</span><span class="p">,</span><span class="w"> </span><span class="n">meta</span><span class="p">,</span><span class="w"> </span><span class="n">socket</span><span class="p" data-group-id="2923717201-20">}</span><span class="w">
</span><span class="k" data-group-id="2923717201-8">end</span></code></pre><p>Here, we implemented a <code class="inline">presign_upload/2</code> function, which we passed as a
captured anonymous function to <code class="inline">:external</code>. It generates a pre-signed URL
for the upload and returns our <code class="inline">:ok</code> result, with a payload of metadata
for the client, along with our unchanged socket. </p><p>Next, we add a missing module <code class="inline">SimpleS3Upload</code> to generate pre-signed URLs
for S3. Create a file called <code class="inline">simple_s3_upload.ex</code>. Get the file's content
from this zero-dependency module called <a href="https://gist.github.com/chrismccord/37862f1f8b1f5148644b75d20d1cb073"><code class="inline">SimpleS3Upload</code></a>
written by Chris McCord.</p><blockquote><p>Tip: if you encounter errors with the <code class="inline">:crypto</code> module or with S3 blocking ACLs, 
please read the comments in the gist above for solutions.</p></blockquote><p>Next, we add our JavaScript client-side uploader. The metadata <em>must</em> contain the
<code class="inline">:uploader</code> key, specifying the name of the JavaScript client-side uploader.
In this case, it's <code class="inline">&quot;S3&quot;</code>, as shown above.</p><p>Add a new file <code class="inline">uploaders.js</code> in the following directory <code class="inline">assets/js/</code> next to <code class="inline">app.js</code>.
The content for this <code class="inline">S3</code> client uploader:</p><pre><code class="makeup javascript" translate="no"><span class="kt">let</span><span class="w"> </span><span class="no">Uploaders</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="bp">Uploaders</span><span class="p">.</span><span class="no">S3</span><span class="w"> </span><span class="kd">=</span><span class="w"> </span><span class="kt">function</span><span class="p">(</span><span class="nv">entries</span><span class="p">,</span><span class="w"> </span><span class="nv">onViewError</span><span class="p">)</span><span class="p">{</span><span class="w">
</span><span class="w">  </span><span class="nv">entries</span><span class="p">.</span><span class="nf">forEach</span><span class="p">(</span><span class="nv">entry</span><span class="w"> </span><span class="kt">=&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="kt">let</span><span class="w"> </span><span class="nv">formData</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="ow">new</span><span class="w"> </span><span class="nv">FormData</span><span class="p">(</span><span class="p">)</span><span class="w">
</span><span class="w">    </span><span class="kt">let</span><span class="w"> </span><span class="p">{</span><span class="nv">url</span><span class="p">,</span><span class="w"> </span><span class="nv">fields</span><span class="p">}</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nv">entry</span><span class="p">.</span><span class="n">meta</span><span class="w">
</span><span class="w">    </span><span class="bp">Object</span><span class="p">.</span><span class="nf">entries</span><span class="p">(</span><span class="nv">fields</span><span class="p">)</span><span class="p">.</span><span class="nf">forEach</span><span class="p">(</span><span class="p">(</span><span class="p">[</span><span class="nv">key</span><span class="p">,</span><span class="w"> </span><span class="nv">val</span><span class="p">]</span><span class="p">)</span><span class="w"> </span><span class="kt">=&gt;</span><span class="w"> </span><span class="nv">formData</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="nv">key</span><span class="p">,</span><span class="w"> </span><span class="nv">val</span><span class="p">)</span><span class="p">)</span><span class="w">
</span><span class="w">    </span><span class="nv">formData</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="p">&quot;</span><span class="s2">file</span><span class="p">&quot;</span><span class="p">,</span><span class="w"> </span><span class="nv">entry</span><span class="p">.</span><span class="n">file</span><span class="p">)</span><span class="w">
</span><span class="w">    </span><span class="kt">let</span><span class="w"> </span><span class="nv">xhr</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="ow">new</span><span class="w"> </span><span class="bp">XMLHttpRequest</span><span class="p">(</span><span class="p">)</span><span class="w">
</span><span class="w">    </span><span class="nf">onViewError</span><span class="p">(</span><span class="p">(</span><span class="p">)</span><span class="w"> </span><span class="kt">=&gt;</span><span class="w"> </span><span class="nv">xhr</span><span class="p">.</span><span class="nf">abort</span><span class="p">(</span><span class="p">)</span><span class="p">)</span><span class="w">
</span><span class="w">    </span><span class="bp">xhr</span><span class="p">.</span><span class="nf">onload</span><span class="w"> </span><span class="kd">=</span><span class="w"> </span><span class="p">(</span><span class="p">)</span><span class="w"> </span><span class="kt">=&gt;</span><span class="w"> </span><span class="nv">xhr</span><span class="p">.</span><span class="n">status</span><span class="w"> </span><span class="o">===</span><span class="w"> </span><span class="mi">204</span><span class="w"> </span><span class="o">?</span><span class="w"> </span><span class="nv">entry</span><span class="p">.</span><span class="nf">progress</span><span class="p">(</span><span class="mi">100</span><span class="p">)</span><span class="w"> </span><span class="o">:</span><span class="w"> </span><span class="nv">entry</span><span class="p">.</span><span class="nf">error</span><span class="p">(</span><span class="p">)</span><span class="w">
</span><span class="w">    </span><span class="bp">xhr</span><span class="p">.</span><span class="nf">onerror</span><span class="w"> </span><span class="kd">=</span><span class="w"> </span><span class="p">(</span><span class="p">)</span><span class="w"> </span><span class="kt">=&gt;</span><span class="w"> </span><span class="nv">entry</span><span class="p">.</span><span class="nf">error</span><span class="p">(</span><span class="p">)</span><span class="w">
</span><span class="w">    </span><span class="nv">xhr</span><span class="p">.</span><span class="n">upload</span><span class="p">.</span><span class="nf">addEventListener</span><span class="p">(</span><span class="p">&quot;</span><span class="s2">progress</span><span class="p">&quot;</span><span class="p">,</span><span class="w"> </span><span class="p">(</span><span class="nv">event</span><span class="p">)</span><span class="w"> </span><span class="kt">=&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">      </span><span class="k">if</span><span class="p">(</span><span class="nv">event</span><span class="p">.</span><span class="n">lengthComputable</span><span class="p">)</span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="kt">let</span><span class="w"> </span><span class="nv">percent</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="no">Math</span><span class="p">.</span><span class="nf">round</span><span class="p">(</span><span class="p">(</span><span class="nv">event</span><span class="p">.</span><span class="n">loaded</span><span class="w"> </span><span class="o">/</span><span class="w"> </span><span class="nv">event</span><span class="p">.</span><span class="n">total</span><span class="p">)</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="mi">100</span><span class="p">)</span><span class="w">
</span><span class="w">        </span><span class="k">if</span><span class="p">(</span><span class="nv">percent</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="mi">100</span><span class="p">)</span><span class="p">{</span><span class="w"> </span><span class="nv">entry</span><span class="p">.</span><span class="nf">progress</span><span class="p">(</span><span class="nv">percent</span><span class="p">)</span><span class="w"> </span><span class="p">}</span><span class="w">
</span><span class="w">      </span><span class="p">}</span><span class="w">
</span><span class="w">    </span><span class="p">}</span><span class="p">)</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="nv">xhr</span><span class="p">.</span><span class="nf">open</span><span class="p">(</span><span class="p">&quot;</span><span class="s2">POST</span><span class="p">&quot;</span><span class="p">,</span><span class="w"> </span><span class="nv">url</span><span class="p">,</span><span class="w"> </span><span class="kc">true</span><span class="p">)</span><span class="w">
</span><span class="w">    </span><span class="nv">xhr</span><span class="p">.</span><span class="nf">send</span><span class="p">(</span><span class="nv">formData</span><span class="p">)</span><span class="w">
</span><span class="w">  </span><span class="p">}</span><span class="p">)</span><span class="w">
</span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="k">export</span><span class="w"> </span><span class="k">default</span><span class="w"> </span><span class="no">Uploaders</span><span class="p">;</span></code></pre><p>We define an <code class="inline">Uploaders.S3</code> function, which receives our entries. It then
performs an AJAX request for each entry, using the <code class="inline">entry.progress()</code> and
<code class="inline">entry.error()</code> functions to report upload events back to the LiveView.
The name of the uploader must match the one we return on the <code class="inline">:uploader</code>
metadata in LiveView.</p><p>Finally, head over to <code class="inline">app.js</code> and add the <code class="inline">uploaders: Uploaders</code> key to
the <code class="inline">LiveSocket</code> constructor to tell phoenix where to find the uploaders returned 
within the external metadata.</p><pre><code class="makeup javascript" translate="no"><span class="c1">//</span><span class="c1"> for uploading to S3
</span><span class="k">import</span><span class="w"> </span><span class="nv">Uploaders</span><span class="w"> </span><span class="k">from</span><span class="w"> </span><span class="p">&quot;</span><span class="s2">./uploaders</span><span class="p">&quot;</span><span class="w">
</span><span class="w">
</span><span class="kt">let</span><span class="w"> </span><span class="nv">liveSocket</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="ow">new</span><span class="w"> </span><span class="nv">LiveSocket</span><span class="p">(</span><span class="p">&quot;</span><span class="s2">/live</span><span class="p">&quot;</span><span class="p">,</span><span class="w">
</span><span class="w">   </span><span class="no">Socket</span><span class="p">,</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">     </span><span class="n">params</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="n">_csrf_token</span><span class="p">:</span><span class="w"> </span><span class="nv">csrfToken</span><span class="p">}</span><span class="p">,</span><span class="w">
</span><span class="w">     </span><span class="n">uploaders</span><span class="p">:</span><span class="w"> </span><span class="no">Uploaders</span><span class="w">
</span><span class="w">  </span><span class="p">}</span><span class="w">
</span><span class="p">)</span></code></pre><p>Now &quot;S3&quot; returned from the server will match the one in the client.
To debug client-side JavaScript when trying to upload, you can inspect your
browser and look at the console or networks tab to view the error logs.</p><h3 id="direct-to-s3-compatible">Direct to S3-Compatible</h3><blockquote><p>This section assumes that you installed and configured <a href="https://hexdocs.pm/ex_aws/readme.html">ExAws</a>
and <a href="https://hexdocs.pm/ex_aws_s3/ExAws.S3.html">ExAws.S3</a> correctly in your project and can execute
the examples in the page without errors.</p></blockquote><p>Most S3 compatible platforms like Cloudflare R2 don't support <code class="inline">POST</code> when
uploading files so we need to use <code class="inline">PUT</code> with a signed URL instead of the
signed <code class="inline">POST</code>and send the file straight to the service, to do so we need to
change the <code class="inline">presign_upload/2</code> function and the <code class="inline">Uploaders.S3</code> that does the upload.</p><p>The new <code class="inline">presign_upload/2</code>:</p><pre><code class="makeup elixir" translate="no"><span class="kd">def</span><span class="w"> </span><span class="nf">presign_upload</span><span class="p" data-group-id="7401727942-1">(</span><span class="n">entry</span><span class="p">,</span><span class="w"> </span><span class="n">socket</span><span class="p" data-group-id="7401727942-1">)</span><span class="w"> </span><span class="k" data-group-id="7401727942-2">do</span><span class="w">
  </span><span class="n">config</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nc">ExAws.Config</span><span class="o">.</span><span class="n">new</span><span class="p" data-group-id="7401727942-3">(</span><span class="ss">:s3</span><span class="p" data-group-id="7401727942-3">)</span><span class="w">
  </span><span class="n">bucket</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s">&quot;bucket&quot;</span><span class="w">
  </span><span class="n">key</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s">&quot;public/</span><span class="si" data-group-id="7401727942-4">#{</span><span class="n">entry</span><span class="o">.</span><span class="n">client_name</span><span class="si" data-group-id="7401727942-4">}</span><span class="s">&quot;</span><span class="w">

  </span><span class="p" data-group-id="7401727942-5">{</span><span class="ss">:ok</span><span class="p">,</span><span class="w"> </span><span class="n">url</span><span class="p" data-group-id="7401727942-5">}</span><span class="w"> </span><span class="o">=</span><span class="w">
    </span><span class="nc">ExAws.S3</span><span class="o">.</span><span class="n">presigned_url</span><span class="p" data-group-id="7401727942-6">(</span><span class="n">config</span><span class="p">,</span><span class="w"> </span><span class="ss">:put</span><span class="p">,</span><span class="w"> </span><span class="n">bucket</span><span class="p">,</span><span class="w"> </span><span class="n">key</span><span class="p">,</span><span class="w">
      </span><span class="ss">expires_in</span><span class="p">:</span><span class="w"> </span><span class="mi">3600</span><span class="p">,</span><span class="w">
      </span><span class="ss">query_params</span><span class="p">:</span><span class="w"> </span><span class="p" data-group-id="7401727942-7">[</span><span class="p" data-group-id="7401727942-8">{</span><span class="s">&quot;Content-Type&quot;</span><span class="p">,</span><span class="w"> </span><span class="n">entry</span><span class="o">.</span><span class="n">client_type</span><span class="p" data-group-id="7401727942-8">}</span><span class="p" data-group-id="7401727942-7">]</span><span class="w">
    </span><span class="p" data-group-id="7401727942-6">)</span><span class="w">
   </span><span class="p" data-group-id="7401727942-9">{</span><span class="ss">:ok</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="7401727942-10">%{</span><span class="ss">uploader</span><span class="p">:</span><span class="w"> </span><span class="s">&quot;S3&quot;</span><span class="p">,</span><span class="w"> </span><span class="ss">key</span><span class="p">:</span><span class="w"> </span><span class="n">key</span><span class="p">,</span><span class="w"> </span><span class="ss">url</span><span class="p">:</span><span class="w"> </span><span class="n">url</span><span class="p" data-group-id="7401727942-10">}</span><span class="p">,</span><span class="w"> </span><span class="n">socket</span><span class="p" data-group-id="7401727942-9">}</span><span class="w">
</span><span class="k" data-group-id="7401727942-2">end</span></code></pre><p>The new <code class="inline">Uploaders.S3</code>:</p><pre><code class="makeup javascript" translate="no"><span class="bp">Uploaders</span><span class="p">.</span><span class="no">S3</span><span class="w"> </span><span class="kd">=</span><span class="w"> </span><span class="kt">function</span><span class="w"> </span><span class="p">(</span><span class="nv">entries</span><span class="p">,</span><span class="w"> </span><span class="nv">onViewError</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">  </span><span class="nv">entries</span><span class="p">.</span><span class="nf">forEach</span><span class="p">(</span><span class="nv">entry</span><span class="w"> </span><span class="kt">=&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="kt">let</span><span class="w"> </span><span class="nv">xhr</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="ow">new</span><span class="w"> </span><span class="bp">XMLHttpRequest</span><span class="p">(</span><span class="p">)</span><span class="w">
</span><span class="w">    </span><span class="nf">onViewError</span><span class="p">(</span><span class="p">(</span><span class="p">)</span><span class="w"> </span><span class="kt">=&gt;</span><span class="w"> </span><span class="nv">xhr</span><span class="p">.</span><span class="nf">abort</span><span class="p">(</span><span class="p">)</span><span class="p">)</span><span class="w">
</span><span class="w">    </span><span class="bp">xhr</span><span class="p">.</span><span class="nf">onload</span><span class="w"> </span><span class="kd">=</span><span class="w"> </span><span class="p">(</span><span class="p">)</span><span class="w"> </span><span class="kt">=&gt;</span><span class="w"> </span><span class="nv">xhr</span><span class="p">.</span><span class="n">status</span><span class="w"> </span><span class="o">===</span><span class="w"> </span><span class="mi">200</span><span class="w"> </span><span class="o">?</span><span class="w"> </span><span class="nv">entry</span><span class="p">.</span><span class="nf">progress</span><span class="p">(</span><span class="mi">100</span><span class="p">)</span><span class="w"> </span><span class="o">:</span><span class="w"> </span><span class="nv">entry</span><span class="p">.</span><span class="nf">error</span><span class="p">(</span><span class="p">)</span><span class="w">
</span><span class="w">    </span><span class="bp">xhr</span><span class="p">.</span><span class="nf">onerror</span><span class="w"> </span><span class="kd">=</span><span class="w"> </span><span class="p">(</span><span class="p">)</span><span class="w"> </span><span class="kt">=&gt;</span><span class="w"> </span><span class="nv">entry</span><span class="p">.</span><span class="nf">error</span><span class="p">(</span><span class="p">)</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="nv">xhr</span><span class="p">.</span><span class="n">upload</span><span class="p">.</span><span class="nf">addEventListener</span><span class="p">(</span><span class="p">&quot;</span><span class="s2">progress</span><span class="p">&quot;</span><span class="p">,</span><span class="w"> </span><span class="p">(</span><span class="nv">event</span><span class="p">)</span><span class="w"> </span><span class="kt">=&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">      </span><span class="k">if</span><span class="p">(</span><span class="nv">event</span><span class="p">.</span><span class="n">lengthComputable</span><span class="p">)</span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="kt">let</span><span class="w"> </span><span class="nv">percent</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="no">Math</span><span class="p">.</span><span class="nf">round</span><span class="p">(</span><span class="p">(</span><span class="nv">event</span><span class="p">.</span><span class="n">loaded</span><span class="w"> </span><span class="o">/</span><span class="w"> </span><span class="nv">event</span><span class="p">.</span><span class="n">total</span><span class="p">)</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="mi">100</span><span class="p">)</span><span class="w">
</span><span class="w">        </span><span class="k">if</span><span class="p">(</span><span class="nv">percent</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="mi">100</span><span class="p">)</span><span class="p">{</span><span class="w"> </span><span class="nv">entry</span><span class="p">.</span><span class="nf">progress</span><span class="p">(</span><span class="nv">percent</span><span class="p">)</span><span class="w"> </span><span class="p">}</span><span class="w">
</span><span class="w">      </span><span class="p">}</span><span class="w">
</span><span class="w">    </span><span class="p">}</span><span class="p">)</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="kt">let</span><span class="w"> </span><span class="nv">url</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nv">entry</span><span class="p">.</span><span class="n">meta</span><span class="p">.</span><span class="n">url</span><span class="w">
</span><span class="w">    </span><span class="nv">xhr</span><span class="p">.</span><span class="nf">open</span><span class="p">(</span><span class="p">&quot;</span><span class="s2">PUT</span><span class="p">&quot;</span><span class="p">,</span><span class="w"> </span><span class="nv">url</span><span class="p">,</span><span class="w"> </span><span class="kc">true</span><span class="p">)</span><span class="w">
</span><span class="w">    </span><span class="nv">xhr</span><span class="p">.</span><span class="nf">send</span><span class="p">(</span><span class="nv">entry</span><span class="p">.</span><span class="n">file</span><span class="p">)</span><span class="w">
</span><span class="w">  </span><span class="p">}</span><span class="p">)</span><span class="w">
</span><span class="p">}</span></code></pre>

  </body>
</html>
