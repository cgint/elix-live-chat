<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"
      xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>Bindings - Phoenix LiveView v1.1.2</title>
    <meta name="generator" content="ExDoc v0.38.2" />
    <link type="text/css" rel="stylesheet" href="dist/epub-elixir-FNUUKFP7.css" />
    <script src="dist/epub-4WIP524F.js"></script>

  </head>
  <body class="content-inner">

    <h1 id="content">Bindings</h1>
<p>Phoenix supports DOM element bindings for client-server interaction. For
example, to react to a click on a button, you would render the element:</p><pre><code class="makeup heex" translate="no"><span class="p">&lt;</span><span class="nt">button</span><span class="w"> </span><span class="na">phx-click</span><span class="p">=</span><span class="p">&quot;</span><span class="s2">inc_temperature</span><span class="p">&quot;</span><span class="p">&gt;</span><span class="n">+</span><span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span></code></pre><p>Then on the server, all LiveView bindings are handled with the <code class="inline">handle_event</code>
callback, for example:</p><pre><code class="makeup elixir" translate="no"><span class="kd">def</span><span class="w"> </span><span class="nf">handle_event</span><span class="p" data-group-id="0111777281-1">(</span><span class="s">&quot;inc_temperature&quot;</span><span class="p">,</span><span class="w"> </span><span class="c">_value</span><span class="p">,</span><span class="w"> </span><span class="n">socket</span><span class="p" data-group-id="0111777281-1">)</span><span class="w"> </span><span class="k" data-group-id="0111777281-2">do</span><span class="w">
  </span><span class="p" data-group-id="0111777281-3">{</span><span class="ss">:ok</span><span class="p">,</span><span class="w"> </span><span class="n">new_temp</span><span class="p" data-group-id="0111777281-3">}</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nc">Thermostat</span><span class="o">.</span><span class="n">inc_temperature</span><span class="p" data-group-id="0111777281-4">(</span><span class="n">socket</span><span class="o">.</span><span class="n">assigns</span><span class="o">.</span><span class="n">id</span><span class="p" data-group-id="0111777281-4">)</span><span class="w">
  </span><span class="p" data-group-id="0111777281-5">{</span><span class="ss">:noreply</span><span class="p">,</span><span class="w"> </span><span class="n">assign</span><span class="p" data-group-id="0111777281-6">(</span><span class="n">socket</span><span class="p">,</span><span class="w"> </span><span class="ss">:temperature</span><span class="p">,</span><span class="w"> </span><span class="n">new_temp</span><span class="p" data-group-id="0111777281-6">)</span><span class="p" data-group-id="0111777281-5">}</span><span class="w">
</span><span class="k" data-group-id="0111777281-2">end</span></code></pre><table><thead><tr><th style="text-align: left;">Binding</th><th style="text-align: left;">Attributes</th></tr></thead><tbody><tr><td style="text-align: left;"><a href="#click-events">Params</a></td><td style="text-align: left;"><code class="inline">phx-value-*</code></td></tr><tr><td style="text-align: left;"><a href="#click-events">Click Events</a></td><td style="text-align: left;"><code class="inline">phx-click</code>, <code class="inline">phx-click-away</code></td></tr><tr><td style="text-align: left;"><a href="form-bindings.xhtml">Form Events</a></td><td style="text-align: left;"><code class="inline">phx-change</code>, <code class="inline">phx-submit</code>, <code class="inline">phx-disable-with</code>, <code class="inline">phx-trigger-action</code>, <code class="inline">phx-auto-recover</code></td></tr><tr><td style="text-align: left;"><a href="#focus-and-blur-events">Focus Events</a></td><td style="text-align: left;"><code class="inline">phx-blur</code>, <code class="inline">phx-focus</code>, <code class="inline">phx-window-blur</code>, <code class="inline">phx-window-focus</code></td></tr><tr><td style="text-align: left;"><a href="#key-events">Key Events</a></td><td style="text-align: left;"><code class="inline">phx-keydown</code>, <code class="inline">phx-keyup</code>, <code class="inline">phx-window-keydown</code>, <code class="inline">phx-window-keyup</code>, <code class="inline">phx-key</code></td></tr><tr><td style="text-align: left;"><a href="#scroll-events-and-infinite-pagination">Scroll Events</a></td><td style="text-align: left;"><code class="inline">phx-viewport-top</code>, <code class="inline">phx-viewport-bottom</code></td></tr><tr><td style="text-align: left;"><a href="#dom-patching">DOM Patching</a></td><td style="text-align: left;"><code class="inline">phx-update</code>, <code class="inline">phx-mounted</code>, <code class="inline">phx-remove</code></td></tr><tr><td style="text-align: left;"><a href="js-interop.xhtml#client-hooks-via-phx-hook">JS Interop</a></td><td style="text-align: left;"><code class="inline">phx-hook</code></td></tr><tr><td style="text-align: left;"><a href="#lifecycle-events">Lifecycle Events</a></td><td style="text-align: left;"><code class="inline">phx-connected</code>, <code class="inline">phx-disconnected</code></td></tr><tr><td style="text-align: left;"><a href="#rate-limiting-events-with-debounce-and-throttle">Rate Limiting</a></td><td style="text-align: left;"><code class="inline">phx-debounce</code>, <code class="inline">phx-throttle</code></td></tr><tr><td style="text-align: left;"><a href="Phoenix.LiveView.xhtml#static_changed?/1">Static tracking</a></td><td style="text-align: left;"><code class="inline">phx-track-static</code></td></tr></tbody></table><p>If you need to trigger commands actions via JavaScript, see <a href="js-interop.xhtml#js-commands">JavaScript interoperability</a>.</p><h2 id="click-events">Click Events</h2><p>The <code class="inline">phx-click</code> binding is used to send click events to the server.
When any client event, such as a <code class="inline">phx-click</code> click is pushed, the value
sent to the server will be chosen with the following priority:</p><ul><li><p>The <code class="inline">:value</code> specified in <a href="Phoenix.LiveView.JS.xhtml#push/3"><code class="inline">Phoenix.LiveView.JS.push/3</code></a>, such as:</p><pre><code class="makeup heex" translate="no"><span class="p">&lt;</span><span class="nt">div</span><span class="w"> </span><span class="na">phx-click</span><span class="p">=</span><span class="p" data-group-id="9084976793-1">{</span><span class="nc">JS</span><span class="o">.</span><span class="n">push</span><span class="p" data-group-id="9084976793-ex-1">(</span><span class="s">&quot;inc&quot;</span><span class="p">,</span><span class="w"> </span><span class="ss">value</span><span class="p">:</span><span class="w"> </span><span class="p" data-group-id="9084976793-ex-2">%{</span><span class="ss">myvar1</span><span class="p">:</span><span class="w"> </span><span class="na">@val1</span><span class="p" data-group-id="9084976793-ex-2">}</span><span class="p" data-group-id="9084976793-ex-1">)</span><span class="p" data-group-id="9084976793-1">}</span><span class="p">&gt;</span></code></pre></li><li><p>Any number of optional <code class="inline">phx-value-</code> prefixed attributes, such as:</p><pre><code class="makeup heex" translate="no"><span class="p">&lt;</span><span class="nt">div</span><span class="w"> </span><span class="na">phx-click</span><span class="p">=</span><span class="p">&quot;</span><span class="s2">inc</span><span class="p">&quot;</span><span class="w"> </span><span class="na">phx-value-myvar1</span><span class="p">=</span><span class="p">&quot;</span><span class="s2">val1</span><span class="p">&quot;</span><span class="w"> </span><span class="na">phx-value-myvar2</span><span class="p">=</span><span class="p">&quot;</span><span class="s2">val2</span><span class="p">&quot;</span><span class="p">&gt;</span></code></pre><p>will send the following map of params to the server:</p><pre><code class="makeup elixir" translate="no"><span class="kd">def</span><span class="w"> </span><span class="nf">handle_event</span><span class="p" data-group-id="6524399280-1">(</span><span class="s">&quot;inc&quot;</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="6524399280-2">%{</span><span class="s">&quot;myvar1&quot;</span><span class="w"> </span><span class="p">=&gt;</span><span class="w"> </span><span class="s">&quot;val1&quot;</span><span class="p">,</span><span class="w"> </span><span class="s">&quot;myvar2&quot;</span><span class="w"> </span><span class="p">=&gt;</span><span class="w"> </span><span class="s">&quot;val2&quot;</span><span class="p" data-group-id="6524399280-2">}</span><span class="p">,</span><span class="w"> </span><span class="n">socket</span><span class="p" data-group-id="6524399280-1">)</span><span class="w"> </span><span class="k" data-group-id="6524399280-3">do</span></code></pre><p>If the <code class="inline">phx-value-</code> prefix is used, the server payload will also contain a <code class="inline">&quot;value&quot;</code>
if the element's value attribute exists.</p></li><li><p>The payload will also include any additional user defined metadata of the client event.
For example, the following <code class="inline">LiveSocket</code> client option would send the coordinates and
<code class="inline">altKey</code> information for all clicks:</p><pre><code class="makeup javascript" translate="no"><span class="kt">let</span><span class="w"> </span><span class="nv">liveSocket</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="ow">new</span><span class="w"> </span><span class="nv">LiveSocket</span><span class="p">(</span><span class="p">&quot;</span><span class="s2">/live</span><span class="p">&quot;</span><span class="p">,</span><span class="w"> </span><span class="no">Socket</span><span class="p">,</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">  </span><span class="n">params</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="n">_csrf_token</span><span class="p">:</span><span class="w"> </span><span class="nv">csrfToken</span><span class="p">}</span><span class="p">,</span><span class="w">
</span><span class="w">  </span><span class="n">metadata</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="nf">click</span><span class="p">:</span><span class="w"> </span><span class="p">(</span><span class="nv">e</span><span class="p">,</span><span class="w"> </span><span class="nv">el</span><span class="p">)</span><span class="w"> </span><span class="kt">=&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">      </span><span class="k">return</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="n">altKey</span><span class="p">:</span><span class="w"> </span><span class="nv">e</span><span class="p">.</span><span class="n">altKey</span><span class="p">,</span><span class="w">
</span><span class="w">        </span><span class="n">clientX</span><span class="p">:</span><span class="w"> </span><span class="nv">e</span><span class="p">.</span><span class="n">clientX</span><span class="p">,</span><span class="w">
</span><span class="w">        </span><span class="n">clientY</span><span class="p">:</span><span class="w"> </span><span class="nv">e</span><span class="p">.</span><span class="n">clientY</span><span class="w">
</span><span class="w">      </span><span class="p">}</span><span class="w">
</span><span class="w">    </span><span class="p">}</span><span class="w">
</span><span class="w">  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="p">)</span></code></pre></li></ul><p>The <code class="inline">phx-click-away</code> event is fired when a click event happens outside of the element.
This is useful for hiding toggled containers like drop-downs.</p><h2 id="focus-and-blur-events">Focus and Blur Events</h2><p>Focus and blur events may be bound to DOM elements that emit
such events, using the <code class="inline">phx-blur</code>, and <code class="inline">phx-focus</code> bindings, for example:</p><pre><code class="makeup heex" translate="no"><span class="p">&lt;</span><span class="nt">input</span><span class="w"> </span><span class="na">name</span><span class="p">=</span><span class="p">&quot;</span><span class="s2">email</span><span class="p">&quot;</span><span class="w"> </span><span class="na">phx-focus</span><span class="p">=</span><span class="p">&quot;</span><span class="s2">myfocus</span><span class="p">&quot;</span><span class="w"> </span><span class="na">phx-blur</span><span class="p">=</span><span class="p">&quot;</span><span class="s2">myblur</span><span class="p">&quot;</span><span class="p">/&gt;</span></code></pre><p>To detect when the page itself has received focus or blur,
<code class="inline">phx-window-focus</code> and <code class="inline">phx-window-blur</code> may be specified. These window
level events may also be necessary if the element in consideration
(most often a <code class="inline">div</code> with no tabindex) cannot receive focus. Like other
bindings, <code class="inline">phx-value-*</code> can be provided on the bound element, and those
values will be sent as part of the payload. For example:</p><pre><code class="makeup heex" translate="no"><span class="p">&lt;</span><span class="nt">div</span><span class="w"> </span><span class="na">class</span><span class="p">=</span><span class="p">&quot;</span><span class="s2">c</span><span class="s2">o</span><span class="s2">n</span><span class="s2">t</span><span class="s2">a</span><span class="s2">i</span><span class="s2">n</span><span class="s2">e</span><span class="s2">r</span><span class="p">&quot;</span><span class="w">
</span><span class="w">    </span><span class="na">phx-window-focus</span><span class="p">=</span><span class="p">&quot;</span><span class="s2">page-active</span><span class="p">&quot;</span><span class="w">
</span><span class="w">    </span><span class="na">phx-window-blur</span><span class="p">=</span><span class="p">&quot;</span><span class="s2">page-inactive</span><span class="p">&quot;</span><span class="w">
</span><span class="w">    </span><span class="na">phx-value-page</span><span class="p">=</span><span class="p">&quot;</span><span class="s2">123</span><span class="p">&quot;</span><span class="p">&gt;</span><span class="w">
</span><span class="n">  ...
</span><span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span></code></pre><h2 id="key-events">Key Events</h2><p>The <code class="inline">onkeydown</code>, and <code class="inline">onkeyup</code> events are supported via the <code class="inline">phx-keydown</code>,
and <code class="inline">phx-keyup</code> bindings. Each binding supports a <code class="inline">phx-key</code> attribute, which triggers
the event for the specific key press. If no <code class="inline">phx-key</code> is provided, the event is triggered
for any key press. When pushed, the value sent to the server will contain the <code class="inline">&quot;key&quot;</code>
that was pressed, plus any user-defined metadata. For example, pressing the
Escape key looks like this:</p><pre><code class="makeup elixir" translate="no"><span class="p" data-group-id="9532224247-1">%{</span><span class="s">&quot;key&quot;</span><span class="w"> </span><span class="p">=&gt;</span><span class="w"> </span><span class="s">&quot;Escape&quot;</span><span class="p" data-group-id="9532224247-1">}</span></code></pre><p>To capture additional user-defined metadata, the <code class="inline">metadata</code> option for keydown events
may be provided to the <code class="inline">LiveSocket</code> constructor. For example:</p><pre><code class="makeup javascript" translate="no"><span class="kt">let</span><span class="w"> </span><span class="nv">liveSocket</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="ow">new</span><span class="w"> </span><span class="nv">LiveSocket</span><span class="p">(</span><span class="p">&quot;</span><span class="s2">/live</span><span class="p">&quot;</span><span class="p">,</span><span class="w"> </span><span class="no">Socket</span><span class="p">,</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">  </span><span class="n">params</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="n">_csrf_token</span><span class="p">:</span><span class="w"> </span><span class="nv">csrfToken</span><span class="p">}</span><span class="p">,</span><span class="w">
</span><span class="w">  </span><span class="n">metadata</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="nf">keydown</span><span class="p">:</span><span class="w"> </span><span class="p">(</span><span class="nv">e</span><span class="p">,</span><span class="w"> </span><span class="nv">el</span><span class="p">)</span><span class="w"> </span><span class="kt">=&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">      </span><span class="k">return</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="n">key</span><span class="p">:</span><span class="w"> </span><span class="nv">e</span><span class="p">.</span><span class="n">key</span><span class="p">,</span><span class="w">
</span><span class="w">        </span><span class="n">metaKey</span><span class="p">:</span><span class="w"> </span><span class="nv">e</span><span class="p">.</span><span class="n">metaKey</span><span class="p">,</span><span class="w">
</span><span class="w">        </span><span class="n">repeat</span><span class="p">:</span><span class="w"> </span><span class="nv">e</span><span class="p">.</span><span class="n">repeat</span><span class="w">
</span><span class="w">      </span><span class="p">}</span><span class="w">
</span><span class="w">    </span><span class="p">}</span><span class="w">
</span><span class="w">  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="p">)</span></code></pre><p>To determine which key has been pressed you should use <code class="inline">key</code> value. The
available options can be found on
<a href="https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values">MDN</a>
or via the <a href="https://w3c.github.io/uievents/tools/key-event-viewer.html">Key Event Viewer</a>.</p><p><em>Note</em>: <code class="inline">phx-keyup</code> and <code class="inline">phx-keydown</code> are not supported on inputs.
Instead use form bindings, such as <code class="inline">phx-change</code>, <code class="inline">phx-submit</code>, etc.</p><p><em>Note</em>: it is possible for certain browser features like autofill to trigger key events
with no <code class="inline">&quot;key&quot;</code> field present in the value map sent to the server. For this reason, we
recommend always having a fallback catch-all event handler for LiveView key bindings.
By default, the bound element will be the event listener, but a
window-level binding may be provided via <code class="inline">phx-window-keydown</code> or <code class="inline">phx-window-keyup</code>,
for example:</p><pre><code class="makeup elixir" translate="no"><span class="kd">def</span><span class="w"> </span><span class="nf">render</span><span class="p" data-group-id="8819490999-1">(</span><span class="n">assigns</span><span class="p" data-group-id="8819490999-1">)</span><span class="w"> </span><span class="k" data-group-id="8819490999-2">do</span><span class="w">
  </span><span class="sx">~H&quot;&quot;&quot;</span><span class="w">
</span><span class="w">  </span><span class="p">&lt;</span><span class="nt">div</span><span class="w"> </span><span class="na">id</span><span class="p">=</span><span class="p">&quot;</span><span class="s2">t</span><span class="s2">h</span><span class="s2">e</span><span class="s2">r</span><span class="s2">m</span><span class="s2">o</span><span class="s2">s</span><span class="s2">t</span><span class="s2">a</span><span class="s2">t</span><span class="p">&quot;</span><span class="w"> </span><span class="na">phx-window-keyup</span><span class="p">=</span><span class="p">&quot;</span><span class="s2">update_temp</span><span class="p">&quot;</span><span class="p">&gt;</span><span class="w">
</span><span class="n">    Current temperature: </span><span class="p" data-group-id="5144591425-1">{</span><span class="na">@temperature</span><span class="p" data-group-id="5144591425-1">}</span><span class="n">
</span><span class="w">  </span><span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span><span class="w">
</span><span class="w">  </span><span class="sx">&quot;&quot;&quot;</span><span class="w">
</span><span class="k" data-group-id="8819490999-2">end</span><span class="w">

</span><span class="kd">def</span><span class="w"> </span><span class="nf">handle_event</span><span class="p" data-group-id="8819490999-3">(</span><span class="s">&quot;update_temp&quot;</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="8819490999-4">%{</span><span class="s">&quot;key&quot;</span><span class="w"> </span><span class="p">=&gt;</span><span class="w"> </span><span class="s">&quot;ArrowUp&quot;</span><span class="p" data-group-id="8819490999-4">}</span><span class="p">,</span><span class="w"> </span><span class="n">socket</span><span class="p" data-group-id="8819490999-3">)</span><span class="w"> </span><span class="k" data-group-id="8819490999-5">do</span><span class="w">
  </span><span class="p" data-group-id="8819490999-6">{</span><span class="ss">:ok</span><span class="p">,</span><span class="w"> </span><span class="n">new_temp</span><span class="p" data-group-id="8819490999-6">}</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nc">Thermostat</span><span class="o">.</span><span class="n">inc_temperature</span><span class="p" data-group-id="8819490999-7">(</span><span class="n">socket</span><span class="o">.</span><span class="n">assigns</span><span class="o">.</span><span class="n">id</span><span class="p" data-group-id="8819490999-7">)</span><span class="w">
  </span><span class="p" data-group-id="8819490999-8">{</span><span class="ss">:noreply</span><span class="p">,</span><span class="w"> </span><span class="n">assign</span><span class="p" data-group-id="8819490999-9">(</span><span class="n">socket</span><span class="p">,</span><span class="w"> </span><span class="ss">:temperature</span><span class="p">,</span><span class="w"> </span><span class="n">new_temp</span><span class="p" data-group-id="8819490999-9">)</span><span class="p" data-group-id="8819490999-8">}</span><span class="w">
</span><span class="k" data-group-id="8819490999-5">end</span><span class="w">

</span><span class="kd">def</span><span class="w"> </span><span class="nf">handle_event</span><span class="p" data-group-id="8819490999-10">(</span><span class="s">&quot;update_temp&quot;</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="8819490999-11">%{</span><span class="s">&quot;key&quot;</span><span class="w"> </span><span class="p">=&gt;</span><span class="w"> </span><span class="s">&quot;ArrowDown&quot;</span><span class="p" data-group-id="8819490999-11">}</span><span class="p">,</span><span class="w"> </span><span class="n">socket</span><span class="p" data-group-id="8819490999-10">)</span><span class="w"> </span><span class="k" data-group-id="8819490999-12">do</span><span class="w">
  </span><span class="p" data-group-id="8819490999-13">{</span><span class="ss">:ok</span><span class="p">,</span><span class="w"> </span><span class="n">new_temp</span><span class="p" data-group-id="8819490999-13">}</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nc">Thermostat</span><span class="o">.</span><span class="n">dec_temperature</span><span class="p" data-group-id="8819490999-14">(</span><span class="n">socket</span><span class="o">.</span><span class="n">assigns</span><span class="o">.</span><span class="n">id</span><span class="p" data-group-id="8819490999-14">)</span><span class="w">
  </span><span class="p" data-group-id="8819490999-15">{</span><span class="ss">:noreply</span><span class="p">,</span><span class="w"> </span><span class="n">assign</span><span class="p" data-group-id="8819490999-16">(</span><span class="n">socket</span><span class="p">,</span><span class="w"> </span><span class="ss">:temperature</span><span class="p">,</span><span class="w"> </span><span class="n">new_temp</span><span class="p" data-group-id="8819490999-16">)</span><span class="p" data-group-id="8819490999-15">}</span><span class="w">
</span><span class="k" data-group-id="8819490999-12">end</span><span class="w">

</span><span class="kd">def</span><span class="w"> </span><span class="nf">handle_event</span><span class="p" data-group-id="8819490999-17">(</span><span class="s">&quot;update_temp&quot;</span><span class="p">,</span><span class="w"> </span><span class="bp">_</span><span class="p">,</span><span class="w"> </span><span class="n">socket</span><span class="p" data-group-id="8819490999-17">)</span><span class="w"> </span><span class="k" data-group-id="8819490999-18">do</span><span class="w">
  </span><span class="p" data-group-id="8819490999-19">{</span><span class="ss">:noreply</span><span class="p">,</span><span class="w"> </span><span class="n">socket</span><span class="p" data-group-id="8819490999-19">}</span><span class="w">
</span><span class="k" data-group-id="8819490999-18">end</span></code></pre><h2 id="rate-limiting-events-with-debounce-and-throttle">Rate limiting events with Debounce and Throttle</h2><p>All events can be rate-limited on the client by using the
<code class="inline">phx-debounce</code> and <code class="inline">phx-throttle</code> bindings, with the exception of the <code class="inline">phx-blur</code>
binding, which is fired immediately.</p><p>Rate limited and debounced events have the following behavior:</p><ul><li><p><code class="inline">phx-debounce</code> - Accepts either an integer timeout value (in milliseconds),
or <code class="inline">&quot;blur&quot;</code>. When an integer is provided, emitting the event is delayed by
the specified milliseconds. When <code class="inline">&quot;blur&quot;</code> is provided, emitting the event is
delayed until the field is blurred by the user. When the value is omitted
a default of 300ms is used. Debouncing is typically used for input elements.</p></li><li><p><code class="inline">phx-throttle</code> - Accepts an integer timeout value to throttle the event in milliseconds.
Unlike debounce, throttle will immediately emit the event, then rate limit it at once
per provided timeout. When the value is omitted a default of 300ms is used.
Throttling is typically used to rate limit clicks, mouse and keyboard actions.</p></li></ul><p>For example, to avoid validating an email until the field is blurred, while validating
the username at most every 2 seconds after a user changes the field:</p><pre><code class="makeup heex" translate="no"><span class="p">&lt;</span><span class="nt">form</span><span class="w"> </span><span class="na">phx-change</span><span class="p">=</span><span class="p">&quot;</span><span class="s2">validate</span><span class="p">&quot;</span><span class="w"> </span><span class="na">phx-submit</span><span class="p">=</span><span class="p">&quot;</span><span class="s2">save</span><span class="p">&quot;</span><span class="p">&gt;</span><span class="w">
</span><span class="w">  </span><span class="p">&lt;</span><span class="nt">input</span><span class="w"> </span><span class="na">type</span><span class="p">=</span><span class="p">&quot;</span><span class="s2">text</span><span class="p">&quot;</span><span class="w"> </span><span class="na">name</span><span class="p">=</span><span class="p">&quot;</span><span class="s2">user[email]</span><span class="p">&quot;</span><span class="w"> </span><span class="na">phx-debounce</span><span class="p">=</span><span class="p">&quot;</span><span class="s2">blur</span><span class="p">&quot;</span><span class="p">/&gt;</span><span class="w">
</span><span class="w">  </span><span class="p">&lt;</span><span class="nt">input</span><span class="w"> </span><span class="na">type</span><span class="p">=</span><span class="p">&quot;</span><span class="s2">text</span><span class="p">&quot;</span><span class="w"> </span><span class="na">name</span><span class="p">=</span><span class="p">&quot;</span><span class="s2">user[username]</span><span class="p">&quot;</span><span class="w"> </span><span class="na">phx-debounce</span><span class="p">=</span><span class="p">&quot;</span><span class="s2">2000</span><span class="p">&quot;</span><span class="p">/&gt;</span><span class="w">
</span><span class="p">&lt;/</span><span class="nt">form</span><span class="p">&gt;</span></code></pre><p>And to rate limit a volume up click to once every second:</p><pre><code class="makeup heex" translate="no"><span class="p">&lt;</span><span class="nt">button</span><span class="w"> </span><span class="na">phx-click</span><span class="p">=</span><span class="p">&quot;</span><span class="s2">volume_up</span><span class="p">&quot;</span><span class="w"> </span><span class="na">phx-throttle</span><span class="p">=</span><span class="p">&quot;</span><span class="s2">1000</span><span class="p">&quot;</span><span class="p">&gt;</span><span class="n">+</span><span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span></code></pre><p>Likewise, you may throttle held-down keydown:</p><pre><code class="makeup heex" translate="no"><span class="p">&lt;</span><span class="nt">div</span><span class="w"> </span><span class="na">phx-window-keydown</span><span class="p">=</span><span class="p">&quot;</span><span class="s2">keydown</span><span class="p">&quot;</span><span class="w"> </span><span class="na">phx-throttle</span><span class="p">=</span><span class="p">&quot;</span><span class="s2">500</span><span class="p">&quot;</span><span class="p">&gt;</span><span class="w">
</span><span class="n">  ...
</span><span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span></code></pre><p>Unless held-down keys are required, a better approach is generally to use
<code class="inline">phx-keyup</code> bindings which only trigger on key up, thereby being self-limiting.
However, <code class="inline">phx-keydown</code> is useful for games and other use cases where a constant
press on a key is desired. In such cases, throttle should always be used.</p><h3 id="debounce-and-throttle-special-behavior">Debounce and Throttle special behavior</h3><p>The following specialized behavior is performed for forms and keydown bindings:</p><ul><li><p>When a <code class="inline">phx-submit</code>, or a <code class="inline">phx-change</code> for a different input is triggered,
any current debounce or throttle timers are reset for existing inputs.</p></li><li><p>A <code class="inline">phx-keydown</code> binding is only throttled for key repeats. Unique keypresses
back-to-back will dispatch the pressed key events.</p></li></ul><h2 id="js-commands">JS commands</h2><p>LiveView bindings support a JavaScript command interface via the <a href="Phoenix.LiveView.JS.xhtml"><code class="inline">Phoenix.LiveView.JS</code></a> module, which allows you to specify utility operations that execute on the client when firing <code class="inline">phx-</code> binding events, such as <code class="inline">phx-click</code>, <code class="inline">phx-change</code>, etc. Commands compose together to allow you to push events, add classes to elements, transition elements in and out, and more.
See the <a href="Phoenix.LiveView.JS.xhtml"><code class="inline">Phoenix.LiveView.JS</code></a> documentation for full usage.</p><p>For a small example of what's possible, imagine you want to show and hide a modal on the page without needing to make the round trip to the server to render the content:</p><pre><code class="makeup heex" translate="no"><span class="p">&lt;</span><span class="nt">div</span><span class="w"> </span><span class="na">id</span><span class="p">=</span><span class="p">&quot;</span><span class="s2">m</span><span class="s2">o</span><span class="s2">d</span><span class="s2">a</span><span class="s2">l</span><span class="p">&quot;</span><span class="w"> </span><span class="na">class</span><span class="p">=</span><span class="p">&quot;</span><span class="s2">m</span><span class="s2">o</span><span class="s2">d</span><span class="s2">a</span><span class="s2">l</span><span class="p">&quot;</span><span class="p">&gt;</span><span class="w">
</span><span class="n">  My Modal
</span><span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span><span class="w">
</span><span class="w">
</span><span class="p">&lt;</span><span class="nt">button</span><span class="w"> </span><span class="na">phx-click</span><span class="p">=</span><span class="p" data-group-id="0125938461-1">{</span><span class="nc">JS</span><span class="o">.</span><span class="n">show</span><span class="p" data-group-id="0125938461-ex-1">(</span><span class="ss">to</span><span class="p">:</span><span class="w"> </span><span class="s">&quot;#modal&quot;</span><span class="p">,</span><span class="w"> </span><span class="ss">transition</span><span class="p">:</span><span class="w"> </span><span class="s">&quot;fade-in&quot;</span><span class="p" data-group-id="0125938461-ex-1">)</span><span class="p" data-group-id="0125938461-1">}</span><span class="p">&gt;</span><span class="w">
</span><span class="n">  show modal
</span><span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span><span class="w">
</span><span class="w">
</span><span class="p">&lt;</span><span class="nt">button</span><span class="w"> </span><span class="na">phx-click</span><span class="p">=</span><span class="p" data-group-id="0125938461-2">{</span><span class="nc">JS</span><span class="o">.</span><span class="n">hide</span><span class="p" data-group-id="0125938461-ex-2">(</span><span class="ss">to</span><span class="p">:</span><span class="w"> </span><span class="s">&quot;#modal&quot;</span><span class="p">,</span><span class="w"> </span><span class="ss">transition</span><span class="p">:</span><span class="w"> </span><span class="s">&quot;fade-out&quot;</span><span class="p" data-group-id="0125938461-ex-2">)</span><span class="p" data-group-id="0125938461-2">}</span><span class="p">&gt;</span><span class="w">
</span><span class="n">  hide modal
</span><span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span><span class="w">
</span><span class="w">
</span><span class="p">&lt;</span><span class="nt">button</span><span class="w"> </span><span class="na">phx-click</span><span class="p">=</span><span class="p" data-group-id="0125938461-3">{</span><span class="nc">JS</span><span class="o">.</span><span class="n">toggle</span><span class="p" data-group-id="0125938461-ex-3">(</span><span class="ss">to</span><span class="p">:</span><span class="w"> </span><span class="s">&quot;#modal&quot;</span><span class="p">,</span><span class="w"> </span><span class="ss">in</span><span class="p">:</span><span class="w"> </span><span class="s">&quot;fade-in&quot;</span><span class="p">,</span><span class="w"> </span><span class="ss">out</span><span class="p">:</span><span class="w"> </span><span class="s">&quot;fade-out&quot;</span><span class="p" data-group-id="0125938461-ex-3">)</span><span class="p" data-group-id="0125938461-3">}</span><span class="p">&gt;</span><span class="w">
</span><span class="n">  toggle modal
</span><span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span></code></pre><p>Or if your UI library relies on classes to perform the showing or hiding:</p><pre><code class="makeup heex" translate="no"><span class="p">&lt;</span><span class="nt">div</span><span class="w"> </span><span class="na">id</span><span class="p">=</span><span class="p">&quot;</span><span class="s2">m</span><span class="s2">o</span><span class="s2">d</span><span class="s2">a</span><span class="s2">l</span><span class="p">&quot;</span><span class="w"> </span><span class="na">class</span><span class="p">=</span><span class="p">&quot;</span><span class="s2">m</span><span class="s2">o</span><span class="s2">d</span><span class="s2">a</span><span class="s2">l</span><span class="p">&quot;</span><span class="p">&gt;</span><span class="w">
</span><span class="n">  My Modal
</span><span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span><span class="w">
</span><span class="w">
</span><span class="p">&lt;</span><span class="nt">button</span><span class="w"> </span><span class="na">phx-click</span><span class="p">=</span><span class="p" data-group-id="3573233921-1">{</span><span class="nc">JS</span><span class="o">.</span><span class="n">add_class</span><span class="p" data-group-id="3573233921-ex-1">(</span><span class="s">&quot;show&quot;</span><span class="p">,</span><span class="w"> </span><span class="ss">to</span><span class="p">:</span><span class="w"> </span><span class="s">&quot;#modal&quot;</span><span class="p">,</span><span class="w"> </span><span class="ss">transition</span><span class="p">:</span><span class="w"> </span><span class="s">&quot;fade-in&quot;</span><span class="p" data-group-id="3573233921-ex-1">)</span><span class="p" data-group-id="3573233921-1">}</span><span class="p">&gt;</span><span class="w">
</span><span class="n">  show modal
</span><span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span><span class="w">
</span><span class="w">
</span><span class="p">&lt;</span><span class="nt">button</span><span class="w"> </span><span class="na">phx-click</span><span class="p">=</span><span class="p" data-group-id="3573233921-2">{</span><span class="nc">JS</span><span class="o">.</span><span class="n">remove_class</span><span class="p" data-group-id="3573233921-ex-2">(</span><span class="s">&quot;show&quot;</span><span class="p">,</span><span class="w"> </span><span class="ss">to</span><span class="p">:</span><span class="w"> </span><span class="s">&quot;#modal&quot;</span><span class="p">,</span><span class="w"> </span><span class="ss">transition</span><span class="p">:</span><span class="w"> </span><span class="s">&quot;fade-out&quot;</span><span class="p" data-group-id="3573233921-ex-2">)</span><span class="p" data-group-id="3573233921-2">}</span><span class="p">&gt;</span><span class="w">
</span><span class="n">  hide modal
</span><span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span></code></pre><p>Commands compose together. For example, you can push an event to the server and
immediately hide the modal on the client:</p><pre><code class="makeup heex" translate="no"><span class="p">&lt;</span><span class="nt">div</span><span class="w"> </span><span class="na">id</span><span class="p">=</span><span class="p">&quot;</span><span class="s2">m</span><span class="s2">o</span><span class="s2">d</span><span class="s2">a</span><span class="s2">l</span><span class="p">&quot;</span><span class="w"> </span><span class="na">class</span><span class="p">=</span><span class="p">&quot;</span><span class="s2">m</span><span class="s2">o</span><span class="s2">d</span><span class="s2">a</span><span class="s2">l</span><span class="p">&quot;</span><span class="p">&gt;</span><span class="w">
</span><span class="n">  My Modal
</span><span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span><span class="w">
</span><span class="w">
</span><span class="p">&lt;</span><span class="nt">button</span><span class="w"> </span><span class="na">phx-click</span><span class="p">=</span><span class="p" data-group-id="3943921594-1">{</span><span class="nc">JS</span><span class="o">.</span><span class="n">push</span><span class="p" data-group-id="3943921594-ex-1">(</span><span class="s">&quot;modal-closed&quot;</span><span class="p" data-group-id="3943921594-ex-1">)</span><span class="w"> </span><span class="o">|&gt;</span><span class="w"> </span><span class="nc">JS</span><span class="o">.</span><span class="n">remove_class</span><span class="p" data-group-id="3943921594-ex-2">(</span><span class="s">&quot;show&quot;</span><span class="p">,</span><span class="w"> </span><span class="ss">to</span><span class="p">:</span><span class="w"> </span><span class="s">&quot;#modal&quot;</span><span class="p">,</span><span class="w"> </span><span class="ss">transition</span><span class="p">:</span><span class="w"> </span><span class="s">&quot;fade-out&quot;</span><span class="p" data-group-id="3943921594-ex-2">)</span><span class="p" data-group-id="3943921594-1">}</span><span class="p">&gt;</span><span class="w">
</span><span class="n">  hide modal
</span><span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span></code></pre><p>It is also useful to extract commands into their own functions:</p><pre><code class="makeup elixir" translate="no"><span class="kn">alias</span><span class="w"> </span><span class="nc">Phoenix.LiveView.JS</span><span class="w">

</span><span class="kd">def</span><span class="w"> </span><span class="nf">hide_modal</span><span class="p" data-group-id="6724312436-1">(</span><span class="n">js</span><span class="w"> </span><span class="o">\\</span><span class="w"> </span><span class="p" data-group-id="6724312436-2">%</span><span class="nc" data-group-id="6724312436-2">JS</span><span class="p" data-group-id="6724312436-2">{</span><span class="p" data-group-id="6724312436-2">}</span><span class="p">,</span><span class="w"> </span><span class="n">selector</span><span class="p" data-group-id="6724312436-1">)</span><span class="w"> </span><span class="k" data-group-id="6724312436-3">do</span><span class="w">
  </span><span class="n">js</span><span class="w">
  </span><span class="o">|&gt;</span><span class="w"> </span><span class="nc">JS</span><span class="o">.</span><span class="n">push</span><span class="p" data-group-id="6724312436-4">(</span><span class="s">&quot;modal-closed&quot;</span><span class="p" data-group-id="6724312436-4">)</span><span class="w">
  </span><span class="o">|&gt;</span><span class="w"> </span><span class="nc">JS</span><span class="o">.</span><span class="n">remove_class</span><span class="p" data-group-id="6724312436-5">(</span><span class="s">&quot;show&quot;</span><span class="p">,</span><span class="w"> </span><span class="ss">to</span><span class="p">:</span><span class="w"> </span><span class="n">selector</span><span class="p">,</span><span class="w"> </span><span class="ss">transition</span><span class="p">:</span><span class="w"> </span><span class="s">&quot;fade-out&quot;</span><span class="p" data-group-id="6724312436-5">)</span><span class="w">
</span><span class="k" data-group-id="6724312436-3">end</span></code></pre><pre><code class="makeup heex" translate="no"><span class="p">&lt;</span><span class="nt">button</span><span class="w"> </span><span class="na">phx-click</span><span class="p">=</span><span class="p" data-group-id="0172147529-1">{</span><span class="n">hide_modal</span><span class="p" data-group-id="0172147529-ex-1">(</span><span class="s">&quot;#modal&quot;</span><span class="p" data-group-id="0172147529-ex-1">)</span><span class="p" data-group-id="0172147529-1">}</span><span class="p">&gt;</span><span class="n">hide modal</span><span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span></code></pre><p>The <a href="Phoenix.LiveView.JS.xhtml#push/3"><code class="inline">Phoenix.LiveView.JS.push/3</code></a> command is particularly powerful in allowing you to customize the event being pushed to the server. For example, imagine you start with a familiar <code class="inline">phx-click</code> which pushes a message to the server when clicked:</p><pre><code class="makeup heex" translate="no"><span class="p">&lt;</span><span class="nt">button</span><span class="w"> </span><span class="na">phx-click</span><span class="p">=</span><span class="p">&quot;</span><span class="s2">clicked</span><span class="p">&quot;</span><span class="p">&gt;</span><span class="n">click</span><span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span></code></pre><p>Now imagine you want to customize what happens when the <code class="inline">&quot;clicked&quot;</code> event is pushed, such as which component should be targeted, which element should receive CSS loading state classes, etc. This can be accomplished with options on the JS push command. For example:</p><pre><code class="makeup heex" translate="no"><span class="p">&lt;</span><span class="nt">button</span><span class="w"> </span><span class="na">phx-click</span><span class="p">=</span><span class="p" data-group-id="4856808504-1">{</span><span class="nc">JS</span><span class="o">.</span><span class="n">push</span><span class="p" data-group-id="4856808504-ex-1">(</span><span class="s">&quot;clicked&quot;</span><span class="p">,</span><span class="w"> </span><span class="ss">target</span><span class="p">:</span><span class="w"> </span><span class="na">@myself</span><span class="p">,</span><span class="w"> </span><span class="ss">loading</span><span class="p">:</span><span class="w"> </span><span class="s">&quot;.container&quot;</span><span class="p" data-group-id="4856808504-ex-1">)</span><span class="p" data-group-id="4856808504-1">}</span><span class="p">&gt;</span><span class="n">click</span><span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span></code></pre><p>See <a href="Phoenix.LiveView.JS.xhtml#push/3"><code class="inline">Phoenix.LiveView.JS.push/3</code></a> for all supported options.</p><h2 id="dom-patching">DOM patching</h2><p>A container can be marked with <code class="inline">phx-update</code> to configure how the DOM
is updated. The following values are supported:</p><ul><li><p><code class="inline">replace</code> - the default operation. Replaces the element with the contents</p></li><li><p><code class="inline">stream</code> - supports stream operations. Streams are used to manage large
collections in the UI without having to store the collection on the server</p></li><li><p><code class="inline">ignore</code> - ignores updates to the DOM regardless of new content changes.
This is useful for client-side interop with existing libraries that do
their own DOM operations</p></li></ul><p>When using <code class="inline">phx-update</code>, a unique DOM ID must always be set in the
container. If using &quot;stream&quot;, a DOM ID must also be set
for each child. When inserting stream elements containing an
ID already present in the container, LiveView will replace the existing
element with the new content. See <a href="Phoenix.LiveView.xhtml#stream/3"><code class="inline">Phoenix.LiveView.stream/3</code></a> for more
information.</p><p>The &quot;ignore&quot; behaviour is frequently used when you need to integrate
with another JS library. Updates from the server to the element's content
and attributes are ignored, <em>except for data attributes</em>. Changes, additions,
and removals from the server to data attributes are merged with the ignored
element which can be used to pass data to the JS handler.</p><p>To react to elements being mounted to the DOM, the <code class="inline">phx-mounted</code> binding
can be used. For example, to animate an element on mount:</p><pre><code class="makeup heex" translate="no"><span class="p">&lt;</span><span class="nt">div</span><span class="w"> </span><span class="na">phx-mounted</span><span class="p">=</span><span class="p" data-group-id="0803422446-1">{</span><span class="nc">JS</span><span class="o">.</span><span class="n">transition</span><span class="p" data-group-id="0803422446-ex-1">(</span><span class="s">&quot;animate-ping&quot;</span><span class="p">,</span><span class="w"> </span><span class="ss">time</span><span class="p">:</span><span class="w"> </span><span class="mi">500</span><span class="p" data-group-id="0803422446-ex-1">)</span><span class="p" data-group-id="0803422446-1">}</span><span class="p">&gt;</span></code></pre><p>If <code class="inline">phx-mounted</code> is used on the initial page render, it will be invoked only
after the initial WebSocket connection is established.</p><p>To react to elements being removed from the DOM, the <code class="inline">phx-remove</code> binding
may be specified, which can contain a <a href="Phoenix.LiveView.JS.xhtml"><code class="inline">Phoenix.LiveView.JS</code></a> command to execute.
The <code class="inline">phx-remove</code> command is only executed for the removed parent element.
It does not cascade to children.</p><p>To react to elements being updated in the DOM, you'll need to use a
<a href="js-interop.xhtml#client-hooks-via-phx-hook">hook</a>, which gives you full access
to the element life-cycle.</p><h2 id="lifecycle-events">Lifecycle events</h2><p>LiveView supports the <code class="inline">phx-connected</code> and <code class="inline">phx-disconnected</code> bindings to react
to connection lifecycle events with JS commands. For example, to show an element
when the LiveView has lost its connection and hide it when the connection
recovers:</p><pre><code class="makeup heex" translate="no"><span class="p">&lt;</span><span class="nt">div</span><span class="w"> </span><span class="na">id</span><span class="p">=</span><span class="p">&quot;</span><span class="s2">s</span><span class="s2">t</span><span class="s2">a</span><span class="s2">t</span><span class="s2">u</span><span class="s2">s</span><span class="p">&quot;</span><span class="w"> </span><span class="na">class</span><span class="p">=</span><span class="p">&quot;</span><span class="s2">h</span><span class="s2">i</span><span class="s2">d</span><span class="s2">d</span><span class="s2">e</span><span class="s2">n</span><span class="p">&quot;</span><span class="w"> </span><span class="na">phx-disconnected</span><span class="p">=</span><span class="p" data-group-id="9213454964-1">{</span><span class="nc">JS</span><span class="o">.</span><span class="n">show</span><span class="p" data-group-id="9213454964-ex-1">(</span><span class="p" data-group-id="9213454964-ex-1">)</span><span class="p" data-group-id="9213454964-1">}</span><span class="w"> </span><span class="na">phx-connected</span><span class="p">=</span><span class="p" data-group-id="9213454964-2">{</span><span class="nc">JS</span><span class="o">.</span><span class="n">hide</span><span class="p" data-group-id="9213454964-ex-2">(</span><span class="p" data-group-id="9213454964-ex-2">)</span><span class="p" data-group-id="9213454964-2">}</span><span class="p">&gt;</span><span class="w">
</span><span class="n">  Attempting to reconnect...
</span><span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span></code></pre><p><code class="inline">phx-connected</code> and <code class="inline">phx-disconnected</code> are only executed when operating
inside a LiveView container. For static templates, they will have no effect.</p><h2 id="liveview-events-prefix">LiveView events prefix</h2><p>The <code class="inline">lv:</code> event prefix supports LiveView specific features that are handled
by LiveView without calling the user's <code class="inline">handle_event/3</code> callbacks. Today,
the following events are supported:</p><ul><li><code class="inline">lv:clear-flash</code> – clears the flash when sent to the server. If a
<code class="inline">phx-value-key</code> is provided, the specific key will be removed from the flash.</li></ul><p>For example:</p><pre><code class="makeup heex" translate="no"><span class="p">&lt;</span><span class="nt">p</span><span class="w"> </span><span class="na">class</span><span class="p">=</span><span class="p">&quot;</span><span class="s2">a</span><span class="s2">l</span><span class="s2">e</span><span class="s2">r</span><span class="s2">t</span><span class="p">&quot;</span><span class="w"> </span><span class="na">phx-click</span><span class="p">=</span><span class="p">&quot;</span><span class="s2">lv:clear-flash</span><span class="p">&quot;</span><span class="w"> </span><span class="na">phx-value-key</span><span class="p">=</span><span class="p">&quot;</span><span class="s2">info</span><span class="p">&quot;</span><span class="p">&gt;</span><span class="w">
</span><span class="w">  </span><span class="p" data-group-id="2920843297-1">{</span><span class="nc">Phoenix.Flash</span><span class="o">.</span><span class="n">get</span><span class="p" data-group-id="2920843297-ex-1">(</span><span class="na">@flash</span><span class="p">,</span><span class="w"> </span><span class="ss">:info</span><span class="p" data-group-id="2920843297-ex-1">)</span><span class="p" data-group-id="2920843297-1">}</span><span class="w">
</span><span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span></code></pre><h2 id="scroll-events-and-infinite-pagination">Scroll events and infinite pagination</h2><p>The <code class="inline">phx-viewport-top</code> and <code class="inline">phx-viewport-bottom</code> bindings allow you to detect when a container's
first child reaches the top of the viewport, or the last child reaches the bottom of the viewport.
This is useful for infinite scrolling where you want to send paging events for the next results set or previous results set as the user is scrolling up and down and reaches the top or bottom of the viewport.</p><p>Generally, applications will add padding above and below a container when performing infinite scrolling to allow smooth scrolling as results are loaded. Combined with <a href="Phoenix.LiveView.xhtml#stream/3"><code class="inline">Phoenix.LiveView.stream/3</code></a>, the <code class="inline">phx-viewport-top</code> and <code class="inline">phx-viewport-bottom</code> allow for infinite virtualized list that only keeps a small set of actual elements in the DOM. For example:</p><pre><code class="makeup elixir" translate="no"><span class="kd">def</span><span class="w"> </span><span class="nf">mount</span><span class="p" data-group-id="9878152175-1">(</span><span class="bp">_</span><span class="p">,</span><span class="w"> </span><span class="bp">_</span><span class="p">,</span><span class="w"> </span><span class="n">socket</span><span class="p" data-group-id="9878152175-1">)</span><span class="w"> </span><span class="k" data-group-id="9878152175-2">do</span><span class="w">
  </span><span class="p" data-group-id="9878152175-3">{</span><span class="ss">:ok</span><span class="p">,</span><span class="w">
    </span><span class="n">socket</span><span class="w">
    </span><span class="o">|&gt;</span><span class="w"> </span><span class="n">assign</span><span class="p" data-group-id="9878152175-4">(</span><span class="ss">page</span><span class="p">:</span><span class="w"> </span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="ss">per_page</span><span class="p">:</span><span class="w"> </span><span class="mi">20</span><span class="p" data-group-id="9878152175-4">)</span><span class="w">
    </span><span class="o">|&gt;</span><span class="w"> </span><span class="n">paginate_posts</span><span class="p" data-group-id="9878152175-5">(</span><span class="mi">1</span><span class="p" data-group-id="9878152175-5">)</span><span class="p" data-group-id="9878152175-3">}</span><span class="w">
</span><span class="k" data-group-id="9878152175-2">end</span><span class="w">

</span><span class="kd">defp</span><span class="w"> </span><span class="nf">paginate_posts</span><span class="p" data-group-id="9878152175-6">(</span><span class="n">socket</span><span class="p">,</span><span class="w"> </span><span class="n">new_page</span><span class="p" data-group-id="9878152175-6">)</span><span class="w"> </span><span class="ow">when</span><span class="w"> </span><span class="n">new_page</span><span class="w"> </span><span class="o">&gt;=</span><span class="w"> </span><span class="mi">1</span><span class="w"> </span><span class="k" data-group-id="9878152175-7">do</span><span class="w">
  </span><span class="p" data-group-id="9878152175-8">%{</span><span class="ss">per_page</span><span class="p">:</span><span class="w"> </span><span class="n">per_page</span><span class="p">,</span><span class="w"> </span><span class="ss">page</span><span class="p">:</span><span class="w"> </span><span class="n">cur_page</span><span class="p" data-group-id="9878152175-8">}</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">socket</span><span class="o">.</span><span class="n">assigns</span><span class="w">
  </span><span class="n">posts</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nc">Blog</span><span class="o">.</span><span class="n">list_posts</span><span class="p" data-group-id="9878152175-9">(</span><span class="ss">offset</span><span class="p">:</span><span class="w"> </span><span class="p" data-group-id="9878152175-10">(</span><span class="n">new_page</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="mi">1</span><span class="p" data-group-id="9878152175-10">)</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">per_page</span><span class="p">,</span><span class="w"> </span><span class="ss">limit</span><span class="p">:</span><span class="w"> </span><span class="n">per_page</span><span class="p" data-group-id="9878152175-9">)</span><span class="w">

  </span><span class="p" data-group-id="9878152175-11">{</span><span class="n">posts</span><span class="p">,</span><span class="w"> </span><span class="n">at</span><span class="p">,</span><span class="w"> </span><span class="n">limit</span><span class="p" data-group-id="9878152175-11">}</span><span class="w"> </span><span class="o">=</span><span class="w">
    </span><span class="k">if</span><span class="w"> </span><span class="n">new_page</span><span class="w"> </span><span class="o">&gt;=</span><span class="w"> </span><span class="n">cur_page</span><span class="w"> </span><span class="k" data-group-id="9878152175-12">do</span><span class="w">
      </span><span class="p" data-group-id="9878152175-13">{</span><span class="n">posts</span><span class="p">,</span><span class="w"> </span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="n">per_page</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="mi">3</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="o">-</span><span class="mi">1</span><span class="p" data-group-id="9878152175-13">}</span><span class="w">
    </span><span class="k" data-group-id="9878152175-12">else</span><span class="w">
      </span><span class="p" data-group-id="9878152175-14">{</span><span class="nc">Enum</span><span class="o">.</span><span class="n">reverse</span><span class="p" data-group-id="9878152175-15">(</span><span class="n">posts</span><span class="p" data-group-id="9878152175-15">)</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="n">per_page</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="mi">3</span><span class="p" data-group-id="9878152175-14">}</span><span class="w">
    </span><span class="k" data-group-id="9878152175-12">end</span><span class="w">

  </span><span class="k">case</span><span class="w"> </span><span class="n">posts</span><span class="w"> </span><span class="k" data-group-id="9878152175-16">do</span><span class="w">
    </span><span class="p" data-group-id="9878152175-17">[</span><span class="p" data-group-id="9878152175-17">]</span><span class="w"> </span><span class="o">-&gt;</span><span class="w">
      </span><span class="n">assign</span><span class="p" data-group-id="9878152175-18">(</span><span class="n">socket</span><span class="p">,</span><span class="w"> </span><span class="ss">end_of_timeline?</span><span class="p">:</span><span class="w"> </span><span class="n">at</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="o">-</span><span class="mi">1</span><span class="p" data-group-id="9878152175-18">)</span><span class="w">

    </span><span class="p" data-group-id="9878152175-19">[</span><span class="bp">_</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="bp">_</span><span class="p" data-group-id="9878152175-19">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">posts</span><span class="w"> </span><span class="o">-&gt;</span><span class="w">
      </span><span class="n">socket</span><span class="w">
      </span><span class="o">|&gt;</span><span class="w"> </span><span class="n">assign</span><span class="p" data-group-id="9878152175-20">(</span><span class="ss">end_of_timeline?</span><span class="p">:</span><span class="w"> </span><span class="no">false</span><span class="p" data-group-id="9878152175-20">)</span><span class="w">
      </span><span class="o">|&gt;</span><span class="w"> </span><span class="n">assign</span><span class="p" data-group-id="9878152175-21">(</span><span class="ss">:page</span><span class="p">,</span><span class="w"> </span><span class="n">new_page</span><span class="p" data-group-id="9878152175-21">)</span><span class="w">
      </span><span class="o">|&gt;</span><span class="w"> </span><span class="n">stream</span><span class="p" data-group-id="9878152175-22">(</span><span class="ss">:posts</span><span class="p">,</span><span class="w"> </span><span class="n">posts</span><span class="p">,</span><span class="w"> </span><span class="ss">at</span><span class="p">:</span><span class="w"> </span><span class="n">at</span><span class="p">,</span><span class="w"> </span><span class="ss">limit</span><span class="p">:</span><span class="w"> </span><span class="n">limit</span><span class="p" data-group-id="9878152175-22">)</span><span class="w">
  </span><span class="k" data-group-id="9878152175-16">end</span><span class="w">
</span><span class="k" data-group-id="9878152175-7">end</span></code></pre><p>Our <code class="inline">paginate_posts</code> function fetches a page of posts, and determines if the user is paging to a previous page or next page. Based on the direction of paging, the stream is either prepended to, or appended to with <code class="inline">at</code> of <code class="inline">0</code> or <code class="inline">-1</code> respectively. We also set the <code class="inline">limit</code> of the stream to three times the <code class="inline">per_page</code> to allow enough posts in the UI to appear as an infinite list, but small enough to maintain UI performance. We also set an <code class="inline">@end_of_timeline?</code> assign to track whether the user is at the end of results or not. Finally, we update the <code class="inline">@page</code> assign and posts stream. We can then wire up our container to support the viewport events:</p><pre><code class="makeup heex" translate="no"><span class="p">&lt;</span><span class="nt">ul</span><span class="w">
</span><span class="w">  </span><span class="na">id</span><span class="p">=</span><span class="p">&quot;</span><span class="s2">p</span><span class="s2">o</span><span class="s2">s</span><span class="s2">t</span><span class="s2">s</span><span class="p">&quot;</span><span class="w">
</span><span class="w">  </span><span class="na">phx-update</span><span class="p">=</span><span class="p">&quot;</span><span class="s2">stream</span><span class="p">&quot;</span><span class="w">
</span><span class="w">  </span><span class="na">phx-viewport-top</span><span class="p">=</span><span class="p" data-group-id="5622056791-1">{</span><span class="na">@page</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="mi">1</span><span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span><span class="nc">JS</span><span class="o">.</span><span class="n">push</span><span class="p" data-group-id="5622056791-ex-1">(</span><span class="s">&quot;prev-page&quot;</span><span class="p">,</span><span class="w"> </span><span class="ss">page_loading</span><span class="p">:</span><span class="w"> </span><span class="no">true</span><span class="p" data-group-id="5622056791-ex-1">)</span><span class="p" data-group-id="5622056791-1">}</span><span class="w">
</span><span class="w">  </span><span class="na">phx-viewport-bottom</span><span class="p">=</span><span class="p" data-group-id="5622056791-2">{</span><span class="o">!</span><span class="na">@end_of_timeline?</span><span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span><span class="nc">JS</span><span class="o">.</span><span class="n">push</span><span class="p" data-group-id="5622056791-ex-2">(</span><span class="s">&quot;next-page&quot;</span><span class="p">,</span><span class="w"> </span><span class="ss">page_loading</span><span class="p">:</span><span class="w"> </span><span class="no">true</span><span class="p" data-group-id="5622056791-ex-2">)</span><span class="p" data-group-id="5622056791-2">}</span><span class="w">
</span><span class="w">  </span><span class="na">class</span><span class="p">=</span><span class="p" data-group-id="5622056791-3">{</span><span class="p" data-group-id="5622056791-ex-3">[</span><span class="w">
    </span><span class="k">if</span><span class="p" data-group-id="5622056791-ex-4">(</span><span class="na">@end_of_timeline?</span><span class="p">,</span><span class="w"> </span><span class="ss">do</span><span class="p">:</span><span class="w"> </span><span class="s">&quot;pb-10&quot;</span><span class="p">,</span><span class="w"> </span><span class="ss">else</span><span class="p">:</span><span class="w"> </span><span class="s">&quot;pb-[calc(200vh)]&quot;</span><span class="p" data-group-id="5622056791-ex-4">)</span><span class="p">,</span><span class="w">
    </span><span class="k">if</span><span class="p" data-group-id="5622056791-ex-5">(</span><span class="na">@page</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="ss">do</span><span class="p">:</span><span class="w"> </span><span class="s">&quot;pt-10&quot;</span><span class="p">,</span><span class="w"> </span><span class="ss">else</span><span class="p">:</span><span class="w"> </span><span class="s">&quot;pt-[calc(200vh)]&quot;</span><span class="p" data-group-id="5622056791-ex-5">)</span><span class="w">
  </span><span class="p" data-group-id="5622056791-ex-3">]</span><span class="p" data-group-id="5622056791-3">}</span><span class="w">
</span><span class="p">&gt;</span><span class="w">
</span><span class="w">  </span><span class="p">&lt;</span><span class="nt">li</span><span class="w"> </span><span class="na">:for</span><span class="p">=</span><span class="p" data-group-id="5622056791-4">{</span><span class="p" data-group-id="5622056791-ex-6">{</span><span class="n">id</span><span class="p">,</span><span class="w"> </span><span class="n">post</span><span class="p" data-group-id="5622056791-ex-6">}</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="na">@streams</span><span class="o">.</span><span class="n">posts</span><span class="p" data-group-id="5622056791-4">}</span><span class="w"> </span><span class="na">id</span><span class="p">=</span><span class="p" data-group-id="5622056791-5">{</span><span class="n">id</span><span class="p" data-group-id="5622056791-5">}</span><span class="p">&gt;</span><span class="w">
</span><span class="w">    </span><span class="p">&lt;</span><span class="nf">.post_card</span><span class="w"> </span><span class="na">post</span><span class="p">=</span><span class="p" data-group-id="5622056791-6">{</span><span class="n">post</span><span class="p" data-group-id="5622056791-6">}</span><span class="w"> </span><span class="p">/&gt;</span><span class="w">
</span><span class="w">  </span><span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span><span class="w">
</span><span class="p">&lt;/</span><span class="nt">ul</span><span class="p">&gt;</span><span class="w">
</span><span class="p">&lt;</span><span class="nt">div</span><span class="w"> </span><span class="na">:if</span><span class="p">=</span><span class="p" data-group-id="5622056791-7">{</span><span class="na">@end_of_timeline?</span><span class="p" data-group-id="5622056791-7">}</span><span class="w"> </span><span class="na">class</span><span class="p">=</span><span class="p">&quot;</span><span class="s2">m</span><span class="s2">t</span><span class="s2">-</span><span class="s2">5 </span><span class="s2">t</span><span class="s2">e</span><span class="s2">x</span><span class="s2">t</span><span class="s2">-</span><span class="s2">[</span><span class="s2">5</span><span class="s2">0</span><span class="s2">p</span><span class="s2">x</span><span class="s2">] </span><span class="s2">t</span><span class="s2">e</span><span class="s2">x</span><span class="s2">t</span><span class="s2">-</span><span class="s2">c</span><span class="s2">e</span><span class="s2">n</span><span class="s2">t</span><span class="s2">e</span><span class="s2">r</span><span class="p">&quot;</span><span class="p">&gt;</span><span class="w">
</span><span class="n">  🎉 You made it to the beginning of time 🎉
</span><span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span></code></pre><p>There's not much here, but that's the point! This little snippet of UI is driving a fully virtualized list with bidirectional infinite scrolling. We use the <code class="inline">phx-viewport-top</code> binding to send the <code class="inline">&quot;prev-page&quot;</code> event to the LiveView, but only if the user is beyond the first page. It doesn't make sense to load negative page results, so we remove the binding entirely in those cases. Next, we wire up <code class="inline">phx-viewport-bottom</code> to send the <code class="inline">&quot;next-page&quot;</code> event, but only if we've yet to reach the end of the timeline. Finally, we conditionally apply some CSS classes which sets a large top and bottom padding to twice the viewport height based on the current pagination for smooth scrolling.</p><p>To complete our solution, we only need to handle the <code class="inline">&quot;prev-page&quot;</code> and <code class="inline">&quot;next-page&quot;</code> events in the LiveView:</p><pre><code class="makeup elixir" translate="no"><span class="kd">def</span><span class="w"> </span><span class="nf">handle_event</span><span class="p" data-group-id="1237293553-1">(</span><span class="s">&quot;next-page&quot;</span><span class="p">,</span><span class="w"> </span><span class="bp">_</span><span class="p">,</span><span class="w"> </span><span class="n">socket</span><span class="p" data-group-id="1237293553-1">)</span><span class="w"> </span><span class="k" data-group-id="1237293553-2">do</span><span class="w">
  </span><span class="p" data-group-id="1237293553-3">{</span><span class="ss">:noreply</span><span class="p">,</span><span class="w"> </span><span class="n">paginate_posts</span><span class="p" data-group-id="1237293553-4">(</span><span class="n">socket</span><span class="p">,</span><span class="w"> </span><span class="n">socket</span><span class="o">.</span><span class="n">assigns</span><span class="o">.</span><span class="n">page</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="mi">1</span><span class="p" data-group-id="1237293553-4">)</span><span class="p" data-group-id="1237293553-3">}</span><span class="w">
</span><span class="k" data-group-id="1237293553-2">end</span><span class="w">

</span><span class="kd">def</span><span class="w"> </span><span class="nf">handle_event</span><span class="p" data-group-id="1237293553-5">(</span><span class="s">&quot;prev-page&quot;</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="1237293553-6">%{</span><span class="s">&quot;_overran&quot;</span><span class="w"> </span><span class="p">=&gt;</span><span class="w"> </span><span class="no">true</span><span class="p" data-group-id="1237293553-6">}</span><span class="p">,</span><span class="w"> </span><span class="n">socket</span><span class="p" data-group-id="1237293553-5">)</span><span class="w"> </span><span class="k" data-group-id="1237293553-7">do</span><span class="w">
  </span><span class="p" data-group-id="1237293553-8">{</span><span class="ss">:noreply</span><span class="p">,</span><span class="w"> </span><span class="n">paginate_posts</span><span class="p" data-group-id="1237293553-9">(</span><span class="n">socket</span><span class="p">,</span><span class="w"> </span><span class="mi">1</span><span class="p" data-group-id="1237293553-9">)</span><span class="p" data-group-id="1237293553-8">}</span><span class="w">
</span><span class="k" data-group-id="1237293553-7">end</span><span class="w">

</span><span class="kd">def</span><span class="w"> </span><span class="nf">handle_event</span><span class="p" data-group-id="1237293553-10">(</span><span class="s">&quot;prev-page&quot;</span><span class="p">,</span><span class="w"> </span><span class="bp">_</span><span class="p">,</span><span class="w"> </span><span class="n">socket</span><span class="p" data-group-id="1237293553-10">)</span><span class="w"> </span><span class="k" data-group-id="1237293553-11">do</span><span class="w">
  </span><span class="k">if</span><span class="w"> </span><span class="n">socket</span><span class="o">.</span><span class="n">assigns</span><span class="o">.</span><span class="n">page</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="mi">1</span><span class="w"> </span><span class="k" data-group-id="1237293553-12">do</span><span class="w">
    </span><span class="p" data-group-id="1237293553-13">{</span><span class="ss">:noreply</span><span class="p">,</span><span class="w"> </span><span class="n">paginate_posts</span><span class="p" data-group-id="1237293553-14">(</span><span class="n">socket</span><span class="p">,</span><span class="w"> </span><span class="n">socket</span><span class="o">.</span><span class="n">assigns</span><span class="o">.</span><span class="n">page</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="mi">1</span><span class="p" data-group-id="1237293553-14">)</span><span class="p" data-group-id="1237293553-13">}</span><span class="w">
  </span><span class="k" data-group-id="1237293553-12">else</span><span class="w">
    </span><span class="p" data-group-id="1237293553-15">{</span><span class="ss">:noreply</span><span class="p">,</span><span class="w"> </span><span class="n">socket</span><span class="p" data-group-id="1237293553-15">}</span><span class="w">
  </span><span class="k" data-group-id="1237293553-12">end</span><span class="w">
</span><span class="k" data-group-id="1237293553-11">end</span></code></pre><p>This code simply calls the <code class="inline">paginate_posts</code> function we defined as our first step, using the current or next page to drive the results. Notice that we match on a special <code class="inline">&quot;_overran&quot; =&gt; true</code> parameter in our <code class="inline">&quot;prev-page&quot;</code> event. The viewport events send this parameter when the user has &quot;overran&quot; the viewport top or bottom. Imagine the case where the user is scrolling back up through many pages of results, but grabs the scrollbar and returns immediately to the top of the page. This means our <code class="inline">&lt;ul id=&quot;posts&quot;&gt;</code> container was overrun by the top of the viewport, and we need to reset the the UI to page the first page.</p><p>When testing, you can use <a href="Phoenix.LiveViewTest.xhtml#render_hook/3"><code class="inline">Phoenix.LiveViewTest.render_hook/3</code></a> to test the viewport events:</p><pre><code class="makeup elixir" translate="no"><span class="n">view</span><span class="w">
</span><span class="o">|&gt;</span><span class="w"> </span><span class="n">element</span><span class="p" data-group-id="4011812446-1">(</span><span class="s">&quot;#posts&quot;</span><span class="p" data-group-id="4011812446-1">)</span><span class="w">
</span><span class="o">|&gt;</span><span class="w"> </span><span class="n">render_hook</span><span class="p" data-group-id="4011812446-2">(</span><span class="s">&quot;next-page&quot;</span><span class="p" data-group-id="4011812446-2">)</span></code></pre>

  </body>
</html>
