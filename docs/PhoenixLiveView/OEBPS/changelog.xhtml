<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"
      xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>Changelog for v1.1 - Phoenix LiveView v1.1.2</title>
    <meta name="generator" content="ExDoc v0.38.2" />
    <link type="text/css" rel="stylesheet" href="dist/epub-elixir-FNUUKFP7.css" />
    <script src="dist/epub-4WIP524F.js"></script>

  </head>
  <body class="content-inner">

    <h1 id="content">Changelog for v1.1</h1>
<h2 id="quick-update-guide">Quick update guide</h2><p>When updating from LiveView 1.0, you can also use <a href="https://hexdocs.pm/igniter">igniter</a> to perform the following changes for you:</p><pre><code class="makeup bash" translate="no"><span class="">mix igniter.upgrade phoenix_live_view
</span></code></pre><p>Note: before the final release, you need to run <code class="inline">mix igniter.apply_upgrades phoenix_live_view:1.0.0:1.1.0</code> after upgrading to the latest release candidate instead.</p><p>Here is a quick summary of the changes necessary to upgrade to LiveView v1.1:</p><ol><li><p>In your <code class="inline">mix.exs</code>, update <code class="inline">phoenix_live_view</code> to latest and add <code class="inline">lazy_html</code> as a dependency:</p><pre><code class="makeup elixir" translate="no"><span class="w"> </span><span class="p" data-group-id="7226893604-1">{</span><span class="ss">:phoenix_live_view</span><span class="p">,</span><span class="w"> </span><span class="s">&quot;~&gt; 1.1&quot;</span><span class="p" data-group-id="7226893604-1">}</span><span class="p">,</span><span class="w">
 </span><span class="p" data-group-id="7226893604-2">{</span><span class="ss">:lazy_html</span><span class="p">,</span><span class="w"> </span><span class="s">&quot;&gt;= 0.0.0&quot;</span><span class="p">,</span><span class="w"> </span><span class="ss">only</span><span class="p">:</span><span class="w"> </span><span class="ss">:test</span><span class="p" data-group-id="7226893604-2">}</span><span class="p">,</span></code></pre><p>Note you may remove <code class="inline">floki</code> as a dependency if you don't use it anywhere.</p></li><li><p>Still in your <code class="inline">mix.exs</code>, prepend <code class="inline">:phoenix_live_view</code> to your list of compilers inside <code class="inline">def project</code>, such as:</p><pre><code class="makeup elixir" translate="no"><span class="w"> </span><span class="ss">compilers</span><span class="p">:</span><span class="w"> </span><span class="p" data-group-id="0135659304-1">[</span><span class="ss">:phoenix_live_view</span><span class="p" data-group-id="0135659304-1">]</span><span class="w"> </span><span class="o">++</span><span class="w"> </span><span class="nc">Mix</span><span class="o">.</span><span class="n">compilers</span><span class="p" data-group-id="0135659304-2">(</span><span class="p" data-group-id="0135659304-2">)</span><span class="p">,</span></code></pre></li><li><p>(optional) In your <code class="inline">config/dev.exs</code>, find <code class="inline">debug_heex_annotations</code>, and also add <code class="inline">debug_attributes</code> for improved annotations:</p><pre><code class="makeup elixir" translate="no"><span class="w"> </span><span class="n">config</span><span class="w"> </span><span class="ss">:phoenix_live_view</span><span class="p">,</span><span class="w">
   </span><span class="ss">debug_heex_annotations</span><span class="p">:</span><span class="w"> </span><span class="no">true</span><span class="p">,</span><span class="w">
   </span><span class="ss">debug_attributes</span><span class="p">:</span><span class="w"> </span><span class="no">true</span><span class="p">,</span><span class="w">
   </span><span class="ss">enable_expensive_runtime_checks</span><span class="p">:</span><span class="w"> </span><span class="no">true</span></code></pre></li><li><p>(optional) To enable colocated hooks, you must update <code class="inline">esbuild</code> with <code class="inline">mix deps.update esbuild</code> and then update your <code class="inline">config/config.exs</code> accordingly. In particular, append <code class="inline">--alias:@=.</code> to the <code class="inline">args</code> list and pass a list of paths to the <code class="inline">&quot;NODE_PATH&quot;</code> env var, as shown below:</p><pre><code class="makeup elixir" translate="no"><span class="w"> </span><span class="ss">your_app_name</span><span class="p">:</span><span class="w"> </span><span class="p" data-group-id="9243849080-1">[</span><span class="w">
   </span><span class="ss">args</span><span class="p">:</span><span class="w">
     </span><span class="sx">~w(js/app.js --bundle --target=es2022 --outdir=../priv/static/assets/js --external:/fonts/* --external:/images/* --alias:@=.)</span><span class="p">,</span><span class="w">
   </span><span class="ss">env</span><span class="p">:</span><span class="w"> </span><span class="p" data-group-id="9243849080-2">%{</span><span class="s">&quot;NODE_PATH&quot;</span><span class="w"> </span><span class="p">=&gt;</span><span class="w"> </span><span class="p" data-group-id="9243849080-3">[</span><span class="nc">Path</span><span class="o">.</span><span class="n">expand</span><span class="p" data-group-id="9243849080-4">(</span><span class="s">&quot;../deps&quot;</span><span class="p">,</span><span class="w"> </span><span class="bp">__DIR__</span><span class="p" data-group-id="9243849080-4">)</span><span class="p">,</span><span class="w"> </span><span class="nc">Mix.Project</span><span class="o">.</span><span class="n">build_path</span><span class="p" data-group-id="9243849080-5">(</span><span class="p" data-group-id="9243849080-5">)</span><span class="p" data-group-id="9243849080-3">]</span><span class="p" data-group-id="9243849080-2">}</span><span class="p">,</span></code></pre></li></ol><h2 id="colocated-hooks">Colocated hooks</h2><p>LiveView v1.1 introduces colocated hooks to allow writing the hook's JavaScript code in the same file as your regular component code.</p><p>A colocated hook is defined by placing the special <code class="inline">:type</code> attribute on a <code class="inline">&lt;script&gt;</code> tag:</p><pre><code class="makeup elixir" translate="no"><span class="kn">alias</span><span class="w"> </span><span class="nc">Phoenix.LiveView.ColocatedHook</span><span class="w">

</span><span class="kd">def</span><span class="w"> </span><span class="nf">input</span><span class="p" data-group-id="5725467368-1">(</span><span class="p" data-group-id="5725467368-2">%{</span><span class="ss">type</span><span class="p">:</span><span class="w"> </span><span class="s">&quot;phone-number&quot;</span><span class="p" data-group-id="5725467368-2">}</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">assigns</span><span class="p" data-group-id="5725467368-1">)</span><span class="w"> </span><span class="k" data-group-id="5725467368-3">do</span><span class="w">
  </span><span class="sx">~H&quot;&quot;&quot;</span><span class="w">
</span><span class="w">  </span><span class="p">&lt;</span><span class="nt">input</span><span class="w"> </span><span class="na">type</span><span class="p">=</span><span class="p">&quot;</span><span class="s2">text</span><span class="p">&quot;</span><span class="w"> </span><span class="na">name</span><span class="p">=</span><span class="p" data-group-id="6293034030-1">{</span><span class="na">@name</span><span class="p" data-group-id="6293034030-1">}</span><span class="w"> </span><span class="na">id</span><span class="p">=</span><span class="p" data-group-id="6293034030-2">{</span><span class="na">@id</span><span class="p" data-group-id="6293034030-2">}</span><span class="w"> </span><span class="na">value</span><span class="p">=</span><span class="p" data-group-id="6293034030-3">{</span><span class="na">@value</span><span class="p" data-group-id="6293034030-3">}</span><span class="w"> </span><span class="na">phx-hook</span><span class="p">=</span><span class="p">&quot;</span><span class="s2">.PhoneNumber</span><span class="p">&quot;</span><span class="w"> </span><span class="p">/&gt;</span><span class="w">
</span><span class="w">  </span><span class="p">&lt;</span><span class="nt">script</span><span class="w"> </span><span class="na">:type</span><span class="p">=</span><span class="p" data-group-id="6293034030-4">{</span><span class="nc">ColocatedHook</span><span class="p" data-group-id="6293034030-4">}</span><span class="w"> </span><span class="na">name</span><span class="p">=</span><span class="p">&quot;</span><span class="s2">.PhoneNumber</span><span class="p">&quot;</span><span class="p">&gt;</span><span class="w">
</span><span class="w">    </span><span class="o">export</span><span class="w"> </span><span class="k">default</span><span class="w"> </span><span class="p" data-group-id="6293034030-5">{</span><span class="w">
      </span><span class="n">mounted</span><span class="p" data-group-id="5725467368-4">(</span><span class="p" data-group-id="5725467368-4">)</span><span class="w"> </span><span class="p" data-group-id="5725467368-5">{</span><span class="w">
        </span><span class="n">this</span><span class="o">.</span><span class="n">el</span><span class="o">.</span><span class="n">addEventListener</span><span class="p" data-group-id="5725467368-6">(</span><span class="s">&quot;input&quot;</span><span class="p">,</span><span class="w"> </span><span class="n">e</span><span class="w"> </span><span class="p">=&gt;</span><span class="w"> </span><span class="p" data-group-id="5725467368-7">{</span><span class="w">
          </span><span class="n">let</span><span class="w"> </span><span class="n">match</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">this</span><span class="o">.</span><span class="n">el</span><span class="o">.</span><span class="n">value</span><span class="o">.</span><span class="n">replace</span><span class="p" data-group-id="5725467368-8">(</span><span class="o">/</span><span class="err">\</span><span class="nc">D</span><span class="o">/</span><span class="n">g</span><span class="p">,</span><span class="w"> </span><span class="s">&quot;&quot;</span><span class="p" data-group-id="5725467368-8">)</span><span class="o">.</span><span class="n">match</span><span class="p" data-group-id="5725467368-9">(</span><span class="o">/</span><span class="o">^</span><span class="p" data-group-id="5725467368-10">(</span><span class="err">\</span><span class="n">d</span><span class="p" data-group-id="5725467368-11">{</span><span class="mi">3</span><span class="p" data-group-id="5725467368-11">}</span><span class="p" data-group-id="5725467368-10">)</span><span class="p" data-group-id="5725467368-12">(</span><span class="err">\</span><span class="n">d</span><span class="p" data-group-id="5725467368-13">{</span><span class="mi">3</span><span class="p" data-group-id="5725467368-13">}</span><span class="p" data-group-id="5725467368-12">)</span><span class="p" data-group-id="5725467368-14">(</span><span class="err">\</span><span class="n">d</span><span class="p" data-group-id="5725467368-15">{</span><span class="mi">4</span><span class="p" data-group-id="5725467368-15">}</span><span class="p" data-group-id="5725467368-14">)</span><span class="err">$</span><span class="o">/</span><span class="p" data-group-id="5725467368-9">)</span><span class="w">
          </span><span class="k">if</span><span class="p" data-group-id="5725467368-16">(</span><span class="n">match</span><span class="p" data-group-id="5725467368-16">)</span><span class="w"> </span><span class="p" data-group-id="5725467368-17">{</span><span class="w">
            </span><span class="n">this</span><span class="o">.</span><span class="n">el</span><span class="o">.</span><span class="n">value</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="err">`</span><span class="err">$</span><span class="p" data-group-id="5725467368-18">{</span><span class="n">match</span><span class="p" data-group-id="5725467368-19">[</span><span class="mi">1</span><span class="p" data-group-id="5725467368-19">]</span><span class="p" data-group-id="5725467368-18">}</span><span class="o">-</span><span class="err">$</span><span class="p" data-group-id="5725467368-20">{</span><span class="n">match</span><span class="p" data-group-id="5725467368-21">[</span><span class="mi">2</span><span class="p" data-group-id="5725467368-21">]</span><span class="p" data-group-id="5725467368-20">}</span><span class="o">-</span><span class="err">$</span><span class="p" data-group-id="5725467368-22">{</span><span class="n">match</span><span class="p" data-group-id="5725467368-23">[</span><span class="mi">3</span><span class="p" data-group-id="5725467368-23">]</span><span class="p" data-group-id="5725467368-22">}</span><span class="err">`</span><span class="w">
          </span><span class="p" data-group-id="5725467368-17">}</span><span class="w">
        </span><span class="p" data-group-id="5725467368-7">}</span><span class="p" data-group-id="5725467368-6">)</span><span class="w">
      </span><span class="p" data-group-id="5725467368-5">}</span><span class="w">
    </span><span class="p" data-group-id="6293034030-5">}</span><span class="w">
</span><span class="w">  </span><span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span><span class="w">
</span><span class="w">  </span><span class="sx">&quot;&quot;&quot;</span><span class="w">
</span><span class="k" data-group-id="5725467368-3">end</span></code></pre><p>Important: LiveView now supports the <code class="inline">phx-hook</code> attribute to start with a dot (<code class="inline">.PhoneNumber</code> above) for namespacing. Any hook name starting with a dot is prefixed at compile time with the module name of the component. If you named your hooks with a leading dot in the past, you'll need to adjust this for your hooks to work properly on LiveView v1.1.</p><p>Colocated hooks are extracted to a <code class="inline">phoenix-colocated</code> folder inside your <code class="inline">_build/$MIX_ENV</code> directory (<code class="inline">Mix.Project.build_path()</code>). See the quick update section at the top of the changelog on how to adjust your <code class="inline">esbuild</code> configuration to handle this. With everything configured, you can import your colocated hooks inside of your <code class="inline">app.js</code> like this:</p><pre><code class="makeup diff" translate="no"><span class="n">...
</span><span class="n">  import {LiveSocket} from &quot;phoenix_live_view&quot;
</span><span class="gi">+</span><span class="gi"> import {hooks as colocatedHooks} from &quot;phoenix-colocated/my_app&quot;
</span><span class="n">  import topbar from &quot;../vendor/topbar&quot;
</span><span class="n">...
</span><span class="n">  const liveSocket = new LiveSocket(&quot;/live&quot;, Socket, {
</span><span class="n">    longPollFallbackMs: 2500,
</span><span class="n">    params: {_csrf_token: csrfToken},
</span><span class="gi">+</span><span class="gi">   hooks: {...colocatedHooks}
</span><span class="n">  })</span></code></pre><p>The <code class="inline">phoenix-colocated</code> folder has subfolders for each application that uses colocated hooks, therefore you'll need to adjust the <code class="inline">my_app</code> part of the import depending on the name of your project (defined in your <code class="inline">mix.exs</code>). You can read more about colocated hooks in the module documentation of <a href="Phoenix.LiveView.ColocatedHook.xhtml"><code class="inline">Phoenix.LiveView.ColocatedHook</code></a>. There's also a more generalized version for colocated JavaScript, see the documentation for <a href="Phoenix.LiveView.ColocatedJS.xhtml"><code class="inline">Phoenix.LiveView.ColocatedJS</code></a>.</p><p>We're planning to make the private <code class="inline">Phoenix.Component.MacroComponent</code> API that we use for those features public in a future release.</p><p>Note: Colocated hooks require Phoenix 1.8+.</p><section role="note" class="admonition info"><h4 class="admonition-title info">Compilation order</h4><p>Colocated hooks are only written when the corresponding component is compiled.
Therefore, whenever you need to access a colocated hook, you need to ensure
<a href="https://hexdocs.pm/mix/Mix.Tasks.Compile.html"><code class="inline">mix compile</code></a> runs first. This automatically happens in development.</p><p>If you have a custom mix alias, instead of</p><pre><code class="makeup elixir" translate="no"><span class="ss">release</span><span class="p">:</span><span class="w"> </span><span class="p" data-group-id="6346155772-1">[</span><span class="s">&quot;assets.deploy&quot;</span><span class="p">,</span><span class="w"> </span><span class="s">&quot;release&quot;</span><span class="p" data-group-id="6346155772-1">]</span></code></pre><p>do</p><pre><code class="makeup elixir" translate="no"><span class="ss">release</span><span class="p">:</span><span class="w"> </span><span class="p" data-group-id="4782897486-1">[</span><span class="s">&quot;compile&quot;</span><span class="p">,</span><span class="w"> </span><span class="s">&quot;assets.deploy&quot;</span><span class="p">,</span><span class="w"> </span><span class="s">&quot;release&quot;</span><span class="p" data-group-id="4782897486-1">]</span></code></pre><p>to ensure that all colocated hooks are extracted before esbuild or any other bundler runs.</p><p>If you have a <code class="inline">Dockerfile</code> based on <code class="inline">mix phx.gen.release --docker</code>, ensure that <a href="https://hexdocs.pm/mix/Mix.Tasks.Compile.html"><code class="inline">mix compile</code></a> runs before <code class="inline">mix assets.deploy</code>.</p></section><h2 id="change-tracking-in-comprehensions">Change tracking in comprehensions</h2><p>One pitfall when rendering collections in LiveView was that they were not change tracked. If you had code like this:</p><pre><code class="makeup heex" translate="no"><span class="p">&lt;</span><span class="nt">ul</span><span class="p">&gt;</span><span class="w">
</span><span class="w">  </span><span class="p">&lt;</span><span class="nt">li</span><span class="w"> </span><span class="na">:for</span><span class="p">=</span><span class="p" data-group-id="5981803386-1">{</span><span class="n">item</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="na">@items</span><span class="p" data-group-id="5981803386-1">}</span><span class="p">&gt;</span><span class="p" data-group-id="5981803386-2">{</span><span class="n">item</span><span class="o">.</span><span class="n">name</span><span class="p" data-group-id="5981803386-2">}</span><span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span><span class="w">
</span><span class="p">&lt;/</span><span class="nt">ul</span><span class="p">&gt;</span></code></pre><p>When changing <code class="inline">@items</code>, all elements were re-sent over the wire. LiveView still optimized the static and dynamic parts of the template, but if you had 100 items in your list and only changed a single one (also applies to append, prepend, etc.), LiveView still sent the dynamic parts of all items.</p><p>To improve this, LiveView prior to v1.1 had two solutions:</p><ol><li>Use streams. Streams are not kept in memory on the server and if you <code class="inline">stream_insert</code> a single item, only that item is sent over the wire. But because the server does not keep any state for streams, this also means that if you update an item in a stream, all the dynamic parts of the updated item are sent again.</li><li>Use a LiveComponent for each entry. LiveComponents perform change tracking on their own assigns. So when you update a single item, LiveView only sends a list of component IDs and the changed parts for that item.</li></ol><p>So LiveComponents allow for more granular diffs and also a more declarative approach than streams, but require more memory on the server. Thus, when memory usage is a concern, especially for very large collections, streams should be your first choice. Another downside of LiveComponents is that they require you to write a whole separate module just to get an optimized diff.</p><p>LiveView v1.1 changes how comprehensions are handled to enable change tracking by default. If you only change a single item in a list, only its changes are sent. To do this, LiveView uses an element's index to track changes. This means that if you prepend an entry in a list, all items after the new one will be sent again. To improve this even further, LiveView v1.1 introduces a new <code class="inline">:key</code> attribute that can be used with <code class="inline">:for</code>:</p><pre><code class="makeup heex" translate="no"><span class="p">&lt;</span><span class="nt">ul</span><span class="p">&gt;</span><span class="w">
</span><span class="w">  </span><span class="p">&lt;</span><span class="nt">li</span><span class="w"> </span><span class="na">:for</span><span class="p">=</span><span class="p" data-group-id="8044877695-1">{</span><span class="n">item</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="na">@items</span><span class="p" data-group-id="8044877695-1">}</span><span class="w"> </span><span class="na">:key</span><span class="p">=</span><span class="p" data-group-id="8044877695-2">{</span><span class="n">item</span><span class="o">.</span><span class="n">id</span><span class="p" data-group-id="8044877695-2">}</span><span class="p">&gt;</span><span class="p" data-group-id="8044877695-3">{</span><span class="n">item</span><span class="o">.</span><span class="n">name</span><span class="p" data-group-id="8044877695-3">}</span><span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span><span class="w">
</span><span class="p">&lt;/</span><span class="nt">ul</span><span class="p">&gt;</span></code></pre><p>LiveView uses the key to efficiently calculate a diff that only contains the new indexes of moved items. Change tracking in comprehensions comes with a slightly increased memory footprint. If memory is a concern, you should think about using streams.</p><h2 id="types-for-public-interfaces">Types for public interfaces</h2><p>LiveView v1.1 adds official types to the JavaScript client. This allows IntelliSense to work in editors that support it and is a massive improvement to the user experience when writing JavaScript hooks. If you're not using TypeScript, you can also add the necessary JSDoc hints to your hook definitions, assuming your editor supports them.</p><p>Example when defining a hook object that is meant to be passed to the <code class="inline">LiveSocket</code> constructor:</p><pre><code class="makeup javascript" translate="no"><span class="sd">/**</span><span class="w">
</span><span class="w"> </span><span class="sd">*</span><span class="sd"> @type {import(&quot;phoenix_live_view&quot;).HooksOptions}
</span><span class="w"> </span><span class="sd">*/</span><span class="w">
</span><span class="kt">let</span><span class="w"> </span><span class="no">Hooks</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="p">}</span><span class="w">
</span><span class="bp">Hooks</span><span class="p">.</span><span class="n">PhoneNumber</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">  </span><span class="nf">mounted</span><span class="p">(</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="nb">this</span><span class="p">.</span><span class="n">el</span><span class="p">.</span><span class="nf">addEventListener</span><span class="p">(</span><span class="p">&quot;</span><span class="s2">input</span><span class="p">&quot;</span><span class="p">,</span><span class="w"> </span><span class="nv">e</span><span class="w"> </span><span class="kt">=&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">      </span><span class="kt">let</span><span class="w"> </span><span class="nv">match</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nb">this</span><span class="p">.</span><span class="n">el</span><span class="p">.</span><span class="n">value</span><span class="p">.</span><span class="nf">replace</span><span class="p">(</span><span class="p">/</span><span class="no">\D</span><span class="p">/</span><span class="k">g</span><span class="p">,</span><span class="w"> </span><span class="p">&quot;</span><span class="p">&quot;</span><span class="p">)</span><span class="p">.</span><span class="nf">match</span><span class="p">(</span><span class="p">/</span><span class="k">^</span><span class="p">(</span><span class="no">\d</span><span class="o">{</span><span class="m">3</span><span class="o">}</span><span class="p">)</span><span class="p">(</span><span class="no">\d</span><span class="o">{</span><span class="m">3</span><span class="o">}</span><span class="p">)</span><span class="p">(</span><span class="no">\d</span><span class="o">{</span><span class="m">4</span><span class="o">}</span><span class="p">)</span><span class="k">$</span><span class="p">/</span><span class="p">)</span><span class="w">
</span><span class="w">      </span><span class="k">if</span><span class="p">(</span><span class="nv">match</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="nb">this</span><span class="p">.</span><span class="n">el</span><span class="p">.</span><span class="n">value</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">`</span><span class="si">${</span><span class="nv">match</span><span class="si">[</span><span class="mi">1</span><span class="si">]</span><span class="si">}</span><span class="s">-</span><span class="si">${</span><span class="nv">match</span><span class="si">[</span><span class="mi">2</span><span class="si">]</span><span class="si">}</span><span class="s">-</span><span class="si">${</span><span class="nv">match</span><span class="si">[</span><span class="mi">3</span><span class="si">]</span><span class="si">}</span><span class="p">`</span><span class="w">
</span><span class="w">      </span><span class="p">}</span><span class="w">
</span><span class="w">    </span><span class="p">}</span><span class="p">)</span><span class="w">
</span><span class="w">  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="kt">let</span><span class="w"> </span><span class="nv">liveSocket</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="ow">new</span><span class="w"> </span><span class="nv">LiveSocket</span><span class="p">(</span><span class="p">&quot;</span><span class="s2">/live</span><span class="p">&quot;</span><span class="p">,</span><span class="w"> </span><span class="no">Socket</span><span class="p">,</span><span class="w"> </span><span class="p">{</span><span class="n">hooks</span><span class="p">:</span><span class="w"> </span><span class="no">Hooks</span><span class="p">,</span><span class="w"> </span><span class="o">...</span><span class="p">}</span><span class="p">)</span><span class="w">
</span><span class="p">.</span><span class="p">.</span><span class="p">.</span></code></pre><p>Example when defining a hook on its own:</p><pre><code class="makeup javascript" translate="no"><span class="sd">/**</span><span class="w">
</span><span class="w"> </span><span class="sd">*</span><span class="sd"> @type {import(&quot;phoenix_live_view&quot;).Hook}
</span><span class="w"> </span><span class="sd">*/</span><span class="w">
</span><span class="bp">Hooks</span><span class="p">.</span><span class="n">InfiniteScroll</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">  </span><span class="nf">page</span><span class="p">(</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="k">return</span><span class="w"> </span><span class="nb">this</span><span class="p">.</span><span class="n">el</span><span class="p">.</span><span class="n">dataset</span><span class="p">.</span><span class="n">page</span><span class="w"> </span><span class="p">}</span><span class="p">,</span><span class="w">
</span><span class="w">  </span><span class="nf">mounted</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="nb">this</span><span class="p">.</span><span class="n">pending</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nb">this</span><span class="p">.</span><span class="nf">page</span><span class="p">(</span><span class="p">)</span><span class="w">
</span><span class="w">    </span><span class="nb">window</span><span class="p">.</span><span class="nf">addEventListener</span><span class="p">(</span><span class="p">&quot;</span><span class="s2">scroll</span><span class="p">&quot;</span><span class="p">,</span><span class="w"> </span><span class="nv">e</span><span class="w"> </span><span class="kt">=&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">      </span><span class="k">if</span><span class="p">(</span><span class="nb">this</span><span class="p">.</span><span class="n">pending</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="nb">this</span><span class="p">.</span><span class="nf">page</span><span class="p">(</span><span class="p">)</span><span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span><span class="nf">scrollAt</span><span class="p">(</span><span class="p">)</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="mi">90</span><span class="p">)</span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="nb">this</span><span class="p">.</span><span class="n">pending</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nb">this</span><span class="p">.</span><span class="nf">page</span><span class="p">(</span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="mi">1</span><span class="w">
</span><span class="w">        </span><span class="nb">this</span><span class="p">.</span><span class="nf">pushEvent</span><span class="p">(</span><span class="p">&quot;</span><span class="s2">load-more</span><span class="p">&quot;</span><span class="p">,</span><span class="w"> </span><span class="p">{</span><span class="p">}</span><span class="p">)</span><span class="w">
</span><span class="w">      </span><span class="p">}</span><span class="w">
</span><span class="w">    </span><span class="p">}</span><span class="p">)</span><span class="w">
</span><span class="w">  </span><span class="p">}</span><span class="p">,</span><span class="w">
</span><span class="w">  </span><span class="nf">updated</span><span class="p">(</span><span class="p">)</span><span class="p">{</span><span class="w"> </span><span class="nb">this</span><span class="p">.</span><span class="n">pending</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nb">this</span><span class="p">.</span><span class="nf">page</span><span class="p">(</span><span class="p">)</span><span class="w"> </span><span class="p">}</span><span class="w">
</span><span class="p">}</span></code></pre><p>Also, hooks can now be defined as a subclass of <code class="inline">ViewHook</code>, if you prefer <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/class">native classes</a>:</p><pre><code class="makeup javascript" translate="no"><span class="k">import</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="nv">LiveSocket</span><span class="p">,</span><span class="w"> </span><span class="nv">ViewHook</span><span class="w"> </span><span class="p">}</span><span class="w"> </span><span class="k">from</span><span class="w"> </span><span class="p">&quot;</span><span class="s2">phoenix_live_view</span><span class="p">&quot;</span><span class="w">
</span><span class="w">
</span><span class="kt">class</span><span class="w"> </span><span class="nc">MyHook</span><span class="w"> </span><span class="kd">extends</span><span class="w"> </span><span class="ni">ViewHook</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">  </span><span class="nf">mounted</span><span class="p">(</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="o">...</span><span class="w">
</span><span class="w">  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="kt">let</span><span class="w"> </span><span class="nv">liveSocket</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="ow">new</span><span class="w"> </span><span class="nv">LiveSocket</span><span class="p">(</span><span class="o">...</span><span class="p">,</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">  </span><span class="n">hooks</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="nv">MyHook</span><span class="w">
</span><span class="w">  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="p">)</span></code></pre><p>Using <a href="https://www.npmjs.com/package/@types/phoenix_live_view"><code class="inline">@types/phoenix_live_view</code></a> (not maintained by the Phoenix team) is no longer necessary.</p><h2 id="portal-component"><code class="inline">&lt;.portal&gt;</code> component</h2><p>When designing reusable HTML components for UI elements like tooltips or dialogs, it is sometimes necessary to render a part of a component's template outside of the regular DOM hierarchy of that component, for example to prevent clipping due to CSS rules like <code class="inline">overflow: hidden</code> that are not controlled by the component itself. Modern browser APIs for rendering elements in <a href="https://developer.mozilla.org/en-US/docs/Glossary/Top_layer">the top layer</a> can help in many cases, but if you cannot use those for whatever reasons, LiveView previously did not have a solution to solve that problem. In LiveView v1.1, we introduce a new <a href="Phoenix.Component.xhtml#portal/1"><code class="inline">Phoenix.Component.portal/1</code></a> component:</p><pre><code class="makeup heex" translate="no"><span class="c">&lt;%!-- in some nested LiveView or component --%&gt;</span><span class="w">
</span><span class="p">&lt;</span><span class="nf">.portal</span><span class="w"> </span><span class="na">id</span><span class="p">=</span><span class="p">&quot;</span><span class="s2">m</span><span class="s2">y</span><span class="s2">-</span><span class="s2">e</span><span class="s2">l</span><span class="s2">e</span><span class="s2">m</span><span class="s2">e</span><span class="s2">n</span><span class="s2">t</span><span class="p">&quot;</span><span class="w"> </span><span class="na">target</span><span class="p">=</span><span class="p">&quot;</span><span class="s2">body</span><span class="p">&quot;</span><span class="p">&gt;</span><span class="w">
</span><span class="w">  </span><span class="c">&lt;%!-- any content here will be teleported into the body tag --%&gt;</span><span class="w">
</span><span class="p">&lt;/</span><span class="nf">.portal</span><span class="p">&gt;</span></code></pre><p>Any element can be teleported, even LiveComponents and nested LiveViews, and any <code class="inline">phx-*</code> events from inside a portal will still be handled by the correct LiveView. This is similar to <a href="https://vuejs.org/guide/built-ins/teleport"><code class="inline">&lt;Teleport&gt;</code> in Vue.js</a> or <a href="https://react.dev/reference/react-dom/createPortal"><code class="inline">createPortal</code> in React</a>.</p><p>As a demo, we created <a href="https://gist.github.com/SteffenDE/f599405c7c2eddbb14723ed4f3b7213f">an example for implementing tooltips using <code class="inline">Phoenix.Component.portal</code></a> as a single-file Elixir script. When saved as <code class="inline">portal.exs</code>, you can execute it as <code class="inline">elixir portal.exs</code> and visit <code class="inline">http://localhost:5001</code> in your browser.</p><h2 id="js-ignore_attributes"><code class="inline">JS.ignore_attributes</code></h2><p>Sometimes it is useful to prevent some attributes from being patched by LiveView. One example where this frequently came up is when using a native <code class="inline">&lt;dialog&gt;</code> or <code class="inline">&lt;details&gt;</code> element that is controlled by the <code class="inline">open</code> attribute, which is special in that it is actually set (and removed) by the browser. Previously, LiveView would remove those attributes on update and required additional patching, now you can simply call <code class="inline">JS.ignore_attributes</code> in the <code class="inline">phx-mounted</code> attribute:</p><pre><code class="makeup heex" translate="no"><span class="p">&lt;</span><span class="nt">details</span><span class="w"> </span><span class="na">phx-mounted</span><span class="p">=</span><span class="p" data-group-id="8738210994-1">{</span><span class="nc">JS</span><span class="o">.</span><span class="n">ignore_attributes</span><span class="p" data-group-id="8738210994-ex-1">(</span><span class="p" data-group-id="8738210994-ex-2">[</span><span class="s">&quot;open&quot;</span><span class="p" data-group-id="8738210994-ex-2">]</span><span class="p" data-group-id="8738210994-ex-1">)</span><span class="p" data-group-id="8738210994-1">}</span><span class="p">&gt;</span><span class="w">
</span><span class="w">  </span><span class="p">&lt;</span><span class="nt">summary</span><span class="p">&gt;</span><span class="n">...</span><span class="p">&lt;/</span><span class="nt">summary</span><span class="p">&gt;</span><span class="w">
</span><span class="n">  ...
</span><span class="p">&lt;/</span><span class="nt">details</span><span class="p">&gt;</span></code></pre><h2 id="moving-from-floki-to-lazyhtml">Moving from Floki to LazyHTML</h2><p>LiveView v1.1 moves to <a href="https://hexdocs.pm/lazy_html/">LazyHTML</a> as the HTML engine used by <code class="inline">LiveViewTest</code>. LazyHTML is based on <a href="https://github.com/lexbor/lexbor">lexbor</a> and allows the use of modern CSS selector features, like <code class="inline">:is()</code>, <code class="inline">:has()</code>, etc. to target elements. Lexbor's stated goal is to create output that &quot;should match that of modern browsers, meeting industry specifications&quot;.</p><p>This is a mostly backwards compatible change. The only way in which this affects LiveView projects is when using Floki specific selectors (<code class="inline">fl-contains</code>, <code class="inline">fl-icontains</code>), which will not work any more in selectors passed to LiveViewTest's <a href="https://hexdocs.pm/phoenix_live_view/Phoenix.LiveViewTest.html#element/3"><code class="inline">element/3</code></a> function. In most cases, the <code class="inline">text_filter</code> option of <a href="https://hexdocs.pm/phoenix_live_view/Phoenix.LiveViewTest.html#element/3"><code class="inline">element/3</code></a> should be a sufficient replacement, which has been available since LiveView v0.12.</p><p>Note that in Phoenix versions prior to v1.8, the <code class="inline">phx.gen.auth</code> generator used the Floki specific <code class="inline">fl-contains</code> selector in its generated tests in two instances, so if you used the <code class="inline">phx.gen.auth</code> generator to scaffold your authentication solution, those tests will need to be adjusted when updating to LiveView v1.1. In both cases, changing to use the <code class="inline">text_filter</code> option is enough to get you going again:</p><pre><code class="makeup diff" translate="no"><span class="n"> {:ok, _login_live, login_html} =
</span><span class="n">   lv
</span><span class="gd">-</span><span class="gd">  |&gt; element(~s|main a:fl-contains(&quot;Sign up&quot;)|)
</span><span class="gi">+</span><span class="gi">  |&gt; element(&quot;main a&quot;, &quot;Sign up&quot;)
</span><span class="n">   |&gt; render_click()
</span><span class="n">   |&gt; follow_redirect(conn, ~p&quot;&lt;%= schema.route_prefix %&gt;/register&quot;)</span></code></pre><p>If you're using Floki itself in your tests through its API (<code class="inline">Floki.parse_document</code>, <code class="inline">Floki.find</code>, etc.), you are not required to rewrite them when you update to LiveView v1.1.</p><h2 id="slot-and-line-annotations">Slot and line annotations</h2><p>When <code class="inline">:debug_heex_annotations</code> is enabled, LiveView will now annotate the beginning and end of each slot. A new <code class="inline">:debug_attributes</code> option has also been added, which adds the starting line of each tag as a <code class="inline">data-phx-loc</code> attribute. It also adds the LiveView PID to the root element of each LiveView. The goal is to provide more precise information to tools.</p><p>To enable this, a new callback called <code class="inline">annotate_slot/4</code> was added. Custom implementations of <a href="Phoenix.LiveView.TagEngine.xhtml"><code class="inline">Phoenix.LiveView.TagEngine</code></a> must implement it accordingly.</p><h2 id="v1-1-2-2025-07-31">v1.1.2 (2025-07-31)</h2><h3 id="bug-fixes">Bug fixes</h3><ul><li>Fix invalid component rendering when using dynamic assigns (<code class="inline">&lt;.my_component {...}&gt;</code>) in rare circumstances by
disabling change tracking. LiveView cannot properly track changes in those cases and this could lead to weird bugs (<a href="https://github.com/phoenixframework/phoenix_live_view/issues/3919">#3919</a>)
that were now more likely to surface with change tracked comprehensions.</li><li>Fix <code class="inline">LiveViewTest</code> not considering some LiveViews as main when using <code class="inline">live_render</code> (<a href="https://github.com/phoenixframework/phoenix_live_view/issues/3917">#3917</a>)</li><li>Fix JavaScript type definitions not being considered when using TypeScript in <code class="inline">bundler</code> resolution mode (<a href="https://github.com/phoenixframework/phoenix_live_view/pull/3915">#3915</a>)</li></ul><h2 id="v1-1-1-2025-07-30">v1.1.1 (2025-07-30)</h2><h3 id="bug-fixes-1">Bug fixes</h3><ul><li>Fix <code class="inline">key will be overridden in map</code> warning (<a href="https://github.com/phoenixframework/phoenix_live_view/issues/3912">#3912</a>)</li></ul><h2 id="v1-1-0-2025-07-30">v1.1.0 (2025-07-30) 🚀</h2><h3 id="bug-fixes-2">Bug fixes</h3><ul><li>Ensure nested variable access is properly change tracked in components (<a href="https://github.com/phoenixframework/phoenix_live_view/pull/3908">#3908</a>)</li></ul><h2 id="v1-1-0-rc-4-2025-07-22">v1.1.0-rc.4 (2025-07-22)</h2><h3 id="enhancements">Enhancements</h3><ul><li>Rename <code class="inline">debug_tags_location</code> to <code class="inline">debug_attributes</code> and add <code class="inline">data-phx-pid</code> (<a href="https://github.com/phoenixframework/phoenix_live_view/pull/3898">#3898</a>)</li><li>Simplify code generated for slots in HEEx when the slot does not contain any dynamic code (<a href="https://github.com/phoenixframework/phoenix_live_view/pull/3902">#3902</a>)</li></ul><h3 id="bug-fixes-3">Bug fixes</h3><ul><li>Prevent <code class="inline">focus_wrap</code> from focusing the last element instead of the first on Firefox in rare cases (<a href="https://github.com/phoenixframework/phoenix_live_view/pull/3895">#3895</a>)</li><li>Ensure comprehension entries perform a full render when change tracking is disabled (<a href="https://github.com/phoenixframework/phoenix_live_view/pull/3904">#3904</a>)</li></ul><h2 id="v1-1-0-rc-3-2025-07-15">v1.1.0-rc.3 (2025-07-15)</h2><h3 id="enhancements-1">Enhancements</h3><ul><li>Add <a href="https://hexdocs.pm/igniter">igniter</a> upgrader for LiveView 1.0 to 1.1: <code class="inline">mix igniter.upgrade phoenix_live_view@1.1.0-rc.3</code> (<a href="https://github.com/phoenixframework/phoenix_live_view/pull/3889">#3889</a>)<ul><li>Note: before the final release, the actual upgrade requires a separate <code class="inline">mix igniter.apply_upgrades phoenix_live_view:1.0.0:1.1.0</code> after updating the dependency</li></ul></li><li>Allow <code class="inline">ColocatedHook</code>s to work at the root of a LiveComponent (<a href="https://github.com/phoenixframework/phoenix_live_view/pull/3882">#3882</a>)</li><li>Use <code class="inline">&quot;on&quot;</code> as default value for checkboxes in LiveViewTest (<a href="https://github.com/phoenixframework/phoenix_live_view/pull/3886">#3886</a>)</li><li>Raise when using <code class="inline">ColocatedHook</code> / <code class="inline">ColocatedJS</code> on an unsupported Phoenix version</li></ul><h2 id="v1-1-0-rc-2-2025-07-05">v1.1.0-rc.2 (2025-07-05)</h2><h3 id="enhancements-2">Enhancements</h3><ul><li>Allow omitting the <code class="inline">name</code> attribute when using <a href="Phoenix.LiveView.ColocatedJS.xhtml"><code class="inline">Phoenix.LiveView.ColocatedJS</code></a> (<a href="https://github.com/phoenixframework/phoenix_live_view/pull/3860">#3860</a>)</li><li>Add change tracking in comprehensions by default; <code class="inline">:key</code> does not use LiveComponents anymore which allows it to be used on components and improves payload sizes (<a href="https://github.com/phoenixframework/phoenix_live_view/pull/3865">#3865</a>)</li></ul><h3 id="bug-fixes-4">Bug fixes</h3><ul><li>Fix <a href="Phoenix.LiveView.Debug.xhtml#live_components/1"><code class="inline">Phoenix.LiveView.Debug.live_components/1</code></a> raising instead of returning an error tuple (<a href="https://github.com/phoenixframework/phoenix_live_view/pull/3861">#3861</a>)</li></ul><h2 id="v1-1-0-rc-1-2025-06-20">v1.1.0-rc.1 (2025-06-20)</h2><h3 id="bug-fixes-5">Bug fixes</h3><ul><li>Fix variable tainting which could cause some template parts to not be re-rendered (<a href="https://github.com/phoenixframework/phoenix_live_view/pull/3856">#3856</a>).</li></ul><h2 id="v1-1-0-rc-0-2025-06-17">v1.1.0-rc.0 (2025-06-17)</h2><h3 id="enhancements-3">Enhancements</h3><ul><li>Add type annotations to all public JavaScript APIs (<a href="https://github.com/phoenixframework/phoenix_live_view/pull/3789">#3789</a>)</li><li>Add <a href="Phoenix.LiveView.JS.xhtml#ignore_attributes/1"><code class="inline">Phoenix.LiveView.JS.ignore_attributes/1</code></a> to allow marking specific attributes to be ignored when LiveView patches an element (<a href="https://github.com/phoenixframework/phoenix_live_view/pull/3765">#3765</a>)</li><li>Add <a href="Phoenix.LiveView.Debug.xhtml"><code class="inline">Phoenix.LiveView.Debug</code></a> module with functions for inspecting LiveViews at runtime (<a href="https://github.com/phoenixframework/phoenix_live_view/pull/3776">#3776</a>)</li><li>Add <a href="Phoenix.LiveView.ColocatedHook.xhtml"><code class="inline">Phoenix.LiveView.ColocatedHook</code></a> and <a href="Phoenix.LiveView.ColocatedJS.xhtml"><code class="inline">Phoenix.LiveView.ColocatedJS</code></a> (<a href="https://github.com/phoenixframework/phoenix_live_view/pull/3810">#3810</a>)</li><li>Add <code class="inline">:update_only</code> option to <a href="Phoenix.LiveView.xhtml#stream_insert/4"><code class="inline">Phoenix.LiveView.stream_insert/4</code></a> (<a href="https://github.com/phoenixframework/phoenix_live_view/pull/3573">#3573</a>)</li><li>Use <a href="https://hexdocs.pm/lazy_html/"><code class="inline">LazyHTML</code></a> instead of <code class="inline">Floki</code> internally for LiveViewTest</li><li>Normalize whitespace in LiveViewTest's text filters (<a href="https://github.com/phoenixframework/phoenix_live_view/pull/3621">#3621</a>)</li><li>Raise by default when LiveViewTest detects duplicate DOM or LiveComponent IDs. This can be changed by passing <code class="inline">on_error</code> to <a href="Phoenix.LiveViewTest.xhtml#live/3"><code class="inline">Phoenix.LiveViewTest.live/3</code></a> / <a href="Phoenix.LiveViewTest.xhtml#live_isolated/3"><code class="inline">Phoenix.LiveViewTest.live_isolated/3</code></a></li><li>Raise an exception when trying to bind a single DOM element to multiple views (this could happen when accidentally loading your app.js twice) (<a href="https://github.com/phoenixframework/phoenix_live_view/pull/3805">#3805</a>)</li><li>Ensure promise rejections include stack traces (<a href="https://github.com/phoenixframework/phoenix_live_view/pull/3738">#3738</a>)</li><li>Treat form associated custom elements as form inputs (<a href="https://github.com/phoenixframework/phoenix_live_view/pull/3823">3823</a>)</li><li>Add <code class="inline">:inline_matcher</code> option to <a href="Phoenix.LiveView.HTMLFormatter.xhtml"><code class="inline">Phoenix.LiveView.HTMLFormatter</code></a> which can be configured as a list of strings and regular expressions to match against tag names to treat them as inline (<a href="https://github.com/phoenixframework/phoenix_live_view/pull/3795">#3795</a>)</li></ul><h2 id="v1-0">v1.0</h2><p>The CHANGELOG for v1.0 and earlier releases can be found in the <a href="https://github.com/phoenixframework/phoenix_live_view/blob/v1.0/CHANGELOG.md">v1.0 branch</a>.</p>

  </body>
</html>
