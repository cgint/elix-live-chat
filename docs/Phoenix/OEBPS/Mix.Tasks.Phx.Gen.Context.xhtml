<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"
      xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>mix phx.gen.context - Phoenix v1.7.21</title>
    <meta name="generator" content="ExDoc v0.37.3" />
    <link type="text/css" rel="stylesheet" href="dist/epub-elixir-FNUUKFP7.css" />
    <script src="dist/epub-4WIP524F.js"></script>

  </head>
  <body class="content-inner">

    <h1 id="content">
mix phx.gen.context 
    </h1>


      <section id="moduledoc" class="docstring">
<p>Generates a context with functions around an Ecto schema.</p><pre><code class="makeup shell" translate="no"><samp class="gp unselectable">$ </samp><samp class="">mix phx.gen.context Accounts User users name:string age:integer
</samp></code></pre><p>The first argument is the context module followed by the schema module
and its plural name (used as the schema table name).</p><p>The context is an Elixir module that serves as an API boundary for
the given resource. A context often holds many related resources.
Therefore, if the context already exists, it will be augmented with
functions for the given resource.</p><blockquote><p>Note: A resource may also be split
over distinct contexts (such as Accounts.User and Payments.User).</p></blockquote><p>The schema is responsible for mapping the database fields into an
Elixir struct.</p><p>Overall, this generator will add the following files to <code class="inline">lib/your_app</code>:</p><ul><li>a context module in <code class="inline">accounts.ex</code>, serving as the API boundary</li><li>a schema in <code class="inline">accounts/user.ex</code>, with a <code class="inline">users</code> table</li></ul><p>A migration file for the repository and test files for the context
will also be generated.</p><h2 id="module-generating-without-a-schema" class="section-heading">
  <a href="#module-generating-without-a-schema" class="hover-link">
    <i class="ri-link-m" aria-hidden="true"></i>
  </a>
  <span class="text">Generating without a schema</span>
</h2>
<p>In some cases, you may wish to bootstrap the context module and
tests, but leave internal implementation of the context and schema
to yourself. Use the <code class="inline">--no-schema</code> flags to accomplish this.</p><h2 id="module-table" class="section-heading">
  <a href="#module-table" class="hover-link">
    <i class="ri-link-m" aria-hidden="true"></i>
  </a>
  <span class="text">table</span>
</h2>
<p>By default, the table name for the migration and schema will be
the plural name provided for the resource. To customize this value,
a <code class="inline">--table</code> option may be provided. For example:</p><pre><code class="makeup shell" translate="no"><samp class="gp unselectable">$ </samp><samp class="">mix phx.gen.context Accounts User users --table cms_users
</samp></code></pre><h2 id="module-binary_id" class="section-heading">
  <a href="#module-binary_id" class="hover-link">
    <i class="ri-link-m" aria-hidden="true"></i>
  </a>
  <span class="text">binary_id</span>
</h2>
<p>Generated migration can use <code class="inline">binary_id</code> for schema's primary key
and its references with option <code class="inline">--binary-id</code>.</p><h2 id="module-default-options" class="section-heading">
  <a href="#module-default-options" class="hover-link">
    <i class="ri-link-m" aria-hidden="true"></i>
  </a>
  <span class="text">Default options</span>
</h2>
<p>This generator uses default options provided in the <code class="inline">:generators</code>
configuration of your application. These are the defaults:</p><pre><code class="makeup elixir" translate="no"><samp class="n">config</samp><samp class="w"> </samp><samp class="ss">:your_app</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:generators</samp><samp class="p">,</samp><samp class="w">
  </samp><samp class="ss">migration</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">true</samp><samp class="p">,</samp><samp class="w">
  </samp><samp class="ss">binary_id</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">false</samp><samp class="p">,</samp><samp class="w">
  </samp><samp class="ss">timestamp_type</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="ss">:naive_datetime</samp><samp class="p">,</samp><samp class="w">
  </samp><samp class="ss">sample_binary_id</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;11111111-1111-1111-1111-111111111111&quot;</samp></code></pre><p>You can override those options per invocation by providing corresponding
switches, e.g. <code class="inline">--no-binary-id</code> to use normal ids despite the default
configuration or <code class="inline">--migration</code> to force generation of the migration.</p><p>Read the documentation for <code class="inline">phx.gen.schema</code> for more information on
attributes.</p><h2 id="module-skipping-prompts" class="section-heading">
  <a href="#module-skipping-prompts" class="hover-link">
    <i class="ri-link-m" aria-hidden="true"></i>
  </a>
  <span class="text">Skipping prompts</span>
</h2>
<p>This generator will prompt you if there is an existing context with the same
name, in order to provide more instructions on how to correctly use phoenix contexts.
You can skip this prompt and automatically merge the new schema access functions and tests into the
existing context using <code class="inline">--merge-with-existing-context</code>. To prevent changes to
the existing context and exit the generator, use <code class="inline">--no-merge-with-existing-context</code>.</p>
      </section>




  </body>
</html>
