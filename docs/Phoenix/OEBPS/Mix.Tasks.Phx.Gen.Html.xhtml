<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"
      xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>mix phx.gen.html - Phoenix v1.7.21</title>
    <meta name="generator" content="ExDoc v0.37.3" />
    <link type="text/css" rel="stylesheet" href="dist/epub-elixir-FNUUKFP7.css" />
    <script src="dist/epub-4WIP524F.js"></script>

  </head>
  <body class="content-inner">

    <h1 id="content">
mix phx.gen.html 
    </h1>


      <section id="moduledoc" class="docstring">
<p>Generates controller with view, templates, schema and context for an HTML resource.</p><pre><code class="makeup elixir" translate="no"><samp class="n">mix</samp><samp class="w"> </samp><samp class="n">phx</samp><samp class="o">.</samp><samp class="n">gen</samp><samp class="o">.</samp><samp class="n">html</samp><samp class="w"> </samp><samp class="nc">Accounts</samp><samp class="w"> </samp><samp class="nc">User</samp><samp class="w"> </samp><samp class="n">users</samp><samp class="w"> </samp><samp class="n">name</samp><samp class="ss">:string</samp><samp class="w"> </samp><samp class="n">age</samp><samp class="ss">:integer</samp></code></pre><p>The first argument, <code class="inline">Accounts</code>, is the resource's context.
A context is an Elixir module that serves as an API boundary for closely related resources.</p><p>The second argument, <code class="inline">User</code>, is the resource's schema.
A schema is an Elixir module responsible for mapping database fields into an Elixir struct.
The <code class="inline">User</code> schema above specifies two fields with their respective colon-delimited data types:
<code class="inline">name:string</code> and <code class="inline">age:integer</code>. See <a href="Mix.Tasks.Phx.Gen.Schema.xhtml"><code class="inline">mix phx.gen.schema</code></a> for more information on attributes.</p><blockquote><p>Note: A resource may also be split
over distinct contexts (such as <code class="inline">Accounts.User</code> and <code class="inline">Payments.User</code>).</p></blockquote><p>This generator adds the following files to <code class="inline">lib/</code>:</p><ul><li>a controller in <code class="inline">lib/my_app_web/controllers/user_controller.ex</code></li><li>default CRUD HTML templates in <code class="inline">lib/my_app_web/controllers/user_html</code></li><li>an HTML view collocated with the controller in <code class="inline">lib/my_app_web/controllers/user_html.ex</code></li><li>a schema in <code class="inline">lib/my_app/accounts/user.ex</code>, with an <code class="inline">users</code> table</li><li>a context module in <code class="inline">lib/my_app/accounts.ex</code> for the accounts API</li></ul><p>Additionally, this generator creates the following files:</p><ul><li>a migration for the schema in <code class="inline">priv/repo/migrations</code></li><li>a controller test module in <code class="inline">test/my_app/controllers/user_controller_test.exs</code></li><li>a context test module in <code class="inline">test/my_app/accounts_test.exs</code></li><li>a context test helper module in <code class="inline">test/support/fixtures/accounts_fixtures.ex</code></li></ul><p>If the context already exists, this generator injects functions for the given resource into
the context, context test, and context test helper modules.</p><h2 id="module-umbrella-app-configuration" class="section-heading">
  <a href="#module-umbrella-app-configuration" class="hover-link">
    <i class="ri-link-m" aria-hidden="true"></i>
  </a>
  <span class="text">Umbrella app configuration</span>
</h2>
<p>By default, Phoenix injects both web and domain specific functionality into the same
application. When using umbrella applications, those concerns are typically broken
into two separate apps, your context application - let's call it <code class="inline">my_app</code> - and its web
layer, which Phoenix assumes to be <code class="inline">my_app_web</code>.</p><p>You can teach Phoenix to use this style via the <code class="inline">:context_app</code> configuration option
in your <code class="inline">my_app_umbrella/config/config.exs</code>:</p><pre><code class="makeup elixir" translate="no"><samp class="n">config</samp><samp class="w"> </samp><samp class="ss">:my_app_web</samp><samp class="p">,</samp><samp class="w">
  </samp><samp class="ss">ecto_repos</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="3938576051-1">[</samp><samp class="nc">Stuff.Repo</samp><samp class="p" data-group-id="3938576051-1">]</samp><samp class="p">,</samp><samp class="w">
  </samp><samp class="ss">generators</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="3938576051-2">[</samp><samp class="ss">context_app</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="ss">:my_app</samp><samp class="p" data-group-id="3938576051-2">]</samp></code></pre><p>Alternatively, the <code class="inline">--context-app</code> option may be supplied to the generator:</p><pre><code class="makeup elixir" translate="no"><samp class="n">mix</samp><samp class="w"> </samp><samp class="n">phx</samp><samp class="o">.</samp><samp class="n">gen</samp><samp class="o">.</samp><samp class="n">html</samp><samp class="w"> </samp><samp class="nc">Sales</samp><samp class="w"> </samp><samp class="nc">User</samp><samp class="w"> </samp><samp class="n">users</samp><samp class="w"> </samp><samp class="o">--</samp><samp class="n">context</samp><samp class="o">-</samp><samp class="n">app</samp><samp class="w"> </samp><samp class="n">my_app</samp></code></pre><p>If you delete the <code class="inline">:context_app</code> configuration option, Phoenix will automatically put generated web files in
<code class="inline">my_app_umbrella/apps/my_app_web_web</code>.</p><p>If you change the value of <code class="inline">:context_app</code> to <code class="inline">:new_value</code>, <code class="inline">my_app_umbrella/apps/new_value_web</code>
must already exist or you will get the following error:</p><p>   ** (Mix) no directory for context_app :new_value found in my_app_web's deps.</p><h2 id="module-web-namespace" class="section-heading">
  <a href="#module-web-namespace" class="hover-link">
    <i class="ri-link-m" aria-hidden="true"></i>
  </a>
  <span class="text">Web namespace</span>
</h2>
<p>By default, the controller and HTML view will be namespaced by the schema name.
You can customize the web module namespace by passing the <code class="inline">--web</code> flag with a
module name, for example:</p><pre><code class="makeup elixir" translate="no"><samp class="n">mix</samp><samp class="w"> </samp><samp class="n">phx</samp><samp class="o">.</samp><samp class="n">gen</samp><samp class="o">.</samp><samp class="n">html</samp><samp class="w"> </samp><samp class="nc">Sales</samp><samp class="w"> </samp><samp class="nc">User</samp><samp class="w"> </samp><samp class="n">users</samp><samp class="w"> </samp><samp class="o">--</samp><samp class="n">web</samp><samp class="w"> </samp><samp class="nc">Sales</samp></code></pre><p>Which would generate a <code class="inline">lib/app_web/controllers/sales/user_controller.ex</code> and
<code class="inline">lib/app_web/controllers/sales/user_html.ex</code>.</p><h2 id="module-customizing-the-context-schema-tables-and-migrations" class="section-heading">
  <a href="#module-customizing-the-context-schema-tables-and-migrations" class="hover-link">
    <i class="ri-link-m" aria-hidden="true"></i>
  </a>
  <span class="text">Customizing the context, schema, tables and migrations</span>
</h2>
<p>In some cases, you may wish to bootstrap HTML templates, controllers,
and controller tests, but leave internal implementation of the context
or schema to yourself. You can use the <code class="inline">--no-context</code> and <code class="inline">--no-schema</code>
flags for file generation control.</p><p>You can also change the table name or configure the migrations to
use binary ids for primary keys, see <a href="Mix.Tasks.Phx.Gen.Schema.xhtml"><code class="inline">mix phx.gen.schema</code></a> for more
information.</p>
      </section>




  </body>
</html>
