<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"
      xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>Mix tasks - Phoenix v1.7.21</title>
    <meta name="generator" content="ExDoc v0.37.3" />
    <link type="text/css" rel="stylesheet" href="dist/epub-elixir-FNUUKFP7.css" />
    <script src="dist/epub-4WIP524F.js"></script>

  </head>
  <body class="content-inner">

    <h1 id="content">
Mix tasks
    </h1>
<p>There are currently a number of built-in Phoenix-specific and Ecto-specific <a href="https://hexdocs.pm/mix/Mix.Task.html">Mix tasks</a> available to us within a newly-generated application. We can also create our own application specific tasks.</p><blockquote><p>Note to learn more about <code class="inline">mix</code>, you can read Elixir's official <a href="https://hexdocs.pm/elixir/introduction-to-mix.html">Introduction to Mix</a>.</p></blockquote><h2 id="phoenix-tasks" class="section-heading">
  <a href="#phoenix-tasks" class="hover-link">
    <i class="ri-link-m" aria-hidden="true"></i>
  </a>
  <span class="text">Phoenix tasks</span>
</h2>
<pre><code class="makeup console" translate="no"><span class="gp unselectable">$ </span><span class="">mix help --search &quot;phx&quot;
</span><span class="">mix local.phx          # Updates the Phoenix project generator locally
</span><span class="">mix phx                # Prints Phoenix help information
</span><span class="">mix phx.digest         # Digests and compresses static files
</span><span class="">mix phx.digest.clean   # Removes old versions of static assets.
</span><span class="">mix phx.gen.auth       # Generates authentication logic for a resource
</span><span class="">mix phx.gen.cert       # Generates a self-signed certificate for HTTPS testing
</span><span class="">mix phx.gen.channel    # Generates a Phoenix channel
</span><span class="">mix phx.gen.context    # Generates a context with functions around an Ecto schema
</span><span class="">mix phx.gen.embedded   # Generates an embedded Ecto schema file
</span><span class="">mix phx.gen.html       # Generates controller, views, and context for an HTML resource
</span><span class="">mix phx.gen.json       # Generates controller, views, and context for a JSON resource
</span><span class="">mix phx.gen.live       # Generates LiveView, templates, and context for a resource
</span><span class="">mix phx.gen.notifier   # Generates a notifier that delivers emails by default
</span><span class="">mix phx.gen.presence   # Generates a Presence tracker
</span><span class="">mix phx.gen.schema     # Generates an Ecto schema and migration file
</span><span class="">mix phx.gen.secret     # Generates a secret
</span><span class="">mix phx.gen.socket     # Generates a Phoenix socket handler
</span><span class="">mix phx.new            # Creates a new Phoenix application
</span><span class="">mix phx.new.ecto       # Creates a new Ecto project within an umbrella project
</span><span class="">mix phx.new.web        # Creates a new Phoenix web project within an umbrella project
</span><span class="">mix phx.routes         # Prints all routes
</span><span class="">mix phx.server         # Starts applications and their servers
</span></code></pre><p>We have seen all of these at one point or another in the guides, but having all the information about them in one place seems like a good idea.</p><p>We will cover all Phoenix Mix tasks, except <code class="inline">phx.new</code>, <code class="inline">phx.new.ecto</code>, and <code class="inline">phx.new.web</code>, which are part of the Phoenix installer. You can learn more about them or any other task by calling <code class="inline">mix help TASK</code>.</p><h3 id="mix-phx-gen-html" class="section-heading">
  <a href="#mix-phx-gen-html" class="hover-link">
    <i class="ri-link-m" aria-hidden="true"></i>
  </a>
  <span class="text"><a href="Mix.Tasks.Phx.Gen.Html.xhtml"><code class="inline">mix phx.gen.html</code></a></span>
</h3>
<p>Phoenix offers the ability to generate all the code to stand up a complete HTML resource â€” Ecto migration, Ecto context, controller with all the necessary actions, view, and templates. This can be a tremendous time saver. Let's take a look at how to make this happen.</p><p>The <a href="Mix.Tasks.Phx.Gen.Html.xhtml"><code class="inline">mix phx.gen.html</code></a> task takes the following arguments: the module name of the context, the module name of the schema, the resource name, and a list of column_name:type attributes. The module name we pass in must conform to the Elixir rules of module naming, following proper capitalization.</p><pre><code class="makeup console" translate="no"><span class="gp unselectable">$ </span><span class="">mix phx.gen.html Blog Post posts body:string word_count:integer
</span><span class="">* creating lib/hello_web/controllers/post_controller.ex
</span><span class="">* creating lib/hello_web/controllers/post_html/edit.html.heex
</span><span class="">* creating lib/hello_web/controllers/post_html/post_form.html.heex
</span><span class="">* creating lib/hello_web/controllers/post_html/index.html.heex
</span><span class="">* creating lib/hello_web/controllers/post_html/new.html.heex
</span><span class="">* creating lib/hello_web/controllers/post_html/show.html.heex
</span><span class="">* creating lib/hello_web/controllers/post_html.ex
</span><span class="">* creating test/hello_web/controllers/post_controller_test.exs
</span><span class="">* creating lib/hello/blog/post.ex
</span><span class="">* creating priv/repo/migrations/20211001233016_create_posts.exs
</span><span class="">* creating lib/hello/blog.ex
</span><span class="">* injecting lib/hello/blog.ex
</span><span class="">* creating test/hello/blog_test.exs
</span><span class="">* injecting test/hello/blog_test.exs
</span><span class="">* creating test/support/fixtures/blog_fixtures.ex
</span><span class="">* injecting test/support/fixtures/blog_fixtures.ex
</span></code></pre><p>When <a href="Mix.Tasks.Phx.Gen.Html.xhtml"><code class="inline">mix phx.gen.html</code></a> is done creating files, it helpfully tells us that we need to add a line to our router file as well as run our Ecto migrations.</p><pre><code class="makeup console" translate="no"><span class="">Add the resource to your browser scope in lib/hello_web/router.ex:
</span><span class="">
</span><span class="">    resources &quot;/posts&quot;, PostController
</span><span class="">
</span><span class="">Remember to update your repository by running migrations:
</span><span class="">
</span><span class="">    $ mix ecto.migrate
</span></code></pre><p>Important: If we don't do this, we will see the following warnings in our logs, and our application will error when compiling.</p><pre><code class="makeup console" translate="no"><span class="gp unselectable">$ </span><span class="">mix phx.server
</span><span class="">Compiling 17 files (.ex)
</span><span class="">
</span><span class="">warning: no route path for HelloWeb.Router matches \&quot;/posts\&quot;
</span><span class="">  lib/hello_web/controllers/post_controller.ex:22: HelloWeb.PostController.index/2
</span></code></pre><p>If we don't want to create a context or schema for our resource we can use the <code class="inline">--no-context</code> flag. Note that this still requires a context module name as a parameter.</p><pre><code class="makeup console" translate="no"><span class="gp unselectable">$ </span><span class="">mix phx.gen.html Blog Post posts body:string word_count:integer --no-context
</span><span class="">* creating lib/hello_web/controllers/post_controller.ex
</span><span class="">* creating lib/hello_web/controllers/post_html/edit.html.heex
</span><span class="">* creating lib/hello_web/controllers/post_html/post_form.html.heex
</span><span class="">* creating lib/hello_web/controllers/post_html/index.html.heex
</span><span class="">* creating lib/hello_web/controllers/post_html/new.html.heex
</span><span class="">* creating lib/hello_web/controllers/post_html/show.html.heex
</span><span class="">* creating lib/hello_web/controllers/post_html.ex
</span><span class="">* creating test/hello_web/controllers/post_controller_test.exs
</span></code></pre><p>It will tell us we need to add a line to our router file, but since we skipped the context, it won't mention anything about <code class="inline">ecto.migrate</code>.</p><pre><code class="makeup console" translate="no"><span class="">Add the resource to your browser scope in lib/hello_web/router.ex:
</span><span class="">
</span><span class="">    resources &quot;/posts&quot;, PostController
</span></code></pre><p>Similarly, if we want a context created without a schema for our resource we can use the <code class="inline">--no-schema</code> flag.</p><pre><code class="makeup console" translate="no"><span class="gp unselectable">$ </span><span class="">mix phx.gen.html Blog Post posts body:string word_count:integer --no-schema
</span><span class="">* creating lib/hello_web/controllers/post_controller.ex
</span><span class="">* creating lib/hello_web/controllers/post_html/edit.html.heex
</span><span class="">* creating lib/hello_web/controllers/post_html/post_form.html.heex
</span><span class="">* creating lib/hello_web/controllers/post_html/index.html.heex
</span><span class="">* creating lib/hello_web/controllers/post_html/new.html.heex
</span><span class="">* creating lib/hello_web/controllers/post_html/show.html.heex
</span><span class="">* creating lib/hello_web/controllers/post_html.ex
</span><span class="">* creating test/hello_web/controllers/post_controller_test.exs
</span><span class="">* creating lib/hello/blog.ex
</span><span class="">* injecting lib/hello/blog.ex
</span><span class="">* creating test/hello/blog_test.exs
</span><span class="">* injecting test/hello/blog_test.exs
</span><span class="">* creating test/support/fixtures/blog_fixtures.ex
</span><span class="">* injecting test/support/fixtures/blog_fixtures.ex
</span></code></pre><p>It will tell us we need to add a line to our router file, but since we skipped the schema, it won't mention anything about <code class="inline">ecto.migrate</code>.</p><h3 id="mix-phx-gen-json" class="section-heading">
  <a href="#mix-phx-gen-json" class="hover-link">
    <i class="ri-link-m" aria-hidden="true"></i>
  </a>
  <span class="text"><a href="Mix.Tasks.Phx.Gen.Json.xhtml"><code class="inline">mix phx.gen.json</code></a></span>
</h3>
<p>Phoenix also offers the ability to generate all the code to stand up a complete JSON resource â€” Ecto migration, Ecto schema, controller with all the necessary actions and view. This command will not create any template for the app.</p><p>The <a href="Mix.Tasks.Phx.Gen.Json.xhtml"><code class="inline">mix phx.gen.json</code></a> task takes the following arguments: the module name of the context, the module name of the schema, the resource name, and a list of column_name:type attributes. The module name we pass in must conform to the Elixir rules of module naming, following proper capitalization.</p><pre><code class="makeup console" translate="no"><span class="gp unselectable">$ </span><span class="">mix phx.gen.json Blog Post posts title:string content:string
</span><span class="">* creating lib/hello_web/controllers/post_controller.ex
</span><span class="">* creating lib/hello_web/controllers/post_json.ex
</span><span class="">* creating test/hello_web/controllers/post_controller_test.exs
</span><span class="">* creating lib/hello_web/controllers/changeset_json.ex
</span><span class="">* creating lib/hello_web/controllers/fallback_controller.ex
</span><span class="">* creating lib/hello/blog/post.ex
</span><span class="">* creating priv/repo/migrations/20170906153323_create_posts.exs
</span><span class="">* creating lib/hello/blog.ex
</span><span class="">* injecting lib/hello/blog.ex
</span><span class="">* creating test/hello/blog/blog_test.exs
</span><span class="">* injecting test/hello/blog/blog_test.exs
</span><span class="">* creating test/support/fixtures/blog_fixtures.ex
</span><span class="">* injecting test/support/fixtures/blog_fixtures.ex
</span></code></pre><p>When <a href="Mix.Tasks.Phx.Gen.Json.xhtml"><code class="inline">mix phx.gen.json</code></a> is done creating files, it helpfully tells us that we need to add a line to our router file as well as run our Ecto migrations.</p><pre><code class="makeup console" translate="no"><span class="">Add the resource to the &quot;/api&quot; scope in lib/hello_web/router.ex:
</span><span class="">
</span><span class="">    resources &quot;/posts&quot;, PostController, except: [:new, :edit]
</span><span class="">
</span><span class="">Remember to update your repository by running migrations:
</span><span class="">
</span><span class="">    $ mix ecto.migrate
</span></code></pre><p>Important: If we don't do this, we'll get the following warning in our logs and the application will error when attempting to compile:</p><pre><code class="makeup console" translate="no"><span class="gp unselectable">$ </span><span class="">mix phx.server
</span><span class="">Compiling 19 files (.ex)
</span><span class="">
</span><span class="">warning: no route path for HelloWeb.Router matches \&quot;/posts\&quot;
</span><span class="">  lib/hello_web/controllers/post_controller.ex:22: HelloWeb.PostController.index/2
</span></code></pre><p><a href="Mix.Tasks.Phx.Gen.Json.xhtml"><code class="inline">mix phx.gen.json</code></a> also supports <code class="inline">--no-context</code>, <code class="inline">--no-schema</code>, and others, as in <a href="Mix.Tasks.Phx.Gen.Html.xhtml"><code class="inline">mix phx.gen.html</code></a>.</p><h3 id="mix-phx-gen-context" class="section-heading">
  <a href="#mix-phx-gen-context" class="hover-link">
    <i class="ri-link-m" aria-hidden="true"></i>
  </a>
  <span class="text"><a href="Mix.Tasks.Phx.Gen.Context.xhtml"><code class="inline">mix phx.gen.context</code></a></span>
</h3>
<p>If we don't need a complete HTML/JSON resource and only need a context, we can use the <a href="Mix.Tasks.Phx.Gen.Context.xhtml"><code class="inline">mix phx.gen.context</code></a> task. It will generate a context, a schema, a migration and a test case.</p><p>The <a href="Mix.Tasks.Phx.Gen.Context.xhtml"><code class="inline">mix phx.gen.context</code></a> task takes the following arguments: the module name of the context, the module name of the schema, the resource name, and a list of column_name:type attributes.</p><pre><code class="makeup console" translate="no"><span class="gp unselectable">$ </span><span class="">mix phx.gen.context Accounts User users name:string age:integer
</span><span class="">* creating lib/hello/accounts/user.ex
</span><span class="">* creating priv/repo/migrations/20170906161158_create_users.exs
</span><span class="">* creating lib/hello/accounts.ex
</span><span class="">* injecting lib/hello/accounts.ex
</span><span class="">* creating test/hello/accounts/accounts_test.exs
</span><span class="">* injecting test/hello/accounts/accounts_test.exs
</span><span class="">* creating test/support/fixtures/accounts_fixtures.ex
</span><span class="">* injecting test/support/fixtures/accounts_fixtures.ex
</span></code></pre><blockquote><p>Note: If we need to namespace our resource we can simply namespace the first argument of the generator.</p></blockquote><pre><code class="makeup console" translate="no"><span class="gp unselectable">$ </span><span class="">mix phx.gen.context Admin.Accounts User users name:string age:integer
</span><span class="">* creating lib/hello/admin/accounts/user.ex
</span><span class="">* creating priv/repo/migrations/20170906161246_create_users.exs
</span><span class="">* creating lib/hello/admin/accounts.ex
</span><span class="">* injecting lib/hello/admin/accounts.ex
</span><span class="">* creating test/hello/admin/accounts_test.exs
</span><span class="">* injecting test/hello/admin/accounts_test.exs
</span><span class="">* creating test/support/fixtures/admin/accounts_fixtures.ex
</span><span class="">* injecting test/support/fixtures/admin/accounts_fixtures.ex
</span></code></pre><h3 id="mix-phx-gen-schema" class="section-heading">
  <a href="#mix-phx-gen-schema" class="hover-link">
    <i class="ri-link-m" aria-hidden="true"></i>
  </a>
  <span class="text"><a href="Mix.Tasks.Phx.Gen.Schema.xhtml"><code class="inline">mix phx.gen.schema</code></a></span>
</h3>
<p>If we don't need a complete HTML/JSON resource and are not interested in generating or altering a context we can use the <a href="Mix.Tasks.Phx.Gen.Schema.xhtml"><code class="inline">mix phx.gen.schema</code></a> task. It will generate a schema, and a migration.</p><p>The <a href="Mix.Tasks.Phx.Gen.Schema.xhtml"><code class="inline">mix phx.gen.schema</code></a> task takes the following arguments: the module name of the schema (which may be namespaced), the resource name, and a list of column_name:type attributes.</p><pre><code class="makeup console" translate="no"><span class="gp unselectable">$ </span><span class="">mix phx.gen.schema Accounts.Credential credentials email:string:unique user_id:references:users
</span><span class="">* creating lib/hello/accounts/credential.ex
</span><span class="">* creating priv/repo/migrations/20170906162013_create_credentials.exs
</span></code></pre><h3 id="mix-phx-gen-auth" class="section-heading">
  <a href="#mix-phx-gen-auth" class="hover-link">
    <i class="ri-link-m" aria-hidden="true"></i>
  </a>
  <span class="text"><a href="Mix.Tasks.Phx.Gen.Auth.xhtml"><code class="inline">mix phx.gen.auth</code></a></span>
</h3>
<p>Phoenix also offers the ability to generate all of the code to stand up a complete authentication system â€” Ecto migration, phoenix context, controllers, templates, etc. This can be a huge time saver, allowing you to quickly add authentication to your system and shift your focus back to the primary problems your application is trying to solve.</p><p>The <a href="Mix.Tasks.Phx.Gen.Auth.xhtml"><code class="inline">mix phx.gen.auth</code></a> task takes the following arguments: the module name of the context, the module name of the schema, and a plural version of the schema name used to generate database tables and route paths.</p><p>Here is an example version of the command:</p><pre><code class="makeup console" translate="no"><span class="gp unselectable">$ </span><span class="">mix phx.gen.auth Accounts User users
</span><span class="">* creating priv/repo/migrations/20201205184926_create_users_auth_tables.exs
</span><span class="">* creating lib/hello/accounts/user_notifier.ex
</span><span class="">* creating lib/hello/accounts/user.ex
</span><span class="">* creating lib/hello/accounts/user_token.ex
</span><span class="">* creating lib/hello_web/controllers/user_auth.ex
</span><span class="">* creating test/hello_web/controllers/user_auth_test.exs
</span><span class="">* creating lib/hello_web/controllers/user_confirmation_html.ex
</span><span class="">* creating lib/hello_web/templates/user_confirmation/new.html.heex
</span><span class="">* creating lib/hello_web/templates/user_confirmation/edit.html.heex
</span><span class="">* creating lib/hello_web/controllers/user_confirmation_controller.ex
</span><span class="">* creating test/hello_web/controllers/user_confirmation_controller_test.exs
</span><span class="">* creating lib/hello_web/templates/user_registration/new.html.heex
</span><span class="">* creating lib/hello_web/controllers/user_registration_controller.ex
</span><span class="">* creating test/hello_web/controllers/user_registration_controller_test.exs
</span><span class="">* creating lib/hello_web/controllers/user_registration_html.ex
</span><span class="">* creating lib/hello_web/controllers/user_reset_password_html.ex
</span><span class="">* creating lib/hello_web/controllers/user_reset_password_controller.ex
</span><span class="">* creating test/hello_web/controllers/user_reset_password_controller_test.exs
</span><span class="">* creating lib/hello_web/templates/user_reset_password/edit.html.heex
</span><span class="">* creating lib/hello_web/templates/user_reset_password/new.html.heex
</span><span class="">* creating lib/hello_web/controllers/user_session_html.ex
</span><span class="">* creating lib/hello_web/controllers/user_session_controller.ex
</span><span class="">* creating test/hello_web/controllers/user_session_controller_test.exs
</span><span class="">* creating lib/hello_web/templates/user_session/new.html.heex
</span><span class="">* creating lib/hello_web/controllers/user_settings_html.ex
</span><span class="">* creating lib/hello_web/templates/user_settings/edit.html.heex
</span><span class="">* creating lib/hello_web/controllers/user_settings_controller.ex
</span><span class="">* creating test/hello_web/controllers/user_settings_controller_test.exs
</span><span class="">* creating lib/hello/accounts.ex
</span><span class="">* injecting lib/hello/accounts.ex
</span><span class="">* creating test/hello/accounts_test.exs
</span><span class="">* injecting test/hello/accounts_test.exs
</span><span class="">* creating test/support/fixtures/accounts_fixtures.ex
</span><span class="">* injecting test/support/fixtures/accounts_fixtures.ex
</span><span class="">* injecting test/support/conn_case.ex
</span><span class="">* injecting config/test.exs
</span><span class="">* injecting mix.exs
</span><span class="">* injecting lib/hello_web/router.ex
</span><span class="">* injecting lib/hello_web/router.ex - imports
</span><span class="">* injecting lib/hello_web/router.ex - plug
</span><span class="">* injecting lib/hello_web/templates/layout/root.html.heex
</span></code></pre><p>When <a href="Mix.Tasks.Phx.Gen.Auth.xhtml"><code class="inline">mix phx.gen.auth</code></a> is done creating files, it helpfully tells us that we need to re-fetch our dependencies as well as run our Ecto migrations.</p><pre><code class="makeup console" translate="no"><span class="">Please re-fetch your dependencies with the following command:
</span><span class="">
</span><span class="">    mix deps.get
</span><span class="">
</span><span class="">Remember to update your repository by running migrations:
</span><span class="">
</span><span class="">  $ mix ecto.migrate
</span><span class="">
</span><span class="">Once you are ready, visit &quot;/users/register&quot;
</span><span class="">to create your account and then access to &quot;/dev/mailbox&quot; to
</span><span class="">see the account confirmation email.
</span></code></pre><p>A more complete walk-through of how to get started with this generator is available in the <a href="mix_phx_gen_auth.html"><code class="inline">mix phx.gen.auth</code> authentication guide</a>.</p><h3 id="mix-phx-gen-channel-and-mix-phx-gen-socket" class="section-heading">
  <a href="#mix-phx-gen-channel-and-mix-phx-gen-socket" class="hover-link">
    <i class="ri-link-m" aria-hidden="true"></i>
  </a>
  <span class="text"><a href="Mix.Tasks.Phx.Gen.Channel.xhtml"><code class="inline">mix phx.gen.channel</code></a> and <a href="Mix.Tasks.Phx.Gen.Socket.xhtml"><code class="inline">mix phx.gen.socket</code></a></span>
</h3>
<p>This task will generate a basic Phoenix channel, the socket to power the channel (if you haven't created one yet), as well a test case for it. It takes the module name for the channel as the only argument:</p><pre><code class="makeup console" translate="no"><span class="gp unselectable">$ </span><span class="">mix phx.gen.channel Room
</span><span class="">* creating lib/hello_web/channels/room_channel.ex
</span><span class="">* creating test/hello_web/channels/room_channel_test.exs
</span></code></pre><p>If your application does not have a <code class="inline">UserSocket</code> yet, it will ask if you want to create one:</p><pre><code class="makeup console" translate="no"><span class="">The default socket handler - HelloWeb.UserSocket - was not found
</span><span class="">in its default location.
</span><span class="">
</span><span class="">Do you want to create it? [Y/n]
</span></code></pre><p>By confirming, a channel will be created, then you need to connect the socket in your endpoint:</p><pre><code class="makeup console" translate="no"><span class="">Add the socket handler to your `lib/hello_web/endpoint.ex`, for example:
</span><span class="">
</span><span class="">    socket &quot;/socket&quot;, HelloWeb.UserSocket,
</span><span class="">      websocket: true,
</span><span class="">      longpoll: false
</span><span class="">
</span><span class="">For the front-end integration, you need to import the `user_socket.js`
</span><span class="">in your `assets/js/app.js` file:
</span><span class="">
</span><span class="">    import &quot;./user_socket.js&quot;
</span></code></pre><p>In case a <code class="inline">UserSocket</code> already exists or you decide to not create one, the <code class="inline">channel</code> generator will tell you to add it to the Socket manually:</p><pre><code class="makeup console" translate="no"><span class="">Add the channel to your `lib/hello_web/channels/user_socket.ex` handler, for example:
</span><span class="">
</span><span class="">    channel &quot;rooms:lobby&quot;, HelloWeb.RoomChannel
</span></code></pre><p>You can also create a socket any time by invoking <a href="Mix.Tasks.Phx.Gen.Socket.xhtml"><code class="inline">mix phx.gen.socket</code></a>.</p><h3 id="mix-phx-gen-presence" class="section-heading">
  <a href="#mix-phx-gen-presence" class="hover-link">
    <i class="ri-link-m" aria-hidden="true"></i>
  </a>
  <span class="text"><a href="Mix.Tasks.Phx.Gen.Presence.xhtml"><code class="inline">mix phx.gen.presence</code></a></span>
</h3>
<p>This task will generate a presence tracker. The module name can be passed as an argument,
<code class="inline">Presence</code> is used if no module name is passed.</p><pre><code class="makeup console" translate="no"><span class="gp unselectable">$ </span><span class="">mix phx.gen.presence Presence
</span><span class="">* lib/hello_web/channels/presence.ex
</span><span class="">
</span><span class="">Add your new module to your supervision tree,
</span><span class="">in lib/hello/application.ex:
</span><span class="">
</span><span class="">    children = [
</span><span class="">      ...
</span><span class="">      HelloWeb.Presence
</span><span class="">    ]
</span></code></pre><h3 id="mix-phx-routes" class="section-heading">
  <a href="#mix-phx-routes" class="hover-link">
    <i class="ri-link-m" aria-hidden="true"></i>
  </a>
  <span class="text"><a href="Mix.Tasks.Phx.Routes.xhtml"><code class="inline">mix phx.routes</code></a></span>
</h3>
<p>This task has a single purpose, to show us all the routes defined for a given router. We saw it used extensively in the <a href="routing.html">routing guide</a>.</p><p>If we don't specify a router for this task, it will default to the router Phoenix generated for us.</p><pre><code class="makeup console" translate="no"><span class="gp unselectable">$ </span><span class="">mix phx.routes
</span><span class="">GET  /  TaskTester.PageController.index/2
</span></code></pre><p>We can also specify an individual router if we have more than one for our application.</p><pre><code class="makeup console" translate="no"><span class="gp unselectable">$ </span><span class="">mix phx.routes TaskTesterWeb.Router
</span><span class="">GET  /  TaskTesterWeb.PageController.index/2
</span></code></pre><h3 id="mix-phx-server" class="section-heading">
  <a href="#mix-phx-server" class="hover-link">
    <i class="ri-link-m" aria-hidden="true"></i>
  </a>
  <span class="text"><a href="Mix.Tasks.Phx.Server.xhtml"><code class="inline">mix phx.server</code></a></span>
</h3>
<p>This is the task we use to get our application running. It takes no arguments at all. If we pass any in, they will be silently ignored.</p><pre><code class="makeup console" translate="no"><span class="gp unselectable">$ </span><span class="">mix phx.server
</span><span class="">[info] Running TaskTesterWeb.Endpoint with Cowboy on port 4000 (http)
</span></code></pre><p>It will silently ignore our <code class="inline">DoesNotExist</code> argument:</p><pre><code class="makeup console" translate="no"><span class="gp unselectable">$ </span><span class="">mix phx.server DoesNotExist
</span><span class="">[info] Running TaskTesterWeb.Endpoint with Cowboy on port 4000 (http)
</span></code></pre><p>If we would like to start our application and also have an <a href="https://hexdocs.pm/iex/IEx.html"><code class="inline">IEx</code></a> session open to it, we can run the Mix task within <code class="inline">iex</code> like this, <code class="inline">iex -S mix phx.server</code>.</p><pre><code class="makeup console" translate="no"><span class="gp unselectable">$ </span><span class="">iex -S mix phx.server
</span><span class="">Erlang/OTP 17 [erts-6.4] [source] [64-bit] [smp:8:8] [async-threads:10] [hipe] [kernel-poll:false] [dtrace]
</span><span class="">
</span><span class="">[info] Running TaskTesterWeb.Endpoint with Cowboy on port 4000 (http)
</span><span class="">Interactive Elixir (1.0.4) - press Ctrl+C to exit (type h() ENTER for help)
</span><span class="">iex(1)&gt;
</span></code></pre><h3 id="mix-phx-digest" class="section-heading">
  <a href="#mix-phx-digest" class="hover-link">
    <i class="ri-link-m" aria-hidden="true"></i>
  </a>
  <span class="text"><a href="Mix.Tasks.Phx.Digest.xhtml"><code class="inline">mix phx.digest</code></a></span>
</h3>
<p>This task does two things, it creates a digest for our static assets and then compresses them.</p><p>&quot;Digest&quot; here refers to an MD5 digest of the contents of an asset which gets added to the filename of that asset. This creates a sort of fingerprint for it. If the digest doesn't change, browsers and CDNs will use a cached version. If it does change, they will re-fetch the new version.</p><p>Before we run this task let's inspect the contents of two directories in our hello application.</p><p>First <code class="inline">priv/static/</code> which should look similar to this:</p><pre><code class="makeup console" translate="no"><span class="">â”œâ”€â”€ assets
</span><span class="">â”‚Â Â  â”œâ”€â”€ app.css
</span><span class="">â”‚Â Â  â””â”€â”€ app.js
</span><span class="">â”œâ”€â”€ favicon.ico
</span><span class="">â””â”€â”€ robots.txt
</span></code></pre><p>And then <code class="inline">assets/</code> which should look similar to this:</p><pre><code class="makeup console" translate="no"><span class="">â”œâ”€â”€ css
</span><span class="">â”‚Â Â  â””â”€â”€ app.css
</span><span class="">â”œâ”€â”€ js
</span><span class="">â”‚Â Â  â””â”€â”€ app.js
</span><span class="">â”œâ”€â”€ tailwind.config.js
</span><span class="">â””â”€â”€ vendor
</span><span class="">    â””â”€â”€ topbar.js
</span></code></pre><p>All of these files are our static assets. Now let's run the <a href="Mix.Tasks.Phx.Digest.xhtml"><code class="inline">mix phx.digest</code></a> task.</p><pre><code class="makeup console" translate="no"><span class="gp unselectable">$ </span><span class="">mix phx.digest
</span><span class="">Check your digested files at &#39;priv/static&#39;.
</span></code></pre><p>We can now do as the task suggests and inspect the contents of <code class="inline">priv/static/</code> directory. We'll see that all files from <code class="inline">assets/</code> have been copied over to <code class="inline">priv/static/</code> and also each file now has a couple of versions. Those versions are:</p><ul><li>the original file</li><li>a compressed file with gzip</li><li>a file containing the original file name and its digest</li><li>a compressed file containing the file name and its digest</li></ul><p>We can optionally determine which files should be gzipped by using the <code class="inline">:gzippable_exts</code> option in the config file:</p><pre><code class="makeup elixir" translate="no"><span class="n">config</span><span class="w"> </span><span class="ss">:phoenix</span><span class="p">,</span><span class="w"> </span><span class="ss">:gzippable_exts</span><span class="p">,</span><span class="w"> </span><span class="sx">~w(.js .css)</span></code></pre><blockquote><p>Note: We can specify a different output folder where <a href="Mix.Tasks.Phx.Digest.xhtml"><code class="inline">mix phx.digest</code></a> will put processed files. The first argument is the path where the static files are located.</p></blockquote><pre><code class="makeup console" translate="no"><span class="gp unselectable">$ </span><span class="">mix phx.digest priv/static/ -o www/public/
</span><span class="">Check your digested files at &#39;www/public/&#39;
</span></code></pre><blockquote><p>Note: You can use <a href="Mix.Tasks.Phx.Digest.Clean.xhtml"><code class="inline">mix phx.digest.clean</code></a> to prune stale versions of the assets. If you want to remove all produced files, run <code class="inline">mix phx.digest.clean --all</code>.</p></blockquote><h2 id="ecto-tasks" class="section-heading">
  <a href="#ecto-tasks" class="hover-link">
    <i class="ri-link-m" aria-hidden="true"></i>
  </a>
  <span class="text">Ecto tasks</span>
</h2>
<p>Newly generated Phoenix applications now include Ecto and Postgrex as dependencies by default (which is to say, unless we use <a href="https://hexdocs.pm/phx_new/1.8.0-rc.3/Mix.Tasks.Phx.New.html"><code class="inline">mix phx.new</code></a> with the <code class="inline">--no-ecto</code> flag). With those dependencies come Mix tasks to take care of common Ecto operations. Let's see which tasks we get out of the box.</p><pre><code class="makeup console" translate="no"><span class="gp unselectable">$ </span><span class="">mix help --search &quot;ecto&quot;
</span><span class="">mix ecto               # Prints Ecto help information
</span><span class="">mix ecto.create        # Creates the repository storage
</span><span class="">mix ecto.drop          # Drops the repository storage
</span><span class="">mix ecto.dump          # Dumps the repository database structure
</span><span class="">mix ecto.gen.migration # Generates a new migration for the repo
</span><span class="">mix ecto.gen.repo      # Generates a new repository
</span><span class="">mix ecto.load          # Loads previously dumped database structure
</span><span class="">mix ecto.migrate       # Runs the repository migrations
</span><span class="">mix ecto.migrations    # Displays the repository migration status
</span><span class="">mix ecto.reset         # Alias defined in mix.exs
</span><span class="">mix ecto.rollback      # Rolls back the repository migrations
</span><span class="">mix ecto.setup         # Alias defined in mix.exs
</span></code></pre><p>Note: We can run any of the tasks above with the <code class="inline">--no-start</code> flag to execute the task without starting the application.</p><h3 id="mix-ecto-create" class="section-heading">
  <a href="#mix-ecto-create" class="hover-link">
    <i class="ri-link-m" aria-hidden="true"></i>
  </a>
  <span class="text"><a href="https://hexdocs.pm/ecto/3.10.1/Mix.Tasks.Ecto.Create.html"><code class="inline">mix ecto.create</code></a></span>
</h3>
<p>This task will create the database specified in our repo. By default it will look for the repo named after our application (the one generated with our app unless we opted out of Ecto), but we can pass in another repo if we want.</p><p>Here's what it looks like in action.</p><pre><code class="makeup console" translate="no"><span class="gp unselectable">$ </span><span class="">mix ecto.create
</span><span class="">The database for Hello.Repo has been created.
</span></code></pre><p>There are a few things that can go wrong with <code class="inline">ecto.create</code>. If our Postgres database doesn't have a &quot;postgres&quot; role (user), we'll get an error like this one.</p><pre><code class="makeup console" translate="no"><span class="gp unselectable">$ </span><span class="">mix ecto.create
</span><span class="">** (Mix) The database for Hello.Repo couldn&#39;t be created, reason given: psql: FATAL:  role &quot;postgres&quot; does not exist
</span></code></pre><p>We can fix this by creating the &quot;postgres&quot; role in the <code class="inline">psql</code> console with the permissions needed to log in and create a database.</p><pre><code class="makeup console" translate="no"><span class="">=# CREATE ROLE postgres LOGIN CREATEDB;
</span><span class="">CREATE ROLE
</span></code></pre><p>If the &quot;postgres&quot; role does not have permission to log in to the application, we'll get this error.</p><pre><code class="makeup console" translate="no"><span class="gp unselectable">$ </span><span class="">mix ecto.create
</span><span class="">** (Mix) The database for Hello.Repo couldn&#39;t be created, reason given: psql: FATAL:  role &quot;postgres&quot; is not permitted to log in
</span></code></pre><p>To fix this, we need to change the permissions on our &quot;postgres&quot; user to allow login.</p><pre><code class="makeup console" translate="no"><span class="">=# ALTER ROLE postgres LOGIN;
</span><span class="">ALTER ROLE
</span></code></pre><p>If the &quot;postgres&quot; role does not have permission to create a database, we'll get this error.</p><pre><code class="makeup console" translate="no"><span class="gp unselectable">$ </span><span class="">mix ecto.create
</span><span class="">** (Mix) The database for Hello.Repo couldn&#39;t be created, reason given: ERROR:  permission denied to create database
</span></code></pre><p>To fix this, we need to change the permissions on our &quot;postgres&quot; user in the <code class="inline">psql</code> console  to allow database creation.</p><pre><code class="makeup console" translate="no"><span class="">=# ALTER ROLE postgres CREATEDB;
</span><span class="">ALTER ROLE
</span></code></pre><p>If the &quot;postgres&quot; role is using a password different from the default &quot;postgres&quot;, we'll get this error.</p><pre><code class="makeup console" translate="no"><span class="gp unselectable">$ </span><span class="">mix ecto.create
</span><span class="">** (Mix) The database for Hello.Repo couldn&#39;t be created, reason given: psql: FATAL:  password authentication failed for user &quot;postgres&quot;
</span></code></pre><p>To fix this, we can change the password in the environment specific configuration file. For the development environment the password used can be found at the bottom of the <code class="inline">config/dev.exs</code> file.</p><p>Finally, if we happen to have another repo called <code class="inline">OurCustom.Repo</code> that we want to create the database for, we can run this.</p><pre><code class="makeup console" translate="no"><span class="gp unselectable">$ </span><span class="">mix ecto.create -r OurCustom.Repo
</span><span class="">The database for OurCustom.Repo has been created.
</span></code></pre><h3 id="mix-ecto-drop" class="section-heading">
  <a href="#mix-ecto-drop" class="hover-link">
    <i class="ri-link-m" aria-hidden="true"></i>
  </a>
  <span class="text"><a href="https://hexdocs.pm/ecto/3.10.1/Mix.Tasks.Ecto.Drop.html"><code class="inline">mix ecto.drop</code></a></span>
</h3>
<p>This task will drop the database specified in our repo. By default it will look for the repo named after our application (the one generated with our app unless we opted out of Ecto). It will not prompt us to check if we're sure we want to drop the database, so do exercise caution.</p><pre><code class="makeup console" translate="no"><span class="gp unselectable">$ </span><span class="">mix ecto.drop
</span><span class="">The database for Hello.Repo has been dropped.
</span></code></pre><p>If we happen to have another repo that we want to drop the database for, we can specify it with the <code class="inline">-r</code> flag.</p><pre><code class="makeup console" translate="no"><span class="gp unselectable">$ </span><span class="">mix ecto.drop -r OurCustom.Repo
</span><span class="">The database for OurCustom.Repo has been dropped.
</span></code></pre><h3 id="mix-ecto-gen-repo" class="section-heading">
  <a href="#mix-ecto-gen-repo" class="hover-link">
    <i class="ri-link-m" aria-hidden="true"></i>
  </a>
  <span class="text"><a href="https://hexdocs.pm/ecto/3.10.1/Mix.Tasks.Ecto.Gen.Repo.html"><code class="inline">mix ecto.gen.repo</code></a></span>
</h3>
<p>Many applications require more than one data store. For each data store, we'll need a new repo, and we can generate them automatically with <code class="inline">ecto.gen.repo</code>.</p><p>If we name our repo <code class="inline">OurCustom.Repo</code>, this task will create it here <code class="inline">lib/our_custom/repo.ex</code>.</p><pre><code class="makeup console" translate="no"><span class="gp unselectable">$ </span><span class="">mix ecto.gen.repo -r OurCustom.Repo
</span><span class="">* creating lib/our_custom
</span><span class="">* creating lib/our_custom/repo.ex
</span><span class="">* updating config/config.exs
</span><span class="">Don&#39;t forget to add your new repo to your supervision tree
</span><span class="">(typically in lib/hello/application.ex):
</span><span class="">
</span><span class="">    {OurCustom.Repo, []}
</span></code></pre><p>Notice that this task has updated <code class="inline">config/config.exs</code>. If we take a look, we'll see this extra configuration block for our new repo.</p><pre><code class="makeup elixir" translate="no"><span class="o">.</span><span class="w"> </span><span class="o">.</span><span class="w"> </span><span class="o">.</span><span class="w">
</span><span class="n">config</span><span class="w"> </span><span class="ss">:hello</span><span class="p">,</span><span class="w"> </span><span class="nc">OurCustom.Repo</span><span class="p">,</span><span class="w">
  </span><span class="ss">username</span><span class="p">:</span><span class="w"> </span><span class="s">&quot;user&quot;</span><span class="p">,</span><span class="w">
  </span><span class="ss">password</span><span class="p">:</span><span class="w"> </span><span class="s">&quot;pass&quot;</span><span class="p">,</span><span class="w">
  </span><span class="ss">hostname</span><span class="p">:</span><span class="w"> </span><span class="s">&quot;localhost&quot;</span><span class="p">,</span><span class="w">
  </span><span class="ss">database</span><span class="p">:</span><span class="w"> </span><span class="s">&quot;hello_repo&quot;</span><span class="p">,</span><span class="w">
</span><span class="o">.</span><span class="w"> </span><span class="o">.</span><span class="w"> </span><span class="o">.</span></code></pre><p>Of course, we'll need to change the login credentials to match what our database expects. We'll also need to change the config for other environments.</p><p>We certainly should follow the instructions and add our new repo to our supervision tree. In our <code class="inline">Hello</code> application, we would open up <code class="inline">lib/hello/application.ex</code>, and add our repo as a worker to the <code class="inline">children</code> list.</p><pre><code class="makeup elixir" translate="no"><span class="o">.</span><span class="w"> </span><span class="o">.</span><span class="w"> </span><span class="o">.</span><span class="w">
</span><span class="n">children</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p" data-group-id="7138217900-1">[</span><span class="w">
  </span><span class="nc">Hello.Repo</span><span class="p">,</span><span class="w">
  </span><span class="c1"># Our custom repo</span><span class="w">
  </span><span class="nc">OurCustom.Repo</span><span class="p">,</span><span class="w">
  </span><span class="c1"># Start the endpoint when the application starts</span><span class="w">
  </span><span class="nc">HelloWeb.Endpoint</span><span class="p">,</span><span class="w">
</span><span class="p" data-group-id="7138217900-1">]</span><span class="w">
</span><span class="o">.</span><span class="w"> </span><span class="o">.</span><span class="w"> </span><span class="o">.</span></code></pre><h3 id="mix-ecto-gen-migration" class="section-heading">
  <a href="#mix-ecto-gen-migration" class="hover-link">
    <i class="ri-link-m" aria-hidden="true"></i>
  </a>
  <span class="text"><a href="https://hexdocs.pm/ecto_sql/3.10.1/Mix.Tasks.Ecto.Gen.Migration.html"><code class="inline">mix ecto.gen.migration</code></a></span>
</h3>
<p>Migrations are a programmatic, repeatable way to affect changes to a database schema. Migrations are also just modules, and we can create them with the <a href="https://hexdocs.pm/ecto_sql/3.10.1/Mix.Tasks.Ecto.Gen.Migration.html"><code class="inline">ecto.gen.migration</code></a> task. Let's walk through the steps to create a migration for a new comments table.</p><p>We simply need to invoke the task with a <code class="inline">snake_case</code> version of the module name that we want. Preferably, the name will describe what we want the migration to do.</p><pre><code class="makeup console" translate="no"><span class="gp unselectable">$ </span><span class="">mix ecto.gen.migration add_comments_table
</span><span class="">* creating priv/repo/migrations
</span><span class="">* creating priv/repo/migrations/20150318001628_add_comments_table.exs
</span></code></pre><p>Notice that the migration's filename begins with a string representation of the date and time the file was created.</p><p>Let's take a look at the file <code class="inline">ecto.gen.migration</code> has generated for us at <code class="inline">priv/repo/migrations/20150318001628_add_comments_table.exs</code>.</p><pre><code class="makeup elixir" translate="no"><span class="kd">defmodule</span><span class="w"> </span><span class="nc">Hello.Repo.Migrations.AddCommentsTable</span><span class="w"> </span><span class="k" data-group-id="2740779922-1">do</span><span class="w">
  </span><span class="kn">use</span><span class="w"> </span><span class="nc">Ecto.Migration</span><span class="w">

  </span><span class="kd">def</span><span class="w"> </span><span class="nf">change</span><span class="w"> </span><span class="k" data-group-id="2740779922-2">do</span><span class="w">
  </span><span class="k" data-group-id="2740779922-2">end</span><span class="w">
</span><span class="k" data-group-id="2740779922-1">end</span></code></pre><p>Notice that there is a single function <code class="inline">change/0</code> which will handle both forward migrations and rollbacks. We'll define the schema changes that we want using Ecto's handy DSL, and Ecto will figure out what to do depending on whether we are rolling forward or rolling back. Very nice indeed.</p><p>What we want to do is create a <code class="inline">comments</code> table with a <code class="inline">body</code> column, a <code class="inline">word_count</code> column, and timestamp columns for <code class="inline">inserted_at</code> and <code class="inline">updated_at</code>.</p><pre><code class="makeup elixir" translate="no"><span class="o">.</span><span class="w"> </span><span class="o">.</span><span class="w"> </span><span class="o">.</span><span class="w">
</span><span class="kd">def</span><span class="w"> </span><span class="nf">change</span><span class="w"> </span><span class="k" data-group-id="2952484742-1">do</span><span class="w">
  </span><span class="n">create</span><span class="w"> </span><span class="n">table</span><span class="p" data-group-id="2952484742-2">(</span><span class="ss">:comments</span><span class="p" data-group-id="2952484742-2">)</span><span class="w"> </span><span class="k" data-group-id="2952484742-3">do</span><span class="w">
    </span><span class="n">add</span><span class="w"> </span><span class="ss">:body</span><span class="p">,</span><span class="w"> </span><span class="ss">:string</span><span class="w">
    </span><span class="n">add</span><span class="w"> </span><span class="ss">:word_count</span><span class="p">,</span><span class="w"> </span><span class="ss">:integer</span><span class="w">
    </span><span class="n">timestamps</span><span class="p" data-group-id="2952484742-4">(</span><span class="p" data-group-id="2952484742-4">)</span><span class="w">
  </span><span class="k" data-group-id="2952484742-3">end</span><span class="w">
</span><span class="k" data-group-id="2952484742-1">end</span><span class="w">
</span><span class="o">.</span><span class="w"> </span><span class="o">.</span><span class="w"> </span><span class="o">.</span></code></pre><p>Again, we can run this task with the <code class="inline">-r</code> flag and another repo if we need to.</p><pre><code class="makeup console" translate="no"><span class="gp unselectable">$ </span><span class="">mix ecto.gen.migration -r OurCustom.Repo add_users
</span><span class="">* creating priv/repo/migrations
</span><span class="">* creating priv/repo/migrations/20150318172927_add_users.exs
</span></code></pre><p>For more information on how to modify your database schema please refer to the
<a href="https://hexdocs.pm/ecto_sql/Ecto.Migration.html">Ecto's migration DSL docs</a>.
For example, to alter an existing schema see the documentation on Ectoâ€™s
<a href="https://hexdocs.pm/ecto_sql/3.10.1/Ecto.Migration.html#alter/2"><code class="inline">alter/2</code></a> function.</p><p>That's it! We're ready to run our migration.</p><h3 id="mix-ecto-migrate" class="section-heading">
  <a href="#mix-ecto-migrate" class="hover-link">
    <i class="ri-link-m" aria-hidden="true"></i>
  </a>
  <span class="text"><a href="https://hexdocs.pm/ecto_sql/3.10.1/Mix.Tasks.Ecto.Migrate.html"><code class="inline">mix ecto.migrate</code></a></span>
</h3>
<p>Once we have our migration module ready, we can simply run <a href="https://hexdocs.pm/ecto_sql/3.10.1/Mix.Tasks.Ecto.Migrate.html"><code class="inline">mix ecto.migrate</code></a> to have our changes applied to the database.</p><pre><code class="makeup console" translate="no"><span class="gp unselectable">$ </span><span class="">mix ecto.migrate
</span><span class="">[info] == Running Hello.Repo.Migrations.AddCommentsTable.change/0 forward
</span><span class="">[info] create table comments
</span><span class="">[info] == Migrated in 0.1s
</span></code></pre><p>When we first run <code class="inline">ecto.migrate</code>, it will create a table for us called <code class="inline">schema_migrations</code>. This will keep track of all the migrations which we run by storing the timestamp portion of the migration's filename.</p><p>Here's what the <code class="inline">schema_migrations</code> table looks like.</p><pre><code class="makeup console" translate="no"><span class="">hello_dev=# select * from schema_migrations;
</span><span class="">version        |     inserted_at
</span><span class="">---------------+---------------------
</span><span class="">20150317170448 | 2015-03-17 21:07:26
</span><span class="">20150318001628 | 2015-03-18 01:45:00
</span><span class="">(2 rows)
</span></code></pre><p>When we roll back a migration, <a href="#mix-ecto-rollback"><code class="inline">ecto.rollback</code></a> will remove the record representing this migration from <code class="inline">schema_migrations</code>.</p><p>By default, <code class="inline">ecto.migrate</code> will execute all pending migrations. We can exercise more control over which migrations we run by specifying some options when we run the task.</p><p>We can specify the number of pending migrations we would like to run with the <code class="inline">-n</code> or <code class="inline">--step</code> options.</p><pre><code class="makeup console" translate="no"><span class="gp unselectable">$ </span><span class="">mix ecto.migrate -n 2
</span><span class="">[info] == Running Hello.Repo.Migrations.CreatePost.change/0 forward
</span><span class="">[info] create table posts
</span><span class="">[info] == Migrated in 0.0s
</span><span class="">[info] == Running Hello.Repo.Migrations.AddCommentsTable.change/0 forward
</span><span class="">[info] create table comments
</span><span class="">[info] == Migrated in 0.0s
</span></code></pre><p>The <code class="inline">--step</code> option will behave the same way.</p><pre><code class="makeup console" translate="no"><span class="">mix ecto.migrate --step 2
</span></code></pre><p>The <code class="inline">--to</code> option will run all migrations up to and including given version.</p><pre><code class="makeup console" translate="no"><span class="">mix ecto.migrate --to 20150317170448
</span></code></pre><h3 id="mix-ecto-rollback" class="section-heading">
  <a href="#mix-ecto-rollback" class="hover-link">
    <i class="ri-link-m" aria-hidden="true"></i>
  </a>
  <span class="text"><a href="https://hexdocs.pm/ecto_sql/3.10.1/Mix.Tasks.Ecto.Rollback.html"><code class="inline">mix ecto.rollback</code></a></span>
</h3>
<p>The <a href="https://hexdocs.pm/ecto_sql/3.10.1/Mix.Tasks.Ecto.Rollback.html"><code class="inline">ecto.rollback</code></a> task will reverse the last migration we have run, undoing the schema changes. <a href="#mix-ecto-migrate"><code class="inline">ecto.migrate</code></a> and <code class="inline">ecto.rollback</code> are mirror images of each other.</p><pre><code class="makeup console" translate="no"><span class="gp unselectable">$ </span><span class="">mix ecto.rollback
</span><span class="">[info] == Running Hello.Repo.Migrations.AddCommentsTable.change/0 backward
</span><span class="">[info] drop table comments
</span><span class="">[info] == Migrated in 0.0s
</span></code></pre><p><code class="inline">ecto.rollback</code> will handle the same options as <code class="inline">ecto.migrate</code>, so <code class="inline">-n</code>, <code class="inline">--step</code>, <code class="inline">-v</code>, and <code class="inline">--to</code> will behave as they do for <code class="inline">ecto.migrate</code>.</p><h2 id="creating-our-own-mix-task" class="section-heading">
  <a href="#creating-our-own-mix-task" class="hover-link">
    <i class="ri-link-m" aria-hidden="true"></i>
  </a>
  <span class="text">Creating our own Mix task</span>
</h2>
<p>As we've seen throughout this guide, both Mix itself and the dependencies we bring in to our application provide a number of really useful tasks for free. Since neither of these could possibly anticipate all our individual application's needs, Mix allows us to create our own custom tasks. That's exactly what we are going to do now.</p><p>The first thing we need to do is create a <code class="inline">mix/tasks/</code> directory inside of <code class="inline">lib/</code>. This is where any of our application specific Mix tasks will go.</p><pre><code class="makeup console" translate="no"><span class="gp unselectable">$ </span><span class="">mkdir -p lib/mix/tasks/
</span></code></pre><p>Inside that directory, let's create a new file, <code class="inline">hello.greeting.ex</code>, that looks like this.</p><pre><code class="makeup elixir" translate="no"><span class="kd">defmodule</span><span class="w"> </span><span class="nc">Mix.Tasks.Hello.Greeting</span><span class="w"> </span><span class="k" data-group-id="1792564240-1">do</span><span class="w">
  </span><span class="kn">use</span><span class="w"> </span><span class="nc">Mix.Task</span><span class="w">

  </span><span class="na">@shortdoc</span><span class="w"> </span><span class="s">&quot;Sends a greeting to us from Hello Phoenix&quot;</span><span class="w">

  </span><span class="na">@moduledoc</span><span class="w"> </span><span class="s">&quot;&quot;&quot;
  This is where we would put any long form documentation and doctests.
  &quot;&quot;&quot;</span><span class="w">

  </span><span class="na">@impl</span><span class="w"> </span><span class="nc">Mix.Task</span><span class="w">
  </span><span class="kd">def</span><span class="w"> </span><span class="nf">run</span><span class="p" data-group-id="1792564240-2">(</span><span class="c">_args</span><span class="p" data-group-id="1792564240-2">)</span><span class="w"> </span><span class="k" data-group-id="1792564240-3">do</span><span class="w">
    </span><span class="nc">Mix</span><span class="o">.</span><span class="n">shell</span><span class="p" data-group-id="1792564240-4">(</span><span class="p" data-group-id="1792564240-4">)</span><span class="o">.</span><span class="n">info</span><span class="p" data-group-id="1792564240-5">(</span><span class="s">&quot;Greetings from the Hello Phoenix Application!&quot;</span><span class="p" data-group-id="1792564240-5">)</span><span class="w">
  </span><span class="k" data-group-id="1792564240-3">end</span><span class="w">

  </span><span class="c1"># We can define other functions as needed here.</span><span class="w">
</span><span class="k" data-group-id="1792564240-1">end</span></code></pre><p>Let's take a quick look at the moving parts involved in a working Mix task.</p><p>The first thing we need to do is name our module. All tasks must be defined in the <code class="inline">Mix.Tasks</code> namespace. We'd like to invoke this as <code class="inline">mix hello.greeting</code>, so we complete the module name with
<code class="inline">Hello.Greeting</code>.</p><p>The <code class="inline">use Mix.Task</code> line brings in functionality from Mix that makes this module <a href="https://hexdocs.pm/mix/Mix.Task.html">behave as a Mix task</a>.</p><p>The <code class="inline">@shortdoc</code> module attribute holds a string which will describe our task when users invoke <a href="https://hexdocs.pm/mix/Mix.Tasks.Help.html"><code class="inline">mix help</code></a>.</p><p><code class="inline">@moduledoc</code> serves the same function that it does in any module. It's where we can put long-form documentation and doctests, if we have any.</p><p>The <a href="https://hexdocs.pm/mix/Mix.Task.html#c:run/1"><code class="inline">run/1</code></a> function is the critical heart of any Mix task. It's the function that does all the work when users invoke our task. In ours, all we do is send a greeting from our app, but we can implement our <code class="inline">run/1</code> function to do whatever we need it to. Note that <a href="https://hexdocs.pm/mix/Mix.html#shell/0"><code class="inline">Mix.shell().info/1</code></a> is the preferred way to print text back out to the user.</p><p>Of course, our task is just a module, so we can define other private functions as needed to support our <code class="inline">run/1</code> function.</p><p>Now that we have our task module defined, our next step is to compile the application.</p><pre><code class="makeup console" translate="no"><span class="gp unselectable">$ </span><span class="">mix compile
</span><span class="">Compiled lib/tasks/hello.greeting.ex
</span><span class="">Generated hello.app
</span></code></pre><p>Now our new task should be visible to <a href="https://hexdocs.pm/mix/Mix.Tasks.Help.html"><code class="inline">mix help</code></a>.</p><pre><code class="makeup console" translate="no"><span class="gp unselectable">$ </span><span class="">mix help --search hello
</span><span class="">mix hello.greeting # Sends a greeting to us from Hello Phoenix
</span></code></pre><p>Notice that <a href="https://hexdocs.pm/mix/Mix.Tasks.Help.html"><code class="inline">mix help</code></a> displays the text we put into the <code class="inline">@shortdoc</code> along with the name of our task.</p><p>So far, so good, but does it work?</p><pre><code class="makeup console" translate="no"><span class="gp unselectable">$ </span><span class="">mix hello.greeting
</span><span class="">Greetings from the Hello Phoenix Application!
</span></code></pre><p>Indeed it does.</p><p>If you want to make your new Mix task to use your application's infrastructure, you need to make sure the application is started and configure when Mix task is being executed. This is particularly useful if you need to access your database from within the Mix task. Thankfully, Mix makes it really easy for us via the <code class="inline">@requirements</code> module attribute:</p><pre><code class="makeup elixir" translate="no"><span class="w">  </span><span class="na">@requirements</span><span class="w"> </span><span class="p" data-group-id="6609466239-1">[</span><span class="s">&quot;app.start&quot;</span><span class="p" data-group-id="6609466239-1">]</span><span class="w">

  </span><span class="na">@impl</span><span class="w"> </span><span class="nc">Mix.Task</span><span class="w">
  </span><span class="kd">def</span><span class="w"> </span><span class="nf">run</span><span class="p" data-group-id="6609466239-2">(</span><span class="c">_args</span><span class="p" data-group-id="6609466239-2">)</span><span class="w"> </span><span class="k" data-group-id="6609466239-3">do</span><span class="w">
    </span><span class="nc">Mix</span><span class="o">.</span><span class="n">shell</span><span class="p" data-group-id="6609466239-4">(</span><span class="p" data-group-id="6609466239-4">)</span><span class="o">.</span><span class="n">info</span><span class="p" data-group-id="6609466239-5">(</span><span class="s">&quot;Now I have access to Repo and other goodies!&quot;</span><span class="p" data-group-id="6609466239-5">)</span><span class="w">
    </span><span class="nc">Mix</span><span class="o">.</span><span class="n">shell</span><span class="p" data-group-id="6609466239-6">(</span><span class="p" data-group-id="6609466239-6">)</span><span class="o">.</span><span class="n">info</span><span class="p" data-group-id="6609466239-7">(</span><span class="s">&quot;Greetings from the Hello Phoenix Application!&quot;</span><span class="p" data-group-id="6609466239-7">)</span><span class="w">
  </span><span class="k" data-group-id="6609466239-3">end</span></code></pre>

  </body>
</html>
