<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"
      xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>mix phx.gen.live - Phoenix v1.7.21</title>
    <meta name="generator" content="ExDoc v0.37.3" />
    <link type="text/css" rel="stylesheet" href="dist/epub-elixir-FNUUKFP7.css" />
    <script src="dist/epub-4WIP524F.js"></script>

  </head>
  <body class="content-inner">

    <h1 id="content">
mix phx.gen.live 
    </h1>


      <section id="moduledoc" class="docstring">
<p>Generates LiveView, templates, and context for a resource.</p><pre><code class="makeup elixir" translate="no"><samp class="n">mix</samp><samp class="w"> </samp><samp class="n">phx</samp><samp class="o">.</samp><samp class="n">gen</samp><samp class="o">.</samp><samp class="n">live</samp><samp class="w"> </samp><samp class="nc">Accounts</samp><samp class="w"> </samp><samp class="nc">User</samp><samp class="w"> </samp><samp class="n">users</samp><samp class="w"> </samp><samp class="n">name</samp><samp class="ss">:string</samp><samp class="w"> </samp><samp class="n">age</samp><samp class="ss">:integer</samp></code></pre><p>The first argument is the context module.  The context is an Elixir module
that serves as an API boundary for the given resource. A context often holds
many related resources.  Therefore, if the context already exists, it will be
augmented with functions for the given resource.</p><p>The second argument is the schema module.  The schema is responsible for
mapping the database fields into an Elixir struct.</p><p>The remaining arguments are the schema module plural name (used as the schema
table name), and an optional list of attributes as their respective names and
types.  See <a href="Mix.Tasks.Phx.Gen.Schema.xhtml"><code class="inline">mix help phx.gen.schema</code></a> for more information on attributes.</p><p>When this command is run for the first time, a <code class="inline">Components</code> module will be
created if it does not exist, along with the resource level LiveViews and
components, including <code class="inline">UserLive.Index</code>, <code class="inline">UserLive.Show</code>, and
<code class="inline">UserLive.FormComponent</code> modules for the new resource.</p><blockquote><p>Note: A resource may also be split
over distinct contexts (such as <code class="inline">Accounts.User</code> and <code class="inline">Payments.User</code>).</p></blockquote><p>Overall, this generator will add the following files:</p><ul><li>a context module in <code class="inline">lib/app/accounts.ex</code> for the accounts API</li><li>a schema in <code class="inline">lib/app/accounts/user.ex</code>, with a <code class="inline">users</code> table</li><li>a LiveView in <code class="inline">lib/app_web/live/user_live/show.ex</code></li><li>a LiveView in <code class="inline">lib/app_web/live/user_live/index.ex</code></li><li>a LiveComponent in <code class="inline">lib/app_web/live/user_live/form_component.ex</code></li><li>a helpers module in <code class="inline">lib/app_web/live/live_helpers.ex</code> with a modal</li></ul><p>After file generation is complete, there will be output regarding required
updates to the <code class="inline">lib/app_web/router.ex</code> file.</p><pre><code class="makeup elixir" translate="no"><samp class="nc">Add</samp><samp class="w"> </samp><samp class="n">the</samp><samp class="w"> </samp><samp class="n">live</samp><samp class="w"> </samp><samp class="n">routes</samp><samp class="w"> </samp><samp class="n">to</samp><samp class="w"> </samp><samp class="n">your</samp><samp class="w"> </samp><samp class="n">browser</samp><samp class="w"> </samp><samp class="n">scope</samp><samp class="w"> </samp><samp class="ow">in</samp><samp class="w"> </samp><samp class="n">lib</samp><samp class="o">/</samp><samp class="n">app_web</samp><samp class="o">/</samp><samp class="n">router</samp><samp class="o">.</samp><samp class="ss">ex</samp><samp class="p">:</samp><samp class="w">

  </samp><samp class="n">live</samp><samp class="w"> </samp><samp class="s">&quot;/users&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="nc">UserLive.Index</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:index</samp><samp class="w">
  </samp><samp class="n">live</samp><samp class="w"> </samp><samp class="s">&quot;/users/new&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="nc">UserLive.Index</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:new</samp><samp class="w">
  </samp><samp class="n">live</samp><samp class="w"> </samp><samp class="s">&quot;/users/:id/edit&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="nc">UserLive.Index</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:edit</samp><samp class="w">

  </samp><samp class="n">live</samp><samp class="w"> </samp><samp class="s">&quot;/users/:id&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="nc">UserLive.Show</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:show</samp><samp class="w">
  </samp><samp class="n">live</samp><samp class="w"> </samp><samp class="s">&quot;/users/:id/show/edit&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="nc">UserLive.Show</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:edit</samp></code></pre><h2 id="module-the-context-app" class="section-heading">
  <a href="#module-the-context-app" class="hover-link">
    <i class="ri-link-m" aria-hidden="true"></i>
  </a>
  <span class="text">The context app</span>
</h2>
<p>A migration file for the repository and test files for the context and
controller features will also be generated.</p><p>The location of the web files (LiveView's, views, templates, etc.) in an
umbrella application will vary based on the <code class="inline">:context_app</code> config located
in your applications <code class="inline">:generators</code> configuration. When set, the Phoenix
generators will generate web files directly in your lib and test folders
since the application is assumed to be isolated to web specific functionality.
If <code class="inline">:context_app</code> is not set, the generators will place web related lib
and test files in a <code class="inline">web/</code> directory since the application is assumed
to be handling both web and domain specific functionality.
Example configuration:</p><pre><code class="makeup elixir" translate="no"><samp class="n">config</samp><samp class="w"> </samp><samp class="ss">:my_app_web</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:generators</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">context_app</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="ss">:my_app</samp></code></pre><p>Alternatively, the <code class="inline">--context-app</code> option may be supplied to the generator:</p><pre><code class="makeup elixir" translate="no"><samp class="n">mix</samp><samp class="w"> </samp><samp class="n">phx</samp><samp class="o">.</samp><samp class="n">gen</samp><samp class="o">.</samp><samp class="n">live</samp><samp class="w"> </samp><samp class="nc">Accounts</samp><samp class="w"> </samp><samp class="nc">User</samp><samp class="w"> </samp><samp class="n">users</samp><samp class="w"> </samp><samp class="o">--</samp><samp class="n">context</samp><samp class="o">-</samp><samp class="n">app</samp><samp class="w"> </samp><samp class="n">warehouse</samp></code></pre><h2 id="module-web-namespace" class="section-heading">
  <a href="#module-web-namespace" class="hover-link">
    <i class="ri-link-m" aria-hidden="true"></i>
  </a>
  <span class="text">Web namespace</span>
</h2>
<p>By default, the LiveView modules will be namespaced by the web module.
You can customize the web module namespace by passing the <code class="inline">--web</code> flag with a
module name, for example:</p><pre><code class="makeup elixir" translate="no"><samp class="n">mix</samp><samp class="w"> </samp><samp class="n">phx</samp><samp class="o">.</samp><samp class="n">gen</samp><samp class="o">.</samp><samp class="n">live</samp><samp class="w"> </samp><samp class="nc">Accounts</samp><samp class="w"> </samp><samp class="nc">User</samp><samp class="w"> </samp><samp class="n">users</samp><samp class="w"> </samp><samp class="o">--</samp><samp class="n">web</samp><samp class="w"> </samp><samp class="nc">Sales</samp></code></pre><p>Which would generate the LiveViews in <code class="inline">lib/app_web/live/sales/user_live/</code>,
namespaced <code class="inline">AppWeb.Sales.UserLive</code> instead of <code class="inline">AppWeb.UserLive</code>.</p><h2 id="module-customizing-the-context-schema-tables-and-migrations" class="section-heading">
  <a href="#module-customizing-the-context-schema-tables-and-migrations" class="hover-link">
    <i class="ri-link-m" aria-hidden="true"></i>
  </a>
  <span class="text">Customizing the context, schema, tables and migrations</span>
</h2>
<p>In some cases, you may wish to bootstrap HTML templates, LiveViews,
and tests, but leave internal implementation of the context or schema
to yourself. You can use the <code class="inline">--no-context</code> and <code class="inline">--no-schema</code> flags
for file generation control.</p><pre><code class="makeup elixir" translate="no"><samp class="n">mix</samp><samp class="w"> </samp><samp class="n">phx</samp><samp class="o">.</samp><samp class="n">gen</samp><samp class="o">.</samp><samp class="n">live</samp><samp class="w"> </samp><samp class="nc">Accounts</samp><samp class="w"> </samp><samp class="nc">User</samp><samp class="w"> </samp><samp class="n">users</samp><samp class="w"> </samp><samp class="o">--</samp><samp class="n">no</samp><samp class="o">-</samp><samp class="n">context</samp><samp class="w"> </samp><samp class="o">--</samp><samp class="n">no</samp><samp class="o">-</samp><samp class="n">schema</samp></code></pre><p>In the cases above, tests are still generated, but they will all fail.</p><p>You can also change the table name or configure the migrations to
use binary ids for primary keys, see <a href="Mix.Tasks.Phx.Gen.Schema.xhtml"><code class="inline">mix help phx.gen.schema</code></a> for more
information.</p>
      </section>




  </body>
</html>
