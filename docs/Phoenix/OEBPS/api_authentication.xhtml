<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"
      xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>API Authentication - Phoenix v1.7.21</title>
    <meta name="generator" content="ExDoc v0.37.3" />
    <link type="text/css" rel="stylesheet" href="dist/epub-elixir-FNUUKFP7.css" />
    <script src="dist/epub-4WIP524F.js"></script>

  </head>
  <body class="content-inner">

    <h1 id="content">
API Authentication
    </h1>
<blockquote><p><strong>Requirement</strong>: This guide expects that you have gone through the <a href="mix_phx_gen_auth.html"><code class="inline">mix phx.gen.auth</code></a> guide.</p></blockquote><p>This guide shows how to add API authentication on top of <a href="Mix.Tasks.Phx.Gen.Auth.xhtml"><code class="inline">mix phx.gen.auth</code></a>. Since the authentication generator already includes a token table, we use it to store API tokens too, following the best security practices.</p><p>We will break this guide in two parts: augmenting the context and the plug implementation. We will assume that the following <a href="Mix.Tasks.Phx.Gen.Auth.xhtml"><code class="inline">mix phx.gen.auth</code></a> command was executed:</p><pre><code class="makeup shell" translate="no"><span class="gp unselectable">$ </span><span class="">mix phx.gen.auth Accounts User users
</span></code></pre><p>If you ran something else, it should be trivial to adapt the names.</p><h2 id="adding-api-functions-to-the-context" class="section-heading">
  <a href="#adding-api-functions-to-the-context" class="hover-link">
    <i class="ri-link-m" aria-hidden="true"></i>
  </a>
  <span class="text">Adding API functions to the context</span>
</h2>
<p>Our authentication system will require two functions. One to create the API token and another to verify it. Open up <code class="inline">lib/my_app/accounts.ex</code> and add these two new functions:</p><pre><code class="makeup elixir" translate="no"><span class="w">  </span><span class="c1">## API</span><span class="w">

  </span><span class="na">@doc</span><span class="w"> </span><span class="s">&quot;&quot;&quot;
  Creates a new api token for a user.

  The token returned must be saved somewhere safe.
  This token cannot be recovered from the database.
  &quot;&quot;&quot;</span><span class="w">
  </span><span class="kd">def</span><span class="w"> </span><span class="nf">create_user_api_token</span><span class="p" data-group-id="2710273635-1">(</span><span class="n">user</span><span class="p" data-group-id="2710273635-1">)</span><span class="w"> </span><span class="k" data-group-id="2710273635-2">do</span><span class="w">
    </span><span class="p" data-group-id="2710273635-3">{</span><span class="n">encoded_token</span><span class="p">,</span><span class="w"> </span><span class="n">user_token</span><span class="p" data-group-id="2710273635-3">}</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nc">UserToken</span><span class="o">.</span><span class="n">build_email_token</span><span class="p" data-group-id="2710273635-4">(</span><span class="n">user</span><span class="p">,</span><span class="w"> </span><span class="s">&quot;api-token&quot;</span><span class="p" data-group-id="2710273635-4">)</span><span class="w">
    </span><span class="nc">Repo</span><span class="o">.</span><span class="n">insert!</span><span class="p" data-group-id="2710273635-5">(</span><span class="n">user_token</span><span class="p" data-group-id="2710273635-5">)</span><span class="w">
    </span><span class="n">encoded_token</span><span class="w">
  </span><span class="k" data-group-id="2710273635-2">end</span><span class="w">

  </span><span class="na">@doc</span><span class="w"> </span><span class="s">&quot;&quot;&quot;
  Fetches the user by API token.
  &quot;&quot;&quot;</span><span class="w">
  </span><span class="kd">def</span><span class="w"> </span><span class="nf">fetch_user_by_api_token</span><span class="p" data-group-id="2710273635-6">(</span><span class="n">token</span><span class="p" data-group-id="2710273635-6">)</span><span class="w"> </span><span class="k" data-group-id="2710273635-7">do</span><span class="w">
    </span><span class="k">with</span><span class="w"> </span><span class="p" data-group-id="2710273635-8">{</span><span class="ss">:ok</span><span class="p">,</span><span class="w"> </span><span class="n">query</span><span class="p" data-group-id="2710273635-8">}</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nc">UserToken</span><span class="o">.</span><span class="n">verify_email_token_query</span><span class="p" data-group-id="2710273635-9">(</span><span class="n">token</span><span class="p">,</span><span class="w"> </span><span class="s">&quot;api-token&quot;</span><span class="p" data-group-id="2710273635-9">)</span><span class="p">,</span><span class="w">
         </span><span class="p" data-group-id="2710273635-10">%</span><span class="nc" data-group-id="2710273635-10">User</span><span class="p" data-group-id="2710273635-10">{</span><span class="p" data-group-id="2710273635-10">}</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">user</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nc">Repo</span><span class="o">.</span><span class="n">one</span><span class="p" data-group-id="2710273635-11">(</span><span class="n">query</span><span class="p" data-group-id="2710273635-11">)</span><span class="w"> </span><span class="k" data-group-id="2710273635-12">do</span><span class="w">
      </span><span class="p" data-group-id="2710273635-13">{</span><span class="ss">:ok</span><span class="p">,</span><span class="w"> </span><span class="n">user</span><span class="p" data-group-id="2710273635-13">}</span><span class="w">
    </span><span class="k" data-group-id="2710273635-12">else</span><span class="w">
      </span><span class="bp">_</span><span class="w"> </span><span class="o">-&gt;</span><span class="w"> </span><span class="ss">:error</span><span class="w">
    </span><span class="k" data-group-id="2710273635-12">end</span><span class="w">
  </span><span class="k" data-group-id="2710273635-7">end</span></code></pre><p>The new functions use the existing <code class="inline">UserToken</code> functionality to store a new type of token called &quot;api-token&quot;. Because this is an email token, if the user changes their email, the tokens will be expired.</p><p>Also notice we called the second function <code class="inline">fetch_user_by_api_token</code>, instead of <code class="inline">get_user_by_api_token</code>. Because we want to render different status codes in our API, depending if a user was found or not, we return <code class="inline">{:ok, user}</code> or <code class="inline">:error</code>. Elixir's convention is to call these functions <code class="inline">fetch_*</code>, instead of <code class="inline">get_*</code> which would usually return <code class="inline">nil</code> instead of tuples.</p><p>To make sure our new functions work, let's write tests. Open up <code class="inline">test/my_app/accounts_test.exs</code> and add this new describe block:</p><pre><code class="makeup elixir" translate="no"><span class="w">  </span><span class="n">describe</span><span class="w"> </span><span class="s">&quot;create_user_api_token/1 and fetch_user_by_api_token/1&quot;</span><span class="w"> </span><span class="k" data-group-id="9260229462-1">do</span><span class="w">
    </span><span class="n">test</span><span class="w"> </span><span class="s">&quot;creates and fetches by token&quot;</span><span class="w"> </span><span class="k" data-group-id="9260229462-2">do</span><span class="w">
      </span><span class="n">user</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">user_fixture</span><span class="p" data-group-id="9260229462-3">(</span><span class="p" data-group-id="9260229462-3">)</span><span class="w">
      </span><span class="n">token</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nc">Accounts</span><span class="o">.</span><span class="n">create_user_api_token</span><span class="p" data-group-id="9260229462-4">(</span><span class="n">user</span><span class="p" data-group-id="9260229462-4">)</span><span class="w">
      </span><span class="n">assert</span><span class="w"> </span><span class="nc">Accounts</span><span class="o">.</span><span class="n">fetch_user_by_api_token</span><span class="p" data-group-id="9260229462-5">(</span><span class="n">token</span><span class="p" data-group-id="9260229462-5">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="p" data-group-id="9260229462-6">{</span><span class="ss">:ok</span><span class="p">,</span><span class="w"> </span><span class="n">user</span><span class="p" data-group-id="9260229462-6">}</span><span class="w">
      </span><span class="n">assert</span><span class="w"> </span><span class="nc">Accounts</span><span class="o">.</span><span class="n">fetch_user_by_api_token</span><span class="p" data-group-id="9260229462-7">(</span><span class="s">&quot;invalid&quot;</span><span class="p" data-group-id="9260229462-7">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="ss">:error</span><span class="w">
    </span><span class="k" data-group-id="9260229462-2">end</span><span class="w">
  </span><span class="k" data-group-id="9260229462-1">end</span></code></pre><p>If you run the tests, they will actually fail. Something similar to this:</p><pre><code class="makeup elixir" translate="no"><span class="mi">1</span><span class="p">)</span><span class="w"> </span><span class="n">test</span><span class="w"> </span><span class="n">create_user_api_token</span><span class="o">/</span><span class="mi">1</span><span class="w"> </span><span class="ow">and</span><span class="w"> </span><span class="n">fetch_user_by_api_token</span><span class="o">/</span><span class="mi">1</span><span class="w"> </span><span class="n">creates</span><span class="w"> </span><span class="ow">and</span><span class="w"> </span><span class="n">verify</span><span class="w"> </span><span class="n">token</span><span class="w"> </span><span class="p" data-group-id="1384822095-1">(</span><span class="nc">Demo.AccountsTest</span><span class="p" data-group-id="1384822095-1">)</span><span class="w">
   </span><span class="n">test</span><span class="o">/</span><span class="n">demo</span><span class="o">/</span><span class="n">accounts_test</span><span class="o">.</span><span class="n">exs</span><span class="p">:</span><span class="mi">21</span><span class="w">
   </span><span class="gt">** (FunctionClauseError) no function clause matching in Demo.Accounts.UserToken.days_for_context/1</span><span class="w">

   </span><span class="nc">The</span><span class="w"> </span><span class="n">following</span><span class="w"> </span><span class="n">arguments</span><span class="w"> </span><span class="n">were</span><span class="w"> </span><span class="n">given</span><span class="w"> </span><span class="n">to</span><span class="w"> </span><span class="nc">Demo.Accounts.UserToken</span><span class="o">.</span><span class="n">days_for_context</span><span class="o">/</span><span class="mi">1</span><span class="p">:</span><span class="w">

       </span><span class="c1"># 1</span><span class="w">
       </span><span class="s">&quot;api-token&quot;</span><span class="w">

   </span><span class="nc">Attempted</span><span class="w"> </span><span class="n">function</span><span class="w"> </span><span class="n">clauses</span><span class="w"> </span><span class="p" data-group-id="1384822095-2">(</span><span class="n">showing</span><span class="w"> </span><span class="mi">2</span><span class="w"> </span><span class="n">out</span><span class="w"> </span><span class="n">of</span><span class="w"> </span><span class="mi">2</span><span class="p" data-group-id="1384822095-2">)</span><span class="p">:</span><span class="w">

       </span><span class="kd">defp</span><span class="w"> </span><span class="nf">days_for_context</span><span class="p" data-group-id="1384822095-3">(</span><span class="s">&quot;confirm&quot;</span><span class="p" data-group-id="1384822095-3">)</span><span class="w">
       </span><span class="kd">defp</span><span class="w"> </span><span class="nf">days_for_context</span><span class="p" data-group-id="1384822095-4">(</span><span class="s">&quot;reset_password&quot;</span><span class="p" data-group-id="1384822095-4">)</span><span class="w">

   </span><span class="ss">code</span><span class="p">:</span><span class="w"> </span><span class="n">assert</span><span class="w"> </span><span class="nc">Accounts</span><span class="o">.</span><span class="n">verify_api_token</span><span class="p" data-group-id="1384822095-5">(</span><span class="n">token</span><span class="p" data-group-id="1384822095-5">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="p" data-group-id="1384822095-6">{</span><span class="ss">:ok</span><span class="p">,</span><span class="w"> </span><span class="n">user</span><span class="p" data-group-id="1384822095-6">}</span><span class="w">
   </span><span class="ss">stacktrace</span><span class="p">:</span><span class="w">
     </span><span class="p" data-group-id="1384822095-7">(</span><span class="n">demo</span><span class="w"> </span><span class="mf">0.1</span><span class="o">.</span><span class="mi">0</span><span class="p" data-group-id="1384822095-7">)</span><span class="w"> </span><span class="n">lib</span><span class="o">/</span><span class="n">demo</span><span class="o">/</span><span class="n">accounts</span><span class="o">/</span><span class="n">user_token</span><span class="o">.</span><span class="n">ex</span><span class="p">:</span><span class="mi">129</span><span class="p">:</span><span class="w"> </span><span class="nc">Demo.Accounts.UserToken</span><span class="o">.</span><span class="n">days_for_context</span><span class="o">/</span><span class="mi">1</span><span class="w">
     </span><span class="p" data-group-id="1384822095-8">(</span><span class="n">demo</span><span class="w"> </span><span class="mf">0.1</span><span class="o">.</span><span class="mi">0</span><span class="p" data-group-id="1384822095-8">)</span><span class="w"> </span><span class="n">lib</span><span class="o">/</span><span class="n">demo</span><span class="o">/</span><span class="n">accounts</span><span class="o">/</span><span class="n">user_token</span><span class="o">.</span><span class="n">ex</span><span class="p">:</span><span class="mi">114</span><span class="p">:</span><span class="w"> </span><span class="nc">Demo.Accounts.UserToken</span><span class="o">.</span><span class="n">verify_email_token_query</span><span class="o">/</span><span class="mi">2</span><span class="w">
     </span><span class="p" data-group-id="1384822095-9">(</span><span class="n">demo</span><span class="w"> </span><span class="mf">0.1</span><span class="o">.</span><span class="mi">0</span><span class="p" data-group-id="1384822095-9">)</span><span class="w"> </span><span class="n">lib</span><span class="o">/</span><span class="n">demo</span><span class="o">/</span><span class="n">accounts</span><span class="o">.</span><span class="n">ex</span><span class="p">:</span><span class="mi">301</span><span class="p">:</span><span class="w"> </span><span class="nc">Demo.Accounts</span><span class="o">.</span><span class="n">verify_api_token</span><span class="o">/</span><span class="mi">1</span><span class="w">
     </span><span class="n">test</span><span class="o">/</span><span class="n">demo</span><span class="o">/</span><span class="n">accounts_test</span><span class="o">.</span><span class="n">exs</span><span class="p">:</span><span class="mi">24</span><span class="p">:</span><span class="w"> </span><span class="p" data-group-id="1384822095-10">(</span><span class="n">test</span><span class="p" data-group-id="1384822095-10">)</span></code></pre><p>If you prefer, try looking at the error and fixing it yourself. The explanation will come next.</p><p>The <code class="inline">UserToken</code> module expects us to declare the validity of each token and we haven't defined one for &quot;api-token&quot;. The length is going to depend on your application and how sensitive it is in terms of security. For this example, let's say the token is valid for 365 days.</p><p>Open up <code class="inline">lib/my_app/accounts/user_token.ex</code>, find where <code class="inline">defp days_for_context</code> is defined, and add a new clause, like this:</p><pre><code class="makeup elixir" translate="no"><span class="w">  </span><span class="kd">defp</span><span class="w"> </span><span class="nf">days_for_context</span><span class="p" data-group-id="5648623228-1">(</span><span class="s">&quot;api-token&quot;</span><span class="p" data-group-id="5648623228-1">)</span><span class="p">,</span><span class="w"> </span><span class="ss">do</span><span class="p">:</span><span class="w"> </span><span class="mi">365</span><span class="w">
  </span><span class="kd">defp</span><span class="w"> </span><span class="nf">days_for_context</span><span class="p" data-group-id="5648623228-2">(</span><span class="s">&quot;confirm&quot;</span><span class="p" data-group-id="5648623228-2">)</span><span class="p">,</span><span class="w"> </span><span class="ss">do</span><span class="p">:</span><span class="w"> </span><span class="na">@confirm_validity_in_days</span><span class="w">
  </span><span class="kd">defp</span><span class="w"> </span><span class="nf">days_for_context</span><span class="p" data-group-id="5648623228-3">(</span><span class="s">&quot;reset_password&quot;</span><span class="p" data-group-id="5648623228-3">)</span><span class="p">,</span><span class="w"> </span><span class="ss">do</span><span class="p">:</span><span class="w"> </span><span class="na">@reset_password_validity_in_days</span></code></pre><p>Now tests should pass and we are ready to move forward!</p><h2 id="api-authentication-plug" class="section-heading">
  <a href="#api-authentication-plug" class="hover-link">
    <i class="ri-link-m" aria-hidden="true"></i>
  </a>
  <span class="text">API authentication plug</span>
</h2>
<p>The last part is to add authentication to our API.</p><p>When we ran <a href="Mix.Tasks.Phx.Gen.Auth.xhtml"><code class="inline">mix phx.gen.auth</code></a>, it generated a <code class="inline">MyAppWeb.UserAuth</code> module with several plugs, which are small functions that receive the <code class="inline">conn</code> and customize our request/response life-cycle. Open up <code class="inline">lib/my_app_web/user_auth.ex</code> and add this new function:</p><pre><code class="makeup elixir" translate="no"><span class="kd">def</span><span class="w"> </span><span class="nf">fetch_api_user</span><span class="p" data-group-id="3809603249-1">(</span><span class="n">conn</span><span class="p">,</span><span class="w"> </span><span class="c">_opts</span><span class="p" data-group-id="3809603249-1">)</span><span class="w"> </span><span class="k" data-group-id="3809603249-2">do</span><span class="w">
  </span><span class="k">with</span><span class="w"> </span><span class="p" data-group-id="3809603249-3">[</span><span class="s">&quot;Bearer &quot;</span><span class="w"> </span><span class="o">&lt;&gt;</span><span class="w"> </span><span class="n">token</span><span class="p" data-group-id="3809603249-3">]</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">get_req_header</span><span class="p" data-group-id="3809603249-4">(</span><span class="n">conn</span><span class="p">,</span><span class="w"> </span><span class="s">&quot;authorization&quot;</span><span class="p" data-group-id="3809603249-4">)</span><span class="p">,</span><span class="w">
       </span><span class="p" data-group-id="3809603249-5">{</span><span class="ss">:ok</span><span class="p">,</span><span class="w"> </span><span class="n">user</span><span class="p" data-group-id="3809603249-5">}</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nc">Accounts</span><span class="o">.</span><span class="n">fetch_user_by_api_token</span><span class="p" data-group-id="3809603249-6">(</span><span class="n">token</span><span class="p" data-group-id="3809603249-6">)</span><span class="w"> </span><span class="k" data-group-id="3809603249-7">do</span><span class="w">
    </span><span class="n">assign</span><span class="p" data-group-id="3809603249-8">(</span><span class="n">conn</span><span class="p">,</span><span class="w"> </span><span class="ss">:current_user</span><span class="p">,</span><span class="w"> </span><span class="n">user</span><span class="p" data-group-id="3809603249-8">)</span><span class="w">
  </span><span class="k" data-group-id="3809603249-7">else</span><span class="w">
    </span><span class="bp">_</span><span class="w"> </span><span class="o">-&gt;</span><span class="w">
      </span><span class="n">conn</span><span class="w">
      </span><span class="o">|&gt;</span><span class="w"> </span><span class="n">send_resp</span><span class="p" data-group-id="3809603249-9">(</span><span class="ss">:unauthorized</span><span class="p">,</span><span class="w"> </span><span class="s">&quot;No access for you&quot;</span><span class="p" data-group-id="3809603249-9">)</span><span class="w">
      </span><span class="o">|&gt;</span><span class="w"> </span><span class="n">halt</span><span class="p" data-group-id="3809603249-10">(</span><span class="p" data-group-id="3809603249-10">)</span><span class="w">
  </span><span class="k" data-group-id="3809603249-7">end</span><span class="w">
</span><span class="k" data-group-id="3809603249-2">end</span></code></pre><p>Our function receives the connection and checks if the &quot;authorization&quot; header has been set with &quot;Bearer TOKEN&quot;, where &quot;TOKEN&quot; is the value returned by <code class="inline">Accounts.create_user_api_token/1</code>. In case the token is not valid or there is no such user, we abort the request.</p><p>Finally, we need to add this <code class="inline">plug</code> to our pipeline. Open up <code class="inline">lib/my_app_web/router.ex</code> and you will find a pipeline for API. Let's add our new plug under it, like this:</p><pre><code class="makeup elixir" translate="no"><span class="w">  </span><span class="n">pipeline</span><span class="w"> </span><span class="ss">:api</span><span class="w"> </span><span class="k" data-group-id="2615542382-1">do</span><span class="w">
    </span><span class="n">plug</span><span class="w"> </span><span class="ss">:accepts</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="2615542382-2">[</span><span class="s">&quot;json&quot;</span><span class="p" data-group-id="2615542382-2">]</span><span class="w">
    </span><span class="n">plug</span><span class="w"> </span><span class="ss">:fetch_api_user</span><span class="w">
  </span><span class="k" data-group-id="2615542382-1">end</span></code></pre><p>Now you are ready to receive and validate API requests. Feel free to open up <code class="inline">test/my_app_web/user_auth_test.exs</code> and write your own test. You can use the tests for other plugs as templates!</p><h2 id="your-turn" class="section-heading">
  <a href="#your-turn" class="hover-link">
    <i class="ri-link-m" aria-hidden="true"></i>
  </a>
  <span class="text">Your turn</span>
</h2>
<p>The overall API authentication flow will depend on your application.</p><p>If you want to use this token in a JavaScript client, you will need to slightly alter the <code class="inline">UserSessionController</code> to invoke <code class="inline">Accounts.create_user_api_token/1</code> and return a JSON response and include the token returned it.</p><p>If you want to provide APIs for 3rd-party users, you will need to allow them to create tokens, and show the result of <code class="inline">Accounts.create_user_api_token/1</code> to them. They must save these tokens somewhere safe and include them as part of their requests using the &quot;authorization&quot; header.</p>

  </body>
</html>
