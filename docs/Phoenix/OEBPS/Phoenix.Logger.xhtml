<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"
      xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>Phoenix.Logger - Phoenix v1.7.21</title>
    <meta name="generator" content="ExDoc v0.37.3" />
    <link type="text/css" rel="stylesheet" href="dist/epub-elixir-FNUUKFP7.css" />
    <script src="dist/epub-4WIP524F.js"></script>

  </head>
  <body class="content-inner">

    <h1 id="content">
Phoenix.Logger 
    </h1>


      <section id="moduledoc" class="docstring">
<p>Instrumenter to handle logging of various instrumentation events.</p><h2 id="module-instrumentation" class="section-heading">
  <a href="#module-instrumentation" class="hover-link">
    <i class="ri-link-m" aria-hidden="true"></i>
  </a>
  <span class="text">Instrumentation</span>
</h2>
<p>Phoenix uses the <code class="inline">:telemetry</code> library for instrumentation. The following events
are published by Phoenix with the following measurements and metadata:</p><ul><li><p><code class="inline">[:phoenix, :endpoint, :init]</code> - dispatched by <a href="Phoenix.Endpoint.xhtml"><code class="inline">Phoenix.Endpoint</code></a> after your
Endpoint supervision tree successfully starts</p><ul><li>Measurement: <code class="inline">%{system_time: system_time}</code></li><li>Metadata: <code class="inline">%{pid: pid(), config: Keyword.t(), module: module(), otp_app: atom()}</code></li><li>Disable logging: This event is not logged</li></ul></li><li><p><code class="inline">[:phoenix, :endpoint, :start]</code> - dispatched by <a href="https://hexdocs.pm/plug/1.15.3/Plug.Telemetry.html"><code class="inline">Plug.Telemetry</code></a> in your endpoint,
usually after code reloading</p><ul><li>Measurement: <code class="inline">%{system_time: system_time}</code></li><li>Metadata: <code class="inline">%{conn: Plug.Conn.t, options: Keyword.t}</code></li><li><p>Options: <code class="inline">%{log: Logger.level | false}</code></p></li><li><p>Disable logging: In your endpoint <code class="inline">plug Plug.Telemetry, ..., log: Logger.level | false</code></p></li><li>Configure log level dynamically: <code class="inline">plug Plug.Telemetry, ..., log: {Mod, Fun, Args}</code></li></ul></li><li><p><code class="inline">[:phoenix, :endpoint, :stop]</code> - dispatched by <a href="https://hexdocs.pm/plug/1.15.3/Plug.Telemetry.html"><code class="inline">Plug.Telemetry</code></a> in your
endpoint whenever the response is sent</p><ul><li>Measurement: <code class="inline">%{duration: native_time}</code></li><li>Metadata: <code class="inline">%{conn: Plug.Conn.t, options: Keyword.t}</code></li><li><p>Options: <code class="inline">%{log: Logger.level | false}</code></p></li><li><p>Disable logging: In your endpoint <code class="inline">plug Plug.Telemetry, ..., log: Logger.level | false</code></p></li><li>Configure log level dynamically: <code class="inline">plug Plug.Telemetry, ..., log: {Mod, Fun, Args}</code></li></ul></li><li><p><code class="inline">[:phoenix, :router_dispatch, :start]</code> - dispatched by <a href="Phoenix.Router.xhtml"><code class="inline">Phoenix.Router</code></a>
before dispatching to a matched route</p><ul><li>Measurement: <code class="inline">%{system_time: System.system_time}</code></li><li><p>Metadata: <code class="inline">%{conn: Plug.Conn.t, route: binary, plug: module, plug_opts: term, path_params: map, pipe_through: [atom], log: Logger.level | false}</code></p></li><li>Disable logging: Pass <code class="inline">log: false</code> to the router macro, for example: <code class="inline">get(&quot;/page&quot;, PageController, :index, log: false)</code></li><li>Configure log level dynamically: <code class="inline">get(&quot;/page&quot;, PageController, :index, log: {Mod, Fun, Args})</code></li></ul></li><li><p><code class="inline">[:phoenix, :router_dispatch, :exception]</code> - dispatched by <a href="Phoenix.Router.xhtml"><code class="inline">Phoenix.Router</code></a>
after exceptions on dispatching a route</p><ul><li>Measurement: <code class="inline">%{duration: native_time}</code></li><li><p>Metadata: <code class="inline">%{conn: Plug.Conn.t, kind: :throw | :error | :exit, reason: term(), stacktrace: Exception.stacktrace()}</code></p></li><li>Disable logging: This event is not logged</li></ul></li><li><p><code class="inline">[:phoenix, :router_dispatch, :stop]</code> - dispatched by <a href="Phoenix.Router.xhtml"><code class="inline">Phoenix.Router</code></a>
after successfully dispatching a matched route</p><ul><li>Measurement: <code class="inline">%{duration: native_time}</code></li><li><p>Metadata: <code class="inline">%{conn: Plug.Conn.t, route: binary, plug: module, plug_opts: term, path_params: map, pipe_through: [atom], log: Logger.level | false}</code></p></li><li>Disable logging: This event is not logged</li></ul></li><li><p><code class="inline">[:phoenix, :error_rendered]</code> - dispatched at the end of an error view being rendered</p><ul><li>Measurement: <code class="inline">%{duration: native_time}</code></li><li>Metadata: <code class="inline">%{conn: Plug.Conn.t, status: Plug.Conn.status, kind: Exception.kind, reason: term, stacktrace: Exception.stacktrace}</code></li><li>Disable logging: Set <code class="inline">render_errors: [log: false]</code> on your endpoint configuration</li></ul></li><li><p><code class="inline">[:phoenix, :socket_connected]</code> - dispatched by <a href="Phoenix.Socket.xhtml"><code class="inline">Phoenix.Socket</code></a>, at the end of a socket connection</p><ul><li>Measurement: <code class="inline">%{duration: native_time}</code></li><li><p>Metadata: <code class="inline">%{endpoint: atom, transport: atom, params: term, connect_info: map, vsn: binary, user_socket: atom, result: :ok | :error, serializer: atom, log: Logger.level | false}</code></p></li><li>Disable logging: <code class="inline">use Phoenix.Socket, log: false</code> or <code class="inline">socket &quot;/foo&quot;, MySocket, websocket: [log: false]</code> in your endpoint</li></ul></li><li><p><code class="inline">[:phoenix, :socket_drain]</code> - dispatched by <a href="Phoenix.Socket.xhtml"><code class="inline">Phoenix.Socket</code></a> when using the <code class="inline">:drainer</code> option</p><ul><li>Measurement: <code class="inline">%{count: integer, total: integer, index: integer, rounds: integer}</code></li><li><p>Metadata: <code class="inline">%{endpoint: atom, socket: atom, intervasl: integer, log: Logger.level | false}</code></p></li><li>Disable logging: <code class="inline">use Phoenix.Socket, log: false</code> in your endpoint or pass <code class="inline">:log</code> option in the <code class="inline">:drainer</code> option</li></ul></li><li><p><code class="inline">[:phoenix, :channel_joined]</code> - dispatched at the end of a channel join</p><ul><li>Measurement: <code class="inline">%{duration: native_time}</code></li><li><p>Metadata: <code class="inline">%{result: :ok | :error, params: term, socket: Phoenix.Socket.t}</code></p></li><li>Disable logging: This event cannot be disabled</li></ul></li><li><p><code class="inline">[:phoenix, :channel_handled_in]</code> - dispatched at the end of a channel handle in</p><ul><li>Measurement: <code class="inline">%{duration: native_time}</code></li><li>Metadata: <code class="inline">%{event: binary, params: term, socket: Phoenix.Socket.t}</code></li><li>Disable logging: This event cannot be disabled</li></ul></li></ul><p>To see an example of how Phoenix LiveDashboard uses these events to create
metrics, visit <a href="https://hexdocs.pm/phoenix_live_dashboard/metrics.html">https://hexdocs.pm/phoenix_live_dashboard/metrics.html</a>.</p><h2 id="module-parameter-filtering" class="section-heading">
  <a href="#module-parameter-filtering" class="hover-link">
    <i class="ri-link-m" aria-hidden="true"></i>
  </a>
  <span class="text">Parameter filtering</span>
</h2>
<p>When logging parameters, Phoenix can filter out sensitive parameters
such as passwords and tokens. Parameters to be filtered can be
added via the <code class="inline">:filter_parameters</code> option:</p><pre><code class="makeup elixir" translate="no"><samp class="n">config</samp><samp class="w"> </samp><samp class="ss">:phoenix</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:filter_parameters</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="5936357210-1">[</samp><samp class="s">&quot;password&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;secret&quot;</samp><samp class="p" data-group-id="5936357210-1">]</samp></code></pre><p>With the configuration above, Phoenix will filter any parameter
that contains the terms <code class="inline">password</code> or <code class="inline">secret</code>. The match is
case sensitive.</p><p>Phoenix's default is <code class="inline">[&quot;password&quot;]</code>.</p><p>Phoenix can filter all parameters by default and selectively keep
parameters. This can be configured like so:</p><pre><code class="makeup elixir" translate="no"><samp class="n">config</samp><samp class="w"> </samp><samp class="ss">:phoenix</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:filter_parameters</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="5712307775-1">{</samp><samp class="ss">:keep</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="5712307775-2">[</samp><samp class="s">&quot;id&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;order&quot;</samp><samp class="p" data-group-id="5712307775-2">]</samp><samp class="p" data-group-id="5712307775-1">}</samp></code></pre><p>With the configuration above, Phoenix will filter all parameters,
except those that match exactly <code class="inline">id</code> or <code class="inline">order</code>. If a kept parameter
matches, all parameters nested under that one will also be kept.</p><h2 id="module-dynamic-log-level" class="section-heading">
  <a href="#module-dynamic-log-level" class="hover-link">
    <i class="ri-link-m" aria-hidden="true"></i>
  </a>
  <span class="text">Dynamic log level</span>
</h2>
<p>In some cases you may wish to set the log level dynamically
on a per-request basis. To do so, set the <code class="inline">:log</code> option to
a tuple, <code class="inline">{Mod, Fun, Args}</code>. The <code class="inline">Plug.Conn.t()</code> for the
request will be prepended to the provided list of arguments.</p><p>When invoked, your function must return a
<a href="https://hexdocs.pm/logger/Logger.html#t:level/0"><code class="inline">Logger.level()</code></a> or <code class="inline">false</code> to
disable logging for the request.</p><p>For example, in your Endpoint you might do something like this:</p><pre><code class="makeup elixir" translate="no"><samp class="w">  </samp><samp class="c1"># lib/my_app_web/endpoint.ex</samp><samp class="w">
  </samp><samp class="n">plug</samp><samp class="w"> </samp><samp class="nc">Plug.Telemetry</samp><samp class="p">,</samp><samp class="w">
    </samp><samp class="ss">event_prefix</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="2356907179-1">[</samp><samp class="ss">:phoenix</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:endpoint</samp><samp class="p" data-group-id="2356907179-1">]</samp><samp class="p">,</samp><samp class="w">
    </samp><samp class="ss">log</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="2356907179-2">{</samp><samp class="bp">__MODULE__</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:log_level</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="2356907179-3">[</samp><samp class="p" data-group-id="2356907179-3">]</samp><samp class="p" data-group-id="2356907179-2">}</samp><samp class="w">

  </samp><samp class="c1"># Disables logging for routes like /status/*</samp><samp class="w">
  </samp><samp class="kd">def</samp><samp class="w"> </samp><samp class="nf">log_level</samp><samp class="p" data-group-id="2356907179-4">(</samp><samp class="p" data-group-id="2356907179-5">%{</samp><samp class="ss">path_info</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="p" data-group-id="2356907179-6">[</samp><samp class="s">&quot;status&quot;</samp><samp class="w"> </samp><samp class="o">|</samp><samp class="w"> </samp><samp class="bp">_</samp><samp class="p" data-group-id="2356907179-6">]</samp><samp class="p" data-group-id="2356907179-5">}</samp><samp class="p" data-group-id="2356907179-4">)</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">do</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">false</samp><samp class="w">
  </samp><samp class="kd">def</samp><samp class="w"> </samp><samp class="nf">log_level</samp><samp class="p" data-group-id="2356907179-7">(</samp><samp class="bp">_</samp><samp class="p" data-group-id="2356907179-7">)</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">do</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="ss">:info</samp></code></pre><h2 id="module-disabling" class="section-heading">
  <a href="#module-disabling" class="hover-link">
    <i class="ri-link-m" aria-hidden="true"></i>
  </a>
  <span class="text">Disabling</span>
</h2>
<p>When you are using custom logging system it is not always desirable to enable
<a href="Phoenix.Logger.xhtml"><code class="inline">Phoenix.Logger</code></a> by default. You can always disable this in general by:</p><pre><code class="makeup elixir" translate="no"><samp class="n">config</samp><samp class="w"> </samp><samp class="ss">:phoenix</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:logger</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="no">false</samp></code></pre>
      </section>




  </body>
</html>
