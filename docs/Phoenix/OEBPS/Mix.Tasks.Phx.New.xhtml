<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"
      xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>mix phx.new - Phoenix v1.7.21</title>
    <meta name="generator" content="ExDoc v0.37.3" />
    <link type="text/css" rel="stylesheet" href="dist/epub-elixir-FNUUKFP7.css" />
    <script src="dist/epub-4WIP524F.js"></script>

  </head>
  <body class="content-inner">

    <h1 id="content">
mix phx.new 
    </h1>


      <section id="moduledoc" class="docstring">
<p>Creates a new Phoenix project.</p><p>It expects the path of the project as an argument.</p><pre><code class="makeup shell" translate="no"><samp class="gp unselectable">$ </samp><samp class="">mix phx.new PATH [--module MODULE] [--app APP]
</samp></code></pre><p>A project at the given PATH will be created. The
application name and module name will be retrieved
from the path, unless <code class="inline">--module</code> or <code class="inline">--app</code> is given.</p><h2 id="module-options" class="section-heading">
  <a href="#module-options" class="hover-link">
    <i class="ri-link-m" aria-hidden="true"></i>
  </a>
  <span class="text">Options</span>
</h2>
<ul><li><p><code class="inline">--umbrella</code> - generate an umbrella project,
with one application for your domain, and
a second application for the web interface.</p></li><li><p><code class="inline">--app</code> - the name of the OTP application</p></li><li><p><code class="inline">--module</code> - the name of the base module in
the generated skeleton</p></li><li><p><code class="inline">--database</code> - specify the database adapter for Ecto. One of:</p><ul><li><code class="inline">postgres</code> - via <a href="https://github.com/elixir-ecto/postgrex">https://github.com/elixir-ecto/postgrex</a></li><li><code class="inline">mysql</code> - via <a href="https://github.com/elixir-ecto/myxql">https://github.com/elixir-ecto/myxql</a></li><li><code class="inline">mssql</code> - via <a href="https://github.com/livehelpnow/tds">https://github.com/livehelpnow/tds</a></li><li><code class="inline">sqlite3</code> - via <a href="https://github.com/elixir-sqlite/ecto_sqlite3">https://github.com/elixir-sqlite/ecto_sqlite3</a></li></ul><p>Please check the driver docs for more information
and requirements. Defaults to &quot;postgres&quot;.</p></li><li><p><code class="inline">--adapter</code> - specify the http adapter. One of:</p><ul><li><code class="inline">cowboy</code> - via <a href="https://github.com/elixir-plug/plug_cowboy">https://github.com/elixir-plug/plug_cowboy</a></li><li><code class="inline">bandit</code> - via <a href="https://github.com/mtrudel/bandit">https://github.com/mtrudel/bandit</a></li></ul><p>Please check the adapter docs for more information
and requirements. Defaults to &quot;bandit&quot;.</p></li><li><p><code class="inline">--no-assets</code> - equivalent to <code class="inline">--no-esbuild</code> and <code class="inline">--no-tailwind</code></p></li><li><p><code class="inline">--no-dashboard</code> - do not include Phoenix.LiveDashboard</p></li><li><p><code class="inline">--no-ecto</code> - do not generate Ecto files</p></li><li><p><code class="inline">--no-esbuild</code> - do not include esbuild dependencies and assets.
We do not recommend setting this option, unless for API only
applications, as doing so requires you to manually add and
track JavaScript dependencies</p></li><li><p><code class="inline">--no-gettext</code> - do not generate gettext files</p></li><li><p><code class="inline">--no-html</code> - do not generate HTML views</p></li><li><p><code class="inline">--no-live</code> - comment out LiveView socket setup in your Endpoint
and assets/js/app.js. Automatically disabled if --no-html is given</p></li><li><p><code class="inline">--no-mailer</code> - do not generate Swoosh mailer files</p></li><li><p><code class="inline">--no-tailwind</code> - do not include tailwind dependencies and assets.
The generated markup will still include Tailwind CSS classes, those
are left-in as reference for the subsequent styling of your layout
and components</p></li><li><p><code class="inline">--binary-id</code> - use <code class="inline">binary_id</code> as primary key type in Ecto schemas</p></li><li><p><code class="inline">--verbose</code> - use verbose output</p></li><li><p><code class="inline">-v</code>, <code class="inline">--version</code> - prints the Phoenix installer version</p></li></ul><p>When passing the <code class="inline">--no-ecto</code> flag, Phoenix generators such as
<code class="inline">phx.gen.html</code>, <code class="inline">phx.gen.json</code>, <code class="inline">phx.gen.live</code>, and <code class="inline">phx.gen.context</code>
may no longer work as expected as they generate context files that rely
on Ecto for the database access. In those cases, you can pass the
<code class="inline">--no-context</code> flag to generate most of the HTML and JSON files
but skip the context, allowing you to fill in the blanks as desired.</p><p>Similarly, if <code class="inline">--no-html</code> is given, the files generated by
<code class="inline">phx.gen.html</code> will no longer work, as important HTML components
will be missing.</p><h2 id="module-installation" class="section-heading">
  <a href="#module-installation" class="hover-link">
    <i class="ri-link-m" aria-hidden="true"></i>
  </a>
  <span class="text">Installation</span>
</h2>
<p><a href="https://hexdocs.pm/phx_new/1.8.0-rc.3/Mix.Tasks.Phx.New.html"><code class="inline">mix phx.new</code></a> by default prompts you to fetch and install your
dependencies. You can enable this behaviour by passing the
<code class="inline">--install</code> flag or disable it with the <code class="inline">--no-install</code> flag.</p><h2 id="module-examples" class="section-heading">
  <a href="#module-examples" class="hover-link">
    <i class="ri-link-m" aria-hidden="true"></i>
  </a>
  <span class="text">Examples</span>
</h2>
<pre><code class="makeup shell" translate="no"><samp class="gp unselectable">$ </samp><samp class="">mix phx.new hello_world
</samp></code></pre><p>Is equivalent to:</p><pre><code class="makeup shell" translate="no"><samp class="gp unselectable">$ </samp><samp class="">mix phx.new hello_world --module HelloWorld
</samp></code></pre><p>Or without the HTML and JS bits (useful for APIs):</p><pre><code class="makeup shell" translate="no"><samp class="gp unselectable">$ </samp><samp class="">mix phx.new ~/Workspace/hello_world --no-html --no-assets
</samp></code></pre><p>As an umbrella:</p><pre><code class="makeup shell" translate="no"><samp class="gp unselectable">$ </samp><samp class="">mix phx.new hello --umbrella
</samp></code></pre><p>Would generate the following directory structure and modules:</p><pre><code class="text">hello_umbrella/   Hello.Umbrella
  apps/
    hello/        Hello
    hello_web/    HelloWeb</code></pre><p>You can read more about umbrella projects using the
official <a href="https://hexdocs.pm/elixir/dependencies-and-umbrella-projects.html#umbrella-projects">Elixir guide</a></p><h2 id="module-phx_new_cache_dir" class="section-heading">
  <a href="#module-phx_new_cache_dir" class="hover-link">
    <i class="ri-link-m" aria-hidden="true"></i>
  </a>
  <span class="text"><code class="inline">PHX_NEW_CACHE_DIR</code></span>
</h2>
<p>In rare cases, it may be useful to copy the build from a previously
cached build. To do this, set the <code class="inline">PHX_NEW_CACHE_DIR</code> environment
variable before running <a href="https://hexdocs.pm/phx_new/1.8.0-rc.3/Mix.Tasks.Phx.New.html"><code class="inline">mix phx.new</code></a>. For example, you could generate a
cache by running:</p><pre><code class="makeup shell" translate="no"><samp class="">mix phx.new mycache --no-install &amp;&amp; cd mycache   &amp;&amp; mix deps.get &amp;&amp; mix deps.compile &amp;&amp; mix assets.setup   &amp;&amp; rm -rf assets config lib priv test mix.exs README.md
</samp></code></pre><p>Your cached build directory should contain:</p><pre><code class="makeup elixir" translate="no"><samp class="c">_build</samp><samp class="w">
</samp><samp class="n">deps</samp><samp class="w">
</samp><samp class="n">mix</samp><samp class="o">.</samp><samp class="n">lock</samp></code></pre><p>Then you could run:</p><pre><code class="makeup shell" translate="no"><samp class="">PHX_NEW_CACHE_DIR=/path/to/mycache mix phx.new myapp
</samp></code></pre><p>The entire cache directory will be copied to the new project, replacing
any existing files where conflicts exist.</p>
      </section>




  </body>
</html>
