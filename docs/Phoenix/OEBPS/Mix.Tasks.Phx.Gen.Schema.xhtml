<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"
      xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>mix phx.gen.schema - Phoenix v1.7.21</title>
    <meta name="generator" content="ExDoc v0.37.3" />
    <link type="text/css" rel="stylesheet" href="dist/epub-elixir-FNUUKFP7.css" />
    <script src="dist/epub-4WIP524F.js"></script>

  </head>
  <body class="content-inner">

    <h1 id="content">
mix phx.gen.schema 
    </h1>


      <section id="moduledoc" class="docstring">
<p>Generates an Ecto schema and migration.</p><pre><code class="makeup shell" translate="no"><samp class="gp unselectable">$ </samp><samp class="">mix phx.gen.schema Blog.Post blog_posts title:string views:integer
</samp></code></pre><p>The first argument is the schema module followed by its plural
name (used as the table name).</p><p>The generated schema above will contain:</p><ul><li>a schema file in <code class="inline">lib/my_app/blog/post.ex</code>, with a <code class="inline">blog_posts</code> table</li><li>a migration file for the repository</li></ul><p>The generated migration can be skipped with <code class="inline">--no-migration</code>.</p><h2 id="module-contexts" class="section-heading">
  <a href="#module-contexts" class="hover-link">
    <i class="ri-link-m" aria-hidden="true"></i>
  </a>
  <span class="text">Contexts</span>
</h2>
<p>Your schemas can be generated and added to a separate OTP app.
Make sure your configuration is properly setup or manually
specify the context app with the <code class="inline">--context-app</code> option with
the CLI.</p><p>Via config:</p><pre><code class="makeup elixir" translate="no"><samp class="n">config</samp><samp class="w"> </samp><samp class="ss">:marketing_web</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:generators</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">context_app</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="ss">:marketing</samp></code></pre><p>Via CLI:</p><pre><code class="makeup shell" translate="no"><samp class="gp unselectable">$ </samp><samp class="">mix phx.gen.schema Blog.Post blog_posts title:string views:integer --context-app marketing
</samp></code></pre><h2 id="module-attributes" class="section-heading">
  <a href="#module-attributes" class="hover-link">
    <i class="ri-link-m" aria-hidden="true"></i>
  </a>
  <span class="text">Attributes</span>
</h2>
<p>The resource fields are given using <code class="inline">name:type</code> syntax
where type are the types supported by Ecto. Omitting
the type makes it default to <code class="inline">:string</code>:</p><pre><code class="makeup shell" translate="no"><samp class="gp unselectable">$ </samp><samp class="">mix phx.gen.schema Blog.Post blog_posts title views:integer
</samp></code></pre><p>The following types are supported:</p><ul><li><p><code class="inline">:integer</code></p></li><li><p><code class="inline">:float</code></p></li><li><p><code class="inline">:decimal</code></p></li><li><p><code class="inline">:boolean</code></p></li><li><p><code class="inline">:map</code></p></li><li><p><code class="inline">:string</code></p></li><li><p><code class="inline">:array</code></p></li><li><p><code class="inline">:references</code></p></li><li><p><code class="inline">:text</code></p></li><li><p><code class="inline">:date</code></p></li><li><p><code class="inline">:time</code></p></li><li><p><code class="inline">:time_usec</code></p></li><li><p><code class="inline">:naive_datetime</code></p></li><li><p><code class="inline">:naive_datetime_usec</code></p></li><li><p><code class="inline">:utc_datetime</code></p></li><li><p><code class="inline">:utc_datetime_usec</code></p></li><li><p><code class="inline">:uuid</code></p></li><li><p><code class="inline">:binary</code></p></li><li><p><code class="inline">:enum</code></p></li><li><p><code class="inline">:datetime</code> - An alias for <code class="inline">:naive_datetime</code></p></li></ul><p>The generator also supports references, which we will properly
associate the given column to the primary key column of the
referenced table:</p><pre><code class="makeup shell" translate="no"><samp class="gp unselectable">$ </samp><samp class="">mix phx.gen.schema Blog.Post blog_posts title user_id:references:users
</samp></code></pre><p>This will result in a migration with an <code class="inline">:integer</code> column
of <code class="inline">:user_id</code> and create an index.</p><p>Furthermore an array type can also be given if it is
supported by your database, although it requires the
type of the underlying array element to be given too:</p><pre><code class="makeup shell" translate="no"><samp class="gp unselectable">$ </samp><samp class="">mix phx.gen.schema Blog.Post blog_posts tags:array:string
</samp></code></pre><p>Unique columns can be automatically generated by using:</p><pre><code class="makeup shell" translate="no"><samp class="gp unselectable">$ </samp><samp class="">mix phx.gen.schema Blog.Post blog_posts title:unique unique_int:integer:unique
</samp></code></pre><p>Redact columns can be automatically generated by using:</p><pre><code class="makeup shell" translate="no"><samp class="gp unselectable">$ </samp><samp class="">mix phx.gen.schema Accounts.Superhero superheroes secret_identity:redact password:string:redact
</samp></code></pre><p>Ecto.Enum fields can be generated by using:</p><pre><code class="makeup shell" translate="no"><samp class="gp unselectable">$ </samp><samp class="">mix phx.gen.schema Blog.Post blog_posts title status:enum:unpublished:published:deleted
</samp></code></pre><p>If no data type is given, it defaults to a string.</p><h2 id="module-table" class="section-heading">
  <a href="#module-table" class="hover-link">
    <i class="ri-link-m" aria-hidden="true"></i>
  </a>
  <span class="text">table</span>
</h2>
<p>By default, the table name for the migration and schema will be
the plural name provided for the resource. To customize this value,
a <code class="inline">--table</code> option may be provided. For example:</p><pre><code class="makeup shell" translate="no"><samp class="gp unselectable">$ </samp><samp class="">mix phx.gen.schema Blog.Post posts --table cms_posts
</samp></code></pre><h2 id="module-binary_id" class="section-heading">
  <a href="#module-binary_id" class="hover-link">
    <i class="ri-link-m" aria-hidden="true"></i>
  </a>
  <span class="text">binary_id</span>
</h2>
<p>Generated migration can use <code class="inline">binary_id</code> for schema's primary key
and its references with option <code class="inline">--binary-id</code>.</p><h2 id="module-repo" class="section-heading">
  <a href="#module-repo" class="hover-link">
    <i class="ri-link-m" aria-hidden="true"></i>
  </a>
  <span class="text">repo</span>
</h2>
<p>Generated migration can use <code class="inline">repo</code> to set the migration repository
folder with option <code class="inline">--repo</code>:</p><pre><code class="makeup shell" translate="no"><samp class="gp unselectable">$ </samp><samp class="">mix phx.gen.schema Blog.Post posts --repo MyApp.Repo.Auth
</samp></code></pre><h2 id="module-migration_dir" class="section-heading">
  <a href="#module-migration_dir" class="hover-link">
    <i class="ri-link-m" aria-hidden="true"></i>
  </a>
  <span class="text">migration_dir</span>
</h2>
<p>Generated migrations can be added to a specific <code class="inline">--migration-dir</code> which sets
the migration folder path:</p><pre><code class="makeup shell" translate="no"><samp class="gp unselectable">$ </samp><samp class="">mix phx.gen.schema Blog.Post posts --migration-dir /path/to/directory
</samp></code></pre><h2 id="module-prefix" class="section-heading">
  <a href="#module-prefix" class="hover-link">
    <i class="ri-link-m" aria-hidden="true"></i>
  </a>
  <span class="text">prefix</span>
</h2>
<p>By default migrations and schemas are generated without a prefix.</p><p>For PostgreSQL this sets the &quot;SCHEMA&quot; (typically set via <code class="inline">search_path</code>)
and for MySQL it sets the database for the generated migration and schema.
The prefix can be used to thematically organize your tables on the database level.</p><p>A prefix can be specified with the <code class="inline">--prefix</code> flags. For example:</p><pre><code class="makeup shell" translate="no"><samp class="gp unselectable">$ </samp><samp class="">mix phx.gen.schema Blog.Post posts --prefix blog
</samp></code></pre><section role="note" class="admonition warning"><h4 class="admonition-title warning">Warning</h4><p>The flag does not generate migrations to create the schema / database.
This needs to be done manually or in a separate migration.</p></section><h2 id="module-default-options" class="section-heading">
  <a href="#module-default-options" class="hover-link">
    <i class="ri-link-m" aria-hidden="true"></i>
  </a>
  <span class="text">Default options</span>
</h2>
<p>This generator uses default options provided in the <code class="inline">:generators</code>
configuration of your application. These are the defaults:</p><pre><code class="makeup elixir" translate="no"><samp class="n">config</samp><samp class="w"> </samp><samp class="ss">:your_app</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:generators</samp><samp class="p">,</samp><samp class="w">
  </samp><samp class="ss">migration</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">true</samp><samp class="p">,</samp><samp class="w">
  </samp><samp class="ss">binary_id</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">false</samp><samp class="p">,</samp><samp class="w">
  </samp><samp class="ss">timestamp_type</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="ss">:naive_datetime</samp><samp class="p">,</samp><samp class="w">
  </samp><samp class="ss">sample_binary_id</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;11111111-1111-1111-1111-111111111111&quot;</samp></code></pre><p>You can override those options per invocation by providing corresponding
switches, e.g. <code class="inline">--no-binary-id</code> to use normal ids despite the default
configuration or <code class="inline">--migration</code> to force generation of the migration.</p><h2 id="module-utc-timestamps" class="section-heading">
  <a href="#module-utc-timestamps" class="hover-link">
    <i class="ri-link-m" aria-hidden="true"></i>
  </a>
  <span class="text">UTC timestamps</span>
</h2>
<p>By setting the <code class="inline">:timestamp_type</code> to <code class="inline">:utc_datetime</code>, the timestamps
will be created using the UTC timezone. This results in a <a href="https://hexdocs.pm/elixir/DateTime.html"><code class="inline">DateTime</code></a> struct
instead of a <a href="https://hexdocs.pm/elixir/NaiveDateTime.html"><code class="inline">NaiveDateTime</code></a>. This can also be set to <code class="inline">:utc_datetime_usec</code> for
microsecond precision.</p>
      </section>




  </body>
</html>
