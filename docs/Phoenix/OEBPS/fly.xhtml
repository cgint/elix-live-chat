<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"
      xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>Deploying on Fly.io - Phoenix v1.7.21</title>
    <meta name="generator" content="ExDoc v0.37.3" />
    <link type="text/css" rel="stylesheet" href="dist/epub-elixir-FNUUKFP7.css" />
    <script src="dist/epub-4WIP524F.js"></script>

  </head>
  <body class="content-inner">

    <h1 id="content">
Deploying on Fly.io
    </h1>
<p>Fly.io maintains their own guide for Elixir/Phoenix here: <a href="https://fly.io/docs/elixir/getting-started/">Fly.io/docs/elixir/getting-started/</a> we will keep this guide up but for the latest and greatest check with them!</p><h2 id="what-we-ll-need" class="section-heading">
  <a href="#what-we-ll-need" class="hover-link">
    <i class="ri-link-m" aria-hidden="true"></i>
  </a>
  <span class="text">What we'll need</span>
</h2>
<p>The only thing we'll need for this guide is a working Phoenix application. For those of us who need a simple application to deploy, please follow the <a href="https://hexdocs.pm/phoenix/up_and_running.html">Up and Running guide</a>.</p><p>You can just:</p><pre><code class="makeup console" translate="no"><span class="gp unselectable">$ </span><span class="">mix phx.new my_app
</span></code></pre><h2 id="goals" class="section-heading">
  <a href="#goals" class="hover-link">
    <i class="ri-link-m" aria-hidden="true"></i>
  </a>
  <span class="text">Goals</span>
</h2>
<p>The main goal for this guide is to get a Phoenix application running on <a href="https://fly.io">Fly.io</a>.</p><h2 id="sections" class="section-heading">
  <a href="#sections" class="hover-link">
    <i class="ri-link-m" aria-hidden="true"></i>
  </a>
  <span class="text">Sections</span>
</h2>
<p>Let's separate this process into a few steps, so we can keep track of where we are.</p><ul><li>Install the Fly.io CLI</li><li>Sign up for Fly.io</li><li>Deploy the app to Fly.io</li><li>Extra Fly.io tips</li><li>Helpful Fly.io resources</li></ul><h2 id="installing-the-fly-io-cli" class="section-heading">
  <a href="#installing-the-fly-io-cli" class="hover-link">
    <i class="ri-link-m" aria-hidden="true"></i>
  </a>
  <span class="text">Installing the Fly.io CLI</span>
</h2>
<p>Follow the instructions <a href="https://fly.io/docs/getting-started/installing-flyctl/">here</a> to install Flyctl, the command-line interface for the Fly.io platform.</p><h2 id="sign-up-for-fly-io" class="section-heading">
  <a href="#sign-up-for-fly-io" class="hover-link">
    <i class="ri-link-m" aria-hidden="true"></i>
  </a>
  <span class="text">Sign up for Fly.io</span>
</h2>
<p>We can <a href="https://fly.io/docs/getting-started/log-in-to-fly/">sign up for an account</a> using the CLI.</p><pre><code class="makeup console" translate="no"><span class="gp unselectable">$ </span><span class="">fly auth signup
</span></code></pre><p>Or sign in.</p><pre><code class="makeup console" translate="no"><span class="gp unselectable">$ </span><span class="">flyctl auth login
</span></code></pre><p>Fly has a <a href="https://fly.io/docs/about/pricing/">free tier</a> for most applications. A credit card is required when setting up an account to help prevent abuse. See the <a href="https://fly.io/docs/about/pricing/">pricing</a> page for more details.</p><h2 id="deploy-the-app-to-fly-io" class="section-heading">
  <a href="#deploy-the-app-to-fly-io" class="hover-link">
    <i class="ri-link-m" aria-hidden="true"></i>
  </a>
  <span class="text">Deploy the app to Fly.io</span>
</h2>
<p>To tell Fly about your application, run <code class="inline">fly launch</code> in the directory with your source code. This creates and configures a Fly.io app.</p><pre><code class="makeup console" translate="no"><span class="gp unselectable">$ </span><span class="">fly launch
</span></code></pre><p>This scans your source, detects the Phoenix project, and runs <code class="inline">mix phx.gen.release --docker</code> for you! This creates a Dockerfile for you.</p><p>The <code class="inline">fly launch</code> command walks you through a few questions.</p><ul><li>You can name the app or have it generate a random name for you.</li><li>Choose an organization (defaults to <code class="inline">personal</code>). Organizations are a way of sharing applications and resources between Fly.io users.</li><li>Choose a region to deploy to. Defaults to the nearest Fly.io region. You can check out the <a href="https://fly.io/docs/reference/regions/">complete list of regions here</a>.</li><li>Sets up a Postgres DB for you.</li><li>Builds the Dockerfile.</li><li>Deploys your application!</li></ul><p>The <code class="inline">fly launch</code> command also created a <code class="inline">fly.toml</code> file for you. This is where you can set ENV values and other config.</p><h3 id="storing-secrets-on-fly-io" class="section-heading">
  <a href="#storing-secrets-on-fly-io" class="hover-link">
    <i class="ri-link-m" aria-hidden="true"></i>
  </a>
  <span class="text">Storing secrets on Fly.io</span>
</h3>
<p>You may also have some secrets you'd like to set on your app.</p><p>Use <a href="https://fly.io/docs/reference/secrets/#setting-secrets"><code class="inline">fly secrets</code></a> to configure those.</p><pre><code class="makeup console" translate="no"><span class="gp unselectable">$ </span><span class="">fly secrets set MY_SECRET_KEY=my_secret_value
</span></code></pre><h3 id="deploying-again" class="section-heading">
  <a href="#deploying-again" class="hover-link">
    <i class="ri-link-m" aria-hidden="true"></i>
  </a>
  <span class="text">Deploying again</span>
</h3>
<p>When you want to deploy changes to your application, use <code class="inline">fly deploy</code>.</p><pre><code class="makeup console" translate="no"><span class="gp unselectable">$ </span><span class="">fly deploy
</span></code></pre><p>Note: On Apple Silicon (M1) computers, docker runs cross-platform builds using qemu which might not always work. If you get a segmentation fault error like the following:</p><pre><code class="makeup elixir" translate="no"><span class="w"> </span><span class="p">=&gt;</span><span class="w"> </span><span class="p" data-group-id="2880882903-1">[</span><span class="n">build</span><span class="w">  </span><span class="mi">7</span><span class="o">/</span><span class="mi">17</span><span class="p" data-group-id="2880882903-1">]</span><span class="w"> </span><span class="nc">RUN</span><span class="w"> </span><span class="n">mix</span><span class="w"> </span><span class="n">deps</span><span class="o">.</span><span class="n">get</span><span class="w"> </span><span class="o">--</span><span class="n">only</span><span class="w">
 </span><span class="p">=&gt;</span><span class="w"> </span><span class="p">=&gt;</span><span class="w"> </span><span class="c1"># qemu: uncaught target signal 11 (Segmentation fault) - core dumped</span></code></pre><p>You can use fly's remote builder by adding the <code class="inline">--remote-only</code> flag:</p><pre><code class="makeup console" translate="no"><span class="gp unselectable">$ </span><span class="">fly deploy --remote-only
</span></code></pre><p>You can always check on the status of a deploy</p><pre><code class="makeup console" translate="no"><span class="gp unselectable">$ </span><span class="">fly status
</span></code></pre><p>Check your app logs</p><pre><code class="makeup console" translate="no"><span class="gp unselectable">$ </span><span class="">fly logs
</span></code></pre><p>If everything looks good, open your app on Fly</p><pre><code class="makeup console" translate="no"><span class="gp unselectable">$ </span><span class="">fly open
</span></code></pre><h2 id="extra-fly-io-tips" class="section-heading">
  <a href="#extra-fly-io-tips" class="hover-link">
    <i class="ri-link-m" aria-hidden="true"></i>
  </a>
  <span class="text">Extra Fly.io tips</span>
</h2>
<h3 id="getting-an-iex-shell-into-a-running-node" class="section-heading">
  <a href="#getting-an-iex-shell-into-a-running-node" class="hover-link">
    <i class="ri-link-m" aria-hidden="true"></i>
  </a>
  <span class="text">Getting an IEx shell into a running node</span>
</h3>
<p>Elixir supports getting a IEx shell into a running production node.</p><p>There are a couple prerequisites, we first need to establish an <a href="https://fly.io/docs/flyctl/ssh/">SSH Shell</a> to our machine on Fly.io.</p><p>This step sets up a root certificate for your account and then issues a certificate.</p><pre><code class="makeup console" translate="no"><span class="gp unselectable">$ </span><span class="">fly ssh issue --agent
</span></code></pre><p>With SSH configured, let's open a console.</p><pre><code class="makeup console" translate="no"><span class="gp unselectable">$ </span><span class="">fly ssh console
</span><span class="">Connecting to my-app-1234.internal... complete
</span><span class="">/ #
</span></code></pre><p>If all has gone smoothly, then you have a shell into the machine! Now we just need to launch our remote IEx shell. The deployment Dockerfile was configured to pull our application into <code class="inline">/app</code>. So the command for an app named <code class="inline">my_app</code> looks like this:</p><pre><code class="makeup console" translate="no"><span class="gp unselectable">$ </span><span class="">app/bin/my_app remote
</span><span class="">Erlang/OTP 23 [erts-11.2.1] [source] [64-bit] [smp:1:1] [ds:1:1:10] [async-threads:1]
</span><span class="">
</span><span class="">Interactive Elixir (1.11.2) - press Ctrl+C to exit (type h() ENTER for help)
</span><span class="">iex(my_app@fdaa:0:1da8:a7b:ac4:b204:7e29:2)1&gt;
</span></code></pre><p>Now we have a running IEx shell into our node! You can safely disconnect using CTRL+C, CTRL+C.</p><h3 id="clustering-your-application" class="section-heading">
  <a href="#clustering-your-application" class="hover-link">
    <i class="ri-link-m" aria-hidden="true"></i>
  </a>
  <span class="text">Clustering your application</span>
</h3>
<p>Elixir and the BEAM have the incredible ability to be clustered together and pass messages seamlessly between nodes. This portion of the guide walks you through clustering your Elixir application.</p><p>There are 2 parts to getting clustering quickly setup on Fly.io.</p><ul><li>Installing and using <code class="inline">libcluster</code></li><li>Scaling the application to multiple instances</li></ul><h4>Adding <code class="inline">libcluster</code></h4><p>The widely adopted library <a href="https://github.com/bitwalker/libcluster">libcluster</a> helps here.</p><p>There are multiple strategies that <code class="inline">libcluster</code> can use to find and connect with other nodes. The strategy we'll use on Fly.io is <code class="inline">DNSPoll</code>.</p><p>After installing <code class="inline">libcluster</code>, add it to the application like this:</p><pre><code class="makeup elixir" translate="no"><span class="kd">defmodule</span><span class="w"> </span><span class="nc">MyApp.Application</span><span class="w"> </span><span class="k" data-group-id="7694136230-1">do</span><span class="w">
  </span><span class="kn">use</span><span class="w"> </span><span class="nc">Application</span><span class="w">

  </span><span class="kd">def</span><span class="w"> </span><span class="nf">start</span><span class="p" data-group-id="7694136230-2">(</span><span class="c">_type</span><span class="p">,</span><span class="w"> </span><span class="c">_args</span><span class="p" data-group-id="7694136230-2">)</span><span class="w"> </span><span class="k" data-group-id="7694136230-3">do</span><span class="w">
    </span><span class="n">topologies</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nc">Application</span><span class="o">.</span><span class="n">get_env</span><span class="p" data-group-id="7694136230-4">(</span><span class="ss">:libcluster</span><span class="p">,</span><span class="w"> </span><span class="ss">:topologies</span><span class="p" data-group-id="7694136230-4">)</span><span class="w"> </span><span class="o">||</span><span class="w"> </span><span class="p" data-group-id="7694136230-5">[</span><span class="p" data-group-id="7694136230-5">]</span><span class="w">

    </span><span class="n">children</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p" data-group-id="7694136230-6">[</span><span class="w">
      </span><span class="c1"># ...</span><span class="w">
      </span><span class="c1"># setup for clustering</span><span class="w">
      </span><span class="p" data-group-id="7694136230-7">{</span><span class="nc">Cluster.Supervisor</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="7694136230-8">[</span><span class="n">topologies</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="7694136230-9">[</span><span class="ss">name</span><span class="p">:</span><span class="w"> </span><span class="nc">MyApp.ClusterSupervisor</span><span class="p" data-group-id="7694136230-9">]</span><span class="p" data-group-id="7694136230-8">]</span><span class="p" data-group-id="7694136230-7">}</span><span class="w">
    </span><span class="p" data-group-id="7694136230-6">]</span><span class="w">

    </span><span class="c1"># ...</span><span class="w">
  </span><span class="k" data-group-id="7694136230-3">end</span><span class="w">

  </span><span class="c1"># ...</span><span class="w">
</span><span class="k" data-group-id="7694136230-1">end</span></code></pre><p>Our next step is to add the <code class="inline">topologies</code> configuration to <code class="inline">config/runtime.exs</code>.</p><pre><code class="makeup elixir" translate="no"><span class="w">  </span><span class="n">app_name</span><span class="w"> </span><span class="o">=</span><span class="w">
    </span><span class="nc">System</span><span class="o">.</span><span class="n">get_env</span><span class="p" data-group-id="9424878575-1">(</span><span class="s">&quot;FLY_APP_NAME&quot;</span><span class="p" data-group-id="9424878575-1">)</span><span class="w"> </span><span class="o">||</span><span class="w">
      </span><span class="k">raise</span><span class="w"> </span><span class="s">&quot;FLY_APP_NAME not available&quot;</span><span class="w">

  </span><span class="n">config</span><span class="w"> </span><span class="ss">:libcluster</span><span class="p">,</span><span class="w">
    </span><span class="ss">topologies</span><span class="p">:</span><span class="w"> </span><span class="p" data-group-id="9424878575-2">[</span><span class="w">
      </span><span class="ss">fly6pn</span><span class="p">:</span><span class="w"> </span><span class="p" data-group-id="9424878575-3">[</span><span class="w">
        </span><span class="ss">strategy</span><span class="p">:</span><span class="w"> </span><span class="nc">Cluster.Strategy.DNSPoll</span><span class="p">,</span><span class="w">
        </span><span class="ss">config</span><span class="p">:</span><span class="w"> </span><span class="p" data-group-id="9424878575-4">[</span><span class="w">
          </span><span class="ss">polling_interval</span><span class="p">:</span><span class="w"> </span><span class="mi">5_000</span><span class="p">,</span><span class="w">
          </span><span class="ss">query</span><span class="p">:</span><span class="w"> </span><span class="s">&quot;</span><span class="si" data-group-id="9424878575-5">#{</span><span class="n">app_name</span><span class="si" data-group-id="9424878575-5">}</span><span class="s">.internal&quot;</span><span class="p">,</span><span class="w">
          </span><span class="ss">node_basename</span><span class="p">:</span><span class="w"> </span><span class="n">app_name</span><span class="w">
        </span><span class="p" data-group-id="9424878575-4">]</span><span class="w">
      </span><span class="p" data-group-id="9424878575-3">]</span><span class="w">
    </span><span class="p" data-group-id="9424878575-2">]</span></code></pre><p>This configures <code class="inline">libcluster</code> to use the <code class="inline">DNSPoll</code> strategy and look for other deployed apps using the <code class="inline">$FLY_APP_NAME</code> on the <code class="inline">.internal</code> private network.</p><h4>Controlling the name for our node</h4><p>We need to control the naming of our Elixir nodes. To help them connect up, we'll name them using this pattern: <code class="inline">your-fly-app-name@the.ipv6.address.on.fly</code>. To do this, we'll generate the release config.</p><pre><code class="makeup console" translate="no"><span class="gp unselectable">$ </span><span class="">mix release.init
</span></code></pre><p>Then edit the generated <code class="inline">rel/env.sh.eex</code> file and add the following lines:</p><pre><code class="makeup console" translate="no"><span class="">ip=$(grep fly-local-6pn /etc/hosts | cut -f 1)
</span><span class="">export RELEASE_DISTRIBUTION=name
</span><span class="">export RELEASE_NODE=$FLY_APP_NAME@$ip
</span></code></pre><p>After making the change, deploy your app!</p><pre><code class="makeup console" translate="no"><span class="gp unselectable">$ </span><span class="">fly deploy
</span></code></pre><p>For our app to be clustered, we have to have multiple instances. Next we'll add an additional node instance.</p><h4>Running multiple instances</h4><p>There are two ways to run multiple instances.</p><ol><li>Scale our application to have multiple instances in one region.</li><li>Add an instance to another region (multiple regions).</li></ol><p>Let's first start with a baseline of our single deployment.</p><pre><code class="makeup console" translate="no"><span class="gp unselectable">$ </span><span class="">fly status
</span><span class="">...
</span><span class="">Instances
</span><span class="">ID       VERSION REGION DESIRED STATUS  HEALTH CHECKS      RESTARTS CREATED
</span><span class="">f9014bf7 26      sea    run     running 1 total, 1 passing 0        1h8m ago
</span></code></pre><h4>Scaling in a single region</h4><p>Let's scale up to 2 instances in our current region.</p><pre><code class="makeup console" translate="no"><span class="gp unselectable">$ </span><span class="">fly scale count 2
</span><span class="">Count changed to 2
</span></code></pre><p>Checking the status, we can see what happened.</p><pre><code class="makeup console" translate="no"><span class="gp unselectable">$ </span><span class="">fly status
</span><span class="">...
</span><span class="">Instances
</span><span class="">ID       VERSION REGION DESIRED STATUS  HEALTH CHECKS      RESTARTS CREATED
</span><span class="">eb4119d3 27      sea    run     running 1 total, 1 passing 0        39s ago
</span><span class="">f9014bf7 27      sea    run     running 1 total, 1 passing 0        1h13m ago
</span></code></pre><p>We now have two instances in the same region.</p><p>Let's make sure they are clustered together. We can check the logs:</p><pre><code class="makeup console" translate="no"><span class="gp unselectable">$ </span><span class="">fly logs
</span><span class="">...
</span><span class="">app[eb4119d3] sea [info] 21:50:21.924 [info] [libcluster:fly6pn] connected to :&quot;my-app-1234@fdaa:0:1da8:a7b:ac2:f901:4bf7:2&quot;
</span><span class="">...
</span></code></pre><p>But that's not as rewarding as seeing it from inside a node. From an IEx shell, we can ask the node we're connected to, what other nodes it can see.</p><pre><code class="makeup console" translate="no"><span class="gp unselectable">$ </span><span class="">fly ssh console -C &quot;/app/bin/my_app remote&quot;
</span></code></pre><pre><code class="makeup elixir" translate="no"><span class="n">iex</span><span class="p" data-group-id="6364176760-1">(</span><span class="n">my</span><span class="o">-</span><span class="n">app</span><span class="o">-</span><span class="mi">1234</span><span class="na">@fdaa</span><span class="p">:</span><span class="mi">0</span><span class="p">:</span><span class="mi">1</span><span class="n">da8</span><span class="ss">:a7b</span><span class="ss">:ac2</span><span class="ss">:f901</span><span class="p">:</span><span class="mi">4</span><span class="n">bf7</span><span class="p">:</span><span class="mi">2</span><span class="p" data-group-id="6364176760-1">)</span><span class="mi">1</span><span class="o">&gt;</span><span class="w"> </span><span class="nc">Node</span><span class="o">.</span><span class="n">list</span><span class="w">
</span><span class="p" data-group-id="6364176760-2">[</span><span class="ss">:&quot;my-app-1234@fdaa:0:1da8:a7b:ac4:eb41:19d3:2&quot;</span><span class="p" data-group-id="6364176760-2">]</span></code></pre><p>The IEx prompt is included to help show the IP address of the node we are connected to. Then getting the <code class="inline">Node.list</code> returns the other node. Our two instances are connected and clustered!</p><h4>Scaling to multiple regions</h4><p>Fly makes it easy to deploy instances closer to your users. Through the magic of DNS, users are directed to the nearest region where your application is located. You can read more about <a href="https://fly.io/docs/reference/regions/">Fly.io regions here</a>.</p><p>Starting back from our baseline of a single instance running in <code class="inline">sea</code> which is Seattle, Washington (US), let's add the region <code class="inline">ewr</code> which is Parsippany, NJ (US). This puts an instance on both coasts of the US.</p><pre><code class="makeup console" translate="no"><span class="gp unselectable">$ </span><span class="">fly regions add ewr
</span><span class="">Region Pool:
</span><span class="">ewr
</span><span class="">sea
</span><span class="">Backup Region:
</span><span class="">iad
</span><span class="">lax
</span><span class="">sjc
</span><span class="">vin
</span></code></pre><p>Looking at the status shows that we're only in 1 region because our count is set to 1.</p><pre><code class="makeup console" translate="no"><span class="gp unselectable">$ </span><span class="">fly status
</span><span class="">...
</span><span class="">Instances
</span><span class="">ID       VERSION REGION DESIRED STATUS  HEALTH CHECKS      RESTARTS CREATED
</span><span class="">cdf6c422 29      sea    run     running 1 total, 1 passing 0        58s ago
</span></code></pre><p>Let's add a 2nd instance and see it deploy to <code class="inline">ewr</code>.</p><pre><code class="makeup console" translate="no"><span class="gp unselectable">$ </span><span class="">fly scale count 2
</span><span class="">Count changed to 2
</span></code></pre><p>Now the status shows we have two instances spread across 2 regions!</p><pre><code class="makeup console" translate="no"><span class="gp unselectable">$ </span><span class="">fly status
</span><span class="">...
</span><span class="">Instances
</span><span class="">ID       VERSION REGION DESIRED STATUS  HEALTH CHECKS      RESTARTS CREATED
</span><span class="">0a8e6666 30      ewr    run     running 1 total, 1 passing 0        16s ago
</span><span class="">cdf6c422 30      sea    run     running 1 total, 1 passing 0        6m47s ago
</span></code></pre><p>Let's ensure they are clustered together.</p><pre><code class="makeup console" translate="no"><span class="gp unselectable">$ </span><span class="">fly ssh console -C &quot;/app/bin/my_app remote&quot;
</span></code></pre><pre><code class="makeup elixir" translate="no"><span class="n">iex</span><span class="p" data-group-id="9921891365-1">(</span><span class="n">my</span><span class="o">-</span><span class="n">app</span><span class="o">-</span><span class="mi">1234</span><span class="na">@fdaa</span><span class="p">:</span><span class="mi">0</span><span class="p">:</span><span class="mi">1</span><span class="n">da8</span><span class="ss">:a7b</span><span class="ss">:ac2</span><span class="ss">:cdf6</span><span class="ss">:c422</span><span class="p">:</span><span class="mi">2</span><span class="p" data-group-id="9921891365-1">)</span><span class="mi">1</span><span class="o">&gt;</span><span class="w"> </span><span class="nc">Node</span><span class="o">.</span><span class="n">list</span><span class="w">
</span><span class="p" data-group-id="9921891365-2">[</span><span class="ss">:&quot;my-app-1234@fdaa:0:1da8:a7b:ab2:a8e:6666:2&quot;</span><span class="p" data-group-id="9921891365-2">]</span></code></pre><p>We have two instances of our application deployed to the West and East coasts of the North American continent and they are clustered together! Our users will automatically be directed to the server nearest them.</p><p>The Fly.io platform has built-in distribution support making it easy to cluster distributed Elixir nodes in multiple regions.</p><h2 id="helpful-fly-io-resources" class="section-heading">
  <a href="#helpful-fly-io-resources" class="hover-link">
    <i class="ri-link-m" aria-hidden="true"></i>
  </a>
  <span class="text">Helpful Fly.io resources</span>
</h2>
<p>Open the Dashboard for your account</p><pre><code class="makeup console" translate="no"><span class="gp unselectable">$ </span><span class="">fly dashboard
</span></code></pre><p>Deploy your application</p><pre><code class="makeup console" translate="no"><span class="gp unselectable">$ </span><span class="">fly deploy
</span></code></pre><p>Show the status of your deployed application</p><pre><code class="makeup console" translate="no"><span class="gp unselectable">$ </span><span class="">fly status
</span></code></pre><p>Access and tail the logs</p><pre><code class="makeup console" translate="no"><span class="gp unselectable">$ </span><span class="">fly logs
</span></code></pre><p>Scaling your application up or down</p><pre><code class="makeup console" translate="no"><span class="gp unselectable">$ </span><span class="">fly scale count 2
</span></code></pre><p>Refer to the <a href="https://fly.io/docs/getting-started/elixir">Fly.io Elixir documentation</a> for additional information.</p><p><a href="https://fly.io/docs/getting-started/working-with-fly-apps/">Working with Fly.io applications</a> covers things like:</p><ul><li>Status and logs</li><li>Custom domains</li><li>Certificates</li></ul><h2 id="troubleshooting" class="section-heading">
  <a href="#troubleshooting" class="hover-link">
    <i class="ri-link-m" aria-hidden="true"></i>
  </a>
  <span class="text">Troubleshooting</span>
</h2>
<p>See <a href="https://fly.io/docs/getting-started/troubleshooting/">Troubleshooting</a> and <a href="https://fly.io/docs/elixir/the-basics/troubleshooting/">Elixir Troubleshooting</a></p><p>Visit the <a href="https://community.fly.io/">Fly.io Community</a> to find solutions and ask questions.</p>

  </body>
</html>
