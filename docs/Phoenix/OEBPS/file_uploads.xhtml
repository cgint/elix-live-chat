<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"
      xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>File Uploads - Phoenix v1.7.21</title>
    <meta name="generator" content="ExDoc v0.37.3" />
    <link type="text/css" rel="stylesheet" href="dist/epub-elixir-FNUUKFP7.css" />
    <script src="dist/epub-4WIP524F.js"></script>

  </head>
  <body class="content-inner">

    <h1 id="content">
File Uploads
    </h1>
<p>One common task for web applications is uploading files. These files might be images, videos, PDFs, or files of any other type. In order to upload files through an HTML interface, we need a <code class="inline">file</code> input tag in a multipart form.</p><section role="note" class="admonition neutral"><h4 class="admonition-title neutral">Looking for the LiveView Uploads guide?</h4><p>This guide explains multipart HTTP file uploads via <a href="https://hexdocs.pm/plug/1.15.3/Plug.Upload.html"><code class="inline">Plug.Upload</code></a>.
For more information about LiveView file uploads, including direct-to-cloud external uploads on
the client, refer to the <a href="https://hexdocs.pm/phoenix_live_view/uploads.html">LiveView Uploads guide</a>.</p></section><p>Plug provides a <a href="https://hexdocs.pm/plug/1.15.3/Plug.Upload.html"><code class="inline">Plug.Upload</code></a> struct to hold the data from the <code class="inline">file</code> input. A <a href="https://hexdocs.pm/plug/1.15.3/Plug.Upload.html"><code class="inline">Plug.Upload</code></a> struct will automatically appear in your request parameters if a user has selected a file when they submit the form.</p><p>In this guide you will do the following:</p><ol><li><p> Configure a multipart form</p></li><li><p>Add a file input element to the form</p></li><li><p>Verify your upload params</p></li><li><p>Manage your uploaded files</p></li></ol><p>In the <a href="contexts.xhtml"><code class="inline">Contexts guide</code></a>, we generated an HTML resource for products. We can reuse the form we generated there in order to demonstrate how file uploads work in Phoenix. Please refer to that guide for instructions on generating the product resource you will be using here.</p><h3 id="configure-a-multipart-form" class="section-heading">
  <a href="#configure-a-multipart-form" class="hover-link">
    <i class="ri-link-m" aria-hidden="true"></i>
  </a>
  <span class="text">Configure a multipart form</span>
</h3>
<p>The first thing you need to do is change your form into a multipart form. The <code class="inline">HelloWeb.CoreComponents</code> <code class="inline">simple_form/1</code> component accepts a <code class="inline">multipart</code> attribute where you can specify this.</p><p>Here is the form from <code class="inline">lib/hello_web/controllers/product_html/product_form.html.heex</code> with that change in place:</p><pre><code class="makeup heex" translate="no"><span class="p">&lt;</span><span class="nt">.simple_form</span><span class="w"> </span><span class="ni">:let</span><span class="p">=</span><span class="p" data-group-id="0891186366-1">{</span><span class="n">f</span><span class="p" data-group-id="0891186366-1">}</span><span class="w"> </span><span class="ni">for</span><span class="p">=</span><span class="p" data-group-id="0891186366-2">{</span><span class="na">@changeset</span><span class="p" data-group-id="0891186366-2">}</span><span class="w"> </span><span class="ni">action</span><span class="p">=</span><span class="p" data-group-id="0891186366-3">{</span><span class="na">@action</span><span class="p" data-group-id="0891186366-3">}</span><span class="w"> </span><span class="ni">multipart</span><span class="p">&gt;</span><span class="w">
</span><span class="n">. . .</span></code></pre><h3 id="add-a-file-input" class="section-heading">
  <a href="#add-a-file-input" class="hover-link">
    <i class="ri-link-m" aria-hidden="true"></i>
  </a>
  <span class="text">Add a file input</span>
</h3>
<p>Once you have a multipart form, you need a <code class="inline">file</code> input. Here's how you would do that, also in <code class="inline">product_form.html.heex</code>:</p><pre><code class="makeup heex" translate="no"><span class="n">. . .
</span><span class="w">  </span><span class="p">&lt;</span><span class="nt">.input</span><span class="w"> </span><span class="ni">field</span><span class="p">=</span><span class="p" data-group-id="3353924477-1">{</span><span class="n">f</span><span class="p" data-group-id="3353924477-ex-1">[</span><span class="ss">:photo</span><span class="p" data-group-id="3353924477-ex-1">]</span><span class="p" data-group-id="3353924477-1">}</span><span class="w"> </span><span class="ni">type</span><span class="p">=</span><span class="p">&quot;</span><span class="s2">file</span><span class="p">&quot;</span><span class="w"> </span><span class="ni">label</span><span class="p">=</span><span class="p">&quot;</span><span class="s2">Photo</span><span class="p">&quot;</span><span class="w"> </span><span class="p">/&gt;</span><span class="w">
</span><span class="w">
</span><span class="w">  </span><span class="p">&lt;</span><span class="nt">:actions</span><span class="p">&gt;</span><span class="w">
</span><span class="w">    </span><span class="p">&lt;</span><span class="nt">.button</span><span class="p">&gt;</span><span class="n">Save Product</span><span class="p">&lt;/</span><span class="nt">.button</span><span class="p">&gt;</span><span class="w">
</span><span class="w">  </span><span class="p">&lt;/</span><span class="nt">:actions</span><span class="p">&gt;</span><span class="w">
</span><span class="p">&lt;/</span><span class="nt">.simple_form</span><span class="p">&gt;</span></code></pre><p>When rendered, here is the HTML for the default <code class="inline">HelloWeb.CoreComponents</code> <code class="inline">input/1</code> component:</p><pre><code class="makeup html" translate="no"><span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span><span class="w">
</span><span class="w">  </span><span class="p">&lt;</span><span class="nt">label</span><span class="w"> </span><span class="ni">for</span><span class="p">=</span><span class="p">&quot;</span><span class="s2">product_photo</span><span class="p">&quot;</span><span class="w"> </span><span class="ni">class</span><span class="p">=</span><span class="p">&quot;</span><span class="s2">block</span><span class="w"> </span><span class="s2">text-sm...</span><span class="p">&quot;</span><span class="p">&gt;</span><span class="n">Photo</span><span class="p">&lt;/</span><span class="nt">label</span><span class="p">&gt;</span><span class="w">
</span><span class="w">  </span><span class="p">&lt;</span><span class="nt">input</span><span class="w"> </span><span class="ni">type</span><span class="p">=</span><span class="p">&quot;</span><span class="s2">file</span><span class="p">&quot;</span><span class="w"> </span><span class="ni">name</span><span class="p">=</span><span class="p">&quot;</span><span class="s2">product[photo]</span><span class="p">&quot;</span><span class="w"> </span><span class="ni">id</span><span class="p">=</span><span class="p">&quot;</span><span class="s2">product_photo</span><span class="p">&quot;</span><span class="w"> </span><span class="ni">class</span><span class="p">=</span><span class="p">&quot;</span><span class="s2">mt-2</span><span class="w"> </span><span class="s2">block</span><span class="w"> </span><span class="s2">w-full...</span><span class="p">&quot;</span><span class="p">&gt;</span><span class="w">
</span><span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span></code></pre><p>Note the <code class="inline">name</code> attribute of your <code class="inline">file</code> input. This will create the <code class="inline">&quot;photo&quot;</code> key in the <code class="inline">product_params</code> map which will be available in your controller action.</p><p>This is all from the form side. Now when users submit the form, a <code class="inline">POST</code> request will route to your <code class="inline">HelloWeb.ProductController</code> <code class="inline">create/2</code> action.</p><section role="note" class="admonition neutral"><h4 class="admonition-title neutral">Should I add photo to my Ecto schema?</h4><p>The photo input does not need to be part of your schema for it to come across in the <code class="inline">product_params</code>. If you want to persist any properties of the photo in a database, however, you would need to add it to your <code class="inline">Hello.Product</code> schema.</p></section><h3 id="verify-your-upload-params" class="section-heading">
  <a href="#verify-your-upload-params" class="hover-link">
    <i class="ri-link-m" aria-hidden="true"></i>
  </a>
  <span class="text">Verify your upload params</span>
</h3>
<p>Since you generated an HTML resource, you can now start your server with <a href="Mix.Tasks.Phx.Server.xhtml"><code class="inline">mix phx.server</code></a>, visit <a href="http://localhost:4000/products/new">http://localhost:4000/products/new</a>, and create a new product with a photo.</p><p>Before you begin, add <code class="inline">IO.inspect product_params</code> to the top of your <code class="inline">ProductController.create/2</code> action in <code class="inline">lib/hello_web/controllers/product_controller.ex</code>. This will show the <code class="inline">product_params</code> in your development log so you can get a better sense of what's happening.</p><pre><code class="makeup elixir" translate="no"><span class="o">.</span><span class="w"> </span><span class="o">.</span><span class="w"> </span><span class="o">.</span><span class="w">
  </span><span class="kd">def</span><span class="w"> </span><span class="nf">create</span><span class="p" data-group-id="9023475635-1">(</span><span class="n">conn</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="9023475635-2">%{</span><span class="s">&quot;product&quot;</span><span class="w"> </span><span class="p">=&gt;</span><span class="w"> </span><span class="n">product_params</span><span class="p" data-group-id="9023475635-2">}</span><span class="p" data-group-id="9023475635-1">)</span><span class="w"> </span><span class="k" data-group-id="9023475635-3">do</span><span class="w">
    </span><span class="nc">IO</span><span class="o">.</span><span class="n">inspect</span><span class="w"> </span><span class="n">product_params</span><span class="w">
</span><span class="o">.</span><span class="w"> </span><span class="o">.</span><span class="w"> </span><span class="o">.</span></code></pre><p>When you do that, this is what your <code class="inline">product_params</code> will output in the log:</p><pre><code class="makeup elixir" translate="no"><span class="p" data-group-id="5895079795-1">%{</span><span class="s">&quot;title&quot;</span><span class="w"> </span><span class="p">=&gt;</span><span class="w"> </span><span class="s">&quot;Metaprogramming Elixir&quot;</span><span class="p">,</span><span class="w"> </span><span class="s">&quot;description&quot;</span><span class="w"> </span><span class="p">=&gt;</span><span class="w"> </span><span class="s">&quot;Write Less Code, Get More Done (and Have Fun!)&quot;</span><span class="p">,</span><span class="w"> </span><span class="s">&quot;price&quot;</span><span class="w"> </span><span class="p">=&gt;</span><span class="w"> </span><span class="s">&quot;15.000000&quot;</span><span class="p">,</span><span class="w"> </span><span class="s">&quot;views&quot;</span><span class="w"> </span><span class="p">=&gt;</span><span class="w"> </span><span class="s">&quot;0&quot;</span><span class="p">,</span><span class="w">
</span><span class="s">&quot;photo&quot;</span><span class="w"> </span><span class="p">=&gt;</span><span class="w"> </span><span class="p" data-group-id="5895079795-2">%</span><span class="nc" data-group-id="5895079795-2">Plug.Upload</span><span class="p" data-group-id="5895079795-2">{</span><span class="ss">content_type</span><span class="p">:</span><span class="w"> </span><span class="s">&quot;image/png&quot;</span><span class="p">,</span><span class="w"> </span><span class="ss">filename</span><span class="p">:</span><span class="w"> </span><span class="s">&quot;meta-cover.png&quot;</span><span class="p">,</span><span class="w"> </span><span class="ss">path</span><span class="p">:</span><span class="w"> </span><span class="s">&quot;/var/folders/_6/xbsnn7tx6g9dblyx149nrvbw0000gn/T//plug-1434/multipart-558399-917557-1&quot;</span><span class="p" data-group-id="5895079795-2">}</span><span class="p" data-group-id="5895079795-1">}</span></code></pre><p>You have a <code class="inline">&quot;photo&quot;</code> key which maps to the pre-populated <a href="https://hexdocs.pm/plug/1.15.3/Plug.Upload.html"><code class="inline">Plug.Upload</code></a> struct representing your uploaded photo.</p><p>To make this easier to read, focus on the struct itself:</p><pre><code class="makeup elixir" translate="no"><span class="p" data-group-id="1334118810-1">%</span><span class="nc" data-group-id="1334118810-1">Plug.Upload</span><span class="p" data-group-id="1334118810-1">{</span><span class="ss">content_type</span><span class="p">:</span><span class="w"> </span><span class="s">&quot;image/png&quot;</span><span class="p">,</span><span class="w"> </span><span class="ss">filename</span><span class="p">:</span><span class="w"> </span><span class="s">&quot;meta-cover.png&quot;</span><span class="p">,</span><span class="w"> </span><span class="ss">path</span><span class="p">:</span><span class="w"> </span><span class="s">&quot;/var/folders/_6/xbsnn7tx6g9dblyx149nrvbw0000gn/T//plug-1434/multipart-558399-917557-1&quot;</span><span class="p" data-group-id="1334118810-1">}</span></code></pre><p><a href="https://hexdocs.pm/plug/1.15.3/Plug.Upload.html"><code class="inline">Plug.Upload</code></a> provides the file's content type, original filename, and path to the temporary file which Plug created for you. In this case, <code class="inline">&quot;/var/folders/_6/xbsnn7tx6g9dblyx149nrvbw0000gn/T//plug-1434/&quot;</code> is the directory created by Plug in which to put uploaded files. The directory will persist across requests. <code class="inline">&quot;multipart-558399-917557-1&quot;</code> is the name Plug gave to your uploaded file. If you had multiple <code class="inline">file</code> inputs and if the user selected photos for all of them, you would have multiple files scattered in temporary directories. Plug will make sure all the filenames are unique.</p><section role="note" class="admonition info"><h4 class="admonition-title info">Plug.Upload files are temporary</h4><p>Plug removes uploads from its directory as the request completes. If you need to do anything with this file, you need to do it before then (or <a href="https://hexdocs.pm/plug/1.15.3/Plug.Upload.html#give_away/3">give it away</a>, but that is outside the scope of this guide).</p></section><h3 id="manage-your-uploaded-files" class="section-heading">
  <a href="#manage-your-uploaded-files" class="hover-link">
    <i class="ri-link-m" aria-hidden="true"></i>
  </a>
  <span class="text">Manage your uploaded files</span>
</h3>
<p>Once you have the <a href="https://hexdocs.pm/plug/1.15.3/Plug.Upload.html"><code class="inline">Plug.Upload</code></a> struct available in your controller, you can perform any operation on it you want. For example, you may want to do one or more of the following:</p><ul><li><p>Check to make sure the file exists with <a href="https://hexdocs.pm/elixir/File.html#exists?/1"><code class="inline">File.exists?/1</code></a></p></li><li><p>Copy the file somewhere else on the filesystem with <a href="https://hexdocs.pm/elixir/File.html#cp/2"><code class="inline">File.cp/2</code></a></p></li><li><p>Give the file away to another Elixir process with <a href="https://hexdocs.pm/plug/1.15.3/Plug.Upload.html#give_away/3"><code class="inline">Plug.Upload.give_away/3</code></a></p></li><li><p>Send it to S3 with an external library</p></li><li><p>Send it back to the client with <a href="https://hexdocs.pm/plug/1.15.3/Plug.Conn.html#send_file/5"><code class="inline">Plug.Conn.send_file/5</code></a></p></li></ul><p>In a production system, you may want to copy the file to a root directory, such as <code class="inline">/media</code>. When doing so, it is important to guarantee the names are unique. For instance, if you are allowing users to upload product cover images, you could use the product id to generate a unique name:</p><pre><code class="makeup elixir" translate="no"><span class="k">if</span><span class="w"> </span><span class="n">upload</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">product_params</span><span class="p" data-group-id="3946129444-1">[</span><span class="s">&quot;photo&quot;</span><span class="p" data-group-id="3946129444-1">]</span><span class="w"> </span><span class="k" data-group-id="3946129444-2">do</span><span class="w">
  </span><span class="n">extension</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nc">Path</span><span class="o">.</span><span class="n">extname</span><span class="p" data-group-id="3946129444-3">(</span><span class="n">upload</span><span class="o">.</span><span class="n">filename</span><span class="p" data-group-id="3946129444-3">)</span><span class="w">
  </span><span class="nc">File</span><span class="o">.</span><span class="n">cp</span><span class="p" data-group-id="3946129444-4">(</span><span class="n">upload</span><span class="o">.</span><span class="n">path</span><span class="p">,</span><span class="w"> </span><span class="s">&quot;/media/</span><span class="si" data-group-id="3946129444-5">#{</span><span class="n">product</span><span class="o">.</span><span class="n">id</span><span class="si" data-group-id="3946129444-5">}</span><span class="s">-cover</span><span class="si" data-group-id="3946129444-6">#{</span><span class="n">extension</span><span class="si" data-group-id="3946129444-6">}</span><span class="s">&quot;</span><span class="p" data-group-id="3946129444-4">)</span><span class="w">
</span><span class="k" data-group-id="3946129444-2">end</span></code></pre><p>Then a <a href="https://hexdocs.pm/plug/1.15.3/Plug.Static.html"><code class="inline">Plug.Static</code></a> plug could be added in your <code class="inline">lib/my_app_web/endpoint.ex</code> to serve the files at <code class="inline">&quot;/media&quot;</code>:</p><pre><code class="makeup elixir" translate="no"><span class="n">plug</span><span class="w"> </span><span class="nc">Plug.Static</span><span class="p">,</span><span class="w"> </span><span class="ss">at</span><span class="p">:</span><span class="w"> </span><span class="s">&quot;/uploads&quot;</span><span class="p">,</span><span class="w"> </span><span class="ss">from</span><span class="p">:</span><span class="w"> </span><span class="s">&quot;/media&quot;</span></code></pre><p>The uploaded file can now be accessed from your browsers using a path such as <code class="inline">&quot;/uploads/1-cover.jpg&quot;</code>. In practice, there are other concerns you want to handle when uploading files, such validating extensions, encoding names, and so on. Many times, using a library that already handles such cases is preferred.</p><p>Finally, notice that when there is no data from the <code class="inline">file</code> input, you get neither the <code class="inline">&quot;photo&quot;</code> key nor a <a href="https://hexdocs.pm/plug/1.15.3/Plug.Upload.html"><code class="inline">Plug.Upload</code></a> struct. Here are the <code class="inline">product_params</code> from the log.</p><pre><code class="makeup elixir" translate="no"><span class="p" data-group-id="5277291990-1">%{</span><span class="s">&quot;title&quot;</span><span class="w"> </span><span class="p">=&gt;</span><span class="w"> </span><span class="s">&quot;Metaprogramming Elixir&quot;</span><span class="p">,</span><span class="w"> </span><span class="s">&quot;description&quot;</span><span class="w"> </span><span class="p">=&gt;</span><span class="w"> </span><span class="s">&quot;Write Less Code, Get More Done (and Have Fun!)&quot;</span><span class="p">,</span><span class="w"> </span><span class="s">&quot;price&quot;</span><span class="w"> </span><span class="p">=&gt;</span><span class="w"> </span><span class="s">&quot;15.000000&quot;</span><span class="p">,</span><span class="w"> </span><span class="s">&quot;views&quot;</span><span class="w"> </span><span class="p">=&gt;</span><span class="w"> </span><span class="s">&quot;0&quot;</span><span class="p" data-group-id="5277291990-1">}</span></code></pre><h2 id="configuring-upload-limits" class="section-heading">
  <a href="#configuring-upload-limits" class="hover-link">
    <i class="ri-link-m" aria-hidden="true"></i>
  </a>
  <span class="text">Configuring upload limits</span>
</h2>
<p>The conversion from the data being sent by the form to an actual <a href="https://hexdocs.pm/plug/1.15.3/Plug.Upload.html"><code class="inline">Plug.Upload</code></a> is done by the <a href="https://hexdocs.pm/plug/1.15.3/Plug.Parsers.html"><code class="inline">Plug.Parsers</code></a> plug which you can find inside <code class="inline">HelloWeb.Endpoint</code>:</p><pre><code class="makeup elixir" translate="no"><span class="c1"># lib/hello_web/endpoint.ex</span><span class="w">
</span><span class="n">plug</span><span class="w"> </span><span class="nc">Plug.Parsers</span><span class="p">,</span><span class="w">
  </span><span class="ss">parsers</span><span class="p">:</span><span class="w"> </span><span class="p" data-group-id="1771226914-1">[</span><span class="ss">:urlencoded</span><span class="p">,</span><span class="w"> </span><span class="ss">:multipart</span><span class="p">,</span><span class="w"> </span><span class="ss">:json</span><span class="p" data-group-id="1771226914-1">]</span><span class="p">,</span><span class="w">
  </span><span class="ss">pass</span><span class="p">:</span><span class="w"> </span><span class="p" data-group-id="1771226914-2">[</span><span class="s">&quot;*/*&quot;</span><span class="p" data-group-id="1771226914-2">]</span><span class="p">,</span><span class="w">
  </span><span class="ss">json_decoder</span><span class="p">:</span><span class="w"> </span><span class="nc">Phoenix</span><span class="o">.</span><span class="n">json_library</span><span class="p" data-group-id="1771226914-3">(</span><span class="p" data-group-id="1771226914-3">)</span></code></pre><p>Besides the options above, <a href="https://hexdocs.pm/plug/1.15.3/Plug.Parsers.html"><code class="inline">Plug.Parsers</code></a> accepts other options to control data upload:</p><ul><li><code class="inline">:length</code> - sets the max body length to read, defaults to <code class="inline">8_000_000</code> bytes</li><li><code class="inline">:read_length</code> - set the amount of bytes to read at one time, defaults to <code class="inline">1_000_000</code> bytes</li><li><code class="inline">:read_timeout</code> - set the timeout for each chunk received, defaults to <code class="inline">15_000</code> ms</li></ul><p>The first option configures the maximum data allowed. The remaining ones configure how much data we expect to read and its frequency. If the client cannot push data fast enough, the connection will be terminated. Phoenix ships with reasonable defaults but you may want to customize it under special circumstances, for example, if you are expecting really slow clients to send large chunks of data.</p><p>It is also worth pointing out those limits are important as a security mechanism. For example, if you don't set a limit for data upload, attackers could open up thousands of connections to your application and send one byte every 2 minutes, which would take very long to complete while using up all connections to your server. The limits above expect at least a reasonable amount of progress, making attackers' lives a bit harder.</p>

  </body>
</html>
