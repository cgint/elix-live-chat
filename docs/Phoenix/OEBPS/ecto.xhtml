<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"
      xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>Ecto - Phoenix v1.7.21</title>
    <meta name="generator" content="ExDoc v0.37.3" />
    <link type="text/css" rel="stylesheet" href="dist/epub-elixir-FNUUKFP7.css" />
    <script src="dist/epub-4WIP524F.js"></script>

  </head>
  <body class="content-inner">

    <h1 id="content">
Ecto
    </h1>
<blockquote><p><strong>Requirement</strong>: This guide expects that you have gone through the <a href="installation.html">introductory guides</a> and got a Phoenix application <a href="up_and_running.html">up and running</a>.</p></blockquote><p>Most web applications today need some form of data validation and persistence. In the Elixir ecosystem, we have <a href="https://hexdocs.pm/ecto/3.10.1/Ecto.html"><code class="inline">Ecto</code></a> to enable this. Before we jump into building database-backed web features, we're going to focus on the finer details of Ecto to give a solid base to build our web features on top of. Let's get started!</p><p>Phoenix uses Ecto to provide builtin support to the following databases:</p><ul><li>PostgreSQL (via <a href="https://github.com/elixir-ecto/postgrex"><code class="inline">postgrex</code></a>)</li><li>MySQL (via <a href="https://github.com/elixir-ecto/myxql"><code class="inline">myxql</code></a>)</li><li>MSSQL (via <a href="https://github.com/livehelpnow/tds"><code class="inline">tds</code></a>)</li><li>ETS (via <a href="https://github.com/evadne/etso"><code class="inline">etso</code></a>)</li><li>SQLite3 (via <a href="https://github.com/elixir-sqlite/ecto_sqlite3"><code class="inline">ecto_sqlite3</code></a>)</li></ul><p>Newly generated Phoenix projects include Ecto with the PostgreSQL adapter by default. You can pass the <code class="inline">--database</code> option to change or <code class="inline">--no-ecto</code> flag to exclude this.</p><p>Ecto also provides support for other databases and it has many learning resources available. Please check out <a href="https://github.com/elixir-ecto/ecto">Ecto's README</a> for general information.</p><p>This guide assumes that we have generated our new application with Ecto integration and that we will be using PostgreSQL. The introductory guides cover how to get your first application up and running. For using other databases, see the <a href="#using-other-databases">Using other databases</a> section.</p><h2 id="using-the-schema-and-migration-generator" class="section-heading">
  <a href="#using-the-schema-and-migration-generator" class="hover-link">
    <i class="ri-link-m" aria-hidden="true"></i>
  </a>
  <span class="text">Using the schema and migration generator</span>
</h2>
<p>Once we have Ecto and PostgreSQL installed and configured, the easiest way to use Ecto is to generate an Ecto <em>schema</em> through the <code class="inline">phx.gen.schema</code> task. Ecto schemas are a way for us to specify how Elixir data types map to and from external sources, such as database tables. Let's generate a <code class="inline">User</code> schema with <code class="inline">name</code>, <code class="inline">email</code>, <code class="inline">bio</code>, and <code class="inline">number_of_pets</code> fields.</p><pre><code class="makeup console" translate="no"><span class="gp unselectable">$ </span><span class="">mix phx.gen.schema User users name:string email:string \
</span><span class="">bio:string number_of_pets:integer
</span><span class="">
</span><span class="">* creating ./lib/hello/user.ex
</span><span class="">* creating priv/repo/migrations/20170523151118_create_users.exs
</span><span class="">
</span><span class="">Remember to update your repository by running migrations:
</span><span class="">
</span><span class="">   $ mix ecto.migrate
</span></code></pre><p>A couple of files were generated with this task. First, we have a <code class="inline">user.ex</code> file, containing our Ecto schema with our schema definition of the fields we passed to the task. Next, a migration file was generated inside <code class="inline">priv/repo/migrations/</code> which will create our database table that our schema maps to.</p><p>With our files in place, let's follow the instructions and run our migration:</p><pre><code class="makeup console" translate="no"><span class="gp unselectable">$ </span><span class="">mix ecto.migrate
</span><span class="">Compiling 1 file (.ex)
</span><span class="">Generated hello app
</span><span class="">
</span><span class="">[info] == Running Hello.Repo.Migrations.CreateUsers.change/0 forward
</span><span class="">
</span><span class="">[info] create table users
</span><span class="">
</span><span class="">[info] == Migrated in 0.0s
</span></code></pre><p>Mix assumes that we are in the development environment unless we tell it otherwise with <code class="inline">MIX_ENV=prod mix ecto.migrate</code>.</p><p>If we log in to our database server, and connect to our <code class="inline">hello_dev</code> database, we should see our <code class="inline">users</code> table. Ecto assumes that we want an integer column called <code class="inline">id</code> as our primary key, so we should see a sequence generated for that as well.</p><pre><code class="makeup console" translate="no"><span class="gp unselectable">$ </span><span class="">psql -U postgres
</span><span class="">
</span><span class="">Type &quot;help&quot; for help.
</span><span class="">
</span><span class="">postgres=# \connect hello_dev
</span><span class="">You are now connected to database &quot;hello_dev&quot; as user &quot;postgres&quot;.
</span><span class="">hello_dev=# \d
</span><span class="">                List of relations
</span><span class=""> Schema |       Name        |   Type   |  Owner
</span><span class="">--------+-------------------+----------+----------
</span><span class=""> public | schema_migrations | table    | postgres
</span><span class=""> public | users             | table    | postgres
</span><span class=""> public | users_id_seq      | sequence | postgres
</span><span class="">(3 rows)
</span><span class="">hello_dev=# \q
</span></code></pre><p>If we take a look at the migration generated by <code class="inline">phx.gen.schema</code> in <code class="inline">priv/repo/migrations/</code>, we'll see that it will add the columns we specified. It will also add timestamp columns for <code class="inline">inserted_at</code> and <code class="inline">updated_at</code> which come from the <a href="https://hexdocs.pm/ecto_sql/3.10.1/Ecto.Migration.html#timestamps/1" title=""><code class="inline">timestamps/1</code></a> function.</p><pre><code class="makeup elixir" translate="no"><span class="kd">defmodule</span><span class="w"> </span><span class="nc">Hello.Repo.Migrations.CreateUsers</span><span class="w"> </span><span class="k" data-group-id="7439731485-1">do</span><span class="w">
  </span><span class="kn">use</span><span class="w"> </span><span class="nc">Ecto.Migration</span><span class="w">

  </span><span class="kd">def</span><span class="w"> </span><span class="nf">change</span><span class="w"> </span><span class="k" data-group-id="7439731485-2">do</span><span class="w">
    </span><span class="n">create</span><span class="w"> </span><span class="n">table</span><span class="p" data-group-id="7439731485-3">(</span><span class="ss">:users</span><span class="p" data-group-id="7439731485-3">)</span><span class="w"> </span><span class="k" data-group-id="7439731485-4">do</span><span class="w">
      </span><span class="n">add</span><span class="w"> </span><span class="ss">:name</span><span class="p">,</span><span class="w"> </span><span class="ss">:string</span><span class="w">
      </span><span class="n">add</span><span class="w"> </span><span class="ss">:email</span><span class="p">,</span><span class="w"> </span><span class="ss">:string</span><span class="w">
      </span><span class="n">add</span><span class="w"> </span><span class="ss">:bio</span><span class="p">,</span><span class="w"> </span><span class="ss">:string</span><span class="w">
      </span><span class="n">add</span><span class="w"> </span><span class="ss">:number_of_pets</span><span class="p">,</span><span class="w"> </span><span class="ss">:integer</span><span class="w">

      </span><span class="n">timestamps</span><span class="p" data-group-id="7439731485-5">(</span><span class="p" data-group-id="7439731485-5">)</span><span class="w">
    </span><span class="k" data-group-id="7439731485-4">end</span><span class="w">
  </span><span class="k" data-group-id="7439731485-2">end</span><span class="w">
</span><span class="k" data-group-id="7439731485-1">end</span></code></pre><p>And here's what that translates to in the actual <code class="inline">users</code> table.</p><pre><code class="makeup console" translate="no"><span class="gp unselectable">$ </span><span class="">psql
</span><span class="">hello_dev=# \d users
</span><span class="">Table &quot;public.users&quot;
</span><span class="">Column         |            Type             | Modifiers
</span><span class="">---------------+-----------------------------+----------------------------------------------------
</span><span class="">id             | bigint                      | not null default nextval(&#39;users_id_seq&#39;::regclass)
</span><span class="">name           | character varying(255)      |
</span><span class="">email          | character varying(255)      |
</span><span class="">bio            | character varying(255)      |
</span><span class="">number_of_pets | integer                     |
</span><span class="">inserted_at    | timestamp without time zone | not null
</span><span class="">updated_at     | timestamp without time zone | not null
</span><span class="">Indexes:
</span><span class="">&quot;users_pkey&quot; PRIMARY KEY, btree (id)
</span></code></pre><p>Notice that we do get an <code class="inline">id</code> column as our primary key by default, even though it isn't listed as a field in our migration.</p><h2 id="repo-configuration" class="section-heading">
  <a href="#repo-configuration" class="hover-link">
    <i class="ri-link-m" aria-hidden="true"></i>
  </a>
  <span class="text">Repo configuration</span>
</h2>
<p>Our <code class="inline">Hello.Repo</code> module is the foundation we need to work with databases in a Phoenix application. Phoenix generated it for us in <code class="inline">lib/hello/repo.ex</code>, and this is what it looks like.</p><pre><code class="makeup elixir" translate="no"><span class="kd">defmodule</span><span class="w"> </span><span class="nc">Hello.Repo</span><span class="w"> </span><span class="k" data-group-id="2093343929-1">do</span><span class="w">
  </span><span class="kn">use</span><span class="w"> </span><span class="nc">Ecto.Repo</span><span class="p">,</span><span class="w">
    </span><span class="ss">otp_app</span><span class="p">:</span><span class="w"> </span><span class="ss">:hello</span><span class="p">,</span><span class="w">
    </span><span class="ss">adapter</span><span class="p">:</span><span class="w"> </span><span class="nc">Ecto.Adapters.Postgres</span><span class="w">
</span><span class="k" data-group-id="2093343929-1">end</span></code></pre><p>It begins by defining the repository module. Then it configures our <code class="inline">otp_app</code> name, and the <code class="inline">adapter</code> – <code class="inline">Postgres</code>, in our case.</p><p>Our repo has three main tasks - to bring in all the common query functions from [<a href="https://hexdocs.pm/ecto/3.10.1/Ecto.Repo.html"><code class="inline">Ecto.Repo</code></a>], to set the <code class="inline">otp_app</code> name equal to our application name, and to configure our database adapter. We'll talk more about how to use <code class="inline">Hello.Repo</code> in a bit.</p><p>When <code class="inline">phx.new</code> generated our application, it included some basic repository configuration as well. Let's look at <code class="inline">config/dev.exs</code>.</p><pre><code class="makeup elixir" translate="no"><span class="n">...</span><span class="w">
</span><span class="c1"># Configure your database</span><span class="w">
</span><span class="n">config</span><span class="w"> </span><span class="ss">:hello</span><span class="p">,</span><span class="w"> </span><span class="nc">Hello.Repo</span><span class="p">,</span><span class="w">
  </span><span class="ss">username</span><span class="p">:</span><span class="w"> </span><span class="s">&quot;postgres&quot;</span><span class="p">,</span><span class="w">
  </span><span class="ss">password</span><span class="p">:</span><span class="w"> </span><span class="s">&quot;postgres&quot;</span><span class="p">,</span><span class="w">
  </span><span class="ss">hostname</span><span class="p">:</span><span class="w"> </span><span class="s">&quot;localhost&quot;</span><span class="p">,</span><span class="w">
  </span><span class="ss">database</span><span class="p">:</span><span class="w"> </span><span class="s">&quot;hello_dev&quot;</span><span class="p">,</span><span class="w">
  </span><span class="ss">show_sensitive_data_on_connection_error</span><span class="p">:</span><span class="w"> </span><span class="no">true</span><span class="p">,</span><span class="w">
  </span><span class="ss">pool_size</span><span class="p">:</span><span class="w"> </span><span class="mi">10</span><span class="w">
</span><span class="n">...</span></code></pre><p>We also have similar configuration in <code class="inline">config/test.exs</code> and <code class="inline">config/runtime.exs</code> (formerly <code class="inline">config/prod.secret.exs</code>) which can also be changed to match your actual credentials.</p><h2 id="the-schema" class="section-heading">
  <a href="#the-schema" class="hover-link">
    <i class="ri-link-m" aria-hidden="true"></i>
  </a>
  <span class="text">The schema</span>
</h2>
<p>Ecto schemas are responsible for mapping Elixir values to external data sources, as well as mapping external data back into Elixir data structures. We can also define relationships to other schemas in our applications. For example, our <code class="inline">User</code> schema might have many posts, and each post would belong to a user. Ecto also handles data validation and type casting with changesets, which we'll discuss in a moment.</p><p>Here's the <code class="inline">User</code> schema that Phoenix generated for us.</p><pre><code class="makeup elixir" translate="no"><span class="kd">defmodule</span><span class="w"> </span><span class="nc">Hello.User</span><span class="w"> </span><span class="k" data-group-id="9066134511-1">do</span><span class="w">
  </span><span class="kn">use</span><span class="w"> </span><span class="nc">Ecto.Schema</span><span class="w">
  </span><span class="kn">import</span><span class="w"> </span><span class="nc">Ecto.Changeset</span><span class="w">

  </span><span class="n">schema</span><span class="w"> </span><span class="s">&quot;users&quot;</span><span class="w"> </span><span class="k" data-group-id="9066134511-2">do</span><span class="w">
    </span><span class="n">field</span><span class="w"> </span><span class="ss">:bio</span><span class="p">,</span><span class="w"> </span><span class="ss">:string</span><span class="w">
    </span><span class="n">field</span><span class="w"> </span><span class="ss">:email</span><span class="p">,</span><span class="w"> </span><span class="ss">:string</span><span class="w">
    </span><span class="n">field</span><span class="w"> </span><span class="ss">:name</span><span class="p">,</span><span class="w"> </span><span class="ss">:string</span><span class="w">
    </span><span class="n">field</span><span class="w"> </span><span class="ss">:number_of_pets</span><span class="p">,</span><span class="w"> </span><span class="ss">:integer</span><span class="w">

    </span><span class="n">timestamps</span><span class="p" data-group-id="9066134511-3">(</span><span class="p" data-group-id="9066134511-3">)</span><span class="w">
  </span><span class="k" data-group-id="9066134511-2">end</span><span class="w">

  </span><span class="na">@doc</span><span class="w"> </span><span class="no">false</span><span class="w">
  </span><span class="kd">def</span><span class="w"> </span><span class="nf">changeset</span><span class="p" data-group-id="9066134511-4">(</span><span class="n">user</span><span class="p">,</span><span class="w"> </span><span class="n">attrs</span><span class="p" data-group-id="9066134511-4">)</span><span class="w"> </span><span class="k" data-group-id="9066134511-5">do</span><span class="w">
    </span><span class="n">user</span><span class="w">
    </span><span class="o">|&gt;</span><span class="w"> </span><span class="n">cast</span><span class="p" data-group-id="9066134511-6">(</span><span class="n">attrs</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="9066134511-7">[</span><span class="ss">:name</span><span class="p">,</span><span class="w"> </span><span class="ss">:email</span><span class="p">,</span><span class="w"> </span><span class="ss">:bio</span><span class="p">,</span><span class="w"> </span><span class="ss">:number_of_pets</span><span class="p" data-group-id="9066134511-7">]</span><span class="p" data-group-id="9066134511-6">)</span><span class="w">
    </span><span class="o">|&gt;</span><span class="w"> </span><span class="n">validate_required</span><span class="p" data-group-id="9066134511-8">(</span><span class="p" data-group-id="9066134511-9">[</span><span class="ss">:name</span><span class="p">,</span><span class="w"> </span><span class="ss">:email</span><span class="p">,</span><span class="w"> </span><span class="ss">:bio</span><span class="p">,</span><span class="w"> </span><span class="ss">:number_of_pets</span><span class="p" data-group-id="9066134511-9">]</span><span class="p" data-group-id="9066134511-8">)</span><span class="w">
  </span><span class="k" data-group-id="9066134511-5">end</span><span class="w">
</span><span class="k" data-group-id="9066134511-1">end</span></code></pre><p>Ecto schemas at their core are simply Elixir structs. Our <code class="inline">schema</code> block is what tells Ecto how to cast our <code class="inline">%User{}</code> struct fields to and from the external <code class="inline">users</code> table. Often, the ability to simply cast data to and from the database isn't enough and extra data validation is required. This is where Ecto changesets come in. Let's dive in!</p><h2 id="changesets-and-validations" class="section-heading">
  <a href="#changesets-and-validations" class="hover-link">
    <i class="ri-link-m" aria-hidden="true"></i>
  </a>
  <span class="text">Changesets and validations</span>
</h2>
<p>Changesets define a pipeline of transformations our data needs to undergo before it will be ready for our application to use. These transformations might include type-casting, user input validation, and filtering out any extraneous parameters. Often we'll use changesets to validate user input before writing it to the database. Ecto repositories are also changeset-aware, which allows them not only to refuse invalid data, but also perform the minimal database updates possible by inspecting the changeset to know which fields have changed.</p><p>Let's take a closer look at our default changeset function.</p><pre><code class="makeup elixir" translate="no"><span class="kd">def</span><span class="w"> </span><span class="nf">changeset</span><span class="p" data-group-id="2028448293-1">(</span><span class="n">user</span><span class="p">,</span><span class="w"> </span><span class="n">attrs</span><span class="p" data-group-id="2028448293-1">)</span><span class="w"> </span><span class="k" data-group-id="2028448293-2">do</span><span class="w">
  </span><span class="n">user</span><span class="w">
  </span><span class="o">|&gt;</span><span class="w"> </span><span class="n">cast</span><span class="p" data-group-id="2028448293-3">(</span><span class="n">attrs</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="2028448293-4">[</span><span class="ss">:name</span><span class="p">,</span><span class="w"> </span><span class="ss">:email</span><span class="p">,</span><span class="w"> </span><span class="ss">:bio</span><span class="p">,</span><span class="w"> </span><span class="ss">:number_of_pets</span><span class="p" data-group-id="2028448293-4">]</span><span class="p" data-group-id="2028448293-3">)</span><span class="w">
  </span><span class="o">|&gt;</span><span class="w"> </span><span class="n">validate_required</span><span class="p" data-group-id="2028448293-5">(</span><span class="p" data-group-id="2028448293-6">[</span><span class="ss">:name</span><span class="p">,</span><span class="w"> </span><span class="ss">:email</span><span class="p">,</span><span class="w"> </span><span class="ss">:bio</span><span class="p">,</span><span class="w"> </span><span class="ss">:number_of_pets</span><span class="p" data-group-id="2028448293-6">]</span><span class="p" data-group-id="2028448293-5">)</span><span class="w">
</span><span class="k" data-group-id="2028448293-2">end</span></code></pre><p>Right now, we have two transformations in our pipeline. In the first call, we invoke <a href="https://hexdocs.pm/ecto/3.10.1/Ecto.Changeset.html#cast/3"><code class="inline">Ecto.Changeset.cast/3</code></a>, passing in our external parameters and marking which fields are required for validation.</p><p><a href="https://hexdocs.pm/ecto/3.10.1/Ecto.Changeset.html#cast/3" title=""><code class="inline">cast/3</code></a> first takes a struct, then the parameters (the proposed updates), and then the final field is the list of columns to be updated. <a href="https://hexdocs.pm/ecto/3.10.1/Ecto.Changeset.html#cast/3" title=""><code class="inline">cast/3</code></a> also will only take fields that exist in the schema.</p><p>Next, <a href="https://hexdocs.pm/ecto/3.10.1/Ecto.Changeset.html#validate_required/3"><code class="inline">Ecto.Changeset.validate_required/3</code></a> checks that this list of fields is present in the changeset that <a href="https://hexdocs.pm/ecto/3.10.1/Ecto.Changeset.html#cast/3" title=""><code class="inline">cast/3</code></a> returns. By default with the generator, all fields are required.</p><p>We can verify this functionality in <a href="https://hexdocs.pm/iex/IEx.html"><code class="inline">IEx</code></a>. Let's fire up our application inside IEx by running <code class="inline">iex -S mix</code>. In order to minimize typing and make this easier to read, let's alias our <code class="inline">Hello.User</code> struct.</p><pre><code class="makeup console" translate="no"><span class="gp unselectable">$ </span><span class="">iex -S mix
</span><span class="">
</span><span class="">iex&gt; alias Hello.User
</span><span class="">Hello.User
</span></code></pre><p>Next, let's build a changeset from our schema with an empty <code class="inline">User</code> struct, and an empty map of parameters.</p><pre><code class="makeup elixir" translate="no"><span class="gp unselectable">iex&gt; </span><span class="n">changeset</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nc">User</span><span class="o">.</span><span class="n">changeset</span><span class="p" data-group-id="2908523697-1">(</span><span class="p" data-group-id="2908523697-2">%</span><span class="nc" data-group-id="2908523697-2">User</span><span class="p" data-group-id="2908523697-2">{</span><span class="p" data-group-id="2908523697-2">}</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="2908523697-3">%{</span><span class="p" data-group-id="2908523697-3">}</span><span class="p" data-group-id="2908523697-1">)</span><span class="w">
</span><span class="p" data-group-id="2908523697-4">#</span><span class="nc" data-group-id="2908523697-4">Ecto.Changeset</span><span class="p" data-group-id="2908523697-4">&lt;</span><span class="w">
  </span><span class="ss">action</span><span class="p">:</span><span class="w"> </span><span class="no">nil</span><span class="p">,</span><span class="w">
  </span><span class="ss">changes</span><span class="p">:</span><span class="w"> </span><span class="p" data-group-id="2908523697-5">%{</span><span class="p" data-group-id="2908523697-5">}</span><span class="p">,</span><span class="w">
  </span><span class="ss">errors</span><span class="p">:</span><span class="w"> </span><span class="p" data-group-id="2908523697-6">[</span><span class="w">
    </span><span class="ss">name</span><span class="p">:</span><span class="w"> </span><span class="p" data-group-id="2908523697-7">{</span><span class="s">&quot;can&#39;t be blank&quot;</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="2908523697-8">[</span><span class="ss">validation</span><span class="p">:</span><span class="w"> </span><span class="ss">:required</span><span class="p" data-group-id="2908523697-8">]</span><span class="p" data-group-id="2908523697-7">}</span><span class="p">,</span><span class="w">
    </span><span class="ss">email</span><span class="p">:</span><span class="w"> </span><span class="p" data-group-id="2908523697-9">{</span><span class="s">&quot;can&#39;t be blank&quot;</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="2908523697-10">[</span><span class="ss">validation</span><span class="p">:</span><span class="w"> </span><span class="ss">:required</span><span class="p" data-group-id="2908523697-10">]</span><span class="p" data-group-id="2908523697-9">}</span><span class="p">,</span><span class="w">
    </span><span class="ss">bio</span><span class="p">:</span><span class="w"> </span><span class="p" data-group-id="2908523697-11">{</span><span class="s">&quot;can&#39;t be blank&quot;</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="2908523697-12">[</span><span class="ss">validation</span><span class="p">:</span><span class="w"> </span><span class="ss">:required</span><span class="p" data-group-id="2908523697-12">]</span><span class="p" data-group-id="2908523697-11">}</span><span class="p">,</span><span class="w">
    </span><span class="ss">number_of_pets</span><span class="p">:</span><span class="w"> </span><span class="p" data-group-id="2908523697-13">{</span><span class="s">&quot;can&#39;t be blank&quot;</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="2908523697-14">[</span><span class="ss">validation</span><span class="p">:</span><span class="w"> </span><span class="ss">:required</span><span class="p" data-group-id="2908523697-14">]</span><span class="p" data-group-id="2908523697-13">}</span><span class="w">
  </span><span class="p" data-group-id="2908523697-6">]</span><span class="p">,</span><span class="w">
  </span><span class="ss">data</span><span class="p">:</span><span class="w"> </span><span class="p" data-group-id="2908523697-15">#</span><span class="nc" data-group-id="2908523697-15">Hello.User</span><span class="p" data-group-id="2908523697-15">&lt;</span><span class="p" data-group-id="2908523697-15">&gt;</span><span class="p">,</span><span class="w">
  </span><span class="ss">valid?</span><span class="p">:</span><span class="w"> </span><span class="no">false</span><span class="w">
</span><span class="p" data-group-id="2908523697-4">&gt;</span></code></pre><p>Once we have a changeset, we can check if it is valid.</p><pre><code class="makeup elixir" translate="no"><span class="gp unselectable">iex&gt; </span><span class="n">changeset</span><span class="o">.</span><span class="n">valid?</span><span class="w">
</span><span class="no">false</span></code></pre><p>Since this one is not valid, we can ask it what the errors are.</p><pre><code class="makeup elixir" translate="no"><span class="gp unselectable">iex&gt; </span><span class="n">changeset</span><span class="o">.</span><span class="n">errors</span><span class="w">
</span><span class="p" data-group-id="3306801913-1">[</span><span class="w">
  </span><span class="ss">name</span><span class="p">:</span><span class="w"> </span><span class="p" data-group-id="3306801913-2">{</span><span class="s">&quot;can&#39;t be blank&quot;</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="3306801913-3">[</span><span class="ss">validation</span><span class="p">:</span><span class="w"> </span><span class="ss">:required</span><span class="p" data-group-id="3306801913-3">]</span><span class="p" data-group-id="3306801913-2">}</span><span class="p">,</span><span class="w">
  </span><span class="ss">email</span><span class="p">:</span><span class="w"> </span><span class="p" data-group-id="3306801913-4">{</span><span class="s">&quot;can&#39;t be blank&quot;</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="3306801913-5">[</span><span class="ss">validation</span><span class="p">:</span><span class="w"> </span><span class="ss">:required</span><span class="p" data-group-id="3306801913-5">]</span><span class="p" data-group-id="3306801913-4">}</span><span class="p">,</span><span class="w">
  </span><span class="ss">bio</span><span class="p">:</span><span class="w"> </span><span class="p" data-group-id="3306801913-6">{</span><span class="s">&quot;can&#39;t be blank&quot;</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="3306801913-7">[</span><span class="ss">validation</span><span class="p">:</span><span class="w"> </span><span class="ss">:required</span><span class="p" data-group-id="3306801913-7">]</span><span class="p" data-group-id="3306801913-6">}</span><span class="p">,</span><span class="w">
  </span><span class="ss">number_of_pets</span><span class="p">:</span><span class="w"> </span><span class="p" data-group-id="3306801913-8">{</span><span class="s">&quot;can&#39;t be blank&quot;</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="3306801913-9">[</span><span class="ss">validation</span><span class="p">:</span><span class="w"> </span><span class="ss">:required</span><span class="p" data-group-id="3306801913-9">]</span><span class="p" data-group-id="3306801913-8">}</span><span class="w">
</span><span class="p" data-group-id="3306801913-1">]</span></code></pre><p>Now, let's make <code class="inline">number_of_pets</code> optional. In order to do this, we simply remove it from the list in the <code class="inline">changeset/2</code> function, in <code class="inline">Hello.User</code>.</p><pre><code class="makeup elixir" translate="no"><span class="w">    </span><span class="o">|&gt;</span><span class="w"> </span><span class="n">validate_required</span><span class="p" data-group-id="2644292708-1">(</span><span class="p" data-group-id="2644292708-2">[</span><span class="ss">:name</span><span class="p">,</span><span class="w"> </span><span class="ss">:email</span><span class="p">,</span><span class="w"> </span><span class="ss">:bio</span><span class="p" data-group-id="2644292708-2">]</span><span class="p" data-group-id="2644292708-1">)</span></code></pre><p>Now casting the changeset should tell us that only <code class="inline">name</code>, <code class="inline">email</code>, and <code class="inline">bio</code> can't be blank. We can test that by running <code class="inline">recompile()</code> inside IEx and then rebuilding our changeset.</p><pre><code class="makeup elixir" translate="no"><span class="gp unselectable">iex&gt; </span><span class="n">recompile</span><span class="p" data-group-id="1632076144-1">(</span><span class="p" data-group-id="1632076144-1">)</span><span class="w">
</span><span class="nc">Compiling</span><span class="w"> </span><span class="mi">1</span><span class="w"> </span><span class="n">file</span><span class="w"> </span><span class="p" data-group-id="1632076144-2">(</span><span class="o">.</span><span class="n">ex</span><span class="p" data-group-id="1632076144-2">)</span><span class="w">
</span><span class="ss">:ok</span><span class="w">

</span><span class="gp unselectable">iex&gt; </span><span class="n">changeset</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nc">User</span><span class="o">.</span><span class="n">changeset</span><span class="p" data-group-id="1632076144-3">(</span><span class="p" data-group-id="1632076144-4">%</span><span class="nc" data-group-id="1632076144-4">User</span><span class="p" data-group-id="1632076144-4">{</span><span class="p" data-group-id="1632076144-4">}</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="1632076144-5">%{</span><span class="p" data-group-id="1632076144-5">}</span><span class="p" data-group-id="1632076144-3">)</span><span class="w">
</span><span class="p" data-group-id="1632076144-6">#</span><span class="nc" data-group-id="1632076144-6">Ecto.Changeset</span><span class="p" data-group-id="1632076144-6">&lt;</span><span class="w">
  </span><span class="ss">action</span><span class="p">:</span><span class="w"> </span><span class="no">nil</span><span class="p">,</span><span class="w">
  </span><span class="ss">changes</span><span class="p">:</span><span class="w"> </span><span class="p" data-group-id="1632076144-7">%{</span><span class="p" data-group-id="1632076144-7">}</span><span class="p">,</span><span class="w">
  </span><span class="ss">errors</span><span class="p">:</span><span class="w"> </span><span class="p" data-group-id="1632076144-8">[</span><span class="w">
    </span><span class="ss">name</span><span class="p">:</span><span class="w"> </span><span class="p" data-group-id="1632076144-9">{</span><span class="s">&quot;can&#39;t be blank&quot;</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="1632076144-10">[</span><span class="ss">validation</span><span class="p">:</span><span class="w"> </span><span class="ss">:required</span><span class="p" data-group-id="1632076144-10">]</span><span class="p" data-group-id="1632076144-9">}</span><span class="p">,</span><span class="w">
    </span><span class="ss">email</span><span class="p">:</span><span class="w"> </span><span class="p" data-group-id="1632076144-11">{</span><span class="s">&quot;can&#39;t be blank&quot;</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="1632076144-12">[</span><span class="ss">validation</span><span class="p">:</span><span class="w"> </span><span class="ss">:required</span><span class="p" data-group-id="1632076144-12">]</span><span class="p" data-group-id="1632076144-11">}</span><span class="p">,</span><span class="w">
    </span><span class="ss">bio</span><span class="p">:</span><span class="w"> </span><span class="p" data-group-id="1632076144-13">{</span><span class="s">&quot;can&#39;t be blank&quot;</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="1632076144-14">[</span><span class="ss">validation</span><span class="p">:</span><span class="w"> </span><span class="ss">:required</span><span class="p" data-group-id="1632076144-14">]</span><span class="p" data-group-id="1632076144-13">}</span><span class="w">
  </span><span class="p" data-group-id="1632076144-8">]</span><span class="p">,</span><span class="w">
  </span><span class="ss">data</span><span class="p">:</span><span class="w"> </span><span class="p" data-group-id="1632076144-15">#</span><span class="nc" data-group-id="1632076144-15">Hello.User</span><span class="p" data-group-id="1632076144-15">&lt;</span><span class="p" data-group-id="1632076144-15">&gt;</span><span class="p">,</span><span class="w">
  </span><span class="ss">valid?</span><span class="p">:</span><span class="w"> </span><span class="no">false</span><span class="w">
</span><span class="p" data-group-id="1632076144-6">&gt;</span><span class="w">

</span><span class="gp unselectable">iex&gt; </span><span class="n">changeset</span><span class="o">.</span><span class="n">errors</span><span class="w">
</span><span class="p" data-group-id="1632076144-16">[</span><span class="w">
  </span><span class="ss">name</span><span class="p">:</span><span class="w"> </span><span class="p" data-group-id="1632076144-17">{</span><span class="s">&quot;can&#39;t be blank&quot;</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="1632076144-18">[</span><span class="ss">validation</span><span class="p">:</span><span class="w"> </span><span class="ss">:required</span><span class="p" data-group-id="1632076144-18">]</span><span class="p" data-group-id="1632076144-17">}</span><span class="p">,</span><span class="w">
  </span><span class="ss">email</span><span class="p">:</span><span class="w"> </span><span class="p" data-group-id="1632076144-19">{</span><span class="s">&quot;can&#39;t be blank&quot;</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="1632076144-20">[</span><span class="ss">validation</span><span class="p">:</span><span class="w"> </span><span class="ss">:required</span><span class="p" data-group-id="1632076144-20">]</span><span class="p" data-group-id="1632076144-19">}</span><span class="p">,</span><span class="w">
  </span><span class="ss">bio</span><span class="p">:</span><span class="w"> </span><span class="p" data-group-id="1632076144-21">{</span><span class="s">&quot;can&#39;t be blank&quot;</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="1632076144-22">[</span><span class="ss">validation</span><span class="p">:</span><span class="w"> </span><span class="ss">:required</span><span class="p" data-group-id="1632076144-22">]</span><span class="p" data-group-id="1632076144-21">}</span><span class="w">
</span><span class="p" data-group-id="1632076144-16">]</span></code></pre><p>What happens if we pass a key-value pair that is neither defined in the schema nor required?</p><p>Inside our existing IEx shell, let's create a <code class="inline">params</code> map with valid values plus an extra <code class="inline">random_key: &quot;random value&quot;</code>.</p><pre><code class="makeup elixir" translate="no"><span class="gp unselectable">iex&gt; </span><span class="n">params</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p" data-group-id="6405551796-1">%{</span><span class="ss">name</span><span class="p">:</span><span class="w"> </span><span class="s">&quot;Joe Example&quot;</span><span class="p">,</span><span class="w"> </span><span class="ss">email</span><span class="p">:</span><span class="w"> </span><span class="s">&quot;joe@example.com&quot;</span><span class="p">,</span><span class="w"> </span><span class="ss">bio</span><span class="p">:</span><span class="w"> </span><span class="s">&quot;An example to all&quot;</span><span class="p">,</span><span class="w"> </span><span class="ss">number_of_pets</span><span class="p">:</span><span class="w"> </span><span class="mi">5</span><span class="p">,</span><span class="w"> </span><span class="ss">random_key</span><span class="p">:</span><span class="w"> </span><span class="s">&quot;random value&quot;</span><span class="p" data-group-id="6405551796-1">}</span><span class="w">
</span><span class="p" data-group-id="6405551796-2">%{</span><span class="w">
  </span><span class="ss">bio</span><span class="p">:</span><span class="w"> </span><span class="s">&quot;An example to all&quot;</span><span class="p">,</span><span class="w">
  </span><span class="ss">email</span><span class="p">:</span><span class="w"> </span><span class="s">&quot;joe@example.com&quot;</span><span class="p">,</span><span class="w">
  </span><span class="ss">name</span><span class="p">:</span><span class="w"> </span><span class="s">&quot;Joe Example&quot;</span><span class="p">,</span><span class="w">
  </span><span class="ss">number_of_pets</span><span class="p">:</span><span class="w"> </span><span class="mi">5</span><span class="p">,</span><span class="w">
  </span><span class="ss">random_key</span><span class="p">:</span><span class="w"> </span><span class="s">&quot;random value&quot;</span><span class="w">
</span><span class="p" data-group-id="6405551796-2">}</span></code></pre><p>Next, let's use our new <code class="inline">params</code> map to create another changeset.</p><pre><code class="makeup elixir" translate="no"><span class="gp unselectable">iex&gt; </span><span class="n">changeset</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nc">User</span><span class="o">.</span><span class="n">changeset</span><span class="p" data-group-id="8613665951-1">(</span><span class="p" data-group-id="8613665951-2">%</span><span class="nc" data-group-id="8613665951-2">User</span><span class="p" data-group-id="8613665951-2">{</span><span class="p" data-group-id="8613665951-2">}</span><span class="p">,</span><span class="w"> </span><span class="n">params</span><span class="p" data-group-id="8613665951-1">)</span><span class="w">
</span><span class="p" data-group-id="8613665951-3">#</span><span class="nc" data-group-id="8613665951-3">Ecto.Changeset</span><span class="p" data-group-id="8613665951-3">&lt;</span><span class="w">
  </span><span class="ss">action</span><span class="p">:</span><span class="w"> </span><span class="no">nil</span><span class="p">,</span><span class="w">
  </span><span class="ss">changes</span><span class="p">:</span><span class="w"> </span><span class="p" data-group-id="8613665951-4">%{</span><span class="w">
    </span><span class="ss">bio</span><span class="p">:</span><span class="w"> </span><span class="s">&quot;An example to all&quot;</span><span class="p">,</span><span class="w">
    </span><span class="ss">email</span><span class="p">:</span><span class="w"> </span><span class="s">&quot;joe@example.com&quot;</span><span class="p">,</span><span class="w">
    </span><span class="ss">name</span><span class="p">:</span><span class="w"> </span><span class="s">&quot;Joe Example&quot;</span><span class="p">,</span><span class="w">
    </span><span class="ss">number_of_pets</span><span class="p">:</span><span class="w"> </span><span class="mi">5</span><span class="w">
  </span><span class="p" data-group-id="8613665951-4">}</span><span class="p">,</span><span class="w">
  </span><span class="ss">errors</span><span class="p">:</span><span class="w"> </span><span class="p" data-group-id="8613665951-5">[</span><span class="p" data-group-id="8613665951-5">]</span><span class="p">,</span><span class="w">
  </span><span class="ss">data</span><span class="p">:</span><span class="w"> </span><span class="p" data-group-id="8613665951-6">#</span><span class="nc" data-group-id="8613665951-6">Hello.User</span><span class="p" data-group-id="8613665951-6">&lt;</span><span class="p" data-group-id="8613665951-6">&gt;</span><span class="p">,</span><span class="w">
  </span><span class="ss">valid?</span><span class="p">:</span><span class="w"> </span><span class="no">true</span><span class="w">
</span><span class="p" data-group-id="8613665951-3">&gt;</span></code></pre><p>Our new changeset is valid.</p><pre><code class="makeup elixir" translate="no"><span class="gp unselectable">iex&gt; </span><span class="n">changeset</span><span class="o">.</span><span class="n">valid?</span><span class="w">
</span><span class="no">true</span></code></pre><p>We can also check the changeset's changes - the map we get after all of the transformations are complete.</p><pre><code class="makeup elixir" translate="no"><span class="gp unselectable">iex(9)&gt; </span><span class="n">changeset</span><span class="o">.</span><span class="n">changes</span><span class="w">
</span><span class="p" data-group-id="2153623804-1">%{</span><span class="ss">bio</span><span class="p">:</span><span class="w"> </span><span class="s">&quot;An example to all&quot;</span><span class="p">,</span><span class="w"> </span><span class="ss">email</span><span class="p">:</span><span class="w"> </span><span class="s">&quot;joe@example.com&quot;</span><span class="p">,</span><span class="w"> </span><span class="ss">name</span><span class="p">:</span><span class="w"> </span><span class="s">&quot;Joe Example&quot;</span><span class="p">,</span><span class="w">
  </span><span class="ss">number_of_pets</span><span class="p">:</span><span class="w"> </span><span class="mi">5</span><span class="p" data-group-id="2153623804-1">}</span></code></pre><p>Notice that our <code class="inline">random_key</code> key and <code class="inline">&quot;random_value&quot;</code> value have been removed from the final changeset. Changesets allow us to cast external data, such as user input on a web form or data from a CSV file into valid data into our system. Invalid parameters will be stripped and bad data that is unable to be cast according to our schema will be highlighted in the changeset errors.</p><p>We can validate more than just whether a field is required or not. Let's take a look at some finer-grained validations.</p><p>What if we had a requirement that all biographies in our system must be at least two characters long? We can do this easily by adding another transformation to the pipeline in our changeset which validates the length of the <code class="inline">bio</code> field.</p><pre><code class="makeup elixir" translate="no"><span class="kd">def</span><span class="w"> </span><span class="nf">changeset</span><span class="p" data-group-id="6508198705-1">(</span><span class="n">user</span><span class="p">,</span><span class="w"> </span><span class="n">attrs</span><span class="p" data-group-id="6508198705-1">)</span><span class="w"> </span><span class="k" data-group-id="6508198705-2">do</span><span class="w">
  </span><span class="n">user</span><span class="w">
  </span><span class="o">|&gt;</span><span class="w"> </span><span class="n">cast</span><span class="p" data-group-id="6508198705-3">(</span><span class="n">attrs</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="6508198705-4">[</span><span class="ss">:name</span><span class="p">,</span><span class="w"> </span><span class="ss">:email</span><span class="p">,</span><span class="w"> </span><span class="ss">:bio</span><span class="p">,</span><span class="w"> </span><span class="ss">:number_of_pets</span><span class="p" data-group-id="6508198705-4">]</span><span class="p" data-group-id="6508198705-3">)</span><span class="w">
  </span><span class="o">|&gt;</span><span class="w"> </span><span class="n">validate_required</span><span class="p" data-group-id="6508198705-5">(</span><span class="p" data-group-id="6508198705-6">[</span><span class="ss">:name</span><span class="p">,</span><span class="w"> </span><span class="ss">:email</span><span class="p">,</span><span class="w"> </span><span class="ss">:bio</span><span class="p">,</span><span class="w"> </span><span class="ss">:number_of_pets</span><span class="p" data-group-id="6508198705-6">]</span><span class="p" data-group-id="6508198705-5">)</span><span class="w">
  </span><span class="o">|&gt;</span><span class="w"> </span><span class="n">validate_length</span><span class="p" data-group-id="6508198705-7">(</span><span class="ss">:bio</span><span class="p">,</span><span class="w"> </span><span class="ss">min</span><span class="p">:</span><span class="w"> </span><span class="mi">2</span><span class="p" data-group-id="6508198705-7">)</span><span class="w">
</span><span class="k" data-group-id="6508198705-2">end</span></code></pre><p>Now, if we try to cast data containing a value of <code class="inline">&quot;A&quot;</code> for our user's <code class="inline">bio</code>, we should see the failed validation in the changeset's errors.</p><pre><code class="makeup elixir" translate="no"><span class="gp unselectable">iex&gt; </span><span class="n">recompile</span><span class="p" data-group-id="9856521984-1">(</span><span class="p" data-group-id="9856521984-1">)</span><span class="w">

</span><span class="gp unselectable">iex&gt; </span><span class="n">changeset</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nc">User</span><span class="o">.</span><span class="n">changeset</span><span class="p" data-group-id="9856521984-2">(</span><span class="p" data-group-id="9856521984-3">%</span><span class="nc" data-group-id="9856521984-3">User</span><span class="p" data-group-id="9856521984-3">{</span><span class="p" data-group-id="9856521984-3">}</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="9856521984-4">%{</span><span class="ss">bio</span><span class="p">:</span><span class="w"> </span><span class="s">&quot;A&quot;</span><span class="p" data-group-id="9856521984-4">}</span><span class="p" data-group-id="9856521984-2">)</span><span class="w">

</span><span class="gp unselectable">iex&gt; </span><span class="n">changeset</span><span class="o">.</span><span class="n">errors</span><span class="p" data-group-id="9856521984-5">[</span><span class="ss">:bio</span><span class="p" data-group-id="9856521984-5">]</span><span class="w">
</span><span class="p" data-group-id="9856521984-6">{</span><span class="s">&quot;should be at least %{count} character(s)&quot;</span><span class="p">,</span><span class="w">
 </span><span class="p" data-group-id="9856521984-7">[</span><span class="ss">count</span><span class="p">:</span><span class="w"> </span><span class="mi">2</span><span class="p">,</span><span class="w"> </span><span class="ss">validation</span><span class="p">:</span><span class="w"> </span><span class="ss">:length</span><span class="p">,</span><span class="w"> </span><span class="ss">kind</span><span class="p">:</span><span class="w"> </span><span class="ss">:min</span><span class="p">,</span><span class="w"> </span><span class="ss">type</span><span class="p">:</span><span class="w"> </span><span class="ss">:string</span><span class="p" data-group-id="9856521984-7">]</span><span class="p" data-group-id="9856521984-6">}</span></code></pre><p>If we also have a requirement for the maximum length that a bio can have, we can simply add another validation.</p><pre><code class="makeup elixir" translate="no"><span class="kd">def</span><span class="w"> </span><span class="nf">changeset</span><span class="p" data-group-id="5281217658-1">(</span><span class="n">user</span><span class="p">,</span><span class="w"> </span><span class="n">attrs</span><span class="p" data-group-id="5281217658-1">)</span><span class="w"> </span><span class="k" data-group-id="5281217658-2">do</span><span class="w">
  </span><span class="n">user</span><span class="w">
  </span><span class="o">|&gt;</span><span class="w"> </span><span class="n">cast</span><span class="p" data-group-id="5281217658-3">(</span><span class="n">attrs</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="5281217658-4">[</span><span class="ss">:name</span><span class="p">,</span><span class="w"> </span><span class="ss">:email</span><span class="p">,</span><span class="w"> </span><span class="ss">:bio</span><span class="p">,</span><span class="w"> </span><span class="ss">:number_of_pets</span><span class="p" data-group-id="5281217658-4">]</span><span class="p" data-group-id="5281217658-3">)</span><span class="w">
  </span><span class="o">|&gt;</span><span class="w"> </span><span class="n">validate_required</span><span class="p" data-group-id="5281217658-5">(</span><span class="p" data-group-id="5281217658-6">[</span><span class="ss">:name</span><span class="p">,</span><span class="w"> </span><span class="ss">:email</span><span class="p">,</span><span class="w"> </span><span class="ss">:bio</span><span class="p">,</span><span class="w"> </span><span class="ss">:number_of_pets</span><span class="p" data-group-id="5281217658-6">]</span><span class="p" data-group-id="5281217658-5">)</span><span class="w">
  </span><span class="o">|&gt;</span><span class="w"> </span><span class="n">validate_length</span><span class="p" data-group-id="5281217658-7">(</span><span class="ss">:bio</span><span class="p">,</span><span class="w"> </span><span class="ss">min</span><span class="p">:</span><span class="w"> </span><span class="mi">2</span><span class="p" data-group-id="5281217658-7">)</span><span class="w">
  </span><span class="o">|&gt;</span><span class="w"> </span><span class="n">validate_length</span><span class="p" data-group-id="5281217658-8">(</span><span class="ss">:bio</span><span class="p">,</span><span class="w"> </span><span class="ss">max</span><span class="p">:</span><span class="w"> </span><span class="mi">140</span><span class="p" data-group-id="5281217658-8">)</span><span class="w">
</span><span class="k" data-group-id="5281217658-2">end</span></code></pre><p>Let's say we want to perform at least some rudimentary format validation on the <code class="inline">email</code> field. All we want to check for is the presence of the <code class="inline">@</code>. The <a href="https://hexdocs.pm/ecto/3.10.1/Ecto.Changeset.html#validate_format/3"><code class="inline">Ecto.Changeset.validate_format/3</code></a> function is just what we need.</p><pre><code class="makeup elixir" translate="no"><span class="kd">def</span><span class="w"> </span><span class="nf">changeset</span><span class="p" data-group-id="3628972555-1">(</span><span class="n">user</span><span class="p">,</span><span class="w"> </span><span class="n">attrs</span><span class="p" data-group-id="3628972555-1">)</span><span class="w"> </span><span class="k" data-group-id="3628972555-2">do</span><span class="w">
  </span><span class="n">user</span><span class="w">
  </span><span class="o">|&gt;</span><span class="w"> </span><span class="n">cast</span><span class="p" data-group-id="3628972555-3">(</span><span class="n">attrs</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="3628972555-4">[</span><span class="ss">:name</span><span class="p">,</span><span class="w"> </span><span class="ss">:email</span><span class="p">,</span><span class="w"> </span><span class="ss">:bio</span><span class="p">,</span><span class="w"> </span><span class="ss">:number_of_pets</span><span class="p" data-group-id="3628972555-4">]</span><span class="p" data-group-id="3628972555-3">)</span><span class="w">
  </span><span class="o">|&gt;</span><span class="w"> </span><span class="n">validate_required</span><span class="p" data-group-id="3628972555-5">(</span><span class="p" data-group-id="3628972555-6">[</span><span class="ss">:name</span><span class="p">,</span><span class="w"> </span><span class="ss">:email</span><span class="p">,</span><span class="w"> </span><span class="ss">:bio</span><span class="p">,</span><span class="w"> </span><span class="ss">:number_of_pets</span><span class="p" data-group-id="3628972555-6">]</span><span class="p" data-group-id="3628972555-5">)</span><span class="w">
  </span><span class="o">|&gt;</span><span class="w"> </span><span class="n">validate_length</span><span class="p" data-group-id="3628972555-7">(</span><span class="ss">:bio</span><span class="p">,</span><span class="w"> </span><span class="ss">min</span><span class="p">:</span><span class="w"> </span><span class="mi">2</span><span class="p" data-group-id="3628972555-7">)</span><span class="w">
  </span><span class="o">|&gt;</span><span class="w"> </span><span class="n">validate_length</span><span class="p" data-group-id="3628972555-8">(</span><span class="ss">:bio</span><span class="p">,</span><span class="w"> </span><span class="ss">max</span><span class="p">:</span><span class="w"> </span><span class="mi">140</span><span class="p" data-group-id="3628972555-8">)</span><span class="w">
  </span><span class="o">|&gt;</span><span class="w"> </span><span class="n">validate_format</span><span class="p" data-group-id="3628972555-9">(</span><span class="ss">:email</span><span class="p">,</span><span class="w"> </span><span class="sr">~r/@/</span><span class="p" data-group-id="3628972555-9">)</span><span class="w">
</span><span class="k" data-group-id="3628972555-2">end</span></code></pre><p>If we try to cast a user with an email of <code class="inline">&quot;example.com&quot;</code>, we should see an error message like the following:</p><pre><code class="makeup elixir" translate="no"><span class="gp unselectable">iex&gt; </span><span class="n">recompile</span><span class="p" data-group-id="0354227898-1">(</span><span class="p" data-group-id="0354227898-1">)</span><span class="w">

</span><span class="gp unselectable">iex&gt; </span><span class="n">changeset</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nc">User</span><span class="o">.</span><span class="n">changeset</span><span class="p" data-group-id="0354227898-2">(</span><span class="p" data-group-id="0354227898-3">%</span><span class="nc" data-group-id="0354227898-3">User</span><span class="p" data-group-id="0354227898-3">{</span><span class="p" data-group-id="0354227898-3">}</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="0354227898-4">%{</span><span class="ss">email</span><span class="p">:</span><span class="w"> </span><span class="s">&quot;example.com&quot;</span><span class="p" data-group-id="0354227898-4">}</span><span class="p" data-group-id="0354227898-2">)</span><span class="w">

</span><span class="gp unselectable">iex&gt; </span><span class="n">changeset</span><span class="o">.</span><span class="n">errors</span><span class="p" data-group-id="0354227898-5">[</span><span class="ss">:email</span><span class="p" data-group-id="0354227898-5">]</span><span class="w">
</span><span class="p" data-group-id="0354227898-6">{</span><span class="s">&quot;has invalid format&quot;</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="0354227898-7">[</span><span class="ss">validation</span><span class="p">:</span><span class="w"> </span><span class="ss">:format</span><span class="p" data-group-id="0354227898-7">]</span><span class="p" data-group-id="0354227898-6">}</span></code></pre><p>There are many more validations and transformations we can perform in a changeset. Please see the <a href="https://hexdocs.pm/ecto/Ecto.Changeset.html">Ecto Changeset documentation</a> for more information.</p><h2 id="data-persistence" class="section-heading">
  <a href="#data-persistence" class="hover-link">
    <i class="ri-link-m" aria-hidden="true"></i>
  </a>
  <span class="text">Data persistence</span>
</h2>
<p>We've explored migrations and schemas, but we haven't yet persisted any of our schemas or changesets. We briefly looked at our repository module in <code class="inline">lib/hello/repo.ex</code> earlier, and now it's time to put it to use.</p><p>Ecto repositories are the interface into a storage system, be it a database like PostgreSQL or an external service like a RESTful API. The <code class="inline">Repo</code> module's purpose is to take care of the finer details of persistence and data querying for us. As the caller, we only care about fetching and persisting data. The <code class="inline">Repo</code> module takes care of the underlying database adapter communication, connection pooling, and error translation for database constraint violations.</p><p>Let's head back over to IEx with <code class="inline">iex -S mix</code>, and insert a couple of users into the database.</p><pre><code class="makeup elixir" translate="no"><span class="gp unselectable">iex&gt; </span><span class="kn">alias</span><span class="w"> </span><span class="nc">Hello</span><span class="o">.</span><span class="p" data-group-id="1537035455-1">{</span><span class="nc">Repo</span><span class="p">,</span><span class="w"> </span><span class="nc">User</span><span class="p" data-group-id="1537035455-1">}</span><span class="w">
</span><span class="p" data-group-id="1537035455-2">[</span><span class="nc">Hello.Repo</span><span class="p">,</span><span class="w"> </span><span class="nc">Hello.User</span><span class="p" data-group-id="1537035455-2">]</span><span class="w">

</span><span class="gp unselectable">iex&gt; </span><span class="nc">Repo</span><span class="o">.</span><span class="n">insert</span><span class="p" data-group-id="1537035455-3">(</span><span class="p" data-group-id="1537035455-4">%</span><span class="nc" data-group-id="1537035455-4">User</span><span class="p" data-group-id="1537035455-4">{</span><span class="ss">email</span><span class="p">:</span><span class="w"> </span><span class="s">&quot;user1@example.com&quot;</span><span class="p" data-group-id="1537035455-4">}</span><span class="p" data-group-id="1537035455-3">)</span><span class="w">
</span><span class="p" data-group-id="1537035455-5">[</span><span class="n">debug</span><span class="p" data-group-id="1537035455-5">]</span><span class="w"> </span><span class="nc">QUERY</span><span class="w"> </span><span class="nc">OK</span><span class="w"> </span><span class="n">db</span><span class="o">=</span><span class="mf">6.5</span><span class="n">ms</span><span class="w"> </span><span class="n">queue</span><span class="o">=</span><span class="mf">0.5</span><span class="n">ms</span><span class="w"> </span><span class="n">idle</span><span class="o">=</span><span class="mf">1358.3</span><span class="n">ms</span><span class="w">
</span><span class="nc">INSERT</span><span class="w"> </span><span class="nc">INTO</span><span class="w"> </span><span class="s">&quot;users&quot;</span><span class="w"> </span><span class="p" data-group-id="1537035455-6">(</span><span class="s">&quot;email&quot;</span><span class="p">,</span><span class="s">&quot;inserted_at&quot;</span><span class="p">,</span><span class="s">&quot;updated_at&quot;</span><span class="p" data-group-id="1537035455-6">)</span><span class="w"> </span><span class="nc">VALUES</span><span class="w"> </span><span class="p" data-group-id="1537035455-7">(</span><span class="err">$</span><span class="mi">1</span><span class="p">,</span><span class="err">$</span><span class="mi">2</span><span class="p">,</span><span class="err">$</span><span class="mi">3</span><span class="p" data-group-id="1537035455-7">)</span><span class="w"> </span><span class="nc">RETURNING</span><span class="w"> </span><span class="s">&quot;id&quot;</span><span class="w"> </span><span class="p" data-group-id="1537035455-8">[</span><span class="s">&quot;user1@example.com&quot;</span><span class="p">,</span><span class="w"> </span><span class="ld">~N[2021-02-25 01:58:55]</span><span class="p">,</span><span class="w"> </span><span class="ld">~N[2021-02-25 01:58:55]</span><span class="p" data-group-id="1537035455-8">]</span><span class="w">
</span><span class="p" data-group-id="1537035455-9">{</span><span class="ss">:ok</span><span class="p">,</span><span class="w">
 </span><span class="p" data-group-id="1537035455-10">%</span><span class="nc" data-group-id="1537035455-10">Hello.User</span><span class="p" data-group-id="1537035455-10">{</span><span class="w">
   </span><span class="ss">__meta__</span><span class="p">:</span><span class="w"> </span><span class="p" data-group-id="1537035455-11">#</span><span class="nc" data-group-id="1537035455-11">Ecto.Schema.Metadata</span><span class="p" data-group-id="1537035455-11">&lt;</span><span class="ss">:loaded</span><span class="p">,</span><span class="w"> </span><span class="s">&quot;users&quot;</span><span class="p" data-group-id="1537035455-11">&gt;</span><span class="p">,</span><span class="w">
   </span><span class="ss">bio</span><span class="p">:</span><span class="w"> </span><span class="no">nil</span><span class="p">,</span><span class="w">
   </span><span class="ss">email</span><span class="p">:</span><span class="w"> </span><span class="s">&quot;user1@example.com&quot;</span><span class="p">,</span><span class="w">
   </span><span class="ss">id</span><span class="p">:</span><span class="w"> </span><span class="mi">1</span><span class="p">,</span><span class="w">
   </span><span class="ss">inserted_at</span><span class="p">:</span><span class="w"> </span><span class="ld">~N[2021-02-25 01:58:55]</span><span class="p">,</span><span class="w">
   </span><span class="ss">name</span><span class="p">:</span><span class="w"> </span><span class="no">nil</span><span class="p">,</span><span class="w">
   </span><span class="ss">number_of_pets</span><span class="p">:</span><span class="w"> </span><span class="no">nil</span><span class="p">,</span><span class="w">
   </span><span class="ss">updated_at</span><span class="p">:</span><span class="w"> </span><span class="ld">~N[2021-02-25 01:58:55]</span><span class="w">
 </span><span class="p" data-group-id="1537035455-10">}</span><span class="p" data-group-id="1537035455-9">}</span><span class="w">

</span><span class="gp unselectable">iex&gt; </span><span class="nc">Repo</span><span class="o">.</span><span class="n">insert</span><span class="p" data-group-id="1537035455-12">(</span><span class="p" data-group-id="1537035455-13">%</span><span class="nc" data-group-id="1537035455-13">User</span><span class="p" data-group-id="1537035455-13">{</span><span class="ss">email</span><span class="p">:</span><span class="w"> </span><span class="s">&quot;user2@example.com&quot;</span><span class="p" data-group-id="1537035455-13">}</span><span class="p" data-group-id="1537035455-12">)</span><span class="w">
</span><span class="p" data-group-id="1537035455-14">[</span><span class="n">debug</span><span class="p" data-group-id="1537035455-14">]</span><span class="w"> </span><span class="nc">QUERY</span><span class="w"> </span><span class="nc">OK</span><span class="w"> </span><span class="n">db</span><span class="o">=</span><span class="mf">1.3</span><span class="n">ms</span><span class="w"> </span><span class="n">idle</span><span class="o">=</span><span class="mf">1402.7</span><span class="n">ms</span><span class="w">
</span><span class="nc">INSERT</span><span class="w"> </span><span class="nc">INTO</span><span class="w"> </span><span class="s">&quot;users&quot;</span><span class="w"> </span><span class="p" data-group-id="1537035455-15">(</span><span class="s">&quot;email&quot;</span><span class="p">,</span><span class="s">&quot;inserted_at&quot;</span><span class="p">,</span><span class="s">&quot;updated_at&quot;</span><span class="p" data-group-id="1537035455-15">)</span><span class="w"> </span><span class="nc">VALUES</span><span class="w"> </span><span class="p" data-group-id="1537035455-16">(</span><span class="err">$</span><span class="mi">1</span><span class="p">,</span><span class="err">$</span><span class="mi">2</span><span class="p">,</span><span class="err">$</span><span class="mi">3</span><span class="p" data-group-id="1537035455-16">)</span><span class="w"> </span><span class="nc">RETURNING</span><span class="w"> </span><span class="s">&quot;id&quot;</span><span class="w"> </span><span class="p" data-group-id="1537035455-17">[</span><span class="s">&quot;user2@example.com&quot;</span><span class="p">,</span><span class="w"> </span><span class="ld">~N[2021-02-25 02:03:28]</span><span class="p">,</span><span class="w"> </span><span class="ld">~N[2021-02-25 02:03:28]</span><span class="p" data-group-id="1537035455-17">]</span><span class="w">
</span><span class="p" data-group-id="1537035455-18">{</span><span class="ss">:ok</span><span class="p">,</span><span class="w">
 </span><span class="p" data-group-id="1537035455-19">%</span><span class="nc" data-group-id="1537035455-19">Hello.User</span><span class="p" data-group-id="1537035455-19">{</span><span class="w">
   </span><span class="ss">__meta__</span><span class="p">:</span><span class="w"> </span><span class="p" data-group-id="1537035455-20">#</span><span class="nc" data-group-id="1537035455-20">Ecto.Schema.Metadata</span><span class="p" data-group-id="1537035455-20">&lt;</span><span class="ss">:loaded</span><span class="p">,</span><span class="w"> </span><span class="s">&quot;users&quot;</span><span class="p" data-group-id="1537035455-20">&gt;</span><span class="p">,</span><span class="w">
   </span><span class="ss">bio</span><span class="p">:</span><span class="w"> </span><span class="no">nil</span><span class="p">,</span><span class="w">
   </span><span class="ss">email</span><span class="p">:</span><span class="w"> </span><span class="s">&quot;user2@example.com&quot;</span><span class="p">,</span><span class="w">
   </span><span class="ss">id</span><span class="p">:</span><span class="w"> </span><span class="mi">2</span><span class="p">,</span><span class="w">
   </span><span class="ss">inserted_at</span><span class="p">:</span><span class="w"> </span><span class="ld">~N[2021-02-25 02:03:28]</span><span class="p">,</span><span class="w">
   </span><span class="ss">name</span><span class="p">:</span><span class="w"> </span><span class="no">nil</span><span class="p">,</span><span class="w">
   </span><span class="ss">number_of_pets</span><span class="p">:</span><span class="w"> </span><span class="no">nil</span><span class="p">,</span><span class="w">
   </span><span class="ss">updated_at</span><span class="p">:</span><span class="w"> </span><span class="ld">~N[2021-02-25 02:03:28]</span><span class="w">
 </span><span class="p" data-group-id="1537035455-19">}</span><span class="p" data-group-id="1537035455-18">}</span></code></pre><p>We started by aliasing our <code class="inline">User</code> and <code class="inline">Repo</code> modules for easy access. Next, we called <a href="https://hexdocs.pm/ecto/3.10.1/Ecto.Repo.html#c:insert/2" title=""><code class="inline">Repo.insert/2</code></a> with a User struct. Since we are in the <code class="inline">dev</code> environment, we can see the debug logs for the query our repository performed when inserting the underlying <code class="inline">%User{}</code> data. We received a two-element tuple back with <code class="inline">{:ok, %User{}}</code>, which lets us know the insertion was successful.</p><p>We could also insert a user by passing a changeset to <a href="https://hexdocs.pm/ecto/3.10.1/Ecto.Repo.html#c:insert/2" title=""><code class="inline">Repo.insert/2</code></a>. If the changeset is valid, the repository will use an optimized database query to insert the record, and return a two-element tuple back, as above. If the changeset is not valid, we receive a two-element tuple consisting of <code class="inline">:error</code> plus the invalid changeset.</p><p>With a couple of users inserted, let's fetch them back out of the repo.</p><pre><code class="makeup elixir" translate="no"><span class="gp unselectable">iex&gt; </span><span class="nc">Repo</span><span class="o">.</span><span class="n">all</span><span class="p" data-group-id="6475745749-1">(</span><span class="nc">User</span><span class="p" data-group-id="6475745749-1">)</span><span class="w">
</span><span class="p" data-group-id="6475745749-2">[</span><span class="n">debug</span><span class="p" data-group-id="6475745749-2">]</span><span class="w"> </span><span class="nc">QUERY</span><span class="w"> </span><span class="nc">OK</span><span class="w"> </span><span class="n">source</span><span class="o">=</span><span class="s">&quot;users&quot;</span><span class="w"> </span><span class="n">db</span><span class="o">=</span><span class="mf">5.8</span><span class="n">ms</span><span class="w"> </span><span class="n">queue</span><span class="o">=</span><span class="mf">1.4</span><span class="n">ms</span><span class="w"> </span><span class="n">idle</span><span class="o">=</span><span class="mf">1672.0</span><span class="n">ms</span><span class="w">
</span><span class="nc">SELECT</span><span class="w"> </span><span class="n">u0</span><span class="o">.</span><span class="s">&quot;id&quot;</span><span class="p">,</span><span class="w"> </span><span class="n">u0</span><span class="o">.</span><span class="s">&quot;bio&quot;</span><span class="p">,</span><span class="w"> </span><span class="n">u0</span><span class="o">.</span><span class="s">&quot;email&quot;</span><span class="p">,</span><span class="w"> </span><span class="n">u0</span><span class="o">.</span><span class="s">&quot;name&quot;</span><span class="p">,</span><span class="w"> </span><span class="n">u0</span><span class="o">.</span><span class="s">&quot;number_of_pets&quot;</span><span class="p">,</span><span class="w"> </span><span class="n">u0</span><span class="o">.</span><span class="s">&quot;inserted_at&quot;</span><span class="p">,</span><span class="w"> </span><span class="n">u0</span><span class="o">.</span><span class="s">&quot;updated_at&quot;</span><span class="w"> </span><span class="nc">FROM</span><span class="w"> </span><span class="s">&quot;users&quot;</span><span class="w"> </span><span class="nc">AS</span><span class="w"> </span><span class="n">u0</span><span class="w"> </span><span class="p" data-group-id="6475745749-3">[</span><span class="p" data-group-id="6475745749-3">]</span><span class="w">
</span><span class="p" data-group-id="6475745749-4">[</span><span class="w">
  </span><span class="p" data-group-id="6475745749-5">%</span><span class="nc" data-group-id="6475745749-5">Hello.User</span><span class="p" data-group-id="6475745749-5">{</span><span class="w">
    </span><span class="ss">__meta__</span><span class="p">:</span><span class="w"> </span><span class="p" data-group-id="6475745749-6">#</span><span class="nc" data-group-id="6475745749-6">Ecto.Schema.Metadata</span><span class="p" data-group-id="6475745749-6">&lt;</span><span class="ss">:loaded</span><span class="p">,</span><span class="w"> </span><span class="s">&quot;users&quot;</span><span class="p" data-group-id="6475745749-6">&gt;</span><span class="p">,</span><span class="w">
    </span><span class="ss">bio</span><span class="p">:</span><span class="w"> </span><span class="no">nil</span><span class="p">,</span><span class="w">
    </span><span class="ss">email</span><span class="p">:</span><span class="w"> </span><span class="s">&quot;user1@example.com&quot;</span><span class="p">,</span><span class="w">
    </span><span class="ss">id</span><span class="p">:</span><span class="w"> </span><span class="mi">1</span><span class="p">,</span><span class="w">
    </span><span class="ss">inserted_at</span><span class="p">:</span><span class="w"> </span><span class="ld">~N[2021-02-25 01:58:55]</span><span class="p">,</span><span class="w">
    </span><span class="ss">name</span><span class="p">:</span><span class="w"> </span><span class="no">nil</span><span class="p">,</span><span class="w">
    </span><span class="ss">number_of_pets</span><span class="p">:</span><span class="w"> </span><span class="no">nil</span><span class="p">,</span><span class="w">
    </span><span class="ss">updated_at</span><span class="p">:</span><span class="w"> </span><span class="ld">~N[2021-02-25 01:58:55]</span><span class="w">
  </span><span class="p" data-group-id="6475745749-5">}</span><span class="p">,</span><span class="w">
  </span><span class="p" data-group-id="6475745749-7">%</span><span class="nc" data-group-id="6475745749-7">Hello.User</span><span class="p" data-group-id="6475745749-7">{</span><span class="w">
    </span><span class="ss">__meta__</span><span class="p">:</span><span class="w"> </span><span class="p" data-group-id="6475745749-8">#</span><span class="nc" data-group-id="6475745749-8">Ecto.Schema.Metadata</span><span class="p" data-group-id="6475745749-8">&lt;</span><span class="ss">:loaded</span><span class="p">,</span><span class="w"> </span><span class="s">&quot;users&quot;</span><span class="p" data-group-id="6475745749-8">&gt;</span><span class="p">,</span><span class="w">
    </span><span class="ss">bio</span><span class="p">:</span><span class="w"> </span><span class="no">nil</span><span class="p">,</span><span class="w">
    </span><span class="ss">email</span><span class="p">:</span><span class="w"> </span><span class="s">&quot;user2@example.com&quot;</span><span class="p">,</span><span class="w">
    </span><span class="ss">id</span><span class="p">:</span><span class="w"> </span><span class="mi">2</span><span class="p">,</span><span class="w">
    </span><span class="ss">inserted_at</span><span class="p">:</span><span class="w"> </span><span class="ld">~N[2021-02-25 02:03:28]</span><span class="p">,</span><span class="w">
    </span><span class="ss">name</span><span class="p">:</span><span class="w"> </span><span class="no">nil</span><span class="p">,</span><span class="w">
    </span><span class="ss">number_of_pets</span><span class="p">:</span><span class="w"> </span><span class="no">nil</span><span class="p">,</span><span class="w">
    </span><span class="ss">updated_at</span><span class="p">:</span><span class="w"> </span><span class="ld">~N[2021-02-25 02:03:28]</span><span class="w">
  </span><span class="p" data-group-id="6475745749-7">}</span><span class="w">
</span><span class="p" data-group-id="6475745749-4">]</span></code></pre><p>That was easy! <code class="inline">Repo.all/1</code> takes a data source, our <code class="inline">User</code> schema in this case, and translates that to an underlying SQL query against our database. After it fetches the data, the Repo then uses our Ecto schema to map the database values back into Elixir data structures according to our <code class="inline">User</code> schema. We're not just limited to basic querying – Ecto includes a full-fledged query DSL for advanced SQL generation. In addition to a natural Elixir DSL, Ecto's query engine gives us multiple great features, such as SQL injection protection and compile-time optimization of queries. Let's try it out.</p><pre><code class="makeup elixir" translate="no"><span class="gp unselectable">iex&gt; </span><span class="kn">import</span><span class="w"> </span><span class="nc">Ecto.Query</span><span class="w">
</span><span class="nc">Ecto.Query</span><span class="w">

</span><span class="gp unselectable">iex&gt; </span><span class="nc">Repo</span><span class="o">.</span><span class="n">all</span><span class="p" data-group-id="3010278862-1">(</span><span class="n">from</span><span class="w"> </span><span class="n">u</span><span class="w"> </span><span class="ow">in</span><span class="w"> </span><span class="nc">User</span><span class="p">,</span><span class="w"> </span><span class="ss">select</span><span class="p">:</span><span class="w"> </span><span class="n">u</span><span class="o">.</span><span class="n">email</span><span class="p" data-group-id="3010278862-1">)</span><span class="w">
</span><span class="p" data-group-id="3010278862-2">[</span><span class="n">debug</span><span class="p" data-group-id="3010278862-2">]</span><span class="w"> </span><span class="nc">QUERY</span><span class="w"> </span><span class="nc">OK</span><span class="w"> </span><span class="n">source</span><span class="o">=</span><span class="s">&quot;users&quot;</span><span class="w"> </span><span class="n">db</span><span class="o">=</span><span class="mf">0.8</span><span class="n">ms</span><span class="w"> </span><span class="n">queue</span><span class="o">=</span><span class="mf">0.9</span><span class="n">ms</span><span class="w"> </span><span class="n">idle</span><span class="o">=</span><span class="mf">1634.0</span><span class="n">ms</span><span class="w">
</span><span class="nc">SELECT</span><span class="w"> </span><span class="n">u0</span><span class="o">.</span><span class="s">&quot;email&quot;</span><span class="w"> </span><span class="nc">FROM</span><span class="w"> </span><span class="s">&quot;users&quot;</span><span class="w"> </span><span class="nc">AS</span><span class="w"> </span><span class="n">u0</span><span class="w"> </span><span class="p" data-group-id="3010278862-3">[</span><span class="p" data-group-id="3010278862-3">]</span><span class="w">
</span><span class="p" data-group-id="3010278862-4">[</span><span class="s">&quot;user1@example.com&quot;</span><span class="p">,</span><span class="w"> </span><span class="s">&quot;user2@example.com&quot;</span><span class="p" data-group-id="3010278862-4">]</span></code></pre><p>First, we imported [<a href="https://hexdocs.pm/ecto/3.10.1/Ecto.Query.html"><code class="inline">Ecto.Query</code></a>], which imports the <a href="https://hexdocs.pm/ecto/3.10.1/Ecto.Query.html#from/2" title=""><code class="inline">from/2</code></a> macro of Ecto's Query DSL. Next, we built a query which selects all the email addresses in our users table. Let's try another example.</p><pre><code class="makeup elixir" translate="no"><span class="gp unselectable">iex&gt; </span><span class="nc">Repo</span><span class="o">.</span><span class="n">one</span><span class="p" data-group-id="0838471466-1">(</span><span class="n">from</span><span class="w"> </span><span class="n">u</span><span class="w"> </span><span class="ow">in</span><span class="w"> </span><span class="nc">User</span><span class="p">,</span><span class="w"> </span><span class="ss">where</span><span class="p">:</span><span class="w"> </span><span class="n">ilike</span><span class="p" data-group-id="0838471466-2">(</span><span class="n">u</span><span class="o">.</span><span class="n">email</span><span class="p">,</span><span class="w"> </span><span class="s">&quot;%1%&quot;</span><span class="p" data-group-id="0838471466-2">)</span><span class="p">,</span><span class="w">
                               </span><span class="ss">select</span><span class="p">:</span><span class="w"> </span><span class="n">count</span><span class="p" data-group-id="0838471466-3">(</span><span class="n">u</span><span class="o">.</span><span class="n">id</span><span class="p" data-group-id="0838471466-3">)</span><span class="p" data-group-id="0838471466-1">)</span><span class="w">
</span><span class="p" data-group-id="0838471466-4">[</span><span class="n">debug</span><span class="p" data-group-id="0838471466-4">]</span><span class="w"> </span><span class="nc">QUERY</span><span class="w"> </span><span class="nc">OK</span><span class="w"> </span><span class="n">source</span><span class="o">=</span><span class="s">&quot;users&quot;</span><span class="w"> </span><span class="n">db</span><span class="o">=</span><span class="mf">1.6</span><span class="n">ms</span><span class="w"> </span><span class="nc">SELECT</span><span class="w"> </span><span class="n">count</span><span class="p" data-group-id="0838471466-5">(</span><span class="n">u0</span><span class="o">.</span><span class="s">&quot;id&quot;</span><span class="p" data-group-id="0838471466-5">)</span><span class="w"> </span><span class="nc">FROM</span><span class="w"> </span><span class="s">&quot;users&quot;</span><span class="w"> </span><span class="nc">AS</span><span class="w"> </span><span class="n">u0</span><span class="w"> </span><span class="nc">WHERE</span><span class="w"> </span><span class="p" data-group-id="0838471466-6">(</span><span class="n">u0</span><span class="o">.</span><span class="s">&quot;email&quot;</span><span class="w"> </span><span class="nc">ILIKE</span><span class="w"> </span><span class="sc">&#39;%1%&#39;</span><span class="p" data-group-id="0838471466-6">)</span><span class="w"> </span><span class="p" data-group-id="0838471466-7">[</span><span class="p" data-group-id="0838471466-7">]</span><span class="w">
</span><span class="mi">1</span></code></pre><p>Now we're starting to get a taste of Ecto's rich querying capabilities. We used <a href="https://hexdocs.pm/ecto/3.10.1/Ecto.Repo.html#c:one/2" title=""><code class="inline">Repo.one/2</code></a> to fetch the count of all users with an email address containing <code class="inline">1</code>, and received the expected count in return. This just scratches the surface of Ecto's query interface, and much more is supported such as sub-querying, interval queries, and advanced select statements. For example, let's build a query to fetch a map of all user id's to their email addresses.</p><pre><code class="makeup elixir" translate="no"><span class="gp unselectable">iex&gt; </span><span class="nc">Repo</span><span class="o">.</span><span class="n">all</span><span class="p" data-group-id="8352252839-1">(</span><span class="n">from</span><span class="w"> </span><span class="n">u</span><span class="w"> </span><span class="ow">in</span><span class="w"> </span><span class="nc">User</span><span class="p">,</span><span class="w"> </span><span class="ss">select</span><span class="p">:</span><span class="w"> </span><span class="p" data-group-id="8352252839-2">%{</span><span class="n">u</span><span class="o">.</span><span class="n">id</span><span class="w"> </span><span class="p">=&gt;</span><span class="w"> </span><span class="n">u</span><span class="o">.</span><span class="n">email</span><span class="p" data-group-id="8352252839-2">}</span><span class="p" data-group-id="8352252839-1">)</span><span class="w">
</span><span class="p" data-group-id="8352252839-3">[</span><span class="n">debug</span><span class="p" data-group-id="8352252839-3">]</span><span class="w"> </span><span class="nc">QUERY</span><span class="w"> </span><span class="nc">OK</span><span class="w"> </span><span class="n">source</span><span class="o">=</span><span class="s">&quot;users&quot;</span><span class="w"> </span><span class="n">db</span><span class="o">=</span><span class="mf">0.9</span><span class="n">ms</span><span class="w">
</span><span class="nc">SELECT</span><span class="w"> </span><span class="n">u0</span><span class="o">.</span><span class="s">&quot;id&quot;</span><span class="p">,</span><span class="w"> </span><span class="n">u0</span><span class="o">.</span><span class="s">&quot;email&quot;</span><span class="w"> </span><span class="nc">FROM</span><span class="w"> </span><span class="s">&quot;users&quot;</span><span class="w"> </span><span class="nc">AS</span><span class="w"> </span><span class="n">u0</span><span class="w"> </span><span class="p" data-group-id="8352252839-4">[</span><span class="p" data-group-id="8352252839-4">]</span><span class="w">
</span><span class="p" data-group-id="8352252839-5">[</span><span class="w">
  </span><span class="p" data-group-id="8352252839-6">%{</span><span class="mi">1</span><span class="w"> </span><span class="p">=&gt;</span><span class="w"> </span><span class="s">&quot;user1@example.com&quot;</span><span class="p" data-group-id="8352252839-6">}</span><span class="p">,</span><span class="w">
  </span><span class="p" data-group-id="8352252839-7">%{</span><span class="mi">2</span><span class="w"> </span><span class="p">=&gt;</span><span class="w"> </span><span class="s">&quot;user2@example.com&quot;</span><span class="p" data-group-id="8352252839-7">}</span><span class="w">
</span><span class="p" data-group-id="8352252839-5">]</span></code></pre><p>That little query packed a big punch. It both fetched all user emails from the database and efficiently built a map of the results in one go. You should browse the <a href="https://hexdocs.pm/ecto/Ecto.Query.html#content">Ecto.Query documentation</a> to see the breadth of supported query features.</p><p>In addition to inserts, we can also perform updates and deletes with <a href="https://hexdocs.pm/ecto/3.10.1/Ecto.Repo.html#c:update/2" title=""><code class="inline">Repo.update/2</code></a> and <a href="https://hexdocs.pm/ecto/3.10.1/Ecto.Repo.html#c:delete/2" title=""><code class="inline">Repo.delete/2</code></a> to update or delete a single schema. Ecto also supports bulk persistence with the <a href="https://hexdocs.pm/ecto/3.10.1/Ecto.Repo.html#c:insert_all/3" title=""><code class="inline">Repo.insert_all/3</code></a>, <a href="https://hexdocs.pm/ecto/3.10.1/Ecto.Repo.html#c:update_all/3" title=""><code class="inline">Repo.update_all/3</code></a>, and <a href="https://hexdocs.pm/ecto/3.10.1/Ecto.Repo.html#c:delete_all/2" title=""><code class="inline">Repo.delete_all/2</code></a> functions.</p><p>There is quite a bit more that Ecto can do and we've only barely scratched the surface. With a solid Ecto foundation in place, we're now ready to continue building our app and integrate the web-facing application with our backend persistence. Along the way, we'll expand our Ecto knowledge and learn how to properly isolate our web interface from the underlying details of our system. Please take a look at the <a href="https://hexdocs.pm/ecto/">Ecto documentation</a> for the rest of the story.</p><p>In our <a href="contexts.html">contexts guide</a>, we'll find out how to wrap up our Ecto access and business logic behind modules that group related functionality. We'll see how Phoenix helps us design maintainable applications, and we'll find out about other neat Ecto features along the way.</p><h2 id="using-other-databases" class="section-heading">
  <a href="#using-other-databases" class="hover-link">
    <i class="ri-link-m" aria-hidden="true"></i>
  </a>
  <span class="text">Using other databases</span>
</h2>
<p>Phoenix applications are configured to use PostgreSQL by default, but what if we want to use another database, such as MySQL? In this section, we'll walk through changing that default whether we are about to create a new application, or whether we have an existing one configured for PostgreSQL.</p><p>If we are about to create a new application, configuring our application to use MySQL is easy. We can simply pass the <code class="inline">--database mysql</code> flag to <code class="inline">phx.new</code> and everything will be configured correctly.</p><pre><code class="makeup console" translate="no"><span class="gp unselectable">$ </span><span class="">mix phx.new hello_phoenix --database mysql
</span></code></pre><p>This will set up all the correct dependencies and configuration for us automatically. Once we install those dependencies with <a href="https://hexdocs.pm/mix/Mix.Tasks.Deps.Get.html"><code class="inline">mix deps.get</code></a>, we'll be ready to begin working with Ecto in our application.</p><p>If we have an existing application, all we need to do is switch adapters and make some small configuration changes.</p><p>To switch adapters, we need to remove the Postgrex dependency and add a new one for MyXQL instead.</p><p>Let's open up our <code class="inline">mix.exs</code> file and do that now.</p><pre><code class="makeup elixir" translate="no"><span class="kd">defmodule</span><span class="w"> </span><span class="nc">HelloPhoenix.MixProject</span><span class="w"> </span><span class="k" data-group-id="3531474363-1">do</span><span class="w">
  </span><span class="kn">use</span><span class="w"> </span><span class="nc">Mix.Project</span><span class="w">

  </span><span class="o">.</span><span class="w"> </span><span class="o">.</span><span class="w"> </span><span class="o">.</span><span class="w">
  </span><span class="c1"># Specifies your project dependencies.</span><span class="w">
  </span><span class="c1">#</span><span class="w">
  </span><span class="c1"># Type `mix help deps` for examples and options.</span><span class="w">
  </span><span class="kd">defp</span><span class="w"> </span><span class="nf">deps</span><span class="w"> </span><span class="k" data-group-id="3531474363-2">do</span><span class="w">
    </span><span class="p" data-group-id="3531474363-3">[</span><span class="w">
      </span><span class="p" data-group-id="3531474363-4">{</span><span class="ss">:phoenix</span><span class="p">,</span><span class="w"> </span><span class="s">&quot;~&gt; 1.4.0&quot;</span><span class="p" data-group-id="3531474363-4">}</span><span class="p">,</span><span class="w">
      </span><span class="p" data-group-id="3531474363-5">{</span><span class="ss">:phoenix_ecto</span><span class="p">,</span><span class="w"> </span><span class="s">&quot;~&gt; 4.4&quot;</span><span class="p" data-group-id="3531474363-5">}</span><span class="p">,</span><span class="w">
      </span><span class="p" data-group-id="3531474363-6">{</span><span class="ss">:ecto_sql</span><span class="p">,</span><span class="w"> </span><span class="s">&quot;~&gt; 3.10&quot;</span><span class="p" data-group-id="3531474363-6">}</span><span class="p">,</span><span class="w">
      </span><span class="p" data-group-id="3531474363-7">{</span><span class="ss">:myxql</span><span class="p">,</span><span class="w"> </span><span class="s">&quot;&gt;= 0.0.0&quot;</span><span class="p" data-group-id="3531474363-7">}</span><span class="p">,</span><span class="w">
      </span><span class="n">...</span><span class="w">
    </span><span class="p" data-group-id="3531474363-3">]</span><span class="w">
  </span><span class="k" data-group-id="3531474363-2">end</span><span class="w">
</span><span class="k" data-group-id="3531474363-1">end</span></code></pre><p>Next, we need to configure our adapter to use the default MySQL credentials by updating <code class="inline">config/dev.exs</code>:</p><pre><code class="makeup elixir" translate="no"><span class="n">config</span><span class="w"> </span><span class="ss">:hello_phoenix</span><span class="p">,</span><span class="w"> </span><span class="nc">HelloPhoenix.Repo</span><span class="p">,</span><span class="w">
  </span><span class="ss">username</span><span class="p">:</span><span class="w"> </span><span class="s">&quot;root&quot;</span><span class="p">,</span><span class="w">
  </span><span class="ss">password</span><span class="p">:</span><span class="w"> </span><span class="s">&quot;&quot;</span><span class="p">,</span><span class="w">
  </span><span class="ss">database</span><span class="p">:</span><span class="w"> </span><span class="s">&quot;hello_phoenix_dev&quot;</span></code></pre><p>If we have an existing configuration block for our <code class="inline">HelloPhoenix.Repo</code>, we can simply change the values to match our new ones. You also need to configure the correct values in the <code class="inline">config/test.exs</code> and <code class="inline">config/runtime.exs</code> (formerly <code class="inline">config/prod.secret.exs</code>) files as well.</p><p>The last change is to open up <code class="inline">lib/hello_phoenix/repo.ex</code> and make sure to set the <code class="inline">:adapter</code> to <a href="https://hexdocs.pm/ecto_sql/3.10.1/Ecto.Adapters.MyXQL.html"><code class="inline">Ecto.Adapters.MyXQL</code></a>.</p><p>Now all we need to do is fetch our new dependency, and we'll be ready to go.</p><pre><code class="makeup console" translate="no"><span class="gp unselectable">$ </span><span class="">mix deps.get
</span></code></pre><p>With our new adapter installed and configured, we're ready to create our database.</p><pre><code class="makeup console" translate="no"><span class="gp unselectable">$ </span><span class="">mix ecto.create
</span></code></pre><p>The database for HelloPhoenix.Repo has been created.
We're also ready to run any migrations, or do anything else with Ecto that we may choose.</p><pre><code class="makeup console" translate="no"><span class="gp unselectable">$ </span><span class="">mix ecto.migrate
</span><span class="">[info] == Running HelloPhoenix.Repo.Migrations.CreateUser.change/0 forward
</span><span class="">[info] create table users
</span><span class="">[info] == Migrated in 0.2s
</span></code></pre><h2 id="other-options" class="section-heading">
  <a href="#other-options" class="hover-link">
    <i class="ri-link-m" aria-hidden="true"></i>
  </a>
  <span class="text">Other options</span>
</h2>
<p>While Phoenix uses the <a href="https://hexdocs.pm/ecto/3.10.1/Ecto.html"><code class="inline">Ecto</code></a> project to interact with the data access layer, there are many other data access options, some even built into the Erlang standard library. <a href="https://www.erlang.org/doc/man/ets.html">ETS</a> – available in Ecto via <a href="https://hexdocs.pm/etso/"><code class="inline">etso</code></a> – and <a href="https://www.erlang.org/doc/man/dets.html">DETS</a> are key-value data stores built into <a href="https://www.erlang.org/doc/">OTP</a>. OTP also provides a relational database called <a href="https://www.erlang.org/doc/man/mnesia.html">Mnesia</a> with its own query language called QLC. Both Elixir and Erlang also have a number of libraries for working with a wide range of popular data stores.</p><p>The data world is your oyster, but we won't be covering these options in these guides.</p>

  </body>
</html>
