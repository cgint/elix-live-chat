<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"
      xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>Writing a Channels Client - Phoenix v1.7.21</title>
    <meta name="generator" content="ExDoc v0.37.3" />
    <link type="text/css" rel="stylesheet" href="dist/epub-elixir-FNUUKFP7.css" />
    <script src="dist/epub-4WIP524F.js"></script>

  </head>
  <body class="content-inner">

    <h1 id="content">
Writing a Channels Client
    </h1>
<p>Client libraries for Phoenix Channels already exist in <a href="https://hexdocs.pm/phoenix/channels.html#client-libraries">several languages</a>, but if you want to write your own, this guide should get you started.
It may also be useful as a guide for manual testing with a WebSocket client.</p><h2 id="overview" class="section-heading">
  <a href="#overview" class="hover-link">
    <i class="ri-link-m" aria-hidden="true"></i>
  </a>
  <span class="text">Overview</span>
</h2>
<p>Because WebSockets are bidirectional, messages can flow in either direction at any time.
For this reason, clients typically use callbacks to handle incoming messages whenever they come.</p><p>A client must join at least one topic to begin sending and receiving messages, and may join any number of topics using the same connection.</p><h2 id="connecting" class="section-heading">
  <a href="#connecting" class="hover-link">
    <i class="ri-link-m" aria-hidden="true"></i>
  </a>
  <span class="text">Connecting</span>
</h2>
<p>To establish a WebSocket connection to Phoenix Channels, first make note of the <code class="inline">socket</code> declaration in the application's <code class="inline">Endpoint</code> module.
For example, if you see: <code class="inline">socket &quot;/mobile&quot;, MyAppWeb.MobileSocket</code>, the path for the initial HTTP request is:</p><pre><code class="makeup elixir" translate="no"><span class="p" data-group-id="3014495330-1">[</span><span class="n">host</span><span class="p" data-group-id="3014495330-1">]</span><span class="p">:</span><span class="p" data-group-id="3014495330-2">[</span><span class="n">port</span><span class="p" data-group-id="3014495330-2">]</span><span class="o">/</span><span class="n">mobile</span><span class="o">/</span><span class="n">websocket?</span><span class="n">vsn</span><span class="o">=</span><span class="mf">2.0</span><span class="o">.</span><span class="mi">0</span></code></pre><p>Passing <code class="inline">&amp;vsn=2.0.0</code> specifies <code class="inline">Phoenix.Socket.V2.JSONSerializer</code>, which is built into Phoenix, and which expects and returns messages in the form of lists.</p><p>You also need to include <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Protocol_upgrade_mechanism">the standard header fields for upgrading an HTTP request to a WebSocket connection</a> or use an HTTP library that handles this for you; in Elixir, <a href="https://hex.pm/packages/mint_web_socket">mint_web_socket</a> is an example.</p><p>Other parameters or headers may be expected or required by the specific <code class="inline">connect/3</code> function in the application's socket module (in the example above, <code class="inline">MyAppWeb.MobileSocket.connect/3</code>).</p><h2 id="message-format" class="section-heading">
  <a href="#message-format" class="hover-link">
    <i class="ri-link-m" aria-hidden="true"></i>
  </a>
  <span class="text">Message Format</span>
</h2>
<p>The message format is determined by the serializer configured for the application.
For these examples, <code class="inline">Phoenix.Socket.V2.JSONSerializer</code> is assumed.</p><p>The general format for messages a client sends to a Phoenix Channel is as follows:</p><pre><code class="makeup elixir" translate="no"><span class="p" data-group-id="6126990451-1">[</span><span class="n">join_reference</span><span class="p">,</span><span class="w"> </span><span class="n">message_reference</span><span class="p">,</span><span class="w"> </span><span class="n">topic_name</span><span class="p">,</span><span class="w"> </span><span class="n">event_name</span><span class="p">,</span><span class="w"> </span><span class="n">payload</span><span class="p" data-group-id="6126990451-1">]</span></code></pre><ul><li>The <code class="inline">join_reference</code> is also chosen by the client and should also be a unique value. It only needs to be sent for a <code class="inline">&quot;phx_join&quot;</code> event; for other messages it can be <code class="inline">null</code>. It is used as a message reference for <code class="inline">push</code> messages from the server, meaning those that are not replies to a specific client message. For example, imagine something like &quot;a new user just joined the chat room&quot;.</li><li>The <code class="inline">message_reference</code> is chosen by the client and should be a unique value. The server includes it in its reply so that the client knows which message the reply is for.</li><li>The <code class="inline">topic_name</code> must be a known topic for the socket endpoint, and a client must join that topic before sending any messages on it.</li><li>The <code class="inline">event_name</code> must match the first argument of a <code class="inline">handle_in</code> function on the server channel module.</li><li>The <code class="inline">payload</code> should be a map and is passed as the second argument to that <code class="inline">handle_in</code> function.</li></ul><p>There are three events that are understood by every Phoenix application.</p><p>First, <code class="inline">phx_join</code> is used join a channel. For example, to join the <code class="inline">miami:weather</code> channel:</p><pre><code class="makeup json" translate="no"><span class="p">[</span><span class="p">&quot;</span><span class="s2">0</span><span class="p">&quot;</span><span class="p">,</span><span class="w"> </span><span class="p">&quot;</span><span class="s2">0</span><span class="p">&quot;</span><span class="p">,</span><span class="w"> </span><span class="p">&quot;</span><span class="s2">miami:weather</span><span class="p">&quot;</span><span class="p">,</span><span class="w"> </span><span class="p">&quot;</span><span class="s2">phx_join</span><span class="p">&quot;</span><span class="p">,</span><span class="w"> </span><span class="p">{</span><span class="p">&quot;</span><span class="s2">some</span><span class="p">&quot;</span><span class="p">:</span><span class="w"> </span><span class="p">&quot;</span><span class="s2">param</span><span class="p">&quot;</span><span class="p">}</span><span class="p">]</span></code></pre><p>Second, <code class="inline">phx_leave</code> is used to leave a channel. For example, to leave the <code class="inline">miami:weather</code> channel:</p><pre><code class="makeup json" translate="no"><span class="p">[</span><span class="kc">null</span><span class="p">,</span><span class="w"> </span><span class="p">&quot;</span><span class="s2">1</span><span class="p">&quot;</span><span class="p">,</span><span class="w"> </span><span class="p">&quot;</span><span class="s2">miami:weather</span><span class="p">&quot;</span><span class="p">,</span><span class="w"> </span><span class="p">&quot;</span><span class="s2">phx_leave</span><span class="p">&quot;</span><span class="p">,</span><span class="w"> </span><span class="p">{</span><span class="p">}</span><span class="p">]</span></code></pre><p>Third, <code class="inline">heartbeat</code> is used to maintain the WebSocket connection. For example:</p><pre><code class="makeup json" translate="no"><span class="p">[</span><span class="kc">null</span><span class="p">,</span><span class="w"> </span><span class="p">&quot;</span><span class="s2">2</span><span class="p">&quot;</span><span class="p">,</span><span class="w"> </span><span class="p">&quot;</span><span class="s2">phoenix</span><span class="p">&quot;</span><span class="p">,</span><span class="w"> </span><span class="p">&quot;</span><span class="s2">heartbeat</span><span class="p">&quot;</span><span class="p">,</span><span class="w"> </span><span class="p">{</span><span class="p">}</span><span class="p">]</span></code></pre><p>The <code class="inline">heartbeat</code> message is only needed when no other messages are being sent and prevents Phoenix from closing the connection; the exact <code class="inline">:timeout</code> is configured in the application's <code class="inline">Endpoint</code> module.</p><p>Other allowed messages depend on the Phoenix application.</p><p>For example, if the Channel serving the <code class="inline">miami:weather</code> can handle a <code class="inline">report_emergency</code> event:</p><pre><code class="makeup elixir" translate="no"><span class="kd">def</span><span class="w"> </span><span class="nf">handle_in</span><span class="p" data-group-id="7409530106-1">(</span><span class="s">&quot;report_emergency&quot;</span><span class="p">,</span><span class="w"> </span><span class="n">payload</span><span class="p">,</span><span class="w"> </span><span class="n">socket</span><span class="p" data-group-id="7409530106-1">)</span><span class="w"> </span><span class="k" data-group-id="7409530106-2">do</span><span class="w">
  </span><span class="nc">MyApp.Emergencies</span><span class="o">.</span><span class="n">report</span><span class="p" data-group-id="7409530106-3">(</span><span class="n">payload</span><span class="p" data-group-id="7409530106-3">)</span><span class="w"> </span><span class="c1"># or whatever</span><span class="w">
  </span><span class="p" data-group-id="7409530106-4">{</span><span class="ss">:reply</span><span class="p">,</span><span class="w"> </span><span class="ss">:ok</span><span class="p">,</span><span class="w"> </span><span class="n">socket</span><span class="p" data-group-id="7409530106-4">}</span><span class="w">
</span><span class="k" data-group-id="7409530106-2">end</span></code></pre><p>...a client could send:</p><pre><code class="makeup json" translate="no"><span class="p">[</span><span class="kc">null</span><span class="p">,</span><span class="w"> </span><span class="p">&quot;</span><span class="s2">3</span><span class="p">&quot;</span><span class="p">,</span><span class="w"> </span><span class="p">&quot;</span><span class="s2">miami:weather</span><span class="p">&quot;</span><span class="p">,</span><span class="w"> </span><span class="p">&quot;</span><span class="s2">report_emergency</span><span class="p">&quot;</span><span class="p">,</span><span class="w"> </span><span class="p">{</span><span class="p">&quot;</span><span class="s2">category</span><span class="p">&quot;</span><span class="p">:</span><span class="w"> </span><span class="p">&quot;</span><span class="s2">sharknado</span><span class="p">&quot;</span><span class="p">}</span><span class="p">]</span></code></pre>

  </body>
</html>
