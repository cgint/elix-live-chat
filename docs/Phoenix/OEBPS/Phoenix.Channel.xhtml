<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"
      xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>Phoenix.Channel - Phoenix v1.7.21</title>
    <meta name="generator" content="ExDoc v0.37.3" />
    <link type="text/css" rel="stylesheet" href="dist/epub-elixir-FNUUKFP7.css" />
    <script src="dist/epub-4WIP524F.js"></script>

  </head>
  <body class="content-inner">

    <h1 id="content">
Phoenix.Channel <small>behaviour</small>
    </h1>


      <section id="moduledoc" class="docstring">
<p>Defines a Phoenix Channel.</p><p>Channels provide a means for bidirectional communication from clients that
integrate with the <a href="https://hexdocs.pm/phoenix_pubsub/2.1.3/Phoenix.PubSub.html"><code class="inline">Phoenix.PubSub</code></a> layer for soft-realtime functionality.</p><p>For a conceptual overview, see the <a href="channels.html">Channels guide</a>.</p><h2 id="module-topics-callbacks" class="section-heading">
  <a href="#module-topics-callbacks" class="hover-link">
    <i class="ri-link-m" aria-hidden="true"></i>
  </a>
  <span class="text">Topics &amp; Callbacks</span>
</h2>
<p>Every time you join a channel, you need to choose which particular topic you
want to listen to. The topic is just an identifier, but by convention it is
often made of two parts: <code class="inline">&quot;topic:subtopic&quot;</code>. Using the <code class="inline">&quot;topic:subtopic&quot;</code>
approach pairs nicely with the <a href="Phoenix.Socket.xhtml#channel/3"><code class="inline">Phoenix.Socket.channel/3</code></a> allowing you to
match on all topics starting with a given prefix by using a splat (the <code class="inline">*</code>
character) as the last character in the topic pattern:</p><pre><code class="makeup elixir" translate="no"><samp class="n">channel</samp><samp class="w"> </samp><samp class="s">&quot;room:*&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="nc">MyAppWeb.RoomChannel</samp></code></pre><p>Any topic coming into the router with the <code class="inline">&quot;room:&quot;</code> prefix would dispatch
to <code class="inline">MyAppWeb.RoomChannel</code> in the above example. Topics can also be pattern
matched in your channels' <code class="inline">join/3</code> callback to pluck out the scoped pattern:</p><pre><code class="makeup elixir" translate="no"><samp class="c1"># handles the special `&quot;lobby&quot;` subtopic</samp><samp class="w">
</samp><samp class="kd">def</samp><samp class="w"> </samp><samp class="nf">join</samp><samp class="p" data-group-id="3372392937-1">(</samp><samp class="s">&quot;room:lobby&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="c">_payload</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">socket</samp><samp class="p" data-group-id="3372392937-1">)</samp><samp class="w"> </samp><samp class="k" data-group-id="3372392937-2">do</samp><samp class="w">
  </samp><samp class="p" data-group-id="3372392937-3">{</samp><samp class="ss">:ok</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">socket</samp><samp class="p" data-group-id="3372392937-3">}</samp><samp class="w">
</samp><samp class="k" data-group-id="3372392937-2">end</samp><samp class="w">

</samp><samp class="c1"># handles any other subtopic as the room ID, for example `&quot;room:12&quot;`, `&quot;room:34&quot;`</samp><samp class="w">
</samp><samp class="kd">def</samp><samp class="w"> </samp><samp class="nf">join</samp><samp class="p" data-group-id="3372392937-4">(</samp><samp class="s">&quot;room:&quot;</samp><samp class="w"> </samp><samp class="o">&lt;&gt;</samp><samp class="w"> </samp><samp class="n">room_id</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="c">_payload</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">socket</samp><samp class="p" data-group-id="3372392937-4">)</samp><samp class="w"> </samp><samp class="k" data-group-id="3372392937-5">do</samp><samp class="w">
  </samp><samp class="p" data-group-id="3372392937-6">{</samp><samp class="ss">:ok</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">socket</samp><samp class="p" data-group-id="3372392937-6">}</samp><samp class="w">
</samp><samp class="k" data-group-id="3372392937-5">end</samp></code></pre><h2 id="module-authorization" class="section-heading">
  <a href="#module-authorization" class="hover-link">
    <i class="ri-link-m" aria-hidden="true"></i>
  </a>
  <span class="text">Authorization</span>
</h2>
<p>Clients must join a channel to send and receive PubSub events on that channel.
Your channels must implement a <code class="inline">join/3</code> callback that authorizes the socket
for the given topic. For example, you could check if the user is allowed to
join that particular room.</p><p>To authorize a socket in <code class="inline">join/3</code>, return <code class="inline">{:ok, socket}</code>.
To refuse authorization in <code class="inline">join/3</code>, return <code class="inline">{:error, reply}</code>.</p><h2 id="module-incoming-events" class="section-heading">
  <a href="#module-incoming-events" class="hover-link">
    <i class="ri-link-m" aria-hidden="true"></i>
  </a>
  <span class="text">Incoming Events</span>
</h2>
<p>After a client has successfully joined a channel, incoming events from the
client are routed through the channel's <code class="inline">handle_in/3</code> callbacks. Within these
callbacks, you can perform any action. Incoming callbacks must return the
<code class="inline">socket</code> to maintain ephemeral state.</p><p>Typically you'll either forward a message to all listeners with
<a href="#broadcast!/3"><code class="inline">broadcast!/3</code></a> or reply directly to a client event for request/response style
messaging.</p><p>General message payloads are received as maps:</p><pre><code class="makeup elixir" translate="no"><samp class="kd">def</samp><samp class="w"> </samp><samp class="nf">handle_in</samp><samp class="p" data-group-id="3274246331-1">(</samp><samp class="s">&quot;new_msg&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="3274246331-2">%{</samp><samp class="s">&quot;uid&quot;</samp><samp class="w"> </samp><samp class="p">=&gt;</samp><samp class="w"> </samp><samp class="n">uid</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;body&quot;</samp><samp class="w"> </samp><samp class="p">=&gt;</samp><samp class="w"> </samp><samp class="n">body</samp><samp class="p" data-group-id="3274246331-2">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">socket</samp><samp class="p" data-group-id="3274246331-1">)</samp><samp class="w"> </samp><samp class="k" data-group-id="3274246331-3">do</samp><samp class="w">
  </samp><samp class="n">...</samp><samp class="w">
  </samp><samp class="p" data-group-id="3274246331-4">{</samp><samp class="ss">:reply</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:ok</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">socket</samp><samp class="p" data-group-id="3274246331-4">}</samp><samp class="w">
</samp><samp class="k" data-group-id="3274246331-3">end</samp></code></pre><p>Binary data payloads are passed as a <code class="inline">{:binary, data}</code> tuple:</p><pre><code class="makeup elixir" translate="no"><samp class="kd">def</samp><samp class="w"> </samp><samp class="nf">handle_in</samp><samp class="p" data-group-id="0221496109-1">(</samp><samp class="s">&quot;file_chunk&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="0221496109-2">{</samp><samp class="ss">:binary</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">chunk</samp><samp class="p" data-group-id="0221496109-2">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">socket</samp><samp class="p" data-group-id="0221496109-1">)</samp><samp class="w"> </samp><samp class="k" data-group-id="0221496109-3">do</samp><samp class="w">
  </samp><samp class="n">...</samp><samp class="w">
  </samp><samp class="p" data-group-id="0221496109-4">{</samp><samp class="ss">:reply</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:ok</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">socket</samp><samp class="p" data-group-id="0221496109-4">}</samp><samp class="w">
</samp><samp class="k" data-group-id="0221496109-3">end</samp></code></pre><h2 id="module-broadcasts" class="section-heading">
  <a href="#module-broadcasts" class="hover-link">
    <i class="ri-link-m" aria-hidden="true"></i>
  </a>
  <span class="text">Broadcasts</span>
</h2>
<p>Here's an example of receiving an incoming <code class="inline">&quot;new_msg&quot;</code> event from one client,
and broadcasting the message to all topic subscribers for this socket.</p><pre><code class="makeup elixir" translate="no"><samp class="kd">def</samp><samp class="w"> </samp><samp class="nf">handle_in</samp><samp class="p" data-group-id="7179289255-1">(</samp><samp class="s">&quot;new_msg&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="7179289255-2">%{</samp><samp class="s">&quot;uid&quot;</samp><samp class="w"> </samp><samp class="p">=&gt;</samp><samp class="w"> </samp><samp class="n">uid</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;body&quot;</samp><samp class="w"> </samp><samp class="p">=&gt;</samp><samp class="w"> </samp><samp class="n">body</samp><samp class="p" data-group-id="7179289255-2">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">socket</samp><samp class="p" data-group-id="7179289255-1">)</samp><samp class="w"> </samp><samp class="k" data-group-id="7179289255-3">do</samp><samp class="w">
  </samp><samp class="n">broadcast!</samp><samp class="p" data-group-id="7179289255-4">(</samp><samp class="n">socket</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;new_msg&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="7179289255-5">%{</samp><samp class="ss">uid</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="n">uid</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">body</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="n">body</samp><samp class="p" data-group-id="7179289255-5">}</samp><samp class="p" data-group-id="7179289255-4">)</samp><samp class="w">
  </samp><samp class="p" data-group-id="7179289255-6">{</samp><samp class="ss">:noreply</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">socket</samp><samp class="p" data-group-id="7179289255-6">}</samp><samp class="w">
</samp><samp class="k" data-group-id="7179289255-3">end</samp></code></pre><h2 id="module-replies" class="section-heading">
  <a href="#module-replies" class="hover-link">
    <i class="ri-link-m" aria-hidden="true"></i>
  </a>
  <span class="text">Replies</span>
</h2>
<p>Replies are useful for acknowledging a client's message or responding with
the results of an operation. A reply is sent only to the client connected to
the current channel process. Behind the scenes, they include the client
message <code class="inline">ref</code>, which allows the client to correlate the reply it receives
with the message it sent.</p><p>For example, imagine creating a resource and replying with the created record:</p><pre><code class="makeup elixir" translate="no"><samp class="kd">def</samp><samp class="w"> </samp><samp class="nf">handle_in</samp><samp class="p" data-group-id="5419979324-1">(</samp><samp class="s">&quot;create:post&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">attrs</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">socket</samp><samp class="p" data-group-id="5419979324-1">)</samp><samp class="w"> </samp><samp class="k" data-group-id="5419979324-2">do</samp><samp class="w">
  </samp><samp class="n">changeset</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="nc">Post</samp><samp class="o">.</samp><samp class="n">changeset</samp><samp class="p" data-group-id="5419979324-3">(</samp><samp class="p" data-group-id="5419979324-4">%</samp><samp class="nc" data-group-id="5419979324-4">Post</samp><samp class="p" data-group-id="5419979324-4">{</samp><samp class="p" data-group-id="5419979324-4">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">attrs</samp><samp class="p" data-group-id="5419979324-3">)</samp><samp class="w">

  </samp><samp class="k">if</samp><samp class="w"> </samp><samp class="n">changeset</samp><samp class="o">.</samp><samp class="n">valid?</samp><samp class="w"> </samp><samp class="k" data-group-id="5419979324-5">do</samp><samp class="w">
    </samp><samp class="n">post</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="nc">Repo</samp><samp class="o">.</samp><samp class="n">insert!</samp><samp class="p" data-group-id="5419979324-6">(</samp><samp class="n">changeset</samp><samp class="p" data-group-id="5419979324-6">)</samp><samp class="w">
    </samp><samp class="n">response</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="nc">MyAppWeb.PostView</samp><samp class="o">.</samp><samp class="n">render</samp><samp class="p" data-group-id="5419979324-7">(</samp><samp class="s">&quot;show.json&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="5419979324-8">%{</samp><samp class="ss">post</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="n">post</samp><samp class="p" data-group-id="5419979324-8">}</samp><samp class="p" data-group-id="5419979324-7">)</samp><samp class="w">
    </samp><samp class="p" data-group-id="5419979324-9">{</samp><samp class="ss">:reply</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="5419979324-10">{</samp><samp class="ss">:ok</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">response</samp><samp class="p" data-group-id="5419979324-10">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">socket</samp><samp class="p" data-group-id="5419979324-9">}</samp><samp class="w">
  </samp><samp class="k" data-group-id="5419979324-5">else</samp><samp class="w">
    </samp><samp class="n">response</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="nc">MyAppWeb.ChangesetView</samp><samp class="o">.</samp><samp class="n">render</samp><samp class="p" data-group-id="5419979324-11">(</samp><samp class="s">&quot;errors.json&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="5419979324-12">%{</samp><samp class="ss">changeset</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="n">changeset</samp><samp class="p" data-group-id="5419979324-12">}</samp><samp class="p" data-group-id="5419979324-11">)</samp><samp class="w">
    </samp><samp class="p" data-group-id="5419979324-13">{</samp><samp class="ss">:reply</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="5419979324-14">{</samp><samp class="ss">:error</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">response</samp><samp class="p" data-group-id="5419979324-14">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">socket</samp><samp class="p" data-group-id="5419979324-13">}</samp><samp class="w">
  </samp><samp class="k" data-group-id="5419979324-5">end</samp><samp class="w">
</samp><samp class="k" data-group-id="5419979324-2">end</samp></code></pre><p>Or you may just want to confirm that the operation succeeded:</p><pre><code class="makeup elixir" translate="no"><samp class="kd">def</samp><samp class="w"> </samp><samp class="nf">handle_in</samp><samp class="p" data-group-id="6756276991-1">(</samp><samp class="s">&quot;create:post&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">attrs</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">socket</samp><samp class="p" data-group-id="6756276991-1">)</samp><samp class="w"> </samp><samp class="k" data-group-id="6756276991-2">do</samp><samp class="w">
  </samp><samp class="n">changeset</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="nc">Post</samp><samp class="o">.</samp><samp class="n">changeset</samp><samp class="p" data-group-id="6756276991-3">(</samp><samp class="p" data-group-id="6756276991-4">%</samp><samp class="nc" data-group-id="6756276991-4">Post</samp><samp class="p" data-group-id="6756276991-4">{</samp><samp class="p" data-group-id="6756276991-4">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">attrs</samp><samp class="p" data-group-id="6756276991-3">)</samp><samp class="w">

  </samp><samp class="k">if</samp><samp class="w"> </samp><samp class="n">changeset</samp><samp class="o">.</samp><samp class="n">valid?</samp><samp class="w"> </samp><samp class="k" data-group-id="6756276991-5">do</samp><samp class="w">
    </samp><samp class="nc">Repo</samp><samp class="o">.</samp><samp class="n">insert!</samp><samp class="p" data-group-id="6756276991-6">(</samp><samp class="n">changeset</samp><samp class="p" data-group-id="6756276991-6">)</samp><samp class="w">
    </samp><samp class="p" data-group-id="6756276991-7">{</samp><samp class="ss">:reply</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:ok</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">socket</samp><samp class="p" data-group-id="6756276991-7">}</samp><samp class="w">
  </samp><samp class="k" data-group-id="6756276991-5">else</samp><samp class="w">
    </samp><samp class="p" data-group-id="6756276991-8">{</samp><samp class="ss">:reply</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:error</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">socket</samp><samp class="p" data-group-id="6756276991-8">}</samp><samp class="w">
  </samp><samp class="k" data-group-id="6756276991-5">end</samp><samp class="w">
</samp><samp class="k" data-group-id="6756276991-2">end</samp></code></pre><p>Binary data is also supported with replies via a <code class="inline">{:binary, data}</code> tuple:</p><pre><code class="makeup elixir" translate="no"><samp class="p" data-group-id="8992213925-1">{</samp><samp class="ss">:reply</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="8992213925-2">{</samp><samp class="ss">:ok</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="8992213925-3">{</samp><samp class="ss">:binary</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">bin</samp><samp class="p" data-group-id="8992213925-3">}</samp><samp class="p" data-group-id="8992213925-2">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">socket</samp><samp class="p" data-group-id="8992213925-1">}</samp></code></pre><p>If you don't want to send a reply to the client, you can return:</p><pre><code class="makeup elixir" translate="no"><samp class="p" data-group-id="9133489291-1">{</samp><samp class="ss">:noreply</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">socket</samp><samp class="p" data-group-id="9133489291-1">}</samp></code></pre><p>One situation when you might do this is if you need to reply later; see
<a href="#reply/2"><code class="inline">reply/2</code></a>.</p><h2 id="module-pushes" class="section-heading">
  <a href="#module-pushes" class="hover-link">
    <i class="ri-link-m" aria-hidden="true"></i>
  </a>
  <span class="text">Pushes</span>
</h2>
<p>Calling <a href="#push/3"><code class="inline">push/3</code></a> allows you to send a message to the client which is not a
reply to a specific client message. Because it is not a reply, a pushed
message does not contain a client message <code class="inline">ref</code>; there is no prior client
message to relate it to.</p><p>Possible use cases include notifying a client that:</p><ul><li>You've auto-saved the user's document</li><li>The user's game is ending soon</li><li>The IoT device's settings should be updated</li></ul><p>For example, you could <a href="#push/3"><code class="inline">push/3</code></a> a message to the client in <code class="inline">handle_info/3</code>
after receiving a <code class="inline">PubSub</code> message relevant to them.</p><pre><code class="makeup elixir" translate="no"><samp class="kn">alias</samp><samp class="w"> </samp><samp class="nc">Phoenix.Socket.Broadcast</samp><samp class="w">
</samp><samp class="kd">def</samp><samp class="w"> </samp><samp class="nf">handle_info</samp><samp class="p" data-group-id="5166771543-1">(</samp><samp class="p" data-group-id="5166771543-2">%</samp><samp class="nc" data-group-id="5166771543-2">Broadcast</samp><samp class="p" data-group-id="5166771543-2">{</samp><samp class="ss">topic</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="bp">_</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">event</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="n">event</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">payload</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="n">payload</samp><samp class="p" data-group-id="5166771543-2">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">socket</samp><samp class="p" data-group-id="5166771543-1">)</samp><samp class="w"> </samp><samp class="k" data-group-id="5166771543-3">do</samp><samp class="w">
  </samp><samp class="n">push</samp><samp class="p" data-group-id="5166771543-4">(</samp><samp class="n">socket</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">event</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">payload</samp><samp class="p" data-group-id="5166771543-4">)</samp><samp class="w">
  </samp><samp class="p" data-group-id="5166771543-5">{</samp><samp class="ss">:noreply</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">socket</samp><samp class="p" data-group-id="5166771543-5">}</samp><samp class="w">
</samp><samp class="k" data-group-id="5166771543-3">end</samp></code></pre><p>Push data can be given in the form of a map or a tagged <code class="inline">{:binary, data}</code>
tuple:</p><pre><code class="makeup elixir" translate="no"><samp class="c1"># client asks for their current rank. reply contains it, and client</samp><samp class="w">
</samp><samp class="c1"># is also pushed a leader board and a badge image</samp><samp class="w">
</samp><samp class="kd">def</samp><samp class="w"> </samp><samp class="nf">handle_in</samp><samp class="p" data-group-id="9858493998-1">(</samp><samp class="s">&quot;current_rank&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="bp">_</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">socket</samp><samp class="p" data-group-id="9858493998-1">)</samp><samp class="w"> </samp><samp class="k" data-group-id="9858493998-2">do</samp><samp class="w">
  </samp><samp class="n">push</samp><samp class="p" data-group-id="9858493998-3">(</samp><samp class="n">socket</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;leaders&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="9858493998-4">%{</samp><samp class="ss">leaders</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="nc">Game</samp><samp class="o">.</samp><samp class="n">get_leaders</samp><samp class="p" data-group-id="9858493998-5">(</samp><samp class="n">socket</samp><samp class="o">.</samp><samp class="n">assigns</samp><samp class="o">.</samp><samp class="n">game_id</samp><samp class="p" data-group-id="9858493998-5">)</samp><samp class="p" data-group-id="9858493998-4">}</samp><samp class="p" data-group-id="9858493998-3">)</samp><samp class="w">
  </samp><samp class="n">push</samp><samp class="p" data-group-id="9858493998-6">(</samp><samp class="n">socket</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;badge&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="9858493998-7">{</samp><samp class="ss">:binary</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="nc">File</samp><samp class="o">.</samp><samp class="n">read!</samp><samp class="p" data-group-id="9858493998-8">(</samp><samp class="n">socket</samp><samp class="o">.</samp><samp class="n">assigns</samp><samp class="o">.</samp><samp class="n">badge_path</samp><samp class="p" data-group-id="9858493998-8">)</samp><samp class="p" data-group-id="9858493998-7">}</samp><samp class="p" data-group-id="9858493998-6">)</samp><samp class="w">
  </samp><samp class="p" data-group-id="9858493998-9">{</samp><samp class="ss">:reply</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="9858493998-10">%{</samp><samp class="ss">val</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="nc">Game</samp><samp class="o">.</samp><samp class="n">get_rank</samp><samp class="p" data-group-id="9858493998-11">(</samp><samp class="n">socket</samp><samp class="o">.</samp><samp class="n">assigns</samp><samp class="p" data-group-id="9858493998-12">[</samp><samp class="ss">:user</samp><samp class="p" data-group-id="9858493998-12">]</samp><samp class="p" data-group-id="9858493998-11">)</samp><samp class="p" data-group-id="9858493998-10">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">socket</samp><samp class="p" data-group-id="9858493998-9">}</samp><samp class="w">
</samp><samp class="k" data-group-id="9858493998-2">end</samp></code></pre><p>Note that in this example, <a href="#push/3"><code class="inline">push/3</code></a> is called from <code class="inline">handle_in/3</code>; in this way
you can essentially reply N times to a single message from the client. See
<a href="#reply/2"><code class="inline">reply/2</code></a> for why this may be desirable.</p><h2 id="module-intercepting-outgoing-events" class="section-heading">
  <a href="#module-intercepting-outgoing-events" class="hover-link">
    <i class="ri-link-m" aria-hidden="true"></i>
  </a>
  <span class="text">Intercepting Outgoing Events</span>
</h2>
<p>When an event is broadcasted with <a href="#broadcast/3"><code class="inline">broadcast/3</code></a>, each channel subscriber can
choose to intercept the event and have their <code class="inline">handle_out/3</code> callback triggered.
This allows the event's payload to be customized on a socket by socket basis
to append extra information, or conditionally filter the message from being
delivered. If the event is not intercepted with <a href="#intercept/1"><code class="inline">Phoenix.Channel.intercept/1</code></a>,
then the message is pushed directly to the client:</p><pre><code class="makeup elixir" translate="no"><samp class="n">intercept</samp><samp class="w"> </samp><samp class="p" data-group-id="2016929105-1">[</samp><samp class="s">&quot;new_msg&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;user_joined&quot;</samp><samp class="p" data-group-id="2016929105-1">]</samp><samp class="w">

</samp><samp class="c1"># for every socket subscribing to this topic, append an `is_editable`</samp><samp class="w">
</samp><samp class="c1"># value for client metadata.</samp><samp class="w">
</samp><samp class="kd">def</samp><samp class="w"> </samp><samp class="nf">handle_out</samp><samp class="p" data-group-id="2016929105-2">(</samp><samp class="s">&quot;new_msg&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">msg</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">socket</samp><samp class="p" data-group-id="2016929105-2">)</samp><samp class="w"> </samp><samp class="k" data-group-id="2016929105-3">do</samp><samp class="w">
  </samp><samp class="n">push</samp><samp class="p" data-group-id="2016929105-4">(</samp><samp class="n">socket</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;new_msg&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="nc">Map</samp><samp class="o">.</samp><samp class="n">merge</samp><samp class="p" data-group-id="2016929105-5">(</samp><samp class="n">msg</samp><samp class="p">,</samp><samp class="w">
    </samp><samp class="p" data-group-id="2016929105-6">%{</samp><samp class="ss">is_editable</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="nc">User</samp><samp class="o">.</samp><samp class="n">can_edit_message?</samp><samp class="p" data-group-id="2016929105-7">(</samp><samp class="n">socket</samp><samp class="o">.</samp><samp class="n">assigns</samp><samp class="p" data-group-id="2016929105-8">[</samp><samp class="ss">:user</samp><samp class="p" data-group-id="2016929105-8">]</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">msg</samp><samp class="p" data-group-id="2016929105-7">)</samp><samp class="p" data-group-id="2016929105-6">}</samp><samp class="w">
  </samp><samp class="p" data-group-id="2016929105-5">)</samp><samp class="p" data-group-id="2016929105-4">)</samp><samp class="w">
  </samp><samp class="p" data-group-id="2016929105-9">{</samp><samp class="ss">:noreply</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">socket</samp><samp class="p" data-group-id="2016929105-9">}</samp><samp class="w">
</samp><samp class="k" data-group-id="2016929105-3">end</samp><samp class="w">

</samp><samp class="c1"># do not send broadcasted `&quot;user_joined&quot;` events if this socket&#39;s user</samp><samp class="w">
</samp><samp class="c1"># is ignoring the user who joined.</samp><samp class="w">
</samp><samp class="kd">def</samp><samp class="w"> </samp><samp class="nf">handle_out</samp><samp class="p" data-group-id="2016929105-10">(</samp><samp class="s">&quot;user_joined&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">msg</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">socket</samp><samp class="p" data-group-id="2016929105-10">)</samp><samp class="w"> </samp><samp class="k" data-group-id="2016929105-11">do</samp><samp class="w">
  </samp><samp class="k">unless</samp><samp class="w"> </samp><samp class="nc">User</samp><samp class="o">.</samp><samp class="n">ignoring?</samp><samp class="p" data-group-id="2016929105-12">(</samp><samp class="n">socket</samp><samp class="o">.</samp><samp class="n">assigns</samp><samp class="p" data-group-id="2016929105-13">[</samp><samp class="ss">:user</samp><samp class="p" data-group-id="2016929105-13">]</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">msg</samp><samp class="o">.</samp><samp class="n">user_id</samp><samp class="p" data-group-id="2016929105-12">)</samp><samp class="w"> </samp><samp class="k" data-group-id="2016929105-14">do</samp><samp class="w">
    </samp><samp class="n">push</samp><samp class="p" data-group-id="2016929105-15">(</samp><samp class="n">socket</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;user_joined&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">msg</samp><samp class="p" data-group-id="2016929105-15">)</samp><samp class="w">
  </samp><samp class="k" data-group-id="2016929105-14">end</samp><samp class="w">
  </samp><samp class="p" data-group-id="2016929105-16">{</samp><samp class="ss">:noreply</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">socket</samp><samp class="p" data-group-id="2016929105-16">}</samp><samp class="w">
</samp><samp class="k" data-group-id="2016929105-11">end</samp></code></pre><h2 id="module-broadcasting-to-an-external-topic" class="section-heading">
  <a href="#module-broadcasting-to-an-external-topic" class="hover-link">
    <i class="ri-link-m" aria-hidden="true"></i>
  </a>
  <span class="text">Broadcasting to an external topic</span>
</h2>
<p>In some cases, you will want to broadcast messages without the context of
a <code class="inline">socket</code>. This could be for broadcasting from within your channel to an
external topic, or broadcasting from elsewhere in your application like a
controller or another process. Such can be done via your endpoint:</p><pre><code class="makeup elixir" translate="no"><samp class="c1"># within channel</samp><samp class="w">
</samp><samp class="kd">def</samp><samp class="w"> </samp><samp class="nf">handle_in</samp><samp class="p" data-group-id="7801951304-1">(</samp><samp class="s">&quot;new_msg&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="7801951304-2">%{</samp><samp class="s">&quot;uid&quot;</samp><samp class="w"> </samp><samp class="p">=&gt;</samp><samp class="w"> </samp><samp class="n">uid</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;body&quot;</samp><samp class="w"> </samp><samp class="p">=&gt;</samp><samp class="w"> </samp><samp class="n">body</samp><samp class="p" data-group-id="7801951304-2">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">socket</samp><samp class="p" data-group-id="7801951304-1">)</samp><samp class="w"> </samp><samp class="k" data-group-id="7801951304-3">do</samp><samp class="w">
  </samp><samp class="n">...</samp><samp class="w">
  </samp><samp class="n">broadcast_from!</samp><samp class="p" data-group-id="7801951304-4">(</samp><samp class="n">socket</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;new_msg&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="7801951304-5">%{</samp><samp class="ss">uid</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="n">uid</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">body</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="n">body</samp><samp class="p" data-group-id="7801951304-5">}</samp><samp class="p" data-group-id="7801951304-4">)</samp><samp class="w">
  </samp><samp class="nc">MyAppWeb.Endpoint</samp><samp class="o">.</samp><samp class="n">broadcast_from!</samp><samp class="p" data-group-id="7801951304-6">(</samp><samp class="n">self</samp><samp class="p" data-group-id="7801951304-7">(</samp><samp class="p" data-group-id="7801951304-7">)</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;room:superadmin&quot;</samp><samp class="p">,</samp><samp class="w">
    </samp><samp class="s">&quot;new_msg&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="7801951304-8">%{</samp><samp class="ss">uid</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="n">uid</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">body</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="n">body</samp><samp class="p" data-group-id="7801951304-8">}</samp><samp class="p" data-group-id="7801951304-6">)</samp><samp class="w">
  </samp><samp class="p" data-group-id="7801951304-9">{</samp><samp class="ss">:noreply</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">socket</samp><samp class="p" data-group-id="7801951304-9">}</samp><samp class="w">
</samp><samp class="k" data-group-id="7801951304-3">end</samp><samp class="w">

</samp><samp class="c1"># within controller</samp><samp class="w">
</samp><samp class="kd">def</samp><samp class="w"> </samp><samp class="nf">create</samp><samp class="p" data-group-id="7801951304-10">(</samp><samp class="n">conn</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">params</samp><samp class="p" data-group-id="7801951304-10">)</samp><samp class="w"> </samp><samp class="k" data-group-id="7801951304-11">do</samp><samp class="w">
  </samp><samp class="n">...</samp><samp class="w">
  </samp><samp class="nc">MyAppWeb.Endpoint</samp><samp class="o">.</samp><samp class="n">broadcast!</samp><samp class="p" data-group-id="7801951304-12">(</samp><samp class="s">&quot;room:&quot;</samp><samp class="w"> </samp><samp class="o">&lt;&gt;</samp><samp class="w"> </samp><samp class="n">rid</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;new_msg&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="7801951304-13">%{</samp><samp class="ss">uid</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="n">uid</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">body</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="n">body</samp><samp class="p" data-group-id="7801951304-13">}</samp><samp class="p" data-group-id="7801951304-12">)</samp><samp class="w">
  </samp><samp class="nc">MyAppWeb.Endpoint</samp><samp class="o">.</samp><samp class="n">broadcast!</samp><samp class="p" data-group-id="7801951304-14">(</samp><samp class="s">&quot;room:superadmin&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;new_msg&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="7801951304-15">%{</samp><samp class="ss">uid</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="n">uid</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">body</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="n">body</samp><samp class="p" data-group-id="7801951304-15">}</samp><samp class="p" data-group-id="7801951304-14">)</samp><samp class="w">
  </samp><samp class="n">redirect</samp><samp class="p" data-group-id="7801951304-16">(</samp><samp class="n">conn</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">to</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;/&quot;</samp><samp class="p" data-group-id="7801951304-16">)</samp><samp class="w">
</samp><samp class="k" data-group-id="7801951304-11">end</samp></code></pre><h2 id="module-terminate" class="section-heading">
  <a href="#module-terminate" class="hover-link">
    <i class="ri-link-m" aria-hidden="true"></i>
  </a>
  <span class="text">Terminate</span>
</h2>
<p>On termination, the channel callback <code class="inline">terminate/2</code> will be invoked with
the error reason and the socket.</p><p>If we are terminating because the client left, the reason will be
<code class="inline">{:shutdown, :left}</code>. Similarly, if we are terminating because the
client connection was closed, the reason will be <code class="inline">{:shutdown, :closed}</code>.</p><p>If any of the callbacks return a <code class="inline">:stop</code> tuple, it will also
trigger terminate with the reason given in the tuple.</p><p><code class="inline">terminate/2</code>, however, won't be invoked in case of errors nor in
case of exits. This is the same behaviour as you find in Elixir
abstractions like <a href="https://hexdocs.pm/elixir/GenServer.html"><code class="inline">GenServer</code></a> and others. Similar to <a href="https://hexdocs.pm/elixir/GenServer.html"><code class="inline">GenServer</code></a>,
it would also be possible to <code class="inline">:trap_exit</code> to guarantee that <code class="inline">terminate/2</code>
is invoked. This practice is not encouraged though.</p><p>Generally speaking, if you want to clean something up, it is better to
monitor your channel process and do the clean up from another process.
All channel callbacks, including <code class="inline">join/3</code>, are called from within the
channel process. Therefore, <code class="inline">self()</code> in any of them returns the PID to
be monitored.</p><h2 id="module-exit-reasons-when-stopping-a-channel" class="section-heading">
  <a href="#module-exit-reasons-when-stopping-a-channel" class="hover-link">
    <i class="ri-link-m" aria-hidden="true"></i>
  </a>
  <span class="text">Exit reasons when stopping a channel</span>
</h2>
<p>When the channel callbacks return a <code class="inline">:stop</code> tuple, such as:</p><pre><code class="makeup elixir" translate="no"><samp class="p" data-group-id="2344033698-1">{</samp><samp class="ss">:stop</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:shutdown</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">socket</samp><samp class="p" data-group-id="2344033698-1">}</samp><samp class="w">
</samp><samp class="p" data-group-id="2344033698-2">{</samp><samp class="ss">:stop</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="2344033698-3">{</samp><samp class="ss">:error</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:enoent</samp><samp class="p" data-group-id="2344033698-3">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">socket</samp><samp class="p" data-group-id="2344033698-2">}</samp></code></pre><p>the second argument is the exit reason, which follows the same behaviour as
standard <a href="https://hexdocs.pm/elixir/GenServer.html"><code class="inline">GenServer</code></a> exits.</p><p>You have three options to choose from when shutting down a channel:</p><ul><li><p><code class="inline">:normal</code> - in such cases, the exit won't be logged and linked processes
do not exit</p></li><li><p><code class="inline">:shutdown</code> or <code class="inline">{:shutdown, term}</code> - in such cases, the exit won't be
logged and linked processes exit with the same reason unless they're
trapping exits</p></li><li><p>any other term - in such cases, the exit will be logged and linked
processes exit with the same reason unless they're trapping exits</p></li></ul><h2 id="module-subscribing-to-external-topics" class="section-heading">
  <a href="#module-subscribing-to-external-topics" class="hover-link">
    <i class="ri-link-m" aria-hidden="true"></i>
  </a>
  <span class="text">Subscribing to external topics</span>
</h2>
<p>Sometimes you may need to programmatically subscribe a socket to external
topics in addition to the internal <code class="inline">socket.topic</code>. For example,
imagine you have a bidding system where a remote client dynamically sets
preferences on products they want to receive bidding notifications on.
Instead of requiring a unique channel process and topic per
preference, a more efficient and simple approach would be to subscribe a
single channel to relevant notifications via your endpoint. For example:</p><pre><code class="makeup elixir" translate="no"><samp class="kd">defmodule</samp><samp class="w"> </samp><samp class="nc">MyAppWeb.Endpoint.NotificationChannel</samp><samp class="w"> </samp><samp class="k" data-group-id="6018022963-1">do</samp><samp class="w">
  </samp><samp class="kn">use</samp><samp class="w"> </samp><samp class="nc">Phoenix.Channel</samp><samp class="w">

  </samp><samp class="kd">def</samp><samp class="w"> </samp><samp class="nf">join</samp><samp class="p" data-group-id="6018022963-2">(</samp><samp class="s">&quot;notification:&quot;</samp><samp class="w"> </samp><samp class="o">&lt;&gt;</samp><samp class="w"> </samp><samp class="n">user_id</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="6018022963-3">%{</samp><samp class="s">&quot;ids&quot;</samp><samp class="w"> </samp><samp class="p">=&gt;</samp><samp class="w"> </samp><samp class="n">ids</samp><samp class="p" data-group-id="6018022963-3">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">socket</samp><samp class="p" data-group-id="6018022963-2">)</samp><samp class="w"> </samp><samp class="k" data-group-id="6018022963-4">do</samp><samp class="w">
    </samp><samp class="n">topics</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="k">for</samp><samp class="w"> </samp><samp class="n">product_id</samp><samp class="w"> </samp><samp class="o">&lt;-</samp><samp class="w"> </samp><samp class="n">ids</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">do</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;product:</samp><samp class="si" data-group-id="6018022963-5">#{</samp><samp class="n">product_id</samp><samp class="si" data-group-id="6018022963-5">}</samp><samp class="s">&quot;</samp><samp class="w">

    </samp><samp class="p" data-group-id="6018022963-6">{</samp><samp class="ss">:ok</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">socket</samp><samp class="w">
          </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="n">assign</samp><samp class="p" data-group-id="6018022963-7">(</samp><samp class="ss">:topics</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="6018022963-8">[</samp><samp class="p" data-group-id="6018022963-8">]</samp><samp class="p" data-group-id="6018022963-7">)</samp><samp class="w">
          </samp><samp class="o">|&gt;</samp><samp class="w"> </samp><samp class="n">put_new_topics</samp><samp class="p" data-group-id="6018022963-9">(</samp><samp class="n">topics</samp><samp class="p" data-group-id="6018022963-9">)</samp><samp class="p" data-group-id="6018022963-6">}</samp><samp class="w">
  </samp><samp class="k" data-group-id="6018022963-4">end</samp><samp class="w">

  </samp><samp class="kd">def</samp><samp class="w"> </samp><samp class="nf">handle_in</samp><samp class="p" data-group-id="6018022963-10">(</samp><samp class="s">&quot;watch&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="6018022963-11">%{</samp><samp class="s">&quot;product_id&quot;</samp><samp class="w"> </samp><samp class="p">=&gt;</samp><samp class="w"> </samp><samp class="n">id</samp><samp class="p" data-group-id="6018022963-11">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">socket</samp><samp class="p" data-group-id="6018022963-10">)</samp><samp class="w"> </samp><samp class="k" data-group-id="6018022963-12">do</samp><samp class="w">
    </samp><samp class="p" data-group-id="6018022963-13">{</samp><samp class="ss">:reply</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:ok</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">put_new_topics</samp><samp class="p" data-group-id="6018022963-14">(</samp><samp class="n">socket</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="6018022963-15">[</samp><samp class="s">&quot;product:</samp><samp class="si" data-group-id="6018022963-16">#{</samp><samp class="n">id</samp><samp class="si" data-group-id="6018022963-16">}</samp><samp class="s">&quot;</samp><samp class="p" data-group-id="6018022963-15">]</samp><samp class="p" data-group-id="6018022963-14">)</samp><samp class="p" data-group-id="6018022963-13">}</samp><samp class="w">
  </samp><samp class="k" data-group-id="6018022963-12">end</samp><samp class="w">

  </samp><samp class="kd">def</samp><samp class="w"> </samp><samp class="nf">handle_in</samp><samp class="p" data-group-id="6018022963-17">(</samp><samp class="s">&quot;unwatch&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="6018022963-18">%{</samp><samp class="s">&quot;product_id&quot;</samp><samp class="w"> </samp><samp class="p">=&gt;</samp><samp class="w"> </samp><samp class="n">id</samp><samp class="p" data-group-id="6018022963-18">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">socket</samp><samp class="p" data-group-id="6018022963-17">)</samp><samp class="w"> </samp><samp class="k" data-group-id="6018022963-19">do</samp><samp class="w">
    </samp><samp class="p" data-group-id="6018022963-20">{</samp><samp class="ss">:reply</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:ok</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="nc">MyAppWeb.Endpoint</samp><samp class="o">.</samp><samp class="n">unsubscribe</samp><samp class="p" data-group-id="6018022963-21">(</samp><samp class="s">&quot;product:</samp><samp class="si" data-group-id="6018022963-22">#{</samp><samp class="n">id</samp><samp class="si" data-group-id="6018022963-22">}</samp><samp class="s">&quot;</samp><samp class="p" data-group-id="6018022963-21">)</samp><samp class="p" data-group-id="6018022963-20">}</samp><samp class="w">
  </samp><samp class="k" data-group-id="6018022963-19">end</samp><samp class="w">

  </samp><samp class="kd">defp</samp><samp class="w"> </samp><samp class="nf">put_new_topics</samp><samp class="p" data-group-id="6018022963-23">(</samp><samp class="n">socket</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">topics</samp><samp class="p" data-group-id="6018022963-23">)</samp><samp class="w"> </samp><samp class="k" data-group-id="6018022963-24">do</samp><samp class="w">
    </samp><samp class="nc">Enum</samp><samp class="o">.</samp><samp class="n">reduce</samp><samp class="p" data-group-id="6018022963-25">(</samp><samp class="n">topics</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">socket</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="k" data-group-id="6018022963-26">fn</samp><samp class="w"> </samp><samp class="n">topic</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">acc</samp><samp class="w"> </samp><samp class="o">-&gt;</samp><samp class="w">
      </samp><samp class="n">topics</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="n">acc</samp><samp class="o">.</samp><samp class="n">assigns</samp><samp class="o">.</samp><samp class="n">topics</samp><samp class="w">
      </samp><samp class="k">if</samp><samp class="w"> </samp><samp class="n">topic</samp><samp class="w"> </samp><samp class="ow">in</samp><samp class="w"> </samp><samp class="n">topics</samp><samp class="w"> </samp><samp class="k" data-group-id="6018022963-27">do</samp><samp class="w">
        </samp><samp class="n">acc</samp><samp class="w">
      </samp><samp class="k" data-group-id="6018022963-27">else</samp><samp class="w">
        </samp><samp class="ss">:ok</samp><samp class="w"> </samp><samp class="o">=</samp><samp class="w"> </samp><samp class="nc">MyAppWeb.Endpoint</samp><samp class="o">.</samp><samp class="n">subscribe</samp><samp class="p" data-group-id="6018022963-28">(</samp><samp class="n">topic</samp><samp class="p" data-group-id="6018022963-28">)</samp><samp class="w">
        </samp><samp class="n">assign</samp><samp class="p" data-group-id="6018022963-29">(</samp><samp class="n">acc</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:topics</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="6018022963-30">[</samp><samp class="n">topic</samp><samp class="w"> </samp><samp class="o">|</samp><samp class="w"> </samp><samp class="n">topics</samp><samp class="p" data-group-id="6018022963-30">]</samp><samp class="p" data-group-id="6018022963-29">)</samp><samp class="w">
      </samp><samp class="k" data-group-id="6018022963-27">end</samp><samp class="w">
    </samp><samp class="k" data-group-id="6018022963-26">end</samp><samp class="p" data-group-id="6018022963-25">)</samp><samp class="w">
  </samp><samp class="k" data-group-id="6018022963-24">end</samp><samp class="w">
</samp><samp class="k" data-group-id="6018022963-1">end</samp></code></pre><p>Note: the caller must be responsible for preventing duplicate subscriptions.
After calling <code class="inline">subscribe/1</code> from your endpoint, the same flow applies to
handling regular Elixir messages within your channel. Most often, you'll
simply relay the <code class="inline">%Phoenix.Socket.Broadcast{}</code> event and payload:</p><pre><code class="makeup elixir" translate="no"><samp class="kn">alias</samp><samp class="w"> </samp><samp class="nc">Phoenix.Socket.Broadcast</samp><samp class="w">
</samp><samp class="kd">def</samp><samp class="w"> </samp><samp class="nf">handle_info</samp><samp class="p" data-group-id="9450770271-1">(</samp><samp class="p" data-group-id="9450770271-2">%</samp><samp class="nc" data-group-id="9450770271-2">Broadcast</samp><samp class="p" data-group-id="9450770271-2">{</samp><samp class="ss">topic</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="bp">_</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">event</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="n">event</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">payload</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="n">payload</samp><samp class="p" data-group-id="9450770271-2">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">socket</samp><samp class="p" data-group-id="9450770271-1">)</samp><samp class="w"> </samp><samp class="k" data-group-id="9450770271-3">do</samp><samp class="w">
  </samp><samp class="n">push</samp><samp class="p" data-group-id="9450770271-4">(</samp><samp class="n">socket</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">event</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">payload</samp><samp class="p" data-group-id="9450770271-4">)</samp><samp class="w">
  </samp><samp class="p" data-group-id="9450770271-5">{</samp><samp class="ss">:noreply</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">socket</samp><samp class="p" data-group-id="9450770271-5">}</samp><samp class="w">
</samp><samp class="k" data-group-id="9450770271-3">end</samp></code></pre><h2 id="module-hibernation" class="section-heading">
  <a href="#module-hibernation" class="hover-link">
    <i class="ri-link-m" aria-hidden="true"></i>
  </a>
  <span class="text">Hibernation</span>
</h2>
<p>From Erlang/OTP 20, channels automatically hibernate to save memory
after 15_000 milliseconds of inactivity. This can be customized by
passing the <code class="inline">:hibernate_after</code> option to <code class="inline">use Phoenix.Channel</code>:</p><pre><code class="makeup elixir" translate="no"><samp class="kn">use</samp><samp class="w"> </samp><samp class="nc">Phoenix.Channel</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">hibernate_after</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">60_000</samp></code></pre><p>You can also set it to <code class="inline">:infinity</code> to fully disable it.</p><h2 id="module-shutdown" class="section-heading">
  <a href="#module-shutdown" class="hover-link">
    <i class="ri-link-m" aria-hidden="true"></i>
  </a>
  <span class="text">Shutdown</span>
</h2>
<p>You can configure the shutdown behavior of each channel used when your
application is shutting down by setting the <code class="inline">:shutdown</code> value on use:</p><pre><code class="makeup elixir" translate="no"><samp class="kn">use</samp><samp class="w"> </samp><samp class="nc">Phoenix.Channel</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">shutdown</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">5_000</samp></code></pre><p>It defaults to 5_000. The supported values are described under the
in the <a href="https://hexdocs.pm/elixir/Supervisor.html"><code class="inline">Supervisor</code></a> module docs.</p><h2 id="module-logging" class="section-heading">
  <a href="#module-logging" class="hover-link">
    <i class="ri-link-m" aria-hidden="true"></i>
  </a>
  <span class="text">Logging</span>
</h2>
<p>By default, channel <code class="inline">&quot;join&quot;</code> and <code class="inline">&quot;handle_in&quot;</code> events are logged, using
the level <code class="inline">:info</code> and <code class="inline">:debug</code>, respectively. You can change the level used
for each event, or disable logs, per event type by setting the <code class="inline">:log_join</code>
and <code class="inline">:log_handle_in</code> options when using <a href="Phoenix.Channel.xhtml"><code class="inline">Phoenix.Channel</code></a>. For example, the
following configuration logs join events as <code class="inline">:info</code>, but disables logging for
incoming events:</p><pre><code class="makeup elixir" translate="no"><samp class="kn">use</samp><samp class="w"> </samp><samp class="nc">Phoenix.Channel</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">log_join</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="ss">:info</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">log_handle_in</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">false</samp></code></pre><p>Note that changing an event type's level doesn't affect what is logged,
unless you set it to <code class="inline">false</code>, it affects the associated level.</p>
      </section>


      <section id="summary" class="details-list">
        <h1 class="section-heading">Summary</h1>
<div class="summary-types summary">
  <h2>
    <a href="#types">Types</a>
  </h2>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#t:payload/0" data-no-tooltip="" translate="no">payload()</a>

      </div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#t:reply/0" data-no-tooltip="" translate="no">reply()</a>

      </div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#t:socket_ref/0" data-no-tooltip="" translate="no">socket_ref()</a>

      </div>

    </div>

</div>
<div class="summary-callbacks summary">
  <h2>
    <a href="#callbacks">Callbacks</a>
  </h2>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#c:handle_call/3" data-no-tooltip="" translate="no">handle_call(msg, from, socket)</a>

      </div>

        <div class="summary-synopsis"><p>Handle regular GenServer call messages.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#c:handle_cast/2" data-no-tooltip="" translate="no">handle_cast(msg, socket)</a>

      </div>

        <div class="summary-synopsis"><p>Handle regular GenServer cast messages.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#c:handle_in/3" data-no-tooltip="" translate="no">handle_in(event, payload, socket)</a>

      </div>

        <div class="summary-synopsis"><p>Handle incoming <code class="inline">event</code>s.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#c:handle_info/2" data-no-tooltip="" translate="no">handle_info(msg, socket)</a>

      </div>

        <div class="summary-synopsis"><p>Handle regular Elixir process messages.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#c:handle_out/3" data-no-tooltip="" translate="no">handle_out(event, payload, socket)</a>

      </div>

        <div class="summary-synopsis"><p>Intercepts outgoing <code class="inline">event</code>s.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#c:join/3" data-no-tooltip="" translate="no">join(topic, payload, socket)</a>

      </div>

        <div class="summary-synopsis"><p>Handle channel joins by <code class="inline">topic</code>.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#c:terminate/2" data-no-tooltip="" translate="no">terminate(reason, t)</a>

      </div>

        <div class="summary-synopsis"><p>Invoked when the channel process is about to exit.</p></div>

    </div>

</div>
<div class="summary-functions summary">
  <h2>
    <a href="#functions">Functions</a>
  </h2>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#broadcast/3" data-no-tooltip="" translate="no">broadcast(socket, event, message)</a>

      </div>

        <div class="summary-synopsis"><p>Broadcast an event to all subscribers of the socket topic.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#broadcast!/3" data-no-tooltip="" translate="no">broadcast!(socket, event, message)</a>

      </div>

        <div class="summary-synopsis"><p>Same as <a href="#broadcast/3"><code class="inline">broadcast/3</code></a>, but raises if broadcast fails.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#broadcast_from/3" data-no-tooltip="" translate="no">broadcast_from(socket, event, message)</a>

      </div>

        <div class="summary-synopsis"><p>Broadcast event from pid to all subscribers of the socket topic.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#broadcast_from!/3" data-no-tooltip="" translate="no">broadcast_from!(socket, event, message)</a>

      </div>

        <div class="summary-synopsis"><p>Same as <a href="#broadcast_from/3"><code class="inline">broadcast_from/3</code></a>, but raises if broadcast fails.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#intercept/1" data-no-tooltip="" translate="no">intercept(events)</a>

      </div>

        <div class="summary-synopsis"><p>Defines which Channel events to intercept for <code class="inline">handle_out/3</code> callbacks.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#push/3" data-no-tooltip="" translate="no">push(socket, event, message)</a>

      </div>

        <div class="summary-synopsis"><p>Sends an event directly to the connected client without requiring a prior
message from the client.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#reply/2" data-no-tooltip="" translate="no">reply(socket_ref, status)</a>

      </div>

        <div class="summary-synopsis"><p>Replies asynchronously to a socket push.</p></div>

    </div>

    <div class="summary-row">
      <div class="summary-signature">
        <a href="#socket_ref/1" data-no-tooltip="" translate="no">socket_ref(socket)</a>

      </div>

        <div class="summary-synopsis"><p>Generates a <code class="inline">socket_ref</code> for an async reply.</p></div>

    </div>

</div>

      </section>


      <section id="types" class="details-list">
        <h1 class="section-heading">Types</h1>
        <div class="types-list">
<section class="detail" id="t:payload/0">

  <div class="detail-header">
    <a href="#t:payload/0" class="detail-link" data-no-tooltip="" aria-label="Link to this type">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">payload()</h1>


        <a href="https://github.com/phoenixframework/phoenix/blob/v1.7.21/lib/phoenix/channel.ex#L352" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@type</span> payload() :: <a href="https://hexdocs.pm/elixir/typespecs.html#basic-types">map</a>() | <a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types">term</a>() | {:binary, <a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types">binary</a>()}</pre>

      </div>


  </section>
</section>
<section class="detail" id="t:reply/0">

  <div class="detail-header">
    <a href="#t:reply/0" class="detail-link" data-no-tooltip="" aria-label="Link to this type">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">reply()</h1>


        <a href="https://github.com/phoenixframework/phoenix/blob/v1.7.21/lib/phoenix/channel.ex#L353" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@type</span> reply() :: status :: <a href="https://hexdocs.pm/elixir/typespecs.html#basic-types">atom</a>() | {status :: <a href="https://hexdocs.pm/elixir/typespecs.html#basic-types">atom</a>(), response :: <a href="#t:payload/0">payload</a>()}</pre>

      </div>


  </section>
</section>
<section class="detail" id="t:socket_ref/0">

  <div class="detail-header">
    <a href="#t:socket_ref/0" class="detail-link" data-no-tooltip="" aria-label="Link to this type">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">socket_ref()</h1>


        <a href="https://github.com/phoenixframework/phoenix/blob/v1.7.21/lib/phoenix/channel.ex#L354" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@type</span> socket_ref() ::
  {transport_pid :: Pid, serializer :: <a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types">module</a>(), topic :: <a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types">binary</a>(),
   ref :: <a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types">binary</a>(), join_ref :: <a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types">binary</a>()}</pre>

      </div>


  </section>
</section>

        </div>
      </section>

      <section id="callbacks" class="details-list">
        <h1 class="section-heading">Callbacks</h1>
        <div class="callbacks-list">
<section class="detail" id="c:handle_call/3">

  <div class="detail-header">
    <a href="#c:handle_call/3" class="detail-link" data-no-tooltip="" aria-label="Link to this callback">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">handle_call(msg, from, socket)</h1>

        <span class="note">(optional)</span>


        <a href="https://github.com/phoenixframework/phoenix/blob/v1.7.21/lib/phoenix/channel.ex#L424" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@callback</span> handle_call(
  msg :: <a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types">term</a>(),
  from :: {<a href="https://hexdocs.pm/elixir/typespecs.html#basic-types">pid</a>(), tag :: <a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types">term</a>()},
  socket :: <a href="Phoenix.Socket.xhtml#t:t/0">Phoenix.Socket.t</a>()
) ::
  {:reply, response :: <a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types">term</a>(), <a href="Phoenix.Socket.xhtml#t:t/0">Phoenix.Socket.t</a>()}
  | {:noreply, <a href="Phoenix.Socket.xhtml#t:t/0">Phoenix.Socket.t</a>()}
  | {:stop, reason :: <a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types">term</a>(), <a href="Phoenix.Socket.xhtml#t:t/0">Phoenix.Socket.t</a>()}</pre>

      </div>

<p>Handle regular GenServer call messages.</p><p>See <a href="https://hexdocs.pm/elixir/GenServer.html#c:handle_call/3"><code class="inline">GenServer.handle_call/3</code></a>.</p>
  </section>
</section>
<section class="detail" id="c:handle_cast/2">

  <div class="detail-header">
    <a href="#c:handle_cast/2" class="detail-link" data-no-tooltip="" aria-label="Link to this callback">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">handle_cast(msg, socket)</h1>

        <span class="note">(optional)</span>


        <a href="https://github.com/phoenixframework/phoenix/blob/v1.7.21/lib/phoenix/channel.ex#L434" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@callback</span> handle_cast(msg :: <a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types">term</a>(), socket :: <a href="Phoenix.Socket.xhtml#t:t/0">Phoenix.Socket.t</a>()) ::
  {:noreply, <a href="Phoenix.Socket.xhtml#t:t/0">Phoenix.Socket.t</a>()} | {:stop, reason :: <a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types">term</a>(), <a href="Phoenix.Socket.xhtml#t:t/0">Phoenix.Socket.t</a>()}</pre>

      </div>

<p>Handle regular GenServer cast messages.</p><p>See <a href="https://hexdocs.pm/elixir/GenServer.html#c:handle_cast/2"><code class="inline">GenServer.handle_cast/2</code></a>.</p>
  </section>
</section>
<section class="detail" id="c:handle_in/3">

  <div class="detail-header">
    <a href="#c:handle_in/3" class="detail-link" data-no-tooltip="" aria-label="Link to this callback">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">handle_in(event, payload, socket)</h1>

        <span class="note">(optional)</span>


        <a href="https://github.com/phoenixframework/phoenix/blob/v1.7.21/lib/phoenix/channel.ex#L393" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@callback</span> handle_in(
  event :: <a href="https://hexdocs.pm/elixir/String.html#t:t/0">String.t</a>(),
  payload :: <a href="#t:payload/0">payload</a>(),
  socket :: <a href="Phoenix.Socket.xhtml#t:t/0">Phoenix.Socket.t</a>()
) ::
  {:noreply, <a href="Phoenix.Socket.xhtml#t:t/0">Phoenix.Socket.t</a>()}
  | {:noreply, <a href="Phoenix.Socket.xhtml#t:t/0">Phoenix.Socket.t</a>(), <a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types">timeout</a>() | :hibernate}
  | {:reply, <a href="#t:reply/0">reply</a>(), <a href="Phoenix.Socket.xhtml#t:t/0">Phoenix.Socket.t</a>()}
  | {:stop, reason :: <a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types">term</a>(), <a href="Phoenix.Socket.xhtml#t:t/0">Phoenix.Socket.t</a>()}
  | {:stop, reason :: <a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types">term</a>(), <a href="#t:reply/0">reply</a>(), <a href="Phoenix.Socket.xhtml#t:t/0">Phoenix.Socket.t</a>()}</pre>

      </div>

<p>Handle incoming <code class="inline">event</code>s.</p><p>Payloads are serialized before sending with the configured serializer.</p><h2 id="c:handle_in/3-example" class="section-heading">
  <a href="#c:handle_in/3-example" class="hover-link">
    <i class="ri-link-m" aria-hidden="true"></i>
  </a>
  <span class="text">Example</span>
</h2>
<pre><code class="makeup elixir" translate="no"><samp class="kd">def</samp><samp class="w"> </samp><samp class="nf">handle_in</samp><samp class="p" data-group-id="4976515013-1">(</samp><samp class="s">&quot;ping&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">payload</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">socket</samp><samp class="p" data-group-id="4976515013-1">)</samp><samp class="w"> </samp><samp class="k" data-group-id="4976515013-2">do</samp><samp class="w">
  </samp><samp class="p" data-group-id="4976515013-3">{</samp><samp class="ss">:reply</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="4976515013-4">{</samp><samp class="ss">:ok</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">payload</samp><samp class="p" data-group-id="4976515013-4">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">socket</samp><samp class="p" data-group-id="4976515013-3">}</samp><samp class="w">
</samp><samp class="k" data-group-id="4976515013-2">end</samp></code></pre>
  </section>
</section>
<section class="detail" id="c:handle_info/2">

  <div class="detail-header">
    <a href="#c:handle_info/2" class="detail-link" data-no-tooltip="" aria-label="Link to this callback">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">handle_info(msg, socket)</h1>

        <span class="note">(optional)</span>


        <a href="https://github.com/phoenixframework/phoenix/blob/v1.7.21/lib/phoenix/channel.ex#L415" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@callback</span> handle_info(msg :: <a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types">term</a>(), socket :: <a href="Phoenix.Socket.xhtml#t:t/0">Phoenix.Socket.t</a>()) ::
  {:noreply, <a href="Phoenix.Socket.xhtml#t:t/0">Phoenix.Socket.t</a>()} | {:stop, reason :: <a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types">term</a>(), <a href="Phoenix.Socket.xhtml#t:t/0">Phoenix.Socket.t</a>()}</pre>

      </div>

<p>Handle regular Elixir process messages.</p><p>See <a href="https://hexdocs.pm/elixir/GenServer.html#c:handle_info/2"><code class="inline">GenServer.handle_info/2</code></a>.</p>
  </section>
</section>
<section class="detail" id="c:handle_out/3">

  <div class="detail-header">
    <a href="#c:handle_out/3" class="detail-link" data-no-tooltip="" aria-label="Link to this callback">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">handle_out(event, payload, socket)</h1>

        <span class="note">(optional)</span>


        <a href="https://github.com/phoenixframework/phoenix/blob/v1.7.21/lib/phoenix/channel.ex#L405" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@callback</span> handle_out(
  event :: <a href="https://hexdocs.pm/elixir/String.html#t:t/0">String.t</a>(),
  payload :: <a href="#t:payload/0">payload</a>(),
  socket :: <a href="Phoenix.Socket.xhtml#t:t/0">Phoenix.Socket.t</a>()
) ::
  {:noreply, <a href="Phoenix.Socket.xhtml#t:t/0">Phoenix.Socket.t</a>()}
  | {:noreply, <a href="Phoenix.Socket.xhtml#t:t/0">Phoenix.Socket.t</a>(), <a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types">timeout</a>() | :hibernate}
  | {:stop, reason :: <a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types">term</a>(), <a href="Phoenix.Socket.xhtml#t:t/0">Phoenix.Socket.t</a>()}</pre>

      </div>

<p>Intercepts outgoing <code class="inline">event</code>s.</p><p>See <a href="#intercept/1"><code class="inline">intercept/1</code></a>.</p>
  </section>
</section>
<section class="detail" id="c:join/3">

  <div class="detail-header">
    <a href="#c:join/3" class="detail-link" data-no-tooltip="" aria-label="Link to this callback">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">join(topic, payload, socket)</h1>


        <a href="https://github.com/phoenixframework/phoenix/blob/v1.7.21/lib/phoenix/channel.ex#L377" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@callback</span> join(topic :: <a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types">binary</a>(), payload :: <a href="#t:payload/0">payload</a>(), socket :: <a href="Phoenix.Socket.xhtml#t:t/0">Phoenix.Socket.t</a>()) ::
  {:ok, <a href="Phoenix.Socket.xhtml#t:t/0">Phoenix.Socket.t</a>()}
  | {:ok, reply :: <a href="#t:payload/0">payload</a>(), <a href="Phoenix.Socket.xhtml#t:t/0">Phoenix.Socket.t</a>()}
  | {:error, reason :: <a href="https://hexdocs.pm/elixir/typespecs.html#basic-types">map</a>()}</pre>

      </div>

<p>Handle channel joins by <code class="inline">topic</code>.</p><p>To authorize a socket, return <code class="inline">{:ok, socket}</code> or <code class="inline">{:ok, reply, socket}</code>. To
refuse authorization, return <code class="inline">{:error, reason}</code>.</p><p>Payloads are serialized before sending with the configured serializer.</p><h2 id="c:join/3-example" class="section-heading">
  <a href="#c:join/3-example" class="hover-link">
    <i class="ri-link-m" aria-hidden="true"></i>
  </a>
  <span class="text">Example</span>
</h2>
<pre><code class="makeup elixir" translate="no"><samp class="kd">def</samp><samp class="w"> </samp><samp class="nf">join</samp><samp class="p" data-group-id="0238206451-1">(</samp><samp class="s">&quot;room:lobby&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">payload</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">socket</samp><samp class="p" data-group-id="0238206451-1">)</samp><samp class="w"> </samp><samp class="k" data-group-id="0238206451-2">do</samp><samp class="w">
  </samp><samp class="k">if</samp><samp class="w"> </samp><samp class="n">authorized?</samp><samp class="p" data-group-id="0238206451-3">(</samp><samp class="n">payload</samp><samp class="p" data-group-id="0238206451-3">)</samp><samp class="w"> </samp><samp class="k" data-group-id="0238206451-4">do</samp><samp class="w">
    </samp><samp class="p" data-group-id="0238206451-5">{</samp><samp class="ss">:ok</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">socket</samp><samp class="p" data-group-id="0238206451-5">}</samp><samp class="w">
  </samp><samp class="k" data-group-id="0238206451-4">else</samp><samp class="w">
    </samp><samp class="p" data-group-id="0238206451-6">{</samp><samp class="ss">:error</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="0238206451-7">%{</samp><samp class="ss">reason</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;unauthorized&quot;</samp><samp class="p" data-group-id="0238206451-7">}</samp><samp class="p" data-group-id="0238206451-6">}</samp><samp class="w">
  </samp><samp class="k" data-group-id="0238206451-4">end</samp><samp class="w">
</samp><samp class="k" data-group-id="0238206451-2">end</samp></code></pre>
  </section>
</section>
<section class="detail" id="c:terminate/2">

  <div class="detail-header">
    <a href="#c:terminate/2" class="detail-link" data-no-tooltip="" aria-label="Link to this callback">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">terminate(reason, t)</h1>

        <span class="note">(optional)</span>


        <a href="https://github.com/phoenixframework/phoenix/blob/v1.7.21/lib/phoenix/channel.ex#L449" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@callback</span> terminate(
  reason :: :normal | :shutdown | {:shutdown, :left | :closed | <a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types">term</a>()},
  <a href="Phoenix.Socket.xhtml#t:t/0">Phoenix.Socket.t</a>()
) :: <a href="https://hexdocs.pm/elixir/typespecs.html#built-in-types">term</a>()</pre>

      </div>

<p>Invoked when the channel process is about to exit.</p><p>See <a href="https://hexdocs.pm/elixir/GenServer.html#c:terminate/2"><code class="inline">GenServer.terminate/2</code></a>.</p>
  </section>
</section>

        </div>
      </section>

      <section id="functions" class="details-list">
        <h1 class="section-heading">Functions</h1>
        <div class="functions-list">
<section class="detail" id="broadcast/3">

  <div class="detail-header">
    <a href="#broadcast/3" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">broadcast(socket, event, message)</h1>


        <a href="https://github.com/phoenixframework/phoenix/blob/v1.7.21/lib/phoenix/channel.ex#L572" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

<p>Broadcast an event to all subscribers of the socket topic.</p><p>The event's message must be a serializable map or a tagged <code class="inline">{:binary, data}</code>
tuple where <code class="inline">data</code> is binary data.</p><h2 id="broadcast/3-examples" class="section-heading">
  <a href="#broadcast/3-examples" class="hover-link">
    <i class="ri-link-m" aria-hidden="true"></i>
  </a>
  <span class="text">Examples</span>
</h2>
<pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="n">broadcast</samp><samp class="p" data-group-id="6043080428-1">(</samp><samp class="n">socket</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;new_message&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="6043080428-2">%{</samp><samp class="ss">id</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">1</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">content</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;hello&quot;</samp><samp class="p" data-group-id="6043080428-2">}</samp><samp class="p" data-group-id="6043080428-1">)</samp><samp class="w">
</samp><samp class="ss">:ok</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="n">broadcast</samp><samp class="p" data-group-id="6043080428-3">(</samp><samp class="n">socket</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;new_message&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="6043080428-4">{</samp><samp class="ss">:binary</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;hello&quot;</samp><samp class="p" data-group-id="6043080428-4">}</samp><samp class="p" data-group-id="6043080428-3">)</samp><samp class="w">
</samp><samp class="ss">:ok</samp></code></pre>
  </section>
</section>
<section class="detail" id="broadcast!/3">

  <div class="detail-header">
    <a href="#broadcast!/3" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">broadcast!(socket, event, message)</h1>


        <a href="https://github.com/phoenixframework/phoenix/blob/v1.7.21/lib/phoenix/channel.ex#L580" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

<p>Same as <a href="#broadcast/3"><code class="inline">broadcast/3</code></a>, but raises if broadcast fails.</p>
  </section>
</section>
<section class="detail" id="broadcast_from/3">

  <div class="detail-header">
    <a href="#broadcast_from/3" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">broadcast_from(socket, event, message)</h1>


        <a href="https://github.com/phoenixframework/phoenix/blob/v1.7.21/lib/phoenix/channel.ex#L601" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

<p>Broadcast event from pid to all subscribers of the socket topic.</p><p>The channel that owns the socket will not receive the published
message. The event's message must be a serializable map or a tagged
<code class="inline">{:binary, data}</code> tuple where <code class="inline">data</code> is binary data.</p><h2 id="broadcast_from/3-examples" class="section-heading">
  <a href="#broadcast_from/3-examples" class="hover-link">
    <i class="ri-link-m" aria-hidden="true"></i>
  </a>
  <span class="text">Examples</span>
</h2>
<pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="n">broadcast_from</samp><samp class="p" data-group-id="7525385117-1">(</samp><samp class="n">socket</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;new_message&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="7525385117-2">%{</samp><samp class="ss">id</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">1</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">content</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;hello&quot;</samp><samp class="p" data-group-id="7525385117-2">}</samp><samp class="p" data-group-id="7525385117-1">)</samp><samp class="w">
</samp><samp class="ss">:ok</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="n">broadcast_from</samp><samp class="p" data-group-id="7525385117-3">(</samp><samp class="n">socket</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;new_message&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="7525385117-4">{</samp><samp class="ss">:binary</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;hello&quot;</samp><samp class="p" data-group-id="7525385117-4">}</samp><samp class="p" data-group-id="7525385117-3">)</samp><samp class="w">
</samp><samp class="ss">:ok</samp></code></pre>
  </section>
</section>
<section class="detail" id="broadcast_from!/3">

  <div class="detail-header">
    <a href="#broadcast_from!/3" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">broadcast_from!(socket, event, message)</h1>


        <a href="https://github.com/phoenixframework/phoenix/blob/v1.7.21/lib/phoenix/channel.ex#L611" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

<p>Same as <a href="#broadcast_from/3"><code class="inline">broadcast_from/3</code></a>, but raises if broadcast fails.</p>
  </section>
</section>
<section class="detail" id="intercept/1">

  <div class="detail-header">
    <a href="#intercept/1" class="detail-link" data-no-tooltip="" aria-label="Link to this macro">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">intercept(events)</h1>

        <span class="note">(macro)</span>


        <a href="https://github.com/phoenixframework/phoenix/blob/v1.7.21/lib/phoenix/channel.ex#L535" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

<p>Defines which Channel events to intercept for <code class="inline">handle_out/3</code> callbacks.</p><p>By default, broadcasted events are pushed directly to the client, but
intercepting events gives your channel a chance to customize the event
for the client to append extra information or filter the message from being
delivered.</p><p><em>Note</em>: intercepting events can introduce significantly more overhead if a
large number of subscribers must customize a message since the broadcast will
be encoded N times instead of a single shared encoding across all subscribers.</p><h2 id="intercept/1-examples" class="section-heading">
  <a href="#intercept/1-examples" class="hover-link">
    <i class="ri-link-m" aria-hidden="true"></i>
  </a>
  <span class="text">Examples</span>
</h2>
<pre><code class="makeup elixir" translate="no"><samp class="n">intercept</samp><samp class="w"> </samp><samp class="p" data-group-id="1118310415-1">[</samp><samp class="s">&quot;new_msg&quot;</samp><samp class="p" data-group-id="1118310415-1">]</samp><samp class="w">

</samp><samp class="kd">def</samp><samp class="w"> </samp><samp class="nf">handle_out</samp><samp class="p" data-group-id="1118310415-2">(</samp><samp class="s">&quot;new_msg&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">payload</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">socket</samp><samp class="p" data-group-id="1118310415-2">)</samp><samp class="w"> </samp><samp class="k" data-group-id="1118310415-3">do</samp><samp class="w">
  </samp><samp class="n">push</samp><samp class="p" data-group-id="1118310415-4">(</samp><samp class="n">socket</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;new_msg&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="nc">Map</samp><samp class="o">.</samp><samp class="n">merge</samp><samp class="p" data-group-id="1118310415-5">(</samp><samp class="n">payload</samp><samp class="p">,</samp><samp class="w">
    </samp><samp class="ss">is_editable</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="nc">User</samp><samp class="o">.</samp><samp class="n">can_edit_message?</samp><samp class="p" data-group-id="1118310415-6">(</samp><samp class="n">socket</samp><samp class="o">.</samp><samp class="n">assigns</samp><samp class="p" data-group-id="1118310415-7">[</samp><samp class="ss">:user</samp><samp class="p" data-group-id="1118310415-7">]</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">payload</samp><samp class="p" data-group-id="1118310415-6">)</samp><samp class="w">
  </samp><samp class="p" data-group-id="1118310415-5">)</samp><samp class="p" data-group-id="1118310415-4">)</samp><samp class="w">
  </samp><samp class="p" data-group-id="1118310415-8">{</samp><samp class="ss">:noreply</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">socket</samp><samp class="p" data-group-id="1118310415-8">}</samp><samp class="w">
</samp><samp class="k" data-group-id="1118310415-3">end</samp></code></pre><p><code class="inline">handle_out/3</code> callbacks must return one of:</p><pre><code class="makeup elixir" translate="no"><samp class="p" data-group-id="3886547491-1">{</samp><samp class="ss">:noreply</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="nc">Socket</samp><samp class="o">.</samp><samp class="n">t</samp><samp class="p" data-group-id="3886547491-1">}</samp><samp class="w"> </samp><samp class="o">|</samp><samp class="w">
</samp><samp class="p" data-group-id="3886547491-2">{</samp><samp class="ss">:noreply</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="nc">Socket</samp><samp class="o">.</samp><samp class="n">t</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">timeout</samp><samp class="w"> </samp><samp class="o">|</samp><samp class="w"> </samp><samp class="ss">:hibernate</samp><samp class="p" data-group-id="3886547491-2">}</samp><samp class="w"> </samp><samp class="o">|</samp><samp class="w">
</samp><samp class="p" data-group-id="3886547491-3">{</samp><samp class="ss">:stop</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">reason</samp><samp class="w"> </samp><samp class="o">::</samp><samp class="w"> </samp><samp class="n">term</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="nc">Socket</samp><samp class="o">.</samp><samp class="n">t</samp><samp class="p" data-group-id="3886547491-3">}</samp></code></pre>
  </section>
</section>
<section class="detail" id="push/3">

  <div class="detail-header">
    <a href="#push/3" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">push(socket, event, message)</h1>


        <a href="https://github.com/phoenixframework/phoenix/blob/v1.7.21/lib/phoenix/channel.ex#L641" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

<p>Sends an event directly to the connected client without requiring a prior
message from the client.</p><p>The event's message must be a serializable map or a tagged <code class="inline">{:binary, data}</code>
tuple where <code class="inline">data</code> is binary data.</p><p>Note that unlike some in client libraries, this server-side <a href="#push/3"><code class="inline">push/3</code></a> does not
return a reference. If you need to get a reply from the client and to
correlate that reply with the message you pushed, you'll need to include a
unique identifier in the message, track it in the Channel's state, have the
client include it in its reply, and examine the ref when the reply comes to
<code class="inline">handle_in/3</code>.</p><h2 id="push/3-examples" class="section-heading">
  <a href="#push/3-examples" class="hover-link">
    <i class="ri-link-m" aria-hidden="true"></i>
  </a>
  <span class="text">Examples</span>
</h2>
<pre><code class="makeup elixir" translate="no"><samp class="gp unselectable">iex&gt; </samp><samp class="n">push</samp><samp class="p" data-group-id="4699781071-1">(</samp><samp class="n">socket</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;new_message&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="4699781071-2">%{</samp><samp class="ss">id</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="mi">1</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">content</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;hello&quot;</samp><samp class="p" data-group-id="4699781071-2">}</samp><samp class="p" data-group-id="4699781071-1">)</samp><samp class="w">
</samp><samp class="ss">:ok</samp><samp class="w">

</samp><samp class="gp unselectable">iex&gt; </samp><samp class="n">push</samp><samp class="p" data-group-id="4699781071-3">(</samp><samp class="n">socket</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;new_message&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="4699781071-4">{</samp><samp class="ss">:binary</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="s">&quot;hello&quot;</samp><samp class="p" data-group-id="4699781071-4">}</samp><samp class="p" data-group-id="4699781071-3">)</samp><samp class="w">
</samp><samp class="ss">:ok</samp></code></pre>
  </section>
</section>
<section class="detail" id="reply/2">

  <div class="detail-header">
    <a href="#reply/2" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">reply(socket_ref, status)</h1>


        <a href="https://github.com/phoenixframework/phoenix/blob/v1.7.21/lib/phoenix/channel.ex#L687" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> reply(<a href="#t:socket_ref/0">socket_ref</a>(), <a href="#t:reply/0">reply</a>()) :: :ok</pre>

      </div>

<p>Replies asynchronously to a socket push.</p><p>The usual way of replying to a client's message is to return a tuple from <code class="inline">handle_in/3</code>
like:</p><pre><code class="makeup elixir" translate="no"><samp class="p" data-group-id="1975876605-1">{</samp><samp class="ss">:reply</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="1975876605-2">{</samp><samp class="n">status</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">payload</samp><samp class="p" data-group-id="1975876605-2">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">socket</samp><samp class="p" data-group-id="1975876605-1">}</samp></code></pre><p>But sometimes you need to reply to a push asynchronously - that is, after
your <code class="inline">handle_in/3</code> callback completes. For example, you might need to perform
work in another process and reply when it's finished.</p><p>You can do this by generating a reference to the socket with <a href="#socket_ref/1"><code class="inline">socket_ref/1</code></a>
and calling <a href="#reply/2"><code class="inline">reply/2</code></a> with that ref when you're ready to reply.</p><p><em>Note</em>: A <code class="inline">socket_ref</code> is required so the <code class="inline">socket</code> itself is not leaked
outside the channel. The <code class="inline">socket</code> holds information such as assigns and
transport configuration, so it's important to not copy this information
outside of the channel that owns it.</p><p>Technically, <a href="#reply/2"><code class="inline">reply/2</code></a> will allow you to reply multiple times to the same
client message, and each reply will include the client message <code class="inline">ref</code>. But the
client may expect only one reply; in that case, <a href="#push/3"><code class="inline">push/3</code></a> would be preferable
for the additional messages.</p><p>Payloads are serialized before sending with the configured serializer.</p><h2 id="reply/2-examples" class="section-heading">
  <a href="#reply/2-examples" class="hover-link">
    <i class="ri-link-m" aria-hidden="true"></i>
  </a>
  <span class="text">Examples</span>
</h2>
<pre><code class="makeup elixir" translate="no"><samp class="kd">def</samp><samp class="w"> </samp><samp class="nf">handle_in</samp><samp class="p" data-group-id="0835133952-1">(</samp><samp class="s">&quot;work&quot;</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">payload</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">socket</samp><samp class="p" data-group-id="0835133952-1">)</samp><samp class="w"> </samp><samp class="k" data-group-id="0835133952-2">do</samp><samp class="w">
  </samp><samp class="nc">Worker</samp><samp class="o">.</samp><samp class="n">perform</samp><samp class="p" data-group-id="0835133952-3">(</samp><samp class="n">payload</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">socket_ref</samp><samp class="p" data-group-id="0835133952-4">(</samp><samp class="n">socket</samp><samp class="p" data-group-id="0835133952-4">)</samp><samp class="p" data-group-id="0835133952-3">)</samp><samp class="w">
  </samp><samp class="p" data-group-id="0835133952-5">{</samp><samp class="ss">:noreply</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">socket</samp><samp class="p" data-group-id="0835133952-5">}</samp><samp class="w">
</samp><samp class="k" data-group-id="0835133952-2">end</samp><samp class="w">

</samp><samp class="kd">def</samp><samp class="w"> </samp><samp class="nf">handle_info</samp><samp class="p" data-group-id="0835133952-6">(</samp><samp class="p" data-group-id="0835133952-7">{</samp><samp class="ss">:work_complete</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">result</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">ref</samp><samp class="p" data-group-id="0835133952-7">}</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">socket</samp><samp class="p" data-group-id="0835133952-6">)</samp><samp class="w"> </samp><samp class="k" data-group-id="0835133952-8">do</samp><samp class="w">
  </samp><samp class="n">reply</samp><samp class="p" data-group-id="0835133952-9">(</samp><samp class="n">ref</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="p" data-group-id="0835133952-10">{</samp><samp class="ss">:ok</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">result</samp><samp class="p" data-group-id="0835133952-10">}</samp><samp class="p" data-group-id="0835133952-9">)</samp><samp class="w">
  </samp><samp class="p" data-group-id="0835133952-11">{</samp><samp class="ss">:noreply</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="n">socket</samp><samp class="p" data-group-id="0835133952-11">}</samp><samp class="w">
</samp><samp class="k" data-group-id="0835133952-8">end</samp></code></pre>
  </section>
</section>
<section class="detail" id="socket_ref/1">

  <div class="detail-header">
    <a href="#socket_ref/1" class="detail-link" data-no-tooltip="" aria-label="Link to this function">
      <i class="ri-link-m" aria-hidden="true"></i>
    </a>
    <div class="heading-with-actions">
      <h1 class="signature" translate="no">socket_ref(socket)</h1>


        <a href="https://github.com/phoenixframework/phoenix/blob/v1.7.21/lib/phoenix/channel.ex#L701" class="icon-action" rel="help" aria-label="View Source">
          <i class="ri-code-s-slash-line" aria-hidden="true"></i>
        </a>

    </div>
  </div>

  <section class="docstring">

      <div class="specs">

          <pre translate="no"><span class="attribute">@spec</span> socket_ref(<a href="Phoenix.Socket.xhtml#t:t/0">Phoenix.Socket.t</a>()) :: <a href="#t:socket_ref/0">socket_ref</a>()</pre>

      </div>

<p>Generates a <code class="inline">socket_ref</code> for an async reply.</p><p>See <a href="#reply/2"><code class="inline">reply/2</code></a> for example usage.</p>
  </section>
</section>

        </div>
      </section>


  </body>
</html>
