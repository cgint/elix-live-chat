<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"
      xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>Testing Controllers - Phoenix v1.7.21</title>
    <meta name="generator" content="ExDoc v0.37.3" />
    <link type="text/css" rel="stylesheet" href="dist/epub-elixir-FNUUKFP7.css" />
    <script src="dist/epub-4WIP524F.js"></script>

  </head>
  <body class="content-inner">

    <h1 id="content">
Testing Controllers
    </h1>
<blockquote><p><strong>Requirement</strong>: This guide expects that you have gone through the <a href="installation.html">introductory guides</a> and got a Phoenix application <a href="up_and_running.html">up and running</a>.</p></blockquote><blockquote><p><strong>Requirement</strong>: This guide expects that you have gone through the <a href="testing.html">Introduction to Testing guide</a>.</p></blockquote><p>At the end of the Introduction to Testing guide, we generated an HTML resource for posts using the following command:</p><pre><code class="makeup console" translate="no"><span class="gp unselectable">$ </span><span class="">mix phx.gen.html Blog Post posts title body:text
</span></code></pre><p>This gave us a number of modules for free, including a PostController and the associated tests. We are going to explore those tests to learn more about testing controllers in general. At the end of the guide, we will generate a JSON resource, and explore how our API tests look like.</p><h2 id="html-controller-tests" class="section-heading">
  <a href="#html-controller-tests" class="hover-link">
    <i class="ri-link-m" aria-hidden="true"></i>
  </a>
  <span class="text">HTML controller tests</span>
</h2>
<p>If you open up <code class="inline">test/hello_web/controllers/post_controller_test.exs</code>, you will find the following:</p><pre><code class="makeup elixir" translate="no"><span class="kd">defmodule</span><span class="w"> </span><span class="nc">HelloWeb.PostControllerTest</span><span class="w"> </span><span class="k" data-group-id="0903674634-1">do</span><span class="w">
  </span><span class="kn">use</span><span class="w"> </span><span class="nc">HelloWeb.ConnCase</span><span class="w">

  </span><span class="kn">import</span><span class="w"> </span><span class="nc">Hello.BlogFixtures</span><span class="w">

  </span><span class="na">@create_attrs</span><span class="w"> </span><span class="p" data-group-id="0903674634-2">%{</span><span class="ss">body</span><span class="p">:</span><span class="w"> </span><span class="s">&quot;some body&quot;</span><span class="p">,</span><span class="w"> </span><span class="ss">title</span><span class="p">:</span><span class="w"> </span><span class="s">&quot;some title&quot;</span><span class="p" data-group-id="0903674634-2">}</span><span class="w">
  </span><span class="na">@update_attrs</span><span class="w"> </span><span class="p" data-group-id="0903674634-3">%{</span><span class="ss">body</span><span class="p">:</span><span class="w"> </span><span class="s">&quot;some updated body&quot;</span><span class="p">,</span><span class="w"> </span><span class="ss">title</span><span class="p">:</span><span class="w"> </span><span class="s">&quot;some updated title&quot;</span><span class="p" data-group-id="0903674634-3">}</span><span class="w">
  </span><span class="na">@invalid_attrs</span><span class="w"> </span><span class="p" data-group-id="0903674634-4">%{</span><span class="ss">body</span><span class="p">:</span><span class="w"> </span><span class="no">nil</span><span class="p">,</span><span class="w"> </span><span class="ss">title</span><span class="p">:</span><span class="w"> </span><span class="no">nil</span><span class="p" data-group-id="0903674634-4">}</span><span class="w">
  
  </span><span class="n">describe</span><span class="w"> </span><span class="s">&quot;index&quot;</span><span class="w"> </span><span class="k" data-group-id="0903674634-5">do</span><span class="w">
    </span><span class="n">test</span><span class="w"> </span><span class="s">&quot;lists all posts&quot;</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="0903674634-6">%{</span><span class="ss">conn</span><span class="p">:</span><span class="w"> </span><span class="n">conn</span><span class="p" data-group-id="0903674634-6">}</span><span class="w"> </span><span class="k" data-group-id="0903674634-7">do</span><span class="w">
      </span><span class="n">conn</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">get</span><span class="p" data-group-id="0903674634-8">(</span><span class="n">conn</span><span class="p">,</span><span class="w"> </span><span class="sx">~p&quot;/posts&quot;</span><span class="p" data-group-id="0903674634-8">)</span><span class="w">
      </span><span class="n">assert</span><span class="w"> </span><span class="n">html_response</span><span class="p" data-group-id="0903674634-9">(</span><span class="n">conn</span><span class="p">,</span><span class="w"> </span><span class="mi">200</span><span class="p" data-group-id="0903674634-9">)</span><span class="w"> </span><span class="o">=~</span><span class="w"> </span><span class="s">&quot;Listing Posts&quot;</span><span class="w">
    </span><span class="k" data-group-id="0903674634-7">end</span><span class="w">
  </span><span class="k" data-group-id="0903674634-5">end</span><span class="w">

  </span><span class="n">...</span></code></pre><p>Similar to the <code class="inline">PageControllerTest</code> that ships with our application, this controller tests uses <code class="inline">use HelloWeb.ConnCase</code> to setup the testing structure. Then, as usual, it defines some aliases, some module attributes to use throughout testing, and then it starts a series of <code class="inline">describe</code> blocks, each of them to test a different controller action.</p><h3 id="the-index-action" class="section-heading">
  <a href="#the-index-action" class="hover-link">
    <i class="ri-link-m" aria-hidden="true"></i>
  </a>
  <span class="text">The index action</span>
</h3>
<p>The first describe block is for the <code class="inline">index</code> action. The action itself is implemented like this in <code class="inline">lib/hello_web/controllers/post_controller.ex</code>:</p><pre><code class="makeup elixir" translate="no"><span class="kd">def</span><span class="w"> </span><span class="nf">index</span><span class="p" data-group-id="0493537178-1">(</span><span class="n">conn</span><span class="p">,</span><span class="w"> </span><span class="c">_params</span><span class="p" data-group-id="0493537178-1">)</span><span class="w"> </span><span class="k" data-group-id="0493537178-2">do</span><span class="w">
  </span><span class="n">posts</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nc">Blog</span><span class="o">.</span><span class="n">list_posts</span><span class="p" data-group-id="0493537178-3">(</span><span class="p" data-group-id="0493537178-3">)</span><span class="w">
  </span><span class="n">render</span><span class="p" data-group-id="0493537178-4">(</span><span class="n">conn</span><span class="p">,</span><span class="w"> </span><span class="ss">:index</span><span class="p">,</span><span class="w"> </span><span class="ss">posts</span><span class="p">:</span><span class="w"> </span><span class="n">posts</span><span class="p" data-group-id="0493537178-4">)</span><span class="w">
</span><span class="k" data-group-id="0493537178-2">end</span></code></pre><p>It gets all posts and renders the &quot;index.html&quot; template. The template can be found in <code class="inline">lib/hello_web/templates/page/index.html.heex</code>.</p><p>The test looks like this:</p><pre><code class="makeup elixir" translate="no"><span class="n">describe</span><span class="w"> </span><span class="s">&quot;index&quot;</span><span class="w"> </span><span class="k" data-group-id="5354602058-1">do</span><span class="w">
  </span><span class="n">test</span><span class="w"> </span><span class="s">&quot;lists all posts&quot;</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="5354602058-2">%{</span><span class="ss">conn</span><span class="p">:</span><span class="w"> </span><span class="n">conn</span><span class="p" data-group-id="5354602058-2">}</span><span class="w"> </span><span class="k" data-group-id="5354602058-3">do</span><span class="w">
    </span><span class="n">conn</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">get</span><span class="p" data-group-id="5354602058-4">(</span><span class="n">conn</span><span class="p">,</span><span class="w"> </span><span class="sx">~p&quot;/posts&quot;</span><span class="p" data-group-id="5354602058-4">)</span><span class="w">
    </span><span class="n">assert</span><span class="w"> </span><span class="n">html_response</span><span class="p" data-group-id="5354602058-5">(</span><span class="n">conn</span><span class="p">,</span><span class="w"> </span><span class="mi">200</span><span class="p" data-group-id="5354602058-5">)</span><span class="w"> </span><span class="o">=~</span><span class="w"> </span><span class="s">&quot;Listing Posts&quot;</span><span class="w">
  </span><span class="k" data-group-id="5354602058-3">end</span><span class="w">
</span><span class="k" data-group-id="5354602058-1">end</span></code></pre><p>The test for the <code class="inline">index</code> page is quite straight-forward. It uses the <code class="inline">get/2</code> helper to make a request to the <code class="inline">&quot;/posts&quot;</code> page, which is verified against our router in the test thanks to <code class="inline">~p</code>, then we assert we got a successful HTML response and match on its contents.</p><h3 id="the-create-action" class="section-heading">
  <a href="#the-create-action" class="hover-link">
    <i class="ri-link-m" aria-hidden="true"></i>
  </a>
  <span class="text">The create action</span>
</h3>
<p>The next test we will look at is the one for the <code class="inline">create</code> action. The <code class="inline">create</code> action implementation is this:</p><pre><code class="makeup elixir" translate="no"><span class="kd">def</span><span class="w"> </span><span class="nf">create</span><span class="p" data-group-id="8413475282-1">(</span><span class="n">conn</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="8413475282-2">%{</span><span class="s">&quot;post&quot;</span><span class="w"> </span><span class="p">=&gt;</span><span class="w"> </span><span class="n">post_params</span><span class="p" data-group-id="8413475282-2">}</span><span class="p" data-group-id="8413475282-1">)</span><span class="w"> </span><span class="k" data-group-id="8413475282-3">do</span><span class="w">
  </span><span class="k">case</span><span class="w"> </span><span class="nc">Blog</span><span class="o">.</span><span class="n">create_post</span><span class="p" data-group-id="8413475282-4">(</span><span class="n">post_params</span><span class="p" data-group-id="8413475282-4">)</span><span class="w"> </span><span class="k" data-group-id="8413475282-5">do</span><span class="w">
    </span><span class="p" data-group-id="8413475282-6">{</span><span class="ss">:ok</span><span class="p">,</span><span class="w"> </span><span class="n">post</span><span class="p" data-group-id="8413475282-6">}</span><span class="w"> </span><span class="o">-&gt;</span><span class="w">
      </span><span class="n">conn</span><span class="w">
      </span><span class="o">|&gt;</span><span class="w"> </span><span class="n">put_flash</span><span class="p" data-group-id="8413475282-7">(</span><span class="ss">:info</span><span class="p">,</span><span class="w"> </span><span class="s">&quot;Post created successfully.&quot;</span><span class="p" data-group-id="8413475282-7">)</span><span class="w">
      </span><span class="o">|&gt;</span><span class="w"> </span><span class="n">redirect</span><span class="p" data-group-id="8413475282-8">(</span><span class="ss">to</span><span class="p">:</span><span class="w"> </span><span class="sx">~p&quot;/posts/</span><span class="si" data-group-id="8413475282-9">#{</span><span class="n">post</span><span class="si" data-group-id="8413475282-9">}</span><span class="sx">&quot;</span><span class="p" data-group-id="8413475282-8">)</span><span class="w">

    </span><span class="p" data-group-id="8413475282-10">{</span><span class="ss">:error</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="8413475282-11">%</span><span class="nc" data-group-id="8413475282-11">Ecto.Changeset</span><span class="p" data-group-id="8413475282-11">{</span><span class="p" data-group-id="8413475282-11">}</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">changeset</span><span class="p" data-group-id="8413475282-10">}</span><span class="w"> </span><span class="o">-&gt;</span><span class="w">
      </span><span class="n">render</span><span class="p" data-group-id="8413475282-12">(</span><span class="n">conn</span><span class="p">,</span><span class="w"> </span><span class="ss">:new</span><span class="p">,</span><span class="w"> </span><span class="ss">changeset</span><span class="p">:</span><span class="w"> </span><span class="n">changeset</span><span class="p" data-group-id="8413475282-12">)</span><span class="w">
  </span><span class="k" data-group-id="8413475282-5">end</span><span class="w">
</span><span class="k" data-group-id="8413475282-3">end</span></code></pre><p>Since there are two possible outcomes for the <code class="inline">create</code>, we will have at least two tests:</p><pre><code class="makeup elixir" translate="no"><span class="n">describe</span><span class="w"> </span><span class="s">&quot;create post&quot;</span><span class="w"> </span><span class="k" data-group-id="1183514676-1">do</span><span class="w">
  </span><span class="n">test</span><span class="w"> </span><span class="s">&quot;redirects to show when data is valid&quot;</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="1183514676-2">%{</span><span class="ss">conn</span><span class="p">:</span><span class="w"> </span><span class="n">conn</span><span class="p" data-group-id="1183514676-2">}</span><span class="w"> </span><span class="k" data-group-id="1183514676-3">do</span><span class="w">
    </span><span class="n">conn</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">post</span><span class="p" data-group-id="1183514676-4">(</span><span class="n">conn</span><span class="p">,</span><span class="w"> </span><span class="sx">~p&quot;/posts&quot;</span><span class="p">,</span><span class="w"> </span><span class="ss">post</span><span class="p">:</span><span class="w"> </span><span class="na">@create_attrs</span><span class="p" data-group-id="1183514676-4">)</span><span class="w">

    </span><span class="n">assert</span><span class="w"> </span><span class="p" data-group-id="1183514676-5">%{</span><span class="ss">id</span><span class="p">:</span><span class="w"> </span><span class="n">id</span><span class="p" data-group-id="1183514676-5">}</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">redirected_params</span><span class="p" data-group-id="1183514676-6">(</span><span class="n">conn</span><span class="p" data-group-id="1183514676-6">)</span><span class="w">
    </span><span class="n">assert</span><span class="w"> </span><span class="n">redirected_to</span><span class="p" data-group-id="1183514676-7">(</span><span class="n">conn</span><span class="p" data-group-id="1183514676-7">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="sx">~p&quot;/posts/</span><span class="si" data-group-id="1183514676-8">#{</span><span class="n">id</span><span class="si" data-group-id="1183514676-8">}</span><span class="sx">&quot;</span><span class="w">

    </span><span class="n">conn</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">get</span><span class="p" data-group-id="1183514676-9">(</span><span class="n">conn</span><span class="p">,</span><span class="w"> </span><span class="sx">~p&quot;/posts/</span><span class="si" data-group-id="1183514676-10">#{</span><span class="n">id</span><span class="si" data-group-id="1183514676-10">}</span><span class="sx">&quot;</span><span class="p" data-group-id="1183514676-9">)</span><span class="w">
    </span><span class="n">assert</span><span class="w"> </span><span class="n">html_response</span><span class="p" data-group-id="1183514676-11">(</span><span class="n">conn</span><span class="p">,</span><span class="w"> </span><span class="mi">200</span><span class="p" data-group-id="1183514676-11">)</span><span class="w"> </span><span class="o">=~</span><span class="w"> </span><span class="s">&quot;Post </span><span class="si" data-group-id="1183514676-12">#{</span><span class="n">id</span><span class="si" data-group-id="1183514676-12">}</span><span class="s">&quot;</span><span class="w">
  </span><span class="k" data-group-id="1183514676-3">end</span><span class="w">

  </span><span class="n">test</span><span class="w"> </span><span class="s">&quot;renders errors when data is invalid&quot;</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="1183514676-13">%{</span><span class="ss">conn</span><span class="p">:</span><span class="w"> </span><span class="n">conn</span><span class="p" data-group-id="1183514676-13">}</span><span class="w"> </span><span class="k" data-group-id="1183514676-14">do</span><span class="w">
    </span><span class="n">conn</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">post</span><span class="p" data-group-id="1183514676-15">(</span><span class="n">conn</span><span class="p">,</span><span class="w"> </span><span class="sx">~p&quot;/posts&quot;</span><span class="p">,</span><span class="w"> </span><span class="ss">post</span><span class="p">:</span><span class="w"> </span><span class="na">@invalid_attrs</span><span class="p" data-group-id="1183514676-15">)</span><span class="w">
    </span><span class="n">assert</span><span class="w"> </span><span class="n">html_response</span><span class="p" data-group-id="1183514676-16">(</span><span class="n">conn</span><span class="p">,</span><span class="w"> </span><span class="mi">200</span><span class="p" data-group-id="1183514676-16">)</span><span class="w"> </span><span class="o">=~</span><span class="w"> </span><span class="s">&quot;New Post&quot;</span><span class="w">
  </span><span class="k" data-group-id="1183514676-14">end</span><span class="w">
</span><span class="k" data-group-id="1183514676-1">end</span></code></pre><p>The first test starts with a <code class="inline">post/2</code> request. That's because once the form in the <code class="inline">/posts/new</code> page is submitted, it becomes a POST request to the create action. Because we have supplied valid attributes, the post should have been successfully created and we should have redirected to the show action of the new post. This new page will have an address like <code class="inline">/posts/ID</code>, where ID is the identifier of the post in the database.</p><p>We then use <code class="inline">redirected_params(conn)</code> to get the ID of the post and then match that we indeed redirected to the show action. Finally, we do request a <code class="inline">get</code> request to the page we redirected to, allowing us to verify that the post was indeed created.</p><p>For the second test, we simply test the failure scenario. If any invalid attribute is given, it should re-render the &quot;New Post&quot; page.</p><p>One common question is: how many failure scenarios do you test at the controller level? For example, in the <a href="testing_contexts.html">Testing Contexts</a> guide, we introduced a validation to the <code class="inline">title</code> field of the post:</p><pre><code class="makeup elixir" translate="no"><span class="kd">def</span><span class="w"> </span><span class="nf">changeset</span><span class="p" data-group-id="3287278754-1">(</span><span class="n">post</span><span class="p">,</span><span class="w"> </span><span class="n">attrs</span><span class="p" data-group-id="3287278754-1">)</span><span class="w"> </span><span class="k" data-group-id="3287278754-2">do</span><span class="w">
  </span><span class="n">post</span><span class="w">
  </span><span class="o">|&gt;</span><span class="w"> </span><span class="n">cast</span><span class="p" data-group-id="3287278754-3">(</span><span class="n">attrs</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="3287278754-4">[</span><span class="ss">:title</span><span class="p">,</span><span class="w"> </span><span class="ss">:body</span><span class="p" data-group-id="3287278754-4">]</span><span class="p" data-group-id="3287278754-3">)</span><span class="w">
  </span><span class="o">|&gt;</span><span class="w"> </span><span class="n">validate_required</span><span class="p" data-group-id="3287278754-5">(</span><span class="p" data-group-id="3287278754-6">[</span><span class="ss">:title</span><span class="p">,</span><span class="w"> </span><span class="ss">:body</span><span class="p" data-group-id="3287278754-6">]</span><span class="p" data-group-id="3287278754-5">)</span><span class="w">
  </span><span class="o">|&gt;</span><span class="w"> </span><span class="n">validate_length</span><span class="p" data-group-id="3287278754-7">(</span><span class="ss">:title</span><span class="p">,</span><span class="w"> </span><span class="ss">min</span><span class="p">:</span><span class="w"> </span><span class="mi">2</span><span class="p" data-group-id="3287278754-7">)</span><span class="w">
</span><span class="k" data-group-id="3287278754-2">end</span></code></pre><p>In other words, creating a post can fail for the following reasons:</p><ul><li>the title is missing</li><li>the body is missing</li><li>the title is present but is less than 2 characters</li></ul><p>Should we test all of these possible outcomes in our controller tests?</p><p>The answer is no. All of the different rules and outcomes should be verified in your context and schema tests. The controller works as the integration layer. In the controller tests we simply want to verify, in broad strokes, that we handle both success and failure scenarios.</p><p>The test for <code class="inline">update</code> follows a similar structure as <code class="inline">create</code>, so let's skip to the <code class="inline">delete</code> test.</p><h3 id="the-delete-action" class="section-heading">
  <a href="#the-delete-action" class="hover-link">
    <i class="ri-link-m" aria-hidden="true"></i>
  </a>
  <span class="text">The delete action</span>
</h3>
<p>The <code class="inline">delete</code> action looks like this:</p><pre><code class="makeup elixir" translate="no"><span class="kd">def</span><span class="w"> </span><span class="nf">delete</span><span class="p" data-group-id="5381160520-1">(</span><span class="n">conn</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="5381160520-2">%{</span><span class="s">&quot;id&quot;</span><span class="w"> </span><span class="p">=&gt;</span><span class="w"> </span><span class="n">id</span><span class="p" data-group-id="5381160520-2">}</span><span class="p" data-group-id="5381160520-1">)</span><span class="w"> </span><span class="k" data-group-id="5381160520-3">do</span><span class="w">
  </span><span class="n">post</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nc">Blog</span><span class="o">.</span><span class="n">get_post!</span><span class="p" data-group-id="5381160520-4">(</span><span class="n">id</span><span class="p" data-group-id="5381160520-4">)</span><span class="w">
  </span><span class="p" data-group-id="5381160520-5">{</span><span class="ss">:ok</span><span class="p">,</span><span class="w"> </span><span class="c">_post</span><span class="p" data-group-id="5381160520-5">}</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nc">Blog</span><span class="o">.</span><span class="n">delete_post</span><span class="p" data-group-id="5381160520-6">(</span><span class="n">post</span><span class="p" data-group-id="5381160520-6">)</span><span class="w">

  </span><span class="n">conn</span><span class="w">
  </span><span class="o">|&gt;</span><span class="w"> </span><span class="n">put_flash</span><span class="p" data-group-id="5381160520-7">(</span><span class="ss">:info</span><span class="p">,</span><span class="w"> </span><span class="s">&quot;Post deleted successfully.&quot;</span><span class="p" data-group-id="5381160520-7">)</span><span class="w">
  </span><span class="o">|&gt;</span><span class="w"> </span><span class="n">redirect</span><span class="p" data-group-id="5381160520-8">(</span><span class="ss">to</span><span class="p">:</span><span class="w"> </span><span class="sx">~p&quot;/posts&quot;</span><span class="p" data-group-id="5381160520-8">)</span><span class="w">
</span><span class="k" data-group-id="5381160520-3">end</span></code></pre><p>The test is written like this:</p><pre><code class="makeup elixir" translate="no"><span class="w">  </span><span class="n">describe</span><span class="w"> </span><span class="s">&quot;delete post&quot;</span><span class="w"> </span><span class="k" data-group-id="6186121506-1">do</span><span class="w">
    </span><span class="n">setup</span><span class="w"> </span><span class="p" data-group-id="6186121506-2">[</span><span class="ss">:create_post</span><span class="p" data-group-id="6186121506-2">]</span><span class="w">

    </span><span class="n">test</span><span class="w"> </span><span class="s">&quot;deletes chosen post&quot;</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="6186121506-3">%{</span><span class="ss">conn</span><span class="p">:</span><span class="w"> </span><span class="n">conn</span><span class="p">,</span><span class="w"> </span><span class="ss">post</span><span class="p">:</span><span class="w"> </span><span class="n">post</span><span class="p" data-group-id="6186121506-3">}</span><span class="w"> </span><span class="k" data-group-id="6186121506-4">do</span><span class="w">
      </span><span class="n">conn</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">delete</span><span class="p" data-group-id="6186121506-5">(</span><span class="n">conn</span><span class="p">,</span><span class="w"> </span><span class="sx">~p&quot;/posts/</span><span class="si" data-group-id="6186121506-6">#{</span><span class="n">post</span><span class="si" data-group-id="6186121506-6">}</span><span class="sx">&quot;</span><span class="p" data-group-id="6186121506-5">)</span><span class="w">
      </span><span class="n">assert</span><span class="w"> </span><span class="n">redirected_to</span><span class="p" data-group-id="6186121506-7">(</span><span class="n">conn</span><span class="p" data-group-id="6186121506-7">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="sx">~p&quot;/posts&quot;</span><span class="w">

      </span><span class="n">assert_error_sent</span><span class="w"> </span><span class="mi">404</span><span class="p">,</span><span class="w"> </span><span class="k" data-group-id="6186121506-8">fn</span><span class="w"> </span><span class="o">-&gt;</span><span class="w">
        </span><span class="n">get</span><span class="p" data-group-id="6186121506-9">(</span><span class="n">conn</span><span class="p">,</span><span class="w"> </span><span class="sx">~p&quot;/posts/</span><span class="si" data-group-id="6186121506-10">#{</span><span class="n">post</span><span class="si" data-group-id="6186121506-10">}</span><span class="sx">&quot;</span><span class="p" data-group-id="6186121506-9">)</span><span class="w">
      </span><span class="k" data-group-id="6186121506-8">end</span><span class="w">
    </span><span class="k" data-group-id="6186121506-4">end</span><span class="w">
  </span><span class="k" data-group-id="6186121506-1">end</span><span class="w">

  </span><span class="kd">defp</span><span class="w"> </span><span class="nf">create_post</span><span class="p" data-group-id="6186121506-11">(</span><span class="bp">_</span><span class="p" data-group-id="6186121506-11">)</span><span class="w"> </span><span class="k" data-group-id="6186121506-12">do</span><span class="w">
    </span><span class="n">post</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">post_fixture</span><span class="p" data-group-id="6186121506-13">(</span><span class="p" data-group-id="6186121506-13">)</span><span class="w">
    </span><span class="p" data-group-id="6186121506-14">%{</span><span class="ss">post</span><span class="p">:</span><span class="w"> </span><span class="n">post</span><span class="p" data-group-id="6186121506-14">}</span><span class="w">
  </span><span class="k" data-group-id="6186121506-12">end</span></code></pre><p>First of all, <code class="inline">setup</code> is used to declare that the <code class="inline">create_post</code> function should run before every test in this <code class="inline">describe</code> block. The <code class="inline">create_post</code> function simply creates a post and stores it in the test metadata. This allows us to, in the first line of the test, match on both the post and the connection:</p><pre><code class="makeup elixir" translate="no"><span class="n">test</span><span class="w"> </span><span class="s">&quot;deletes chosen post&quot;</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="4361169614-1">%{</span><span class="ss">conn</span><span class="p">:</span><span class="w"> </span><span class="n">conn</span><span class="p">,</span><span class="w"> </span><span class="ss">post</span><span class="p">:</span><span class="w"> </span><span class="n">post</span><span class="p" data-group-id="4361169614-1">}</span><span class="w"> </span><span class="k" data-group-id="4361169614-2">do</span></code></pre><p>The test uses <code class="inline">delete/2</code> to delete the post and then asserts that we redirected to the index page. Finally, we check that it is no longer possible to access the show page of the deleted post:</p><pre><code class="makeup elixir" translate="no"><span class="n">assert_error_sent</span><span class="w"> </span><span class="mi">404</span><span class="p">,</span><span class="w"> </span><span class="k" data-group-id="3648126759-1">fn</span><span class="w"> </span><span class="o">-&gt;</span><span class="w">
  </span><span class="n">get</span><span class="p" data-group-id="3648126759-2">(</span><span class="n">conn</span><span class="p">,</span><span class="w"> </span><span class="sx">~p&quot;/posts/</span><span class="si" data-group-id="3648126759-3">#{</span><span class="n">post</span><span class="si" data-group-id="3648126759-3">}</span><span class="sx">&quot;</span><span class="p" data-group-id="3648126759-2">)</span><span class="w">
</span><span class="k" data-group-id="3648126759-1">end</span></code></pre><p><code class="inline">assert_error_sent</code> is a testing helper provided by <a href="Phoenix.ConnTest.xhtml"><code class="inline">Phoenix.ConnTest</code></a>. In this case, it verifies that:</p><ol><li>An exception was raised</li><li>The exception has a status code equivalent to 404 (which stands for Not Found)</li></ol><p>This pretty much mimics how Phoenix handles exceptions. For example, when we access <code class="inline">/posts/12345</code> where <code class="inline">12345</code> is an ID that does not exist, we will invoke our <code class="inline">show</code> action:</p><pre><code class="makeup elixir" translate="no"><span class="kd">def</span><span class="w"> </span><span class="nf">show</span><span class="p" data-group-id="2031708961-1">(</span><span class="n">conn</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="2031708961-2">%{</span><span class="s">&quot;id&quot;</span><span class="w"> </span><span class="p">=&gt;</span><span class="w"> </span><span class="n">id</span><span class="p" data-group-id="2031708961-2">}</span><span class="p" data-group-id="2031708961-1">)</span><span class="w"> </span><span class="k" data-group-id="2031708961-3">do</span><span class="w">
  </span><span class="n">post</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nc">Blog</span><span class="o">.</span><span class="n">get_post!</span><span class="p" data-group-id="2031708961-4">(</span><span class="n">id</span><span class="p" data-group-id="2031708961-4">)</span><span class="w">
  </span><span class="n">render</span><span class="p" data-group-id="2031708961-5">(</span><span class="n">conn</span><span class="p">,</span><span class="w"> </span><span class="ss">:show</span><span class="p">,</span><span class="w"> </span><span class="ss">post</span><span class="p">:</span><span class="w"> </span><span class="n">post</span><span class="p" data-group-id="2031708961-5">)</span><span class="w">
</span><span class="k" data-group-id="2031708961-3">end</span></code></pre><p>When an unknown post ID is given to <code class="inline">Blog.get_post!/1</code>, it raises an <code class="inline">Ecto.NotFoundError</code>. If your application raises any exception during a web request, Phoenix translates those requests into proper HTTP response codes. In this case, 404.</p><p>We could, for example, have written this test as:</p><pre><code class="makeup elixir" translate="no"><span class="n">assert_raise</span><span class="w"> </span><span class="nc">Ecto.NotFoundError</span><span class="p">,</span><span class="w"> </span><span class="k" data-group-id="3959035884-1">fn</span><span class="w"> </span><span class="o">-&gt;</span><span class="w">
  </span><span class="n">get</span><span class="p" data-group-id="3959035884-2">(</span><span class="n">conn</span><span class="p">,</span><span class="w"> </span><span class="sx">~p&quot;/posts/</span><span class="si" data-group-id="3959035884-3">#{</span><span class="n">post</span><span class="si" data-group-id="3959035884-3">}</span><span class="sx">&quot;</span><span class="p" data-group-id="3959035884-2">)</span><span class="w">
</span><span class="k" data-group-id="3959035884-1">end</span></code></pre><p>However, you may prefer the implementation Phoenix generates by default as it ignores the specific details of the failure, and instead verifies what the browser would actually receive.</p><p>The tests for <code class="inline">new</code>, <code class="inline">edit</code>, and <code class="inline">show</code> actions are simpler variations of the tests we have seen so far. You can check the action implementation and their respective tests yourself. Now we are ready to move to JSON controller tests.</p><h2 id="json-controller-tests" class="section-heading">
  <a href="#json-controller-tests" class="hover-link">
    <i class="ri-link-m" aria-hidden="true"></i>
  </a>
  <span class="text">JSON controller tests</span>
</h2>
<p>So far we have been working with a generated HTML resource. However, let's take a look at how our tests look like when we generate a JSON resource.</p><p>First of all, run this command:</p><pre><code class="makeup console" translate="no"><span class="gp unselectable">$ </span><span class="">mix phx.gen.json News Article articles title body
</span></code></pre><p>We chose a very similar concept to the Blog context &lt;-&gt; Post schema, except we are using a different name, so we can study these concepts in isolation.</p><p>After you run the command above, do not forget to follow the final steps output by the generator. Once all is done, we should run <a href="https://hexdocs.pm/mix/Mix.Tasks.Test.html"><code class="inline">mix test</code></a> and now have 35 passing tests:</p><pre><code class="makeup console" translate="no"><span class="gp unselectable">$ </span><span class="">mix test
</span><span class="">................
</span><span class="">
</span><span class="">Finished in 0.6 seconds
</span><span class="">35 tests, 0 failures
</span><span class="">
</span><span class="">Randomized with seed 618478
</span></code></pre><p>You may have noticed that this time the scaffold controller has generated fewer tests. Previously it generated 16 (we went from 5 to 21) and now it generated 14 (we went from 21 to 35). That's because JSON APIs do not need to expose the <code class="inline">new</code> and <code class="inline">edit</code> actions. We can see this is the case in the resource we have added to the router at the end of the <a href="Mix.Tasks.Phx.Gen.Json.xhtml"><code class="inline">mix phx.gen.json</code></a> command:</p><pre><code class="makeup elixir" translate="no"><span class="n">resources</span><span class="w"> </span><span class="s">&quot;/articles&quot;</span><span class="p">,</span><span class="w"> </span><span class="nc">ArticleController</span><span class="p">,</span><span class="w"> </span><span class="ss">except</span><span class="p">:</span><span class="w"> </span><span class="p" data-group-id="2721185630-1">[</span><span class="ss">:new</span><span class="p">,</span><span class="w"> </span><span class="ss">:edit</span><span class="p" data-group-id="2721185630-1">]</span></code></pre><p><code class="inline">new</code> and <code class="inline">edit</code> are only necessary for HTML because they basically exist to assist users in creating and updating resources. Besides having less actions, we will notice the controller and view tests and implementations for JSON are drastically different from the HTML ones.</p><p>The only thing that is pretty much the same between HTML and JSON is the contexts and the schema, which, once you think about it, it makes total sense. After all, your business logic should remain the same, regardless if you are exposing it as HTML or JSON.</p><p>With the differences in hand, let's take a look at the controller tests.</p><h3 id="the-index-action-1" class="section-heading">
  <a href="#the-index-action-1" class="hover-link">
    <i class="ri-link-m" aria-hidden="true"></i>
  </a>
  <span class="text">The index action</span>
</h3>
<p>Open up <code class="inline">test/hello_web/controllers/article_controller_test.exs</code>. The initial structure is quite similar to <code class="inline">post_controller_test.exs</code>. So let's take a look at the tests for the <code class="inline">index</code> action. The <code class="inline">index</code> action itself is implemented in <code class="inline">lib/hello_web/controllers/article_controller.ex</code> like this:</p><pre><code class="makeup elixir" translate="no"><span class="kd">def</span><span class="w"> </span><span class="nf">index</span><span class="p" data-group-id="4039391860-1">(</span><span class="n">conn</span><span class="p">,</span><span class="w"> </span><span class="c">_params</span><span class="p" data-group-id="4039391860-1">)</span><span class="w"> </span><span class="k" data-group-id="4039391860-2">do</span><span class="w">
  </span><span class="n">articles</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nc">News</span><span class="o">.</span><span class="n">list_articles</span><span class="p" data-group-id="4039391860-3">(</span><span class="p" data-group-id="4039391860-3">)</span><span class="w">
  </span><span class="n">render</span><span class="p" data-group-id="4039391860-4">(</span><span class="n">conn</span><span class="p">,</span><span class="w"> </span><span class="ss">:index</span><span class="p">,</span><span class="w"> </span><span class="ss">articles</span><span class="p">:</span><span class="w"> </span><span class="n">articles</span><span class="p" data-group-id="4039391860-4">)</span><span class="w">
</span><span class="k" data-group-id="4039391860-2">end</span></code></pre><p>The action gets all articles and renders the index template. Since we are talking about JSON, we don't have a <code class="inline">index.json.heex</code> template. Instead, the code that converts <code class="inline">articles</code> into JSON can be found directly in the ArticleJSON module, defined at <code class="inline">lib/hello_web/controllers/article_json.ex</code> like this:</p><pre><code class="makeup elixir" translate="no"><span class="kd">defmodule</span><span class="w"> </span><span class="nc">HelloWeb.ArticleJSON</span><span class="w"> </span><span class="k" data-group-id="7638540231-1">do</span><span class="w">
  </span><span class="kn">alias</span><span class="w"> </span><span class="nc">Hello.News.Article</span><span class="w">

  </span><span class="kd">def</span><span class="w"> </span><span class="nf">index</span><span class="p" data-group-id="7638540231-2">(</span><span class="p" data-group-id="7638540231-3">%{</span><span class="ss">articles</span><span class="p">:</span><span class="w"> </span><span class="n">articles</span><span class="p" data-group-id="7638540231-3">}</span><span class="p" data-group-id="7638540231-2">)</span><span class="w"> </span><span class="k" data-group-id="7638540231-4">do</span><span class="w">
    </span><span class="p" data-group-id="7638540231-5">%{</span><span class="ss">data</span><span class="p">:</span><span class="w"> </span><span class="k">for</span><span class="p" data-group-id="7638540231-6">(</span><span class="n">article</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">articles</span><span class="p">,</span><span class="w"> </span><span class="ss">do</span><span class="p">:</span><span class="w"> </span><span class="n">data</span><span class="p" data-group-id="7638540231-7">(</span><span class="n">article</span><span class="p" data-group-id="7638540231-7">)</span><span class="p" data-group-id="7638540231-6">)</span><span class="p" data-group-id="7638540231-5">}</span><span class="w">
  </span><span class="k" data-group-id="7638540231-4">end</span><span class="w">

  </span><span class="kd">def</span><span class="w"> </span><span class="nf">show</span><span class="p" data-group-id="7638540231-8">(</span><span class="p" data-group-id="7638540231-9">%{</span><span class="ss">article</span><span class="p">:</span><span class="w"> </span><span class="n">article</span><span class="p" data-group-id="7638540231-9">}</span><span class="p" data-group-id="7638540231-8">)</span><span class="w"> </span><span class="k" data-group-id="7638540231-10">do</span><span class="w">
    </span><span class="p" data-group-id="7638540231-11">%{</span><span class="ss">data</span><span class="p">:</span><span class="w"> </span><span class="n">data</span><span class="p" data-group-id="7638540231-12">(</span><span class="n">article</span><span class="p" data-group-id="7638540231-12">)</span><span class="p" data-group-id="7638540231-11">}</span><span class="w">
  </span><span class="k" data-group-id="7638540231-10">end</span><span class="w">

  </span><span class="kd">defp</span><span class="w"> </span><span class="nf">data</span><span class="p" data-group-id="7638540231-13">(</span><span class="p" data-group-id="7638540231-14">%</span><span class="nc" data-group-id="7638540231-14">Article</span><span class="p" data-group-id="7638540231-14">{</span><span class="p" data-group-id="7638540231-14">}</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">article</span><span class="p" data-group-id="7638540231-13">)</span><span class="w"> </span><span class="k" data-group-id="7638540231-15">do</span><span class="w">
    </span><span class="p" data-group-id="7638540231-16">%{</span><span class="w">
      </span><span class="ss">id</span><span class="p">:</span><span class="w"> </span><span class="n">article</span><span class="o">.</span><span class="n">id</span><span class="p">,</span><span class="w">
      </span><span class="ss">title</span><span class="p">:</span><span class="w"> </span><span class="n">article</span><span class="o">.</span><span class="n">title</span><span class="p">,</span><span class="w">
      </span><span class="ss">body</span><span class="p">:</span><span class="w"> </span><span class="n">article</span><span class="o">.</span><span class="n">body</span><span class="w">
    </span><span class="p" data-group-id="7638540231-16">}</span><span class="w">
  </span><span class="k" data-group-id="7638540231-15">end</span><span class="w">
</span><span class="k" data-group-id="7638540231-1">end</span></code></pre><p>Since a controller render is a regular function call, we don't need any extra features to render JSON. We simply define functions for our <code class="inline">index</code> and <code class="inline">show</code> actions that return the map of JSON for articles.</p><p>Let's take a look at the test for the <code class="inline">index</code> action then:</p><pre><code class="makeup elixir" translate="no"><span class="n">describe</span><span class="w"> </span><span class="s">&quot;index&quot;</span><span class="w"> </span><span class="k" data-group-id="2446928192-1">do</span><span class="w">
  </span><span class="n">test</span><span class="w"> </span><span class="s">&quot;lists all articles&quot;</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="2446928192-2">%{</span><span class="ss">conn</span><span class="p">:</span><span class="w"> </span><span class="n">conn</span><span class="p" data-group-id="2446928192-2">}</span><span class="w"> </span><span class="k" data-group-id="2446928192-3">do</span><span class="w">
    </span><span class="n">conn</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">get</span><span class="p" data-group-id="2446928192-4">(</span><span class="n">conn</span><span class="p">,</span><span class="w"> </span><span class="sx">~p&quot;/api/articles&quot;</span><span class="p" data-group-id="2446928192-4">)</span><span class="w">
    </span><span class="n">assert</span><span class="w"> </span><span class="n">json_response</span><span class="p" data-group-id="2446928192-5">(</span><span class="n">conn</span><span class="p">,</span><span class="w"> </span><span class="mi">200</span><span class="p" data-group-id="2446928192-5">)</span><span class="p" data-group-id="2446928192-6">[</span><span class="s">&quot;data&quot;</span><span class="p" data-group-id="2446928192-6">]</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="p" data-group-id="2446928192-7">[</span><span class="p" data-group-id="2446928192-7">]</span><span class="w">
  </span><span class="k" data-group-id="2446928192-3">end</span><span class="w">
</span><span class="k" data-group-id="2446928192-1">end</span></code></pre><p>It simply accesses the <code class="inline">index</code> path, asserts we got a JSON response with status 200 and that it contains a &quot;data&quot; key with an empty list, as we have no articles to return.</p><p>That was quite boring. Let's look at something more interesting.</p><h3 id="the-create-action-1" class="section-heading">
  <a href="#the-create-action-1" class="hover-link">
    <i class="ri-link-m" aria-hidden="true"></i>
  </a>
  <span class="text">The <code class="inline">create</code> action</span>
</h3>
<p>The <code class="inline">create</code> action is defined like this:</p><pre><code class="makeup elixir" translate="no"><span class="kd">def</span><span class="w"> </span><span class="nf">create</span><span class="p" data-group-id="9068650603-1">(</span><span class="n">conn</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="9068650603-2">%{</span><span class="s">&quot;article&quot;</span><span class="w"> </span><span class="p">=&gt;</span><span class="w"> </span><span class="n">article_params</span><span class="p" data-group-id="9068650603-2">}</span><span class="p" data-group-id="9068650603-1">)</span><span class="w"> </span><span class="k" data-group-id="9068650603-3">do</span><span class="w">
  </span><span class="k">with</span><span class="w"> </span><span class="p" data-group-id="9068650603-4">{</span><span class="ss">:ok</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="9068650603-5">%</span><span class="nc" data-group-id="9068650603-5">Article</span><span class="p" data-group-id="9068650603-5">{</span><span class="p" data-group-id="9068650603-5">}</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">article</span><span class="p" data-group-id="9068650603-4">}</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nc">News</span><span class="o">.</span><span class="n">create_article</span><span class="p" data-group-id="9068650603-6">(</span><span class="n">article_params</span><span class="p" data-group-id="9068650603-6">)</span><span class="w"> </span><span class="k" data-group-id="9068650603-7">do</span><span class="w">
    </span><span class="n">conn</span><span class="w">
    </span><span class="o">|&gt;</span><span class="w"> </span><span class="n">put_status</span><span class="p" data-group-id="9068650603-8">(</span><span class="ss">:created</span><span class="p" data-group-id="9068650603-8">)</span><span class="w">
    </span><span class="o">|&gt;</span><span class="w"> </span><span class="n">put_resp_header</span><span class="p" data-group-id="9068650603-9">(</span><span class="s">&quot;location&quot;</span><span class="p">,</span><span class="w"> </span><span class="sx">~p&quot;/api/articles/</span><span class="si" data-group-id="9068650603-10">#{</span><span class="n">article</span><span class="si" data-group-id="9068650603-10">}</span><span class="sx">&quot;</span><span class="p" data-group-id="9068650603-9">)</span><span class="w">
    </span><span class="o">|&gt;</span><span class="w"> </span><span class="n">render</span><span class="p" data-group-id="9068650603-11">(</span><span class="ss">:show</span><span class="p">,</span><span class="w"> </span><span class="ss">article</span><span class="p">:</span><span class="w"> </span><span class="n">article</span><span class="p" data-group-id="9068650603-11">)</span><span class="w">
  </span><span class="k" data-group-id="9068650603-7">end</span><span class="w">
</span><span class="k" data-group-id="9068650603-3">end</span></code></pre><p>As we can see, it checks if an article could be created. If so, it sets the status code to <code class="inline">:created</code> (which translates to 201), it sets a &quot;location&quot; header with the location of the article, and then renders &quot;show.json&quot; with the article.</p><p>This is precisely what the first test for the <code class="inline">create</code> action verifies:</p><pre><code class="makeup elixir" translate="no"><span class="n">describe</span><span class="w"> </span><span class="s">&quot;create article&quot;</span><span class="w"> </span><span class="k" data-group-id="3195691028-1">do</span><span class="w">
  </span><span class="n">test</span><span class="w"> </span><span class="s">&quot;renders article when data is valid&quot;</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="3195691028-2">%{</span><span class="ss">conn</span><span class="p">:</span><span class="w"> </span><span class="n">conn</span><span class="p" data-group-id="3195691028-2">}</span><span class="w"> </span><span class="k" data-group-id="3195691028-3">do</span><span class="w">
    </span><span class="n">conn</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">post</span><span class="p" data-group-id="3195691028-4">(</span><span class="n">conn</span><span class="p">,</span><span class="w"> </span><span class="sx">~p&quot;/articles&quot;</span><span class="p">,</span><span class="w"> </span><span class="ss">article</span><span class="p">:</span><span class="w"> </span><span class="na">@create_attrs</span><span class="p" data-group-id="3195691028-4">)</span><span class="w">
    </span><span class="n">assert</span><span class="w"> </span><span class="p" data-group-id="3195691028-5">%{</span><span class="s">&quot;id&quot;</span><span class="w"> </span><span class="p">=&gt;</span><span class="w"> </span><span class="n">id</span><span class="p" data-group-id="3195691028-5">}</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">json_response</span><span class="p" data-group-id="3195691028-6">(</span><span class="n">conn</span><span class="p">,</span><span class="w"> </span><span class="mi">201</span><span class="p" data-group-id="3195691028-6">)</span><span class="p" data-group-id="3195691028-7">[</span><span class="s">&quot;data&quot;</span><span class="p" data-group-id="3195691028-7">]</span><span class="w">

    </span><span class="n">conn</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">get</span><span class="p" data-group-id="3195691028-8">(</span><span class="n">conn</span><span class="p">,</span><span class="w"> </span><span class="sx">~p&quot;/api/articles/</span><span class="si" data-group-id="3195691028-9">#{</span><span class="n">id</span><span class="si" data-group-id="3195691028-9">}</span><span class="sx">&quot;</span><span class="p" data-group-id="3195691028-8">)</span><span class="w">

    </span><span class="n">assert</span><span class="w"> </span><span class="p" data-group-id="3195691028-10">%{</span><span class="w">
             </span><span class="s">&quot;id&quot;</span><span class="w"> </span><span class="p">=&gt;</span><span class="w"> </span><span class="o">^</span><span class="n">id</span><span class="p">,</span><span class="w">
             </span><span class="s">&quot;body&quot;</span><span class="w"> </span><span class="p">=&gt;</span><span class="w"> </span><span class="s">&quot;some body&quot;</span><span class="p">,</span><span class="w">
             </span><span class="s">&quot;title&quot;</span><span class="w"> </span><span class="p">=&gt;</span><span class="w"> </span><span class="s">&quot;some title&quot;</span><span class="w">
           </span><span class="p" data-group-id="3195691028-10">}</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">json_response</span><span class="p" data-group-id="3195691028-11">(</span><span class="n">conn</span><span class="p">,</span><span class="w"> </span><span class="mi">200</span><span class="p" data-group-id="3195691028-11">)</span><span class="p" data-group-id="3195691028-12">[</span><span class="s">&quot;data&quot;</span><span class="p" data-group-id="3195691028-12">]</span><span class="w">
  </span><span class="k" data-group-id="3195691028-3">end</span></code></pre><p>The test uses <code class="inline">post/2</code> to create a new article and then we verify that the article returned a JSON response, with status 201, and that it had a &quot;data&quot; key in it. We pattern match the &quot;data&quot; on <code class="inline">%{&quot;id&quot; =&gt; id}</code>, which allows us to extract the ID of the new article. Then we perform a <code class="inline">get/2</code> request on the <code class="inline">show</code> route and verify that the article was successfully created.</p><p>Inside <code class="inline">describe &quot;create article&quot;</code>, we will find another test, which handles the failure scenario. Can you spot the failure scenario in the <code class="inline">create</code> action? Let's recap it:</p><pre><code class="makeup elixir" translate="no"><span class="kd">def</span><span class="w"> </span><span class="nf">create</span><span class="p" data-group-id="6683503225-1">(</span><span class="n">conn</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="6683503225-2">%{</span><span class="s">&quot;article&quot;</span><span class="w"> </span><span class="p">=&gt;</span><span class="w"> </span><span class="n">article_params</span><span class="p" data-group-id="6683503225-2">}</span><span class="p" data-group-id="6683503225-1">)</span><span class="w"> </span><span class="k" data-group-id="6683503225-3">do</span><span class="w">
  </span><span class="k">with</span><span class="w"> </span><span class="p" data-group-id="6683503225-4">{</span><span class="ss">:ok</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="6683503225-5">%</span><span class="nc" data-group-id="6683503225-5">Article</span><span class="p" data-group-id="6683503225-5">{</span><span class="p" data-group-id="6683503225-5">}</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">article</span><span class="p" data-group-id="6683503225-4">}</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nc">News</span><span class="o">.</span><span class="n">create_article</span><span class="p" data-group-id="6683503225-6">(</span><span class="n">article_params</span><span class="p" data-group-id="6683503225-6">)</span><span class="w"> </span><span class="k" data-group-id="6683503225-7">do</span></code></pre><p>The <code class="inline">with</code> special form that ships as part of Elixir allows us to check explicitly for the happy paths. In this case, we are interested only in the scenarios where <code class="inline">News.create_article(article_params)</code> returns <code class="inline">{:ok, article}</code>, if it returns anything else, the other value will simply be returned directly and none of the contents inside the <code class="inline">do/end</code> block will be executed. In other words, if <code class="inline">News.create_article/1</code> returns <code class="inline">{:error, changeset}</code>, we will simply return <code class="inline">{:error, changeset}</code> from the action.</p><p>However, this introduces an issue. Our actions do not know how to handle the <code class="inline">{:error, changeset}</code> result by default. Luckily, we can teach Phoenix Controllers to handle it with the Action Fallback controller. At the top of <code class="inline">ArticleController</code>, you will find:</p><pre><code class="makeup elixir" translate="no"><span class="w">  </span><span class="n">action_fallback</span><span class="w"> </span><span class="nc">HelloWeb.FallbackController</span></code></pre><p>This line says: if any action does not return a <code class="inline">%Plug.Conn{}</code>, we want to invoke <code class="inline">FallbackController</code> with the result. You will find <code class="inline">HelloWeb.FallbackController</code> at <code class="inline">lib/hello_web/controllers/fallback_controller.ex</code> and it looks like this:</p><pre><code class="makeup elixir" translate="no"><span class="kd">defmodule</span><span class="w"> </span><span class="nc">HelloWeb.FallbackController</span><span class="w"> </span><span class="k" data-group-id="1237688006-1">do</span><span class="w">
  </span><span class="kn">use</span><span class="w"> </span><span class="nc">HelloWeb</span><span class="p">,</span><span class="w"> </span><span class="ss">:controller</span><span class="w">

  </span><span class="kd">def</span><span class="w"> </span><span class="nf">call</span><span class="p" data-group-id="1237688006-2">(</span><span class="n">conn</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="1237688006-3">{</span><span class="ss">:error</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="1237688006-4">%</span><span class="nc" data-group-id="1237688006-4">Ecto.Changeset</span><span class="p" data-group-id="1237688006-4">{</span><span class="p" data-group-id="1237688006-4">}</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">changeset</span><span class="p" data-group-id="1237688006-3">}</span><span class="p" data-group-id="1237688006-2">)</span><span class="w"> </span><span class="k" data-group-id="1237688006-5">do</span><span class="w">
    </span><span class="n">conn</span><span class="w">
    </span><span class="o">|&gt;</span><span class="w"> </span><span class="n">put_status</span><span class="p" data-group-id="1237688006-6">(</span><span class="ss">:unprocessable_entity</span><span class="p" data-group-id="1237688006-6">)</span><span class="w">
    </span><span class="o">|&gt;</span><span class="w"> </span><span class="n">put_view</span><span class="p" data-group-id="1237688006-7">(</span><span class="ss">json</span><span class="p">:</span><span class="w"> </span><span class="nc">HelloWeb.ChangesetJSON</span><span class="p" data-group-id="1237688006-7">)</span><span class="w">
    </span><span class="o">|&gt;</span><span class="w"> </span><span class="n">render</span><span class="p" data-group-id="1237688006-8">(</span><span class="ss">:error</span><span class="p">,</span><span class="w"> </span><span class="ss">changeset</span><span class="p">:</span><span class="w"> </span><span class="n">changeset</span><span class="p" data-group-id="1237688006-8">)</span><span class="w">
  </span><span class="k" data-group-id="1237688006-5">end</span><span class="w">

  </span><span class="kd">def</span><span class="w"> </span><span class="nf">call</span><span class="p" data-group-id="1237688006-9">(</span><span class="n">conn</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="1237688006-10">{</span><span class="ss">:error</span><span class="p">,</span><span class="w"> </span><span class="ss">:not_found</span><span class="p" data-group-id="1237688006-10">}</span><span class="p" data-group-id="1237688006-9">)</span><span class="w"> </span><span class="k" data-group-id="1237688006-11">do</span><span class="w">
    </span><span class="n">conn</span><span class="w">
    </span><span class="o">|&gt;</span><span class="w"> </span><span class="n">put_status</span><span class="p" data-group-id="1237688006-12">(</span><span class="ss">:not_found</span><span class="p" data-group-id="1237688006-12">)</span><span class="w">
    </span><span class="o">|&gt;</span><span class="w"> </span><span class="n">put_view</span><span class="p" data-group-id="1237688006-13">(</span><span class="ss">html</span><span class="p">:</span><span class="w"> </span><span class="nc">HelloWeb.ErrorHTML</span><span class="p">,</span><span class="w"> </span><span class="ss">json</span><span class="p">:</span><span class="w"> </span><span class="nc">HelloWeb.ErrorJSON</span><span class="p" data-group-id="1237688006-13">)</span><span class="w">
    </span><span class="o">|&gt;</span><span class="w"> </span><span class="n">render</span><span class="p" data-group-id="1237688006-14">(</span><span class="ss">:&quot;404&quot;</span><span class="p" data-group-id="1237688006-14">)</span><span class="w">
  </span><span class="k" data-group-id="1237688006-11">end</span><span class="w">
</span><span class="k" data-group-id="1237688006-1">end</span></code></pre><p>You can see how the first clause of the <code class="inline">call/2</code> function handles the <code class="inline">{:error, changeset}</code> case, setting the status code to unprocessable entity (422), and then rendering &quot;error.json&quot; from the changeset view with the failed changeset.</p><p>With this in mind, let's look at our second test for <code class="inline">create</code>:</p><pre><code class="makeup elixir" translate="no"><span class="n">test</span><span class="w"> </span><span class="s">&quot;renders errors when data is invalid&quot;</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="9147785125-1">%{</span><span class="ss">conn</span><span class="p">:</span><span class="w"> </span><span class="n">conn</span><span class="p" data-group-id="9147785125-1">}</span><span class="w"> </span><span class="k" data-group-id="9147785125-2">do</span><span class="w">
  </span><span class="n">conn</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">post</span><span class="p" data-group-id="9147785125-3">(</span><span class="n">conn</span><span class="p">,</span><span class="w"> </span><span class="sx">~p&quot;/api/articles&quot;</span><span class="p">,</span><span class="w"> </span><span class="ss">article</span><span class="p">:</span><span class="w"> </span><span class="na">@invalid_attrs</span><span class="p" data-group-id="9147785125-3">)</span><span class="w">
  </span><span class="n">assert</span><span class="w"> </span><span class="n">json_response</span><span class="p" data-group-id="9147785125-4">(</span><span class="n">conn</span><span class="p">,</span><span class="w"> </span><span class="mi">422</span><span class="p" data-group-id="9147785125-4">)</span><span class="p" data-group-id="9147785125-5">[</span><span class="s">&quot;errors&quot;</span><span class="p" data-group-id="9147785125-5">]</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="p" data-group-id="9147785125-6">%{</span><span class="p" data-group-id="9147785125-6">}</span><span class="w">
</span><span class="k" data-group-id="9147785125-2">end</span></code></pre><p>It simply posts to the <code class="inline">create</code> path with invalid parameters. This makes it return a JSON response, with status code 422, and a response with a non-empty &quot;errors&quot; key.</p><p>The <code class="inline">action_fallback</code> can be extremely useful to reduce boilerplate when designing APIs. You can learn more about the &quot;Action Fallback&quot; in the <a href="controllers.html">Controllers guide</a>.</p><h3 id="the-delete-action-1" class="section-heading">
  <a href="#the-delete-action-1" class="hover-link">
    <i class="ri-link-m" aria-hidden="true"></i>
  </a>
  <span class="text">The <code class="inline">delete</code> action</span>
</h3>
<p>Finally, the last action we will study is the <code class="inline">delete</code> action for JSON. Its implementation looks like this:</p><pre><code class="makeup elixir" translate="no"><span class="kd">def</span><span class="w"> </span><span class="nf">delete</span><span class="p" data-group-id="9210745665-1">(</span><span class="n">conn</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="9210745665-2">%{</span><span class="s">&quot;id&quot;</span><span class="w"> </span><span class="p">=&gt;</span><span class="w"> </span><span class="n">id</span><span class="p" data-group-id="9210745665-2">}</span><span class="p" data-group-id="9210745665-1">)</span><span class="w"> </span><span class="k" data-group-id="9210745665-3">do</span><span class="w">
  </span><span class="n">article</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nc">News</span><span class="o">.</span><span class="n">get_article!</span><span class="p" data-group-id="9210745665-4">(</span><span class="n">id</span><span class="p" data-group-id="9210745665-4">)</span><span class="w">

  </span><span class="k">with</span><span class="w"> </span><span class="p" data-group-id="9210745665-5">{</span><span class="ss">:ok</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="9210745665-6">%</span><span class="nc" data-group-id="9210745665-6">Article</span><span class="p" data-group-id="9210745665-6">{</span><span class="p" data-group-id="9210745665-6">}</span><span class="p" data-group-id="9210745665-5">}</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nc">News</span><span class="o">.</span><span class="n">delete_article</span><span class="p" data-group-id="9210745665-7">(</span><span class="n">article</span><span class="p" data-group-id="9210745665-7">)</span><span class="w"> </span><span class="k" data-group-id="9210745665-8">do</span><span class="w">
    </span><span class="n">send_resp</span><span class="p" data-group-id="9210745665-9">(</span><span class="n">conn</span><span class="p">,</span><span class="w"> </span><span class="ss">:no_content</span><span class="p">,</span><span class="w"> </span><span class="s">&quot;&quot;</span><span class="p" data-group-id="9210745665-9">)</span><span class="w">
  </span><span class="k" data-group-id="9210745665-8">end</span><span class="w">
</span><span class="k" data-group-id="9210745665-3">end</span></code></pre><p>The new action simply attempts to delete the article and, if it succeeds, it returns an empty response with status code <code class="inline">:no_content</code> (204).</p><p>The test looks like this:</p><pre><code class="makeup elixir" translate="no"><span class="n">describe</span><span class="w"> </span><span class="s">&quot;delete article&quot;</span><span class="w"> </span><span class="k" data-group-id="8674854181-1">do</span><span class="w">
  </span><span class="n">setup</span><span class="w"> </span><span class="p" data-group-id="8674854181-2">[</span><span class="ss">:create_article</span><span class="p" data-group-id="8674854181-2">]</span><span class="w">

  </span><span class="n">test</span><span class="w"> </span><span class="s">&quot;deletes chosen article&quot;</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="8674854181-3">%{</span><span class="ss">conn</span><span class="p">:</span><span class="w"> </span><span class="n">conn</span><span class="p">,</span><span class="w"> </span><span class="ss">article</span><span class="p">:</span><span class="w"> </span><span class="n">article</span><span class="p" data-group-id="8674854181-3">}</span><span class="w"> </span><span class="k" data-group-id="8674854181-4">do</span><span class="w">
    </span><span class="n">conn</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">delete</span><span class="p" data-group-id="8674854181-5">(</span><span class="n">conn</span><span class="p">,</span><span class="w"> </span><span class="sx">~p&quot;/api/articles/</span><span class="si" data-group-id="8674854181-6">#{</span><span class="n">article</span><span class="si" data-group-id="8674854181-6">}</span><span class="sx">&quot;</span><span class="p" data-group-id="8674854181-5">)</span><span class="w">
    </span><span class="n">assert</span><span class="w"> </span><span class="n">response</span><span class="p" data-group-id="8674854181-7">(</span><span class="n">conn</span><span class="p">,</span><span class="w"> </span><span class="mi">204</span><span class="p" data-group-id="8674854181-7">)</span><span class="w">

    </span><span class="n">assert_error_sent</span><span class="w"> </span><span class="mi">404</span><span class="p">,</span><span class="w"> </span><span class="k" data-group-id="8674854181-8">fn</span><span class="w"> </span><span class="o">-&gt;</span><span class="w">
      </span><span class="n">get</span><span class="p" data-group-id="8674854181-9">(</span><span class="n">conn</span><span class="p">,</span><span class="w"> </span><span class="sx">~p&quot;/api/articles/</span><span class="si" data-group-id="8674854181-10">#{</span><span class="n">article</span><span class="si" data-group-id="8674854181-10">}</span><span class="sx">&quot;</span><span class="p" data-group-id="8674854181-9">)</span><span class="w">
    </span><span class="k" data-group-id="8674854181-8">end</span><span class="w">
  </span><span class="k" data-group-id="8674854181-4">end</span><span class="w">
</span><span class="k" data-group-id="8674854181-1">end</span><span class="w">

</span><span class="kd">defp</span><span class="w"> </span><span class="nf">create_article</span><span class="p" data-group-id="8674854181-11">(</span><span class="bp">_</span><span class="p" data-group-id="8674854181-11">)</span><span class="w"> </span><span class="k" data-group-id="8674854181-12">do</span><span class="w">
  </span><span class="n">article</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">article_fixture</span><span class="p" data-group-id="8674854181-13">(</span><span class="p" data-group-id="8674854181-13">)</span><span class="w">
  </span><span class="p" data-group-id="8674854181-14">%{</span><span class="ss">article</span><span class="p">:</span><span class="w"> </span><span class="n">article</span><span class="p" data-group-id="8674854181-14">}</span><span class="w">
</span><span class="k" data-group-id="8674854181-12">end</span></code></pre><p>It setups a new article, then in the test it invokes the <code class="inline">delete</code> path to delete it, asserting on a 204 response, which is neither JSON nor HTML. Then it verifies that we can no longer access said article.</p><p>That's all!</p><p>Now that we understand how the scaffolded code and their tests work for both HTML and JSON APIs, we are prepared to move forward in building and maintaining our web applications!</p>

  </body>
</html>
