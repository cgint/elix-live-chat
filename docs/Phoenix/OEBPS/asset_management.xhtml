<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"
      xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>Asset Management - Phoenix v1.7.21</title>
    <meta name="generator" content="ExDoc v0.37.3" />
    <link type="text/css" rel="stylesheet" href="dist/epub-elixir-FNUUKFP7.css" />
    <script src="dist/epub-4WIP524F.js"></script>

  </head>
  <body class="content-inner">

    <h1 id="content">
Asset Management
    </h1>
<p>Beside producing HTML, most web applications have various assets (JavaScript, CSS, images, fonts and so on).</p><p>From Phoenix v1.7, new applications use <a href="https://esbuild.github.io/">esbuild</a> to prepare assets via the <a href="https://github.com/phoenixframework/esbuild">Elixir esbuild wrapper</a>, and <a href="https://tailwindcss.com">tailwindcss</a> via the <a href="https://github.com/phoenixframework/tailwind">Elixir tailwindcss wrapper</a> for CSS. The direct integration with <code class="inline">esbuild</code> and <code class="inline">tailwind</code> means that newly generated applications do not have dependencies on Node.js or an external build system (e.g. Webpack).</p><p>Your JavaScript is typically placed at &quot;assets/js/app.js&quot; and <code class="inline">esbuild</code> will extract it to &quot;priv/static/assets/app.js&quot;. In development, this is done automatically via the <code class="inline">esbuild</code> watcher. In production, this is done by running <code class="inline">mix assets.deploy</code>.</p><p><code class="inline">esbuild</code> can also handle your CSS files, but by default <code class="inline">tailwind</code> handles all CSS building.</p><p>Finally, all other assets, that usually don't have to be preprocessed, go directly to &quot;priv/static&quot;.</p><h2 id="third-party-js-packages" class="section-heading">
  <a href="#third-party-js-packages" class="hover-link">
    <i class="ri-link-m" aria-hidden="true"></i>
  </a>
  <span class="text">Third-party JS packages</span>
</h2>
<p>If you want to import JavaScript dependencies, you have at least three options to add them to your application:</p><ol><li><p>Vendor those dependencies inside your project and import them in your &quot;assets/js/app.js&quot; using a relative path:</p><pre><code class="makeup javascript" translate="no"><span class="k">import</span><span class="w"> </span><span class="nv">topbar</span><span class="w"> </span><span class="k">from</span><span class="w"> </span><span class="p">&quot;</span><span class="s2">../vendor/topbar</span><span class="p">&quot;</span></code></pre></li><li><p>Call <code class="inline">npm install topbar --save</code> inside your assets directory and <code class="inline">esbuild</code> will be able to automatically pick them up:</p><pre><code class="makeup javascript" translate="no"><span class="k">import</span><span class="w"> </span><span class="nv">topbar</span><span class="w"> </span><span class="k">from</span><span class="w"> </span><span class="p">&quot;</span><span class="s2">topbar</span><span class="p">&quot;</span></code></pre></li><li><p>Use Mix to track the dependency from a source repository:</p><pre><code class="makeup elixir" translate="no"><span class="c1"># mix.exs</span><span class="w">
</span><span class="p" data-group-id="9961895371-1">{</span><span class="ss">:topbar</span><span class="p">,</span><span class="w"> </span><span class="ss">github</span><span class="p">:</span><span class="w"> </span><span class="s">&quot;buunguyen/topbar&quot;</span><span class="p">,</span><span class="w"> </span><span class="ss">app</span><span class="p">:</span><span class="w"> </span><span class="no">false</span><span class="p">,</span><span class="w"> </span><span class="ss">compile</span><span class="p">:</span><span class="w"> </span><span class="no">false</span><span class="p" data-group-id="9961895371-1">}</span></code></pre><p>Run <a href="https://hexdocs.pm/mix/Mix.Tasks.Deps.Get.html"><code class="inline">mix deps.get</code></a> to fetch the dependency and then import it:</p><pre><code class="makeup javascript" translate="no"><span class="k">import</span><span class="w"> </span><span class="nv">topbar</span><span class="w"> </span><span class="k">from</span><span class="w"> </span><span class="p">&quot;</span><span class="s2">topbar</span><span class="p">&quot;</span></code></pre><p>New applications use this third approach to import Heroicons, avoiding
vendoring a copy of all icons when you may only use a few or even none,
avoiding Node.js and <code class="inline">npm</code>, and tracking an explicit version that is easy to
update thanks to Mix. It is important to note that git dependencies cannot
be used by Hex packages, so if you intend to publish your project to Hex,
consider vendoring the files instead.</p></li></ol><h2 id="images-fonts-and-external-files" class="section-heading">
  <a href="#images-fonts-and-external-files" class="hover-link">
    <i class="ri-link-m" aria-hidden="true"></i>
  </a>
  <span class="text">Images, fonts, and external files</span>
</h2>
<p>If you reference an external file in your CSS or JavaScript files, <code class="inline">esbuild</code> will attempt to validate and manage them, unless told otherwise.</p><p>For example, imagine you want to reference <code class="inline">priv/static/images/bg.png</code>, served at <code class="inline">/images/bg.png</code>, from your CSS file:</p><pre><code class="makeup css" translate="no"><span class="nt">body</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">  </span><span class="nb">background-image</span><span class="p">:</span><span class="w"> </span><span class="nf">url</span><span class="p">(</span><span class="s">/</span><span class="s">i</span><span class="s">m</span><span class="s">a</span><span class="s">g</span><span class="s">e</span><span class="s">s</span><span class="s">/</span><span class="s">b</span><span class="s">g</span><span class="s">.</span><span class="s">p</span><span class="s">n</span><span class="s">g</span><span class="p">)</span><span class="p">;</span><span class="w">
</span><span class="p">}</span></code></pre><p>The above may fail with the following message:</p><pre><code class="text">error: Could not resolve &quot;/images/bg.png&quot; (mark it as external to exclude it from the bundle)</code></pre><p>Given the images are already managed by Phoenix, you need to mark all resources from <code class="inline">/images</code> (and also <code class="inline">/fonts</code>) as external, as the error message says. This is what Phoenix does by default for new apps since v1.6.1+. In your <code class="inline">config/config.exs</code>, you will find:</p><pre><code class="makeup elixir" translate="no"><span class="ss">args</span><span class="p">:</span><span class="w"> </span><span class="sx">~w(js/app.js --bundle --target=es2017 --outdir=../priv/static/assets --external:/fonts/* --external:/images/*)</span><span class="p">,</span></code></pre><p>If you need to reference other directories, you need to update the arguments above accordingly. Note running <a href="Mix.Tasks.Phx.Digest.xhtml"><code class="inline">mix phx.digest</code></a> will create digested files for all of the assets in <code class="inline">priv/static</code>, so your images and fonts are still cache-busted.</p><h2 id="esbuild-plugins" class="section-heading">
  <a href="#esbuild-plugins" class="hover-link">
    <i class="ri-link-m" aria-hidden="true"></i>
  </a>
  <span class="text">Esbuild plugins</span>
</h2>
<p>Phoenix's default configuration of <code class="inline">esbuild</code> (via the Elixir wrapper) does not allow you to use <a href="https://esbuild.github.io/plugins/">esbuild plugins</a>. If you want to use an esbuild plugin, for example to compile SASS files to CSS, you can replace the default build system with a custom build script.</p><p>The following is an example of a custom build using esbuild via Node.JS. First of all, you'll need to install Node.js in development and make it available for your production build step.</p><p>Then you'll need to add <code class="inline">esbuild</code> to your Node.js packages and the Phoenix packages. Inside the <code class="inline">assets</code> directory, run:</p><pre><code class="makeup console" translate="no"><span class="gp unselectable">$ </span><span class="">npm install esbuild --save-dev
</span><span class="gp unselectable">$ </span><span class="">npm install ../deps/phoenix ../deps/phoenix_html ../deps/phoenix_live_view --save
</span></code></pre><p>or, for Yarn:</p><pre><code class="makeup console" translate="no"><span class="gp unselectable">$ </span><span class="">yarn add --dev esbuild
</span><span class="gp unselectable">$ </span><span class="">yarn add ../deps/phoenix ../deps/phoenix_html ../deps/phoenix_live_view
</span></code></pre><p>Next, add a custom JavaScript build script. We'll call the example <code class="inline">assets/build.js</code>:</p><pre><code class="makeup javascript" translate="no"><span class="kt">const</span><span class="w"> </span><span class="nv">esbuild</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">require</span><span class="p">(</span><span class="p">&quot;</span><span class="s2">esbuild</span><span class="p">&quot;</span><span class="p">)</span><span class="p">;</span><span class="w">
</span><span class="w">
</span><span class="kt">const</span><span class="w"> </span><span class="nv">args</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="no">process</span><span class="p">.</span><span class="no">argv</span><span class="p">.</span><span class="nf">slice</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span><span class="p">;</span><span class="w">
</span><span class="kt">const</span><span class="w"> </span><span class="nv">watch</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nv">args</span><span class="p">.</span><span class="nf">includes</span><span class="p">(</span><span class="p">&#39;</span><span class="s1">--watch</span><span class="p">&#39;</span><span class="p">)</span><span class="p">;</span><span class="w">
</span><span class="kt">const</span><span class="w"> </span><span class="nv">deploy</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nv">args</span><span class="p">.</span><span class="nf">includes</span><span class="p">(</span><span class="p">&#39;</span><span class="s1">--deploy</span><span class="p">&#39;</span><span class="p">)</span><span class="p">;</span><span class="w">
</span><span class="w">
</span><span class="kt">const</span><span class="w"> </span><span class="nv">loader</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">  </span><span class="c1">//</span><span class="c1"> Add loaders for images/fonts/etc, e.g. { &#39;.svg&#39;: &#39;file&#39; }
</span><span class="p">}</span><span class="p">;</span><span class="w">
</span><span class="w">
</span><span class="kt">const</span><span class="w"> </span><span class="nv">plugins</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">[</span><span class="w">
</span><span class="w">  </span><span class="c1">//</span><span class="c1"> Add and configure plugins here
</span><span class="p">]</span><span class="p">;</span><span class="w">
</span><span class="w">
</span><span class="c1">//</span><span class="c1"> Define esbuild options
</span><span class="kt">let</span><span class="w"> </span><span class="nv">opts</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">  </span><span class="n">entryPoints</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="p">&quot;</span><span class="s2">js/app.js</span><span class="p">&quot;</span><span class="p">]</span><span class="p">,</span><span class="w">
</span><span class="w">  </span><span class="n">bundle</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
</span><span class="w">  </span><span class="n">logLevel</span><span class="p">:</span><span class="w"> </span><span class="p">&quot;</span><span class="s2">info</span><span class="p">&quot;</span><span class="p">,</span><span class="w">
</span><span class="w">  </span><span class="n">target</span><span class="p">:</span><span class="w"> </span><span class="p">&quot;</span><span class="s2">es2017</span><span class="p">&quot;</span><span class="p">,</span><span class="w">
</span><span class="w">  </span><span class="n">outdir</span><span class="p">:</span><span class="w"> </span><span class="p">&quot;</span><span class="s2">../priv/static/assets</span><span class="p">&quot;</span><span class="p">,</span><span class="w">
</span><span class="w">  </span><span class="n">external</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="p">&quot;</span><span class="s2">*.css</span><span class="p">&quot;</span><span class="p">,</span><span class="w"> </span><span class="p">&quot;</span><span class="s2">fonts/*</span><span class="p">&quot;</span><span class="p">,</span><span class="w"> </span><span class="p">&quot;</span><span class="s2">images/*</span><span class="p">&quot;</span><span class="p">]</span><span class="p">,</span><span class="w">
</span><span class="w">  </span><span class="n">nodePaths</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="p">&quot;</span><span class="s2">../deps</span><span class="p">&quot;</span><span class="p">]</span><span class="p">,</span><span class="w">
</span><span class="w">  </span><span class="n">loader</span><span class="p">:</span><span class="w"> </span><span class="nv">loader</span><span class="p">,</span><span class="w">
</span><span class="w">  </span><span class="n">plugins</span><span class="p">:</span><span class="w"> </span><span class="nv">plugins</span><span class="p">,</span><span class="w">
</span><span class="p">}</span><span class="p">;</span><span class="w">
</span><span class="w">
</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="nv">deploy</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">  </span><span class="nv">opts</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="o">...</span><span class="nv">opts</span><span class="p">,</span><span class="w">
</span><span class="w">    </span><span class="n">minify</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
</span><span class="w">  </span><span class="p">}</span><span class="p">;</span><span class="w">
</span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="nv">watch</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">  </span><span class="nv">opts</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="o">...</span><span class="nv">opts</span><span class="p">,</span><span class="w">
</span><span class="w">    </span><span class="n">sourcemap</span><span class="p">:</span><span class="w"> </span><span class="p">&quot;</span><span class="s2">inline</span><span class="p">&quot;</span><span class="p">,</span><span class="w">
</span><span class="w">  </span><span class="p">}</span><span class="p">;</span><span class="w">
</span><span class="w">  </span><span class="nv">esbuild</span><span class="w">
</span><span class="w">    </span><span class="p">.</span><span class="nf">context</span><span class="p">(</span><span class="nv">opts</span><span class="p">)</span><span class="w">
</span><span class="w">    </span><span class="p">.</span><span class="nf">then</span><span class="p">(</span><span class="p">(</span><span class="nv">ctx</span><span class="p">)</span><span class="w"> </span><span class="kt">=&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">      </span><span class="nv">ctx</span><span class="p">.</span><span class="nf">watch</span><span class="p">(</span><span class="p">)</span><span class="p">;</span><span class="w">
</span><span class="w">    </span><span class="p">}</span><span class="p">)</span><span class="w">
</span><span class="w">    </span><span class="p">.</span><span class="nf">catch</span><span class="p">(</span><span class="p">(</span><span class="nv">_error</span><span class="p">)</span><span class="w"> </span><span class="kt">=&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">      </span><span class="no">process</span><span class="p">.</span><span class="nf">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span><span class="p">;</span><span class="w">
</span><span class="w">    </span><span class="p">}</span><span class="p">)</span><span class="p">;</span><span class="w">
</span><span class="p">}</span><span class="w"> </span><span class="k">else</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">  </span><span class="nv">esbuild</span><span class="p">.</span><span class="nf">build</span><span class="p">(</span><span class="nv">opts</span><span class="p">)</span><span class="p">;</span><span class="w">
</span><span class="p">}</span></code></pre><p>This script covers following use cases:</p><ul><li><code class="inline">node build.js</code>: builds for development &amp; testing (useful on CI)</li><li><code class="inline">node build.js --watch</code>: like above, but watches for changes continuously</li><li><code class="inline">node build.js --deploy</code>: builds minified assets for production</li></ul><p>Modify <code class="inline">config/dev.exs</code> so that the script runs whenever you change files, replacing the existing <code class="inline">:esbuild</code> configuration under <code class="inline">watchers</code>:</p><pre><code class="makeup elixir" translate="no"><span class="n">config</span><span class="w"> </span><span class="ss">:hello</span><span class="p">,</span><span class="w"> </span><span class="nc">HelloWeb.Endpoint</span><span class="p">,</span><span class="w">
  </span><span class="n">...</span><span class="w">
  </span><span class="ss">watchers</span><span class="p">:</span><span class="w"> </span><span class="p" data-group-id="3906243008-1">[</span><span class="w">
    </span><span class="ss">node</span><span class="p">:</span><span class="w"> </span><span class="p" data-group-id="3906243008-2">[</span><span class="s">&quot;build.js&quot;</span><span class="p">,</span><span class="w"> </span><span class="s">&quot;--watch&quot;</span><span class="p">,</span><span class="w"> </span><span class="ss">cd</span><span class="p">:</span><span class="w"> </span><span class="nc">Path</span><span class="o">.</span><span class="n">expand</span><span class="p" data-group-id="3906243008-3">(</span><span class="s">&quot;../assets&quot;</span><span class="p">,</span><span class="w"> </span><span class="bp">__DIR__</span><span class="p" data-group-id="3906243008-3">)</span><span class="p" data-group-id="3906243008-2">]</span><span class="w">
  </span><span class="p" data-group-id="3906243008-1">]</span><span class="p">,</span><span class="w">
  </span><span class="n">...</span></code></pre><p>Modify the <code class="inline">aliases</code> task in <code class="inline">mix.exs</code> to install <code class="inline">npm</code> packages during <code class="inline">mix setup</code> and use the new <code class="inline">esbuild</code> on <code class="inline">mix assets.deploy</code>:</p><pre><code class="makeup elixir" translate="no"><span class="w">  </span><span class="kd">defp</span><span class="w"> </span><span class="nf">aliases</span><span class="w"> </span><span class="k" data-group-id="0277184366-1">do</span><span class="w">
    </span><span class="p" data-group-id="0277184366-2">[</span><span class="w">
      </span><span class="ss">setup</span><span class="p">:</span><span class="w"> </span><span class="p" data-group-id="0277184366-3">[</span><span class="s">&quot;deps.get&quot;</span><span class="p">,</span><span class="w"> </span><span class="s">&quot;ecto.setup&quot;</span><span class="p">,</span><span class="w"> </span><span class="s">&quot;cmd --cd assets npm install&quot;</span><span class="p" data-group-id="0277184366-3">]</span><span class="p">,</span><span class="w">
      </span><span class="n">...</span><span class="p">,</span><span class="w">
      </span><span class="ss">&quot;assets.deploy&quot;</span><span class="p">:</span><span class="w"> </span><span class="p" data-group-id="0277184366-4">[</span><span class="s">&quot;cmd --cd assets node build.js --deploy&quot;</span><span class="p">,</span><span class="w"> </span><span class="s">&quot;phx.digest&quot;</span><span class="p" data-group-id="0277184366-4">]</span><span class="w">
    </span><span class="p" data-group-id="0277184366-2">]</span><span class="w">
  </span><span class="k" data-group-id="0277184366-1">end</span></code></pre><p>Finally, remove the <code class="inline">esbuild</code> configuration from <code class="inline">config/config.exs</code> and remove the dependency from the <code class="inline">deps</code> function in your <code class="inline">mix.exs</code>, and you are done!</p><h2 id="alternative-js-build-tools" class="section-heading">
  <a href="#alternative-js-build-tools" class="hover-link">
    <i class="ri-link-m" aria-hidden="true"></i>
  </a>
  <span class="text">Alternative JS build tools</span>
</h2>
<p>If you are writing an API or you want to use another asset build tool, you may want to remove the <code class="inline">esbuild</code> Hex package (see steps below). Then you must follow the additional steps required by the third-party tool.</p><h3 id="remove-esbuild" class="section-heading">
  <a href="#remove-esbuild" class="hover-link">
    <i class="ri-link-m" aria-hidden="true"></i>
  </a>
  <span class="text">Remove esbuild</span>
</h3>
<ol><li>Remove the <code class="inline">esbuild</code> configuration in <code class="inline">config/config.exs</code> and <code class="inline">config/dev.exs</code>,</li><li>Remove the <code class="inline">assets.deploy</code> task defined in <code class="inline">mix.exs</code>,</li><li>Remove the <code class="inline">esbuild</code> dependency from <code class="inline">mix.exs</code>,</li><li>Unlock the <code class="inline">esbuild</code> dependency:</li></ol><pre><code class="makeup console" translate="no"><span class="gp unselectable">$ </span><span class="">mix deps.unlock esbuild
</span></code></pre><h2 id="alternative-css-frameworks" class="section-heading">
  <a href="#alternative-css-frameworks" class="hover-link">
    <i class="ri-link-m" aria-hidden="true"></i>
  </a>
  <span class="text">Alternative CSS frameworks</span>
</h2>
<p>By default, Phoenix generates CSS with the <code class="inline">tailwind</code> library and its default plugins.</p><p>If you want to use external <code class="inline">tailwind</code> plugins or another CSS framework, you should replace the <code class="inline">tailwind</code> Hex package (see steps below). Then you can use an <code class="inline">esbuild</code> plugin (as outlined above) or even bring a separate framework altogether.</p><h3 id="remove-tailwind" class="section-heading">
  <a href="#remove-tailwind" class="hover-link">
    <i class="ri-link-m" aria-hidden="true"></i>
  </a>
  <span class="text">Remove tailwind</span>
</h3>
<ol><li>Remove the <code class="inline">tailwind</code> configuration in <code class="inline">config/config.exs</code> and <code class="inline">config/dev.exs</code>,</li><li>Remove the <code class="inline">assets.deploy</code> task defined in <code class="inline">mix.exs</code>,</li><li>Remove the <code class="inline">tailwind</code> dependency from <code class="inline">mix.exs</code>,</li><li>Unlock the <code class="inline">tailwind</code> dependency:</li></ol><pre><code class="makeup console" translate="no"><span class="gp unselectable">$ </span><span class="">mix deps.unlock tailwind
</span></code></pre><p>You may optionally remove and delete the <code class="inline">heroicons</code> dependency as well.</p>

  </body>
</html>
