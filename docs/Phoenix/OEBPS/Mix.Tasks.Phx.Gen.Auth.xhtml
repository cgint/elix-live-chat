<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"
      xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>mix phx.gen.auth - Phoenix v1.7.21</title>
    <meta name="generator" content="ExDoc v0.37.3" />
    <link type="text/css" rel="stylesheet" href="dist/epub-elixir-FNUUKFP7.css" />
    <script src="dist/epub-4WIP524F.js"></script>

  </head>
  <body class="content-inner">

    <h1 id="content">
mix phx.gen.auth 
    </h1>


      <section id="moduledoc" class="docstring">
<p>Generates authentication logic and related views for a resource.</p><pre><code class="makeup shell" translate="no"><samp class="gp unselectable">$ </samp><samp class="">mix phx.gen.auth Accounts User users
</samp></code></pre><p>The first argument is the context module followed by the schema module
and its plural name (used as the schema table name).</p><p>Additional information and security considerations are detailed in the
<a href="mix_phx_gen_auth.html"><code class="inline">mix phx.gen.auth</code> guide</a>.</p><h2 id="module-liveview-vs-conventional-controllers-views" class="section-heading">
  <a href="#module-liveview-vs-conventional-controllers-views" class="hover-link">
    <i class="ri-link-m" aria-hidden="true"></i>
  </a>
  <span class="text">LiveView vs conventional Controllers &amp; Views</span>
</h2>
<p>Authentication views can either be generated to use LiveView by passing
the <code class="inline">--live</code> option, or they can use conventional Phoenix
Controllers &amp; Views by passing <code class="inline">--no-live</code>.</p><p>If neither of these options are provided, a prompt will be displayed.</p><p>Using the <code class="inline">--live</code> option is advised if you plan on using LiveView
elsewhere in your application. The user experience when navigating between
LiveViews can be tightly controlled, allowing you to let your users navigate
to authentication views without necessarily triggering a new HTTP request
each time (which would result in a full page load).</p><h2 id="module-password-hashing" class="section-heading">
  <a href="#module-password-hashing" class="hover-link">
    <i class="ri-link-m" aria-hidden="true"></i>
  </a>
  <span class="text">Password hashing</span>
</h2>
<p>The password hashing mechanism defaults to <code class="inline">bcrypt</code> for
Unix systems and <code class="inline">pbkdf2</code> for Windows systems. Both
systems use the <a href="https://hexdocs.pm/comeonin/">Comeonin interface</a>.</p><p>The password hashing mechanism can be overridden with the
<code class="inline">--hashing-lib</code> option. The following values are supported:</p><ul><li><code class="inline">bcrypt</code> - <a href="https://hex.pm/packages/bcrypt_elixir">bcrypt_elixir</a></li><li><code class="inline">pbkdf2</code> - <a href="https://hex.pm/packages/pbkdf2_elixir">pbkdf2_elixir</a></li><li><code class="inline">argon2</code> - <a href="https://hex.pm/packages/argon2_elixir">argon2_elixir</a></li></ul><p>We recommend developers to consider using <code class="inline">argon2</code>, which
is the most robust of all 3. The downside is that <code class="inline">argon2</code>
is quite CPU and memory intensive, and you will need more
powerful instances to run your applications on.</p><p>For more information about choosing these libraries, see the
<a href="https://github.com/riverrun/comeonin">Comeonin project</a>.</p><h2 id="module-web-namespace" class="section-heading">
  <a href="#module-web-namespace" class="hover-link">
    <i class="ri-link-m" aria-hidden="true"></i>
  </a>
  <span class="text">Web namespace</span>
</h2>
<p>By default, the controllers and HTML view will be namespaced by the schema name.
You can customize the web module namespace by passing the <code class="inline">--web</code> flag with a
module name, for example:</p><pre><code class="makeup shell" translate="no"><samp class="gp unselectable">$ </samp><samp class="">mix phx.gen.auth Accounts User users --web Warehouse
</samp></code></pre><p>Which would generate the controllers, views, templates and associated tests nested in the <code class="inline">MyAppWeb.Warehouse</code> namespace:</p><ul><li><code class="inline">lib/my_app_web/controllers/warehouse/user_auth.ex</code></li><li><code class="inline">lib/my_app_web/controllers/warehouse/user_confirmation_controller.ex</code></li><li><code class="inline">lib/my_app_web/controllers/warehouse/user_confirmation_html.ex</code></li><li><code class="inline">lib/my_app_web/controllers/warehouse/user_confirmation_html/new.html.heex</code></li><li><code class="inline">test/my_app_web/controllers/warehouse/user_auth_test.exs</code></li><li><code class="inline">test/my_app_web/controllers/warehouse/user_confirmation_controller_test.exs</code></li><li>and so on...</li></ul><h2 id="module-multiple-invocations" class="section-heading">
  <a href="#module-multiple-invocations" class="hover-link">
    <i class="ri-link-m" aria-hidden="true"></i>
  </a>
  <span class="text">Multiple invocations</span>
</h2>
<p>You can invoke this generator multiple times. This is typically useful
if you have distinct resources that go through distinct authentication
workflows:</p><pre><code class="makeup shell" translate="no"><samp class="gp unselectable">$ </samp><samp class="">mix phx.gen.auth Store User users
</samp><samp class="gp unselectable">$ </samp><samp class="">mix phx.gen.auth Backoffice Admin admins
</samp></code></pre><h2 id="module-binary-ids" class="section-heading">
  <a href="#module-binary-ids" class="hover-link">
    <i class="ri-link-m" aria-hidden="true"></i>
  </a>
  <span class="text">Binary ids</span>
</h2>
<p>The <code class="inline">--binary-id</code> option causes the generated migration to use
<code class="inline">binary_id</code> for its primary key and foreign keys.</p><h2 id="module-default-options" class="section-heading">
  <a href="#module-default-options" class="hover-link">
    <i class="ri-link-m" aria-hidden="true"></i>
  </a>
  <span class="text">Default options</span>
</h2>
<p>This generator uses default options provided in the <code class="inline">:generators</code>
configuration of your application. These are the defaults:</p><pre><code class="makeup elixir" translate="no"><samp class="n">config</samp><samp class="w"> </samp><samp class="ss">:your_app</samp><samp class="p">,</samp><samp class="w"> </samp><samp class="ss">:generators</samp><samp class="p">,</samp><samp class="w">
  </samp><samp class="ss">binary_id</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="no">false</samp><samp class="p">,</samp><samp class="w">
  </samp><samp class="ss">sample_binary_id</samp><samp class="p">:</samp><samp class="w"> </samp><samp class="s">&quot;11111111-1111-1111-1111-111111111111&quot;</samp></code></pre><p>You can override those options per invocation by providing corresponding
switches, e.g. <code class="inline">--no-binary-id</code> to use normal ids despite the default
configuration.</p><h2 id="module-custom-table-names" class="section-heading">
  <a href="#module-custom-table-names" class="hover-link">
    <i class="ri-link-m" aria-hidden="true"></i>
  </a>
  <span class="text">Custom table names</span>
</h2>
<p>By default, the table name for the migration and schema will be
the plural name provided for the resource. To customize this value,
a <code class="inline">--table</code> option may be provided. For example:</p><pre><code class="makeup shell" translate="no"><samp class="gp unselectable">$ </samp><samp class="">mix phx.gen.auth Accounts User users --table accounts_users
</samp></code></pre><p>This will cause the generated tables to be named <code class="inline">&quot;accounts_users&quot;</code> and <code class="inline">&quot;accounts_users_tokens&quot;</code>.</p>
      </section>




  </body>
</html>
