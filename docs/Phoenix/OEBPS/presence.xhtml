<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"
      xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>Presence - Phoenix v1.7.21</title>
    <meta name="generator" content="ExDoc v0.37.3" />
    <link type="text/css" rel="stylesheet" href="dist/epub-elixir-FNUUKFP7.css" />
    <script src="dist/epub-4WIP524F.js"></script>

  </head>
  <body class="content-inner">

    <h1 id="content">
Presence
    </h1>
<blockquote><p><strong>Requirement</strong>: This guide expects that you have gone through the <a href="installation.html">introductory guides</a> and got a Phoenix application <a href="up_and_running.html">up and running</a>.</p></blockquote><blockquote><p><strong>Requirement</strong>: This guide expects that you have gone through the <a href="channels.html">Channels guide</a>.</p></blockquote><p>Phoenix Presence is a feature which allows you to register process information on a topic and replicate it transparently across a cluster. It's a combination of both a server-side and client-side library, which makes it simple to implement. A simple use-case would be showing which users are currently online in an application.</p><p>Phoenix Presence is special for a number of reasons. It has no single point of failure, no single source of truth, relies entirely on the standard library with no operational dependencies and self-heals.</p><h2 id="setting-up" class="section-heading">
  <a href="#setting-up" class="hover-link">
    <i class="ri-link-m" aria-hidden="true"></i>
  </a>
  <span class="text">Setting up</span>
</h2>
<p>We are going to use Presence to track which users are connected on the server and send updates to the client as users join and leave. We will deliver those updates via Phoenix Channels. Therefore, let's create a <code class="inline">RoomChannel</code>, as we did in the channels guides:</p><pre><code class="makeup console" translate="no"><span class="gp unselectable">$ </span><span class="">mix phx.gen.channel Room
</span></code></pre><p>Follow the steps after the generator and you are ready to start tracking presence.</p><h2 id="the-presence-generator" class="section-heading">
  <a href="#the-presence-generator" class="hover-link">
    <i class="ri-link-m" aria-hidden="true"></i>
  </a>
  <span class="text">The Presence generator</span>
</h2>
<p>To get started with Presence, we'll first need to generate a presence module. We can do this with the <a href="Mix.Tasks.Phx.Gen.Presence.xhtml"><code class="inline">mix phx.gen.presence</code></a> task:</p><pre><code class="makeup console" translate="no"><span class="gp unselectable">$ </span><span class="">mix phx.gen.presence
</span><span class="">* creating lib/hello_web/channels/presence.ex
</span><span class="">
</span><span class="">Add your new module to your supervision tree,
</span><span class="">in lib/hello/application.ex:
</span><span class="">
</span><span class="">    children = [
</span><span class="">      ...
</span><span class="">      HelloWeb.Presence,
</span><span class="">    ]
</span><span class="">
</span><span class="">You&#39;re all set! See the Phoenix.Presence docs for more details:
</span><span class="">https://hexdocs.pm/phoenix/Phoenix.Presence.html
</span></code></pre><p>If we open up the <code class="inline">lib/hello_web/channels/presence.ex</code> file, we will see the following line:</p><pre><code class="makeup elixir" translate="no"><span class="kn">use</span><span class="w"> </span><span class="nc">Phoenix.Presence</span><span class="p">,</span><span class="w">
  </span><span class="ss">otp_app</span><span class="p">:</span><span class="w"> </span><span class="ss">:hello</span><span class="p">,</span><span class="w">
  </span><span class="ss">pubsub_server</span><span class="p">:</span><span class="w"> </span><span class="nc">Hello.PubSub</span></code></pre><p>This sets up the module for presence, defining the functions we require for tracking presences. As mentioned in the generator task, we should add this module to our supervision tree in
<code class="inline">application.ex</code>:</p><pre><code class="makeup elixir" translate="no"><span class="n">children</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p" data-group-id="8735655956-1">[</span><span class="w">
  </span><span class="n">...</span><span class="w">
  </span><span class="nc">HelloWeb.Presence</span><span class="p">,</span><span class="w">
</span><span class="p" data-group-id="8735655956-1">]</span></code></pre><h2 id="usage-with-channels-and-javascript" class="section-heading">
  <a href="#usage-with-channels-and-javascript" class="hover-link">
    <i class="ri-link-m" aria-hidden="true"></i>
  </a>
  <span class="text">Usage With Channels and JavaScript</span>
</h2>
<p>Next, we will create the channel that we'll communicate presence over. After a user joins, we can push the list of presences down the channel and then track the connection. We can also provide a map of additional information to track.</p><pre><code class="makeup elixir" translate="no"><span class="kd">defmodule</span><span class="w"> </span><span class="nc">HelloWeb.RoomChannel</span><span class="w"> </span><span class="k" data-group-id="9471580916-1">do</span><span class="w">
  </span><span class="kn">use</span><span class="w"> </span><span class="nc">Phoenix.Channel</span><span class="w">
  </span><span class="kn">alias</span><span class="w"> </span><span class="nc">HelloWeb.Presence</span><span class="w">

  </span><span class="kd">def</span><span class="w"> </span><span class="nf">join</span><span class="p" data-group-id="9471580916-2">(</span><span class="s">&quot;room:lobby&quot;</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="9471580916-3">%{</span><span class="s">&quot;name&quot;</span><span class="w"> </span><span class="p">=&gt;</span><span class="w"> </span><span class="n">name</span><span class="p" data-group-id="9471580916-3">}</span><span class="p">,</span><span class="w"> </span><span class="n">socket</span><span class="p" data-group-id="9471580916-2">)</span><span class="w"> </span><span class="k" data-group-id="9471580916-4">do</span><span class="w">
    </span><span class="n">send</span><span class="p" data-group-id="9471580916-5">(</span><span class="n">self</span><span class="p" data-group-id="9471580916-6">(</span><span class="p" data-group-id="9471580916-6">)</span><span class="p">,</span><span class="w"> </span><span class="ss">:after_join</span><span class="p" data-group-id="9471580916-5">)</span><span class="w">
    </span><span class="p" data-group-id="9471580916-7">{</span><span class="ss">:ok</span><span class="p">,</span><span class="w"> </span><span class="n">assign</span><span class="p" data-group-id="9471580916-8">(</span><span class="n">socket</span><span class="p">,</span><span class="w"> </span><span class="ss">:name</span><span class="p">,</span><span class="w"> </span><span class="n">name</span><span class="p" data-group-id="9471580916-8">)</span><span class="p" data-group-id="9471580916-7">}</span><span class="w">
  </span><span class="k" data-group-id="9471580916-4">end</span><span class="w">

  </span><span class="kd">def</span><span class="w"> </span><span class="nf">handle_info</span><span class="p" data-group-id="9471580916-9">(</span><span class="ss">:after_join</span><span class="p">,</span><span class="w"> </span><span class="n">socket</span><span class="p" data-group-id="9471580916-9">)</span><span class="w"> </span><span class="k" data-group-id="9471580916-10">do</span><span class="w">
    </span><span class="p" data-group-id="9471580916-11">{</span><span class="ss">:ok</span><span class="p">,</span><span class="w"> </span><span class="bp">_</span><span class="p" data-group-id="9471580916-11">}</span><span class="w"> </span><span class="o">=</span><span class="w">
      </span><span class="nc">Presence</span><span class="o">.</span><span class="n">track</span><span class="p" data-group-id="9471580916-12">(</span><span class="n">socket</span><span class="p">,</span><span class="w"> </span><span class="n">socket</span><span class="o">.</span><span class="n">assigns</span><span class="o">.</span><span class="n">name</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="9471580916-13">%{</span><span class="w">
        </span><span class="ss">online_at</span><span class="p">:</span><span class="w"> </span><span class="n">inspect</span><span class="p" data-group-id="9471580916-14">(</span><span class="nc">System</span><span class="o">.</span><span class="n">system_time</span><span class="p" data-group-id="9471580916-15">(</span><span class="ss">:second</span><span class="p" data-group-id="9471580916-15">)</span><span class="p" data-group-id="9471580916-14">)</span><span class="w">
      </span><span class="p" data-group-id="9471580916-13">}</span><span class="p" data-group-id="9471580916-12">)</span><span class="w">

    </span><span class="n">push</span><span class="p" data-group-id="9471580916-16">(</span><span class="n">socket</span><span class="p">,</span><span class="w"> </span><span class="s">&quot;presence_state&quot;</span><span class="p">,</span><span class="w"> </span><span class="nc">Presence</span><span class="o">.</span><span class="n">list</span><span class="p" data-group-id="9471580916-17">(</span><span class="n">socket</span><span class="p" data-group-id="9471580916-17">)</span><span class="p" data-group-id="9471580916-16">)</span><span class="w">
    </span><span class="p" data-group-id="9471580916-18">{</span><span class="ss">:noreply</span><span class="p">,</span><span class="w"> </span><span class="n">socket</span><span class="p" data-group-id="9471580916-18">}</span><span class="w">
  </span><span class="k" data-group-id="9471580916-10">end</span><span class="w">
</span><span class="k" data-group-id="9471580916-1">end</span></code></pre><p>Finally, we can use the client-side Presence library included in <code class="inline">phoenix.js</code> to manage the state and presence diffs that come down the socket. It listens for the <code class="inline">&quot;presence_state&quot;</code> and <code class="inline">&quot;presence_diff&quot;</code> events and provides a simple callback for you to handle the events as they happen, with the <code class="inline">onSync</code> callback.</p><p>The <code class="inline">onSync</code> callback allows you to easily react to presence state changes, which most often results in re-rendering an updated list of active users. You can use the <code class="inline">list</code> method to format and return each individual presence based on the needs of your application.</p><p>To iterate users, we use the <code class="inline">presences.list()</code> function which accepts a callback. The callback will be called for each presence item with 2 arguments, the presence id and a list of metas (one for each presence for that presence id). We use this to display the users and the number of devices they are online with.</p><p>We can see presence working by adding the following to <code class="inline">assets/js/app.js</code>:</p><pre><code class="makeup javascript" translate="no"><span class="k">import</span><span class="w"> </span><span class="p">{</span><span class="nv">Socket</span><span class="p">,</span><span class="w"> </span><span class="nv">Presence</span><span class="p">}</span><span class="w"> </span><span class="k">from</span><span class="w"> </span><span class="p">&quot;</span><span class="s2">phoenix</span><span class="p">&quot;</span><span class="w">
</span><span class="w">
</span><span class="kt">let</span><span class="w"> </span><span class="nv">socket</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="ow">new</span><span class="w"> </span><span class="nv">Socket</span><span class="p">(</span><span class="p">&quot;</span><span class="s2">/socket</span><span class="p">&quot;</span><span class="p">,</span><span class="w"> </span><span class="p">{</span><span class="n">params</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="n">token</span><span class="p">:</span><span class="w"> </span><span class="nb">window</span><span class="p">.</span><span class="n">userToken</span><span class="p">}</span><span class="p">}</span><span class="p">)</span><span class="w">
</span><span class="kt">let</span><span class="w"> </span><span class="nv">channel</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nv">socket</span><span class="p">.</span><span class="nf">channel</span><span class="p">(</span><span class="p">&quot;</span><span class="s2">room:lobby</span><span class="p">&quot;</span><span class="p">,</span><span class="w"> </span><span class="p">{</span><span class="n">name</span><span class="p">:</span><span class="w"> </span><span class="nb">window</span><span class="p">.</span><span class="n">location</span><span class="p">.</span><span class="n">search</span><span class="p">.</span><span class="nf">split</span><span class="p">(</span><span class="p">&quot;</span><span class="s2">=</span><span class="p">&quot;</span><span class="p">)</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="p">}</span><span class="p">)</span><span class="w">
</span><span class="kt">let</span><span class="w"> </span><span class="nv">presence</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="ow">new</span><span class="w"> </span><span class="nv">Presence</span><span class="p">(</span><span class="nv">channel</span><span class="p">)</span><span class="w">
</span><span class="w">
</span><span class="kt">function</span><span class="w"> </span><span class="nf">renderOnlineUsers</span><span class="p">(</span><span class="nv">presence</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">  </span><span class="kt">let</span><span class="w"> </span><span class="nv">response</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">&quot;</span><span class="p">&quot;</span><span class="w">
</span><span class="w">
</span><span class="w">  </span><span class="nv">presence</span><span class="p">.</span><span class="nf">list</span><span class="p">(</span><span class="p">(</span><span class="nv">id</span><span class="p">,</span><span class="w"> </span><span class="p">{</span><span class="n">metas</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="nv">first</span><span class="p">,</span><span class="w"> </span><span class="kd">...</span><span class="nv">rest</span><span class="p">]</span><span class="p">}</span><span class="p">)</span><span class="w"> </span><span class="kt">=&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="kt">let</span><span class="w"> </span><span class="nv">count</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nv">rest</span><span class="p">.</span><span class="n">length</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="mi">1</span><span class="w">
</span><span class="w">    </span><span class="nv">response</span><span class="w"> </span><span class="o">+=</span><span class="w"> </span><span class="p">`</span><span class="s">&lt;br&gt;</span><span class="si">${</span><span class="nv">id</span><span class="si">}</span><span class="s"> (count: </span><span class="si">${</span><span class="nv">count</span><span class="si">}</span><span class="s">)&lt;/br&gt;</span><span class="p">`</span><span class="w">
</span><span class="w">  </span><span class="p">}</span><span class="p">)</span><span class="w">
</span><span class="w">
</span><span class="w">  </span><span class="nb">document</span><span class="p">.</span><span class="nf">querySelector</span><span class="p">(</span><span class="p">&quot;</span><span class="s2">main</span><span class="p">&quot;</span><span class="p">)</span><span class="p">.</span><span class="n">innerHTML</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nv">response</span><span class="w">
</span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="nv">socket</span><span class="p">.</span><span class="nf">connect</span><span class="p">(</span><span class="p">)</span><span class="w">
</span><span class="w">
</span><span class="nv">presence</span><span class="p">.</span><span class="nf">onSync</span><span class="p">(</span><span class="p">(</span><span class="p">)</span><span class="w"> </span><span class="kt">=&gt;</span><span class="w"> </span><span class="nf">renderOnlineUsers</span><span class="p">(</span><span class="nv">presence</span><span class="p">)</span><span class="p">)</span><span class="w">
</span><span class="w">
</span><span class="nv">channel</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="p">)</span></code></pre><p>We can ensure this is working by opening 3 browser tabs. If we navigate to <a href="http://localhost:4000/?name=Alice">http://localhost:4000/?name=Alice</a> on two browser tabs and <a href="http://localhost:4000/?name=Bob">http://localhost:4000/?name=Bob</a> then we should see:</p><pre><code class="plaintext">Alice (count: 2)
Bob (count: 1)</code></pre><p>If we close one of the Alice tabs, then the count should decrease to 1. If we close another tab, the user should disappear from the list entirely.</p><h3 id="making-it-safe" class="section-heading">
  <a href="#making-it-safe" class="hover-link">
    <i class="ri-link-m" aria-hidden="true"></i>
  </a>
  <span class="text">Making it safe</span>
</h3>
<p>In our initial implementation, we are passing the name of the user as part of the URL. However, in many systems, you want to allow only logged in users to access the presence functionality. To do so, you should set up token authentication, <a href="channels.html#using-token-authentication">as detailed in the token authentication section of the channels guide</a>.</p><p>With token authentication, you should access <code class="inline">socket.assigns.user_id</code>, set in <code class="inline">UserSocket</code>, instead of <code class="inline">socket.assigns.name</code> set from parameters.</p><h2 id="usage-with-liveview" class="section-heading">
  <a href="#usage-with-liveview" class="hover-link">
    <i class="ri-link-m" aria-hidden="true"></i>
  </a>
  <span class="text">Usage With LiveView</span>
</h2>
<p>Whilst Phoenix does ship with a JavaScript API for dealing with presence, it is also possible to extend the <code class="inline">HelloWeb.Presence</code> module to support <a href="https://hexdocs.pm/phoenix_live_view">LiveView</a>.</p><p>One thing to keep in mind when dealing with LiveView, is that each LiveView is a stateful process, so if we keep the presence state in the LiveView, each LiveView process will contain the full list of online users in memory. Instead, we can keep track of the online users within the <code class="inline">Presence</code> process, and pass separate events to the LiveView, which can use a stream to update the online list.</p><p>To start with, we need to update the <code class="inline">lib/hello_web/channels/presence.ex</code> file to add some optional callbacks to the <code class="inline">HelloWeb.Presence</code> module.</p><p>Firstly, we add the <code class="inline">init/1</code> callback. This allows us to keep track of the presence state within the process.</p><pre><code class="makeup elixir" translate="no"><span class="w">  </span><span class="kd">def</span><span class="w"> </span><span class="nf">init</span><span class="p" data-group-id="6722303530-1">(</span><span class="c">_opts</span><span class="p" data-group-id="6722303530-1">)</span><span class="w"> </span><span class="k" data-group-id="6722303530-2">do</span><span class="w">
    </span><span class="p" data-group-id="6722303530-3">{</span><span class="ss">:ok</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="6722303530-4">%{</span><span class="p" data-group-id="6722303530-4">}</span><span class="p" data-group-id="6722303530-3">}</span><span class="w">
  </span><span class="k" data-group-id="6722303530-2">end</span></code></pre><p>The presence module also allows a <code class="inline">fetch/2</code> callback, this allows the data fetched from the presence to be modified, allowing us to define the shape of the response. In this case we are adding an <code class="inline">id</code> and a <code class="inline">user</code> map.</p><pre><code class="makeup elixir" translate="no"><span class="w">  </span><span class="kd">def</span><span class="w"> </span><span class="nf">fetch</span><span class="p" data-group-id="4473331279-1">(</span><span class="c">_topic</span><span class="p">,</span><span class="w"> </span><span class="n">presences</span><span class="p" data-group-id="4473331279-1">)</span><span class="w"> </span><span class="k" data-group-id="4473331279-2">do</span><span class="w">
    </span><span class="k">for</span><span class="w"> </span><span class="p" data-group-id="4473331279-3">{</span><span class="n">key</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="4473331279-4">%{</span><span class="ss">metas</span><span class="p">:</span><span class="w"> </span><span class="p" data-group-id="4473331279-5">[</span><span class="n">meta</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">metas</span><span class="p" data-group-id="4473331279-5">]</span><span class="p" data-group-id="4473331279-4">}</span><span class="p" data-group-id="4473331279-3">}</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">presences</span><span class="p">,</span><span class="w"> </span><span class="ss">into</span><span class="p">:</span><span class="w"> </span><span class="p" data-group-id="4473331279-6">%{</span><span class="p" data-group-id="4473331279-6">}</span><span class="w"> </span><span class="k" data-group-id="4473331279-7">do</span><span class="w">
      </span><span class="c1"># user can be populated here from the database here we populate</span><span class="w">
      </span><span class="c1"># the name for demonstration purposes</span><span class="w">
      </span><span class="p" data-group-id="4473331279-8">{</span><span class="n">key</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="4473331279-9">%{</span><span class="ss">metas</span><span class="p">:</span><span class="w"> </span><span class="p" data-group-id="4473331279-10">[</span><span class="n">meta</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">metas</span><span class="p" data-group-id="4473331279-10">]</span><span class="p">,</span><span class="w"> </span><span class="ss">id</span><span class="p">:</span><span class="w"> </span><span class="n">meta</span><span class="o">.</span><span class="n">id</span><span class="p">,</span><span class="w"> </span><span class="ss">user</span><span class="p">:</span><span class="w"> </span><span class="p" data-group-id="4473331279-11">%{</span><span class="ss">name</span><span class="p">:</span><span class="w"> </span><span class="n">meta</span><span class="o">.</span><span class="n">id</span><span class="p" data-group-id="4473331279-11">}</span><span class="p" data-group-id="4473331279-9">}</span><span class="p" data-group-id="4473331279-8">}</span><span class="w">
    </span><span class="k" data-group-id="4473331279-7">end</span><span class="w">
  </span><span class="k" data-group-id="4473331279-2">end</span></code></pre><p>The final thing to add is the <code class="inline">handle_metas/4</code> callback. This callback updates the state that we keep track of in <code class="inline">HelloWeb.Presence</code> based on the user leaves and joins.</p><pre><code class="makeup elixir" translate="no"><span class="w">  </span><span class="kd">def</span><span class="w"> </span><span class="nf">handle_metas</span><span class="p" data-group-id="7729524353-1">(</span><span class="n">topic</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="7729524353-2">%{</span><span class="ss">joins</span><span class="p">:</span><span class="w"> </span><span class="n">joins</span><span class="p">,</span><span class="w"> </span><span class="ss">leaves</span><span class="p">:</span><span class="w"> </span><span class="n">leaves</span><span class="p" data-group-id="7729524353-2">}</span><span class="p">,</span><span class="w"> </span><span class="n">presences</span><span class="p">,</span><span class="w"> </span><span class="n">state</span><span class="p" data-group-id="7729524353-1">)</span><span class="w"> </span><span class="k" data-group-id="7729524353-3">do</span><span class="w">
    </span><span class="k">for</span><span class="w"> </span><span class="p" data-group-id="7729524353-4">{</span><span class="n">user_id</span><span class="p">,</span><span class="w"> </span><span class="n">presence</span><span class="p" data-group-id="7729524353-4">}</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">joins</span><span class="w"> </span><span class="k" data-group-id="7729524353-5">do</span><span class="w">
      </span><span class="n">user_data</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p" data-group-id="7729524353-6">%{</span><span class="ss">id</span><span class="p">:</span><span class="w"> </span><span class="n">user_id</span><span class="p">,</span><span class="w"> </span><span class="ss">user</span><span class="p">:</span><span class="w"> </span><span class="n">presence</span><span class="o">.</span><span class="n">user</span><span class="p">,</span><span class="w"> </span><span class="ss">metas</span><span class="p">:</span><span class="w"> </span><span class="nc">Map</span><span class="o">.</span><span class="n">fetch!</span><span class="p" data-group-id="7729524353-7">(</span><span class="n">presences</span><span class="p">,</span><span class="w"> </span><span class="n">user_id</span><span class="p" data-group-id="7729524353-7">)</span><span class="p" data-group-id="7729524353-6">}</span><span class="w">
      </span><span class="n">msg</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p" data-group-id="7729524353-8">{</span><span class="bp">__MODULE__</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="7729524353-9">{</span><span class="ss">:join</span><span class="p">,</span><span class="w"> </span><span class="n">user_data</span><span class="p" data-group-id="7729524353-9">}</span><span class="p" data-group-id="7729524353-8">}</span><span class="w">
      </span><span class="nc">Phoenix.PubSub</span><span class="o">.</span><span class="n">local_broadcast</span><span class="p" data-group-id="7729524353-10">(</span><span class="nc">Hello.PubSub</span><span class="p">,</span><span class="w"> </span><span class="s">&quot;proxy:</span><span class="si" data-group-id="7729524353-11">#{</span><span class="n">topic</span><span class="si" data-group-id="7729524353-11">}</span><span class="s">&quot;</span><span class="p">,</span><span class="w"> </span><span class="n">msg</span><span class="p" data-group-id="7729524353-10">)</span><span class="w">
    </span><span class="k" data-group-id="7729524353-5">end</span><span class="w">

    </span><span class="k">for</span><span class="w"> </span><span class="p" data-group-id="7729524353-12">{</span><span class="n">user_id</span><span class="p">,</span><span class="w"> </span><span class="n">presence</span><span class="p" data-group-id="7729524353-12">}</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">leaves</span><span class="w"> </span><span class="k" data-group-id="7729524353-13">do</span><span class="w">
      </span><span class="n">metas</span><span class="w"> </span><span class="o">=</span><span class="w">
        </span><span class="k">case</span><span class="w"> </span><span class="nc">Map</span><span class="o">.</span><span class="n">fetch</span><span class="p" data-group-id="7729524353-14">(</span><span class="n">presences</span><span class="p">,</span><span class="w"> </span><span class="n">user_id</span><span class="p" data-group-id="7729524353-14">)</span><span class="w"> </span><span class="k" data-group-id="7729524353-15">do</span><span class="w">
          </span><span class="p" data-group-id="7729524353-16">{</span><span class="ss">:ok</span><span class="p">,</span><span class="w"> </span><span class="n">presence_metas</span><span class="p" data-group-id="7729524353-16">}</span><span class="w"> </span><span class="o">-&gt;</span><span class="w"> </span><span class="n">presence_metas</span><span class="w">
          </span><span class="ss">:error</span><span class="w"> </span><span class="o">-&gt;</span><span class="w"> </span><span class="p" data-group-id="7729524353-17">[</span><span class="p" data-group-id="7729524353-17">]</span><span class="w">
        </span><span class="k" data-group-id="7729524353-15">end</span><span class="w">

      </span><span class="n">user_data</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p" data-group-id="7729524353-18">%{</span><span class="ss">id</span><span class="p">:</span><span class="w"> </span><span class="n">user_id</span><span class="p">,</span><span class="w"> </span><span class="ss">user</span><span class="p">:</span><span class="w"> </span><span class="n">presence</span><span class="o">.</span><span class="n">user</span><span class="p">,</span><span class="w"> </span><span class="ss">metas</span><span class="p">:</span><span class="w"> </span><span class="n">metas</span><span class="p" data-group-id="7729524353-18">}</span><span class="w">
      </span><span class="n">msg</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p" data-group-id="7729524353-19">{</span><span class="bp">__MODULE__</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="7729524353-20">{</span><span class="ss">:leave</span><span class="p">,</span><span class="w"> </span><span class="n">user_data</span><span class="p" data-group-id="7729524353-20">}</span><span class="p" data-group-id="7729524353-19">}</span><span class="w">
      </span><span class="nc">Phoenix.PubSub</span><span class="o">.</span><span class="n">local_broadcast</span><span class="p" data-group-id="7729524353-21">(</span><span class="nc">Hello.PubSub</span><span class="p">,</span><span class="w"> </span><span class="s">&quot;proxy:</span><span class="si" data-group-id="7729524353-22">#{</span><span class="n">topic</span><span class="si" data-group-id="7729524353-22">}</span><span class="s">&quot;</span><span class="p">,</span><span class="w"> </span><span class="n">msg</span><span class="p" data-group-id="7729524353-21">)</span><span class="w">
    </span><span class="k" data-group-id="7729524353-13">end</span><span class="w">

    </span><span class="p" data-group-id="7729524353-23">{</span><span class="ss">:ok</span><span class="p">,</span><span class="w"> </span><span class="n">state</span><span class="p" data-group-id="7729524353-23">}</span><span class="w">
  </span><span class="k" data-group-id="7729524353-3">end</span></code></pre><p>You can see that we are broadcasting events for the joins and leaves. These will be listened to by the LiveView process. You'll also see that we use &quot;proxy&quot; channel when broadcasting the joins and leaves. This is because we don't want our LiveView process to receive the presence events directly. We can add a few helper functions so that this particular implementation detail is abstracted from the LiveView module.</p><pre><code class="makeup elixir" translate="no"><span class="w">  </span><span class="kd">def</span><span class="w"> </span><span class="nf">list_online_users</span><span class="p" data-group-id="8460517685-1">(</span><span class="p" data-group-id="8460517685-1">)</span><span class="p">,</span><span class="w"> </span><span class="ss">do</span><span class="p">:</span><span class="w"> </span><span class="n">list</span><span class="p" data-group-id="8460517685-2">(</span><span class="s">&quot;online_users&quot;</span><span class="p" data-group-id="8460517685-2">)</span><span class="w"> </span><span class="o">|&gt;</span><span class="w"> </span><span class="nc">Enum</span><span class="o">.</span><span class="n">map</span><span class="p" data-group-id="8460517685-3">(</span><span class="k" data-group-id="8460517685-4">fn</span><span class="w"> </span><span class="p" data-group-id="8460517685-5">{</span><span class="c">_id</span><span class="p">,</span><span class="w"> </span><span class="n">presence</span><span class="p" data-group-id="8460517685-5">}</span><span class="w"> </span><span class="o">-&gt;</span><span class="w"> </span><span class="n">presence</span><span class="w"> </span><span class="k" data-group-id="8460517685-4">end</span><span class="p" data-group-id="8460517685-3">)</span><span class="w">

  </span><span class="kd">def</span><span class="w"> </span><span class="nf">track_user</span><span class="p" data-group-id="8460517685-6">(</span><span class="n">name</span><span class="p">,</span><span class="w"> </span><span class="n">params</span><span class="p" data-group-id="8460517685-6">)</span><span class="p">,</span><span class="w"> </span><span class="ss">do</span><span class="p">:</span><span class="w"> </span><span class="n">track</span><span class="p" data-group-id="8460517685-7">(</span><span class="n">self</span><span class="p" data-group-id="8460517685-8">(</span><span class="p" data-group-id="8460517685-8">)</span><span class="p">,</span><span class="w"> </span><span class="s">&quot;online_users&quot;</span><span class="p">,</span><span class="w"> </span><span class="n">name</span><span class="p">,</span><span class="w"> </span><span class="n">params</span><span class="p" data-group-id="8460517685-7">)</span><span class="w">

  </span><span class="kd">def</span><span class="w"> </span><span class="nf">subscribe</span><span class="p" data-group-id="8460517685-9">(</span><span class="p" data-group-id="8460517685-9">)</span><span class="p">,</span><span class="w"> </span><span class="ss">do</span><span class="p">:</span><span class="w"> </span><span class="nc">Phoenix.PubSub</span><span class="o">.</span><span class="n">subscribe</span><span class="p" data-group-id="8460517685-10">(</span><span class="nc">Hello.PubSub</span><span class="p">,</span><span class="w"> </span><span class="s">&quot;proxy:online_users&quot;</span><span class="p" data-group-id="8460517685-10">)</span></code></pre><p>Now that we have our presence module set up and broadcasting events, we can create a LiveView. Create a new file <code class="inline">lib/hello_web/live/online/index.ex</code> with the following contents:</p><pre><code class="makeup elixir" translate="no"><span class="kd">defmodule</span><span class="w"> </span><span class="nc">HelloWeb.OnlineLive</span><span class="w"> </span><span class="k" data-group-id="2581245063-1">do</span><span class="w">
  </span><span class="kn">use</span><span class="w"> </span><span class="nc">HelloWeb</span><span class="p">,</span><span class="w"> </span><span class="ss">:live_view</span><span class="w">

  </span><span class="kd">def</span><span class="w"> </span><span class="nf">mount</span><span class="p" data-group-id="2581245063-2">(</span><span class="n">params</span><span class="p">,</span><span class="w"> </span><span class="c">_session</span><span class="p">,</span><span class="w"> </span><span class="n">socket</span><span class="p" data-group-id="2581245063-2">)</span><span class="w"> </span><span class="k" data-group-id="2581245063-3">do</span><span class="w">
    </span><span class="n">socket</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">stream</span><span class="p" data-group-id="2581245063-4">(</span><span class="n">socket</span><span class="p">,</span><span class="w"> </span><span class="ss">:presences</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="2581245063-5">[</span><span class="p" data-group-id="2581245063-5">]</span><span class="p" data-group-id="2581245063-4">)</span><span class="w">
    </span><span class="n">socket</span><span class="w"> </span><span class="o">=</span><span class="w">
    </span><span class="k">if</span><span class="w"> </span><span class="n">connected?</span><span class="p" data-group-id="2581245063-6">(</span><span class="n">socket</span><span class="p" data-group-id="2581245063-6">)</span><span class="w"> </span><span class="k" data-group-id="2581245063-7">do</span><span class="w">
      </span><span class="nc">HelloWeb.Presence</span><span class="o">.</span><span class="n">track_user</span><span class="p" data-group-id="2581245063-8">(</span><span class="n">params</span><span class="p" data-group-id="2581245063-9">[</span><span class="s">&quot;name&quot;</span><span class="p" data-group-id="2581245063-9">]</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="2581245063-10">%{</span><span class="ss">id</span><span class="p">:</span><span class="w"> </span><span class="n">params</span><span class="p" data-group-id="2581245063-11">[</span><span class="s">&quot;name&quot;</span><span class="p" data-group-id="2581245063-11">]</span><span class="p" data-group-id="2581245063-10">}</span><span class="p" data-group-id="2581245063-8">)</span><span class="w">
      </span><span class="nc">HelloWeb.Presence</span><span class="o">.</span><span class="n">subscribe</span><span class="p" data-group-id="2581245063-12">(</span><span class="p" data-group-id="2581245063-12">)</span><span class="w">
      </span><span class="n">stream</span><span class="p" data-group-id="2581245063-13">(</span><span class="n">socket</span><span class="p">,</span><span class="w"> </span><span class="ss">:presences</span><span class="p">,</span><span class="w"> </span><span class="nc">HelloWeb.Presence</span><span class="o">.</span><span class="n">list_online_users</span><span class="p" data-group-id="2581245063-14">(</span><span class="p" data-group-id="2581245063-14">)</span><span class="p" data-group-id="2581245063-13">)</span><span class="w">
    </span><span class="k" data-group-id="2581245063-7">else</span><span class="w">
       </span><span class="n">socket</span><span class="w">
    </span><span class="k" data-group-id="2581245063-7">end</span><span class="w">

    </span><span class="p" data-group-id="2581245063-15">{</span><span class="ss">:ok</span><span class="p">,</span><span class="w"> </span><span class="n">socket</span><span class="p" data-group-id="2581245063-15">}</span><span class="w">
  </span><span class="k" data-group-id="2581245063-3">end</span><span class="w">

  </span><span class="kd">def</span><span class="w"> </span><span class="nf">render</span><span class="p" data-group-id="2581245063-16">(</span><span class="n">assigns</span><span class="p" data-group-id="2581245063-16">)</span><span class="w"> </span><span class="k" data-group-id="2581245063-17">do</span><span class="w">
    </span><span class="sx">~H&quot;&quot;&quot;</span><span class="w">
</span><span class="w">    </span><span class="p">&lt;</span><span class="nt">ul</span><span class="w"> </span><span class="ni">id</span><span class="p">=</span><span class="p">&quot;</span><span class="s2">online_users</span><span class="p">&quot;</span><span class="w"> </span><span class="ni">phx-update</span><span class="p">=</span><span class="p">&quot;</span><span class="s2">stream</span><span class="p">&quot;</span><span class="p">&gt;</span><span class="w">
</span><span class="w">      </span><span class="p">&lt;</span><span class="nt">li</span><span class="w"> </span><span class="ni">:for</span><span class="p">=</span><span class="p" data-group-id="0668195966-1">{</span><span class="p" data-group-id="2581245063-18">{</span><span class="n">dom_id</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="2581245063-19">%{</span><span class="ss">id</span><span class="p">:</span><span class="w"> </span><span class="n">id</span><span class="p">,</span><span class="w"> </span><span class="ss">metas</span><span class="p">:</span><span class="w"> </span><span class="n">metas</span><span class="p" data-group-id="2581245063-19">}</span><span class="p" data-group-id="2581245063-18">}</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="na">@streams</span><span class="o">.</span><span class="n">presences</span><span class="p" data-group-id="0668195966-1">}</span><span class="w"> </span><span class="ni">id</span><span class="p">=</span><span class="p" data-group-id="0668195966-2">{</span><span class="n">dom_id</span><span class="p" data-group-id="0668195966-2">}</span><span class="p">&gt;</span><span class="p" data-group-id="0668195966-3">{</span><span class="n">id</span><span class="p" data-group-id="0668195966-3">}</span><span class="n"> (</span><span class="p" data-group-id="0668195966-4">{</span><span class="n">length</span><span class="p" data-group-id="2581245063-20">(</span><span class="n">metas</span><span class="p" data-group-id="2581245063-20">)</span><span class="p" data-group-id="0668195966-4">}</span><span class="n">)</span><span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span><span class="w">
</span><span class="w">    </span><span class="p">&lt;/</span><span class="nt">ul</span><span class="p">&gt;</span><span class="w">
</span><span class="w">    </span><span class="sx">&quot;&quot;&quot;</span><span class="w">
  </span><span class="k" data-group-id="2581245063-17">end</span><span class="w">

  </span><span class="kd">def</span><span class="w"> </span><span class="nf">handle_info</span><span class="p" data-group-id="2581245063-21">(</span><span class="p" data-group-id="2581245063-22">{</span><span class="nc">HelloWeb.Presence</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="2581245063-23">{</span><span class="ss">:join</span><span class="p">,</span><span class="w"> </span><span class="n">presence</span><span class="p" data-group-id="2581245063-23">}</span><span class="p" data-group-id="2581245063-22">}</span><span class="p">,</span><span class="w"> </span><span class="n">socket</span><span class="p" data-group-id="2581245063-21">)</span><span class="w"> </span><span class="k" data-group-id="2581245063-24">do</span><span class="w">
    </span><span class="p" data-group-id="2581245063-25">{</span><span class="ss">:noreply</span><span class="p">,</span><span class="w"> </span><span class="n">stream_insert</span><span class="p" data-group-id="2581245063-26">(</span><span class="n">socket</span><span class="p">,</span><span class="w"> </span><span class="ss">:presences</span><span class="p">,</span><span class="w"> </span><span class="n">presence</span><span class="p" data-group-id="2581245063-26">)</span><span class="p" data-group-id="2581245063-25">}</span><span class="w">
  </span><span class="k" data-group-id="2581245063-24">end</span><span class="w">

  </span><span class="kd">def</span><span class="w"> </span><span class="nf">handle_info</span><span class="p" data-group-id="2581245063-27">(</span><span class="p" data-group-id="2581245063-28">{</span><span class="nc">HelloWeb.Presence</span><span class="p">,</span><span class="w"> </span><span class="p" data-group-id="2581245063-29">{</span><span class="ss">:leave</span><span class="p">,</span><span class="w"> </span><span class="n">presence</span><span class="p" data-group-id="2581245063-29">}</span><span class="p" data-group-id="2581245063-28">}</span><span class="p">,</span><span class="w"> </span><span class="n">socket</span><span class="p" data-group-id="2581245063-27">)</span><span class="w"> </span><span class="k" data-group-id="2581245063-30">do</span><span class="w">
    </span><span class="k">if</span><span class="w"> </span><span class="n">presence</span><span class="o">.</span><span class="n">metas</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="p" data-group-id="2581245063-31">[</span><span class="p" data-group-id="2581245063-31">]</span><span class="w"> </span><span class="k" data-group-id="2581245063-32">do</span><span class="w">
      </span><span class="p" data-group-id="2581245063-33">{</span><span class="ss">:noreply</span><span class="p">,</span><span class="w"> </span><span class="n">stream_delete</span><span class="p" data-group-id="2581245063-34">(</span><span class="n">socket</span><span class="p">,</span><span class="w"> </span><span class="ss">:presences</span><span class="p">,</span><span class="w"> </span><span class="n">presence</span><span class="p" data-group-id="2581245063-34">)</span><span class="p" data-group-id="2581245063-33">}</span><span class="w">
    </span><span class="k" data-group-id="2581245063-32">else</span><span class="w">
      </span><span class="p" data-group-id="2581245063-35">{</span><span class="ss">:noreply</span><span class="p">,</span><span class="w"> </span><span class="n">stream_insert</span><span class="p" data-group-id="2581245063-36">(</span><span class="n">socket</span><span class="p">,</span><span class="w"> </span><span class="ss">:presences</span><span class="p">,</span><span class="w"> </span><span class="n">presence</span><span class="p" data-group-id="2581245063-36">)</span><span class="p" data-group-id="2581245063-35">}</span><span class="w">
    </span><span class="k" data-group-id="2581245063-32">end</span><span class="w">
  </span><span class="k" data-group-id="2581245063-30">end</span><span class="w">
</span><span class="k" data-group-id="2581245063-1">end</span></code></pre><p>If we add this route to the <code class="inline">lib/hello_web/router.ex</code>:</p><pre><code class="makeup elixir" translate="no"><span class="w">    </span><span class="n">live</span><span class="w"> </span><span class="s">&quot;/online/:name&quot;</span><span class="p">,</span><span class="w"> </span><span class="nc">OnlineLive</span><span class="p">,</span><span class="w"> </span><span class="ss">:index</span></code></pre><p>Then we can navigate to <a href="http://localhost:4000/online/Alice">http://localhost:4000/online/Alice</a> in one tab, and <a href="http://localhost:4000/online/Bob">http://localhost:4000/online/Bob</a> in another, you'll see that the presences are tracked, along with the number of presences per user. Opening and closing tabs with various users will update the presence list in real-time.</p>

  </body>
</html>
